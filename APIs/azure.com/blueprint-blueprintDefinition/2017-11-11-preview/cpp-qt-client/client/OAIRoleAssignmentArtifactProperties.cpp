/**
 * BlueprintClient
 * Azure Blueprint Client.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleAssignmentArtifactProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleAssignmentArtifactProperties::OAIRoleAssignmentArtifactProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleAssignmentArtifactProperties::OAIRoleAssignmentArtifactProperties() {
    this->initializeModel();
}

OAIRoleAssignmentArtifactProperties::~OAIRoleAssignmentArtifactProperties() {}

void OAIRoleAssignmentArtifactProperties::initializeModel() {

    m_principal_ids_isSet = false;
    m_principal_ids_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_role_definition_id_isSet = false;
    m_role_definition_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_depends_on_isSet = false;
    m_depends_on_isValid = false;
}

void OAIRoleAssignmentArtifactProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleAssignmentArtifactProperties::fromJsonObject(QJsonObject json) {

    m_principal_ids_isValid = ::OpenAPI::fromJsonValue(m_principal_ids, json[QString("principalIds")]);
    m_principal_ids_isSet = !json[QString("principalIds")].isNull() && m_principal_ids_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_role_definition_id_isValid = ::OpenAPI::fromJsonValue(m_role_definition_id, json[QString("roleDefinitionId")]);
    m_role_definition_id_isSet = !json[QString("roleDefinitionId")].isNull() && m_role_definition_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_depends_on_isValid = ::OpenAPI::fromJsonValue(m_depends_on, json[QString("dependsOn")]);
    m_depends_on_isSet = !json[QString("dependsOn")].isNull() && m_depends_on_isValid;
}

QString OAIRoleAssignmentArtifactProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleAssignmentArtifactProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_ids_isSet) {
        obj.insert(QString("principalIds"), ::OpenAPI::toJsonValue(m_principal_ids));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_role_definition_id_isSet) {
        obj.insert(QString("roleDefinitionId"), ::OpenAPI::toJsonValue(m_role_definition_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_depends_on.size() > 0) {
        obj.insert(QString("dependsOn"), ::OpenAPI::toJsonValue(m_depends_on));
    }
    return obj;
}

OAIObject OAIRoleAssignmentArtifactProperties::getPrincipalIds() const {
    return m_principal_ids;
}
void OAIRoleAssignmentArtifactProperties::setPrincipalIds(const OAIObject &principal_ids) {
    m_principal_ids = principal_ids;
    m_principal_ids_isSet = true;
}

bool OAIRoleAssignmentArtifactProperties::is_principal_ids_Set() const{
    return m_principal_ids_isSet;
}

bool OAIRoleAssignmentArtifactProperties::is_principal_ids_Valid() const{
    return m_principal_ids_isValid;
}

QString OAIRoleAssignmentArtifactProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIRoleAssignmentArtifactProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIRoleAssignmentArtifactProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIRoleAssignmentArtifactProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIRoleAssignmentArtifactProperties::getRoleDefinitionId() const {
    return m_role_definition_id;
}
void OAIRoleAssignmentArtifactProperties::setRoleDefinitionId(const QString &role_definition_id) {
    m_role_definition_id = role_definition_id;
    m_role_definition_id_isSet = true;
}

bool OAIRoleAssignmentArtifactProperties::is_role_definition_id_Set() const{
    return m_role_definition_id_isSet;
}

bool OAIRoleAssignmentArtifactProperties::is_role_definition_id_Valid() const{
    return m_role_definition_id_isValid;
}

QString OAIRoleAssignmentArtifactProperties::getDescription() const {
    return m_description;
}
void OAIRoleAssignmentArtifactProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoleAssignmentArtifactProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoleAssignmentArtifactProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRoleAssignmentArtifactProperties::getDisplayName() const {
    return m_display_name;
}
void OAIRoleAssignmentArtifactProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRoleAssignmentArtifactProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRoleAssignmentArtifactProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIRoleAssignmentArtifactProperties::getDependsOn() const {
    return m_depends_on;
}
void OAIRoleAssignmentArtifactProperties::setDependsOn(const QList<QString> &depends_on) {
    m_depends_on = depends_on;
    m_depends_on_isSet = true;
}

bool OAIRoleAssignmentArtifactProperties::is_depends_on_Set() const{
    return m_depends_on_isSet;
}

bool OAIRoleAssignmentArtifactProperties::is_depends_on_Valid() const{
    return m_depends_on_isValid;
}

bool OAIRoleAssignmentArtifactProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_ids_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depends_on.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleAssignmentArtifactProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_principal_ids_isValid && m_role_definition_id_isValid && true;
}

} // namespace OpenAPI
