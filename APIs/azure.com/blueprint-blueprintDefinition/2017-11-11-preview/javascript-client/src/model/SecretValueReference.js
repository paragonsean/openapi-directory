/**
 * BlueprintClient
 * Azure Blueprint Client.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyVaultReference from './KeyVaultReference';

/**
 * The SecretValueReference model module.
 * @module model/SecretValueReference
 * @version 2017-11-11-preview
 */
class SecretValueReference {
    /**
     * Constructs a new <code>SecretValueReference</code>.
     * Reference to a KeyVault secret.
     * @alias module:model/SecretValueReference
     * @param keyVault {module:model/KeyVaultReference} 
     * @param secretName {String} Name of the secret.
     */
    constructor(keyVault, secretName) { 
        
        SecretValueReference.initialize(this, keyVault, secretName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyVault, secretName) { 
        obj['keyVault'] = keyVault;
        obj['secretName'] = secretName;
    }

    /**
     * Constructs a <code>SecretValueReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretValueReference} obj Optional instance to populate.
     * @return {module:model/SecretValueReference} The populated <code>SecretValueReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecretValueReference();

            if (data.hasOwnProperty('keyVault')) {
                obj['keyVault'] = KeyVaultReference.constructFromObject(data['keyVault']);
            }
            if (data.hasOwnProperty('secretName')) {
                obj['secretName'] = ApiClient.convertToType(data['secretName'], 'String');
            }
            if (data.hasOwnProperty('secretVersion')) {
                obj['secretVersion'] = ApiClient.convertToType(data['secretVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecretValueReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecretValueReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SecretValueReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `keyVault`
        if (data['keyVault']) { // data not null
          KeyVaultReference.validateJSON(data['keyVault']);
        }
        // ensure the json data is a string
        if (data['secretName'] && !(typeof data['secretName'] === 'string' || data['secretName'] instanceof String)) {
            throw new Error("Expected the field `secretName` to be a primitive type in the JSON string but got " + data['secretName']);
        }
        // ensure the json data is a string
        if (data['secretVersion'] && !(typeof data['secretVersion'] === 'string' || data['secretVersion'] instanceof String)) {
            throw new Error("Expected the field `secretVersion` to be a primitive type in the JSON string but got " + data['secretVersion']);
        }

        return true;
    }


}

SecretValueReference.RequiredProperties = ["keyVault", "secretName"];

/**
 * @member {module:model/KeyVaultReference} keyVault
 */
SecretValueReference.prototype['keyVault'] = undefined;

/**
 * Name of the secret.
 * @member {String} secretName
 */
SecretValueReference.prototype['secretName'] = undefined;

/**
 * Version of the secret, (if there are multiple versions)
 * @member {String} secretVersion
 */
SecretValueReference.prototype['secretVersion'] = undefined;






export default SecretValueReference;

