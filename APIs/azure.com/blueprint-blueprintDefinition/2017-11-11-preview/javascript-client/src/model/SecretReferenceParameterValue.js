/**
 * BlueprintClient
 * Azure Blueprint Client.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterValueBase from './ParameterValueBase';
import SecretValueReference from './SecretValueReference';

/**
 * The SecretReferenceParameterValue model module.
 * @module model/SecretReferenceParameterValue
 * @version 2017-11-11-preview
 */
class SecretReferenceParameterValue {
    /**
     * Constructs a new <code>SecretReferenceParameterValue</code>.
     * The reference to a secret, if the parameter should be protected.
     * @alias module:model/SecretReferenceParameterValue
     * @implements module:model/ParameterValueBase
     */
    constructor() { 
        ParameterValueBase.initialize(this);
        SecretReferenceParameterValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['reference'] = reference;
    }

    /**
     * Constructs a <code>SecretReferenceParameterValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecretReferenceParameterValue} obj Optional instance to populate.
     * @return {module:model/SecretReferenceParameterValue} The populated <code>SecretReferenceParameterValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecretReferenceParameterValue();
            ParameterValueBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('reference')) {
                obj['reference'] = SecretValueReference.constructFromObject(data['reference']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecretReferenceParameterValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecretReferenceParameterValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SecretReferenceParameterValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `reference`
        if (data['reference']) { // data not null
          SecretValueReference.validateJSON(data['reference']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

SecretReferenceParameterValue.RequiredProperties = ["reference"];

/**
 * @member {module:model/SecretValueReference} reference
 */
SecretReferenceParameterValue.prototype['reference'] = undefined;

/**
 * Optional property, just to establish ParameterValueBase as a BaseClass.
 * @member {String} description
 */
SecretReferenceParameterValue.prototype['description'] = undefined;


// Implement ParameterValueBase interface:
/**
 * Optional property, just to establish ParameterValueBase as a BaseClass.
 * @member {String} description
 */
ParameterValueBase.prototype['description'] = undefined;




export default SecretReferenceParameterValue;

