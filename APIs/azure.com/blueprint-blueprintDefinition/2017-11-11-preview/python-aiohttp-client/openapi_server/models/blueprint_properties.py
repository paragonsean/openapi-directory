# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blueprint_status import BlueprintStatus
from openapi_server.models.parameter_definition import ParameterDefinition
from openapi_server.models.resource_group_definition import ResourceGroupDefinition
from openapi_server import util


class BlueprintProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, layout: object=None, versions: object=None, parameters: Dict[str, ParameterDefinition]=None, resource_groups: Dict[str, ResourceGroupDefinition]=None, status: BlueprintStatus=None, target_scope: str=None, description: str=None, display_name: str=None):
        """BlueprintProperties - a model defined in OpenAPI

        :param layout: The layout of this BlueprintProperties.
        :param versions: The versions of this BlueprintProperties.
        :param parameters: The parameters of this BlueprintProperties.
        :param resource_groups: The resource_groups of this BlueprintProperties.
        :param status: The status of this BlueprintProperties.
        :param target_scope: The target_scope of this BlueprintProperties.
        :param description: The description of this BlueprintProperties.
        :param display_name: The display_name of this BlueprintProperties.
        """
        self.openapi_types = {
            'layout': object,
            'versions': object,
            'parameters': Dict[str, ParameterDefinition],
            'resource_groups': Dict[str, ResourceGroupDefinition],
            'status': BlueprintStatus,
            'target_scope': str,
            'description': str,
            'display_name': str
        }

        self.attribute_map = {
            'layout': 'layout',
            'versions': 'versions',
            'parameters': 'parameters',
            'resource_groups': 'resourceGroups',
            'status': 'status',
            'target_scope': 'targetScope',
            'description': 'description',
            'display_name': 'displayName'
        }

        self._layout = layout
        self._versions = versions
        self._parameters = parameters
        self._resource_groups = resource_groups
        self._status = status
        self._target_scope = target_scope
        self._description = description
        self._display_name = display_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlueprintProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlueprintProperties of this BlueprintProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def layout(self):
        """Gets the layout of this BlueprintProperties.

        Layout view of the blueprint, for UI reference.

        :return: The layout of this BlueprintProperties.
        :rtype: object
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this BlueprintProperties.

        Layout view of the blueprint, for UI reference.

        :param layout: The layout of this BlueprintProperties.
        :type layout: object
        """

        self._layout = layout

    @property
    def versions(self):
        """Gets the versions of this BlueprintProperties.

        Published versions of this blueprint.

        :return: The versions of this BlueprintProperties.
        :rtype: object
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this BlueprintProperties.

        Published versions of this blueprint.

        :param versions: The versions of this BlueprintProperties.
        :type versions: object
        """

        self._versions = versions

    @property
    def parameters(self):
        """Gets the parameters of this BlueprintProperties.

        A dictionary hold parameter name and it's metadata.

        :return: The parameters of this BlueprintProperties.
        :rtype: Dict[str, ParameterDefinition]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this BlueprintProperties.

        A dictionary hold parameter name and it's metadata.

        :param parameters: The parameters of this BlueprintProperties.
        :type parameters: Dict[str, ParameterDefinition]
        """

        self._parameters = parameters

    @property
    def resource_groups(self):
        """Gets the resource_groups of this BlueprintProperties.

        A dictionary which maps resource group placeholders to the resource groups which will be created.

        :return: The resource_groups of this BlueprintProperties.
        :rtype: Dict[str, ResourceGroupDefinition]
        """
        return self._resource_groups

    @resource_groups.setter
    def resource_groups(self, resource_groups):
        """Sets the resource_groups of this BlueprintProperties.

        A dictionary which maps resource group placeholders to the resource groups which will be created.

        :param resource_groups: The resource_groups of this BlueprintProperties.
        :type resource_groups: Dict[str, ResourceGroupDefinition]
        """

        self._resource_groups = resource_groups

    @property
    def status(self):
        """Gets the status of this BlueprintProperties.


        :return: The status of this BlueprintProperties.
        :rtype: BlueprintStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BlueprintProperties.


        :param status: The status of this BlueprintProperties.
        :type status: BlueprintStatus
        """

        self._status = status

    @property
    def target_scope(self):
        """Gets the target_scope of this BlueprintProperties.

        The scope where this Blueprint can be applied.

        :return: The target_scope of this BlueprintProperties.
        :rtype: str
        """
        return self._target_scope

    @target_scope.setter
    def target_scope(self, target_scope):
        """Sets the target_scope of this BlueprintProperties.

        The scope where this Blueprint can be applied.

        :param target_scope: The target_scope of this BlueprintProperties.
        :type target_scope: str
        """
        allowed_values = ["subscription", "managementGroup"]  # noqa: E501
        if target_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `target_scope` ({0}), must be one of {1}"
                .format(target_scope, allowed_values)
            )

        self._target_scope = target_scope

    @property
    def description(self):
        """Gets the description of this BlueprintProperties.

        Multi-line explain this resource.

        :return: The description of this BlueprintProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BlueprintProperties.

        Multi-line explain this resource.

        :param description: The description of this BlueprintProperties.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this BlueprintProperties.

        One-liner string explain this resource.

        :return: The display_name of this BlueprintProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BlueprintProperties.

        One-liner string explain this resource.

        :param display_name: The display_name of this BlueprintProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 256:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")

        self._display_name = display_name
