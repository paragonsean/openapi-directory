# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoleAssignmentArtifactProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal_ids: object=None, resource_group: str=None, role_definition_id: str=None, description: str=None, display_name: str=None, depends_on: List[str]=None):
        """RoleAssignmentArtifactProperties - a model defined in OpenAPI

        :param principal_ids: The principal_ids of this RoleAssignmentArtifactProperties.
        :param resource_group: The resource_group of this RoleAssignmentArtifactProperties.
        :param role_definition_id: The role_definition_id of this RoleAssignmentArtifactProperties.
        :param description: The description of this RoleAssignmentArtifactProperties.
        :param display_name: The display_name of this RoleAssignmentArtifactProperties.
        :param depends_on: The depends_on of this RoleAssignmentArtifactProperties.
        """
        self.openapi_types = {
            'principal_ids': object,
            'resource_group': str,
            'role_definition_id': str,
            'description': str,
            'display_name': str,
            'depends_on': List[str]
        }

        self.attribute_map = {
            'principal_ids': 'principalIds',
            'resource_group': 'resourceGroup',
            'role_definition_id': 'roleDefinitionId',
            'description': 'description',
            'display_name': 'displayName',
            'depends_on': 'dependsOn'
        }

        self._principal_ids = principal_ids
        self._resource_group = resource_group
        self._role_definition_id = role_definition_id
        self._description = description
        self._display_name = display_name
        self._depends_on = depends_on

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleAssignmentArtifactProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleAssignmentArtifactProperties of this RoleAssignmentArtifactProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal_ids(self):
        """Gets the principal_ids of this RoleAssignmentArtifactProperties.

        Array of user or group identities in Azure Active Directory. The roleDefinition will apply to these identity.

        :return: The principal_ids of this RoleAssignmentArtifactProperties.
        :rtype: object
        """
        return self._principal_ids

    @principal_ids.setter
    def principal_ids(self, principal_ids):
        """Sets the principal_ids of this RoleAssignmentArtifactProperties.

        Array of user or group identities in Azure Active Directory. The roleDefinition will apply to these identity.

        :param principal_ids: The principal_ids of this RoleAssignmentArtifactProperties.
        :type principal_ids: object
        """
        if principal_ids is None:
            raise ValueError("Invalid value for `principal_ids`, must not be `None`")

        self._principal_ids = principal_ids

    @property
    def resource_group(self):
        """Gets the resource_group of this RoleAssignmentArtifactProperties.

        RoleAssignment will be scope to this resourceGroup, if left empty, it would scope to the subscription.

        :return: The resource_group of this RoleAssignmentArtifactProperties.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this RoleAssignmentArtifactProperties.

        RoleAssignment will be scope to this resourceGroup, if left empty, it would scope to the subscription.

        :param resource_group: The resource_group of this RoleAssignmentArtifactProperties.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def role_definition_id(self):
        """Gets the role_definition_id of this RoleAssignmentArtifactProperties.

        Azure resource ID of the RoleDefinition.

        :return: The role_definition_id of this RoleAssignmentArtifactProperties.
        :rtype: str
        """
        return self._role_definition_id

    @role_definition_id.setter
    def role_definition_id(self, role_definition_id):
        """Sets the role_definition_id of this RoleAssignmentArtifactProperties.

        Azure resource ID of the RoleDefinition.

        :param role_definition_id: The role_definition_id of this RoleAssignmentArtifactProperties.
        :type role_definition_id: str
        """
        if role_definition_id is None:
            raise ValueError("Invalid value for `role_definition_id`, must not be `None`")

        self._role_definition_id = role_definition_id

    @property
    def description(self):
        """Gets the description of this RoleAssignmentArtifactProperties.

        Multi-line explain this resource.

        :return: The description of this RoleAssignmentArtifactProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoleAssignmentArtifactProperties.

        Multi-line explain this resource.

        :param description: The description of this RoleAssignmentArtifactProperties.
        :type description: str
        """
        if description is not None and len(description) > 500:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `500`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this RoleAssignmentArtifactProperties.

        One-liner string explain this resource.

        :return: The display_name of this RoleAssignmentArtifactProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RoleAssignmentArtifactProperties.

        One-liner string explain this resource.

        :param display_name: The display_name of this RoleAssignmentArtifactProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 256:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")

        self._display_name = display_name

    @property
    def depends_on(self):
        """Gets the depends_on of this RoleAssignmentArtifactProperties.

        Artifacts which need to be deployed before the specified artifact.

        :return: The depends_on of this RoleAssignmentArtifactProperties.
        :rtype: List[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this RoleAssignmentArtifactProperties.

        Artifacts which need to be deployed before the specified artifact.

        :param depends_on: The depends_on of this RoleAssignmentArtifactProperties.
        :type depends_on: List[str]
        """

        self._depends_on = depends_on
