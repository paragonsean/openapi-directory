# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_definition_metadata import ParameterDefinitionMetadata
from openapi_server import util


class ResourceGroupDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, depends_on: List[str]=None, location: str=None, metadata: ParameterDefinitionMetadata=None, name: str=None):
        """ResourceGroupDefinition - a model defined in OpenAPI

        :param depends_on: The depends_on of this ResourceGroupDefinition.
        :param location: The location of this ResourceGroupDefinition.
        :param metadata: The metadata of this ResourceGroupDefinition.
        :param name: The name of this ResourceGroupDefinition.
        """
        self.openapi_types = {
            'depends_on': List[str],
            'location': str,
            'metadata': ParameterDefinitionMetadata,
            'name': str
        }

        self.attribute_map = {
            'depends_on': 'dependsOn',
            'location': 'location',
            'metadata': 'metadata',
            'name': 'name'
        }

        self._depends_on = depends_on
        self._location = location
        self._metadata = metadata
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceGroupDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceGroupDefinition of this ResourceGroupDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def depends_on(self):
        """Gets the depends_on of this ResourceGroupDefinition.

        Artifacts which need to be deployed before this resource group.

        :return: The depends_on of this ResourceGroupDefinition.
        :rtype: List[str]
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """Sets the depends_on of this ResourceGroupDefinition.

        Artifacts which need to be deployed before this resource group.

        :param depends_on: The depends_on of this ResourceGroupDefinition.
        :type depends_on: List[str]
        """

        self._depends_on = depends_on

    @property
    def location(self):
        """Gets the location of this ResourceGroupDefinition.

        Location of this resourceGroup, leave empty if the resource group location will be specified during the Blueprint assignment.

        :return: The location of this ResourceGroupDefinition.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ResourceGroupDefinition.

        Location of this resourceGroup, leave empty if the resource group location will be specified during the Blueprint assignment.

        :param location: The location of this ResourceGroupDefinition.
        :type location: str
        """
        if location is not None and len(location) > 90:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `90`")

        self._location = location

    @property
    def metadata(self):
        """Gets the metadata of this ResourceGroupDefinition.


        :return: The metadata of this ResourceGroupDefinition.
        :rtype: ParameterDefinitionMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ResourceGroupDefinition.


        :param metadata: The metadata of this ResourceGroupDefinition.
        :type metadata: ParameterDefinitionMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ResourceGroupDefinition.

        Name of this resourceGroup, leave empty if the resource group name will be specified during the Blueprint assignment.

        :return: The name of this ResourceGroupDefinition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceGroupDefinition.

        Name of this resourceGroup, leave empty if the resource group name will be specified during the Blueprint assignment.

        :param name: The name of this ResourceGroupDefinition.
        :type name: str
        """
        if name is not None and len(name) > 90:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `90`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name
