# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_reference import KeyVaultReference
from openapi_server import util


class SecretValueReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_vault: KeyVaultReference=None, secret_name: str=None, secret_version: str=None):
        """SecretValueReference - a model defined in OpenAPI

        :param key_vault: The key_vault of this SecretValueReference.
        :param secret_name: The secret_name of this SecretValueReference.
        :param secret_version: The secret_version of this SecretValueReference.
        """
        self.openapi_types = {
            'key_vault': KeyVaultReference,
            'secret_name': str,
            'secret_version': str
        }

        self.attribute_map = {
            'key_vault': 'keyVault',
            'secret_name': 'secretName',
            'secret_version': 'secretVersion'
        }

        self._key_vault = key_vault
        self._secret_name = secret_name
        self._secret_version = secret_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecretValueReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecretValueReference of this SecretValueReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_vault(self):
        """Gets the key_vault of this SecretValueReference.


        :return: The key_vault of this SecretValueReference.
        :rtype: KeyVaultReference
        """
        return self._key_vault

    @key_vault.setter
    def key_vault(self, key_vault):
        """Sets the key_vault of this SecretValueReference.


        :param key_vault: The key_vault of this SecretValueReference.
        :type key_vault: KeyVaultReference
        """
        if key_vault is None:
            raise ValueError("Invalid value for `key_vault`, must not be `None`")

        self._key_vault = key_vault

    @property
    def secret_name(self):
        """Gets the secret_name of this SecretValueReference.

        Name of the secret.

        :return: The secret_name of this SecretValueReference.
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this SecretValueReference.

        Name of the secret.

        :param secret_name: The secret_name of this SecretValueReference.
        :type secret_name: str
        """
        if secret_name is None:
            raise ValueError("Invalid value for `secret_name`, must not be `None`")

        self._secret_name = secret_name

    @property
    def secret_version(self):
        """Gets the secret_version of this SecretValueReference.

        Version of the secret, (if there are multiple versions)

        :return: The secret_version of this SecretValueReference.
        :rtype: str
        """
        return self._secret_version

    @secret_version.setter
    def secret_version(self, secret_version):
        """Sets the secret_version of this SecretValueReference.

        Version of the secret, (if there are multiple versions)

        :param secret_version: The secret_version of this SecretValueReference.
        :type secret_version: str
        """

        self._secret_version = secret_version
