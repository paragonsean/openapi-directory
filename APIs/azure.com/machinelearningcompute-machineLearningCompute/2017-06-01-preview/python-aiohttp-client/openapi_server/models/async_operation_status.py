# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.async_operation_error_info import AsyncOperationErrorInfo
from openapi_server import util


class AsyncOperationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, error_info: AsyncOperationErrorInfo=None, id: str=None, name: str=None, percent_complete: float=None, provisioning_state: str=None, start_time: datetime=None):
        """AsyncOperationStatus - a model defined in OpenAPI

        :param end_time: The end_time of this AsyncOperationStatus.
        :param error_info: The error_info of this AsyncOperationStatus.
        :param id: The id of this AsyncOperationStatus.
        :param name: The name of this AsyncOperationStatus.
        :param percent_complete: The percent_complete of this AsyncOperationStatus.
        :param provisioning_state: The provisioning_state of this AsyncOperationStatus.
        :param start_time: The start_time of this AsyncOperationStatus.
        """
        self.openapi_types = {
            'end_time': datetime,
            'error_info': AsyncOperationErrorInfo,
            'id': str,
            'name': str,
            'percent_complete': float,
            'provisioning_state': str,
            'start_time': datetime
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'error_info': 'errorInfo',
            'id': 'id',
            'name': 'name',
            'percent_complete': 'percentComplete',
            'provisioning_state': 'provisioningState',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._error_info = error_info
        self._id = id
        self._name = name
        self._percent_complete = percent_complete
        self._provisioning_state = provisioning_state
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsyncOperationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsyncOperationStatus of this AsyncOperationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this AsyncOperationStatus.

        The date time that the async operation finished.

        :return: The end_time of this AsyncOperationStatus.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AsyncOperationStatus.

        The date time that the async operation finished.

        :param end_time: The end_time of this AsyncOperationStatus.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def error_info(self):
        """Gets the error_info of this AsyncOperationStatus.


        :return: The error_info of this AsyncOperationStatus.
        :rtype: AsyncOperationErrorInfo
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this AsyncOperationStatus.


        :param error_info: The error_info of this AsyncOperationStatus.
        :type error_info: AsyncOperationErrorInfo
        """

        self._error_info = error_info

    @property
    def id(self):
        """Gets the id of this AsyncOperationStatus.

        Async operation id.

        :return: The id of this AsyncOperationStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsyncOperationStatus.

        Async operation id.

        :param id: The id of this AsyncOperationStatus.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AsyncOperationStatus.

        Async operation name.

        :return: The name of this AsyncOperationStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AsyncOperationStatus.

        Async operation name.

        :param name: The name of this AsyncOperationStatus.
        :type name: str
        """

        self._name = name

    @property
    def percent_complete(self):
        """Gets the percent_complete of this AsyncOperationStatus.

        Async operation progress.

        :return: The percent_complete of this AsyncOperationStatus.
        :rtype: float
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this AsyncOperationStatus.

        Async operation progress.

        :param percent_complete: The percent_complete of this AsyncOperationStatus.
        :type percent_complete: float
        """

        self._percent_complete = percent_complete

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this AsyncOperationStatus.

        Read Only: The provisioning state of the cluster. Valid values are Unknown, Provisioning, Succeeded, and Failed.

        :return: The provisioning_state of this AsyncOperationStatus.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this AsyncOperationStatus.

        Read Only: The provisioning state of the cluster. Valid values are Unknown, Provisioning, Succeeded, and Failed.

        :param provisioning_state: The provisioning_state of this AsyncOperationStatus.
        :type provisioning_state: str
        """
        allowed_values = ["Unknown", "Updating", "Creating", "Succeeded", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def start_time(self):
        """Gets the start_time of this AsyncOperationStatus.

        The date time that the async operation started.

        :return: The start_time of this AsyncOperationStatus.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AsyncOperationStatus.

        The date time that the async operation started.

        :param start_time: The start_time of this AsyncOperationStatus.
        :type start_time: datetime
        """

        self._start_time = start_time
