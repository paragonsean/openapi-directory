# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_principal_properties import ServicePrincipalProperties
from openapi_server import util


class KubernetesClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_principal: ServicePrincipalProperties=None):
        """KubernetesClusterProperties - a model defined in OpenAPI

        :param service_principal: The service_principal of this KubernetesClusterProperties.
        """
        self.openapi_types = {
            'service_principal': ServicePrincipalProperties
        }

        self.attribute_map = {
            'service_principal': 'servicePrincipal'
        }

        self._service_principal = service_principal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KubernetesClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KubernetesClusterProperties of this KubernetesClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_principal(self):
        """Gets the service_principal of this KubernetesClusterProperties.


        :return: The service_principal of this KubernetesClusterProperties.
        :rtype: ServicePrincipalProperties
        """
        return self._service_principal

    @service_principal.setter
    def service_principal(self, service_principal):
        """Sets the service_principal of this KubernetesClusterProperties.


        :param service_principal: The service_principal of this KubernetesClusterProperties.
        :type service_principal: ServicePrincipalProperties
        """
        if service_principal is None:
            raise ValueError("Invalid value for `service_principal`, must not be `None`")

        self._service_principal = service_principal
