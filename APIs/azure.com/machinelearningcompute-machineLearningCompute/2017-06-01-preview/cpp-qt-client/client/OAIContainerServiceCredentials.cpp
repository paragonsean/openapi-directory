/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerServiceCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerServiceCredentials::OAIContainerServiceCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerServiceCredentials::OAIContainerServiceCredentials() {
    this->initializeModel();
}

OAIContainerServiceCredentials::~OAIContainerServiceCredentials() {}

void OAIContainerServiceCredentials::initializeModel() {

    m_acs_kube_config_isSet = false;
    m_acs_kube_config_isValid = false;

    m_image_pull_secret_name_isSet = false;
    m_image_pull_secret_name_isValid = false;

    m_service_principal_configuration_isSet = false;
    m_service_principal_configuration_isValid = false;
}

void OAIContainerServiceCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerServiceCredentials::fromJsonObject(QJsonObject json) {

    m_acs_kube_config_isValid = ::OpenAPI::fromJsonValue(m_acs_kube_config, json[QString("acsKubeConfig")]);
    m_acs_kube_config_isSet = !json[QString("acsKubeConfig")].isNull() && m_acs_kube_config_isValid;

    m_image_pull_secret_name_isValid = ::OpenAPI::fromJsonValue(m_image_pull_secret_name, json[QString("imagePullSecretName")]);
    m_image_pull_secret_name_isSet = !json[QString("imagePullSecretName")].isNull() && m_image_pull_secret_name_isValid;

    m_service_principal_configuration_isValid = ::OpenAPI::fromJsonValue(m_service_principal_configuration, json[QString("servicePrincipalConfiguration")]);
    m_service_principal_configuration_isSet = !json[QString("servicePrincipalConfiguration")].isNull() && m_service_principal_configuration_isValid;
}

QString OAIContainerServiceCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerServiceCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_acs_kube_config_isSet) {
        obj.insert(QString("acsKubeConfig"), ::OpenAPI::toJsonValue(m_acs_kube_config));
    }
    if (m_image_pull_secret_name_isSet) {
        obj.insert(QString("imagePullSecretName"), ::OpenAPI::toJsonValue(m_image_pull_secret_name));
    }
    if (m_service_principal_configuration.isSet()) {
        obj.insert(QString("servicePrincipalConfiguration"), ::OpenAPI::toJsonValue(m_service_principal_configuration));
    }
    return obj;
}

QString OAIContainerServiceCredentials::getAcsKubeConfig() const {
    return m_acs_kube_config;
}
void OAIContainerServiceCredentials::setAcsKubeConfig(const QString &acs_kube_config) {
    m_acs_kube_config = acs_kube_config;
    m_acs_kube_config_isSet = true;
}

bool OAIContainerServiceCredentials::is_acs_kube_config_Set() const{
    return m_acs_kube_config_isSet;
}

bool OAIContainerServiceCredentials::is_acs_kube_config_Valid() const{
    return m_acs_kube_config_isValid;
}

QString OAIContainerServiceCredentials::getImagePullSecretName() const {
    return m_image_pull_secret_name;
}
void OAIContainerServiceCredentials::setImagePullSecretName(const QString &image_pull_secret_name) {
    m_image_pull_secret_name = image_pull_secret_name;
    m_image_pull_secret_name_isSet = true;
}

bool OAIContainerServiceCredentials::is_image_pull_secret_name_Set() const{
    return m_image_pull_secret_name_isSet;
}

bool OAIContainerServiceCredentials::is_image_pull_secret_name_Valid() const{
    return m_image_pull_secret_name_isValid;
}

OAIServicePrincipalProperties OAIContainerServiceCredentials::getServicePrincipalConfiguration() const {
    return m_service_principal_configuration;
}
void OAIContainerServiceCredentials::setServicePrincipalConfiguration(const OAIServicePrincipalProperties &service_principal_configuration) {
    m_service_principal_configuration = service_principal_configuration;
    m_service_principal_configuration_isSet = true;
}

bool OAIContainerServiceCredentials::is_service_principal_configuration_Set() const{
    return m_service_principal_configuration_isSet;
}

bool OAIContainerServiceCredentials::is_service_principal_configuration_Valid() const{
    return m_service_principal_configuration_isValid;
}

bool OAIContainerServiceCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acs_kube_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_pull_secret_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerServiceCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
