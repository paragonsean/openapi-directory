/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationalizationClusterCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationalizationClusterCredentials::OAIOperationalizationClusterCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationalizationClusterCredentials::OAIOperationalizationClusterCredentials() {
    this->initializeModel();
}

OAIOperationalizationClusterCredentials::~OAIOperationalizationClusterCredentials() {}

void OAIOperationalizationClusterCredentials::initializeModel() {

    m_app_insights_isSet = false;
    m_app_insights_isValid = false;

    m_container_registry_isSet = false;
    m_container_registry_isValid = false;

    m_container_service_isSet = false;
    m_container_service_isValid = false;

    m_service_auth_configuration_isSet = false;
    m_service_auth_configuration_isValid = false;

    m_ssl_configuration_isSet = false;
    m_ssl_configuration_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;
}

void OAIOperationalizationClusterCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationalizationClusterCredentials::fromJsonObject(QJsonObject json) {

    m_app_insights_isValid = ::OpenAPI::fromJsonValue(m_app_insights, json[QString("appInsights")]);
    m_app_insights_isSet = !json[QString("appInsights")].isNull() && m_app_insights_isValid;

    m_container_registry_isValid = ::OpenAPI::fromJsonValue(m_container_registry, json[QString("containerRegistry")]);
    m_container_registry_isSet = !json[QString("containerRegistry")].isNull() && m_container_registry_isValid;

    m_container_service_isValid = ::OpenAPI::fromJsonValue(m_container_service, json[QString("containerService")]);
    m_container_service_isSet = !json[QString("containerService")].isNull() && m_container_service_isValid;

    m_service_auth_configuration_isValid = ::OpenAPI::fromJsonValue(m_service_auth_configuration, json[QString("serviceAuthConfiguration")]);
    m_service_auth_configuration_isSet = !json[QString("serviceAuthConfiguration")].isNull() && m_service_auth_configuration_isValid;

    m_ssl_configuration_isValid = ::OpenAPI::fromJsonValue(m_ssl_configuration, json[QString("sslConfiguration")]);
    m_ssl_configuration_isSet = !json[QString("sslConfiguration")].isNull() && m_ssl_configuration_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;
}

QString OAIOperationalizationClusterCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationalizationClusterCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_app_insights.isSet()) {
        obj.insert(QString("appInsights"), ::OpenAPI::toJsonValue(m_app_insights));
    }
    if (m_container_registry.isSet()) {
        obj.insert(QString("containerRegistry"), ::OpenAPI::toJsonValue(m_container_registry));
    }
    if (m_container_service.isSet()) {
        obj.insert(QString("containerService"), ::OpenAPI::toJsonValue(m_container_service));
    }
    if (m_service_auth_configuration.isSet()) {
        obj.insert(QString("serviceAuthConfiguration"), ::OpenAPI::toJsonValue(m_service_auth_configuration));
    }
    if (m_ssl_configuration.isSet()) {
        obj.insert(QString("sslConfiguration"), ::OpenAPI::toJsonValue(m_ssl_configuration));
    }
    if (m_storage_account.isSet()) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    return obj;
}

OAIAppInsightsCredentials OAIOperationalizationClusterCredentials::getAppInsights() const {
    return m_app_insights;
}
void OAIOperationalizationClusterCredentials::setAppInsights(const OAIAppInsightsCredentials &app_insights) {
    m_app_insights = app_insights;
    m_app_insights_isSet = true;
}

bool OAIOperationalizationClusterCredentials::is_app_insights_Set() const{
    return m_app_insights_isSet;
}

bool OAIOperationalizationClusterCredentials::is_app_insights_Valid() const{
    return m_app_insights_isValid;
}

OAIContainerRegistryCredentials OAIOperationalizationClusterCredentials::getContainerRegistry() const {
    return m_container_registry;
}
void OAIOperationalizationClusterCredentials::setContainerRegistry(const OAIContainerRegistryCredentials &container_registry) {
    m_container_registry = container_registry;
    m_container_registry_isSet = true;
}

bool OAIOperationalizationClusterCredentials::is_container_registry_Set() const{
    return m_container_registry_isSet;
}

bool OAIOperationalizationClusterCredentials::is_container_registry_Valid() const{
    return m_container_registry_isValid;
}

OAIContainerServiceCredentials OAIOperationalizationClusterCredentials::getContainerService() const {
    return m_container_service;
}
void OAIOperationalizationClusterCredentials::setContainerService(const OAIContainerServiceCredentials &container_service) {
    m_container_service = container_service;
    m_container_service_isSet = true;
}

bool OAIOperationalizationClusterCredentials::is_container_service_Set() const{
    return m_container_service_isSet;
}

bool OAIOperationalizationClusterCredentials::is_container_service_Valid() const{
    return m_container_service_isValid;
}

OAIServiceAuthConfiguration OAIOperationalizationClusterCredentials::getServiceAuthConfiguration() const {
    return m_service_auth_configuration;
}
void OAIOperationalizationClusterCredentials::setServiceAuthConfiguration(const OAIServiceAuthConfiguration &service_auth_configuration) {
    m_service_auth_configuration = service_auth_configuration;
    m_service_auth_configuration_isSet = true;
}

bool OAIOperationalizationClusterCredentials::is_service_auth_configuration_Set() const{
    return m_service_auth_configuration_isSet;
}

bool OAIOperationalizationClusterCredentials::is_service_auth_configuration_Valid() const{
    return m_service_auth_configuration_isValid;
}

OAISslConfiguration OAIOperationalizationClusterCredentials::getSslConfiguration() const {
    return m_ssl_configuration;
}
void OAIOperationalizationClusterCredentials::setSslConfiguration(const OAISslConfiguration &ssl_configuration) {
    m_ssl_configuration = ssl_configuration;
    m_ssl_configuration_isSet = true;
}

bool OAIOperationalizationClusterCredentials::is_ssl_configuration_Set() const{
    return m_ssl_configuration_isSet;
}

bool OAIOperationalizationClusterCredentials::is_ssl_configuration_Valid() const{
    return m_ssl_configuration_isValid;
}

OAIStorageAccountCredentials OAIOperationalizationClusterCredentials::getStorageAccount() const {
    return m_storage_account;
}
void OAIOperationalizationClusterCredentials::setStorageAccount(const OAIStorageAccountCredentials &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIOperationalizationClusterCredentials::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIOperationalizationClusterCredentials::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

bool OAIOperationalizationClusterCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_insights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_auth_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationalizationClusterCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
