/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcsClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcsClusterProperties::OAIAcsClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcsClusterProperties::OAIAcsClusterProperties() {
    this->initializeModel();
}

OAIAcsClusterProperties::~OAIAcsClusterProperties() {}

void OAIAcsClusterProperties::initializeModel() {

    m_agent_count_isSet = false;
    m_agent_count_isValid = false;

    m_agent_vm_size_isSet = false;
    m_agent_vm_size_isValid = false;

    m_cluster_fqdn_isSet = false;
    m_cluster_fqdn_isValid = false;

    m_orchestrator_properties_isSet = false;
    m_orchestrator_properties_isValid = false;

    m_orchestrator_type_isSet = false;
    m_orchestrator_type_isValid = false;

    m_system_services_isSet = false;
    m_system_services_isValid = false;
}

void OAIAcsClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcsClusterProperties::fromJsonObject(QJsonObject json) {

    m_agent_count_isValid = ::OpenAPI::fromJsonValue(m_agent_count, json[QString("agentCount")]);
    m_agent_count_isSet = !json[QString("agentCount")].isNull() && m_agent_count_isValid;

    m_agent_vm_size_isValid = ::OpenAPI::fromJsonValue(m_agent_vm_size, json[QString("agentVmSize")]);
    m_agent_vm_size_isSet = !json[QString("agentVmSize")].isNull() && m_agent_vm_size_isValid;

    m_cluster_fqdn_isValid = ::OpenAPI::fromJsonValue(m_cluster_fqdn, json[QString("clusterFqdn")]);
    m_cluster_fqdn_isSet = !json[QString("clusterFqdn")].isNull() && m_cluster_fqdn_isValid;

    m_orchestrator_properties_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_properties, json[QString("orchestratorProperties")]);
    m_orchestrator_properties_isSet = !json[QString("orchestratorProperties")].isNull() && m_orchestrator_properties_isValid;

    m_orchestrator_type_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_type, json[QString("orchestratorType")]);
    m_orchestrator_type_isSet = !json[QString("orchestratorType")].isNull() && m_orchestrator_type_isValid;

    m_system_services_isValid = ::OpenAPI::fromJsonValue(m_system_services, json[QString("systemServices")]);
    m_system_services_isSet = !json[QString("systemServices")].isNull() && m_system_services_isValid;
}

QString OAIAcsClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcsClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_count_isSet) {
        obj.insert(QString("agentCount"), ::OpenAPI::toJsonValue(m_agent_count));
    }
    if (m_agent_vm_size_isSet) {
        obj.insert(QString("agentVmSize"), ::OpenAPI::toJsonValue(m_agent_vm_size));
    }
    if (m_cluster_fqdn_isSet) {
        obj.insert(QString("clusterFqdn"), ::OpenAPI::toJsonValue(m_cluster_fqdn));
    }
    if (m_orchestrator_properties.isSet()) {
        obj.insert(QString("orchestratorProperties"), ::OpenAPI::toJsonValue(m_orchestrator_properties));
    }
    if (m_orchestrator_type_isSet) {
        obj.insert(QString("orchestratorType"), ::OpenAPI::toJsonValue(m_orchestrator_type));
    }
    if (m_system_services.size() > 0) {
        obj.insert(QString("systemServices"), ::OpenAPI::toJsonValue(m_system_services));
    }
    return obj;
}

qint32 OAIAcsClusterProperties::getAgentCount() const {
    return m_agent_count;
}
void OAIAcsClusterProperties::setAgentCount(const qint32 &agent_count) {
    m_agent_count = agent_count;
    m_agent_count_isSet = true;
}

bool OAIAcsClusterProperties::is_agent_count_Set() const{
    return m_agent_count_isSet;
}

bool OAIAcsClusterProperties::is_agent_count_Valid() const{
    return m_agent_count_isValid;
}

QString OAIAcsClusterProperties::getAgentVmSize() const {
    return m_agent_vm_size;
}
void OAIAcsClusterProperties::setAgentVmSize(const QString &agent_vm_size) {
    m_agent_vm_size = agent_vm_size;
    m_agent_vm_size_isSet = true;
}

bool OAIAcsClusterProperties::is_agent_vm_size_Set() const{
    return m_agent_vm_size_isSet;
}

bool OAIAcsClusterProperties::is_agent_vm_size_Valid() const{
    return m_agent_vm_size_isValid;
}

QString OAIAcsClusterProperties::getClusterFqdn() const {
    return m_cluster_fqdn;
}
void OAIAcsClusterProperties::setClusterFqdn(const QString &cluster_fqdn) {
    m_cluster_fqdn = cluster_fqdn;
    m_cluster_fqdn_isSet = true;
}

bool OAIAcsClusterProperties::is_cluster_fqdn_Set() const{
    return m_cluster_fqdn_isSet;
}

bool OAIAcsClusterProperties::is_cluster_fqdn_Valid() const{
    return m_cluster_fqdn_isValid;
}

OAIKubernetesClusterProperties OAIAcsClusterProperties::getOrchestratorProperties() const {
    return m_orchestrator_properties;
}
void OAIAcsClusterProperties::setOrchestratorProperties(const OAIKubernetesClusterProperties &orchestrator_properties) {
    m_orchestrator_properties = orchestrator_properties;
    m_orchestrator_properties_isSet = true;
}

bool OAIAcsClusterProperties::is_orchestrator_properties_Set() const{
    return m_orchestrator_properties_isSet;
}

bool OAIAcsClusterProperties::is_orchestrator_properties_Valid() const{
    return m_orchestrator_properties_isValid;
}

QString OAIAcsClusterProperties::getOrchestratorType() const {
    return m_orchestrator_type;
}
void OAIAcsClusterProperties::setOrchestratorType(const QString &orchestrator_type) {
    m_orchestrator_type = orchestrator_type;
    m_orchestrator_type_isSet = true;
}

bool OAIAcsClusterProperties::is_orchestrator_type_Set() const{
    return m_orchestrator_type_isSet;
}

bool OAIAcsClusterProperties::is_orchestrator_type_Valid() const{
    return m_orchestrator_type_isValid;
}

QList<OAISystemServices> OAIAcsClusterProperties::getSystemServices() const {
    return m_system_services;
}
void OAIAcsClusterProperties::setSystemServices(const QList<OAISystemServices> &system_services) {
    m_system_services = system_services;
    m_system_services_isSet = true;
}

bool OAIAcsClusterProperties::is_system_services_Set() const{
    return m_system_services_isSet;
}

bool OAIAcsClusterProperties::is_system_services_Valid() const{
    return m_system_services_isValid;
}

bool OAIAcsClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_services.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcsClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_orchestrator_properties_isValid && m_orchestrator_type_isValid && true;
}

} // namespace OpenAPI
