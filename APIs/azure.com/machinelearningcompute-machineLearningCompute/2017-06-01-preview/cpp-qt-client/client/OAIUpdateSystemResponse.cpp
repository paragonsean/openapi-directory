/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSystemResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSystemResponse::OAIUpdateSystemResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSystemResponse::OAIUpdateSystemResponse() {
    this->initializeModel();
}

OAIUpdateSystemResponse::~OAIUpdateSystemResponse() {}

void OAIUpdateSystemResponse::initializeModel() {

    m_update_completed_on_isSet = false;
    m_update_completed_on_isValid = false;

    m_update_started_on_isSet = false;
    m_update_started_on_isValid = false;

    m_update_status_isSet = false;
    m_update_status_isValid = false;
}

void OAIUpdateSystemResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSystemResponse::fromJsonObject(QJsonObject json) {

    m_update_completed_on_isValid = ::OpenAPI::fromJsonValue(m_update_completed_on, json[QString("updateCompletedOn")]);
    m_update_completed_on_isSet = !json[QString("updateCompletedOn")].isNull() && m_update_completed_on_isValid;

    m_update_started_on_isValid = ::OpenAPI::fromJsonValue(m_update_started_on, json[QString("updateStartedOn")]);
    m_update_started_on_isSet = !json[QString("updateStartedOn")].isNull() && m_update_started_on_isValid;

    m_update_status_isValid = ::OpenAPI::fromJsonValue(m_update_status, json[QString("updateStatus")]);
    m_update_status_isSet = !json[QString("updateStatus")].isNull() && m_update_status_isValid;
}

QString OAIUpdateSystemResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSystemResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_update_completed_on_isSet) {
        obj.insert(QString("updateCompletedOn"), ::OpenAPI::toJsonValue(m_update_completed_on));
    }
    if (m_update_started_on_isSet) {
        obj.insert(QString("updateStartedOn"), ::OpenAPI::toJsonValue(m_update_started_on));
    }
    if (m_update_status_isSet) {
        obj.insert(QString("updateStatus"), ::OpenAPI::toJsonValue(m_update_status));
    }
    return obj;
}

QDateTime OAIUpdateSystemResponse::getUpdateCompletedOn() const {
    return m_update_completed_on;
}
void OAIUpdateSystemResponse::setUpdateCompletedOn(const QDateTime &update_completed_on) {
    m_update_completed_on = update_completed_on;
    m_update_completed_on_isSet = true;
}

bool OAIUpdateSystemResponse::is_update_completed_on_Set() const{
    return m_update_completed_on_isSet;
}

bool OAIUpdateSystemResponse::is_update_completed_on_Valid() const{
    return m_update_completed_on_isValid;
}

QDateTime OAIUpdateSystemResponse::getUpdateStartedOn() const {
    return m_update_started_on;
}
void OAIUpdateSystemResponse::setUpdateStartedOn(const QDateTime &update_started_on) {
    m_update_started_on = update_started_on;
    m_update_started_on_isSet = true;
}

bool OAIUpdateSystemResponse::is_update_started_on_Set() const{
    return m_update_started_on_isSet;
}

bool OAIUpdateSystemResponse::is_update_started_on_Valid() const{
    return m_update_started_on_isValid;
}

QString OAIUpdateSystemResponse::getUpdateStatus() const {
    return m_update_status;
}
void OAIUpdateSystemResponse::setUpdateStatus(const QString &update_status) {
    m_update_status = update_status;
    m_update_status_isSet = true;
}

bool OAIUpdateSystemResponse::is_update_status_Set() const{
    return m_update_status_isSet;
}

bool OAIUpdateSystemResponse::is_update_status_Valid() const{
    return m_update_status_isValid;
}

bool OAIUpdateSystemResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_completed_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_started_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSystemResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
