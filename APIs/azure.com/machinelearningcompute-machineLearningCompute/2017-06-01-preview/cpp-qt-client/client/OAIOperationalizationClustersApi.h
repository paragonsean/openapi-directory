/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOperationalizationClustersApi_H
#define OAI_OAIOperationalizationClustersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckUpdateResponse.h"
#include "OAIErrorResponse.h"
#include "OAIOperationalizationCluster.h"
#include "OAIOperationalizationClusterCredentials.h"
#include "OAIOperationalizationClusterUpdateParameters.h"
#include "OAIPaginatedOperationalizationClustersList.h"
#include "OAIUpdateSystemResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOperationalizationClustersApi : public QObject {
    Q_OBJECT

public:
    OAIOperationalizationClustersApi(const int timeOut = 0);
    ~OAIOperationalizationClustersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    */
    virtual void operationalizationClustersCheckUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  parameters OAIOperationalizationCluster [required]
    */
    virtual void operationalizationClustersCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const OAIOperationalizationCluster &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    */
    virtual void operationalizationClustersDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    */
    virtual void operationalizationClustersGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void operationalizationClustersListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void operationalizationClustersListBySubscriptionId(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    */
    virtual void operationalizationClustersListKeys(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  parameters OAIOperationalizationClusterUpdateParameters [required]
    */
    virtual void operationalizationClustersUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const OAIOperationalizationClusterUpdateParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    */
    virtual void operationalizationClustersUpdateSystem(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationalizationClustersCheckUpdateCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersDeleteCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersGetCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersListBySubscriptionIdCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersListKeysCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersUpdateCallback(OAIHttpRequestWorker *worker);
    void operationalizationClustersUpdateSystemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationalizationClustersCheckUpdateSignal(OAICheckUpdateResponse summary);
    void operationalizationClustersCreateOrUpdateSignal(OAIOperationalizationCluster summary);
    void operationalizationClustersDeleteSignal();
    void operationalizationClustersGetSignal(OAIOperationalizationCluster summary);
    void operationalizationClustersListByResourceGroupSignal(OAIPaginatedOperationalizationClustersList summary);
    void operationalizationClustersListBySubscriptionIdSignal(OAIPaginatedOperationalizationClustersList summary);
    void operationalizationClustersListKeysSignal(OAIOperationalizationClusterCredentials summary);
    void operationalizationClustersUpdateSignal(OAIOperationalizationCluster summary);
    void operationalizationClustersUpdateSystemSignal(OAIUpdateSystemResponse summary);


    void operationalizationClustersCheckUpdateSignalFull(OAIHttpRequestWorker *worker, OAICheckUpdateResponse summary);
    void operationalizationClustersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperationalizationCluster summary);
    void operationalizationClustersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void operationalizationClustersGetSignalFull(OAIHttpRequestWorker *worker, OAIOperationalizationCluster summary);
    void operationalizationClustersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedOperationalizationClustersList summary);
    void operationalizationClustersListBySubscriptionIdSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedOperationalizationClustersList summary);
    void operationalizationClustersListKeysSignalFull(OAIHttpRequestWorker *worker, OAIOperationalizationClusterCredentials summary);
    void operationalizationClustersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOperationalizationCluster summary);
    void operationalizationClustersUpdateSystemSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSystemResponse summary);

    Q_DECL_DEPRECATED_X("Use operationalizationClustersCheckUpdateSignalError() instead")
    void operationalizationClustersCheckUpdateSignalE(OAICheckUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersCheckUpdateSignalError(OAICheckUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersCreateOrUpdateSignalError() instead")
    void operationalizationClustersCreateOrUpdateSignalE(OAIOperationalizationCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersCreateOrUpdateSignalError(OAIOperationalizationCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersDeleteSignalError() instead")
    void operationalizationClustersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersGetSignalError() instead")
    void operationalizationClustersGetSignalE(OAIOperationalizationCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersGetSignalError(OAIOperationalizationCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersListByResourceGroupSignalError() instead")
    void operationalizationClustersListByResourceGroupSignalE(OAIPaginatedOperationalizationClustersList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersListByResourceGroupSignalError(OAIPaginatedOperationalizationClustersList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersListBySubscriptionIdSignalError() instead")
    void operationalizationClustersListBySubscriptionIdSignalE(OAIPaginatedOperationalizationClustersList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersListBySubscriptionIdSignalError(OAIPaginatedOperationalizationClustersList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersListKeysSignalError() instead")
    void operationalizationClustersListKeysSignalE(OAIOperationalizationClusterCredentials summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersListKeysSignalError(OAIOperationalizationClusterCredentials summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersUpdateSignalError() instead")
    void operationalizationClustersUpdateSignalE(OAIOperationalizationCluster summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersUpdateSignalError(OAIOperationalizationCluster summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersUpdateSystemSignalError() instead")
    void operationalizationClustersUpdateSystemSignalE(OAIUpdateSystemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersUpdateSystemSignalError(OAIUpdateSystemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationalizationClustersCheckUpdateSignalErrorFull() instead")
    void operationalizationClustersCheckUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersCheckUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersCreateOrUpdateSignalErrorFull() instead")
    void operationalizationClustersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersDeleteSignalErrorFull() instead")
    void operationalizationClustersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersGetSignalErrorFull() instead")
    void operationalizationClustersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersListByResourceGroupSignalErrorFull() instead")
    void operationalizationClustersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersListBySubscriptionIdSignalErrorFull() instead")
    void operationalizationClustersListBySubscriptionIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersListBySubscriptionIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersListKeysSignalErrorFull() instead")
    void operationalizationClustersListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersUpdateSignalErrorFull() instead")
    void operationalizationClustersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationalizationClustersUpdateSystemSignalErrorFull() instead")
    void operationalizationClustersUpdateSystemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationalizationClustersUpdateSystemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
