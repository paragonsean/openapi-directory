/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationalizationClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationalizationClusterProperties::OAIOperationalizationClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationalizationClusterProperties::OAIOperationalizationClusterProperties() {
    this->initializeModel();
}

OAIOperationalizationClusterProperties::~OAIOperationalizationClusterProperties() {}

void OAIOperationalizationClusterProperties::initializeModel() {

    m_app_insights_isSet = false;
    m_app_insights_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_container_registry_isSet = false;
    m_container_registry_isValid = false;

    m_container_service_isSet = false;
    m_container_service_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_global_service_configuration_isSet = false;
    m_global_service_configuration_isValid = false;

    m_modified_on_isSet = false;
    m_modified_on_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;
}

void OAIOperationalizationClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationalizationClusterProperties::fromJsonObject(QJsonObject json) {

    m_app_insights_isValid = ::OpenAPI::fromJsonValue(m_app_insights, json[QString("appInsights")]);
    m_app_insights_isSet = !json[QString("appInsights")].isNull() && m_app_insights_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("clusterType")]);
    m_cluster_type_isSet = !json[QString("clusterType")].isNull() && m_cluster_type_isValid;

    m_container_registry_isValid = ::OpenAPI::fromJsonValue(m_container_registry, json[QString("containerRegistry")]);
    m_container_registry_isSet = !json[QString("containerRegistry")].isNull() && m_container_registry_isValid;

    m_container_service_isValid = ::OpenAPI::fromJsonValue(m_container_service, json[QString("containerService")]);
    m_container_service_isSet = !json[QString("containerService")].isNull() && m_container_service_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_global_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_global_service_configuration, json[QString("globalServiceConfiguration")]);
    m_global_service_configuration_isSet = !json[QString("globalServiceConfiguration")].isNull() && m_global_service_configuration_isValid;

    m_modified_on_isValid = ::OpenAPI::fromJsonValue(m_modified_on, json[QString("modifiedOn")]);
    m_modified_on_isSet = !json[QString("modifiedOn")].isNull() && m_modified_on_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;
}

QString OAIOperationalizationClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationalizationClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_app_insights.isSet()) {
        obj.insert(QString("appInsights"), ::OpenAPI::toJsonValue(m_app_insights));
    }
    if (m_cluster_type_isSet) {
        obj.insert(QString("clusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_container_registry.isSet()) {
        obj.insert(QString("containerRegistry"), ::OpenAPI::toJsonValue(m_container_registry));
    }
    if (m_container_service.isSet()) {
        obj.insert(QString("containerService"), ::OpenAPI::toJsonValue(m_container_service));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_global_service_configuration.isSet()) {
        obj.insert(QString("globalServiceConfiguration"), ::OpenAPI::toJsonValue(m_global_service_configuration));
    }
    if (m_modified_on_isSet) {
        obj.insert(QString("modifiedOn"), ::OpenAPI::toJsonValue(m_modified_on));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_storage_account.isSet()) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    return obj;
}

OAIAppInsightsCredentials OAIOperationalizationClusterProperties::getAppInsights() const {
    return m_app_insights;
}
void OAIOperationalizationClusterProperties::setAppInsights(const OAIAppInsightsCredentials &app_insights) {
    m_app_insights = app_insights;
    m_app_insights_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_app_insights_Set() const{
    return m_app_insights_isSet;
}

bool OAIOperationalizationClusterProperties::is_app_insights_Valid() const{
    return m_app_insights_isValid;
}

QString OAIOperationalizationClusterProperties::getClusterType() const {
    return m_cluster_type;
}
void OAIOperationalizationClusterProperties::setClusterType(const QString &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAIOperationalizationClusterProperties::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

OAIContainerRegistryProperties OAIOperationalizationClusterProperties::getContainerRegistry() const {
    return m_container_registry;
}
void OAIOperationalizationClusterProperties::setContainerRegistry(const OAIContainerRegistryProperties &container_registry) {
    m_container_registry = container_registry;
    m_container_registry_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_container_registry_Set() const{
    return m_container_registry_isSet;
}

bool OAIOperationalizationClusterProperties::is_container_registry_Valid() const{
    return m_container_registry_isValid;
}

OAIAcsClusterProperties OAIOperationalizationClusterProperties::getContainerService() const {
    return m_container_service;
}
void OAIOperationalizationClusterProperties::setContainerService(const OAIAcsClusterProperties &container_service) {
    m_container_service = container_service;
    m_container_service_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_container_service_Set() const{
    return m_container_service_isSet;
}

bool OAIOperationalizationClusterProperties::is_container_service_Valid() const{
    return m_container_service_isValid;
}

QDateTime OAIOperationalizationClusterProperties::getCreatedOn() const {
    return m_created_on;
}
void OAIOperationalizationClusterProperties::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIOperationalizationClusterProperties::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIOperationalizationClusterProperties::getDescription() const {
    return m_description;
}
void OAIOperationalizationClusterProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOperationalizationClusterProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIGlobalServiceConfiguration OAIOperationalizationClusterProperties::getGlobalServiceConfiguration() const {
    return m_global_service_configuration;
}
void OAIOperationalizationClusterProperties::setGlobalServiceConfiguration(const OAIGlobalServiceConfiguration &global_service_configuration) {
    m_global_service_configuration = global_service_configuration;
    m_global_service_configuration_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_global_service_configuration_Set() const{
    return m_global_service_configuration_isSet;
}

bool OAIOperationalizationClusterProperties::is_global_service_configuration_Valid() const{
    return m_global_service_configuration_isValid;
}

QDateTime OAIOperationalizationClusterProperties::getModifiedOn() const {
    return m_modified_on;
}
void OAIOperationalizationClusterProperties::setModifiedOn(const QDateTime &modified_on) {
    m_modified_on = modified_on;
    m_modified_on_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_modified_on_Set() const{
    return m_modified_on_isSet;
}

bool OAIOperationalizationClusterProperties::is_modified_on_Valid() const{
    return m_modified_on_isValid;
}

QString OAIOperationalizationClusterProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIOperationalizationClusterProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIOperationalizationClusterProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIStorageAccountProperties OAIOperationalizationClusterProperties::getStorageAccount() const {
    return m_storage_account;
}
void OAIOperationalizationClusterProperties::setStorageAccount(const OAIStorageAccountProperties &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIOperationalizationClusterProperties::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIOperationalizationClusterProperties::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

bool OAIOperationalizationClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_insights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_registry.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationalizationClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_type_isValid && m_container_service_isValid && true;
}

} // namespace OpenAPI
