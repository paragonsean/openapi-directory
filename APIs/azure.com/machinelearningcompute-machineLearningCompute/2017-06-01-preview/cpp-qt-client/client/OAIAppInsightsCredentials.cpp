/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInsightsCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInsightsCredentials::OAIAppInsightsCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInsightsCredentials::OAIAppInsightsCredentials() {
    this->initializeModel();
}

OAIAppInsightsCredentials::~OAIAppInsightsCredentials() {}

void OAIAppInsightsCredentials::initializeModel() {

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;
}

void OAIAppInsightsCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInsightsCredentials::fromJsonObject(QJsonObject json) {

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;
}

QString OAIAppInsightsCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInsightsCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    return obj;
}

QString OAIAppInsightsCredentials::getApiKey() const {
    return m_api_key;
}
void OAIAppInsightsCredentials::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIAppInsightsCredentials::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIAppInsightsCredentials::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIAppInsightsCredentials::getAppId() const {
    return m_app_id;
}
void OAIAppInsightsCredentials::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAppInsightsCredentials::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAppInsightsCredentials::is_app_id_Valid() const{
    return m_app_id_isValid;
}

bool OAIAppInsightsCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInsightsCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
