/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcsClusterProperties from './AcsClusterProperties';
import AppInsightsCredentials from './AppInsightsCredentials';
import ContainerRegistryProperties from './ContainerRegistryProperties';
import GlobalServiceConfiguration from './GlobalServiceConfiguration';
import StorageAccountProperties from './StorageAccountProperties';

/**
 * The OperationalizationClusterProperties model module.
 * @module model/OperationalizationClusterProperties
 * @version 2017-06-01-preview
 */
class OperationalizationClusterProperties {
    /**
     * Constructs a new <code>OperationalizationClusterProperties</code>.
     * Properties of an operationalization cluster
     * @alias module:model/OperationalizationClusterProperties
     * @param clusterType {module:model/OperationalizationClusterProperties.ClusterTypeEnum} The cluster type.
     * @param containerService {module:model/AcsClusterProperties} 
     */
    constructor(clusterType, containerService) { 
        
        OperationalizationClusterProperties.initialize(this, clusterType, containerService);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clusterType, containerService) { 
        obj['clusterType'] = clusterType;
        obj['containerService'] = containerService;
    }

    /**
     * Constructs a <code>OperationalizationClusterProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationalizationClusterProperties} obj Optional instance to populate.
     * @return {module:model/OperationalizationClusterProperties} The populated <code>OperationalizationClusterProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationalizationClusterProperties();

            if (data.hasOwnProperty('appInsights')) {
                obj['appInsights'] = AppInsightsCredentials.constructFromObject(data['appInsights']);
            }
            if (data.hasOwnProperty('clusterType')) {
                obj['clusterType'] = ApiClient.convertToType(data['clusterType'], 'String');
            }
            if (data.hasOwnProperty('containerRegistry')) {
                obj['containerRegistry'] = ContainerRegistryProperties.constructFromObject(data['containerRegistry']);
            }
            if (data.hasOwnProperty('containerService')) {
                obj['containerService'] = AcsClusterProperties.constructFromObject(data['containerService']);
            }
            if (data.hasOwnProperty('createdOn')) {
                obj['createdOn'] = ApiClient.convertToType(data['createdOn'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('globalServiceConfiguration')) {
                obj['globalServiceConfiguration'] = GlobalServiceConfiguration.constructFromObject(data['globalServiceConfiguration']);
            }
            if (data.hasOwnProperty('modifiedOn')) {
                obj['modifiedOn'] = ApiClient.convertToType(data['modifiedOn'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('storageAccount')) {
                obj['storageAccount'] = StorageAccountProperties.constructFromObject(data['storageAccount']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationalizationClusterProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationalizationClusterProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OperationalizationClusterProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `appInsights`
        if (data['appInsights']) { // data not null
          AppInsightsCredentials.validateJSON(data['appInsights']);
        }
        // ensure the json data is a string
        if (data['clusterType'] && !(typeof data['clusterType'] === 'string' || data['clusterType'] instanceof String)) {
            throw new Error("Expected the field `clusterType` to be a primitive type in the JSON string but got " + data['clusterType']);
        }
        // validate the optional field `containerRegistry`
        if (data['containerRegistry']) { // data not null
          ContainerRegistryProperties.validateJSON(data['containerRegistry']);
        }
        // validate the optional field `containerService`
        if (data['containerService']) { // data not null
          AcsClusterProperties.validateJSON(data['containerService']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `storageAccount`
        if (data['storageAccount']) { // data not null
          StorageAccountProperties.validateJSON(data['storageAccount']);
        }

        return true;
    }


}

OperationalizationClusterProperties.RequiredProperties = ["clusterType", "containerService"];

/**
 * @member {module:model/AppInsightsCredentials} appInsights
 */
OperationalizationClusterProperties.prototype['appInsights'] = undefined;

/**
 * The cluster type.
 * @member {module:model/OperationalizationClusterProperties.ClusterTypeEnum} clusterType
 */
OperationalizationClusterProperties.prototype['clusterType'] = undefined;

/**
 * @member {module:model/ContainerRegistryProperties} containerRegistry
 */
OperationalizationClusterProperties.prototype['containerRegistry'] = undefined;

/**
 * @member {module:model/AcsClusterProperties} containerService
 */
OperationalizationClusterProperties.prototype['containerService'] = undefined;

/**
 * The date and time when the cluster was created.
 * @member {Date} createdOn
 */
OperationalizationClusterProperties.prototype['createdOn'] = undefined;

/**
 * The description of the cluster.
 * @member {String} description
 */
OperationalizationClusterProperties.prototype['description'] = undefined;

/**
 * @member {module:model/GlobalServiceConfiguration} globalServiceConfiguration
 */
OperationalizationClusterProperties.prototype['globalServiceConfiguration'] = undefined;

/**
 * The date and time when the cluster was last modified.
 * @member {Date} modifiedOn
 */
OperationalizationClusterProperties.prototype['modifiedOn'] = undefined;

/**
 * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
 * @member {module:model/OperationalizationClusterProperties.ProvisioningStateEnum} provisioningState
 */
OperationalizationClusterProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/StorageAccountProperties} storageAccount
 */
OperationalizationClusterProperties.prototype['storageAccount'] = undefined;





/**
 * Allowed values for the <code>clusterType</code> property.
 * @enum {String}
 * @readonly
 */
OperationalizationClusterProperties['ClusterTypeEnum'] = {

    /**
     * value: "ACS"
     * @const
     */
    "ACS": "ACS"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
OperationalizationClusterProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default OperationalizationClusterProperties;

