/**
 * Azure Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerRegistryCredentials model module.
 * @module model/ContainerRegistryCredentials
 * @version 2017-06-01-preview
 */
class ContainerRegistryCredentials {
    /**
     * Constructs a new <code>ContainerRegistryCredentials</code>.
     * Information about the Azure Container Registry which contains the images deployed to the cluster.
     * @alias module:model/ContainerRegistryCredentials
     */
    constructor() { 
        
        ContainerRegistryCredentials.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerRegistryCredentials</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerRegistryCredentials} obj Optional instance to populate.
     * @return {module:model/ContainerRegistryCredentials} The populated <code>ContainerRegistryCredentials</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerRegistryCredentials();

            if (data.hasOwnProperty('loginServer')) {
                obj['loginServer'] = ApiClient.convertToType(data['loginServer'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('password2')) {
                obj['password2'] = ApiClient.convertToType(data['password2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerRegistryCredentials</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerRegistryCredentials</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['loginServer'] && !(typeof data['loginServer'] === 'string' || data['loginServer'] instanceof String)) {
            throw new Error("Expected the field `loginServer` to be a primitive type in the JSON string but got " + data['loginServer']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['password2'] && !(typeof data['password2'] === 'string' || data['password2'] instanceof String)) {
            throw new Error("Expected the field `password2` to be a primitive type in the JSON string but got " + data['password2']);
        }

        return true;
    }


}



/**
 * The ACR login server name. User name is the first part of the FQDN.
 * @member {String} loginServer
 */
ContainerRegistryCredentials.prototype['loginServer'] = undefined;

/**
 * The ACR primary password.
 * @member {String} password
 */
ContainerRegistryCredentials.prototype['password'] = undefined;

/**
 * The ACR secondary password.
 * @member {String} password2
 */
ContainerRegistryCredentials.prototype['password2'] = undefined;






export default ContainerRegistryCredentials;

