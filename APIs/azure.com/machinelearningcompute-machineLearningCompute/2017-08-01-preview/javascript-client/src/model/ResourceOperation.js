/**
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceOperationDisplay from './ResourceOperationDisplay';

/**
 * The ResourceOperation model module.
 * @module model/ResourceOperation
 * @version 2017-08-01-preview
 */
class ResourceOperation {
    /**
     * Constructs a new <code>ResourceOperation</code>.
     * Resource operation.
     * @alias module:model/ResourceOperation
     */
    constructor() { 
        
        ResourceOperation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceOperation} obj Optional instance to populate.
     * @return {module:model/ResourceOperation} The populated <code>ResourceOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceOperation();

            if (data.hasOwnProperty('display')) {
                obj['display'] = ResourceOperationDisplay.constructFromObject(data['display']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = ApiClient.convertToType(data['origin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceOperation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `display`
        if (data['display']) { // data not null
          ResourceOperationDisplay.validateJSON(data['display']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['origin'] && !(typeof data['origin'] === 'string' || data['origin'] instanceof String)) {
            throw new Error("Expected the field `origin` to be a primitive type in the JSON string but got " + data['origin']);
        }

        return true;
    }


}



/**
 * @member {module:model/ResourceOperationDisplay} display
 */
ResourceOperation.prototype['display'] = undefined;

/**
 * Name of this operation.
 * @member {String} name
 */
ResourceOperation.prototype['name'] = undefined;

/**
 * The operation origin.
 * @member {String} origin
 */
ResourceOperation.prototype['origin'] = undefined;






export default ResourceOperation;

