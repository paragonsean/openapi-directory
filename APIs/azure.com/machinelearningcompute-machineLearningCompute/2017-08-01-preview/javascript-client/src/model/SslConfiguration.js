/**
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SslConfiguration model module.
 * @module model/SslConfiguration
 * @version 2017-08-01-preview
 */
class SslConfiguration {
    /**
     * Constructs a new <code>SslConfiguration</code>.
     * SSL configuration. If configured data-plane calls to user services will be exposed over SSL only.
     * @alias module:model/SslConfiguration
     */
    constructor() { 
        
        SslConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['status'] = 'Enabled';
    }

    /**
     * Constructs a <code>SslConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SslConfiguration} obj Optional instance to populate.
     * @return {module:model/SslConfiguration} The populated <code>SslConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SslConfiguration();

            if (data.hasOwnProperty('cert')) {
                obj['cert'] = ApiClient.convertToType(data['cert'], 'String');
            }
            if (data.hasOwnProperty('cname')) {
                obj['cname'] = ApiClient.convertToType(data['cname'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SslConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SslConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cert'] && !(typeof data['cert'] === 'string' || data['cert'] instanceof String)) {
            throw new Error("Expected the field `cert` to be a primitive type in the JSON string but got " + data['cert']);
        }
        // ensure the json data is a string
        if (data['cname'] && !(typeof data['cname'] === 'string' || data['cname'] instanceof String)) {
            throw new Error("Expected the field `cname` to be a primitive type in the JSON string but got " + data['cname']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The SSL cert data in PEM format.
 * @member {String} cert
 */
SslConfiguration.prototype['cert'] = undefined;

/**
 * The CName of the certificate.
 * @member {String} cname
 */
SslConfiguration.prototype['cname'] = undefined;

/**
 * The SSL key data in PEM format. This is not returned in response of GET/PUT on the resource. To see this please call listKeys API.
 * @member {String} key
 */
SslConfiguration.prototype['key'] = undefined;

/**
 * SSL status. Allowed values are Enabled and Disabled.
 * @member {module:model/SslConfiguration.StatusEnum} status
 * @default 'Enabled'
 */
SslConfiguration.prototype['status'] = 'Enabled';





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SslConfiguration['StatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default SslConfiguration;

