/**
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGlobalServiceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGlobalServiceConfiguration::OAIGlobalServiceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGlobalServiceConfiguration::OAIGlobalServiceConfiguration() {
    this->initializeModel();
}

OAIGlobalServiceConfiguration::~OAIGlobalServiceConfiguration() {}

void OAIGlobalServiceConfiguration::initializeModel() {

    m_auto_scale_isSet = false;
    m_auto_scale_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_service_auth_isSet = false;
    m_service_auth_isValid = false;

    m_ssl_isSet = false;
    m_ssl_isValid = false;
}

void OAIGlobalServiceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGlobalServiceConfiguration::fromJsonObject(QJsonObject json) {

    m_auto_scale_isValid = ::OpenAPI::fromJsonValue(m_auto_scale, json[QString("autoScale")]);
    m_auto_scale_isSet = !json[QString("autoScale")].isNull() && m_auto_scale_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_service_auth_isValid = ::OpenAPI::fromJsonValue(m_service_auth, json[QString("serviceAuth")]);
    m_service_auth_isSet = !json[QString("serviceAuth")].isNull() && m_service_auth_isValid;

    m_ssl_isValid = ::OpenAPI::fromJsonValue(m_ssl, json[QString("ssl")]);
    m_ssl_isSet = !json[QString("ssl")].isNull() && m_ssl_isValid;
}

QString OAIGlobalServiceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGlobalServiceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_scale.isSet()) {
        obj.insert(QString("autoScale"), ::OpenAPI::toJsonValue(m_auto_scale));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_service_auth.isSet()) {
        obj.insert(QString("serviceAuth"), ::OpenAPI::toJsonValue(m_service_auth));
    }
    if (m_ssl.isSet()) {
        obj.insert(QString("ssl"), ::OpenAPI::toJsonValue(m_ssl));
    }
    return obj;
}

OAIAutoScaleConfiguration OAIGlobalServiceConfiguration::getAutoScale() const {
    return m_auto_scale;
}
void OAIGlobalServiceConfiguration::setAutoScale(const OAIAutoScaleConfiguration &auto_scale) {
    m_auto_scale = auto_scale;
    m_auto_scale_isSet = true;
}

bool OAIGlobalServiceConfiguration::is_auto_scale_Set() const{
    return m_auto_scale_isSet;
}

bool OAIGlobalServiceConfiguration::is_auto_scale_Valid() const{
    return m_auto_scale_isValid;
}

QString OAIGlobalServiceConfiguration::getEtag() const {
    return m_etag;
}
void OAIGlobalServiceConfiguration::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIGlobalServiceConfiguration::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIGlobalServiceConfiguration::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIServiceAuthConfiguration OAIGlobalServiceConfiguration::getServiceAuth() const {
    return m_service_auth;
}
void OAIGlobalServiceConfiguration::setServiceAuth(const OAIServiceAuthConfiguration &service_auth) {
    m_service_auth = service_auth;
    m_service_auth_isSet = true;
}

bool OAIGlobalServiceConfiguration::is_service_auth_Set() const{
    return m_service_auth_isSet;
}

bool OAIGlobalServiceConfiguration::is_service_auth_Valid() const{
    return m_service_auth_isValid;
}

OAISslConfiguration OAIGlobalServiceConfiguration::getSsl() const {
    return m_ssl;
}
void OAIGlobalServiceConfiguration::setSsl(const OAISslConfiguration &ssl) {
    m_ssl = ssl;
    m_ssl_isSet = true;
}

bool OAIGlobalServiceConfiguration::is_ssl_Set() const{
    return m_ssl_isSet;
}

bool OAIGlobalServiceConfiguration::is_ssl_Valid() const{
    return m_ssl_isValid;
}

bool OAIGlobalServiceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_scale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGlobalServiceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
