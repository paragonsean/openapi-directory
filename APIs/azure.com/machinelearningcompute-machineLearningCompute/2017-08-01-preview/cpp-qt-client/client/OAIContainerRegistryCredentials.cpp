/**
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerRegistryCredentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerRegistryCredentials::OAIContainerRegistryCredentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerRegistryCredentials::OAIContainerRegistryCredentials() {
    this->initializeModel();
}

OAIContainerRegistryCredentials::~OAIContainerRegistryCredentials() {}

void OAIContainerRegistryCredentials::initializeModel() {

    m_login_server_isSet = false;
    m_login_server_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_password2_isSet = false;
    m_password2_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIContainerRegistryCredentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerRegistryCredentials::fromJsonObject(QJsonObject json) {

    m_login_server_isValid = ::OpenAPI::fromJsonValue(m_login_server, json[QString("loginServer")]);
    m_login_server_isSet = !json[QString("loginServer")].isNull() && m_login_server_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_password2_isValid = ::OpenAPI::fromJsonValue(m_password2, json[QString("password2")]);
    m_password2_isSet = !json[QString("password2")].isNull() && m_password2_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIContainerRegistryCredentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerRegistryCredentials::asJsonObject() const {
    QJsonObject obj;
    if (m_login_server_isSet) {
        obj.insert(QString("loginServer"), ::OpenAPI::toJsonValue(m_login_server));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_password2_isSet) {
        obj.insert(QString("password2"), ::OpenAPI::toJsonValue(m_password2));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIContainerRegistryCredentials::getLoginServer() const {
    return m_login_server;
}
void OAIContainerRegistryCredentials::setLoginServer(const QString &login_server) {
    m_login_server = login_server;
    m_login_server_isSet = true;
}

bool OAIContainerRegistryCredentials::is_login_server_Set() const{
    return m_login_server_isSet;
}

bool OAIContainerRegistryCredentials::is_login_server_Valid() const{
    return m_login_server_isValid;
}

QString OAIContainerRegistryCredentials::getPassword() const {
    return m_password;
}
void OAIContainerRegistryCredentials::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIContainerRegistryCredentials::is_password_Set() const{
    return m_password_isSet;
}

bool OAIContainerRegistryCredentials::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIContainerRegistryCredentials::getPassword2() const {
    return m_password2;
}
void OAIContainerRegistryCredentials::setPassword2(const QString &password2) {
    m_password2 = password2;
    m_password2_isSet = true;
}

bool OAIContainerRegistryCredentials::is_password2_Set() const{
    return m_password2_isSet;
}

bool OAIContainerRegistryCredentials::is_password2_Valid() const{
    return m_password2_isValid;
}

QString OAIContainerRegistryCredentials::getUsername() const {
    return m_username;
}
void OAIContainerRegistryCredentials::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIContainerRegistryCredentials::is_username_Set() const{
    return m_username_isSet;
}

bool OAIContainerRegistryCredentials::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIContainerRegistryCredentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_login_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerRegistryCredentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
