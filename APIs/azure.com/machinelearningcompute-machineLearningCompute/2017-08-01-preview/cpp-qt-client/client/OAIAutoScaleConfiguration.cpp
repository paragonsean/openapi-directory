/**
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoScaleConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoScaleConfiguration::OAIAutoScaleConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoScaleConfiguration::OAIAutoScaleConfiguration() {
    this->initializeModel();
}

OAIAutoScaleConfiguration::~OAIAutoScaleConfiguration() {}

void OAIAutoScaleConfiguration::initializeModel() {

    m_max_replicas_isSet = false;
    m_max_replicas_isValid = false;

    m_min_replicas_isSet = false;
    m_min_replicas_isValid = false;

    m_refresh_period_in_seconds_isSet = false;
    m_refresh_period_in_seconds_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_utilization_isSet = false;
    m_target_utilization_isValid = false;
}

void OAIAutoScaleConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoScaleConfiguration::fromJsonObject(QJsonObject json) {

    m_max_replicas_isValid = ::OpenAPI::fromJsonValue(m_max_replicas, json[QString("maxReplicas")]);
    m_max_replicas_isSet = !json[QString("maxReplicas")].isNull() && m_max_replicas_isValid;

    m_min_replicas_isValid = ::OpenAPI::fromJsonValue(m_min_replicas, json[QString("minReplicas")]);
    m_min_replicas_isSet = !json[QString("minReplicas")].isNull() && m_min_replicas_isValid;

    m_refresh_period_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_refresh_period_in_seconds, json[QString("refreshPeriodInSeconds")]);
    m_refresh_period_in_seconds_isSet = !json[QString("refreshPeriodInSeconds")].isNull() && m_refresh_period_in_seconds_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_utilization_isValid = ::OpenAPI::fromJsonValue(m_target_utilization, json[QString("targetUtilization")]);
    m_target_utilization_isSet = !json[QString("targetUtilization")].isNull() && m_target_utilization_isValid;
}

QString OAIAutoScaleConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoScaleConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_max_replicas_isSet) {
        obj.insert(QString("maxReplicas"), ::OpenAPI::toJsonValue(m_max_replicas));
    }
    if (m_min_replicas_isSet) {
        obj.insert(QString("minReplicas"), ::OpenAPI::toJsonValue(m_min_replicas));
    }
    if (m_refresh_period_in_seconds_isSet) {
        obj.insert(QString("refreshPeriodInSeconds"), ::OpenAPI::toJsonValue(m_refresh_period_in_seconds));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_utilization_isSet) {
        obj.insert(QString("targetUtilization"), ::OpenAPI::toJsonValue(m_target_utilization));
    }
    return obj;
}

qint32 OAIAutoScaleConfiguration::getMaxReplicas() const {
    return m_max_replicas;
}
void OAIAutoScaleConfiguration::setMaxReplicas(const qint32 &max_replicas) {
    m_max_replicas = max_replicas;
    m_max_replicas_isSet = true;
}

bool OAIAutoScaleConfiguration::is_max_replicas_Set() const{
    return m_max_replicas_isSet;
}

bool OAIAutoScaleConfiguration::is_max_replicas_Valid() const{
    return m_max_replicas_isValid;
}

qint32 OAIAutoScaleConfiguration::getMinReplicas() const {
    return m_min_replicas;
}
void OAIAutoScaleConfiguration::setMinReplicas(const qint32 &min_replicas) {
    m_min_replicas = min_replicas;
    m_min_replicas_isSet = true;
}

bool OAIAutoScaleConfiguration::is_min_replicas_Set() const{
    return m_min_replicas_isSet;
}

bool OAIAutoScaleConfiguration::is_min_replicas_Valid() const{
    return m_min_replicas_isValid;
}

qint32 OAIAutoScaleConfiguration::getRefreshPeriodInSeconds() const {
    return m_refresh_period_in_seconds;
}
void OAIAutoScaleConfiguration::setRefreshPeriodInSeconds(const qint32 &refresh_period_in_seconds) {
    m_refresh_period_in_seconds = refresh_period_in_seconds;
    m_refresh_period_in_seconds_isSet = true;
}

bool OAIAutoScaleConfiguration::is_refresh_period_in_seconds_Set() const{
    return m_refresh_period_in_seconds_isSet;
}

bool OAIAutoScaleConfiguration::is_refresh_period_in_seconds_Valid() const{
    return m_refresh_period_in_seconds_isValid;
}

QString OAIAutoScaleConfiguration::getStatus() const {
    return m_status;
}
void OAIAutoScaleConfiguration::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAutoScaleConfiguration::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAutoScaleConfiguration::is_status_Valid() const{
    return m_status_isValid;
}

double OAIAutoScaleConfiguration::getTargetUtilization() const {
    return m_target_utilization;
}
void OAIAutoScaleConfiguration::setTargetUtilization(const double &target_utilization) {
    m_target_utilization = target_utilization;
    m_target_utilization_isSet = true;
}

bool OAIAutoScaleConfiguration::is_target_utilization_Set() const{
    return m_target_utilization_isSet;
}

bool OAIAutoScaleConfiguration::is_target_utilization_Valid() const{
    return m_target_utilization_isValid;
}

bool OAIAutoScaleConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_replicas_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_period_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoScaleConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
