/**
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAcsClusterProperties.h
 *
 * Information about the container service backing the cluster
 */

#ifndef OAIAcsClusterProperties_H
#define OAIAcsClusterProperties_H

#include <QJsonObject>

#include "OAIKubernetesClusterProperties.h"
#include "OAISystemService.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKubernetesClusterProperties;
class OAISystemService;

class OAIAcsClusterProperties : public OAIObject {
public:
    OAIAcsClusterProperties();
    OAIAcsClusterProperties(QString json);
    ~OAIAcsClusterProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAgentCount() const;
    void setAgentCount(const qint32 &agent_count);
    bool is_agent_count_Set() const;
    bool is_agent_count_Valid() const;

    QString getAgentVmSize() const;
    void setAgentVmSize(const QString &agent_vm_size);
    bool is_agent_vm_size_Set() const;
    bool is_agent_vm_size_Valid() const;

    QString getClusterFqdn() const;
    void setClusterFqdn(const QString &cluster_fqdn);
    bool is_cluster_fqdn_Set() const;
    bool is_cluster_fqdn_Valid() const;

    qint32 getMasterCount() const;
    void setMasterCount(const qint32 &master_count);
    bool is_master_count_Set() const;
    bool is_master_count_Valid() const;

    OAIKubernetesClusterProperties getOrchestratorProperties() const;
    void setOrchestratorProperties(const OAIKubernetesClusterProperties &orchestrator_properties);
    bool is_orchestrator_properties_Set() const;
    bool is_orchestrator_properties_Valid() const;

    QString getOrchestratorType() const;
    void setOrchestratorType(const QString &orchestrator_type);
    bool is_orchestrator_type_Set() const;
    bool is_orchestrator_type_Valid() const;

    QList<OAISystemService> getSystemServices() const;
    void setSystemServices(const QList<OAISystemService> &system_services);
    bool is_system_services_Set() const;
    bool is_system_services_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_agent_count;
    bool m_agent_count_isSet;
    bool m_agent_count_isValid;

    QString m_agent_vm_size;
    bool m_agent_vm_size_isSet;
    bool m_agent_vm_size_isValid;

    QString m_cluster_fqdn;
    bool m_cluster_fqdn_isSet;
    bool m_cluster_fqdn_isValid;

    qint32 m_master_count;
    bool m_master_count_isSet;
    bool m_master_count_isValid;

    OAIKubernetesClusterProperties m_orchestrator_properties;
    bool m_orchestrator_properties_isSet;
    bool m_orchestrator_properties_isValid;

    QString m_orchestrator_type;
    bool m_orchestrator_type_isSet;
    bool m_orchestrator_type_isValid;

    QList<OAISystemService> m_system_services;
    bool m_system_services_isSet;
    bool m_system_services_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAcsClusterProperties)

#endif // OAIAcsClusterProperties_H
