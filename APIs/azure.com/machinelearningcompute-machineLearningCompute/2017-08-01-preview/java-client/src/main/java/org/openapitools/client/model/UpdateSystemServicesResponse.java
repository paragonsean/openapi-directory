/*
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response of the update system services API
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:54.681508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSystemServicesResponse {
  public static final String SERIALIZED_NAME_UPDATE_COMPLETED_ON = "updateCompletedOn";
  @SerializedName(SERIALIZED_NAME_UPDATE_COMPLETED_ON)
  private OffsetDateTime updateCompletedOn;

  public static final String SERIALIZED_NAME_UPDATE_STARTED_ON = "updateStartedOn";
  @SerializedName(SERIALIZED_NAME_UPDATE_STARTED_ON)
  private OffsetDateTime updateStartedOn;

  /**
   * Update status
   */
  @JsonAdapter(UpdateStatusEnum.Adapter.class)
  public enum UpdateStatusEnum {
    UNKNOWN("Unknown"),
    
    UPDATING("Updating"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    UpdateStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UpdateStatusEnum fromValue(String value) {
      for (UpdateStatusEnum b : UpdateStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UpdateStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UpdateStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UpdateStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UpdateStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UpdateStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UPDATE_STATUS = "updateStatus";
  @SerializedName(SERIALIZED_NAME_UPDATE_STATUS)
  private UpdateStatusEnum updateStatus;

  public UpdateSystemServicesResponse() {
  }

  public UpdateSystemServicesResponse(
     OffsetDateTime updateCompletedOn, 
     OffsetDateTime updateStartedOn, 
     UpdateStatusEnum updateStatus
  ) {
    this();
    this.updateCompletedOn = updateCompletedOn;
    this.updateStartedOn = updateStartedOn;
    this.updateStatus = updateStatus;
  }

  /**
   * The date and time when the last system services update completed.
   * @return updateCompletedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateCompletedOn() {
    return updateCompletedOn;
  }



  /**
   * The date and time when the last system services update was started.
   * @return updateStartedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateStartedOn() {
    return updateStartedOn;
  }



  /**
   * Update status
   * @return updateStatus
   */
  @javax.annotation.Nullable
  public UpdateStatusEnum getUpdateStatus() {
    return updateStatus;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSystemServicesResponse updateSystemServicesResponse = (UpdateSystemServicesResponse) o;
    return Objects.equals(this.updateCompletedOn, updateSystemServicesResponse.updateCompletedOn) &&
        Objects.equals(this.updateStartedOn, updateSystemServicesResponse.updateStartedOn) &&
        Objects.equals(this.updateStatus, updateSystemServicesResponse.updateStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(updateCompletedOn, updateStartedOn, updateStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSystemServicesResponse {\n");
    sb.append("    updateCompletedOn: ").append(toIndentedString(updateCompletedOn)).append("\n");
    sb.append("    updateStartedOn: ").append(toIndentedString(updateStartedOn)).append("\n");
    sb.append("    updateStatus: ").append(toIndentedString(updateStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("updateCompletedOn");
    openapiFields.add("updateStartedOn");
    openapiFields.add("updateStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSystemServicesResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSystemServicesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSystemServicesResponse is not found in the empty JSON string", UpdateSystemServicesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSystemServicesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSystemServicesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("updateStatus") != null && !jsonObj.get("updateStatus").isJsonNull()) && !jsonObj.get("updateStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateStatus").toString()));
      }
      // validate the optional field `updateStatus`
      if (jsonObj.get("updateStatus") != null && !jsonObj.get("updateStatus").isJsonNull()) {
        UpdateStatusEnum.validateJsonElement(jsonObj.get("updateStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSystemServicesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSystemServicesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSystemServicesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSystemServicesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSystemServicesResponse>() {
           @Override
           public void write(JsonWriter out, UpdateSystemServicesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSystemServicesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSystemServicesResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSystemServicesResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateSystemServicesResponse
   */
  public static UpdateSystemServicesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSystemServicesResponse.class);
  }

  /**
   * Convert an instance of UpdateSystemServicesResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

