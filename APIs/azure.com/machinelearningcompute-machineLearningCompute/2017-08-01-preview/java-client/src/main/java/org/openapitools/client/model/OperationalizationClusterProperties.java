/*
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AcsClusterProperties;
import org.openapitools.client.model.AppInsightsProperties;
import org.openapitools.client.model.ContainerRegistryProperties;
import org.openapitools.client.model.ErrorResponseWrapper;
import org.openapitools.client.model.GlobalServiceConfiguration;
import org.openapitools.client.model.StorageAccountProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an operationalization cluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:54.681508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationalizationClusterProperties {
  public static final String SERIALIZED_NAME_APP_INSIGHTS = "appInsights";
  @SerializedName(SERIALIZED_NAME_APP_INSIGHTS)
  private AppInsightsProperties appInsights;

  /**
   * The cluster type.
   */
  @JsonAdapter(ClusterTypeEnum.Adapter.class)
  public enum ClusterTypeEnum {
    ACS("ACS"),
    
    LOCAL("Local");

    private String value;

    ClusterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClusterTypeEnum fromValue(String value) {
      for (ClusterTypeEnum b : ClusterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClusterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClusterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClusterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClusterTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClusterTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLUSTER_TYPE = "clusterType";
  @SerializedName(SERIALIZED_NAME_CLUSTER_TYPE)
  private ClusterTypeEnum clusterType;

  public static final String SERIALIZED_NAME_CONTAINER_REGISTRY = "containerRegistry";
  @SerializedName(SERIALIZED_NAME_CONTAINER_REGISTRY)
  private ContainerRegistryProperties containerRegistry;

  public static final String SERIALIZED_NAME_CONTAINER_SERVICE = "containerService";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SERVICE)
  private AcsClusterProperties containerService;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GLOBAL_SERVICE_CONFIGURATION = "globalServiceConfiguration";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SERVICE_CONFIGURATION)
  private GlobalServiceConfiguration globalServiceConfiguration;

  public static final String SERIALIZED_NAME_MODIFIED_ON = "modifiedOn";
  @SerializedName(SERIALIZED_NAME_MODIFIED_ON)
  private OffsetDateTime modifiedOn;

  public static final String SERIALIZED_NAME_PROVISIONING_ERRORS = "provisioningErrors";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_ERRORS)
  private List<ErrorResponseWrapper> provisioningErrors = new ArrayList<>();

  /**
   * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    UNKNOWN("Unknown"),
    
    UPDATING("Updating"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT = "storageAccount";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT)
  private StorageAccountProperties storageAccount;

  public OperationalizationClusterProperties() {
  }

  public OperationalizationClusterProperties(
     OffsetDateTime createdOn, 
     OffsetDateTime modifiedOn, 
     List<ErrorResponseWrapper> provisioningErrors, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.createdOn = createdOn;
    this.modifiedOn = modifiedOn;
    this.provisioningErrors = provisioningErrors;
    this.provisioningState = provisioningState;
  }

  public OperationalizationClusterProperties appInsights(AppInsightsProperties appInsights) {
    this.appInsights = appInsights;
    return this;
  }

  /**
   * Get appInsights
   * @return appInsights
   */
  @javax.annotation.Nullable
  public AppInsightsProperties getAppInsights() {
    return appInsights;
  }

  public void setAppInsights(AppInsightsProperties appInsights) {
    this.appInsights = appInsights;
  }


  public OperationalizationClusterProperties clusterType(ClusterTypeEnum clusterType) {
    this.clusterType = clusterType;
    return this;
  }

  /**
   * The cluster type.
   * @return clusterType
   */
  @javax.annotation.Nonnull
  public ClusterTypeEnum getClusterType() {
    return clusterType;
  }

  public void setClusterType(ClusterTypeEnum clusterType) {
    this.clusterType = clusterType;
  }


  public OperationalizationClusterProperties containerRegistry(ContainerRegistryProperties containerRegistry) {
    this.containerRegistry = containerRegistry;
    return this;
  }

  /**
   * Get containerRegistry
   * @return containerRegistry
   */
  @javax.annotation.Nullable
  public ContainerRegistryProperties getContainerRegistry() {
    return containerRegistry;
  }

  public void setContainerRegistry(ContainerRegistryProperties containerRegistry) {
    this.containerRegistry = containerRegistry;
  }


  public OperationalizationClusterProperties containerService(AcsClusterProperties containerService) {
    this.containerService = containerService;
    return this;
  }

  /**
   * Get containerService
   * @return containerService
   */
  @javax.annotation.Nullable
  public AcsClusterProperties getContainerService() {
    return containerService;
  }

  public void setContainerService(AcsClusterProperties containerService) {
    this.containerService = containerService;
  }


  /**
   * The date and time when the cluster was created.
   * @return createdOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }



  public OperationalizationClusterProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the cluster.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OperationalizationClusterProperties globalServiceConfiguration(GlobalServiceConfiguration globalServiceConfiguration) {
    this.globalServiceConfiguration = globalServiceConfiguration;
    return this;
  }

  /**
   * Get globalServiceConfiguration
   * @return globalServiceConfiguration
   */
  @javax.annotation.Nullable
  public GlobalServiceConfiguration getGlobalServiceConfiguration() {
    return globalServiceConfiguration;
  }

  public void setGlobalServiceConfiguration(GlobalServiceConfiguration globalServiceConfiguration) {
    this.globalServiceConfiguration = globalServiceConfiguration;
  }


  /**
   * The date and time when the cluster was last modified.
   * @return modifiedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getModifiedOn() {
    return modifiedOn;
  }



  /**
   * List of provisioning errors reported by the resource provider.
   * @return provisioningErrors
   */
  @javax.annotation.Nullable
  public List<ErrorResponseWrapper> getProvisioningErrors() {
    return provisioningErrors;
  }



  /**
   * The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public OperationalizationClusterProperties storageAccount(StorageAccountProperties storageAccount) {
    this.storageAccount = storageAccount;
    return this;
  }

  /**
   * Get storageAccount
   * @return storageAccount
   */
  @javax.annotation.Nullable
  public StorageAccountProperties getStorageAccount() {
    return storageAccount;
  }

  public void setStorageAccount(StorageAccountProperties storageAccount) {
    this.storageAccount = storageAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationalizationClusterProperties operationalizationClusterProperties = (OperationalizationClusterProperties) o;
    return Objects.equals(this.appInsights, operationalizationClusterProperties.appInsights) &&
        Objects.equals(this.clusterType, operationalizationClusterProperties.clusterType) &&
        Objects.equals(this.containerRegistry, operationalizationClusterProperties.containerRegistry) &&
        Objects.equals(this.containerService, operationalizationClusterProperties.containerService) &&
        Objects.equals(this.createdOn, operationalizationClusterProperties.createdOn) &&
        Objects.equals(this.description, operationalizationClusterProperties.description) &&
        Objects.equals(this.globalServiceConfiguration, operationalizationClusterProperties.globalServiceConfiguration) &&
        Objects.equals(this.modifiedOn, operationalizationClusterProperties.modifiedOn) &&
        Objects.equals(this.provisioningErrors, operationalizationClusterProperties.provisioningErrors) &&
        Objects.equals(this.provisioningState, operationalizationClusterProperties.provisioningState) &&
        Objects.equals(this.storageAccount, operationalizationClusterProperties.storageAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInsights, clusterType, containerRegistry, containerService, createdOn, description, globalServiceConfiguration, modifiedOn, provisioningErrors, provisioningState, storageAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationalizationClusterProperties {\n");
    sb.append("    appInsights: ").append(toIndentedString(appInsights)).append("\n");
    sb.append("    clusterType: ").append(toIndentedString(clusterType)).append("\n");
    sb.append("    containerRegistry: ").append(toIndentedString(containerRegistry)).append("\n");
    sb.append("    containerService: ").append(toIndentedString(containerService)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    globalServiceConfiguration: ").append(toIndentedString(globalServiceConfiguration)).append("\n");
    sb.append("    modifiedOn: ").append(toIndentedString(modifiedOn)).append("\n");
    sb.append("    provisioningErrors: ").append(toIndentedString(provisioningErrors)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    storageAccount: ").append(toIndentedString(storageAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appInsights");
    openapiFields.add("clusterType");
    openapiFields.add("containerRegistry");
    openapiFields.add("containerService");
    openapiFields.add("createdOn");
    openapiFields.add("description");
    openapiFields.add("globalServiceConfiguration");
    openapiFields.add("modifiedOn");
    openapiFields.add("provisioningErrors");
    openapiFields.add("provisioningState");
    openapiFields.add("storageAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clusterType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationalizationClusterProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationalizationClusterProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationalizationClusterProperties is not found in the empty JSON string", OperationalizationClusterProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationalizationClusterProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationalizationClusterProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OperationalizationClusterProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appInsights`
      if (jsonObj.get("appInsights") != null && !jsonObj.get("appInsights").isJsonNull()) {
        AppInsightsProperties.validateJsonElement(jsonObj.get("appInsights"));
      }
      if (!jsonObj.get("clusterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterType").toString()));
      }
      // validate the required field `clusterType`
      ClusterTypeEnum.validateJsonElement(jsonObj.get("clusterType"));
      // validate the optional field `containerRegistry`
      if (jsonObj.get("containerRegistry") != null && !jsonObj.get("containerRegistry").isJsonNull()) {
        ContainerRegistryProperties.validateJsonElement(jsonObj.get("containerRegistry"));
      }
      // validate the optional field `containerService`
      if (jsonObj.get("containerService") != null && !jsonObj.get("containerService").isJsonNull()) {
        AcsClusterProperties.validateJsonElement(jsonObj.get("containerService"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("provisioningErrors") != null && !jsonObj.get("provisioningErrors").isJsonNull()) {
        JsonArray jsonArrayprovisioningErrors = jsonObj.getAsJsonArray("provisioningErrors");
        if (jsonArrayprovisioningErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("provisioningErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `provisioningErrors` to be an array in the JSON string but got `%s`", jsonObj.get("provisioningErrors").toString()));
          }

          // validate the optional field `provisioningErrors` (array)
          for (int i = 0; i < jsonArrayprovisioningErrors.size(); i++) {
            ErrorResponseWrapper.validateJsonElement(jsonArrayprovisioningErrors.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `storageAccount`
      if (jsonObj.get("storageAccount") != null && !jsonObj.get("storageAccount").isJsonNull()) {
        StorageAccountProperties.validateJsonElement(jsonObj.get("storageAccount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationalizationClusterProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationalizationClusterProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationalizationClusterProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationalizationClusterProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationalizationClusterProperties>() {
           @Override
           public void write(JsonWriter out, OperationalizationClusterProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationalizationClusterProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationalizationClusterProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationalizationClusterProperties
   * @throws IOException if the JSON string is invalid with respect to OperationalizationClusterProperties
   */
  public static OperationalizationClusterProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationalizationClusterProperties.class);
  }

  /**
   * Convert an instance of OperationalizationClusterProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

