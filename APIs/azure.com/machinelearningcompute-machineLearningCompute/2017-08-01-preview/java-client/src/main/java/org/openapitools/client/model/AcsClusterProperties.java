/*
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KubernetesClusterProperties;
import org.openapitools.client.model.SystemService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the container service backing the cluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:54.681508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AcsClusterProperties {
  public static final String SERIALIZED_NAME_AGENT_COUNT = "agentCount";
  @SerializedName(SERIALIZED_NAME_AGENT_COUNT)
  private Integer agentCount;

  /**
   * The Azure VM size of the agent VM nodes. This cannot be changed once the cluster is created. This list is non exhaustive; refer to https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for the possible VM sizes.
   */
  @JsonAdapter(AgentVmSizeEnum.Adapter.class)
  public enum AgentVmSizeEnum {
    A0("Standard_A0"),
    
    A1("Standard_A1"),
    
    A2("Standard_A2"),
    
    A3("Standard_A3"),
    
    A4("Standard_A4"),
    
    A5("Standard_A5"),
    
    A6("Standard_A6"),
    
    A7("Standard_A7"),
    
    A8("Standard_A8"),
    
    A9("Standard_A9"),
    
    A10("Standard_A10"),
    
    A11("Standard_A11"),
    
    D1("Standard_D1"),
    
    D2("Standard_D2"),
    
    D3("Standard_D3"),
    
    D4("Standard_D4"),
    
    D11("Standard_D11"),
    
    D12("Standard_D12"),
    
    D13("Standard_D13"),
    
    D14("Standard_D14"),
    
    D1_V2("Standard_D1_v2"),
    
    D2_V2("Standard_D2_v2"),
    
    D3_V2("Standard_D3_v2"),
    
    D4_V2("Standard_D4_v2"),
    
    D5_V2("Standard_D5_v2"),
    
    D11_V2("Standard_D11_v2"),
    
    D12_V2("Standard_D12_v2"),
    
    D13_V2("Standard_D13_v2"),
    
    D14_V2("Standard_D14_v2"),
    
    G1("Standard_G1"),
    
    G2("Standard_G2"),
    
    G3("Standard_G3"),
    
    G4("Standard_G4"),
    
    G5("Standard_G5"),
    
    DS1("Standard_DS1"),
    
    DS2("Standard_DS2"),
    
    DS3("Standard_DS3"),
    
    DS4("Standard_DS4"),
    
    DS11("Standard_DS11"),
    
    DS12("Standard_DS12"),
    
    DS13("Standard_DS13"),
    
    DS14("Standard_DS14"),
    
    GS1("Standard_GS1"),
    
    GS2("Standard_GS2"),
    
    GS3("Standard_GS3"),
    
    GS4("Standard_GS4"),
    
    GS5("Standard_GS5");

    private String value;

    AgentVmSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AgentVmSizeEnum fromValue(String value) {
      for (AgentVmSizeEnum b : AgentVmSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AgentVmSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AgentVmSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AgentVmSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AgentVmSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AgentVmSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGENT_VM_SIZE = "agentVmSize";
  @SerializedName(SERIALIZED_NAME_AGENT_VM_SIZE)
  private AgentVmSizeEnum agentVmSize = AgentVmSizeEnum.D3_V2;

  public static final String SERIALIZED_NAME_CLUSTER_FQDN = "clusterFqdn";
  @SerializedName(SERIALIZED_NAME_CLUSTER_FQDN)
  private String clusterFqdn;

  public static final String SERIALIZED_NAME_MASTER_COUNT = "masterCount";
  @SerializedName(SERIALIZED_NAME_MASTER_COUNT)
  private Integer masterCount;

  public static final String SERIALIZED_NAME_ORCHESTRATOR_PROPERTIES = "orchestratorProperties";
  @SerializedName(SERIALIZED_NAME_ORCHESTRATOR_PROPERTIES)
  private KubernetesClusterProperties orchestratorProperties;

  /**
   * Type of orchestrator. It cannot be changed once the cluster is created.
   */
  @JsonAdapter(OrchestratorTypeEnum.Adapter.class)
  public enum OrchestratorTypeEnum {
    KUBERNETES("Kubernetes"),
    
    NONE("None");

    private String value;

    OrchestratorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrchestratorTypeEnum fromValue(String value) {
      for (OrchestratorTypeEnum b : OrchestratorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrchestratorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrchestratorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrchestratorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrchestratorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrchestratorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORCHESTRATOR_TYPE = "orchestratorType";
  @SerializedName(SERIALIZED_NAME_ORCHESTRATOR_TYPE)
  private OrchestratorTypeEnum orchestratorType;

  public static final String SERIALIZED_NAME_SYSTEM_SERVICES = "systemServices";
  @SerializedName(SERIALIZED_NAME_SYSTEM_SERVICES)
  private List<SystemService> systemServices = new ArrayList<>();

  public AcsClusterProperties() {
  }

  public AcsClusterProperties(
     String clusterFqdn
  ) {
    this();
    this.clusterFqdn = clusterFqdn;
  }

  public AcsClusterProperties agentCount(Integer agentCount) {
    this.agentCount = agentCount;
    return this;
  }

  /**
   * The number of agent nodes in the Container Service. This can be changed to scale the cluster.
   * minimum: 1
   * maximum: 100
   * @return agentCount
   */
  @javax.annotation.Nullable
  public Integer getAgentCount() {
    return agentCount;
  }

  public void setAgentCount(Integer agentCount) {
    this.agentCount = agentCount;
  }


  public AcsClusterProperties agentVmSize(AgentVmSizeEnum agentVmSize) {
    this.agentVmSize = agentVmSize;
    return this;
  }

  /**
   * The Azure VM size of the agent VM nodes. This cannot be changed once the cluster is created. This list is non exhaustive; refer to https://docs.microsoft.com/en-us/azure/virtual-machines/windows/sizes for the possible VM sizes.
   * @return agentVmSize
   */
  @javax.annotation.Nullable
  public AgentVmSizeEnum getAgentVmSize() {
    return agentVmSize;
  }

  public void setAgentVmSize(AgentVmSizeEnum agentVmSize) {
    this.agentVmSize = agentVmSize;
  }


  /**
   * The FQDN of the cluster. 
   * @return clusterFqdn
   */
  @javax.annotation.Nullable
  public String getClusterFqdn() {
    return clusterFqdn;
  }



  public AcsClusterProperties masterCount(Integer masterCount) {
    this.masterCount = masterCount;
    return this;
  }

  /**
   * The number of master nodes in the container service.
   * minimum: 1
   * maximum: 5
   * @return masterCount
   */
  @javax.annotation.Nullable
  public Integer getMasterCount() {
    return masterCount;
  }

  public void setMasterCount(Integer masterCount) {
    this.masterCount = masterCount;
  }


  public AcsClusterProperties orchestratorProperties(KubernetesClusterProperties orchestratorProperties) {
    this.orchestratorProperties = orchestratorProperties;
    return this;
  }

  /**
   * Get orchestratorProperties
   * @return orchestratorProperties
   */
  @javax.annotation.Nullable
  public KubernetesClusterProperties getOrchestratorProperties() {
    return orchestratorProperties;
  }

  public void setOrchestratorProperties(KubernetesClusterProperties orchestratorProperties) {
    this.orchestratorProperties = orchestratorProperties;
  }


  public AcsClusterProperties orchestratorType(OrchestratorTypeEnum orchestratorType) {
    this.orchestratorType = orchestratorType;
    return this;
  }

  /**
   * Type of orchestrator. It cannot be changed once the cluster is created.
   * @return orchestratorType
   */
  @javax.annotation.Nonnull
  public OrchestratorTypeEnum getOrchestratorType() {
    return orchestratorType;
  }

  public void setOrchestratorType(OrchestratorTypeEnum orchestratorType) {
    this.orchestratorType = orchestratorType;
  }


  public AcsClusterProperties systemServices(List<SystemService> systemServices) {
    this.systemServices = systemServices;
    return this;
  }

  public AcsClusterProperties addSystemServicesItem(SystemService systemServicesItem) {
    if (this.systemServices == null) {
      this.systemServices = new ArrayList<>();
    }
    this.systemServices.add(systemServicesItem);
    return this;
  }

  /**
   * The system services deployed to the cluster
   * @return systemServices
   */
  @javax.annotation.Nullable
  public List<SystemService> getSystemServices() {
    return systemServices;
  }

  public void setSystemServices(List<SystemService> systemServices) {
    this.systemServices = systemServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AcsClusterProperties acsClusterProperties = (AcsClusterProperties) o;
    return Objects.equals(this.agentCount, acsClusterProperties.agentCount) &&
        Objects.equals(this.agentVmSize, acsClusterProperties.agentVmSize) &&
        Objects.equals(this.clusterFqdn, acsClusterProperties.clusterFqdn) &&
        Objects.equals(this.masterCount, acsClusterProperties.masterCount) &&
        Objects.equals(this.orchestratorProperties, acsClusterProperties.orchestratorProperties) &&
        Objects.equals(this.orchestratorType, acsClusterProperties.orchestratorType) &&
        Objects.equals(this.systemServices, acsClusterProperties.systemServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentCount, agentVmSize, clusterFqdn, masterCount, orchestratorProperties, orchestratorType, systemServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AcsClusterProperties {\n");
    sb.append("    agentCount: ").append(toIndentedString(agentCount)).append("\n");
    sb.append("    agentVmSize: ").append(toIndentedString(agentVmSize)).append("\n");
    sb.append("    clusterFqdn: ").append(toIndentedString(clusterFqdn)).append("\n");
    sb.append("    masterCount: ").append(toIndentedString(masterCount)).append("\n");
    sb.append("    orchestratorProperties: ").append(toIndentedString(orchestratorProperties)).append("\n");
    sb.append("    orchestratorType: ").append(toIndentedString(orchestratorType)).append("\n");
    sb.append("    systemServices: ").append(toIndentedString(systemServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentCount");
    openapiFields.add("agentVmSize");
    openapiFields.add("clusterFqdn");
    openapiFields.add("masterCount");
    openapiFields.add("orchestratorProperties");
    openapiFields.add("orchestratorType");
    openapiFields.add("systemServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("orchestratorType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AcsClusterProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AcsClusterProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AcsClusterProperties is not found in the empty JSON string", AcsClusterProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AcsClusterProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AcsClusterProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AcsClusterProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentVmSize") != null && !jsonObj.get("agentVmSize").isJsonNull()) && !jsonObj.get("agentVmSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentVmSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentVmSize").toString()));
      }
      // validate the optional field `agentVmSize`
      if (jsonObj.get("agentVmSize") != null && !jsonObj.get("agentVmSize").isJsonNull()) {
        AgentVmSizeEnum.validateJsonElement(jsonObj.get("agentVmSize"));
      }
      if ((jsonObj.get("clusterFqdn") != null && !jsonObj.get("clusterFqdn").isJsonNull()) && !jsonObj.get("clusterFqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterFqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterFqdn").toString()));
      }
      // validate the optional field `orchestratorProperties`
      if (jsonObj.get("orchestratorProperties") != null && !jsonObj.get("orchestratorProperties").isJsonNull()) {
        KubernetesClusterProperties.validateJsonElement(jsonObj.get("orchestratorProperties"));
      }
      if (!jsonObj.get("orchestratorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orchestratorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orchestratorType").toString()));
      }
      // validate the required field `orchestratorType`
      OrchestratorTypeEnum.validateJsonElement(jsonObj.get("orchestratorType"));
      if (jsonObj.get("systemServices") != null && !jsonObj.get("systemServices").isJsonNull()) {
        JsonArray jsonArraysystemServices = jsonObj.getAsJsonArray("systemServices");
        if (jsonArraysystemServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("systemServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `systemServices` to be an array in the JSON string but got `%s`", jsonObj.get("systemServices").toString()));
          }

          // validate the optional field `systemServices` (array)
          for (int i = 0; i < jsonArraysystemServices.size(); i++) {
            SystemService.validateJsonElement(jsonArraysystemServices.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AcsClusterProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AcsClusterProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AcsClusterProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AcsClusterProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AcsClusterProperties>() {
           @Override
           public void write(JsonWriter out, AcsClusterProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AcsClusterProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AcsClusterProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AcsClusterProperties
   * @throws IOException if the JSON string is invalid with respect to AcsClusterProperties
   */
  public static AcsClusterProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AcsClusterProperties.class);
  }

  /**
   * Convert an instance of AcsClusterProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

