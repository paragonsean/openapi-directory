/*
 * Machine Learning Compute Management Client
 * These APIs allow end users to operate on Azure Machine Learning Compute resources. They support the following operations:<ul><li>Create or update a cluster</li><li>Get a cluster</li><li>Patch a cluster</li><li>Delete a cluster</li><li>Get keys for a cluster</li><li>Check if updates are available for system services in a cluster</li><li>Update system services in a cluster</li><li>Get all clusters in a resource group</li><li>Get all clusters in a subscription</li></ul>
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppInsightsCredentials;
import org.openapitools.client.model.ContainerRegistryCredentials;
import org.openapitools.client.model.ContainerServiceCredentials;
import org.openapitools.client.model.ServiceAuthConfiguration;
import org.openapitools.client.model.SslConfiguration;
import org.openapitools.client.model.StorageAccountCredentials;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Credentials to resources in the cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:47:54.681508-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationalizationClusterCredentials {
  public static final String SERIALIZED_NAME_APP_INSIGHTS = "appInsights";
  @SerializedName(SERIALIZED_NAME_APP_INSIGHTS)
  private AppInsightsCredentials appInsights;

  public static final String SERIALIZED_NAME_CONTAINER_REGISTRY = "containerRegistry";
  @SerializedName(SERIALIZED_NAME_CONTAINER_REGISTRY)
  private ContainerRegistryCredentials containerRegistry;

  public static final String SERIALIZED_NAME_CONTAINER_SERVICE = "containerService";
  @SerializedName(SERIALIZED_NAME_CONTAINER_SERVICE)
  private ContainerServiceCredentials containerService;

  public static final String SERIALIZED_NAME_SERVICE_AUTH_CONFIGURATION = "serviceAuthConfiguration";
  @SerializedName(SERIALIZED_NAME_SERVICE_AUTH_CONFIGURATION)
  private ServiceAuthConfiguration serviceAuthConfiguration;

  public static final String SERIALIZED_NAME_SSL_CONFIGURATION = "sslConfiguration";
  @SerializedName(SERIALIZED_NAME_SSL_CONFIGURATION)
  private SslConfiguration sslConfiguration;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT = "storageAccount";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT)
  private StorageAccountCredentials storageAccount;

  public OperationalizationClusterCredentials() {
  }

  public OperationalizationClusterCredentials appInsights(AppInsightsCredentials appInsights) {
    this.appInsights = appInsights;
    return this;
  }

  /**
   * Get appInsights
   * @return appInsights
   */
  @javax.annotation.Nullable
  public AppInsightsCredentials getAppInsights() {
    return appInsights;
  }

  public void setAppInsights(AppInsightsCredentials appInsights) {
    this.appInsights = appInsights;
  }


  public OperationalizationClusterCredentials containerRegistry(ContainerRegistryCredentials containerRegistry) {
    this.containerRegistry = containerRegistry;
    return this;
  }

  /**
   * Get containerRegistry
   * @return containerRegistry
   */
  @javax.annotation.Nullable
  public ContainerRegistryCredentials getContainerRegistry() {
    return containerRegistry;
  }

  public void setContainerRegistry(ContainerRegistryCredentials containerRegistry) {
    this.containerRegistry = containerRegistry;
  }


  public OperationalizationClusterCredentials containerService(ContainerServiceCredentials containerService) {
    this.containerService = containerService;
    return this;
  }

  /**
   * Get containerService
   * @return containerService
   */
  @javax.annotation.Nullable
  public ContainerServiceCredentials getContainerService() {
    return containerService;
  }

  public void setContainerService(ContainerServiceCredentials containerService) {
    this.containerService = containerService;
  }


  public OperationalizationClusterCredentials serviceAuthConfiguration(ServiceAuthConfiguration serviceAuthConfiguration) {
    this.serviceAuthConfiguration = serviceAuthConfiguration;
    return this;
  }

  /**
   * Get serviceAuthConfiguration
   * @return serviceAuthConfiguration
   */
  @javax.annotation.Nullable
  public ServiceAuthConfiguration getServiceAuthConfiguration() {
    return serviceAuthConfiguration;
  }

  public void setServiceAuthConfiguration(ServiceAuthConfiguration serviceAuthConfiguration) {
    this.serviceAuthConfiguration = serviceAuthConfiguration;
  }


  public OperationalizationClusterCredentials sslConfiguration(SslConfiguration sslConfiguration) {
    this.sslConfiguration = sslConfiguration;
    return this;
  }

  /**
   * Get sslConfiguration
   * @return sslConfiguration
   */
  @javax.annotation.Nullable
  public SslConfiguration getSslConfiguration() {
    return sslConfiguration;
  }

  public void setSslConfiguration(SslConfiguration sslConfiguration) {
    this.sslConfiguration = sslConfiguration;
  }


  public OperationalizationClusterCredentials storageAccount(StorageAccountCredentials storageAccount) {
    this.storageAccount = storageAccount;
    return this;
  }

  /**
   * Get storageAccount
   * @return storageAccount
   */
  @javax.annotation.Nullable
  public StorageAccountCredentials getStorageAccount() {
    return storageAccount;
  }

  public void setStorageAccount(StorageAccountCredentials storageAccount) {
    this.storageAccount = storageAccount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationalizationClusterCredentials operationalizationClusterCredentials = (OperationalizationClusterCredentials) o;
    return Objects.equals(this.appInsights, operationalizationClusterCredentials.appInsights) &&
        Objects.equals(this.containerRegistry, operationalizationClusterCredentials.containerRegistry) &&
        Objects.equals(this.containerService, operationalizationClusterCredentials.containerService) &&
        Objects.equals(this.serviceAuthConfiguration, operationalizationClusterCredentials.serviceAuthConfiguration) &&
        Objects.equals(this.sslConfiguration, operationalizationClusterCredentials.sslConfiguration) &&
        Objects.equals(this.storageAccount, operationalizationClusterCredentials.storageAccount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInsights, containerRegistry, containerService, serviceAuthConfiguration, sslConfiguration, storageAccount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationalizationClusterCredentials {\n");
    sb.append("    appInsights: ").append(toIndentedString(appInsights)).append("\n");
    sb.append("    containerRegistry: ").append(toIndentedString(containerRegistry)).append("\n");
    sb.append("    containerService: ").append(toIndentedString(containerService)).append("\n");
    sb.append("    serviceAuthConfiguration: ").append(toIndentedString(serviceAuthConfiguration)).append("\n");
    sb.append("    sslConfiguration: ").append(toIndentedString(sslConfiguration)).append("\n");
    sb.append("    storageAccount: ").append(toIndentedString(storageAccount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appInsights");
    openapiFields.add("containerRegistry");
    openapiFields.add("containerService");
    openapiFields.add("serviceAuthConfiguration");
    openapiFields.add("sslConfiguration");
    openapiFields.add("storageAccount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationalizationClusterCredentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationalizationClusterCredentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationalizationClusterCredentials is not found in the empty JSON string", OperationalizationClusterCredentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationalizationClusterCredentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationalizationClusterCredentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appInsights`
      if (jsonObj.get("appInsights") != null && !jsonObj.get("appInsights").isJsonNull()) {
        AppInsightsCredentials.validateJsonElement(jsonObj.get("appInsights"));
      }
      // validate the optional field `containerRegistry`
      if (jsonObj.get("containerRegistry") != null && !jsonObj.get("containerRegistry").isJsonNull()) {
        ContainerRegistryCredentials.validateJsonElement(jsonObj.get("containerRegistry"));
      }
      // validate the optional field `containerService`
      if (jsonObj.get("containerService") != null && !jsonObj.get("containerService").isJsonNull()) {
        ContainerServiceCredentials.validateJsonElement(jsonObj.get("containerService"));
      }
      // validate the optional field `serviceAuthConfiguration`
      if (jsonObj.get("serviceAuthConfiguration") != null && !jsonObj.get("serviceAuthConfiguration").isJsonNull()) {
        ServiceAuthConfiguration.validateJsonElement(jsonObj.get("serviceAuthConfiguration"));
      }
      // validate the optional field `sslConfiguration`
      if (jsonObj.get("sslConfiguration") != null && !jsonObj.get("sslConfiguration").isJsonNull()) {
        SslConfiguration.validateJsonElement(jsonObj.get("sslConfiguration"));
      }
      // validate the optional field `storageAccount`
      if (jsonObj.get("storageAccount") != null && !jsonObj.get("storageAccount").isJsonNull()) {
        StorageAccountCredentials.validateJsonElement(jsonObj.get("storageAccount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationalizationClusterCredentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationalizationClusterCredentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationalizationClusterCredentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationalizationClusterCredentials.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationalizationClusterCredentials>() {
           @Override
           public void write(JsonWriter out, OperationalizationClusterCredentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationalizationClusterCredentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationalizationClusterCredentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationalizationClusterCredentials
   * @throws IOException if the JSON string is invalid with respect to OperationalizationClusterCredentials
   */
  public static OperationalizationClusterCredentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationalizationClusterCredentials.class);
  }

  /**
   * Convert an instance of OperationalizationClusterCredentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

