# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutoScaleConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_replicas: int=None, min_replicas: int=None, refresh_period_in_seconds: int=None, status: str='Disabled', target_utilization: float=None):
        """AutoScaleConfiguration - a model defined in OpenAPI

        :param max_replicas: The max_replicas of this AutoScaleConfiguration.
        :param min_replicas: The min_replicas of this AutoScaleConfiguration.
        :param refresh_period_in_seconds: The refresh_period_in_seconds of this AutoScaleConfiguration.
        :param status: The status of this AutoScaleConfiguration.
        :param target_utilization: The target_utilization of this AutoScaleConfiguration.
        """
        self.openapi_types = {
            'max_replicas': int,
            'min_replicas': int,
            'refresh_period_in_seconds': int,
            'status': str,
            'target_utilization': float
        }

        self.attribute_map = {
            'max_replicas': 'maxReplicas',
            'min_replicas': 'minReplicas',
            'refresh_period_in_seconds': 'refreshPeriodInSeconds',
            'status': 'status',
            'target_utilization': 'targetUtilization'
        }

        self._max_replicas = max_replicas
        self._min_replicas = min_replicas
        self._refresh_period_in_seconds = refresh_period_in_seconds
        self._status = status
        self._target_utilization = target_utilization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutoScaleConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutoScaleConfiguration of this AutoScaleConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_replicas(self):
        """Gets the max_replicas of this AutoScaleConfiguration.

        The maximum number of replicas for each service.

        :return: The max_replicas of this AutoScaleConfiguration.
        :rtype: int
        """
        return self._max_replicas

    @max_replicas.setter
    def max_replicas(self, max_replicas):
        """Sets the max_replicas of this AutoScaleConfiguration.

        The maximum number of replicas for each service.

        :param max_replicas: The max_replicas of this AutoScaleConfiguration.
        :type max_replicas: int
        """
        if max_replicas is not None and max_replicas < 1:
            raise ValueError("Invalid value for `max_replicas`, must be a value greater than or equal to `1`")

        self._max_replicas = max_replicas

    @property
    def min_replicas(self):
        """Gets the min_replicas of this AutoScaleConfiguration.

        The minimum number of replicas for each service.

        :return: The min_replicas of this AutoScaleConfiguration.
        :rtype: int
        """
        return self._min_replicas

    @min_replicas.setter
    def min_replicas(self, min_replicas):
        """Sets the min_replicas of this AutoScaleConfiguration.

        The minimum number of replicas for each service.

        :param min_replicas: The min_replicas of this AutoScaleConfiguration.
        :type min_replicas: int
        """
        if min_replicas is not None and min_replicas < 1:
            raise ValueError("Invalid value for `min_replicas`, must be a value greater than or equal to `1`")

        self._min_replicas = min_replicas

    @property
    def refresh_period_in_seconds(self):
        """Gets the refresh_period_in_seconds of this AutoScaleConfiguration.

        Refresh period in seconds.

        :return: The refresh_period_in_seconds of this AutoScaleConfiguration.
        :rtype: int
        """
        return self._refresh_period_in_seconds

    @refresh_period_in_seconds.setter
    def refresh_period_in_seconds(self, refresh_period_in_seconds):
        """Sets the refresh_period_in_seconds of this AutoScaleConfiguration.

        Refresh period in seconds.

        :param refresh_period_in_seconds: The refresh_period_in_seconds of this AutoScaleConfiguration.
        :type refresh_period_in_seconds: int
        """

        self._refresh_period_in_seconds = refresh_period_in_seconds

    @property
    def status(self):
        """Gets the status of this AutoScaleConfiguration.

        If auto-scale is enabled for all services. Each service can turn it off individually.

        :return: The status of this AutoScaleConfiguration.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AutoScaleConfiguration.

        If auto-scale is enabled for all services. Each service can turn it off individually.

        :param status: The status of this AutoScaleConfiguration.
        :type status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_utilization(self):
        """Gets the target_utilization of this AutoScaleConfiguration.

        The target utilization.

        :return: The target_utilization of this AutoScaleConfiguration.
        :rtype: float
        """
        return self._target_utilization

    @target_utilization.setter
    def target_utilization(self, target_utilization):
        """Sets the target_utilization of this AutoScaleConfiguration.

        The target utilization.

        :param target_utilization: The target_utilization of this AutoScaleConfiguration.
        :type target_utilization: float
        """

        self._target_utilization = target_utilization
