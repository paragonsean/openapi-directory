# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSystemServicesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, update_completed_on: datetime=None, update_started_on: datetime=None, update_status: str=None):
        """UpdateSystemServicesResponse - a model defined in OpenAPI

        :param update_completed_on: The update_completed_on of this UpdateSystemServicesResponse.
        :param update_started_on: The update_started_on of this UpdateSystemServicesResponse.
        :param update_status: The update_status of this UpdateSystemServicesResponse.
        """
        self.openapi_types = {
            'update_completed_on': datetime,
            'update_started_on': datetime,
            'update_status': str
        }

        self.attribute_map = {
            'update_completed_on': 'updateCompletedOn',
            'update_started_on': 'updateStartedOn',
            'update_status': 'updateStatus'
        }

        self._update_completed_on = update_completed_on
        self._update_started_on = update_started_on
        self._update_status = update_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSystemServicesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSystemServicesResponse of this UpdateSystemServicesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def update_completed_on(self):
        """Gets the update_completed_on of this UpdateSystemServicesResponse.

        The date and time when the last system services update completed.

        :return: The update_completed_on of this UpdateSystemServicesResponse.
        :rtype: datetime
        """
        return self._update_completed_on

    @update_completed_on.setter
    def update_completed_on(self, update_completed_on):
        """Sets the update_completed_on of this UpdateSystemServicesResponse.

        The date and time when the last system services update completed.

        :param update_completed_on: The update_completed_on of this UpdateSystemServicesResponse.
        :type update_completed_on: datetime
        """

        self._update_completed_on = update_completed_on

    @property
    def update_started_on(self):
        """Gets the update_started_on of this UpdateSystemServicesResponse.

        The date and time when the last system services update was started.

        :return: The update_started_on of this UpdateSystemServicesResponse.
        :rtype: datetime
        """
        return self._update_started_on

    @update_started_on.setter
    def update_started_on(self, update_started_on):
        """Sets the update_started_on of this UpdateSystemServicesResponse.

        The date and time when the last system services update was started.

        :param update_started_on: The update_started_on of this UpdateSystemServicesResponse.
        :type update_started_on: datetime
        """

        self._update_started_on = update_started_on

    @property
    def update_status(self):
        """Gets the update_status of this UpdateSystemServicesResponse.

        Update status

        :return: The update_status of this UpdateSystemServicesResponse.
        :rtype: str
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this UpdateSystemServicesResponse.

        Update status

        :param update_status: The update_status of this UpdateSystemServicesResponse.
        :type update_status: str
        """
        allowed_values = ["Unknown", "Updating", "Creating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if update_status not in allowed_values:
            raise ValueError(
                "Invalid value for `update_status` ({0}), must be one of {1}"
                .format(update_status, allowed_values)
            )

        self._update_status = update_status
