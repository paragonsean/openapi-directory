# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acs_cluster_properties import AcsClusterProperties
from openapi_server.models.app_insights_properties import AppInsightsProperties
from openapi_server.models.container_registry_properties import ContainerRegistryProperties
from openapi_server.models.error_response_wrapper import ErrorResponseWrapper
from openapi_server.models.global_service_configuration import GlobalServiceConfiguration
from openapi_server.models.storage_account_properties import StorageAccountProperties
from openapi_server import util


class OperationalizationClusterProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_insights: AppInsightsProperties=None, cluster_type: str=None, container_registry: ContainerRegistryProperties=None, container_service: AcsClusterProperties=None, created_on: datetime=None, description: str=None, global_service_configuration: GlobalServiceConfiguration=None, modified_on: datetime=None, provisioning_errors: List[ErrorResponseWrapper]=None, provisioning_state: str=None, storage_account: StorageAccountProperties=None):
        """OperationalizationClusterProperties - a model defined in OpenAPI

        :param app_insights: The app_insights of this OperationalizationClusterProperties.
        :param cluster_type: The cluster_type of this OperationalizationClusterProperties.
        :param container_registry: The container_registry of this OperationalizationClusterProperties.
        :param container_service: The container_service of this OperationalizationClusterProperties.
        :param created_on: The created_on of this OperationalizationClusterProperties.
        :param description: The description of this OperationalizationClusterProperties.
        :param global_service_configuration: The global_service_configuration of this OperationalizationClusterProperties.
        :param modified_on: The modified_on of this OperationalizationClusterProperties.
        :param provisioning_errors: The provisioning_errors of this OperationalizationClusterProperties.
        :param provisioning_state: The provisioning_state of this OperationalizationClusterProperties.
        :param storage_account: The storage_account of this OperationalizationClusterProperties.
        """
        self.openapi_types = {
            'app_insights': AppInsightsProperties,
            'cluster_type': str,
            'container_registry': ContainerRegistryProperties,
            'container_service': AcsClusterProperties,
            'created_on': datetime,
            'description': str,
            'global_service_configuration': GlobalServiceConfiguration,
            'modified_on': datetime,
            'provisioning_errors': List[ErrorResponseWrapper],
            'provisioning_state': str,
            'storage_account': StorageAccountProperties
        }

        self.attribute_map = {
            'app_insights': 'appInsights',
            'cluster_type': 'clusterType',
            'container_registry': 'containerRegistry',
            'container_service': 'containerService',
            'created_on': 'createdOn',
            'description': 'description',
            'global_service_configuration': 'globalServiceConfiguration',
            'modified_on': 'modifiedOn',
            'provisioning_errors': 'provisioningErrors',
            'provisioning_state': 'provisioningState',
            'storage_account': 'storageAccount'
        }

        self._app_insights = app_insights
        self._cluster_type = cluster_type
        self._container_registry = container_registry
        self._container_service = container_service
        self._created_on = created_on
        self._description = description
        self._global_service_configuration = global_service_configuration
        self._modified_on = modified_on
        self._provisioning_errors = provisioning_errors
        self._provisioning_state = provisioning_state
        self._storage_account = storage_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationalizationClusterProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationalizationClusterProperties of this OperationalizationClusterProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_insights(self):
        """Gets the app_insights of this OperationalizationClusterProperties.


        :return: The app_insights of this OperationalizationClusterProperties.
        :rtype: AppInsightsProperties
        """
        return self._app_insights

    @app_insights.setter
    def app_insights(self, app_insights):
        """Sets the app_insights of this OperationalizationClusterProperties.


        :param app_insights: The app_insights of this OperationalizationClusterProperties.
        :type app_insights: AppInsightsProperties
        """

        self._app_insights = app_insights

    @property
    def cluster_type(self):
        """Gets the cluster_type of this OperationalizationClusterProperties.

        The cluster type.

        :return: The cluster_type of this OperationalizationClusterProperties.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this OperationalizationClusterProperties.

        The cluster type.

        :param cluster_type: The cluster_type of this OperationalizationClusterProperties.
        :type cluster_type: str
        """
        allowed_values = ["ACS", "Local"]  # noqa: E501
        if cluster_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def container_registry(self):
        """Gets the container_registry of this OperationalizationClusterProperties.


        :return: The container_registry of this OperationalizationClusterProperties.
        :rtype: ContainerRegistryProperties
        """
        return self._container_registry

    @container_registry.setter
    def container_registry(self, container_registry):
        """Sets the container_registry of this OperationalizationClusterProperties.


        :param container_registry: The container_registry of this OperationalizationClusterProperties.
        :type container_registry: ContainerRegistryProperties
        """

        self._container_registry = container_registry

    @property
    def container_service(self):
        """Gets the container_service of this OperationalizationClusterProperties.


        :return: The container_service of this OperationalizationClusterProperties.
        :rtype: AcsClusterProperties
        """
        return self._container_service

    @container_service.setter
    def container_service(self, container_service):
        """Sets the container_service of this OperationalizationClusterProperties.


        :param container_service: The container_service of this OperationalizationClusterProperties.
        :type container_service: AcsClusterProperties
        """

        self._container_service = container_service

    @property
    def created_on(self):
        """Gets the created_on of this OperationalizationClusterProperties.

        The date and time when the cluster was created.

        :return: The created_on of this OperationalizationClusterProperties.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this OperationalizationClusterProperties.

        The date and time when the cluster was created.

        :param created_on: The created_on of this OperationalizationClusterProperties.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this OperationalizationClusterProperties.

        The description of the cluster.

        :return: The description of this OperationalizationClusterProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OperationalizationClusterProperties.

        The description of the cluster.

        :param description: The description of this OperationalizationClusterProperties.
        :type description: str
        """

        self._description = description

    @property
    def global_service_configuration(self):
        """Gets the global_service_configuration of this OperationalizationClusterProperties.


        :return: The global_service_configuration of this OperationalizationClusterProperties.
        :rtype: GlobalServiceConfiguration
        """
        return self._global_service_configuration

    @global_service_configuration.setter
    def global_service_configuration(self, global_service_configuration):
        """Sets the global_service_configuration of this OperationalizationClusterProperties.


        :param global_service_configuration: The global_service_configuration of this OperationalizationClusterProperties.
        :type global_service_configuration: GlobalServiceConfiguration
        """

        self._global_service_configuration = global_service_configuration

    @property
    def modified_on(self):
        """Gets the modified_on of this OperationalizationClusterProperties.

        The date and time when the cluster was last modified.

        :return: The modified_on of this OperationalizationClusterProperties.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this OperationalizationClusterProperties.

        The date and time when the cluster was last modified.

        :param modified_on: The modified_on of this OperationalizationClusterProperties.
        :type modified_on: datetime
        """

        self._modified_on = modified_on

    @property
    def provisioning_errors(self):
        """Gets the provisioning_errors of this OperationalizationClusterProperties.

        List of provisioning errors reported by the resource provider.

        :return: The provisioning_errors of this OperationalizationClusterProperties.
        :rtype: List[ErrorResponseWrapper]
        """
        return self._provisioning_errors

    @provisioning_errors.setter
    def provisioning_errors(self, provisioning_errors):
        """Sets the provisioning_errors of this OperationalizationClusterProperties.

        List of provisioning errors reported by the resource provider.

        :param provisioning_errors: The provisioning_errors of this OperationalizationClusterProperties.
        :type provisioning_errors: List[ErrorResponseWrapper]
        """

        self._provisioning_errors = provisioning_errors

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this OperationalizationClusterProperties.

        The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.

        :return: The provisioning_state of this OperationalizationClusterProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this OperationalizationClusterProperties.

        The provision state of the cluster. Valid values are Unknown, Updating, Provisioning, Succeeded, and Failed.

        :param provisioning_state: The provisioning_state of this OperationalizationClusterProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Unknown", "Updating", "Creating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def storage_account(self):
        """Gets the storage_account of this OperationalizationClusterProperties.


        :return: The storage_account of this OperationalizationClusterProperties.
        :rtype: StorageAccountProperties
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this OperationalizationClusterProperties.


        :param storage_account: The storage_account of this OperationalizationClusterProperties.
        :type storage_account: StorageAccountProperties
        """

        self._storage_account = storage_account
