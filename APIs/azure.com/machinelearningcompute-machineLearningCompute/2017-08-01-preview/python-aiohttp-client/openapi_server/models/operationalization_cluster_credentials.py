# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_insights_credentials import AppInsightsCredentials
from openapi_server.models.container_registry_credentials import ContainerRegistryCredentials
from openapi_server.models.container_service_credentials import ContainerServiceCredentials
from openapi_server.models.service_auth_configuration import ServiceAuthConfiguration
from openapi_server.models.ssl_configuration import SslConfiguration
from openapi_server.models.storage_account_credentials import StorageAccountCredentials
from openapi_server import util


class OperationalizationClusterCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_insights: AppInsightsCredentials=None, container_registry: ContainerRegistryCredentials=None, container_service: ContainerServiceCredentials=None, service_auth_configuration: ServiceAuthConfiguration=None, ssl_configuration: SslConfiguration=None, storage_account: StorageAccountCredentials=None):
        """OperationalizationClusterCredentials - a model defined in OpenAPI

        :param app_insights: The app_insights of this OperationalizationClusterCredentials.
        :param container_registry: The container_registry of this OperationalizationClusterCredentials.
        :param container_service: The container_service of this OperationalizationClusterCredentials.
        :param service_auth_configuration: The service_auth_configuration of this OperationalizationClusterCredentials.
        :param ssl_configuration: The ssl_configuration of this OperationalizationClusterCredentials.
        :param storage_account: The storage_account of this OperationalizationClusterCredentials.
        """
        self.openapi_types = {
            'app_insights': AppInsightsCredentials,
            'container_registry': ContainerRegistryCredentials,
            'container_service': ContainerServiceCredentials,
            'service_auth_configuration': ServiceAuthConfiguration,
            'ssl_configuration': SslConfiguration,
            'storage_account': StorageAccountCredentials
        }

        self.attribute_map = {
            'app_insights': 'appInsights',
            'container_registry': 'containerRegistry',
            'container_service': 'containerService',
            'service_auth_configuration': 'serviceAuthConfiguration',
            'ssl_configuration': 'sslConfiguration',
            'storage_account': 'storageAccount'
        }

        self._app_insights = app_insights
        self._container_registry = container_registry
        self._container_service = container_service
        self._service_auth_configuration = service_auth_configuration
        self._ssl_configuration = ssl_configuration
        self._storage_account = storage_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationalizationClusterCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationalizationClusterCredentials of this OperationalizationClusterCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_insights(self):
        """Gets the app_insights of this OperationalizationClusterCredentials.


        :return: The app_insights of this OperationalizationClusterCredentials.
        :rtype: AppInsightsCredentials
        """
        return self._app_insights

    @app_insights.setter
    def app_insights(self, app_insights):
        """Sets the app_insights of this OperationalizationClusterCredentials.


        :param app_insights: The app_insights of this OperationalizationClusterCredentials.
        :type app_insights: AppInsightsCredentials
        """

        self._app_insights = app_insights

    @property
    def container_registry(self):
        """Gets the container_registry of this OperationalizationClusterCredentials.


        :return: The container_registry of this OperationalizationClusterCredentials.
        :rtype: ContainerRegistryCredentials
        """
        return self._container_registry

    @container_registry.setter
    def container_registry(self, container_registry):
        """Sets the container_registry of this OperationalizationClusterCredentials.


        :param container_registry: The container_registry of this OperationalizationClusterCredentials.
        :type container_registry: ContainerRegistryCredentials
        """

        self._container_registry = container_registry

    @property
    def container_service(self):
        """Gets the container_service of this OperationalizationClusterCredentials.


        :return: The container_service of this OperationalizationClusterCredentials.
        :rtype: ContainerServiceCredentials
        """
        return self._container_service

    @container_service.setter
    def container_service(self, container_service):
        """Sets the container_service of this OperationalizationClusterCredentials.


        :param container_service: The container_service of this OperationalizationClusterCredentials.
        :type container_service: ContainerServiceCredentials
        """

        self._container_service = container_service

    @property
    def service_auth_configuration(self):
        """Gets the service_auth_configuration of this OperationalizationClusterCredentials.


        :return: The service_auth_configuration of this OperationalizationClusterCredentials.
        :rtype: ServiceAuthConfiguration
        """
        return self._service_auth_configuration

    @service_auth_configuration.setter
    def service_auth_configuration(self, service_auth_configuration):
        """Sets the service_auth_configuration of this OperationalizationClusterCredentials.


        :param service_auth_configuration: The service_auth_configuration of this OperationalizationClusterCredentials.
        :type service_auth_configuration: ServiceAuthConfiguration
        """

        self._service_auth_configuration = service_auth_configuration

    @property
    def ssl_configuration(self):
        """Gets the ssl_configuration of this OperationalizationClusterCredentials.


        :return: The ssl_configuration of this OperationalizationClusterCredentials.
        :rtype: SslConfiguration
        """
        return self._ssl_configuration

    @ssl_configuration.setter
    def ssl_configuration(self, ssl_configuration):
        """Sets the ssl_configuration of this OperationalizationClusterCredentials.


        :param ssl_configuration: The ssl_configuration of this OperationalizationClusterCredentials.
        :type ssl_configuration: SslConfiguration
        """

        self._ssl_configuration = ssl_configuration

    @property
    def storage_account(self):
        """Gets the storage_account of this OperationalizationClusterCredentials.


        :return: The storage_account of this OperationalizationClusterCredentials.
        :rtype: StorageAccountCredentials
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this OperationalizationClusterCredentials.


        :param storage_account: The storage_account of this OperationalizationClusterCredentials.
        :type storage_account: StorageAccountCredentials
        """

        self._storage_account = storage_account
