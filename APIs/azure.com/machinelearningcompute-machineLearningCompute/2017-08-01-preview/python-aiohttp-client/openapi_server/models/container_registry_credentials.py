# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerRegistryCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, login_server: str=None, password: str=None, password2: str=None, username: str=None):
        """ContainerRegistryCredentials - a model defined in OpenAPI

        :param login_server: The login_server of this ContainerRegistryCredentials.
        :param password: The password of this ContainerRegistryCredentials.
        :param password2: The password2 of this ContainerRegistryCredentials.
        :param username: The username of this ContainerRegistryCredentials.
        """
        self.openapi_types = {
            'login_server': str,
            'password': str,
            'password2': str,
            'username': str
        }

        self.attribute_map = {
            'login_server': 'loginServer',
            'password': 'password',
            'password2': 'password2',
            'username': 'username'
        }

        self._login_server = login_server
        self._password = password
        self._password2 = password2
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerRegistryCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerRegistryCredentials of this ContainerRegistryCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def login_server(self):
        """Gets the login_server of this ContainerRegistryCredentials.

        The ACR login server name. User name is the first part of the FQDN.

        :return: The login_server of this ContainerRegistryCredentials.
        :rtype: str
        """
        return self._login_server

    @login_server.setter
    def login_server(self, login_server):
        """Sets the login_server of this ContainerRegistryCredentials.

        The ACR login server name. User name is the first part of the FQDN.

        :param login_server: The login_server of this ContainerRegistryCredentials.
        :type login_server: str
        """

        self._login_server = login_server

    @property
    def password(self):
        """Gets the password of this ContainerRegistryCredentials.

        The ACR primary password.

        :return: The password of this ContainerRegistryCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ContainerRegistryCredentials.

        The ACR primary password.

        :param password: The password of this ContainerRegistryCredentials.
        :type password: str
        """

        self._password = password

    @property
    def password2(self):
        """Gets the password2 of this ContainerRegistryCredentials.

        The ACR secondary password.

        :return: The password2 of this ContainerRegistryCredentials.
        :rtype: str
        """
        return self._password2

    @password2.setter
    def password2(self, password2):
        """Sets the password2 of this ContainerRegistryCredentials.

        The ACR secondary password.

        :param password2: The password2 of this ContainerRegistryCredentials.
        :type password2: str
        """

        self._password2 = password2

    @property
    def username(self):
        """Gets the username of this ContainerRegistryCredentials.

        The ACR login username.

        :return: The username of this ContainerRegistryCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ContainerRegistryCredentials.

        The ACR login username.

        :param username: The username of this ContainerRegistryCredentials.
        :type username: str
        """

        self._username = username
