# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SystemService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, public_ip_address: str=None, system_service_type: str=None, version: str=None):
        """SystemService - a model defined in OpenAPI

        :param public_ip_address: The public_ip_address of this SystemService.
        :param system_service_type: The system_service_type of this SystemService.
        :param version: The version of this SystemService.
        """
        self.openapi_types = {
            'public_ip_address': str,
            'system_service_type': str,
            'version': str
        }

        self.attribute_map = {
            'public_ip_address': 'publicIpAddress',
            'system_service_type': 'systemServiceType',
            'version': 'version'
        }

        self._public_ip_address = public_ip_address
        self._system_service_type = system_service_type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemService of this SystemService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public_ip_address(self):
        """Gets the public_ip_address of this SystemService.

        The public IP address of the system service

        :return: The public_ip_address of this SystemService.
        :rtype: str
        """
        return self._public_ip_address

    @public_ip_address.setter
    def public_ip_address(self, public_ip_address):
        """Sets the public_ip_address of this SystemService.

        The public IP address of the system service

        :param public_ip_address: The public_ip_address of this SystemService.
        :type public_ip_address: str
        """

        self._public_ip_address = public_ip_address

    @property
    def system_service_type(self):
        """Gets the system_service_type of this SystemService.

        The system service type

        :return: The system_service_type of this SystemService.
        :rtype: str
        """
        return self._system_service_type

    @system_service_type.setter
    def system_service_type(self, system_service_type):
        """Sets the system_service_type of this SystemService.

        The system service type

        :param system_service_type: The system_service_type of this SystemService.
        :type system_service_type: str
        """
        allowed_values = ["None", "ScoringFrontEnd", "BatchFrontEnd"]  # noqa: E501
        if system_service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `system_service_type` ({0}), must be one of {1}"
                .format(system_service_type, allowed_values)
            )

        self._system_service_type = system_service_type

    @property
    def version(self):
        """Gets the version of this SystemService.

        The state of the system service

        :return: The version of this SystemService.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemService.

        The state of the system service

        :param version: The version of this SystemService.
        :type version: str
        """

        self._version = version
