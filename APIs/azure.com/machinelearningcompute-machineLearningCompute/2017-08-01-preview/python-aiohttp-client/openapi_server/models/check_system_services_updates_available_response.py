# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckSystemServicesUpdatesAvailableResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, updates_available: str=None):
        """CheckSystemServicesUpdatesAvailableResponse - a model defined in OpenAPI

        :param updates_available: The updates_available of this CheckSystemServicesUpdatesAvailableResponse.
        """
        self.openapi_types = {
            'updates_available': str
        }

        self.attribute_map = {
            'updates_available': 'updatesAvailable'
        }

        self._updates_available = updates_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckSystemServicesUpdatesAvailableResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckSystemServicesUpdatesAvailableResponse of this CheckSystemServicesUpdatesAvailableResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def updates_available(self):
        """Gets the updates_available of this CheckSystemServicesUpdatesAvailableResponse.

        Yes if updates are available for the system services, No if not.

        :return: The updates_available of this CheckSystemServicesUpdatesAvailableResponse.
        :rtype: str
        """
        return self._updates_available

    @updates_available.setter
    def updates_available(self, updates_available):
        """Sets the updates_available of this CheckSystemServicesUpdatesAvailableResponse.

        Yes if updates are available for the system services, No if not.

        :param updates_available: The updates_available of this CheckSystemServicesUpdatesAvailableResponse.
        :type updates_available: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if updates_available not in allowed_values:
            raise ValueError(
                "Invalid value for `updates_available` ({0}), must be one of {1}"
                .format(updates_available, allowed_values)
            )

        self._updates_available = updates_available
