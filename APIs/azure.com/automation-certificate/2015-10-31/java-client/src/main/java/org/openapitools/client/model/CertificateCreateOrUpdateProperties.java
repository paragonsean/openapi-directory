/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the create certificate operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:53.688643-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateCreateOrUpdateProperties {
  public static final String SERIALIZED_NAME_BASE64_VALUE = "base64Value";
  @SerializedName(SERIALIZED_NAME_BASE64_VALUE)
  private String base64Value;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_EXPORTABLE = "isExportable";
  @SerializedName(SERIALIZED_NAME_IS_EXPORTABLE)
  private Boolean isExportable;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public CertificateCreateOrUpdateProperties() {
  }

  public CertificateCreateOrUpdateProperties base64Value(String base64Value) {
    this.base64Value = base64Value;
    return this;
  }

  /**
   * Gets or sets the base64 encoded value of the certificate.
   * @return base64Value
   */
  @javax.annotation.Nonnull
  public String getBase64Value() {
    return base64Value;
  }

  public void setBase64Value(String base64Value) {
    this.base64Value = base64Value;
  }


  public CertificateCreateOrUpdateProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Gets or sets the description of the certificate.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CertificateCreateOrUpdateProperties isExportable(Boolean isExportable) {
    this.isExportable = isExportable;
    return this;
  }

  /**
   * Gets or sets the is exportable flag of the certificate.
   * @return isExportable
   */
  @javax.annotation.Nullable
  public Boolean getIsExportable() {
    return isExportable;
  }

  public void setIsExportable(Boolean isExportable) {
    this.isExportable = isExportable;
  }


  public CertificateCreateOrUpdateProperties thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Gets or sets the thumbprint of the certificate.
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateCreateOrUpdateProperties certificateCreateOrUpdateProperties = (CertificateCreateOrUpdateProperties) o;
    return Objects.equals(this.base64Value, certificateCreateOrUpdateProperties.base64Value) &&
        Objects.equals(this.description, certificateCreateOrUpdateProperties.description) &&
        Objects.equals(this.isExportable, certificateCreateOrUpdateProperties.isExportable) &&
        Objects.equals(this.thumbprint, certificateCreateOrUpdateProperties.thumbprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base64Value, description, isExportable, thumbprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateCreateOrUpdateProperties {\n");
    sb.append("    base64Value: ").append(toIndentedString(base64Value)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isExportable: ").append(toIndentedString(isExportable)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base64Value");
    openapiFields.add("description");
    openapiFields.add("isExportable");
    openapiFields.add("thumbprint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base64Value");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateCreateOrUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateCreateOrUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateCreateOrUpdateProperties is not found in the empty JSON string", CertificateCreateOrUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateCreateOrUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateCreateOrUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateCreateOrUpdateProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("base64Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base64Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base64Value").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("thumbprint") != null && !jsonObj.get("thumbprint").isJsonNull()) && !jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateCreateOrUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateCreateOrUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateCreateOrUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateCreateOrUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateCreateOrUpdateProperties>() {
           @Override
           public void write(JsonWriter out, CertificateCreateOrUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateCreateOrUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateCreateOrUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateCreateOrUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to CertificateCreateOrUpdateProperties
   */
  public static CertificateCreateOrUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateCreateOrUpdateProperties.class);
  }

  /**
   * Convert an instance of CertificateCreateOrUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

