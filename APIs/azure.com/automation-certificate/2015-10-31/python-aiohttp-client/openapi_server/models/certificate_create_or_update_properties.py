# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateCreateOrUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base64_value: str=None, description: str=None, is_exportable: bool=None, thumbprint: str=None):
        """CertificateCreateOrUpdateProperties - a model defined in OpenAPI

        :param base64_value: The base64_value of this CertificateCreateOrUpdateProperties.
        :param description: The description of this CertificateCreateOrUpdateProperties.
        :param is_exportable: The is_exportable of this CertificateCreateOrUpdateProperties.
        :param thumbprint: The thumbprint of this CertificateCreateOrUpdateProperties.
        """
        self.openapi_types = {
            'base64_value': str,
            'description': str,
            'is_exportable': bool,
            'thumbprint': str
        }

        self.attribute_map = {
            'base64_value': 'base64Value',
            'description': 'description',
            'is_exportable': 'isExportable',
            'thumbprint': 'thumbprint'
        }

        self._base64_value = base64_value
        self._description = description
        self._is_exportable = is_exportable
        self._thumbprint = thumbprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateCreateOrUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateCreateOrUpdateProperties of this CertificateCreateOrUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base64_value(self):
        """Gets the base64_value of this CertificateCreateOrUpdateProperties.

        Gets or sets the base64 encoded value of the certificate.

        :return: The base64_value of this CertificateCreateOrUpdateProperties.
        :rtype: str
        """
        return self._base64_value

    @base64_value.setter
    def base64_value(self, base64_value):
        """Sets the base64_value of this CertificateCreateOrUpdateProperties.

        Gets or sets the base64 encoded value of the certificate.

        :param base64_value: The base64_value of this CertificateCreateOrUpdateProperties.
        :type base64_value: str
        """
        if base64_value is None:
            raise ValueError("Invalid value for `base64_value`, must not be `None`")

        self._base64_value = base64_value

    @property
    def description(self):
        """Gets the description of this CertificateCreateOrUpdateProperties.

        Gets or sets the description of the certificate.

        :return: The description of this CertificateCreateOrUpdateProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CertificateCreateOrUpdateProperties.

        Gets or sets the description of the certificate.

        :param description: The description of this CertificateCreateOrUpdateProperties.
        :type description: str
        """

        self._description = description

    @property
    def is_exportable(self):
        """Gets the is_exportable of this CertificateCreateOrUpdateProperties.

        Gets or sets the is exportable flag of the certificate.

        :return: The is_exportable of this CertificateCreateOrUpdateProperties.
        :rtype: bool
        """
        return self._is_exportable

    @is_exportable.setter
    def is_exportable(self, is_exportable):
        """Sets the is_exportable of this CertificateCreateOrUpdateProperties.

        Gets or sets the is exportable flag of the certificate.

        :param is_exportable: The is_exportable of this CertificateCreateOrUpdateProperties.
        :type is_exportable: bool
        """

        self._is_exportable = is_exportable

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateCreateOrUpdateProperties.

        Gets or sets the thumbprint of the certificate.

        :return: The thumbprint of this CertificateCreateOrUpdateProperties.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateCreateOrUpdateProperties.

        Gets or sets the thumbprint of the certificate.

        :param thumbprint: The thumbprint of this CertificateCreateOrUpdateProperties.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint
