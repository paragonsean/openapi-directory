/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2015-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RoleAssignment from '../model/RoleAssignment';
import RoleAssignmentCreateParameters from '../model/RoleAssignmentCreateParameters';
import RoleAssignmentListResult from '../model/RoleAssignmentListResult';

/**
* RoleAssignments service.
* @module api/RoleAssignmentsApi
* @version 2015-07-01
*/
export default class RoleAssignmentsApi {

    /**
    * Constructs a new RoleAssignmentsApi. 
    * @alias module:api/RoleAssignmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the roleAssignmentsCreate operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a role assignment.
     * @param {String} scope The scope of the role assignment to create. The scope can be any REST resource instance. For example, use '/subscriptions/{subscription-id}/' for a subscription, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}' for a resource.
     * @param {String} roleAssignmentName The name of the role assignment to create. It can be any valid GUID.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/RoleAssignmentCreateParameters} parameters Parameters for the role assignment.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsCreate(scope, roleAssignmentName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleAssignmentsCreate");
      }
      // verify the required parameter 'roleAssignmentName' is set
      if (roleAssignmentName === undefined || roleAssignmentName === null) {
        throw new Error("Missing the required parameter 'roleAssignmentName' when calling roleAssignmentsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling roleAssignmentsCreate");
      }

      let pathParams = {
        'scope': scope,
        'roleAssignmentName': roleAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsCreateById operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsCreateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a role assignment by ID.
     * @param {String} roleAssignmentId The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/RoleAssignmentCreateParameters} parameters Parameters for the role assignment.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsCreateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsCreateById(roleAssignmentId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'roleAssignmentId' is set
      if (roleAssignmentId === undefined || roleAssignmentId === null) {
        throw new Error("Missing the required parameter 'roleAssignmentId' when calling roleAssignmentsCreateById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsCreateById");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling roleAssignmentsCreateById");
      }

      let pathParams = {
        'roleAssignmentId': roleAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/{roleAssignmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsDelete operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a role assignment.
     * @param {String} scope The scope of the role assignment to delete.
     * @param {String} roleAssignmentName The name of the role assignment to delete.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsDelete(scope, roleAssignmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleAssignmentsDelete");
      }
      // verify the required parameter 'roleAssignmentName' is set
      if (roleAssignmentName === undefined || roleAssignmentName === null) {
        throw new Error("Missing the required parameter 'roleAssignmentName' when calling roleAssignmentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsDelete");
      }

      let pathParams = {
        'scope': scope,
        'roleAssignmentName': roleAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsDeleteById operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a role assignment.
     * @param {String} roleAssignmentId The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsDeleteById(roleAssignmentId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'roleAssignmentId' is set
      if (roleAssignmentId === undefined || roleAssignmentId === null) {
        throw new Error("Missing the required parameter 'roleAssignmentId' when calling roleAssignmentsDeleteById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsDeleteById");
      }

      let pathParams = {
        'roleAssignmentId': roleAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/{roleAssignmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsGet operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified role assignment.
     * @param {String} scope The scope of the role assignment.
     * @param {String} roleAssignmentName The name of the role assignment to get.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsGet(scope, roleAssignmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleAssignmentsGet");
      }
      // verify the required parameter 'roleAssignmentName' is set
      if (roleAssignmentName === undefined || roleAssignmentName === null) {
        throw new Error("Missing the required parameter 'roleAssignmentName' when calling roleAssignmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsGet");
      }

      let pathParams = {
        'scope': scope,
        'roleAssignmentName': roleAssignmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsGetById operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a role assignment by ID.
     * @param {String} roleAssignmentId The fully qualified ID of the role assignment, including the scope, resource name and resource type. Use the format, /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example: /subscriptions/{subId}/resourcegroups/{rgname}//providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignment}
     */
    roleAssignmentsGetById(roleAssignmentId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'roleAssignmentId' is set
      if (roleAssignmentId === undefined || roleAssignmentId === null) {
        throw new Error("Missing the required parameter 'roleAssignmentId' when calling roleAssignmentsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsGetById");
      }

      let pathParams = {
        'roleAssignmentId': roleAssignmentId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/{roleAssignmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsList operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all role assignments for the subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignmentListResult}
     */
    roleAssignmentsList(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling roleAssignmentsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/roleAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsListForResource operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsListForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets role assignments for a resource.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} resourceProviderNamespace The namespace of the resource provider.
     * @param {String} parentResourcePath The parent resource identity.
     * @param {String} resourceType The resource type of the resource.
     * @param {String} resourceName The name of the resource to get role assignments for.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsListForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignmentListResult}
     */
    roleAssignmentsListForResource(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsListForResource");
      }
      // verify the required parameter 'resourceProviderNamespace' is set
      if (resourceProviderNamespace === undefined || resourceProviderNamespace === null) {
        throw new Error("Missing the required parameter 'resourceProviderNamespace' when calling roleAssignmentsListForResource");
      }
      // verify the required parameter 'parentResourcePath' is set
      if (parentResourcePath === undefined || parentResourcePath === null) {
        throw new Error("Missing the required parameter 'parentResourcePath' when calling roleAssignmentsListForResource");
      }
      // verify the required parameter 'resourceType' is set
      if (resourceType === undefined || resourceType === null) {
        throw new Error("Missing the required parameter 'resourceType' when calling roleAssignmentsListForResource");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling roleAssignmentsListForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsListForResource");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling roleAssignmentsListForResource");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'resourceProviderNamespace': resourceProviderNamespace,
        'parentResourcePath': parentResourcePath,
        'resourceType': resourceType,
        'resourceName': resourceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/roleAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsListForResourceGroup operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsListForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets role assignments for a resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsListForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignmentListResult}
     */
    roleAssignmentsListForResourceGroup(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling roleAssignmentsListForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsListForResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling roleAssignmentsListForResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/roleAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleAssignmentsListForScope operation.
     * @callback module:api/RoleAssignmentsApi~roleAssignmentsListForScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleAssignmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets role assignments for a scope.
     * @param {String} scope The scope of the role assignments.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the operation. Use $filter=atScope() to return all role assignments at or above the scope. Use $filter=principalId eq {id} to return all role assignments at, above or below the scope for the specified principal.
     * @param {module:api/RoleAssignmentsApi~roleAssignmentsListForScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleAssignmentListResult}
     */
    roleAssignmentsListForScope(scope, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling roleAssignmentsListForScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling roleAssignmentsListForScope");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RoleAssignmentListResult;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.Authorization/roleAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
