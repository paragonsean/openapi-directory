/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContextDTO from './ContextDTO';
import MetadataDTO from './MetadataDTO';

/**
 * The QnADTO model module.
 * @module model/QnADTO
 * @version 4.0
 */
class QnADTO {
    /**
     * Constructs a new <code>QnADTO</code>.
     * Q-A object.
     * @alias module:model/QnADTO
     * @param answer {String} Answer text
     * @param questions {Array.<String>} List of questions associated with the answer.
     */
    constructor(answer, questions) { 
        
        QnADTO.initialize(this, answer, questions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, answer, questions) { 
        obj['answer'] = answer;
        obj['questions'] = questions;
    }

    /**
     * Constructs a <code>QnADTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QnADTO} obj Optional instance to populate.
     * @return {module:model/QnADTO} The populated <code>QnADTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QnADTO();

            if (data.hasOwnProperty('answer')) {
                obj['answer'] = ApiClient.convertToType(data['answer'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], ContextDTO);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataDTO]);
            }
            if (data.hasOwnProperty('questions')) {
                obj['questions'] = ApiClient.convertToType(data['questions'], ['String']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QnADTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QnADTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QnADTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['answer'] && !(typeof data['answer'] === 'string' || data['answer'] instanceof String)) {
            throw new Error("Expected the field `answer` to be a primitive type in the JSON string but got " + data['answer']);
        }
        // validate the optional field `context`
        if (data['context']) { // data not null
          ContextDTO.validateJSON(data['context']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataDTO.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['questions'])) {
            throw new Error("Expected the field `questions` to be an array in the JSON data but got " + data['questions']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

QnADTO.RequiredProperties = ["answer", "questions"];

/**
 * Answer text
 * @member {String} answer
 */
QnADTO.prototype['answer'] = undefined;

/**
 * Context of a QnA
 * @member {module:model/ContextDTO} context
 */
QnADTO.prototype['context'] = undefined;

/**
 * Unique id for the Q-A.
 * @member {Number} id
 */
QnADTO.prototype['id'] = undefined;

/**
 * List of metadata associated with the answer.
 * @member {Array.<module:model/MetadataDTO>} metadata
 */
QnADTO.prototype['metadata'] = undefined;

/**
 * List of questions associated with the answer.
 * @member {Array.<String>} questions
 */
QnADTO.prototype['questions'] = undefined;

/**
 * Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
 * @member {String} source
 */
QnADTO.prototype['source'] = undefined;






export default QnADTO;

