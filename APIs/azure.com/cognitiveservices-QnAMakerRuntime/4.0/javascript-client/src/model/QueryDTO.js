/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetadataDTO from './MetadataDTO';
import QueryContextDTO from './QueryContextDTO';

/**
 * The QueryDTO model module.
 * @module model/QueryDTO
 * @version 4.0
 */
class QueryDTO {
    /**
     * Constructs a new <code>QueryDTO</code>.
     * POST body schema to query the knowledgebase.
     * @alias module:model/QueryDTO
     */
    constructor() { 
        
        QueryDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryDTO} obj Optional instance to populate.
     * @return {module:model/QueryDTO} The populated <code>QueryDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryDTO();

            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], QueryContextDTO);
            }
            if (data.hasOwnProperty('isTest')) {
                obj['isTest'] = ApiClient.convertToType(data['isTest'], 'Boolean');
            }
            if (data.hasOwnProperty('qnaId')) {
                obj['qnaId'] = ApiClient.convertToType(data['qnaId'], 'String');
            }
            if (data.hasOwnProperty('question')) {
                obj['question'] = ApiClient.convertToType(data['question'], 'String');
            }
            if (data.hasOwnProperty('rankerType')) {
                obj['rankerType'] = ApiClient.convertToType(data['rankerType'], 'String');
            }
            if (data.hasOwnProperty('scoreThreshold')) {
                obj['scoreThreshold'] = ApiClient.convertToType(data['scoreThreshold'], 'Number');
            }
            if (data.hasOwnProperty('strictFilters')) {
                obj['strictFilters'] = ApiClient.convertToType(data['strictFilters'], [MetadataDTO]);
            }
            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryDTO</code>.
     */
    static validateJSON(data) {
        // validate the optional field `context`
        if (data['context']) { // data not null
          QueryContextDTO.validateJSON(data['context']);
        }
        // ensure the json data is a string
        if (data['qnaId'] && !(typeof data['qnaId'] === 'string' || data['qnaId'] instanceof String)) {
            throw new Error("Expected the field `qnaId` to be a primitive type in the JSON string but got " + data['qnaId']);
        }
        // ensure the json data is a string
        if (data['question'] && !(typeof data['question'] === 'string' || data['question'] instanceof String)) {
            throw new Error("Expected the field `question` to be a primitive type in the JSON string but got " + data['question']);
        }
        // ensure the json data is a string
        if (data['rankerType'] && !(typeof data['rankerType'] === 'string' || data['rankerType'] instanceof String)) {
            throw new Error("Expected the field `rankerType` to be a primitive type in the JSON string but got " + data['rankerType']);
        }
        if (data['strictFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['strictFilters'])) {
                throw new Error("Expected the field `strictFilters` to be an array in the JSON data but got " + data['strictFilters']);
            }
            // validate the optional field `strictFilters` (array)
            for (const item of data['strictFilters']) {
                MetadataDTO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Context object with previous QnA's information.
 * @member {module:model/QueryContextDTO} context
 */
QueryDTO.prototype['context'] = undefined;

/**
 * Query against the test index.
 * @member {Boolean} isTest
 */
QueryDTO.prototype['isTest'] = undefined;

/**
 * Exact qnaId to fetch from the knowledgebase, this field takes priority over question.
 * @member {String} qnaId
 */
QueryDTO.prototype['qnaId'] = undefined;

/**
 * User question to query against the knowledge base.
 * @member {String} question
 */
QueryDTO.prototype['question'] = undefined;

/**
 * Optional field. Set to 'QuestionOnly' for using a question only Ranker.
 * @member {String} rankerType
 */
QueryDTO.prototype['rankerType'] = undefined;

/**
 * Threshold for answers returned based on score.
 * @member {Number} scoreThreshold
 */
QueryDTO.prototype['scoreThreshold'] = undefined;

/**
 * Find only answers that contain these metadata.
 * @member {Array.<module:model/MetadataDTO>} strictFilters
 */
QueryDTO.prototype['strictFilters'] = undefined;

/**
 * Max number of answers to be returned for the question.
 * @member {Number} top
 */
QueryDTO.prototype['top'] = undefined;

/**
 * Unique identifier for the user.
 * @member {String} userId
 */
QueryDTO.prototype['userId'] = undefined;






export default QueryDTO;

