/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QnASearchResult from './QnASearchResult';

/**
 * The QnASearchResultList model module.
 * @module model/QnASearchResultList
 * @version 4.0
 */
class QnASearchResultList {
    /**
     * Constructs a new <code>QnASearchResultList</code>.
     * Represents List of Question Answers.
     * @alias module:model/QnASearchResultList
     */
    constructor() { 
        
        QnASearchResultList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QnASearchResultList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QnASearchResultList} obj Optional instance to populate.
     * @return {module:model/QnASearchResultList} The populated <code>QnASearchResultList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QnASearchResultList();

            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], [QnASearchResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QnASearchResultList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QnASearchResultList</code>.
     */
    static validateJSON(data) {
        if (data['answers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['answers'])) {
                throw new Error("Expected the field `answers` to be an array in the JSON data but got " + data['answers']);
            }
            // validate the optional field `answers` (array)
            for (const item of data['answers']) {
                QnASearchResult.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Represents Search Result list.
 * @member {Array.<module:model/QnASearchResult>} answers
 */
QnASearchResultList.prototype['answers'] = undefined;






export default QnASearchResultList;

