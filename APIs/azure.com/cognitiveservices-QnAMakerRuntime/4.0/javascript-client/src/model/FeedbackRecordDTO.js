/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeedbackRecordDTO model module.
 * @module model/FeedbackRecordDTO
 * @version 4.0
 */
class FeedbackRecordDTO {
    /**
     * Constructs a new <code>FeedbackRecordDTO</code>.
     * Active learning feedback record.
     * @alias module:model/FeedbackRecordDTO
     */
    constructor() { 
        
        FeedbackRecordDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedbackRecordDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedbackRecordDTO} obj Optional instance to populate.
     * @return {module:model/FeedbackRecordDTO} The populated <code>FeedbackRecordDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedbackRecordDTO();

            if (data.hasOwnProperty('qnaId')) {
                obj['qnaId'] = ApiClient.convertToType(data['qnaId'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('userQuestion')) {
                obj['userQuestion'] = ApiClient.convertToType(data['userQuestion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedbackRecordDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedbackRecordDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['userQuestion'] && !(typeof data['userQuestion'] === 'string' || data['userQuestion'] instanceof String)) {
            throw new Error("Expected the field `userQuestion` to be a primitive type in the JSON string but got " + data['userQuestion']);
        }

        return true;
    }


}



/**
 * The qnaId for which the suggested question is provided as feedback.
 * @member {Number} qnaId
 */
FeedbackRecordDTO.prototype['qnaId'] = undefined;

/**
 * Unique identifier for the user.
 * @member {String} userId
 */
FeedbackRecordDTO.prototype['userId'] = undefined;

/**
 * The suggested question being provided as feedback.
 * @member {String} userQuestion
 */
FeedbackRecordDTO.prototype['userQuestion'] = undefined;






export default FeedbackRecordDTO;

