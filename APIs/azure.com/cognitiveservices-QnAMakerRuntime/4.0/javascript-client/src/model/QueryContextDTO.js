/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The QueryContextDTO model module.
 * @module model/QueryContextDTO
 * @version 4.0
 */
class QueryContextDTO {
    /**
     * Constructs a new <code>QueryContextDTO</code>.
     * Context object with previous QnA&#39;s information.
     * @alias module:model/QueryContextDTO
     */
    constructor() { 
        
        QueryContextDTO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QueryContextDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryContextDTO} obj Optional instance to populate.
     * @return {module:model/QueryContextDTO} The populated <code>QueryContextDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryContextDTO();

            if (data.hasOwnProperty('previousQnaId')) {
                obj['previousQnaId'] = ApiClient.convertToType(data['previousQnaId'], 'String');
            }
            if (data.hasOwnProperty('previousUserQuery')) {
                obj['previousUserQuery'] = ApiClient.convertToType(data['previousUserQuery'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryContextDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryContextDTO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['previousQnaId'] && !(typeof data['previousQnaId'] === 'string' || data['previousQnaId'] instanceof String)) {
            throw new Error("Expected the field `previousQnaId` to be a primitive type in the JSON string but got " + data['previousQnaId']);
        }
        // ensure the json data is a string
        if (data['previousUserQuery'] && !(typeof data['previousUserQuery'] === 'string' || data['previousUserQuery'] instanceof String)) {
            throw new Error("Expected the field `previousUserQuery` to be a primitive type in the JSON string but got " + data['previousUserQuery']);
        }

        return true;
    }


}



/**
 * Previous QnA Id - qnaId of the top result.
 * @member {String} previousQnaId
 */
QueryContextDTO.prototype['previousQnaId'] = undefined;

/**
 * Previous user query.
 * @member {String} previousUserQuery
 */
QueryContextDTO.prototype['previousUserQuery'] = undefined;






export default QueryContextDTO;

