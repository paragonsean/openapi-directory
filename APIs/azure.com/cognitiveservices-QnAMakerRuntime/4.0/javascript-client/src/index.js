/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ContextDTO from './model/ContextDTO';
import Error from './model/Error';
import ErrorCode from './model/ErrorCode';
import ErrorResponse from './model/ErrorResponse';
import FeedbackRecordDTO from './model/FeedbackRecordDTO';
import FeedbackRecordsDTO from './model/FeedbackRecordsDTO';
import InnerErrorModel from './model/InnerErrorModel';
import MetadataDTO from './model/MetadataDTO';
import PromptDTO from './model/PromptDTO';
import QnADTO from './model/QnADTO';
import QnASearchResult from './model/QnASearchResult';
import QnASearchResultList from './model/QnASearchResultList';
import QueryContextDTO from './model/QueryContextDTO';
import QueryDTO from './model/QueryDTO';
import KnowledgebasesApi from './api/KnowledgebasesApi';


/**
* An API for QnAMaker runtime.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var QnAMakerRuntimeClient = require('index'); // See note below*.
* var xxxSvc = new QnAMakerRuntimeClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new QnAMakerRuntimeClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new QnAMakerRuntimeClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new QnAMakerRuntimeClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 4.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ContextDTO model constructor.
     * @property {module:model/ContextDTO}
     */
    ContextDTO,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The ErrorCode model constructor.
     * @property {module:model/ErrorCode}
     */
    ErrorCode,

    /**
     * The ErrorResponse model constructor.
     * @property {module:model/ErrorResponse}
     */
    ErrorResponse,

    /**
     * The FeedbackRecordDTO model constructor.
     * @property {module:model/FeedbackRecordDTO}
     */
    FeedbackRecordDTO,

    /**
     * The FeedbackRecordsDTO model constructor.
     * @property {module:model/FeedbackRecordsDTO}
     */
    FeedbackRecordsDTO,

    /**
     * The InnerErrorModel model constructor.
     * @property {module:model/InnerErrorModel}
     */
    InnerErrorModel,

    /**
     * The MetadataDTO model constructor.
     * @property {module:model/MetadataDTO}
     */
    MetadataDTO,

    /**
     * The PromptDTO model constructor.
     * @property {module:model/PromptDTO}
     */
    PromptDTO,

    /**
     * The QnADTO model constructor.
     * @property {module:model/QnADTO}
     */
    QnADTO,

    /**
     * The QnASearchResult model constructor.
     * @property {module:model/QnASearchResult}
     */
    QnASearchResult,

    /**
     * The QnASearchResultList model constructor.
     * @property {module:model/QnASearchResultList}
     */
    QnASearchResultList,

    /**
     * The QueryContextDTO model constructor.
     * @property {module:model/QueryContextDTO}
     */
    QueryContextDTO,

    /**
     * The QueryDTO model constructor.
     * @property {module:model/QueryDTO}
     */
    QueryDTO,

    /**
    * The KnowledgebasesApi service constructor.
    * @property {module:api/KnowledgebasesApi}
    */
    KnowledgebasesApi
};
