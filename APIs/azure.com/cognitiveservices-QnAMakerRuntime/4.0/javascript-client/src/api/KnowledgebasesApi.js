/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import FeedbackRecordsDTO from '../model/FeedbackRecordsDTO';
import QnASearchResultList from '../model/QnASearchResultList';
import QueryDTO from '../model/QueryDTO';

/**
* Knowledgebases service.
* @module api/KnowledgebasesApi
* @version 4.0
*/
export default class KnowledgebasesApi {

    /**
    * Constructs a new KnowledgebasesApi. 
    * @alias module:api/KnowledgebasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the runtimeGenerateAnswer operation.
     * @callback module:api/KnowledgebasesApi~runtimeGenerateAnswerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QnASearchResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GenerateAnswer call to query the knowledgebase.
     * @param {String} kbId Knowledgebase id.
     * @param {module:model/QueryDTO} generateAnswerPayload Post body of the request.
     * @param {module:api/KnowledgebasesApi~runtimeGenerateAnswerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QnASearchResultList}
     */
    runtimeGenerateAnswer(kbId, generateAnswerPayload, callback) {
      let postBody = generateAnswerPayload;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling runtimeGenerateAnswer");
      }
      // verify the required parameter 'generateAnswerPayload' is set
      if (generateAnswerPayload === undefined || generateAnswerPayload === null) {
        throw new Error("Missing the required parameter 'generateAnswerPayload' when calling runtimeGenerateAnswer");
      }

      let pathParams = {
        'kbId': kbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QnASearchResultList;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}/generateAnswer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runtimeTrain operation.
     * @callback module:api/KnowledgebasesApi~runtimeTrainCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Train call to add suggestions to the knowledgebase.
     * @param {String} kbId Knowledgebase id.
     * @param {module:model/FeedbackRecordsDTO} trainPayload Post body of the request.
     * @param {module:api/KnowledgebasesApi~runtimeTrainCallback} callback The callback function, accepting three arguments: error, data, response
     */
    runtimeTrain(kbId, trainPayload, callback) {
      let postBody = trainPayload;
      // verify the required parameter 'kbId' is set
      if (kbId === undefined || kbId === null) {
        throw new Error("Missing the required parameter 'kbId' when calling runtimeTrain");
      }
      // verify the required parameter 'trainPayload' is set
      if (trainPayload === undefined || trainPayload === null) {
        throw new Error("Missing the required parameter 'trainPayload' when calling runtimeTrain");
      }

      let pathParams = {
        'kbId': kbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/knowledgebases/{kbId}/train', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
