# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeedbackRecordDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, qna_id: int=None, user_id: str=None, user_question: str=None):
        """FeedbackRecordDTO - a model defined in OpenAPI

        :param qna_id: The qna_id of this FeedbackRecordDTO.
        :param user_id: The user_id of this FeedbackRecordDTO.
        :param user_question: The user_question of this FeedbackRecordDTO.
        """
        self.openapi_types = {
            'qna_id': int,
            'user_id': str,
            'user_question': str
        }

        self.attribute_map = {
            'qna_id': 'qnaId',
            'user_id': 'userId',
            'user_question': 'userQuestion'
        }

        self._qna_id = qna_id
        self._user_id = user_id
        self._user_question = user_question

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedbackRecordDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedbackRecordDTO of this FeedbackRecordDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def qna_id(self):
        """Gets the qna_id of this FeedbackRecordDTO.

        The qnaId for which the suggested question is provided as feedback.

        :return: The qna_id of this FeedbackRecordDTO.
        :rtype: int
        """
        return self._qna_id

    @qna_id.setter
    def qna_id(self, qna_id):
        """Sets the qna_id of this FeedbackRecordDTO.

        The qnaId for which the suggested question is provided as feedback.

        :param qna_id: The qna_id of this FeedbackRecordDTO.
        :type qna_id: int
        """

        self._qna_id = qna_id

    @property
    def user_id(self):
        """Gets the user_id of this FeedbackRecordDTO.

        Unique identifier for the user.

        :return: The user_id of this FeedbackRecordDTO.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FeedbackRecordDTO.

        Unique identifier for the user.

        :param user_id: The user_id of this FeedbackRecordDTO.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_question(self):
        """Gets the user_question of this FeedbackRecordDTO.

        The suggested question being provided as feedback.

        :return: The user_question of this FeedbackRecordDTO.
        :rtype: str
        """
        return self._user_question

    @user_question.setter
    def user_question(self, user_question):
        """Sets the user_question of this FeedbackRecordDTO.

        The suggested question being provided as feedback.

        :param user_question: The user_question of this FeedbackRecordDTO.
        :type user_question: str
        """
        if user_question is not None and len(user_question) > 1000:
            raise ValueError("Invalid value for `user_question`, length must be less than or equal to `1000`")

        self._user_question = user_question
