# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.context_dto import ContextDTO
from openapi_server.models.metadata_dto import MetadataDTO
from openapi_server import util


class QnASearchResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer: str=None, context: ContextDTO=None, id: int=None, metadata: List[MetadataDTO]=None, questions: List[str]=None, score: float=None, source: str=None):
        """QnASearchResult - a model defined in OpenAPI

        :param answer: The answer of this QnASearchResult.
        :param context: The context of this QnASearchResult.
        :param id: The id of this QnASearchResult.
        :param metadata: The metadata of this QnASearchResult.
        :param questions: The questions of this QnASearchResult.
        :param score: The score of this QnASearchResult.
        :param source: The source of this QnASearchResult.
        """
        self.openapi_types = {
            'answer': str,
            'context': ContextDTO,
            'id': int,
            'metadata': List[MetadataDTO],
            'questions': List[str],
            'score': float,
            'source': str
        }

        self.attribute_map = {
            'answer': 'answer',
            'context': 'context',
            'id': 'id',
            'metadata': 'metadata',
            'questions': 'questions',
            'score': 'score',
            'source': 'source'
        }

        self._answer = answer
        self._context = context
        self._id = id
        self._metadata = metadata
        self._questions = questions
        self._score = score
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QnASearchResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QnASearchResult of this QnASearchResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer(self):
        """Gets the answer of this QnASearchResult.

        Answer.

        :return: The answer of this QnASearchResult.
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this QnASearchResult.

        Answer.

        :param answer: The answer of this QnASearchResult.
        :type answer: str
        """

        self._answer = answer

    @property
    def context(self):
        """Gets the context of this QnASearchResult.

        Context object of the QnA

        :return: The context of this QnASearchResult.
        :rtype: ContextDTO
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this QnASearchResult.

        Context object of the QnA

        :param context: The context of this QnASearchResult.
        :type context: ContextDTO
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this QnASearchResult.

        Id of the QnA result.

        :return: The id of this QnASearchResult.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QnASearchResult.

        Id of the QnA result.

        :param id: The id of this QnASearchResult.
        :type id: int
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this QnASearchResult.

        List of metadata.

        :return: The metadata of this QnASearchResult.
        :rtype: List[MetadataDTO]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this QnASearchResult.

        List of metadata.

        :param metadata: The metadata of this QnASearchResult.
        :type metadata: List[MetadataDTO]
        """

        self._metadata = metadata

    @property
    def questions(self):
        """Gets the questions of this QnASearchResult.

        List of questions.

        :return: The questions of this QnASearchResult.
        :rtype: List[str]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this QnASearchResult.

        List of questions.

        :param questions: The questions of this QnASearchResult.
        :type questions: List[str]
        """

        self._questions = questions

    @property
    def score(self):
        """Gets the score of this QnASearchResult.

        Search result score.

        :return: The score of this QnASearchResult.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this QnASearchResult.

        Search result score.

        :param score: The score of this QnASearchResult.
        :type score: float
        """

        self._score = score

    @property
    def source(self):
        """Gets the source of this QnASearchResult.

        Source of QnA result.

        :return: The source of this QnASearchResult.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this QnASearchResult.

        Source of QnA result.

        :param source: The source of this QnASearchResult.
        :type source: str
        """

        self._source = source
