# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metadata_dto import MetadataDTO
from openapi_server.models.query_context_dto import QueryContextDTO
from openapi_server import util


class QueryDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: QueryContextDTO=None, is_test: bool=None, qna_id: str=None, question: str=None, ranker_type: str=None, score_threshold: float=None, strict_filters: List[MetadataDTO]=None, top: int=None, user_id: str=None):
        """QueryDTO - a model defined in OpenAPI

        :param context: The context of this QueryDTO.
        :param is_test: The is_test of this QueryDTO.
        :param qna_id: The qna_id of this QueryDTO.
        :param question: The question of this QueryDTO.
        :param ranker_type: The ranker_type of this QueryDTO.
        :param score_threshold: The score_threshold of this QueryDTO.
        :param strict_filters: The strict_filters of this QueryDTO.
        :param top: The top of this QueryDTO.
        :param user_id: The user_id of this QueryDTO.
        """
        self.openapi_types = {
            'context': QueryContextDTO,
            'is_test': bool,
            'qna_id': str,
            'question': str,
            'ranker_type': str,
            'score_threshold': float,
            'strict_filters': List[MetadataDTO],
            'top': int,
            'user_id': str
        }

        self.attribute_map = {
            'context': 'context',
            'is_test': 'isTest',
            'qna_id': 'qnaId',
            'question': 'question',
            'ranker_type': 'rankerType',
            'score_threshold': 'scoreThreshold',
            'strict_filters': 'strictFilters',
            'top': 'top',
            'user_id': 'userId'
        }

        self._context = context
        self._is_test = is_test
        self._qna_id = qna_id
        self._question = question
        self._ranker_type = ranker_type
        self._score_threshold = score_threshold
        self._strict_filters = strict_filters
        self._top = top
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryDTO of this QueryDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this QueryDTO.

        Context object with previous QnA's information.

        :return: The context of this QueryDTO.
        :rtype: QueryContextDTO
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this QueryDTO.

        Context object with previous QnA's information.

        :param context: The context of this QueryDTO.
        :type context: QueryContextDTO
        """

        self._context = context

    @property
    def is_test(self):
        """Gets the is_test of this QueryDTO.

        Query against the test index.

        :return: The is_test of this QueryDTO.
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this QueryDTO.

        Query against the test index.

        :param is_test: The is_test of this QueryDTO.
        :type is_test: bool
        """

        self._is_test = is_test

    @property
    def qna_id(self):
        """Gets the qna_id of this QueryDTO.

        Exact qnaId to fetch from the knowledgebase, this field takes priority over question.

        :return: The qna_id of this QueryDTO.
        :rtype: str
        """
        return self._qna_id

    @qna_id.setter
    def qna_id(self, qna_id):
        """Sets the qna_id of this QueryDTO.

        Exact qnaId to fetch from the knowledgebase, this field takes priority over question.

        :param qna_id: The qna_id of this QueryDTO.
        :type qna_id: str
        """

        self._qna_id = qna_id

    @property
    def question(self):
        """Gets the question of this QueryDTO.

        User question to query against the knowledge base.

        :return: The question of this QueryDTO.
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this QueryDTO.

        User question to query against the knowledge base.

        :param question: The question of this QueryDTO.
        :type question: str
        """

        self._question = question

    @property
    def ranker_type(self):
        """Gets the ranker_type of this QueryDTO.

        Optional field. Set to 'QuestionOnly' for using a question only Ranker.

        :return: The ranker_type of this QueryDTO.
        :rtype: str
        """
        return self._ranker_type

    @ranker_type.setter
    def ranker_type(self, ranker_type):
        """Sets the ranker_type of this QueryDTO.

        Optional field. Set to 'QuestionOnly' for using a question only Ranker.

        :param ranker_type: The ranker_type of this QueryDTO.
        :type ranker_type: str
        """

        self._ranker_type = ranker_type

    @property
    def score_threshold(self):
        """Gets the score_threshold of this QueryDTO.

        Threshold for answers returned based on score.

        :return: The score_threshold of this QueryDTO.
        :rtype: float
        """
        return self._score_threshold

    @score_threshold.setter
    def score_threshold(self, score_threshold):
        """Sets the score_threshold of this QueryDTO.

        Threshold for answers returned based on score.

        :param score_threshold: The score_threshold of this QueryDTO.
        :type score_threshold: float
        """

        self._score_threshold = score_threshold

    @property
    def strict_filters(self):
        """Gets the strict_filters of this QueryDTO.

        Find only answers that contain these metadata.

        :return: The strict_filters of this QueryDTO.
        :rtype: List[MetadataDTO]
        """
        return self._strict_filters

    @strict_filters.setter
    def strict_filters(self, strict_filters):
        """Sets the strict_filters of this QueryDTO.

        Find only answers that contain these metadata.

        :param strict_filters: The strict_filters of this QueryDTO.
        :type strict_filters: List[MetadataDTO]
        """

        self._strict_filters = strict_filters

    @property
    def top(self):
        """Gets the top of this QueryDTO.

        Max number of answers to be returned for the question.

        :return: The top of this QueryDTO.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this QueryDTO.

        Max number of answers to be returned for the question.

        :param top: The top of this QueryDTO.
        :type top: int
        """

        self._top = top

    @property
    def user_id(self):
        """Gets the user_id of this QueryDTO.

        Unique identifier for the user.

        :return: The user_id of this QueryDTO.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueryDTO.

        Unique identifier for the user.

        :param user_id: The user_id of this QueryDTO.
        :type user_id: str
        """

        self._user_id = user_id
