# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.qn_adto import QnADTO
from openapi_server import util


class PromptDTO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_order: int=None, display_text: str=None, qna: QnADTO=None, qna_id: int=None):
        """PromptDTO - a model defined in OpenAPI

        :param display_order: The display_order of this PromptDTO.
        :param display_text: The display_text of this PromptDTO.
        :param qna: The qna of this PromptDTO.
        :param qna_id: The qna_id of this PromptDTO.
        """
        self.openapi_types = {
            'display_order': int,
            'display_text': str,
            'qna': QnADTO,
            'qna_id': int
        }

        self.attribute_map = {
            'display_order': 'displayOrder',
            'display_text': 'displayText',
            'qna': 'qna',
            'qna_id': 'qnaId'
        }

        self._display_order = display_order
        self._display_text = display_text
        self._qna = qna
        self._qna_id = qna_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PromptDTO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PromptDTO of this PromptDTO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_order(self):
        """Gets the display_order of this PromptDTO.

        Index of the prompt - used in ordering of the prompts

        :return: The display_order of this PromptDTO.
        :rtype: int
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order):
        """Sets the display_order of this PromptDTO.

        Index of the prompt - used in ordering of the prompts

        :param display_order: The display_order of this PromptDTO.
        :type display_order: int
        """

        self._display_order = display_order

    @property
    def display_text(self):
        """Gets the display_text of this PromptDTO.

        Text displayed to represent a follow up question prompt

        :return: The display_text of this PromptDTO.
        :rtype: str
        """
        return self._display_text

    @display_text.setter
    def display_text(self, display_text):
        """Sets the display_text of this PromptDTO.

        Text displayed to represent a follow up question prompt

        :param display_text: The display_text of this PromptDTO.
        :type display_text: str
        """
        if display_text is not None and len(display_text) > 200:
            raise ValueError("Invalid value for `display_text`, length must be less than or equal to `200`")

        self._display_text = display_text

    @property
    def qna(self):
        """Gets the qna of this PromptDTO.

        QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object

        :return: The qna of this PromptDTO.
        :rtype: QnADTO
        """
        return self._qna

    @qna.setter
    def qna(self, qna):
        """Sets the qna of this PromptDTO.

        QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO object

        :param qna: The qna of this PromptDTO.
        :type qna: QnADTO
        """

        self._qna = qna

    @property
    def qna_id(self):
        """Gets the qna_id of this PromptDTO.

        Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.

        :return: The qna_id of this PromptDTO.
        :rtype: int
        """
        return self._qna_id

    @qna_id.setter
    def qna_id(self, qna_id):
        """Sets the qna_id of this PromptDTO.

        Qna id corresponding to the prompt - if QnaId is present, QnADTO object is ignored.

        :param qna_id: The qna_id of this PromptDTO.
        :type qna_id: int
        """

        self._qna_id = qna_id
