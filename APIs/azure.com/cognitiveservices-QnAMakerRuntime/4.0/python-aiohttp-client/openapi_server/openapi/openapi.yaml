openapi: 3.0.1
info:
  description: An API for QnAMaker runtime
  title: QnAMaker Runtime Client
  version: "4.0"
  x-apisguru-categories:
  - cloud
  x-logo:
    url: https://assets.onestore.ms/cdnfiles/onestorerolling-1606-01000/shell/v3/images/logo/microsoft.png
  x-origin:
  - format: swagger
    url: https://raw.githubusercontent.com/Azure/azure-rest-api-specs/master/specification/cognitiveservices/data-plane/QnAMaker/stable/v4.0/QnAMakerRuntime.json
    version: "2.0"
  x-providerName: azure.com
  x-serviceName: cognitiveservices-QnAMakerRuntime
  x-tags:
  - Azure
  - Microsoft
servers:
- url: https://azure.local/
security:
- auth_key: []
paths:
  /knowledgebases/{kbId}/generateAnswer:
    post:
      operationId: runtime_generate_answer
      parameters:
      - description: Knowledgebase id.
        in: path
        name: kbId
        required: true
        schema:
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDTO'
        description: Post body of the request.
        required: true
        x-ms-parameter-location: method
        x-body-name: generateAnswerPayload
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QnASearchResultList'
          description: GenerateAnswer call response.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response.
      summary: GenerateAnswer call to query the knowledgebase.
      tags:
      - Knowledgebases
      x-ms-examples:
        Successful query:
          parameters:
            Authorization: "EndpointKey {Primary/Secondary EndpointKey}"
            Content-Type: application/json
            RuntimeEndpoint: "{RuntimeEndpoint}"
            generateAnswerPayload:
              isTest: true
              question: qna maker and luis
              scoreThreshold: 20
              strictFilters:
              - name: category
                value: api
              top: 6
              userId: sd53lsY=
            kbId: 9d091697-fb8c-4ed5-9ac0-35bf8273bfff
          responses:
            "200":
              body:
                answers:
                - answer: "There is no direct integration of LUIS with QnA Maker.\
                    \ But, in your bot code, you can use LUIS and QnA Maker together."
                  id: 20
                  metadata:
                  - name: category
                    value: api
                  questions:
                  - How can I integrate LUIS with QnA Maker?
                  score: 28.54820341616869
                  source: Custom Editorial
              headers: {}
      x-codegen-request-body-name: generateAnswerPayload
      x-openapi-router-controller: openapi_server.controllers.knowledgebases_controller
  /knowledgebases/{kbId}/train:
    post:
      operationId: runtime_train
      parameters:
      - description: Knowledgebase id.
        in: path
        name: kb_id
        required: true
        schema:
          type: string
          x-ms-parameter-location: method
        x-ms-parameter-location: method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackRecordsDTO'
        description: Post body of the request.
        required: true
        x-ms-parameter-location: method
        x-body-name: trainPayload
      responses:
        "204":
          content: {}
          description: HTTP 204 No Content.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response.
      summary: Train call to add suggestions to the knowledgebase.
      tags:
      - Knowledgebases
      x-ms-examples:
        Successful query:
          parameters:
            Authorization: "EndpointKey {Primary/Secondary Endpoint Key}"
            Content-Type: application/json
            RuntimeEndpoint: "{RuntimeEndpoint}"
            kbId: 9d091697-fb8c-4ed5-9ac0-35bf8273bfff
            trainPayload:
              feedbackRecords:
              - qnaId: 4
                userId: sd53lsY=
                userQuestion: qna maker with luis
          responses:
            "204": {}
      x-codegen-request-body-name: trainPayload
      x-openapi-router-controller: openapi_server.controllers.knowledgebases_controller
components:
  parameters:
    KbId:
      description: Knowledgebase id.
      in: path
      name: kbId
      required: true
      schema:
        nullable: false
        type: string
        x-ms-parameter-location: method
      x-ms-parameter-location: method
    RuntimeEndpoint:
      description: "QnA Maker App Service endpoint (for example: https://{qnaservice-hostname}.azurewebsites.net)."
      in: path
      name: RuntimeEndpoint
      required: true
      schema:
        type: string
        x-ms-parameter-location: client
        x-ms-skip-url-encoding: true
      x-ms-parameter-location: client
      x-ms-skip-url-encoding: true
  requestBodies:
    GenerateAnswerPayload:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/QueryDTO'
      description: Post body of the request.
      required: true
      x-ms-parameter-location: method
      x-body-name: generateAnswerPayload
    TrainPayload:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FeedbackRecordsDTO'
      description: Post body of the request.
      required: true
      x-ms-parameter-location: method
      x-body-name: trainPayload
  schemas:
    ContextDTO:
      description: Context associated with Qna.
      properties:
        isContextOnly:
          description: |-
            To mark if a prompt is relevant only with a previous question or not.
            true - Do not include this QnA as search result for queries without context
            false - ignores context and includes this QnA in search result
          title: isContextOnly
          type: boolean
        prompts:
          description: List of prompts associated with the answer.
          items:
            $ref: '#/components/schemas/PromptDTO'
          maxItems: 20
          title: prompts
          type: array
      title: ContextDTO
      type: object
    Error:
      additionalProperties: false
      description: The error object. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        details:
          description: An array of details about specific errors that led to this
            reported error.
          items:
            $ref: '#/components/schemas/Error'
          title: details
          type: array
        innerError:
          $ref: '#/components/schemas/InnerErrorModel'
        message:
          description: A human-readable representation of the error.
          title: message
          type: string
        target:
          description: The target of the error.
          title: target
          type: string
      required:
      - code
      title: Error
      type: object
    ErrorCode:
      description: Human readable error code.
      enum:
      - BadArgument
      - Forbidden
      - NotFound
      - KbNotFound
      - Unauthorized
      - Unspecified
      - EndpointKeysError
      - QuotaExceeded
      - QnaRuntimeError
      - SKULimitExceeded
      - OperationNotFound
      - ServiceError
      - ValidationFailure
      - ExtractionFailure
      title: ErrorCode
      type: string
      x-ms-enum:
        modelAsString: true
        name: ErrorCodeType
    ErrorResponse:
      additionalProperties: false
      description: Error response. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
      example:
        error: "{}"
      properties:
        error:
          allOf:
          - $ref: '#/components/schemas/Error'
          description: The error object.
          title: error
          type: object
      title: ErrorResponse
      type: object
    FeedbackRecordDTO:
      additionalProperties: false
      description: Active learning feedback record.
      example:
        qnaId: 0
        userId: userId
        userQuestion: userQuestion
      properties:
        qnaId:
          description: The qnaId for which the suggested question is provided as feedback.
          format: int32
          title: qnaId
          type: integer
        userId:
          description: Unique identifier for the user.
          title: userId
          type: string
        userQuestion:
          description: The suggested question being provided as feedback.
          maxLength: 1000
          title: userQuestion
          type: string
      title: FeedbackRecordDTO
      type: object
    FeedbackRecordsDTO:
      additionalProperties: false
      description: Active learning feedback records.
      example:
        feedbackRecords:
        - qnaId: 0
          userId: userId
          userQuestion: userQuestion
        - qnaId: 0
          userId: userId
          userQuestion: userQuestion
      properties:
        feedbackRecords:
          description: List of feedback records.
          items:
            $ref: '#/components/schemas/FeedbackRecordDTO'
          title: feedbackRecords
          type: array
      title: FeedbackRecordsDTO
      type: object
    InnerErrorModel:
      additionalProperties: false
      description: An object containing more specific information about the error.
        As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
      properties:
        code:
          description: A more specific error code than was provided by the containing
            error.
          title: code
          type: string
        innerError:
          $ref: '#/components/schemas/InnerErrorModel'
      title: InnerErrorModel
      type: object
    MetadataDTO:
      additionalProperties: false
      description: Name - value pair of metadata.
      example:
        name: name
        value: value
      properties:
        name:
          description: Metadata name.
          maxLength: 100
          minLength: 1
          title: name
          type: string
        value:
          description: Metadata value.
          maxLength: 500
          minLength: 1
          title: value
          type: string
      required:
      - name
      - value
      title: MetadataDTO
      type: object
    PromptDTO:
      description: Prompt for an answer.
      properties:
        displayOrder:
          description: Index of the prompt - used in ordering of the prompts
          format: int32
          title: displayOrder
          type: integer
        displayText:
          description: Text displayed to represent a follow up question prompt
          maxLength: 200
          title: displayText
          type: string
        qna:
          allOf:
          - $ref: '#/components/schemas/QnADTO'
          description: QnADTO - Either QnaId or QnADTO needs to be present in a PromptDTO
            object
          title: qna
          type: object
        qnaId:
          description: "Qna id corresponding to the prompt - if QnaId is present,\
            \ QnADTO object is ignored."
          format: int32
          title: qnaId
          type: integer
      title: PromptDTO
      type: object
    QnADTO:
      additionalProperties: false
      description: Q-A object.
      properties:
        answer:
          description: Answer text
          maxLength: 25000
          minLength: 1
          title: answer
          type: string
        context:
          allOf:
          - $ref: '#/components/schemas/ContextDTO'
          description: Context of a QnA
          title: context
          type: object
        id:
          description: Unique id for the Q-A.
          format: int32
          title: id
          type: integer
        metadata:
          description: List of metadata associated with the answer.
          items:
            $ref: '#/components/schemas/MetadataDTO'
          title: metadata
          type: array
        questions:
          description: List of questions associated with the answer.
          items:
            type: string
          title: questions
          type: array
        source:
          description: Source from which Q-A was indexed. eg. https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
          maxLength: 300
          title: source
          type: string
      required:
      - answer
      - questions
      title: QnADTO
      type: object
    QnASearchResult:
      additionalProperties: false
      description: Represents Search Result.
      example:
        score: 6.027456183070403
        metadata:
        - name: name
          value: value
        - name: name
          value: value
        answer: answer
        context: "{}"
        questions:
        - questions
        - questions
        id: 0
        source: source
      properties:
        answer:
          description: Answer.
          title: answer
          type: string
        context:
          allOf:
          - $ref: '#/components/schemas/ContextDTO'
          description: Context object of the QnA
          title: context
          type: object
        id:
          description: Id of the QnA result.
          format: int32
          title: id
          type: integer
        metadata:
          description: List of metadata.
          items:
            $ref: '#/components/schemas/MetadataDTO'
          title: metadata
          type: array
        questions:
          description: List of questions.
          items:
            type: string
          title: questions
          type: array
        score:
          description: Search result score.
          title: score
          type: number
        source:
          description: Source of QnA result.
          title: source
          type: string
      title: QnASearchResult
      type: object
    QnASearchResultList:
      additionalProperties: false
      description: Represents List of Question Answers.
      example:
        answers:
        - score: 6.027456183070403
          metadata:
          - name: name
            value: value
          - name: name
            value: value
          answer: answer
          context: "{}"
          questions:
          - questions
          - questions
          id: 0
          source: source
        - score: 6.027456183070403
          metadata:
          - name: name
            value: value
          - name: name
            value: value
          answer: answer
          context: "{}"
          questions:
          - questions
          - questions
          id: 0
          source: source
      properties:
        answers:
          description: Represents Search Result list.
          items:
            $ref: '#/components/schemas/QnASearchResult'
          title: answers
          type: array
      title: QnASearchResultList
      type: object
    QueryContextDTO:
      additionalProperties: false
      description: Context object with previous QnA's information.
      properties:
        previousQnaId:
          description: Previous QnA Id - qnaId of the top result.
          title: previousQnaId
          type: string
        previousUserQuery:
          description: Previous user query.
          title: previousUserQuery
          type: string
      title: QueryContextDTO
      type: object
    QueryDTO:
      additionalProperties: false
      description: POST body schema to query the knowledgebase.
      example:
        scoreThreshold: 0.8008281904610115
        qnaId: qnaId
        question: question
        top: 6
        isTest: true
        rankerType: rankerType
        context: "{}"
        strictFilters:
        - name: name
          value: value
        - name: name
          value: value
        userId: userId
      properties:
        context:
          allOf:
          - $ref: '#/components/schemas/QueryContextDTO'
          description: Context object with previous QnA's information.
          title: context
          type: object
        isTest:
          description: Query against the test index.
          title: isTest
          type: boolean
        qnaId:
          description: "Exact qnaId to fetch from the knowledgebase, this field takes\
            \ priority over question."
          title: qnaId
          type: string
        question:
          description: User question to query against the knowledge base.
          title: question
          type: string
        rankerType:
          description: Optional field. Set to 'QuestionOnly' for using a question
            only Ranker.
          title: rankerType
          type: string
        scoreThreshold:
          description: Threshold for answers returned based on score.
          title: scoreThreshold
          type: number
        strictFilters:
          description: Find only answers that contain these metadata.
          items:
            $ref: '#/components/schemas/MetadataDTO'
          title: strictFilters
          type: array
        top:
          description: Max number of answers to be returned for the question.
          format: int32
          title: top
          type: integer
        userId:
          description: Unique identifier for the user.
          title: userId
          type: string
      title: QueryDTO
      type: object
  securitySchemes:
    auth_key:
      in: header
      name: Authorization
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_auth_key
x-ms-parameterized-host:
  hostTemplate: "{RuntimeEndpoint}/qnamaker"
  parameters:
  - $ref: '#/parameters/RuntimeEndpoint'
  useSchemePrefix: false
x-original-swagger-version: "2.0"
