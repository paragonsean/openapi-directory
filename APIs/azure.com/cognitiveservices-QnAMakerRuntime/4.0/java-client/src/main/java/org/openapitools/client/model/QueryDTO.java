/*
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetadataDTO;
import org.openapitools.client.model.QueryContextDTO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * POST body schema to query the knowledgebase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:09.537429-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryDTO {
  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private QueryContextDTO context;

  public static final String SERIALIZED_NAME_IS_TEST = "isTest";
  @SerializedName(SERIALIZED_NAME_IS_TEST)
  private Boolean isTest;

  public static final String SERIALIZED_NAME_QNA_ID = "qnaId";
  @SerializedName(SERIALIZED_NAME_QNA_ID)
  private String qnaId;

  public static final String SERIALIZED_NAME_QUESTION = "question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_RANKER_TYPE = "rankerType";
  @SerializedName(SERIALIZED_NAME_RANKER_TYPE)
  private String rankerType;

  public static final String SERIALIZED_NAME_SCORE_THRESHOLD = "scoreThreshold";
  @SerializedName(SERIALIZED_NAME_SCORE_THRESHOLD)
  private BigDecimal scoreThreshold;

  public static final String SERIALIZED_NAME_STRICT_FILTERS = "strictFilters";
  @SerializedName(SERIALIZED_NAME_STRICT_FILTERS)
  private List<MetadataDTO> strictFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Integer top;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public QueryDTO() {
  }

  public QueryDTO context(QueryContextDTO context) {
    this.context = context;
    return this;
  }

  /**
   * Context object with previous QnA&#39;s information.
   * @return context
   */
  @javax.annotation.Nullable
  public QueryContextDTO getContext() {
    return context;
  }

  public void setContext(QueryContextDTO context) {
    this.context = context;
  }


  public QueryDTO isTest(Boolean isTest) {
    this.isTest = isTest;
    return this;
  }

  /**
   * Query against the test index.
   * @return isTest
   */
  @javax.annotation.Nullable
  public Boolean getIsTest() {
    return isTest;
  }

  public void setIsTest(Boolean isTest) {
    this.isTest = isTest;
  }


  public QueryDTO qnaId(String qnaId) {
    this.qnaId = qnaId;
    return this;
  }

  /**
   * Exact qnaId to fetch from the knowledgebase, this field takes priority over question.
   * @return qnaId
   */
  @javax.annotation.Nullable
  public String getQnaId() {
    return qnaId;
  }

  public void setQnaId(String qnaId) {
    this.qnaId = qnaId;
  }


  public QueryDTO question(String question) {
    this.question = question;
    return this;
  }

  /**
   * User question to query against the knowledge base.
   * @return question
   */
  @javax.annotation.Nullable
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }


  public QueryDTO rankerType(String rankerType) {
    this.rankerType = rankerType;
    return this;
  }

  /**
   * Optional field. Set to &#39;QuestionOnly&#39; for using a question only Ranker.
   * @return rankerType
   */
  @javax.annotation.Nullable
  public String getRankerType() {
    return rankerType;
  }

  public void setRankerType(String rankerType) {
    this.rankerType = rankerType;
  }


  public QueryDTO scoreThreshold(BigDecimal scoreThreshold) {
    this.scoreThreshold = scoreThreshold;
    return this;
  }

  /**
   * Threshold for answers returned based on score.
   * @return scoreThreshold
   */
  @javax.annotation.Nullable
  public BigDecimal getScoreThreshold() {
    return scoreThreshold;
  }

  public void setScoreThreshold(BigDecimal scoreThreshold) {
    this.scoreThreshold = scoreThreshold;
  }


  public QueryDTO strictFilters(List<MetadataDTO> strictFilters) {
    this.strictFilters = strictFilters;
    return this;
  }

  public QueryDTO addStrictFiltersItem(MetadataDTO strictFiltersItem) {
    if (this.strictFilters == null) {
      this.strictFilters = new ArrayList<>();
    }
    this.strictFilters.add(strictFiltersItem);
    return this;
  }

  /**
   * Find only answers that contain these metadata.
   * @return strictFilters
   */
  @javax.annotation.Nullable
  public List<MetadataDTO> getStrictFilters() {
    return strictFilters;
  }

  public void setStrictFilters(List<MetadataDTO> strictFilters) {
    this.strictFilters = strictFilters;
  }


  public QueryDTO top(Integer top) {
    this.top = top;
    return this;
  }

  /**
   * Max number of answers to be returned for the question.
   * @return top
   */
  @javax.annotation.Nullable
  public Integer getTop() {
    return top;
  }

  public void setTop(Integer top) {
    this.top = top;
  }


  public QueryDTO userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier for the user.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryDTO queryDTO = (QueryDTO) o;
    return Objects.equals(this.context, queryDTO.context) &&
        Objects.equals(this.isTest, queryDTO.isTest) &&
        Objects.equals(this.qnaId, queryDTO.qnaId) &&
        Objects.equals(this.question, queryDTO.question) &&
        Objects.equals(this.rankerType, queryDTO.rankerType) &&
        Objects.equals(this.scoreThreshold, queryDTO.scoreThreshold) &&
        Objects.equals(this.strictFilters, queryDTO.strictFilters) &&
        Objects.equals(this.top, queryDTO.top) &&
        Objects.equals(this.userId, queryDTO.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(context, isTest, qnaId, question, rankerType, scoreThreshold, strictFilters, top, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryDTO {\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    isTest: ").append(toIndentedString(isTest)).append("\n");
    sb.append("    qnaId: ").append(toIndentedString(qnaId)).append("\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    rankerType: ").append(toIndentedString(rankerType)).append("\n");
    sb.append("    scoreThreshold: ").append(toIndentedString(scoreThreshold)).append("\n");
    sb.append("    strictFilters: ").append(toIndentedString(strictFilters)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("context");
    openapiFields.add("isTest");
    openapiFields.add("qnaId");
    openapiFields.add("question");
    openapiFields.add("rankerType");
    openapiFields.add("scoreThreshold");
    openapiFields.add("strictFilters");
    openapiFields.add("top");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryDTO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryDTO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryDTO is not found in the empty JSON string", QueryDTO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryDTO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryDTO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        QueryContextDTO.validateJsonElement(jsonObj.get("context"));
      }
      if ((jsonObj.get("qnaId") != null && !jsonObj.get("qnaId").isJsonNull()) && !jsonObj.get("qnaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `qnaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("qnaId").toString()));
      }
      if ((jsonObj.get("question") != null && !jsonObj.get("question").isJsonNull()) && !jsonObj.get("question").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question").toString()));
      }
      if ((jsonObj.get("rankerType") != null && !jsonObj.get("rankerType").isJsonNull()) && !jsonObj.get("rankerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rankerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rankerType").toString()));
      }
      if (jsonObj.get("strictFilters") != null && !jsonObj.get("strictFilters").isJsonNull()) {
        JsonArray jsonArraystrictFilters = jsonObj.getAsJsonArray("strictFilters");
        if (jsonArraystrictFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("strictFilters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `strictFilters` to be an array in the JSON string but got `%s`", jsonObj.get("strictFilters").toString()));
          }

          // validate the optional field `strictFilters` (array)
          for (int i = 0; i < jsonArraystrictFilters.size(); i++) {
            MetadataDTO.validateJsonElement(jsonArraystrictFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryDTO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryDTO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryDTO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryDTO.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryDTO>() {
           @Override
           public void write(JsonWriter out, QueryDTO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryDTO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryDTO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryDTO
   * @throws IOException if the JSON string is invalid with respect to QueryDTO
   */
  public static QueryDTO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryDTO.class);
  }

  /**
   * Convert an instance of QueryDTO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

