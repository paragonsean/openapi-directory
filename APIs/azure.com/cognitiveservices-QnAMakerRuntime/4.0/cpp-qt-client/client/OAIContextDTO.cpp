/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContextDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContextDTO::OAIContextDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContextDTO::OAIContextDTO() {
    this->initializeModel();
}

OAIContextDTO::~OAIContextDTO() {}

void OAIContextDTO::initializeModel() {

    m_is_context_only_isSet = false;
    m_is_context_only_isValid = false;

    m_prompts_isSet = false;
    m_prompts_isValid = false;
}

void OAIContextDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContextDTO::fromJsonObject(QJsonObject json) {

    m_is_context_only_isValid = ::OpenAPI::fromJsonValue(m_is_context_only, json[QString("isContextOnly")]);
    m_is_context_only_isSet = !json[QString("isContextOnly")].isNull() && m_is_context_only_isValid;

    m_prompts_isValid = ::OpenAPI::fromJsonValue(m_prompts, json[QString("prompts")]);
    m_prompts_isSet = !json[QString("prompts")].isNull() && m_prompts_isValid;
}

QString OAIContextDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContextDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_is_context_only_isSet) {
        obj.insert(QString("isContextOnly"), ::OpenAPI::toJsonValue(m_is_context_only));
    }
    if (m_prompts.size() > 0) {
        obj.insert(QString("prompts"), ::OpenAPI::toJsonValue(m_prompts));
    }
    return obj;
}

bool OAIContextDTO::isIsContextOnly() const {
    return m_is_context_only;
}
void OAIContextDTO::setIsContextOnly(const bool &is_context_only) {
    m_is_context_only = is_context_only;
    m_is_context_only_isSet = true;
}

bool OAIContextDTO::is_is_context_only_Set() const{
    return m_is_context_only_isSet;
}

bool OAIContextDTO::is_is_context_only_Valid() const{
    return m_is_context_only_isValid;
}

QList<OAIPromptDTO> OAIContextDTO::getPrompts() const {
    return m_prompts;
}
void OAIContextDTO::setPrompts(const QList<OAIPromptDTO> &prompts) {
    m_prompts = prompts;
    m_prompts_isSet = true;
}

bool OAIContextDTO::is_prompts_Set() const{
    return m_prompts_isSet;
}

bool OAIContextDTO::is_prompts_Valid() const{
    return m_prompts_isValid;
}

bool OAIContextDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_context_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContextDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
