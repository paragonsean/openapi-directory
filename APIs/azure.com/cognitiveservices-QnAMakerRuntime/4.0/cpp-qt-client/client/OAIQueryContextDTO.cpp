/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryContextDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryContextDTO::OAIQueryContextDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryContextDTO::OAIQueryContextDTO() {
    this->initializeModel();
}

OAIQueryContextDTO::~OAIQueryContextDTO() {}

void OAIQueryContextDTO::initializeModel() {

    m_previous_qna_id_isSet = false;
    m_previous_qna_id_isValid = false;

    m_previous_user_query_isSet = false;
    m_previous_user_query_isValid = false;
}

void OAIQueryContextDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryContextDTO::fromJsonObject(QJsonObject json) {

    m_previous_qna_id_isValid = ::OpenAPI::fromJsonValue(m_previous_qna_id, json[QString("previousQnaId")]);
    m_previous_qna_id_isSet = !json[QString("previousQnaId")].isNull() && m_previous_qna_id_isValid;

    m_previous_user_query_isValid = ::OpenAPI::fromJsonValue(m_previous_user_query, json[QString("previousUserQuery")]);
    m_previous_user_query_isSet = !json[QString("previousUserQuery")].isNull() && m_previous_user_query_isValid;
}

QString OAIQueryContextDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryContextDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_previous_qna_id_isSet) {
        obj.insert(QString("previousQnaId"), ::OpenAPI::toJsonValue(m_previous_qna_id));
    }
    if (m_previous_user_query_isSet) {
        obj.insert(QString("previousUserQuery"), ::OpenAPI::toJsonValue(m_previous_user_query));
    }
    return obj;
}

QString OAIQueryContextDTO::getPreviousQnaId() const {
    return m_previous_qna_id;
}
void OAIQueryContextDTO::setPreviousQnaId(const QString &previous_qna_id) {
    m_previous_qna_id = previous_qna_id;
    m_previous_qna_id_isSet = true;
}

bool OAIQueryContextDTO::is_previous_qna_id_Set() const{
    return m_previous_qna_id_isSet;
}

bool OAIQueryContextDTO::is_previous_qna_id_Valid() const{
    return m_previous_qna_id_isValid;
}

QString OAIQueryContextDTO::getPreviousUserQuery() const {
    return m_previous_user_query;
}
void OAIQueryContextDTO::setPreviousUserQuery(const QString &previous_user_query) {
    m_previous_user_query = previous_user_query;
    m_previous_user_query_isSet = true;
}

bool OAIQueryContextDTO::is_previous_user_query_Set() const{
    return m_previous_user_query_isSet;
}

bool OAIQueryContextDTO::is_previous_user_query_Valid() const{
    return m_previous_user_query_isValid;
}

bool OAIQueryContextDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_previous_qna_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_user_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryContextDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
