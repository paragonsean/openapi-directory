/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryDTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryDTO::OAIQueryDTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryDTO::OAIQueryDTO() {
    this->initializeModel();
}

OAIQueryDTO::~OAIQueryDTO() {}

void OAIQueryDTO::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_is_test_isSet = false;
    m_is_test_isValid = false;

    m_qna_id_isSet = false;
    m_qna_id_isValid = false;

    m_question_isSet = false;
    m_question_isValid = false;

    m_ranker_type_isSet = false;
    m_ranker_type_isValid = false;

    m_score_threshold_isSet = false;
    m_score_threshold_isValid = false;

    m_strict_filters_isSet = false;
    m_strict_filters_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIQueryDTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryDTO::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_is_test_isValid = ::OpenAPI::fromJsonValue(m_is_test, json[QString("isTest")]);
    m_is_test_isSet = !json[QString("isTest")].isNull() && m_is_test_isValid;

    m_qna_id_isValid = ::OpenAPI::fromJsonValue(m_qna_id, json[QString("qnaId")]);
    m_qna_id_isSet = !json[QString("qnaId")].isNull() && m_qna_id_isValid;

    m_question_isValid = ::OpenAPI::fromJsonValue(m_question, json[QString("question")]);
    m_question_isSet = !json[QString("question")].isNull() && m_question_isValid;

    m_ranker_type_isValid = ::OpenAPI::fromJsonValue(m_ranker_type, json[QString("rankerType")]);
    m_ranker_type_isSet = !json[QString("rankerType")].isNull() && m_ranker_type_isValid;

    m_score_threshold_isValid = ::OpenAPI::fromJsonValue(m_score_threshold, json[QString("scoreThreshold")]);
    m_score_threshold_isSet = !json[QString("scoreThreshold")].isNull() && m_score_threshold_isValid;

    m_strict_filters_isValid = ::OpenAPI::fromJsonValue(m_strict_filters, json[QString("strictFilters")]);
    m_strict_filters_isSet = !json[QString("strictFilters")].isNull() && m_strict_filters_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIQueryDTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryDTO::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_is_test_isSet) {
        obj.insert(QString("isTest"), ::OpenAPI::toJsonValue(m_is_test));
    }
    if (m_qna_id_isSet) {
        obj.insert(QString("qnaId"), ::OpenAPI::toJsonValue(m_qna_id));
    }
    if (m_question_isSet) {
        obj.insert(QString("question"), ::OpenAPI::toJsonValue(m_question));
    }
    if (m_ranker_type_isSet) {
        obj.insert(QString("rankerType"), ::OpenAPI::toJsonValue(m_ranker_type));
    }
    if (m_score_threshold_isSet) {
        obj.insert(QString("scoreThreshold"), ::OpenAPI::toJsonValue(m_score_threshold));
    }
    if (m_strict_filters.size() > 0) {
        obj.insert(QString("strictFilters"), ::OpenAPI::toJsonValue(m_strict_filters));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIQueryContextDTO OAIQueryDTO::getContext() const {
    return m_context;
}
void OAIQueryDTO::setContext(const OAIQueryContextDTO &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIQueryDTO::is_context_Set() const{
    return m_context_isSet;
}

bool OAIQueryDTO::is_context_Valid() const{
    return m_context_isValid;
}

bool OAIQueryDTO::isIsTest() const {
    return m_is_test;
}
void OAIQueryDTO::setIsTest(const bool &is_test) {
    m_is_test = is_test;
    m_is_test_isSet = true;
}

bool OAIQueryDTO::is_is_test_Set() const{
    return m_is_test_isSet;
}

bool OAIQueryDTO::is_is_test_Valid() const{
    return m_is_test_isValid;
}

QString OAIQueryDTO::getQnaId() const {
    return m_qna_id;
}
void OAIQueryDTO::setQnaId(const QString &qna_id) {
    m_qna_id = qna_id;
    m_qna_id_isSet = true;
}

bool OAIQueryDTO::is_qna_id_Set() const{
    return m_qna_id_isSet;
}

bool OAIQueryDTO::is_qna_id_Valid() const{
    return m_qna_id_isValid;
}

QString OAIQueryDTO::getQuestion() const {
    return m_question;
}
void OAIQueryDTO::setQuestion(const QString &question) {
    m_question = question;
    m_question_isSet = true;
}

bool OAIQueryDTO::is_question_Set() const{
    return m_question_isSet;
}

bool OAIQueryDTO::is_question_Valid() const{
    return m_question_isValid;
}

QString OAIQueryDTO::getRankerType() const {
    return m_ranker_type;
}
void OAIQueryDTO::setRankerType(const QString &ranker_type) {
    m_ranker_type = ranker_type;
    m_ranker_type_isSet = true;
}

bool OAIQueryDTO::is_ranker_type_Set() const{
    return m_ranker_type_isSet;
}

bool OAIQueryDTO::is_ranker_type_Valid() const{
    return m_ranker_type_isValid;
}

double OAIQueryDTO::getScoreThreshold() const {
    return m_score_threshold;
}
void OAIQueryDTO::setScoreThreshold(const double &score_threshold) {
    m_score_threshold = score_threshold;
    m_score_threshold_isSet = true;
}

bool OAIQueryDTO::is_score_threshold_Set() const{
    return m_score_threshold_isSet;
}

bool OAIQueryDTO::is_score_threshold_Valid() const{
    return m_score_threshold_isValid;
}

QList<OAIMetadataDTO> OAIQueryDTO::getStrictFilters() const {
    return m_strict_filters;
}
void OAIQueryDTO::setStrictFilters(const QList<OAIMetadataDTO> &strict_filters) {
    m_strict_filters = strict_filters;
    m_strict_filters_isSet = true;
}

bool OAIQueryDTO::is_strict_filters_Set() const{
    return m_strict_filters_isSet;
}

bool OAIQueryDTO::is_strict_filters_Valid() const{
    return m_strict_filters_isValid;
}

qint32 OAIQueryDTO::getTop() const {
    return m_top;
}
void OAIQueryDTO::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIQueryDTO::is_top_Set() const{
    return m_top_isSet;
}

bool OAIQueryDTO::is_top_Valid() const{
    return m_top_isValid;
}

QString OAIQueryDTO::getUserId() const {
    return m_user_id;
}
void OAIQueryDTO::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIQueryDTO::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIQueryDTO::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIQueryDTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qna_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ranker_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_strict_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryDTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
