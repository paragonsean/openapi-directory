/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQnADTO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQnADTO::OAIQnADTO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQnADTO::OAIQnADTO() {
    this->initializeModel();
}

OAIQnADTO::~OAIQnADTO() {}

void OAIQnADTO::initializeModel() {

    m_answer_isSet = false;
    m_answer_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_questions_isSet = false;
    m_questions_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIQnADTO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQnADTO::fromJsonObject(QJsonObject json) {

    m_answer_isValid = ::OpenAPI::fromJsonValue(m_answer, json[QString("answer")]);
    m_answer_isSet = !json[QString("answer")].isNull() && m_answer_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_questions_isValid = ::OpenAPI::fromJsonValue(m_questions, json[QString("questions")]);
    m_questions_isSet = !json[QString("questions")].isNull() && m_questions_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIQnADTO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQnADTO::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_isSet) {
        obj.insert(QString("answer"), ::OpenAPI::toJsonValue(m_answer));
    }
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_questions.size() > 0) {
        obj.insert(QString("questions"), ::OpenAPI::toJsonValue(m_questions));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIQnADTO::getAnswer() const {
    return m_answer;
}
void OAIQnADTO::setAnswer(const QString &answer) {
    m_answer = answer;
    m_answer_isSet = true;
}

bool OAIQnADTO::is_answer_Set() const{
    return m_answer_isSet;
}

bool OAIQnADTO::is_answer_Valid() const{
    return m_answer_isValid;
}

OAIContextDTO OAIQnADTO::getContext() const {
    return m_context;
}
void OAIQnADTO::setContext(const OAIContextDTO &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIQnADTO::is_context_Set() const{
    return m_context_isSet;
}

bool OAIQnADTO::is_context_Valid() const{
    return m_context_isValid;
}

qint32 OAIQnADTO::getId() const {
    return m_id;
}
void OAIQnADTO::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQnADTO::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQnADTO::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMetadataDTO> OAIQnADTO::getMetadata() const {
    return m_metadata;
}
void OAIQnADTO::setMetadata(const QList<OAIMetadataDTO> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIQnADTO::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIQnADTO::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<QString> OAIQnADTO::getQuestions() const {
    return m_questions;
}
void OAIQnADTO::setQuestions(const QList<QString> &questions) {
    m_questions = questions;
    m_questions_isSet = true;
}

bool OAIQnADTO::is_questions_Set() const{
    return m_questions_isSet;
}

bool OAIQnADTO::is_questions_Valid() const{
    return m_questions_isValid;
}

QString OAIQnADTO::getSource() const {
    return m_source;
}
void OAIQnADTO::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIQnADTO::is_source_Set() const{
    return m_source_isSet;
}

bool OAIQnADTO::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIQnADTO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQnADTO::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_answer_isValid && m_questions_isValid && true;
}

} // namespace OpenAPI
