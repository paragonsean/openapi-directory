/**
 * QnAMaker Runtime Client
 * An API for QnAMaker runtime
 *
 * The version of the OpenAPI document: 4.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryDTO.h
 *
 * POST body schema to query the knowledgebase.
 */

#ifndef OAIQueryDTO_H
#define OAIQueryDTO_H

#include <QJsonObject>

#include "OAIMetadataDTO.h"
#include "OAIQueryContextDTO.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQueryContextDTO;
class OAIMetadataDTO;

class OAIQueryDTO : public OAIObject {
public:
    OAIQueryDTO();
    OAIQueryDTO(QString json);
    ~OAIQueryDTO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIQueryContextDTO getContext() const;
    void setContext(const OAIQueryContextDTO &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    bool isIsTest() const;
    void setIsTest(const bool &is_test);
    bool is_is_test_Set() const;
    bool is_is_test_Valid() const;

    QString getQnaId() const;
    void setQnaId(const QString &qna_id);
    bool is_qna_id_Set() const;
    bool is_qna_id_Valid() const;

    QString getQuestion() const;
    void setQuestion(const QString &question);
    bool is_question_Set() const;
    bool is_question_Valid() const;

    QString getRankerType() const;
    void setRankerType(const QString &ranker_type);
    bool is_ranker_type_Set() const;
    bool is_ranker_type_Valid() const;

    double getScoreThreshold() const;
    void setScoreThreshold(const double &score_threshold);
    bool is_score_threshold_Set() const;
    bool is_score_threshold_Valid() const;

    QList<OAIMetadataDTO> getStrictFilters() const;
    void setStrictFilters(const QList<OAIMetadataDTO> &strict_filters);
    bool is_strict_filters_Set() const;
    bool is_strict_filters_Valid() const;

    qint32 getTop() const;
    void setTop(const qint32 &top);
    bool is_top_Set() const;
    bool is_top_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIQueryContextDTO m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    bool m_is_test;
    bool m_is_test_isSet;
    bool m_is_test_isValid;

    QString m_qna_id;
    bool m_qna_id_isSet;
    bool m_qna_id_isValid;

    QString m_question;
    bool m_question_isSet;
    bool m_question_isValid;

    QString m_ranker_type;
    bool m_ranker_type_isSet;
    bool m_ranker_type_isValid;

    double m_score_threshold;
    bool m_score_threshold_isSet;
    bool m_score_threshold_isValid;

    QList<OAIMetadataDTO> m_strict_filters;
    bool m_strict_filters_isSet;
    bool m_strict_filters_isValid;

    qint32 m_top;
    bool m_top_isSet;
    bool m_top_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryDTO)

#endif // OAIQueryDTO_H
