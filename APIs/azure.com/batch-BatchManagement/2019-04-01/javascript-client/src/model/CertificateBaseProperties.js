/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateBaseProperties model module.
 * @module model/CertificateBaseProperties
 * @version 2019-04-01
 */
class CertificateBaseProperties {
    /**
     * Constructs a new <code>CertificateBaseProperties</code>.
     * @alias module:model/CertificateBaseProperties
     */
    constructor() { 
        
        CertificateBaseProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateBaseProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateBaseProperties} obj Optional instance to populate.
     * @return {module:model/CertificateBaseProperties} The populated <code>CertificateBaseProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateBaseProperties();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('thumbprintAlgorithm')) {
                obj['thumbprintAlgorithm'] = ApiClient.convertToType(data['thumbprintAlgorithm'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateBaseProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateBaseProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['thumbprintAlgorithm'] && !(typeof data['thumbprintAlgorithm'] === 'string' || data['thumbprintAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `thumbprintAlgorithm` to be a primitive type in the JSON string but got " + data['thumbprintAlgorithm']);
        }

        return true;
    }


}



/**
 * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
 * @member {module:model/CertificateBaseProperties.FormatEnum} format
 */
CertificateBaseProperties.prototype['format'] = undefined;

/**
 * This must match the thumbprint from the name.
 * @member {String} thumbprint
 */
CertificateBaseProperties.prototype['thumbprint'] = undefined;

/**
 * This must match the first portion of the certificate name. Currently required to be 'SHA1'.
 * @member {String} thumbprintAlgorithm
 */
CertificateBaseProperties.prototype['thumbprintAlgorithm'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
CertificateBaseProperties['FormatEnum'] = {

    /**
     * value: "Pfx"
     * @const
     */
    "Pfx": "Pfx",

    /**
     * value: "Cer"
     * @const
     */
    "Cer": "Cer"
};



export default CertificateBaseProperties;

