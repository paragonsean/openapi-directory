/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceFile model module.
 * @module model/ResourceFile
 * @version 2019-04-01
 */
class ResourceFile {
    /**
     * Constructs a new <code>ResourceFile</code>.
     * @alias module:model/ResourceFile
     */
    constructor() { 
        
        ResourceFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceFile} obj Optional instance to populate.
     * @return {module:model/ResourceFile} The populated <code>ResourceFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceFile();

            if (data.hasOwnProperty('autoStorageContainerName')) {
                obj['autoStorageContainerName'] = ApiClient.convertToType(data['autoStorageContainerName'], 'String');
            }
            if (data.hasOwnProperty('blobPrefix')) {
                obj['blobPrefix'] = ApiClient.convertToType(data['blobPrefix'], 'String');
            }
            if (data.hasOwnProperty('fileMode')) {
                obj['fileMode'] = ApiClient.convertToType(data['fileMode'], 'String');
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('httpUrl')) {
                obj['httpUrl'] = ApiClient.convertToType(data['httpUrl'], 'String');
            }
            if (data.hasOwnProperty('storageContainerUrl')) {
                obj['storageContainerUrl'] = ApiClient.convertToType(data['storageContainerUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['autoStorageContainerName'] && !(typeof data['autoStorageContainerName'] === 'string' || data['autoStorageContainerName'] instanceof String)) {
            throw new Error("Expected the field `autoStorageContainerName` to be a primitive type in the JSON string but got " + data['autoStorageContainerName']);
        }
        // ensure the json data is a string
        if (data['blobPrefix'] && !(typeof data['blobPrefix'] === 'string' || data['blobPrefix'] instanceof String)) {
            throw new Error("Expected the field `blobPrefix` to be a primitive type in the JSON string but got " + data['blobPrefix']);
        }
        // ensure the json data is a string
        if (data['fileMode'] && !(typeof data['fileMode'] === 'string' || data['fileMode'] instanceof String)) {
            throw new Error("Expected the field `fileMode` to be a primitive type in the JSON string but got " + data['fileMode']);
        }
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // ensure the json data is a string
        if (data['httpUrl'] && !(typeof data['httpUrl'] === 'string' || data['httpUrl'] instanceof String)) {
            throw new Error("Expected the field `httpUrl` to be a primitive type in the JSON string but got " + data['httpUrl']);
        }
        // ensure the json data is a string
        if (data['storageContainerUrl'] && !(typeof data['storageContainerUrl'] === 'string' || data['storageContainerUrl'] instanceof String)) {
            throw new Error("Expected the field `storageContainerUrl` to be a primitive type in the JSON string but got " + data['storageContainerUrl']);
        }

        return true;
    }


}



/**
 * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified.
 * @member {String} autoStorageContainerName
 */
ResourceFile.prototype['autoStorageContainerName'] = undefined;

/**
 * The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded.
 * @member {String} blobPrefix
 */
ResourceFile.prototype['blobPrefix'] = undefined;

/**
 * This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file.
 * @member {String} fileMode
 */
ResourceFile.prototype['fileMode'] = undefined;

/**
 * If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task's working directory (for example by using '..').
 * @member {String} filePath
 */
ResourceFile.prototype['filePath'] = undefined;

/**
 * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL is Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, or set the ACL for the blob or its container to allow public access.
 * @member {String} httpUrl
 */
ResourceFile.prototype['httpUrl'] = undefined;

/**
 * The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable using anonymous access; that is, the Batch service does not present any credentials when downloading the blob. There are two ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the blob, or set the ACL for the blob or its container to allow public access.
 * @member {String} storageContainerUrl
 */
ResourceFile.prototype['storageContainerUrl'] = undefined;






export default ResourceFile;

