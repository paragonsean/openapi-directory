/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationPackageReference from './ApplicationPackageReference';
import AutoScaleRun from './AutoScaleRun';
import CertificateReference from './CertificateReference';
import DeploymentConfiguration from './DeploymentConfiguration';
import MetadataItem from './MetadataItem';
import NetworkConfiguration from './NetworkConfiguration';
import ResizeOperationStatus from './ResizeOperationStatus';
import ScaleSettings from './ScaleSettings';
import StartTask from './StartTask';
import TaskSchedulingPolicy from './TaskSchedulingPolicy';
import UserAccount from './UserAccount';

/**
 * The PoolProperties model module.
 * @module model/PoolProperties
 * @version 2019-04-01
 */
class PoolProperties {
    /**
     * Constructs a new <code>PoolProperties</code>.
     * Pool properties.
     * @alias module:model/PoolProperties
     */
    constructor() { 
        
        PoolProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PoolProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PoolProperties} obj Optional instance to populate.
     * @return {module:model/PoolProperties} The populated <code>PoolProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PoolProperties();

            if (data.hasOwnProperty('allocationState')) {
                obj['allocationState'] = ApiClient.convertToType(data['allocationState'], 'String');
            }
            if (data.hasOwnProperty('allocationStateTransitionTime')) {
                obj['allocationStateTransitionTime'] = ApiClient.convertToType(data['allocationStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('applicationLicenses')) {
                obj['applicationLicenses'] = ApiClient.convertToType(data['applicationLicenses'], ['String']);
            }
            if (data.hasOwnProperty('applicationPackages')) {
                obj['applicationPackages'] = ApiClient.convertToType(data['applicationPackages'], [ApplicationPackageReference]);
            }
            if (data.hasOwnProperty('autoScaleRun')) {
                obj['autoScaleRun'] = AutoScaleRun.constructFromObject(data['autoScaleRun']);
            }
            if (data.hasOwnProperty('certificates')) {
                obj['certificates'] = ApiClient.convertToType(data['certificates'], [CertificateReference]);
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('currentDedicatedNodes')) {
                obj['currentDedicatedNodes'] = ApiClient.convertToType(data['currentDedicatedNodes'], 'Number');
            }
            if (data.hasOwnProperty('currentLowPriorityNodes')) {
                obj['currentLowPriorityNodes'] = ApiClient.convertToType(data['currentLowPriorityNodes'], 'Number');
            }
            if (data.hasOwnProperty('deploymentConfiguration')) {
                obj['deploymentConfiguration'] = DeploymentConfiguration.constructFromObject(data['deploymentConfiguration']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('interNodeCommunication')) {
                obj['interNodeCommunication'] = ApiClient.convertToType(data['interNodeCommunication'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('maxTasksPerNode')) {
                obj['maxTasksPerNode'] = ApiClient.convertToType(data['maxTasksPerNode'], 'Number');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [MetadataItem]);
            }
            if (data.hasOwnProperty('networkConfiguration')) {
                obj['networkConfiguration'] = NetworkConfiguration.constructFromObject(data['networkConfiguration']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('provisioningStateTransitionTime')) {
                obj['provisioningStateTransitionTime'] = ApiClient.convertToType(data['provisioningStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('resizeOperationStatus')) {
                obj['resizeOperationStatus'] = ResizeOperationStatus.constructFromObject(data['resizeOperationStatus']);
            }
            if (data.hasOwnProperty('scaleSettings')) {
                obj['scaleSettings'] = ScaleSettings.constructFromObject(data['scaleSettings']);
            }
            if (data.hasOwnProperty('startTask')) {
                obj['startTask'] = StartTask.constructFromObject(data['startTask']);
            }
            if (data.hasOwnProperty('taskSchedulingPolicy')) {
                obj['taskSchedulingPolicy'] = TaskSchedulingPolicy.constructFromObject(data['taskSchedulingPolicy']);
            }
            if (data.hasOwnProperty('userAccounts')) {
                obj['userAccounts'] = ApiClient.convertToType(data['userAccounts'], [UserAccount]);
            }
            if (data.hasOwnProperty('vmSize')) {
                obj['vmSize'] = ApiClient.convertToType(data['vmSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PoolProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PoolProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocationState'] && !(typeof data['allocationState'] === 'string' || data['allocationState'] instanceof String)) {
            throw new Error("Expected the field `allocationState` to be a primitive type in the JSON string but got " + data['allocationState']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['applicationLicenses'])) {
            throw new Error("Expected the field `applicationLicenses` to be an array in the JSON data but got " + data['applicationLicenses']);
        }
        if (data['applicationPackages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['applicationPackages'])) {
                throw new Error("Expected the field `applicationPackages` to be an array in the JSON data but got " + data['applicationPackages']);
            }
            // validate the optional field `applicationPackages` (array)
            for (const item of data['applicationPackages']) {
                ApplicationPackageReference.validateJSON(item);
            };
        }
        // validate the optional field `autoScaleRun`
        if (data['autoScaleRun']) { // data not null
          AutoScaleRun.validateJSON(data['autoScaleRun']);
        }
        if (data['certificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['certificates'])) {
                throw new Error("Expected the field `certificates` to be an array in the JSON data but got " + data['certificates']);
            }
            // validate the optional field `certificates` (array)
            for (const item of data['certificates']) {
                CertificateReference.validateJSON(item);
            };
        }
        // validate the optional field `deploymentConfiguration`
        if (data['deploymentConfiguration']) { // data not null
          DeploymentConfiguration.validateJSON(data['deploymentConfiguration']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['interNodeCommunication'] && !(typeof data['interNodeCommunication'] === 'string' || data['interNodeCommunication'] instanceof String)) {
            throw new Error("Expected the field `interNodeCommunication` to be a primitive type in the JSON string but got " + data['interNodeCommunication']);
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                MetadataItem.validateJSON(item);
            };
        }
        // validate the optional field `networkConfiguration`
        if (data['networkConfiguration']) { // data not null
          NetworkConfiguration.validateJSON(data['networkConfiguration']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `resizeOperationStatus`
        if (data['resizeOperationStatus']) { // data not null
          ResizeOperationStatus.validateJSON(data['resizeOperationStatus']);
        }
        // validate the optional field `scaleSettings`
        if (data['scaleSettings']) { // data not null
          ScaleSettings.validateJSON(data['scaleSettings']);
        }
        // validate the optional field `startTask`
        if (data['startTask']) { // data not null
          StartTask.validateJSON(data['startTask']);
        }
        // validate the optional field `taskSchedulingPolicy`
        if (data['taskSchedulingPolicy']) { // data not null
          TaskSchedulingPolicy.validateJSON(data['taskSchedulingPolicy']);
        }
        if (data['userAccounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userAccounts'])) {
                throw new Error("Expected the field `userAccounts` to be an array in the JSON data but got " + data['userAccounts']);
            }
            // validate the optional field `userAccounts` (array)
            for (const item of data['userAccounts']) {
                UserAccount.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['vmSize'] && !(typeof data['vmSize'] === 'string' || data['vmSize'] instanceof String)) {
            throw new Error("Expected the field `vmSize` to be a primitive type in the JSON string but got " + data['vmSize']);
        }

        return true;
    }


}



/**
 * @member {module:model/PoolProperties.AllocationStateEnum} allocationState
 */
PoolProperties.prototype['allocationState'] = undefined;

/**
 * @member {Date} allocationStateTransitionTime
 */
PoolProperties.prototype['allocationStateTransitionTime'] = undefined;

/**
 * The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail.
 * @member {Array.<String>} applicationLicenses
 */
PoolProperties.prototype['applicationLicenses'] = undefined;

/**
 * Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool.
 * @member {Array.<module:model/ApplicationPackageReference>} applicationPackages
 */
PoolProperties.prototype['applicationPackages'] = undefined;

/**
 * @member {module:model/AutoScaleRun} autoScaleRun
 */
PoolProperties.prototype['autoScaleRun'] = undefined;

/**
 * For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 * @member {Array.<module:model/CertificateReference>} certificates
 */
PoolProperties.prototype['certificates'] = undefined;

/**
 * @member {Date} creationTime
 */
PoolProperties.prototype['creationTime'] = undefined;

/**
 * @member {Number} currentDedicatedNodes
 */
PoolProperties.prototype['currentDedicatedNodes'] = undefined;

/**
 * @member {Number} currentLowPriorityNodes
 */
PoolProperties.prototype['currentLowPriorityNodes'] = undefined;

/**
 * @member {module:model/DeploymentConfiguration} deploymentConfiguration
 */
PoolProperties.prototype['deploymentConfiguration'] = undefined;

/**
 * The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024.
 * @member {String} displayName
 */
PoolProperties.prototype['displayName'] = undefined;

/**
 * This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to 'Disabled'.
 * @member {module:model/PoolProperties.InterNodeCommunicationEnum} interNodeCommunication
 */
PoolProperties.prototype['interNodeCommunication'] = undefined;

/**
 * This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state.
 * @member {Date} lastModified
 */
PoolProperties.prototype['lastModified'] = undefined;

/**
 * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256.
 * @member {Number} maxTasksPerNode
 */
PoolProperties.prototype['maxTasksPerNode'] = undefined;

/**
 * The Batch service does not assign any meaning to metadata; it is solely for the use of user code.
 * @member {Array.<module:model/MetadataItem>} metadata
 */
PoolProperties.prototype['metadata'] = undefined;

/**
 * @member {module:model/NetworkConfiguration} networkConfiguration
 */
PoolProperties.prototype['networkConfiguration'] = undefined;

/**
 * @member {module:model/PoolProperties.ProvisioningStateEnum} provisioningState
 */
PoolProperties.prototype['provisioningState'] = undefined;

/**
 * @member {Date} provisioningStateTransitionTime
 */
PoolProperties.prototype['provisioningStateTransitionTime'] = undefined;

/**
 * @member {module:model/ResizeOperationStatus} resizeOperationStatus
 */
PoolProperties.prototype['resizeOperationStatus'] = undefined;

/**
 * @member {module:model/ScaleSettings} scaleSettings
 */
PoolProperties.prototype['scaleSettings'] = undefined;

/**
 * @member {module:model/StartTask} startTask
 */
PoolProperties.prototype['startTask'] = undefined;

/**
 * @member {module:model/TaskSchedulingPolicy} taskSchedulingPolicy
 */
PoolProperties.prototype['taskSchedulingPolicy'] = undefined;

/**
 * @member {Array.<module:model/UserAccount>} userAccounts
 */
PoolProperties.prototype['userAccounts'] = undefined;

/**
 * For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
 * @member {String} vmSize
 */
PoolProperties.prototype['vmSize'] = undefined;





/**
 * Allowed values for the <code>allocationState</code> property.
 * @enum {String}
 * @readonly
 */
PoolProperties['AllocationStateEnum'] = {

    /**
     * value: "Steady"
     * @const
     */
    "Steady": "Steady",

    /**
     * value: "Resizing"
     * @const
     */
    "Resizing": "Resizing",

    /**
     * value: "Stopping"
     * @const
     */
    "Stopping": "Stopping"
};


/**
 * Allowed values for the <code>interNodeCommunication</code> property.
 * @enum {String}
 * @readonly
 */
PoolProperties['InterNodeCommunicationEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
PoolProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting"
};



export default PoolProperties;

