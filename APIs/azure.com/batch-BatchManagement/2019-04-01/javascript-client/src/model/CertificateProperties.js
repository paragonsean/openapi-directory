/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CertificateBaseProperties from './CertificateBaseProperties';
import DeleteCertificateError from './DeleteCertificateError';

/**
 * The CertificateProperties model module.
 * @module model/CertificateProperties
 * @version 2019-04-01
 */
class CertificateProperties {
    /**
     * Constructs a new <code>CertificateProperties</code>.
     * Certificate properties.
     * @alias module:model/CertificateProperties
     * @implements module:model/CertificateBaseProperties
     */
    constructor() { 
        CertificateBaseProperties.initialize(this);
        CertificateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CertificateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateProperties} obj Optional instance to populate.
     * @return {module:model/CertificateProperties} The populated <code>CertificateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateProperties();
            CertificateBaseProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('deleteCertificateError')) {
                obj['deleteCertificateError'] = DeleteCertificateError.constructFromObject(data['deleteCertificateError']);
            }
            if (data.hasOwnProperty('previousProvisioningState')) {
                obj['previousProvisioningState'] = ApiClient.convertToType(data['previousProvisioningState'], 'String');
            }
            if (data.hasOwnProperty('previousProvisioningStateTransitionTime')) {
                obj['previousProvisioningStateTransitionTime'] = ApiClient.convertToType(data['previousProvisioningStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('provisioningStateTransitionTime')) {
                obj['provisioningStateTransitionTime'] = ApiClient.convertToType(data['provisioningStateTransitionTime'], 'Date');
            }
            if (data.hasOwnProperty('publicData')) {
                obj['publicData'] = ApiClient.convertToType(data['publicData'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('thumbprintAlgorithm')) {
                obj['thumbprintAlgorithm'] = ApiClient.convertToType(data['thumbprintAlgorithm'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deleteCertificateError`
        if (data['deleteCertificateError']) { // data not null
          DeleteCertificateError.validateJSON(data['deleteCertificateError']);
        }
        // ensure the json data is a string
        if (data['previousProvisioningState'] && !(typeof data['previousProvisioningState'] === 'string' || data['previousProvisioningState'] instanceof String)) {
            throw new Error("Expected the field `previousProvisioningState` to be a primitive type in the JSON string but got " + data['previousProvisioningState']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['publicData'] && !(typeof data['publicData'] === 'string' || data['publicData'] instanceof String)) {
            throw new Error("Expected the field `publicData` to be a primitive type in the JSON string but got " + data['publicData']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['thumbprintAlgorithm'] && !(typeof data['thumbprintAlgorithm'] === 'string' || data['thumbprintAlgorithm'] instanceof String)) {
            throw new Error("Expected the field `thumbprintAlgorithm` to be a primitive type in the JSON string but got " + data['thumbprintAlgorithm']);
        }

        return true;
    }


}



/**
 * @member {module:model/DeleteCertificateError} deleteCertificateError
 */
CertificateProperties.prototype['deleteCertificateError'] = undefined;

/**
 * The previous provisioned state of the resource
 * @member {module:model/CertificateProperties.PreviousProvisioningStateEnum} previousProvisioningState
 */
CertificateProperties.prototype['previousProvisioningState'] = undefined;

/**
 * @member {Date} previousProvisioningStateTransitionTime
 */
CertificateProperties.prototype['previousProvisioningStateTransitionTime'] = undefined;

/**
 * @member {module:model/CertificateProperties.ProvisioningStateEnum} provisioningState
 */
CertificateProperties.prototype['provisioningState'] = undefined;

/**
 * @member {Date} provisioningStateTransitionTime
 */
CertificateProperties.prototype['provisioningStateTransitionTime'] = undefined;

/**
 * The public key of the certificate.
 * @member {String} publicData
 */
CertificateProperties.prototype['publicData'] = undefined;

/**
 * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
 * @member {module:model/CertificateProperties.FormatEnum} format
 */
CertificateProperties.prototype['format'] = undefined;

/**
 * This must match the thumbprint from the name.
 * @member {String} thumbprint
 */
CertificateProperties.prototype['thumbprint'] = undefined;

/**
 * This must match the first portion of the certificate name. Currently required to be 'SHA1'.
 * @member {String} thumbprintAlgorithm
 */
CertificateProperties.prototype['thumbprintAlgorithm'] = undefined;


// Implement CertificateBaseProperties interface:
/**
 * The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx.
 * @member {module:model/CertificateBaseProperties.FormatEnum} format
 */
CertificateBaseProperties.prototype['format'] = undefined;
/**
 * This must match the thumbprint from the name.
 * @member {String} thumbprint
 */
CertificateBaseProperties.prototype['thumbprint'] = undefined;
/**
 * This must match the first portion of the certificate name. Currently required to be 'SHA1'.
 * @member {String} thumbprintAlgorithm
 */
CertificateBaseProperties.prototype['thumbprintAlgorithm'] = undefined;



/**
 * Allowed values for the <code>previousProvisioningState</code> property.
 * @enum {String}
 * @readonly
 */
CertificateProperties['PreviousProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
CertificateProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
CertificateProperties['FormatEnum'] = {

    /**
     * value: "Pfx"
     * @const
     */
    "Pfx": "Pfx",

    /**
     * value: "Cer"
     * @const
     */
    "Cer": "Cer"
};



export default CertificateProperties;

