/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateReference model module.
 * @module model/CertificateReference
 * @version 2019-04-01
 */
class CertificateReference {
    /**
     * Constructs a new <code>CertificateReference</code>.
     * @alias module:model/CertificateReference
     * @param id {String} 
     */
    constructor(id) { 
        
        CertificateReference.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>CertificateReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateReference} obj Optional instance to populate.
     * @return {module:model/CertificateReference} The populated <code>CertificateReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateReference();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('storeLocation')) {
                obj['storeLocation'] = ApiClient.convertToType(data['storeLocation'], 'String');
            }
            if (data.hasOwnProperty('storeName')) {
                obj['storeName'] = ApiClient.convertToType(data['storeName'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['storeLocation'] && !(typeof data['storeLocation'] === 'string' || data['storeLocation'] instanceof String)) {
            throw new Error("Expected the field `storeLocation` to be a primitive type in the JSON string but got " + data['storeLocation']);
        }
        // ensure the json data is a string
        if (data['storeName'] && !(typeof data['storeName'] === 'string' || data['storeName'] instanceof String)) {
            throw new Error("Expected the field `storeName` to be a primitive type in the JSON string but got " + data['storeName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['visibility'])) {
            throw new Error("Expected the field `visibility` to be an array in the JSON data but got " + data['visibility']);
        }

        return true;
    }


}

CertificateReference.RequiredProperties = ["id"];

/**
 * @member {String} id
 */
CertificateReference.prototype['id'] = undefined;

/**
 * The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
 * @member {module:model/CertificateReference.StoreLocationEnum} storeLocation
 */
CertificateReference.prototype['storeLocation'] = undefined;

/**
 * This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My.
 * @member {String} storeName
 */
CertificateReference.prototype['storeName'] = undefined;

/**
 * @member {Array.<module:model/CertificateReference.VisibilityEnum>} visibility
 */
CertificateReference.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>storeLocation</code> property.
 * @enum {String}
 * @readonly
 */
CertificateReference['StoreLocationEnum'] = {

    /**
     * value: "CurrentUser"
     * @const
     */
    "CurrentUser": "CurrentUser",

    /**
     * value: "LocalMachine"
     * @const
     */
    "LocalMachine": "LocalMachine"
};


/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
CertificateReference['VisibilityEnum'] = {

    /**
     * value: "StartTask"
     * @const
     */
    "StartTask": "StartTask",

    /**
     * value: "Task"
     * @const
     */
    "Task": "Task",

    /**
     * value: "RemoteUser"
     * @const
     */
    "RemoteUser": "RemoteUser"
};



export default CertificateReference;

