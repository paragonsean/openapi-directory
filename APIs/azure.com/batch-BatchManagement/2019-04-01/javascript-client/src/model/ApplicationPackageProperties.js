/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplicationPackageProperties model module.
 * @module model/ApplicationPackageProperties
 * @version 2019-04-01
 */
class ApplicationPackageProperties {
    /**
     * Constructs a new <code>ApplicationPackageProperties</code>.
     * Properties of an application package
     * @alias module:model/ApplicationPackageProperties
     */
    constructor() { 
        
        ApplicationPackageProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationPackageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationPackageProperties} obj Optional instance to populate.
     * @return {module:model/ApplicationPackageProperties} The populated <code>ApplicationPackageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationPackageProperties();

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('lastActivationTime')) {
                obj['lastActivationTime'] = ApiClient.convertToType(data['lastActivationTime'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('storageUrl')) {
                obj['storageUrl'] = ApiClient.convertToType(data['storageUrl'], 'String');
            }
            if (data.hasOwnProperty('storageUrlExpiry')) {
                obj['storageUrlExpiry'] = ApiClient.convertToType(data['storageUrlExpiry'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationPackageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationPackageProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['storageUrl'] && !(typeof data['storageUrl'] === 'string' || data['storageUrl'] instanceof String)) {
            throw new Error("Expected the field `storageUrl` to be a primitive type in the JSON string but got " + data['storageUrl']);
        }

        return true;
    }


}



/**
 * The format of the application package, if the package is active.
 * @member {String} format
 */
ApplicationPackageProperties.prototype['format'] = undefined;

/**
 * The time at which the package was last activated, if the package is active.
 * @member {Date} lastActivationTime
 */
ApplicationPackageProperties.prototype['lastActivationTime'] = undefined;

/**
 * The current state of the application package.
 * @member {module:model/ApplicationPackageProperties.StateEnum} state
 */
ApplicationPackageProperties.prototype['state'] = undefined;

/**
 * The URL for the application package in Azure Storage.
 * @member {String} storageUrl
 */
ApplicationPackageProperties.prototype['storageUrl'] = undefined;

/**
 * The UTC time at which the Azure Storage URL will expire.
 * @member {Date} storageUrlExpiry
 */
ApplicationPackageProperties.prototype['storageUrlExpiry'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ApplicationPackageProperties['StateEnum'] = {

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active"
};



export default ApplicationPackageProperties;

