/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerConfiguration from './ContainerConfiguration';
import DataDisk from './DataDisk';
import ImageReference from './ImageReference';
import WindowsConfiguration from './WindowsConfiguration';

/**
 * The VirtualMachineConfiguration model module.
 * @module model/VirtualMachineConfiguration
 * @version 2019-04-01
 */
class VirtualMachineConfiguration {
    /**
     * Constructs a new <code>VirtualMachineConfiguration</code>.
     * @alias module:model/VirtualMachineConfiguration
     * @param imageReference {module:model/ImageReference} 
     * @param nodeAgentSkuId {String} The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
     */
    constructor(imageReference, nodeAgentSkuId) { 
        
        VirtualMachineConfiguration.initialize(this, imageReference, nodeAgentSkuId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageReference, nodeAgentSkuId) { 
        obj['imageReference'] = imageReference;
        obj['nodeAgentSkuId'] = nodeAgentSkuId;
    }

    /**
     * Constructs a <code>VirtualMachineConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineConfiguration} obj Optional instance to populate.
     * @return {module:model/VirtualMachineConfiguration} The populated <code>VirtualMachineConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineConfiguration();

            if (data.hasOwnProperty('containerConfiguration')) {
                obj['containerConfiguration'] = ContainerConfiguration.constructFromObject(data['containerConfiguration']);
            }
            if (data.hasOwnProperty('dataDisks')) {
                obj['dataDisks'] = ApiClient.convertToType(data['dataDisks'], [DataDisk]);
            }
            if (data.hasOwnProperty('imageReference')) {
                obj['imageReference'] = ImageReference.constructFromObject(data['imageReference']);
            }
            if (data.hasOwnProperty('licenseType')) {
                obj['licenseType'] = ApiClient.convertToType(data['licenseType'], 'String');
            }
            if (data.hasOwnProperty('nodeAgentSkuId')) {
                obj['nodeAgentSkuId'] = ApiClient.convertToType(data['nodeAgentSkuId'], 'String');
            }
            if (data.hasOwnProperty('windowsConfiguration')) {
                obj['windowsConfiguration'] = WindowsConfiguration.constructFromObject(data['windowsConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualMachineConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `containerConfiguration`
        if (data['containerConfiguration']) { // data not null
          ContainerConfiguration.validateJSON(data['containerConfiguration']);
        }
        if (data['dataDisks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dataDisks'])) {
                throw new Error("Expected the field `dataDisks` to be an array in the JSON data but got " + data['dataDisks']);
            }
            // validate the optional field `dataDisks` (array)
            for (const item of data['dataDisks']) {
                DataDisk.validateJSON(item);
            };
        }
        // validate the optional field `imageReference`
        if (data['imageReference']) { // data not null
          ImageReference.validateJSON(data['imageReference']);
        }
        // ensure the json data is a string
        if (data['licenseType'] && !(typeof data['licenseType'] === 'string' || data['licenseType'] instanceof String)) {
            throw new Error("Expected the field `licenseType` to be a primitive type in the JSON string but got " + data['licenseType']);
        }
        // ensure the json data is a string
        if (data['nodeAgentSkuId'] && !(typeof data['nodeAgentSkuId'] === 'string' || data['nodeAgentSkuId'] instanceof String)) {
            throw new Error("Expected the field `nodeAgentSkuId` to be a primitive type in the JSON string but got " + data['nodeAgentSkuId']);
        }
        // validate the optional field `windowsConfiguration`
        if (data['windowsConfiguration']) { // data not null
          WindowsConfiguration.validateJSON(data['windowsConfiguration']);
        }

        return true;
    }


}

VirtualMachineConfiguration.RequiredProperties = ["imageReference", "nodeAgentSkuId"];

/**
 * @member {module:model/ContainerConfiguration} containerConfiguration
 */
VirtualMachineConfiguration.prototype['containerConfiguration'] = undefined;

/**
 * This property must be specified if the compute nodes in the pool need to have empty data disks attached to them.
 * @member {Array.<module:model/DataDisk>} dataDisks
 */
VirtualMachineConfiguration.prototype['dataDisks'] = undefined;

/**
 * @member {module:model/ImageReference} imageReference
 */
VirtualMachineConfiguration.prototype['imageReference'] = undefined;

/**
 * This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:   Windows_Server - The on-premises license is for Windows Server.  Windows_Client - The on-premises license is for Windows Client. 
 * @member {String} licenseType
 */
VirtualMachineConfiguration.prototype['licenseType'] = undefined;

/**
 * The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the 'List supported node agent SKUs' operation.
 * @member {String} nodeAgentSkuId
 */
VirtualMachineConfiguration.prototype['nodeAgentSkuId'] = undefined;

/**
 * @member {module:model/WindowsConfiguration} windowsConfiguration
 */
VirtualMachineConfiguration.prototype['windowsConfiguration'] = undefined;






export default VirtualMachineConfiguration;

