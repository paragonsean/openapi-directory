/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerRegistry from './ContainerRegistry';

/**
 * The TaskContainerSettings model module.
 * @module model/TaskContainerSettings
 * @version 2019-04-01
 */
class TaskContainerSettings {
    /**
     * Constructs a new <code>TaskContainerSettings</code>.
     * @alias module:model/TaskContainerSettings
     * @param imageName {String} This is the full image reference, as would be specified to \"docker pull\". If no tag is provided as part of the image name, the tag \":latest\" is used as a default.
     */
    constructor(imageName) { 
        
        TaskContainerSettings.initialize(this, imageName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageName) { 
        obj['imageName'] = imageName;
    }

    /**
     * Constructs a <code>TaskContainerSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaskContainerSettings} obj Optional instance to populate.
     * @return {module:model/TaskContainerSettings} The populated <code>TaskContainerSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaskContainerSettings();

            if (data.hasOwnProperty('containerRunOptions')) {
                obj['containerRunOptions'] = ApiClient.convertToType(data['containerRunOptions'], 'String');
            }
            if (data.hasOwnProperty('imageName')) {
                obj['imageName'] = ApiClient.convertToType(data['imageName'], 'String');
            }
            if (data.hasOwnProperty('registry')) {
                obj['registry'] = ContainerRegistry.constructFromObject(data['registry']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaskContainerSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaskContainerSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaskContainerSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['containerRunOptions'] && !(typeof data['containerRunOptions'] === 'string' || data['containerRunOptions'] instanceof String)) {
            throw new Error("Expected the field `containerRunOptions` to be a primitive type in the JSON string but got " + data['containerRunOptions']);
        }
        // ensure the json data is a string
        if (data['imageName'] && !(typeof data['imageName'] === 'string' || data['imageName'] instanceof String)) {
            throw new Error("Expected the field `imageName` to be a primitive type in the JSON string but got " + data['imageName']);
        }
        // validate the optional field `registry`
        if (data['registry']) { // data not null
          ContainerRegistry.validateJSON(data['registry']);
        }

        return true;
    }


}

TaskContainerSettings.RequiredProperties = ["imageName"];

/**
 * These additional options are supplied as arguments to the \"docker create\" command, in addition to those controlled by the Batch Service.
 * @member {String} containerRunOptions
 */
TaskContainerSettings.prototype['containerRunOptions'] = undefined;

/**
 * This is the full image reference, as would be specified to \"docker pull\". If no tag is provided as part of the image name, the tag \":latest\" is used as a default.
 * @member {String} imageName
 */
TaskContainerSettings.prototype['imageName'] = undefined;

/**
 * @member {module:model/ContainerRegistry} registry
 */
TaskContainerSettings.prototype['registry'] = undefined;






export default TaskContainerSettings;

