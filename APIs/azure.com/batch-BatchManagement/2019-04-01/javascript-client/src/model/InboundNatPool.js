/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkSecurityGroupRule from './NetworkSecurityGroupRule';

/**
 * The InboundNatPool model module.
 * @module model/InboundNatPool
 * @version 2019-04-01
 */
class InboundNatPool {
    /**
     * Constructs a new <code>InboundNatPool</code>.
     * @alias module:model/InboundNatPool
     * @param backendPort {Number} This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
     * @param frontendPortRangeEnd {Number} Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
     * @param frontendPortRangeStart {Number} Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
     * @param name {String} The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
     * @param protocol {module:model/InboundNatPool.ProtocolEnum} 
     */
    constructor(backendPort, frontendPortRangeEnd, frontendPortRangeStart, name, protocol) { 
        
        InboundNatPool.initialize(this, backendPort, frontendPortRangeEnd, frontendPortRangeStart, name, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backendPort, frontendPortRangeEnd, frontendPortRangeStart, name, protocol) { 
        obj['backendPort'] = backendPort;
        obj['frontendPortRangeEnd'] = frontendPortRangeEnd;
        obj['frontendPortRangeStart'] = frontendPortRangeStart;
        obj['name'] = name;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>InboundNatPool</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboundNatPool} obj Optional instance to populate.
     * @return {module:model/InboundNatPool} The populated <code>InboundNatPool</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboundNatPool();

            if (data.hasOwnProperty('backendPort')) {
                obj['backendPort'] = ApiClient.convertToType(data['backendPort'], 'Number');
            }
            if (data.hasOwnProperty('frontendPortRangeEnd')) {
                obj['frontendPortRangeEnd'] = ApiClient.convertToType(data['frontendPortRangeEnd'], 'Number');
            }
            if (data.hasOwnProperty('frontendPortRangeStart')) {
                obj['frontendPortRangeStart'] = ApiClient.convertToType(data['frontendPortRangeStart'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkSecurityGroupRules')) {
                obj['networkSecurityGroupRules'] = ApiClient.convertToType(data['networkSecurityGroupRules'], [NetworkSecurityGroupRule]);
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboundNatPool</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboundNatPool</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InboundNatPool.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['networkSecurityGroupRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkSecurityGroupRules'])) {
                throw new Error("Expected the field `networkSecurityGroupRules` to be an array in the JSON data but got " + data['networkSecurityGroupRules']);
            }
            // validate the optional field `networkSecurityGroupRules` (array)
            for (const item of data['networkSecurityGroupRules']) {
                NetworkSecurityGroupRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}

InboundNatPool.RequiredProperties = ["backendPort", "frontendPortRangeEnd", "frontendPortRangeStart", "name", "protocol"];

/**
 * This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400.
 * @member {Number} backendPort
 */
InboundNatPool.prototype['backendPort'] = undefined;

/**
 * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
 * @member {Number} frontendPortRangeEnd
 */
InboundNatPool.prototype['frontendPortRangeEnd'] = undefined;

/**
 * Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400.
 * @member {Number} frontendPortRangeStart
 */
InboundNatPool.prototype['frontendPortRangeStart'] = undefined;

/**
 * The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400.
 * @member {String} name
 */
InboundNatPool.prototype['name'] = undefined;

/**
 * The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400.
 * @member {Array.<module:model/NetworkSecurityGroupRule>} networkSecurityGroupRules
 */
InboundNatPool.prototype['networkSecurityGroupRules'] = undefined;

/**
 * @member {module:model/InboundNatPool.ProtocolEnum} protocol
 */
InboundNatPool.prototype['protocol'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
InboundNatPool['ProtocolEnum'] = {

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "UDP"
     * @const
     */
    "UDP": "UDP"
};



export default InboundNatPool;

