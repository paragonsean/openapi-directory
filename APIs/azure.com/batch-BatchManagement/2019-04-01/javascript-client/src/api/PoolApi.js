/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import ListPoolsResult from '../model/ListPoolsResult';
import Pool from '../model/Pool';

/**
* Pool service.
* @module api/PoolApi
* @version 2019-04-01
*/
export default class PoolApi {

    /**
    * Constructs a new PoolApi. 
    * @alias module:api/PoolApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the poolCreate operation.
     * @callback module:api/PoolApi~poolCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new pool inside the specified account.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} poolName The pool name. This must be unique within the account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:model/Pool} parameters Additional parameters for pool creation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The entity state (ETag) version of the pool to update. A value of \"*\" can be used to apply the operation only if the pool already exists. If omitted, this operation will always be applied.
     * @param {String} [ifNoneMatch] Set to '*' to allow a new pool to be created, but to prevent updating an existing pool. Other values will be ignored.
     * @param {module:api/PoolApi~poolCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    poolCreate(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling poolCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling poolCreate");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling poolCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling poolCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling poolCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolDelete operation.
     * @callback module:api/PoolApi~poolDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified pool.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} poolName The pool name. This must be unique within the account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:api/PoolApi~poolDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    poolDelete(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling poolDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling poolDelete");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling poolDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling poolDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolDisableAutoScale operation.
     * @callback module:api/PoolApi~poolDisableAutoScaleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables automatic scaling for a pool.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} poolName The pool name. This must be unique within the account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:api/PoolApi~poolDisableAutoScaleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    poolDisableAutoScale(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling poolDisableAutoScale");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling poolDisableAutoScale");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling poolDisableAutoScale");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolDisableAutoScale");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling poolDisableAutoScale");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/disableAutoScale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolGet operation.
     * @callback module:api/PoolApi~poolGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified pool.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} poolName The pool name. This must be unique within the account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:api/PoolApi~poolGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    poolGet(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling poolGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling poolGet");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling poolGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling poolGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolListByBatchAccount operation.
     * @callback module:api/PoolApi~poolListByBatchAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPoolsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the pools in the specified account.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] The maximum number of items to return in the response.
     * @param {String} [select] Comma separated list of properties that should be returned. e.g. \"properties/provisioningState\". Only top level properties under properties/ are valid for selection.
     * @param {String} [filter] OData filter expression. Valid properties for filtering are:   name  properties/allocationState  properties/allocationStateTransitionTime  properties/creationTime  properties/provisioningState  properties/provisioningStateTransitionTime  properties/lastModified  properties/vmSize  properties/interNodeCommunication  properties/scaleSettings/autoScale  properties/scaleSettings/fixedScale
     * @param {module:api/PoolApi~poolListByBatchAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPoolsResult}
     */
    poolListByBatchAccount(resourceGroupName, accountName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling poolListByBatchAccount");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling poolListByBatchAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolListByBatchAccount");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling poolListByBatchAccount");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        '$select': opts['select'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPoolsResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolStopResize operation.
     * @callback module:api/PoolApi~poolStopResizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an ongoing resize operation on the pool.
     * This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} poolName The pool name. This must be unique within the account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:api/PoolApi~poolStopResizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    poolStopResize(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling poolStopResize");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling poolStopResize");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling poolStopResize");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolStopResize");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling poolStopResize");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}/stopResize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the poolUpdate operation.
     * @callback module:api/PoolApi~poolUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of an existing pool.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} poolName The pool name. This must be unique within the account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:model/Pool} parameters Pool properties that should be updated. Properties that are supplied will be updated, any property not supplied will be unchanged.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The entity state (ETag) version of the pool to update. This value can be omitted or set to \"*\" to apply the operation unconditionally.
     * @param {module:api/PoolApi~poolUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pool}
     */
    poolUpdate(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling poolUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling poolUpdate");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling poolUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling poolUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling poolUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling poolUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/pools/{poolName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
