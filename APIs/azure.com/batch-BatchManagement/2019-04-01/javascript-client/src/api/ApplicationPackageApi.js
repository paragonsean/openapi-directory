/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActivateApplicationPackageParameters from '../model/ActivateApplicationPackageParameters';
import ApplicationPackage from '../model/ApplicationPackage';
import CloudError from '../model/CloudError';
import ListApplicationPackagesResult from '../model/ListApplicationPackagesResult';

/**
* ApplicationPackage service.
* @module api/ApplicationPackageApi
* @version 2019-04-01
*/
export default class ApplicationPackageApi {

    /**
    * Constructs a new ApplicationPackageApi. 
    * @alias module:api/ApplicationPackageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applicationPackageActivate operation.
     * @callback module:api/ApplicationPackageApi~applicationPackageActivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationPackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates the specified application package.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} applicationName The name of the application. This must be unique within the account.
     * @param {String} versionName The version of the application.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:model/ActivateApplicationPackageParameters} parameters The parameters for the request.
     * @param {module:api/ApplicationPackageApi~applicationPackageActivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationPackage}
     */
    applicationPackageActivate(resourceGroupName, accountName, applicationName, versionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applicationPackageActivate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling applicationPackageActivate");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationPackageActivate");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling applicationPackageActivate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationPackageActivate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applicationPackageActivate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling applicationPackageActivate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'applicationName': applicationName,
        'versionName': versionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationPackage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationPackageCreate operation.
     * @callback module:api/ApplicationPackageApi~applicationPackageCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationPackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application package record.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} applicationName The name of the application. This must be unique within the account.
     * @param {String} versionName The version of the application.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {Object} opts Optional parameters
     * @param {module:model/ApplicationPackage} [parameters] The parameters for the request.
     * @param {module:api/ApplicationPackageApi~applicationPackageCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationPackage}
     */
    applicationPackageCreate(resourceGroupName, accountName, applicationName, versionName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['parameters'];
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applicationPackageCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling applicationPackageCreate");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationPackageCreate");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling applicationPackageCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationPackageCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applicationPackageCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'applicationName': applicationName,
        'versionName': versionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationPackage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationPackageDelete operation.
     * @callback module:api/ApplicationPackageApi~applicationPackageDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an application package record and its associated binary file.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} applicationName The name of the application. This must be unique within the account.
     * @param {String} versionName The version of the application.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:api/ApplicationPackageApi~applicationPackageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applicationPackageDelete(resourceGroupName, accountName, applicationName, versionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applicationPackageDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling applicationPackageDelete");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationPackageDelete");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling applicationPackageDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationPackageDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applicationPackageDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'applicationName': applicationName,
        'versionName': versionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationPackageGet operation.
     * @callback module:api/ApplicationPackageApi~applicationPackageGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationPackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified application package.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} applicationName The name of the application. This must be unique within the account.
     * @param {String} versionName The version of the application.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {module:api/ApplicationPackageApi~applicationPackageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationPackage}
     */
    applicationPackageGet(resourceGroupName, accountName, applicationName, versionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applicationPackageGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling applicationPackageGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationPackageGet");
      }
      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling applicationPackageGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationPackageGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applicationPackageGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'applicationName': applicationName,
        'versionName': versionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplicationPackage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions/{versionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationPackageList operation.
     * @callback module:api/ApplicationPackageApi~applicationPackageListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationPackagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the application packages in the specified application.
     * @param {String} resourceGroupName The name of the resource group that contains the Batch account.
     * @param {String} accountName The name of the Batch account.
     * @param {String} applicationName The name of the application. This must be unique within the account.
     * @param {String} apiVersion The API version to be used with the HTTP request.
     * @param {String} subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
     * @param {Object} opts Optional parameters
     * @param {Number} [maxresults] The maximum number of items to return in the response.
     * @param {module:api/ApplicationPackageApi~applicationPackageListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationPackagesResult}
     */
    applicationPackageList(resourceGroupName, accountName, applicationName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applicationPackageList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling applicationPackageList");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling applicationPackageList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applicationPackageList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applicationPackageList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'applicationName': applicationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'maxresults': opts['maxresults'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListApplicationPackagesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
