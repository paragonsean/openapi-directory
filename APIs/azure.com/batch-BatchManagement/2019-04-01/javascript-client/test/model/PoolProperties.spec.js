/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BatchManagement);
  }
}(this, function(expect, BatchManagement) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BatchManagement.PoolProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PoolProperties', function() {
    it('should create an instance of PoolProperties', function() {
      // uncomment below and update the code to test PoolProperties
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be.a(BatchManagement.PoolProperties);
    });

    it('should have the property allocationState (base name: "allocationState")', function() {
      // uncomment below and update the code to test the property allocationState
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property allocationStateTransitionTime (base name: "allocationStateTransitionTime")', function() {
      // uncomment below and update the code to test the property allocationStateTransitionTime
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property applicationLicenses (base name: "applicationLicenses")', function() {
      // uncomment below and update the code to test the property applicationLicenses
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property applicationPackages (base name: "applicationPackages")', function() {
      // uncomment below and update the code to test the property applicationPackages
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property autoScaleRun (base name: "autoScaleRun")', function() {
      // uncomment below and update the code to test the property autoScaleRun
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property certificates (base name: "certificates")', function() {
      // uncomment below and update the code to test the property certificates
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property currentDedicatedNodes (base name: "currentDedicatedNodes")', function() {
      // uncomment below and update the code to test the property currentDedicatedNodes
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property currentLowPriorityNodes (base name: "currentLowPriorityNodes")', function() {
      // uncomment below and update the code to test the property currentLowPriorityNodes
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property deploymentConfiguration (base name: "deploymentConfiguration")', function() {
      // uncomment below and update the code to test the property deploymentConfiguration
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property interNodeCommunication (base name: "interNodeCommunication")', function() {
      // uncomment below and update the code to test the property interNodeCommunication
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property lastModified (base name: "lastModified")', function() {
      // uncomment below and update the code to test the property lastModified
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property maxTasksPerNode (base name: "maxTasksPerNode")', function() {
      // uncomment below and update the code to test the property maxTasksPerNode
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property networkConfiguration (base name: "networkConfiguration")', function() {
      // uncomment below and update the code to test the property networkConfiguration
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningStateTransitionTime (base name: "provisioningStateTransitionTime")', function() {
      // uncomment below and update the code to test the property provisioningStateTransitionTime
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property resizeOperationStatus (base name: "resizeOperationStatus")', function() {
      // uncomment below and update the code to test the property resizeOperationStatus
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property scaleSettings (base name: "scaleSettings")', function() {
      // uncomment below and update the code to test the property scaleSettings
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property startTask (base name: "startTask")', function() {
      // uncomment below and update the code to test the property startTask
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property taskSchedulingPolicy (base name: "taskSchedulingPolicy")', function() {
      // uncomment below and update the code to test the property taskSchedulingPolicy
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property userAccounts (base name: "userAccounts")', function() {
      // uncomment below and update the code to test the property userAccounts
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

    it('should have the property vmSize (base name: "vmSize")', function() {
      // uncomment below and update the code to test the property vmSize
      //var instance = new BatchManagement.PoolProperties();
      //expect(instance).to.be();
    });

  });

}));
