/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMountConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMountConfiguration::OAIMountConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMountConfiguration::OAIMountConfiguration() {
    this->initializeModel();
}

OAIMountConfiguration::~OAIMountConfiguration() {}

void OAIMountConfiguration::initializeModel() {

    m_azure_blob_file_system_configuration_isSet = false;
    m_azure_blob_file_system_configuration_isValid = false;

    m_azure_file_share_configuration_isSet = false;
    m_azure_file_share_configuration_isValid = false;

    m_cifs_mount_configuration_isSet = false;
    m_cifs_mount_configuration_isValid = false;

    m_nfs_mount_configuration_isSet = false;
    m_nfs_mount_configuration_isValid = false;
}

void OAIMountConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMountConfiguration::fromJsonObject(QJsonObject json) {

    m_azure_blob_file_system_configuration_isValid = ::OpenAPI::fromJsonValue(m_azure_blob_file_system_configuration, json[QString("azureBlobFileSystemConfiguration")]);
    m_azure_blob_file_system_configuration_isSet = !json[QString("azureBlobFileSystemConfiguration")].isNull() && m_azure_blob_file_system_configuration_isValid;

    m_azure_file_share_configuration_isValid = ::OpenAPI::fromJsonValue(m_azure_file_share_configuration, json[QString("azureFileShareConfiguration")]);
    m_azure_file_share_configuration_isSet = !json[QString("azureFileShareConfiguration")].isNull() && m_azure_file_share_configuration_isValid;

    m_cifs_mount_configuration_isValid = ::OpenAPI::fromJsonValue(m_cifs_mount_configuration, json[QString("cifsMountConfiguration")]);
    m_cifs_mount_configuration_isSet = !json[QString("cifsMountConfiguration")].isNull() && m_cifs_mount_configuration_isValid;

    m_nfs_mount_configuration_isValid = ::OpenAPI::fromJsonValue(m_nfs_mount_configuration, json[QString("nfsMountConfiguration")]);
    m_nfs_mount_configuration_isSet = !json[QString("nfsMountConfiguration")].isNull() && m_nfs_mount_configuration_isValid;
}

QString OAIMountConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMountConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_blob_file_system_configuration.isSet()) {
        obj.insert(QString("azureBlobFileSystemConfiguration"), ::OpenAPI::toJsonValue(m_azure_blob_file_system_configuration));
    }
    if (m_azure_file_share_configuration.isSet()) {
        obj.insert(QString("azureFileShareConfiguration"), ::OpenAPI::toJsonValue(m_azure_file_share_configuration));
    }
    if (m_cifs_mount_configuration.isSet()) {
        obj.insert(QString("cifsMountConfiguration"), ::OpenAPI::toJsonValue(m_cifs_mount_configuration));
    }
    if (m_nfs_mount_configuration.isSet()) {
        obj.insert(QString("nfsMountConfiguration"), ::OpenAPI::toJsonValue(m_nfs_mount_configuration));
    }
    return obj;
}

OAIAzureBlobFileSystemConfiguration OAIMountConfiguration::getAzureBlobFileSystemConfiguration() const {
    return m_azure_blob_file_system_configuration;
}
void OAIMountConfiguration::setAzureBlobFileSystemConfiguration(const OAIAzureBlobFileSystemConfiguration &azure_blob_file_system_configuration) {
    m_azure_blob_file_system_configuration = azure_blob_file_system_configuration;
    m_azure_blob_file_system_configuration_isSet = true;
}

bool OAIMountConfiguration::is_azure_blob_file_system_configuration_Set() const{
    return m_azure_blob_file_system_configuration_isSet;
}

bool OAIMountConfiguration::is_azure_blob_file_system_configuration_Valid() const{
    return m_azure_blob_file_system_configuration_isValid;
}

OAIAzureFileShareConfiguration OAIMountConfiguration::getAzureFileShareConfiguration() const {
    return m_azure_file_share_configuration;
}
void OAIMountConfiguration::setAzureFileShareConfiguration(const OAIAzureFileShareConfiguration &azure_file_share_configuration) {
    m_azure_file_share_configuration = azure_file_share_configuration;
    m_azure_file_share_configuration_isSet = true;
}

bool OAIMountConfiguration::is_azure_file_share_configuration_Set() const{
    return m_azure_file_share_configuration_isSet;
}

bool OAIMountConfiguration::is_azure_file_share_configuration_Valid() const{
    return m_azure_file_share_configuration_isValid;
}

OAICIFSMountConfiguration OAIMountConfiguration::getCifsMountConfiguration() const {
    return m_cifs_mount_configuration;
}
void OAIMountConfiguration::setCifsMountConfiguration(const OAICIFSMountConfiguration &cifs_mount_configuration) {
    m_cifs_mount_configuration = cifs_mount_configuration;
    m_cifs_mount_configuration_isSet = true;
}

bool OAIMountConfiguration::is_cifs_mount_configuration_Set() const{
    return m_cifs_mount_configuration_isSet;
}

bool OAIMountConfiguration::is_cifs_mount_configuration_Valid() const{
    return m_cifs_mount_configuration_isValid;
}

OAINFSMountConfiguration OAIMountConfiguration::getNfsMountConfiguration() const {
    return m_nfs_mount_configuration;
}
void OAIMountConfiguration::setNfsMountConfiguration(const OAINFSMountConfiguration &nfs_mount_configuration) {
    m_nfs_mount_configuration = nfs_mount_configuration;
    m_nfs_mount_configuration_isSet = true;
}

bool OAIMountConfiguration::is_nfs_mount_configuration_Set() const{
    return m_nfs_mount_configuration_isSet;
}

bool OAIMountConfiguration::is_nfs_mount_configuration_Valid() const{
    return m_nfs_mount_configuration_isValid;
}

bool OAIMountConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_blob_file_system_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_file_share_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cifs_mount_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_mount_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMountConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
