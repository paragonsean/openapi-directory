/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPoolProperties.h
 *
 * Pool properties.
 */

#ifndef OAIPoolProperties_H
#define OAIPoolProperties_H

#include <QJsonObject>

#include "OAIApplicationPackageReference.h"
#include "OAIAutoScaleRun.h"
#include "OAICertificateReference.h"
#include "OAIDeploymentConfiguration.h"
#include "OAIMetadataItem.h"
#include "OAIMountConfiguration.h"
#include "OAINetworkConfiguration.h"
#include "OAIResizeOperationStatus.h"
#include "OAIScaleSettings.h"
#include "OAIStartTask.h"
#include "OAITaskSchedulingPolicy.h"
#include "OAIUserAccount.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationPackageReference;
class OAIAutoScaleRun;
class OAICertificateReference;
class OAIDeploymentConfiguration;
class OAIMetadataItem;
class OAIMountConfiguration;
class OAINetworkConfiguration;
class OAIResizeOperationStatus;
class OAIScaleSettings;
class OAIStartTask;
class OAITaskSchedulingPolicy;
class OAIUserAccount;

class OAIPoolProperties : public OAIObject {
public:
    OAIPoolProperties();
    OAIPoolProperties(QString json);
    ~OAIPoolProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllocationState() const;
    void setAllocationState(const QString &allocation_state);
    bool is_allocation_state_Set() const;
    bool is_allocation_state_Valid() const;

    QDateTime getAllocationStateTransitionTime() const;
    void setAllocationStateTransitionTime(const QDateTime &allocation_state_transition_time);
    bool is_allocation_state_transition_time_Set() const;
    bool is_allocation_state_transition_time_Valid() const;

    QList<QString> getApplicationLicenses() const;
    void setApplicationLicenses(const QList<QString> &application_licenses);
    bool is_application_licenses_Set() const;
    bool is_application_licenses_Valid() const;

    QList<OAIApplicationPackageReference> getApplicationPackages() const;
    void setApplicationPackages(const QList<OAIApplicationPackageReference> &application_packages);
    bool is_application_packages_Set() const;
    bool is_application_packages_Valid() const;

    OAIAutoScaleRun getAutoScaleRun() const;
    void setAutoScaleRun(const OAIAutoScaleRun &auto_scale_run);
    bool is_auto_scale_run_Set() const;
    bool is_auto_scale_run_Valid() const;

    QList<OAICertificateReference> getCertificates() const;
    void setCertificates(const QList<OAICertificateReference> &certificates);
    bool is_certificates_Set() const;
    bool is_certificates_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    qint32 getCurrentDedicatedNodes() const;
    void setCurrentDedicatedNodes(const qint32 &current_dedicated_nodes);
    bool is_current_dedicated_nodes_Set() const;
    bool is_current_dedicated_nodes_Valid() const;

    qint32 getCurrentLowPriorityNodes() const;
    void setCurrentLowPriorityNodes(const qint32 &current_low_priority_nodes);
    bool is_current_low_priority_nodes_Set() const;
    bool is_current_low_priority_nodes_Valid() const;

    OAIDeploymentConfiguration getDeploymentConfiguration() const;
    void setDeploymentConfiguration(const OAIDeploymentConfiguration &deployment_configuration);
    bool is_deployment_configuration_Set() const;
    bool is_deployment_configuration_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getInterNodeCommunication() const;
    void setInterNodeCommunication(const QString &inter_node_communication);
    bool is_inter_node_communication_Set() const;
    bool is_inter_node_communication_Valid() const;

    QDateTime getLastModified() const;
    void setLastModified(const QDateTime &last_modified);
    bool is_last_modified_Set() const;
    bool is_last_modified_Valid() const;

    qint32 getMaxTasksPerNode() const;
    void setMaxTasksPerNode(const qint32 &max_tasks_per_node);
    bool is_max_tasks_per_node_Set() const;
    bool is_max_tasks_per_node_Valid() const;

    QList<OAIMetadataItem> getMetadata() const;
    void setMetadata(const QList<OAIMetadataItem> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QList<OAIMountConfiguration> getMountConfiguration() const;
    void setMountConfiguration(const QList<OAIMountConfiguration> &mount_configuration);
    bool is_mount_configuration_Set() const;
    bool is_mount_configuration_Valid() const;

    OAINetworkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAINetworkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QDateTime getProvisioningStateTransitionTime() const;
    void setProvisioningStateTransitionTime(const QDateTime &provisioning_state_transition_time);
    bool is_provisioning_state_transition_time_Set() const;
    bool is_provisioning_state_transition_time_Valid() const;

    OAIResizeOperationStatus getResizeOperationStatus() const;
    void setResizeOperationStatus(const OAIResizeOperationStatus &resize_operation_status);
    bool is_resize_operation_status_Set() const;
    bool is_resize_operation_status_Valid() const;

    OAIScaleSettings getScaleSettings() const;
    void setScaleSettings(const OAIScaleSettings &scale_settings);
    bool is_scale_settings_Set() const;
    bool is_scale_settings_Valid() const;

    OAIStartTask getStartTask() const;
    void setStartTask(const OAIStartTask &start_task);
    bool is_start_task_Set() const;
    bool is_start_task_Valid() const;

    OAITaskSchedulingPolicy getTaskSchedulingPolicy() const;
    void setTaskSchedulingPolicy(const OAITaskSchedulingPolicy &task_scheduling_policy);
    bool is_task_scheduling_policy_Set() const;
    bool is_task_scheduling_policy_Valid() const;

    QList<OAIUserAccount> getUserAccounts() const;
    void setUserAccounts(const QList<OAIUserAccount> &user_accounts);
    bool is_user_accounts_Set() const;
    bool is_user_accounts_Valid() const;

    QString getVmSize() const;
    void setVmSize(const QString &vm_size);
    bool is_vm_size_Set() const;
    bool is_vm_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allocation_state;
    bool m_allocation_state_isSet;
    bool m_allocation_state_isValid;

    QDateTime m_allocation_state_transition_time;
    bool m_allocation_state_transition_time_isSet;
    bool m_allocation_state_transition_time_isValid;

    QList<QString> m_application_licenses;
    bool m_application_licenses_isSet;
    bool m_application_licenses_isValid;

    QList<OAIApplicationPackageReference> m_application_packages;
    bool m_application_packages_isSet;
    bool m_application_packages_isValid;

    OAIAutoScaleRun m_auto_scale_run;
    bool m_auto_scale_run_isSet;
    bool m_auto_scale_run_isValid;

    QList<OAICertificateReference> m_certificates;
    bool m_certificates_isSet;
    bool m_certificates_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    qint32 m_current_dedicated_nodes;
    bool m_current_dedicated_nodes_isSet;
    bool m_current_dedicated_nodes_isValid;

    qint32 m_current_low_priority_nodes;
    bool m_current_low_priority_nodes_isSet;
    bool m_current_low_priority_nodes_isValid;

    OAIDeploymentConfiguration m_deployment_configuration;
    bool m_deployment_configuration_isSet;
    bool m_deployment_configuration_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_inter_node_communication;
    bool m_inter_node_communication_isSet;
    bool m_inter_node_communication_isValid;

    QDateTime m_last_modified;
    bool m_last_modified_isSet;
    bool m_last_modified_isValid;

    qint32 m_max_tasks_per_node;
    bool m_max_tasks_per_node_isSet;
    bool m_max_tasks_per_node_isValid;

    QList<OAIMetadataItem> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QList<OAIMountConfiguration> m_mount_configuration;
    bool m_mount_configuration_isSet;
    bool m_mount_configuration_isValid;

    OAINetworkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QDateTime m_provisioning_state_transition_time;
    bool m_provisioning_state_transition_time_isSet;
    bool m_provisioning_state_transition_time_isValid;

    OAIResizeOperationStatus m_resize_operation_status;
    bool m_resize_operation_status_isSet;
    bool m_resize_operation_status_isValid;

    OAIScaleSettings m_scale_settings;
    bool m_scale_settings_isSet;
    bool m_scale_settings_isValid;

    OAIStartTask m_start_task;
    bool m_start_task_isSet;
    bool m_start_task_isValid;

    OAITaskSchedulingPolicy m_task_scheduling_policy;
    bool m_task_scheduling_policy_isSet;
    bool m_task_scheduling_policy_isValid;

    QList<OAIUserAccount> m_user_accounts;
    bool m_user_accounts_isSet;
    bool m_user_accounts_isValid;

    QString m_vm_size;
    bool m_vm_size_isSet;
    bool m_vm_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPoolProperties)

#endif // OAIPoolProperties_H
