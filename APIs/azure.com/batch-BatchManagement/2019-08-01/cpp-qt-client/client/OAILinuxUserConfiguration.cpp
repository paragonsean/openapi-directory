/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinuxUserConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinuxUserConfiguration::OAILinuxUserConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinuxUserConfiguration::OAILinuxUserConfiguration() {
    this->initializeModel();
}

OAILinuxUserConfiguration::~OAILinuxUserConfiguration() {}

void OAILinuxUserConfiguration::initializeModel() {

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_ssh_private_key_isSet = false;
    m_ssh_private_key_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAILinuxUserConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinuxUserConfiguration::fromJsonObject(QJsonObject json) {

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_ssh_private_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_private_key, json[QString("sshPrivateKey")]);
    m_ssh_private_key_isSet = !json[QString("sshPrivateKey")].isNull() && m_ssh_private_key_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAILinuxUserConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinuxUserConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_ssh_private_key_isSet) {
        obj.insert(QString("sshPrivateKey"), ::OpenAPI::toJsonValue(m_ssh_private_key));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

qint32 OAILinuxUserConfiguration::getGid() const {
    return m_gid;
}
void OAILinuxUserConfiguration::setGid(const qint32 &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAILinuxUserConfiguration::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAILinuxUserConfiguration::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAILinuxUserConfiguration::getSshPrivateKey() const {
    return m_ssh_private_key;
}
void OAILinuxUserConfiguration::setSshPrivateKey(const QString &ssh_private_key) {
    m_ssh_private_key = ssh_private_key;
    m_ssh_private_key_isSet = true;
}

bool OAILinuxUserConfiguration::is_ssh_private_key_Set() const{
    return m_ssh_private_key_isSet;
}

bool OAILinuxUserConfiguration::is_ssh_private_key_Valid() const{
    return m_ssh_private_key_isValid;
}

qint32 OAILinuxUserConfiguration::getUid() const {
    return m_uid;
}
void OAILinuxUserConfiguration::setUid(const qint32 &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAILinuxUserConfiguration::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAILinuxUserConfiguration::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAILinuxUserConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinuxUserConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
