/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICachingType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICachingType::OAICachingType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICachingType::OAICachingType() {
    this->initializeModel();
}

OAICachingType::~OAICachingType() {}

void OAICachingType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAICachingType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAICachingType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAICachingType::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReadOnly", Qt::CaseInsensitive) == 0) {
        m_value = eOAICachingType::READONLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReadWrite", Qt::CaseInsensitive) == 0) {
        m_value = eOAICachingType::READWRITE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAICachingType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAICachingType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAICachingType::NONE:
            val = "None";
            break;
        case eOAICachingType::READONLY:
            val = "ReadOnly";
            break;
        case eOAICachingType::READWRITE:
            val = "ReadWrite";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAICachingType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAICachingType::eOAICachingType OAICachingType::getValue() const {
    return m_value;
}

void OAICachingType::setValue(const OAICachingType::eOAICachingType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAICachingType::isSet() const {
    
    return m_value_isSet;
}

bool OAICachingType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
