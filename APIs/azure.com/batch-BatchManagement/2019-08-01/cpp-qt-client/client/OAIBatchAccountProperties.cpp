/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAccountProperties::OAIBatchAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAccountProperties::OAIBatchAccountProperties() {
    this->initializeModel();
}

OAIBatchAccountProperties::~OAIBatchAccountProperties() {}

void OAIBatchAccountProperties::initializeModel() {

    m_account_endpoint_isSet = false;
    m_account_endpoint_isValid = false;

    m_active_job_and_job_schedule_quota_isSet = false;
    m_active_job_and_job_schedule_quota_isValid = false;

    m_auto_storage_isSet = false;
    m_auto_storage_isValid = false;

    m_dedicated_core_quota_isSet = false;
    m_dedicated_core_quota_isValid = false;

    m_dedicated_core_quota_per_vm_family_isSet = false;
    m_dedicated_core_quota_per_vm_family_isValid = false;

    m_dedicated_core_quota_per_vm_family_enforced_isSet = false;
    m_dedicated_core_quota_per_vm_family_enforced_isValid = false;

    m_key_vault_reference_isSet = false;
    m_key_vault_reference_isValid = false;

    m_low_priority_core_quota_isSet = false;
    m_low_priority_core_quota_isValid = false;

    m_pool_allocation_mode_isSet = false;
    m_pool_allocation_mode_isValid = false;

    m_pool_quota_isSet = false;
    m_pool_quota_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIBatchAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAccountProperties::fromJsonObject(QJsonObject json) {

    m_account_endpoint_isValid = ::OpenAPI::fromJsonValue(m_account_endpoint, json[QString("accountEndpoint")]);
    m_account_endpoint_isSet = !json[QString("accountEndpoint")].isNull() && m_account_endpoint_isValid;

    m_active_job_and_job_schedule_quota_isValid = ::OpenAPI::fromJsonValue(m_active_job_and_job_schedule_quota, json[QString("activeJobAndJobScheduleQuota")]);
    m_active_job_and_job_schedule_quota_isSet = !json[QString("activeJobAndJobScheduleQuota")].isNull() && m_active_job_and_job_schedule_quota_isValid;

    m_auto_storage_isValid = ::OpenAPI::fromJsonValue(m_auto_storage, json[QString("autoStorage")]);
    m_auto_storage_isSet = !json[QString("autoStorage")].isNull() && m_auto_storage_isValid;

    m_dedicated_core_quota_isValid = ::OpenAPI::fromJsonValue(m_dedicated_core_quota, json[QString("dedicatedCoreQuota")]);
    m_dedicated_core_quota_isSet = !json[QString("dedicatedCoreQuota")].isNull() && m_dedicated_core_quota_isValid;

    m_dedicated_core_quota_per_vm_family_isValid = ::OpenAPI::fromJsonValue(m_dedicated_core_quota_per_vm_family, json[QString("dedicatedCoreQuotaPerVMFamily")]);
    m_dedicated_core_quota_per_vm_family_isSet = !json[QString("dedicatedCoreQuotaPerVMFamily")].isNull() && m_dedicated_core_quota_per_vm_family_isValid;

    m_dedicated_core_quota_per_vm_family_enforced_isValid = ::OpenAPI::fromJsonValue(m_dedicated_core_quota_per_vm_family_enforced, json[QString("dedicatedCoreQuotaPerVMFamilyEnforced")]);
    m_dedicated_core_quota_per_vm_family_enforced_isSet = !json[QString("dedicatedCoreQuotaPerVMFamilyEnforced")].isNull() && m_dedicated_core_quota_per_vm_family_enforced_isValid;

    m_key_vault_reference_isValid = ::OpenAPI::fromJsonValue(m_key_vault_reference, json[QString("keyVaultReference")]);
    m_key_vault_reference_isSet = !json[QString("keyVaultReference")].isNull() && m_key_vault_reference_isValid;

    m_low_priority_core_quota_isValid = ::OpenAPI::fromJsonValue(m_low_priority_core_quota, json[QString("lowPriorityCoreQuota")]);
    m_low_priority_core_quota_isSet = !json[QString("lowPriorityCoreQuota")].isNull() && m_low_priority_core_quota_isValid;

    m_pool_allocation_mode_isValid = ::OpenAPI::fromJsonValue(m_pool_allocation_mode, json[QString("poolAllocationMode")]);
    m_pool_allocation_mode_isSet = !json[QString("poolAllocationMode")].isNull() && m_pool_allocation_mode_isValid;

    m_pool_quota_isValid = ::OpenAPI::fromJsonValue(m_pool_quota, json[QString("poolQuota")]);
    m_pool_quota_isSet = !json[QString("poolQuota")].isNull() && m_pool_quota_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIBatchAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_account_endpoint_isSet) {
        obj.insert(QString("accountEndpoint"), ::OpenAPI::toJsonValue(m_account_endpoint));
    }
    if (m_active_job_and_job_schedule_quota_isSet) {
        obj.insert(QString("activeJobAndJobScheduleQuota"), ::OpenAPI::toJsonValue(m_active_job_and_job_schedule_quota));
    }
    if (m_auto_storage.isSet()) {
        obj.insert(QString("autoStorage"), ::OpenAPI::toJsonValue(m_auto_storage));
    }
    if (m_dedicated_core_quota_isSet) {
        obj.insert(QString("dedicatedCoreQuota"), ::OpenAPI::toJsonValue(m_dedicated_core_quota));
    }
    if (m_dedicated_core_quota_per_vm_family.size() > 0) {
        obj.insert(QString("dedicatedCoreQuotaPerVMFamily"), ::OpenAPI::toJsonValue(m_dedicated_core_quota_per_vm_family));
    }
    if (m_dedicated_core_quota_per_vm_family_enforced_isSet) {
        obj.insert(QString("dedicatedCoreQuotaPerVMFamilyEnforced"), ::OpenAPI::toJsonValue(m_dedicated_core_quota_per_vm_family_enforced));
    }
    if (m_key_vault_reference.isSet()) {
        obj.insert(QString("keyVaultReference"), ::OpenAPI::toJsonValue(m_key_vault_reference));
    }
    if (m_low_priority_core_quota_isSet) {
        obj.insert(QString("lowPriorityCoreQuota"), ::OpenAPI::toJsonValue(m_low_priority_core_quota));
    }
    if (m_pool_allocation_mode.isSet()) {
        obj.insert(QString("poolAllocationMode"), ::OpenAPI::toJsonValue(m_pool_allocation_mode));
    }
    if (m_pool_quota_isSet) {
        obj.insert(QString("poolQuota"), ::OpenAPI::toJsonValue(m_pool_quota));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIBatchAccountProperties::getAccountEndpoint() const {
    return m_account_endpoint;
}
void OAIBatchAccountProperties::setAccountEndpoint(const QString &account_endpoint) {
    m_account_endpoint = account_endpoint;
    m_account_endpoint_isSet = true;
}

bool OAIBatchAccountProperties::is_account_endpoint_Set() const{
    return m_account_endpoint_isSet;
}

bool OAIBatchAccountProperties::is_account_endpoint_Valid() const{
    return m_account_endpoint_isValid;
}

qint32 OAIBatchAccountProperties::getActiveJobAndJobScheduleQuota() const {
    return m_active_job_and_job_schedule_quota;
}
void OAIBatchAccountProperties::setActiveJobAndJobScheduleQuota(const qint32 &active_job_and_job_schedule_quota) {
    m_active_job_and_job_schedule_quota = active_job_and_job_schedule_quota;
    m_active_job_and_job_schedule_quota_isSet = true;
}

bool OAIBatchAccountProperties::is_active_job_and_job_schedule_quota_Set() const{
    return m_active_job_and_job_schedule_quota_isSet;
}

bool OAIBatchAccountProperties::is_active_job_and_job_schedule_quota_Valid() const{
    return m_active_job_and_job_schedule_quota_isValid;
}

OAIAutoStorageProperties OAIBatchAccountProperties::getAutoStorage() const {
    return m_auto_storage;
}
void OAIBatchAccountProperties::setAutoStorage(const OAIAutoStorageProperties &auto_storage) {
    m_auto_storage = auto_storage;
    m_auto_storage_isSet = true;
}

bool OAIBatchAccountProperties::is_auto_storage_Set() const{
    return m_auto_storage_isSet;
}

bool OAIBatchAccountProperties::is_auto_storage_Valid() const{
    return m_auto_storage_isValid;
}

qint32 OAIBatchAccountProperties::getDedicatedCoreQuota() const {
    return m_dedicated_core_quota;
}
void OAIBatchAccountProperties::setDedicatedCoreQuota(const qint32 &dedicated_core_quota) {
    m_dedicated_core_quota = dedicated_core_quota;
    m_dedicated_core_quota_isSet = true;
}

bool OAIBatchAccountProperties::is_dedicated_core_quota_Set() const{
    return m_dedicated_core_quota_isSet;
}

bool OAIBatchAccountProperties::is_dedicated_core_quota_Valid() const{
    return m_dedicated_core_quota_isValid;
}

QList<OAIVirtualMachineFamilyCoreQuota> OAIBatchAccountProperties::getDedicatedCoreQuotaPerVmFamily() const {
    return m_dedicated_core_quota_per_vm_family;
}
void OAIBatchAccountProperties::setDedicatedCoreQuotaPerVmFamily(const QList<OAIVirtualMachineFamilyCoreQuota> &dedicated_core_quota_per_vm_family) {
    m_dedicated_core_quota_per_vm_family = dedicated_core_quota_per_vm_family;
    m_dedicated_core_quota_per_vm_family_isSet = true;
}

bool OAIBatchAccountProperties::is_dedicated_core_quota_per_vm_family_Set() const{
    return m_dedicated_core_quota_per_vm_family_isSet;
}

bool OAIBatchAccountProperties::is_dedicated_core_quota_per_vm_family_Valid() const{
    return m_dedicated_core_quota_per_vm_family_isValid;
}

bool OAIBatchAccountProperties::isDedicatedCoreQuotaPerVmFamilyEnforced() const {
    return m_dedicated_core_quota_per_vm_family_enforced;
}
void OAIBatchAccountProperties::setDedicatedCoreQuotaPerVmFamilyEnforced(const bool &dedicated_core_quota_per_vm_family_enforced) {
    m_dedicated_core_quota_per_vm_family_enforced = dedicated_core_quota_per_vm_family_enforced;
    m_dedicated_core_quota_per_vm_family_enforced_isSet = true;
}

bool OAIBatchAccountProperties::is_dedicated_core_quota_per_vm_family_enforced_Set() const{
    return m_dedicated_core_quota_per_vm_family_enforced_isSet;
}

bool OAIBatchAccountProperties::is_dedicated_core_quota_per_vm_family_enforced_Valid() const{
    return m_dedicated_core_quota_per_vm_family_enforced_isValid;
}

OAIKeyVaultReference OAIBatchAccountProperties::getKeyVaultReference() const {
    return m_key_vault_reference;
}
void OAIBatchAccountProperties::setKeyVaultReference(const OAIKeyVaultReference &key_vault_reference) {
    m_key_vault_reference = key_vault_reference;
    m_key_vault_reference_isSet = true;
}

bool OAIBatchAccountProperties::is_key_vault_reference_Set() const{
    return m_key_vault_reference_isSet;
}

bool OAIBatchAccountProperties::is_key_vault_reference_Valid() const{
    return m_key_vault_reference_isValid;
}

qint32 OAIBatchAccountProperties::getLowPriorityCoreQuota() const {
    return m_low_priority_core_quota;
}
void OAIBatchAccountProperties::setLowPriorityCoreQuota(const qint32 &low_priority_core_quota) {
    m_low_priority_core_quota = low_priority_core_quota;
    m_low_priority_core_quota_isSet = true;
}

bool OAIBatchAccountProperties::is_low_priority_core_quota_Set() const{
    return m_low_priority_core_quota_isSet;
}

bool OAIBatchAccountProperties::is_low_priority_core_quota_Valid() const{
    return m_low_priority_core_quota_isValid;
}

OAIPoolAllocationMode OAIBatchAccountProperties::getPoolAllocationMode() const {
    return m_pool_allocation_mode;
}
void OAIBatchAccountProperties::setPoolAllocationMode(const OAIPoolAllocationMode &pool_allocation_mode) {
    m_pool_allocation_mode = pool_allocation_mode;
    m_pool_allocation_mode_isSet = true;
}

bool OAIBatchAccountProperties::is_pool_allocation_mode_Set() const{
    return m_pool_allocation_mode_isSet;
}

bool OAIBatchAccountProperties::is_pool_allocation_mode_Valid() const{
    return m_pool_allocation_mode_isValid;
}

qint32 OAIBatchAccountProperties::getPoolQuota() const {
    return m_pool_quota;
}
void OAIBatchAccountProperties::setPoolQuota(const qint32 &pool_quota) {
    m_pool_quota = pool_quota;
    m_pool_quota_isSet = true;
}

bool OAIBatchAccountProperties::is_pool_quota_Set() const{
    return m_pool_quota_isSet;
}

bool OAIBatchAccountProperties::is_pool_quota_Valid() const{
    return m_pool_quota_isValid;
}

QString OAIBatchAccountProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIBatchAccountProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIBatchAccountProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIBatchAccountProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIBatchAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_job_and_job_schedule_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_storage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_core_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_core_quota_per_vm_family.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_core_quota_per_vm_family_enforced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_priority_core_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_allocation_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pool_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
