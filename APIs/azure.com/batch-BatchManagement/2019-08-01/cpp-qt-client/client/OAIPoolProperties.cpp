/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolProperties::OAIPoolProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolProperties::OAIPoolProperties() {
    this->initializeModel();
}

OAIPoolProperties::~OAIPoolProperties() {}

void OAIPoolProperties::initializeModel() {

    m_allocation_state_isSet = false;
    m_allocation_state_isValid = false;

    m_allocation_state_transition_time_isSet = false;
    m_allocation_state_transition_time_isValid = false;

    m_application_licenses_isSet = false;
    m_application_licenses_isValid = false;

    m_application_packages_isSet = false;
    m_application_packages_isValid = false;

    m_auto_scale_run_isSet = false;
    m_auto_scale_run_isValid = false;

    m_certificates_isSet = false;
    m_certificates_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_current_dedicated_nodes_isSet = false;
    m_current_dedicated_nodes_isValid = false;

    m_current_low_priority_nodes_isSet = false;
    m_current_low_priority_nodes_isValid = false;

    m_deployment_configuration_isSet = false;
    m_deployment_configuration_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_inter_node_communication_isSet = false;
    m_inter_node_communication_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_max_tasks_per_node_isSet = false;
    m_max_tasks_per_node_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mount_configuration_isSet = false;
    m_mount_configuration_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_provisioning_state_transition_time_isSet = false;
    m_provisioning_state_transition_time_isValid = false;

    m_resize_operation_status_isSet = false;
    m_resize_operation_status_isValid = false;

    m_scale_settings_isSet = false;
    m_scale_settings_isValid = false;

    m_start_task_isSet = false;
    m_start_task_isValid = false;

    m_task_scheduling_policy_isSet = false;
    m_task_scheduling_policy_isValid = false;

    m_user_accounts_isSet = false;
    m_user_accounts_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIPoolProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolProperties::fromJsonObject(QJsonObject json) {

    m_allocation_state_isValid = ::OpenAPI::fromJsonValue(m_allocation_state, json[QString("allocationState")]);
    m_allocation_state_isSet = !json[QString("allocationState")].isNull() && m_allocation_state_isValid;

    m_allocation_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_allocation_state_transition_time, json[QString("allocationStateTransitionTime")]);
    m_allocation_state_transition_time_isSet = !json[QString("allocationStateTransitionTime")].isNull() && m_allocation_state_transition_time_isValid;

    m_application_licenses_isValid = ::OpenAPI::fromJsonValue(m_application_licenses, json[QString("applicationLicenses")]);
    m_application_licenses_isSet = !json[QString("applicationLicenses")].isNull() && m_application_licenses_isValid;

    m_application_packages_isValid = ::OpenAPI::fromJsonValue(m_application_packages, json[QString("applicationPackages")]);
    m_application_packages_isSet = !json[QString("applicationPackages")].isNull() && m_application_packages_isValid;

    m_auto_scale_run_isValid = ::OpenAPI::fromJsonValue(m_auto_scale_run, json[QString("autoScaleRun")]);
    m_auto_scale_run_isSet = !json[QString("autoScaleRun")].isNull() && m_auto_scale_run_isValid;

    m_certificates_isValid = ::OpenAPI::fromJsonValue(m_certificates, json[QString("certificates")]);
    m_certificates_isSet = !json[QString("certificates")].isNull() && m_certificates_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_current_dedicated_nodes_isValid = ::OpenAPI::fromJsonValue(m_current_dedicated_nodes, json[QString("currentDedicatedNodes")]);
    m_current_dedicated_nodes_isSet = !json[QString("currentDedicatedNodes")].isNull() && m_current_dedicated_nodes_isValid;

    m_current_low_priority_nodes_isValid = ::OpenAPI::fromJsonValue(m_current_low_priority_nodes, json[QString("currentLowPriorityNodes")]);
    m_current_low_priority_nodes_isSet = !json[QString("currentLowPriorityNodes")].isNull() && m_current_low_priority_nodes_isValid;

    m_deployment_configuration_isValid = ::OpenAPI::fromJsonValue(m_deployment_configuration, json[QString("deploymentConfiguration")]);
    m_deployment_configuration_isSet = !json[QString("deploymentConfiguration")].isNull() && m_deployment_configuration_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_inter_node_communication_isValid = ::OpenAPI::fromJsonValue(m_inter_node_communication, json[QString("interNodeCommunication")]);
    m_inter_node_communication_isSet = !json[QString("interNodeCommunication")].isNull() && m_inter_node_communication_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_max_tasks_per_node_isValid = ::OpenAPI::fromJsonValue(m_max_tasks_per_node, json[QString("maxTasksPerNode")]);
    m_max_tasks_per_node_isSet = !json[QString("maxTasksPerNode")].isNull() && m_max_tasks_per_node_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mount_configuration_isValid = ::OpenAPI::fromJsonValue(m_mount_configuration, json[QString("mountConfiguration")]);
    m_mount_configuration_isSet = !json[QString("mountConfiguration")].isNull() && m_mount_configuration_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_provisioning_state_transition_time_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state_transition_time, json[QString("provisioningStateTransitionTime")]);
    m_provisioning_state_transition_time_isSet = !json[QString("provisioningStateTransitionTime")].isNull() && m_provisioning_state_transition_time_isValid;

    m_resize_operation_status_isValid = ::OpenAPI::fromJsonValue(m_resize_operation_status, json[QString("resizeOperationStatus")]);
    m_resize_operation_status_isSet = !json[QString("resizeOperationStatus")].isNull() && m_resize_operation_status_isValid;

    m_scale_settings_isValid = ::OpenAPI::fromJsonValue(m_scale_settings, json[QString("scaleSettings")]);
    m_scale_settings_isSet = !json[QString("scaleSettings")].isNull() && m_scale_settings_isValid;

    m_start_task_isValid = ::OpenAPI::fromJsonValue(m_start_task, json[QString("startTask")]);
    m_start_task_isSet = !json[QString("startTask")].isNull() && m_start_task_isValid;

    m_task_scheduling_policy_isValid = ::OpenAPI::fromJsonValue(m_task_scheduling_policy, json[QString("taskSchedulingPolicy")]);
    m_task_scheduling_policy_isSet = !json[QString("taskSchedulingPolicy")].isNull() && m_task_scheduling_policy_isValid;

    m_user_accounts_isValid = ::OpenAPI::fromJsonValue(m_user_accounts, json[QString("userAccounts")]);
    m_user_accounts_isSet = !json[QString("userAccounts")].isNull() && m_user_accounts_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIPoolProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_state_isSet) {
        obj.insert(QString("allocationState"), ::OpenAPI::toJsonValue(m_allocation_state));
    }
    if (m_allocation_state_transition_time_isSet) {
        obj.insert(QString("allocationStateTransitionTime"), ::OpenAPI::toJsonValue(m_allocation_state_transition_time));
    }
    if (m_application_licenses.size() > 0) {
        obj.insert(QString("applicationLicenses"), ::OpenAPI::toJsonValue(m_application_licenses));
    }
    if (m_application_packages.size() > 0) {
        obj.insert(QString("applicationPackages"), ::OpenAPI::toJsonValue(m_application_packages));
    }
    if (m_auto_scale_run.isSet()) {
        obj.insert(QString("autoScaleRun"), ::OpenAPI::toJsonValue(m_auto_scale_run));
    }
    if (m_certificates.size() > 0) {
        obj.insert(QString("certificates"), ::OpenAPI::toJsonValue(m_certificates));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_current_dedicated_nodes_isSet) {
        obj.insert(QString("currentDedicatedNodes"), ::OpenAPI::toJsonValue(m_current_dedicated_nodes));
    }
    if (m_current_low_priority_nodes_isSet) {
        obj.insert(QString("currentLowPriorityNodes"), ::OpenAPI::toJsonValue(m_current_low_priority_nodes));
    }
    if (m_deployment_configuration.isSet()) {
        obj.insert(QString("deploymentConfiguration"), ::OpenAPI::toJsonValue(m_deployment_configuration));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_inter_node_communication_isSet) {
        obj.insert(QString("interNodeCommunication"), ::OpenAPI::toJsonValue(m_inter_node_communication));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_max_tasks_per_node_isSet) {
        obj.insert(QString("maxTasksPerNode"), ::OpenAPI::toJsonValue(m_max_tasks_per_node));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mount_configuration.size() > 0) {
        obj.insert(QString("mountConfiguration"), ::OpenAPI::toJsonValue(m_mount_configuration));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_provisioning_state_transition_time_isSet) {
        obj.insert(QString("provisioningStateTransitionTime"), ::OpenAPI::toJsonValue(m_provisioning_state_transition_time));
    }
    if (m_resize_operation_status.isSet()) {
        obj.insert(QString("resizeOperationStatus"), ::OpenAPI::toJsonValue(m_resize_operation_status));
    }
    if (m_scale_settings.isSet()) {
        obj.insert(QString("scaleSettings"), ::OpenAPI::toJsonValue(m_scale_settings));
    }
    if (m_start_task.isSet()) {
        obj.insert(QString("startTask"), ::OpenAPI::toJsonValue(m_start_task));
    }
    if (m_task_scheduling_policy.isSet()) {
        obj.insert(QString("taskSchedulingPolicy"), ::OpenAPI::toJsonValue(m_task_scheduling_policy));
    }
    if (m_user_accounts.size() > 0) {
        obj.insert(QString("userAccounts"), ::OpenAPI::toJsonValue(m_user_accounts));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

QString OAIPoolProperties::getAllocationState() const {
    return m_allocation_state;
}
void OAIPoolProperties::setAllocationState(const QString &allocation_state) {
    m_allocation_state = allocation_state;
    m_allocation_state_isSet = true;
}

bool OAIPoolProperties::is_allocation_state_Set() const{
    return m_allocation_state_isSet;
}

bool OAIPoolProperties::is_allocation_state_Valid() const{
    return m_allocation_state_isValid;
}

QDateTime OAIPoolProperties::getAllocationStateTransitionTime() const {
    return m_allocation_state_transition_time;
}
void OAIPoolProperties::setAllocationStateTransitionTime(const QDateTime &allocation_state_transition_time) {
    m_allocation_state_transition_time = allocation_state_transition_time;
    m_allocation_state_transition_time_isSet = true;
}

bool OAIPoolProperties::is_allocation_state_transition_time_Set() const{
    return m_allocation_state_transition_time_isSet;
}

bool OAIPoolProperties::is_allocation_state_transition_time_Valid() const{
    return m_allocation_state_transition_time_isValid;
}

QList<QString> OAIPoolProperties::getApplicationLicenses() const {
    return m_application_licenses;
}
void OAIPoolProperties::setApplicationLicenses(const QList<QString> &application_licenses) {
    m_application_licenses = application_licenses;
    m_application_licenses_isSet = true;
}

bool OAIPoolProperties::is_application_licenses_Set() const{
    return m_application_licenses_isSet;
}

bool OAIPoolProperties::is_application_licenses_Valid() const{
    return m_application_licenses_isValid;
}

QList<OAIApplicationPackageReference> OAIPoolProperties::getApplicationPackages() const {
    return m_application_packages;
}
void OAIPoolProperties::setApplicationPackages(const QList<OAIApplicationPackageReference> &application_packages) {
    m_application_packages = application_packages;
    m_application_packages_isSet = true;
}

bool OAIPoolProperties::is_application_packages_Set() const{
    return m_application_packages_isSet;
}

bool OAIPoolProperties::is_application_packages_Valid() const{
    return m_application_packages_isValid;
}

OAIAutoScaleRun OAIPoolProperties::getAutoScaleRun() const {
    return m_auto_scale_run;
}
void OAIPoolProperties::setAutoScaleRun(const OAIAutoScaleRun &auto_scale_run) {
    m_auto_scale_run = auto_scale_run;
    m_auto_scale_run_isSet = true;
}

bool OAIPoolProperties::is_auto_scale_run_Set() const{
    return m_auto_scale_run_isSet;
}

bool OAIPoolProperties::is_auto_scale_run_Valid() const{
    return m_auto_scale_run_isValid;
}

QList<OAICertificateReference> OAIPoolProperties::getCertificates() const {
    return m_certificates;
}
void OAIPoolProperties::setCertificates(const QList<OAICertificateReference> &certificates) {
    m_certificates = certificates;
    m_certificates_isSet = true;
}

bool OAIPoolProperties::is_certificates_Set() const{
    return m_certificates_isSet;
}

bool OAIPoolProperties::is_certificates_Valid() const{
    return m_certificates_isValid;
}

QDateTime OAIPoolProperties::getCreationTime() const {
    return m_creation_time;
}
void OAIPoolProperties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIPoolProperties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIPoolProperties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

qint32 OAIPoolProperties::getCurrentDedicatedNodes() const {
    return m_current_dedicated_nodes;
}
void OAIPoolProperties::setCurrentDedicatedNodes(const qint32 &current_dedicated_nodes) {
    m_current_dedicated_nodes = current_dedicated_nodes;
    m_current_dedicated_nodes_isSet = true;
}

bool OAIPoolProperties::is_current_dedicated_nodes_Set() const{
    return m_current_dedicated_nodes_isSet;
}

bool OAIPoolProperties::is_current_dedicated_nodes_Valid() const{
    return m_current_dedicated_nodes_isValid;
}

qint32 OAIPoolProperties::getCurrentLowPriorityNodes() const {
    return m_current_low_priority_nodes;
}
void OAIPoolProperties::setCurrentLowPriorityNodes(const qint32 &current_low_priority_nodes) {
    m_current_low_priority_nodes = current_low_priority_nodes;
    m_current_low_priority_nodes_isSet = true;
}

bool OAIPoolProperties::is_current_low_priority_nodes_Set() const{
    return m_current_low_priority_nodes_isSet;
}

bool OAIPoolProperties::is_current_low_priority_nodes_Valid() const{
    return m_current_low_priority_nodes_isValid;
}

OAIDeploymentConfiguration OAIPoolProperties::getDeploymentConfiguration() const {
    return m_deployment_configuration;
}
void OAIPoolProperties::setDeploymentConfiguration(const OAIDeploymentConfiguration &deployment_configuration) {
    m_deployment_configuration = deployment_configuration;
    m_deployment_configuration_isSet = true;
}

bool OAIPoolProperties::is_deployment_configuration_Set() const{
    return m_deployment_configuration_isSet;
}

bool OAIPoolProperties::is_deployment_configuration_Valid() const{
    return m_deployment_configuration_isValid;
}

QString OAIPoolProperties::getDisplayName() const {
    return m_display_name;
}
void OAIPoolProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPoolProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPoolProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPoolProperties::getInterNodeCommunication() const {
    return m_inter_node_communication;
}
void OAIPoolProperties::setInterNodeCommunication(const QString &inter_node_communication) {
    m_inter_node_communication = inter_node_communication;
    m_inter_node_communication_isSet = true;
}

bool OAIPoolProperties::is_inter_node_communication_Set() const{
    return m_inter_node_communication_isSet;
}

bool OAIPoolProperties::is_inter_node_communication_Valid() const{
    return m_inter_node_communication_isValid;
}

QDateTime OAIPoolProperties::getLastModified() const {
    return m_last_modified;
}
void OAIPoolProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIPoolProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIPoolProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

qint32 OAIPoolProperties::getMaxTasksPerNode() const {
    return m_max_tasks_per_node;
}
void OAIPoolProperties::setMaxTasksPerNode(const qint32 &max_tasks_per_node) {
    m_max_tasks_per_node = max_tasks_per_node;
    m_max_tasks_per_node_isSet = true;
}

bool OAIPoolProperties::is_max_tasks_per_node_Set() const{
    return m_max_tasks_per_node_isSet;
}

bool OAIPoolProperties::is_max_tasks_per_node_Valid() const{
    return m_max_tasks_per_node_isValid;
}

QList<OAIMetadataItem> OAIPoolProperties::getMetadata() const {
    return m_metadata;
}
void OAIPoolProperties::setMetadata(const QList<OAIMetadataItem> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPoolProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPoolProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIMountConfiguration> OAIPoolProperties::getMountConfiguration() const {
    return m_mount_configuration;
}
void OAIPoolProperties::setMountConfiguration(const QList<OAIMountConfiguration> &mount_configuration) {
    m_mount_configuration = mount_configuration;
    m_mount_configuration_isSet = true;
}

bool OAIPoolProperties::is_mount_configuration_Set() const{
    return m_mount_configuration_isSet;
}

bool OAIPoolProperties::is_mount_configuration_Valid() const{
    return m_mount_configuration_isValid;
}

OAINetworkConfiguration OAIPoolProperties::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIPoolProperties::setNetworkConfiguration(const OAINetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIPoolProperties::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIPoolProperties::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

QString OAIPoolProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPoolProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPoolProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPoolProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAIPoolProperties::getProvisioningStateTransitionTime() const {
    return m_provisioning_state_transition_time;
}
void OAIPoolProperties::setProvisioningStateTransitionTime(const QDateTime &provisioning_state_transition_time) {
    m_provisioning_state_transition_time = provisioning_state_transition_time;
    m_provisioning_state_transition_time_isSet = true;
}

bool OAIPoolProperties::is_provisioning_state_transition_time_Set() const{
    return m_provisioning_state_transition_time_isSet;
}

bool OAIPoolProperties::is_provisioning_state_transition_time_Valid() const{
    return m_provisioning_state_transition_time_isValid;
}

OAIResizeOperationStatus OAIPoolProperties::getResizeOperationStatus() const {
    return m_resize_operation_status;
}
void OAIPoolProperties::setResizeOperationStatus(const OAIResizeOperationStatus &resize_operation_status) {
    m_resize_operation_status = resize_operation_status;
    m_resize_operation_status_isSet = true;
}

bool OAIPoolProperties::is_resize_operation_status_Set() const{
    return m_resize_operation_status_isSet;
}

bool OAIPoolProperties::is_resize_operation_status_Valid() const{
    return m_resize_operation_status_isValid;
}

OAIScaleSettings OAIPoolProperties::getScaleSettings() const {
    return m_scale_settings;
}
void OAIPoolProperties::setScaleSettings(const OAIScaleSettings &scale_settings) {
    m_scale_settings = scale_settings;
    m_scale_settings_isSet = true;
}

bool OAIPoolProperties::is_scale_settings_Set() const{
    return m_scale_settings_isSet;
}

bool OAIPoolProperties::is_scale_settings_Valid() const{
    return m_scale_settings_isValid;
}

OAIStartTask OAIPoolProperties::getStartTask() const {
    return m_start_task;
}
void OAIPoolProperties::setStartTask(const OAIStartTask &start_task) {
    m_start_task = start_task;
    m_start_task_isSet = true;
}

bool OAIPoolProperties::is_start_task_Set() const{
    return m_start_task_isSet;
}

bool OAIPoolProperties::is_start_task_Valid() const{
    return m_start_task_isValid;
}

OAITaskSchedulingPolicy OAIPoolProperties::getTaskSchedulingPolicy() const {
    return m_task_scheduling_policy;
}
void OAIPoolProperties::setTaskSchedulingPolicy(const OAITaskSchedulingPolicy &task_scheduling_policy) {
    m_task_scheduling_policy = task_scheduling_policy;
    m_task_scheduling_policy_isSet = true;
}

bool OAIPoolProperties::is_task_scheduling_policy_Set() const{
    return m_task_scheduling_policy_isSet;
}

bool OAIPoolProperties::is_task_scheduling_policy_Valid() const{
    return m_task_scheduling_policy_isValid;
}

QList<OAIUserAccount> OAIPoolProperties::getUserAccounts() const {
    return m_user_accounts;
}
void OAIPoolProperties::setUserAccounts(const QList<OAIUserAccount> &user_accounts) {
    m_user_accounts = user_accounts;
    m_user_accounts_isSet = true;
}

bool OAIPoolProperties::is_user_accounts_Set() const{
    return m_user_accounts_isSet;
}

bool OAIPoolProperties::is_user_accounts_Valid() const{
    return m_user_accounts_isValid;
}

QString OAIPoolProperties::getVmSize() const {
    return m_vm_size;
}
void OAIPoolProperties::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIPoolProperties::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIPoolProperties::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIPoolProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocation_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_packages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_scale_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_dedicated_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_low_priority_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inter_node_communication_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tasks_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_transition_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_operation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_task.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_scheduling_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
