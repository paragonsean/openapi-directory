/*
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AutoStorageProperties;
import org.openapitools.client.model.KeyVaultReference;
import org.openapitools.client.model.PoolAllocationMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account specific properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:43.002157-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchAccountProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_ENDPOINT = "accountEndpoint";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ENDPOINT)
  private String accountEndpoint;

  public static final String SERIALIZED_NAME_ACTIVE_JOB_AND_JOB_SCHEDULE_QUOTA = "activeJobAndJobScheduleQuota";
  @SerializedName(SERIALIZED_NAME_ACTIVE_JOB_AND_JOB_SCHEDULE_QUOTA)
  private Integer activeJobAndJobScheduleQuota;

  public static final String SERIALIZED_NAME_AUTO_STORAGE = "autoStorage";
  @SerializedName(SERIALIZED_NAME_AUTO_STORAGE)
  private AutoStorageProperties autoStorage;

  public static final String SERIALIZED_NAME_DEDICATED_CORE_QUOTA = "dedicatedCoreQuota";
  @SerializedName(SERIALIZED_NAME_DEDICATED_CORE_QUOTA)
  private Integer dedicatedCoreQuota;

  public static final String SERIALIZED_NAME_KEY_VAULT_REFERENCE = "keyVaultReference";
  @SerializedName(SERIALIZED_NAME_KEY_VAULT_REFERENCE)
  private KeyVaultReference keyVaultReference;

  public static final String SERIALIZED_NAME_LOW_PRIORITY_CORE_QUOTA = "lowPriorityCoreQuota";
  @SerializedName(SERIALIZED_NAME_LOW_PRIORITY_CORE_QUOTA)
  private Integer lowPriorityCoreQuota;

  public static final String SERIALIZED_NAME_POOL_ALLOCATION_MODE = "poolAllocationMode";
  @SerializedName(SERIALIZED_NAME_POOL_ALLOCATION_MODE)
  private PoolAllocationMode poolAllocationMode;

  public static final String SERIALIZED_NAME_POOL_QUOTA = "poolQuota";
  @SerializedName(SERIALIZED_NAME_POOL_QUOTA)
  private Integer poolQuota;

  /**
   * The provisioned state of the resource
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    INVALID("Invalid"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELLED("Cancelled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public BatchAccountProperties() {
  }

  public BatchAccountProperties(
     String accountEndpoint, 
     Integer activeJobAndJobScheduleQuota, 
     Integer dedicatedCoreQuota, 
     Integer lowPriorityCoreQuota, 
     Integer poolQuota, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.accountEndpoint = accountEndpoint;
    this.activeJobAndJobScheduleQuota = activeJobAndJobScheduleQuota;
    this.dedicatedCoreQuota = dedicatedCoreQuota;
    this.lowPriorityCoreQuota = lowPriorityCoreQuota;
    this.poolQuota = poolQuota;
    this.provisioningState = provisioningState;
  }

  /**
   * The account endpoint used to interact with the Batch service.
   * @return accountEndpoint
   */
  @javax.annotation.Nullable
  public String getAccountEndpoint() {
    return accountEndpoint;
  }



  /**
   * Get activeJobAndJobScheduleQuota
   * @return activeJobAndJobScheduleQuota
   */
  @javax.annotation.Nullable
  public Integer getActiveJobAndJobScheduleQuota() {
    return activeJobAndJobScheduleQuota;
  }



  public BatchAccountProperties autoStorage(AutoStorageProperties autoStorage) {
    this.autoStorage = autoStorage;
    return this;
  }

  /**
   * Get autoStorage
   * @return autoStorage
   */
  @javax.annotation.Nullable
  public AutoStorageProperties getAutoStorage() {
    return autoStorage;
  }

  public void setAutoStorage(AutoStorageProperties autoStorage) {
    this.autoStorage = autoStorage;
  }


  /**
   * Get dedicatedCoreQuota
   * @return dedicatedCoreQuota
   */
  @javax.annotation.Nullable
  public Integer getDedicatedCoreQuota() {
    return dedicatedCoreQuota;
  }



  public BatchAccountProperties keyVaultReference(KeyVaultReference keyVaultReference) {
    this.keyVaultReference = keyVaultReference;
    return this;
  }

  /**
   * Get keyVaultReference
   * @return keyVaultReference
   */
  @javax.annotation.Nullable
  public KeyVaultReference getKeyVaultReference() {
    return keyVaultReference;
  }

  public void setKeyVaultReference(KeyVaultReference keyVaultReference) {
    this.keyVaultReference = keyVaultReference;
  }


  /**
   * Get lowPriorityCoreQuota
   * @return lowPriorityCoreQuota
   */
  @javax.annotation.Nullable
  public Integer getLowPriorityCoreQuota() {
    return lowPriorityCoreQuota;
  }



  public BatchAccountProperties poolAllocationMode(PoolAllocationMode poolAllocationMode) {
    this.poolAllocationMode = poolAllocationMode;
    return this;
  }

  /**
   * Get poolAllocationMode
   * @return poolAllocationMode
   */
  @javax.annotation.Nullable
  public PoolAllocationMode getPoolAllocationMode() {
    return poolAllocationMode;
  }

  public void setPoolAllocationMode(PoolAllocationMode poolAllocationMode) {
    this.poolAllocationMode = poolAllocationMode;
  }


  /**
   * Get poolQuota
   * @return poolQuota
   */
  @javax.annotation.Nullable
  public Integer getPoolQuota() {
    return poolQuota;
  }



  /**
   * The provisioned state of the resource
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchAccountProperties batchAccountProperties = (BatchAccountProperties) o;
    return Objects.equals(this.accountEndpoint, batchAccountProperties.accountEndpoint) &&
        Objects.equals(this.activeJobAndJobScheduleQuota, batchAccountProperties.activeJobAndJobScheduleQuota) &&
        Objects.equals(this.autoStorage, batchAccountProperties.autoStorage) &&
        Objects.equals(this.dedicatedCoreQuota, batchAccountProperties.dedicatedCoreQuota) &&
        Objects.equals(this.keyVaultReference, batchAccountProperties.keyVaultReference) &&
        Objects.equals(this.lowPriorityCoreQuota, batchAccountProperties.lowPriorityCoreQuota) &&
        Objects.equals(this.poolAllocationMode, batchAccountProperties.poolAllocationMode) &&
        Objects.equals(this.poolQuota, batchAccountProperties.poolQuota) &&
        Objects.equals(this.provisioningState, batchAccountProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountEndpoint, activeJobAndJobScheduleQuota, autoStorage, dedicatedCoreQuota, keyVaultReference, lowPriorityCoreQuota, poolAllocationMode, poolQuota, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchAccountProperties {\n");
    sb.append("    accountEndpoint: ").append(toIndentedString(accountEndpoint)).append("\n");
    sb.append("    activeJobAndJobScheduleQuota: ").append(toIndentedString(activeJobAndJobScheduleQuota)).append("\n");
    sb.append("    autoStorage: ").append(toIndentedString(autoStorage)).append("\n");
    sb.append("    dedicatedCoreQuota: ").append(toIndentedString(dedicatedCoreQuota)).append("\n");
    sb.append("    keyVaultReference: ").append(toIndentedString(keyVaultReference)).append("\n");
    sb.append("    lowPriorityCoreQuota: ").append(toIndentedString(lowPriorityCoreQuota)).append("\n");
    sb.append("    poolAllocationMode: ").append(toIndentedString(poolAllocationMode)).append("\n");
    sb.append("    poolQuota: ").append(toIndentedString(poolQuota)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountEndpoint");
    openapiFields.add("activeJobAndJobScheduleQuota");
    openapiFields.add("autoStorage");
    openapiFields.add("dedicatedCoreQuota");
    openapiFields.add("keyVaultReference");
    openapiFields.add("lowPriorityCoreQuota");
    openapiFields.add("poolAllocationMode");
    openapiFields.add("poolQuota");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchAccountProperties is not found in the empty JSON string", BatchAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountEndpoint") != null && !jsonObj.get("accountEndpoint").isJsonNull()) && !jsonObj.get("accountEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountEndpoint").toString()));
      }
      // validate the optional field `autoStorage`
      if (jsonObj.get("autoStorage") != null && !jsonObj.get("autoStorage").isJsonNull()) {
        AutoStorageProperties.validateJsonElement(jsonObj.get("autoStorage"));
      }
      // validate the optional field `keyVaultReference`
      if (jsonObj.get("keyVaultReference") != null && !jsonObj.get("keyVaultReference").isJsonNull()) {
        KeyVaultReference.validateJsonElement(jsonObj.get("keyVaultReference"));
      }
      // validate the optional field `poolAllocationMode`
      if (jsonObj.get("poolAllocationMode") != null && !jsonObj.get("poolAllocationMode").isJsonNull()) {
        PoolAllocationMode.validateJsonElement(jsonObj.get("poolAllocationMode"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchAccountProperties>() {
           @Override
           public void write(JsonWriter out, BatchAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchAccountProperties
   * @throws IOException if the JSON string is invalid with respect to BatchAccountProperties
   */
  public static BatchAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchAccountProperties.class);
  }

  /**
   * Convert an instance of BatchAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

