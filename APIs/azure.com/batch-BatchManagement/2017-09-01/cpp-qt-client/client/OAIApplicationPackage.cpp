/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationPackage::OAIApplicationPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationPackage::OAIApplicationPackage() {
    this->initializeModel();
}

OAIApplicationPackage::~OAIApplicationPackage() {}

void OAIApplicationPackage::initializeModel() {

    m_format_isSet = false;
    m_format_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_activation_time_isSet = false;
    m_last_activation_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_url_isSet = false;
    m_storage_url_isValid = false;

    m_storage_url_expiry_isSet = false;
    m_storage_url_expiry_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIApplicationPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationPackage::fromJsonObject(QJsonObject json) {

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_activation_time_isValid = ::OpenAPI::fromJsonValue(m_last_activation_time, json[QString("lastActivationTime")]);
    m_last_activation_time_isSet = !json[QString("lastActivationTime")].isNull() && m_last_activation_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_url_isValid = ::OpenAPI::fromJsonValue(m_storage_url, json[QString("storageUrl")]);
    m_storage_url_isSet = !json[QString("storageUrl")].isNull() && m_storage_url_isValid;

    m_storage_url_expiry_isValid = ::OpenAPI::fromJsonValue(m_storage_url_expiry, json[QString("storageUrlExpiry")]);
    m_storage_url_expiry_isSet = !json[QString("storageUrlExpiry")].isNull() && m_storage_url_expiry_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIApplicationPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_activation_time_isSet) {
        obj.insert(QString("lastActivationTime"), ::OpenAPI::toJsonValue(m_last_activation_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_url_isSet) {
        obj.insert(QString("storageUrl"), ::OpenAPI::toJsonValue(m_storage_url));
    }
    if (m_storage_url_expiry_isSet) {
        obj.insert(QString("storageUrlExpiry"), ::OpenAPI::toJsonValue(m_storage_url_expiry));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIApplicationPackage::getFormat() const {
    return m_format;
}
void OAIApplicationPackage::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIApplicationPackage::is_format_Set() const{
    return m_format_isSet;
}

bool OAIApplicationPackage::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIApplicationPackage::getId() const {
    return m_id;
}
void OAIApplicationPackage::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIApplicationPackage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIApplicationPackage::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIApplicationPackage::getLastActivationTime() const {
    return m_last_activation_time;
}
void OAIApplicationPackage::setLastActivationTime(const QDateTime &last_activation_time) {
    m_last_activation_time = last_activation_time;
    m_last_activation_time_isSet = true;
}

bool OAIApplicationPackage::is_last_activation_time_Set() const{
    return m_last_activation_time_isSet;
}

bool OAIApplicationPackage::is_last_activation_time_Valid() const{
    return m_last_activation_time_isValid;
}

QString OAIApplicationPackage::getState() const {
    return m_state;
}
void OAIApplicationPackage::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIApplicationPackage::is_state_Set() const{
    return m_state_isSet;
}

bool OAIApplicationPackage::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIApplicationPackage::getStorageUrl() const {
    return m_storage_url;
}
void OAIApplicationPackage::setStorageUrl(const QString &storage_url) {
    m_storage_url = storage_url;
    m_storage_url_isSet = true;
}

bool OAIApplicationPackage::is_storage_url_Set() const{
    return m_storage_url_isSet;
}

bool OAIApplicationPackage::is_storage_url_Valid() const{
    return m_storage_url_isValid;
}

QDateTime OAIApplicationPackage::getStorageUrlExpiry() const {
    return m_storage_url_expiry;
}
void OAIApplicationPackage::setStorageUrlExpiry(const QDateTime &storage_url_expiry) {
    m_storage_url_expiry = storage_url_expiry;
    m_storage_url_expiry_isSet = true;
}

bool OAIApplicationPackage::is_storage_url_expiry_Set() const{
    return m_storage_url_expiry_isSet;
}

bool OAIApplicationPackage::is_storage_url_expiry_Valid() const{
    return m_storage_url_expiry_isValid;
}

QString OAIApplicationPackage::getVersion() const {
    return m_version;
}
void OAIApplicationPackage::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIApplicationPackage::is_version_Set() const{
    return m_version_isSet;
}

bool OAIApplicationPackage::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIApplicationPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_url_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
