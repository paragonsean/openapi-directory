/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateCreateOrUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateCreateOrUpdateProperties::OAICertificateCreateOrUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateCreateOrUpdateProperties::OAICertificateCreateOrUpdateProperties() {
    this->initializeModel();
}

OAICertificateCreateOrUpdateProperties::~OAICertificateCreateOrUpdateProperties() {}

void OAICertificateCreateOrUpdateProperties::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_thumbprint_algorithm_isSet = false;
    m_thumbprint_algorithm_isValid = false;
}

void OAICertificateCreateOrUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateCreateOrUpdateProperties::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_thumbprint_algorithm_isValid = ::OpenAPI::fromJsonValue(m_thumbprint_algorithm, json[QString("thumbprintAlgorithm")]);
    m_thumbprint_algorithm_isSet = !json[QString("thumbprintAlgorithm")].isNull() && m_thumbprint_algorithm_isValid;
}

QString OAICertificateCreateOrUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateCreateOrUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_thumbprint_algorithm_isSet) {
        obj.insert(QString("thumbprintAlgorithm"), ::OpenAPI::toJsonValue(m_thumbprint_algorithm));
    }
    return obj;
}

QString OAICertificateCreateOrUpdateProperties::getData() const {
    return m_data;
}
void OAICertificateCreateOrUpdateProperties::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICertificateCreateOrUpdateProperties::is_data_Set() const{
    return m_data_isSet;
}

bool OAICertificateCreateOrUpdateProperties::is_data_Valid() const{
    return m_data_isValid;
}

QString OAICertificateCreateOrUpdateProperties::getPassword() const {
    return m_password;
}
void OAICertificateCreateOrUpdateProperties::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICertificateCreateOrUpdateProperties::is_password_Set() const{
    return m_password_isSet;
}

bool OAICertificateCreateOrUpdateProperties::is_password_Valid() const{
    return m_password_isValid;
}

QString OAICertificateCreateOrUpdateProperties::getFormat() const {
    return m_format;
}
void OAICertificateCreateOrUpdateProperties::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAICertificateCreateOrUpdateProperties::is_format_Set() const{
    return m_format_isSet;
}

bool OAICertificateCreateOrUpdateProperties::is_format_Valid() const{
    return m_format_isValid;
}

QString OAICertificateCreateOrUpdateProperties::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificateCreateOrUpdateProperties::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificateCreateOrUpdateProperties::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificateCreateOrUpdateProperties::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QString OAICertificateCreateOrUpdateProperties::getThumbprintAlgorithm() const {
    return m_thumbprint_algorithm;
}
void OAICertificateCreateOrUpdateProperties::setThumbprintAlgorithm(const QString &thumbprint_algorithm) {
    m_thumbprint_algorithm = thumbprint_algorithm;
    m_thumbprint_algorithm_isSet = true;
}

bool OAICertificateCreateOrUpdateProperties::is_thumbprint_algorithm_Set() const{
    return m_thumbprint_algorithm_isSet;
}

bool OAICertificateCreateOrUpdateProperties::is_thumbprint_algorithm_Valid() const{
    return m_thumbprint_algorithm_isValid;
}

bool OAICertificateCreateOrUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateCreateOrUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
