/**
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundNatPool.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundNatPool::OAIInboundNatPool(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundNatPool::OAIInboundNatPool() {
    this->initializeModel();
}

OAIInboundNatPool::~OAIInboundNatPool() {}

void OAIInboundNatPool::initializeModel() {

    m_backend_port_isSet = false;
    m_backend_port_isValid = false;

    m_frontend_port_range_end_isSet = false;
    m_frontend_port_range_end_isValid = false;

    m_frontend_port_range_start_isSet = false;
    m_frontend_port_range_start_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_security_group_rules_isSet = false;
    m_network_security_group_rules_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAIInboundNatPool::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundNatPool::fromJsonObject(QJsonObject json) {

    m_backend_port_isValid = ::OpenAPI::fromJsonValue(m_backend_port, json[QString("backendPort")]);
    m_backend_port_isSet = !json[QString("backendPort")].isNull() && m_backend_port_isValid;

    m_frontend_port_range_end_isValid = ::OpenAPI::fromJsonValue(m_frontend_port_range_end, json[QString("frontendPortRangeEnd")]);
    m_frontend_port_range_end_isSet = !json[QString("frontendPortRangeEnd")].isNull() && m_frontend_port_range_end_isValid;

    m_frontend_port_range_start_isValid = ::OpenAPI::fromJsonValue(m_frontend_port_range_start, json[QString("frontendPortRangeStart")]);
    m_frontend_port_range_start_isSet = !json[QString("frontendPortRangeStart")].isNull() && m_frontend_port_range_start_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_security_group_rules_isValid = ::OpenAPI::fromJsonValue(m_network_security_group_rules, json[QString("networkSecurityGroupRules")]);
    m_network_security_group_rules_isSet = !json[QString("networkSecurityGroupRules")].isNull() && m_network_security_group_rules_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAIInboundNatPool::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundNatPool::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_port_isSet) {
        obj.insert(QString("backendPort"), ::OpenAPI::toJsonValue(m_backend_port));
    }
    if (m_frontend_port_range_end_isSet) {
        obj.insert(QString("frontendPortRangeEnd"), ::OpenAPI::toJsonValue(m_frontend_port_range_end));
    }
    if (m_frontend_port_range_start_isSet) {
        obj.insert(QString("frontendPortRangeStart"), ::OpenAPI::toJsonValue(m_frontend_port_range_start));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_security_group_rules.size() > 0) {
        obj.insert(QString("networkSecurityGroupRules"), ::OpenAPI::toJsonValue(m_network_security_group_rules));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

qint32 OAIInboundNatPool::getBackendPort() const {
    return m_backend_port;
}
void OAIInboundNatPool::setBackendPort(const qint32 &backend_port) {
    m_backend_port = backend_port;
    m_backend_port_isSet = true;
}

bool OAIInboundNatPool::is_backend_port_Set() const{
    return m_backend_port_isSet;
}

bool OAIInboundNatPool::is_backend_port_Valid() const{
    return m_backend_port_isValid;
}

qint32 OAIInboundNatPool::getFrontendPortRangeEnd() const {
    return m_frontend_port_range_end;
}
void OAIInboundNatPool::setFrontendPortRangeEnd(const qint32 &frontend_port_range_end) {
    m_frontend_port_range_end = frontend_port_range_end;
    m_frontend_port_range_end_isSet = true;
}

bool OAIInboundNatPool::is_frontend_port_range_end_Set() const{
    return m_frontend_port_range_end_isSet;
}

bool OAIInboundNatPool::is_frontend_port_range_end_Valid() const{
    return m_frontend_port_range_end_isValid;
}

qint32 OAIInboundNatPool::getFrontendPortRangeStart() const {
    return m_frontend_port_range_start;
}
void OAIInboundNatPool::setFrontendPortRangeStart(const qint32 &frontend_port_range_start) {
    m_frontend_port_range_start = frontend_port_range_start;
    m_frontend_port_range_start_isSet = true;
}

bool OAIInboundNatPool::is_frontend_port_range_start_Set() const{
    return m_frontend_port_range_start_isSet;
}

bool OAIInboundNatPool::is_frontend_port_range_start_Valid() const{
    return m_frontend_port_range_start_isValid;
}

QString OAIInboundNatPool::getName() const {
    return m_name;
}
void OAIInboundNatPool::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInboundNatPool::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInboundNatPool::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINetworkSecurityGroupRule> OAIInboundNatPool::getNetworkSecurityGroupRules() const {
    return m_network_security_group_rules;
}
void OAIInboundNatPool::setNetworkSecurityGroupRules(const QList<OAINetworkSecurityGroupRule> &network_security_group_rules) {
    m_network_security_group_rules = network_security_group_rules;
    m_network_security_group_rules_isSet = true;
}

bool OAIInboundNatPool::is_network_security_group_rules_Set() const{
    return m_network_security_group_rules_isSet;
}

bool OAIInboundNatPool::is_network_security_group_rules_Valid() const{
    return m_network_security_group_rules_isValid;
}

QString OAIInboundNatPool::getProtocol() const {
    return m_protocol;
}
void OAIInboundNatPool::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIInboundNatPool::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIInboundNatPool::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAIInboundNatPool::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_range_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_port_range_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_security_group_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundNatPool::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backend_port_isValid && m_frontend_port_range_end_isValid && m_frontend_port_range_start_isValid && m_name_isValid && m_protocol_isValid && true;
}

} // namespace OpenAPI
