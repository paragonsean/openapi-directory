/*
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Values are:   Requeue - Terminate running tasks and requeue them. The tasks will run again when the job is enabled. Remove nodes as soon as tasks have been terminated.  Terminate - Terminate running tasks. The tasks will not run again. Remove nodes as soon as tasks have been terminated.  TaskCompletion - Allow currently running tasks to complete. Schedule no new tasks while waiting. Remove nodes when all tasks have completed.  RetainedData - Allow currently running tasks to complete, then wait for all task data retention periods to expire. Schedule no new tasks while waiting. Remove nodes when all task retention periods have expired.
 */
@JsonAdapter(ComputeNodeDeallocationOption.Adapter.class)
public enum ComputeNodeDeallocationOption {
  
  REQUEUE("Requeue"),
  
  TERMINATE("Terminate"),
  
  TASK_COMPLETION("TaskCompletion"),
  
  RETAINED_DATA("RetainedData");

  private String value;

  ComputeNodeDeallocationOption(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ComputeNodeDeallocationOption fromValue(String value) {
    for (ComputeNodeDeallocationOption b : ComputeNodeDeallocationOption.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ComputeNodeDeallocationOption> {
    @Override
    public void write(final JsonWriter jsonWriter, final ComputeNodeDeallocationOption enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ComputeNodeDeallocationOption read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ComputeNodeDeallocationOption.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ComputeNodeDeallocationOption.fromValue(value);
  }
}

