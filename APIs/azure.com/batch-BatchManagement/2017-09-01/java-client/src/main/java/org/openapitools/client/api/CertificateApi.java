/*
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateCreateOrUpdateParameters;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.ListCertificatesResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificateCancelDeletion
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCancelDeletionCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}/cancelDelete"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateCancelDeletionValidateBeforeCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateCancelDeletion(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateCancelDeletion(Async)");
        }

        return certificateCancelDeletionCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, _callback);

    }

    /**
     * Cancels a failed deletion of a certificate from the specified account.
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificateCancelDeletion(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificateCancelDeletionWithHttpInfo(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Cancels a failed deletion of a certificate from the specified account.
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificateCancelDeletionWithHttpInfo(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = certificateCancelDeletionValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancels a failed deletion of a certificate from the specified account. (asynchronously)
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCancelDeletionAsync(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateCancelDeletionValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateCreate
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Additional parameters for certificate creation. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. A value of \&quot;*\&quot; can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCreateCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateCreateValidateBeforeCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling certificateCreate(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificateCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling certificateCreate(Async)");
        }

        return certificateCreateCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * Creates a new certificate inside the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Additional parameters for certificate creation. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. A value of \&quot;*\&quot; can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. (optional)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificateCreate(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificateCreateWithHttpInfo(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new certificate inside the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Additional parameters for certificate creation. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. A value of \&quot;*\&quot; can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. (optional)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificateCreateWithHttpInfo(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = certificateCreateValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new certificate inside the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Additional parameters for certificate creation. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. A value of \&quot;*\&quot; can be used to apply the operation only if the certificate already exists. If omitted, this operation will always be applied. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new certificate to be created, but to prevent updating an existing certificate. Other values will be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateCreateAsync(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, String ifNoneMatch, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateCreateValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateDelete
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation will be completed asynchronously. </td><td>  * Retry-After - Suggested delay to check the status of the asynchronous operation. The value is an integer that represents the seconds. <br>  * Location - The URL of the resource used to check the status of the asynchronous operation. <br>  </td></tr>
        <tr><td> 204 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateDeleteCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateDeleteValidateBeforeCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateDelete(Async)");
        }

        return certificateDeleteCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation will be completed asynchronously. </td><td>  * Retry-After - Suggested delay to check the status of the asynchronous operation. The value is an integer that represents the seconds. <br>  * Location - The URL of the resource used to check the status of the asynchronous operation. <br>  </td></tr>
        <tr><td> 204 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void certificateDelete(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId) throws ApiException {
        certificateDeleteWithHttpInfo(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation will be completed asynchronously. </td><td>  * Retry-After - Suggested delay to check the status of the asynchronous operation. The value is an integer that represents the seconds. <br>  * Location - The URL of the resource used to check the status of the asynchronous operation. <br>  </td></tr>
        <tr><td> 204 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificateDeleteWithHttpInfo(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = certificateDeleteValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation will be completed asynchronously. </td><td>  * Retry-After - Suggested delay to check the status of the asynchronous operation. The value is an integer that represents the seconds. <br>  * Location - The URL of the resource used to check the status of the asynchronous operation. <br>  </td></tr>
        <tr><td> 204 </td><td> The operation was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateDeleteAsync(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateDeleteValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateGet
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateGetCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateGetValidateBeforeCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling certificateGet(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificateGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateGet(Async)");
        }

        return certificateGetCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets information about the specified certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificateGet(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificateGetWithHttpInfo(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificateGetWithHttpInfo(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = certificateGetValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateGetAsync(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateGetValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateListByBatchAccount
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param maxresults The maximum number of items to return in the response. (optional)
     * @param $select Comma separated list of properties that should be returned. e.g. \&quot;properties/provisioningState\&quot;. Only top level properties under properties/ are valid for selection. (optional)
     * @param $filter OData filter expression. Valid properties for filtering are \&quot;properties/provisioningState\&quot;, \&quot;properties/provisioningStateTransitionTime\&quot;, \&quot;name\&quot;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains a list of certificates associated with the account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateListByBatchAccountCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, Integer maxresults, String $select, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxresults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxresults", maxresults));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateListByBatchAccountValidateBeforeCall(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, Integer maxresults, String $select, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateListByBatchAccount(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling certificateListByBatchAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateListByBatchAccount(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateListByBatchAccount(Async)");
        }

        return certificateListByBatchAccountCall(resourceGroupName, accountName, apiVersion, subscriptionId, maxresults, $select, $filter, _callback);

    }

    /**
     * 
     * Lists all of the certificates in the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param maxresults The maximum number of items to return in the response. (optional)
     * @param $select Comma separated list of properties that should be returned. e.g. \&quot;properties/provisioningState\&quot;. Only top level properties under properties/ are valid for selection. (optional)
     * @param $filter OData filter expression. Valid properties for filtering are \&quot;properties/provisioningState\&quot;, \&quot;properties/provisioningStateTransitionTime\&quot;, \&quot;name\&quot;. (optional)
     * @return ListCertificatesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains a list of certificates associated with the account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ListCertificatesResult certificateListByBatchAccount(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, Integer maxresults, String $select, String $filter) throws ApiException {
        ApiResponse<ListCertificatesResult> localVarResp = certificateListByBatchAccountWithHttpInfo(resourceGroupName, accountName, apiVersion, subscriptionId, maxresults, $select, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all of the certificates in the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param maxresults The maximum number of items to return in the response. (optional)
     * @param $select Comma separated list of properties that should be returned. e.g. \&quot;properties/provisioningState\&quot;. Only top level properties under properties/ are valid for selection. (optional)
     * @param $filter OData filter expression. Valid properties for filtering are \&quot;properties/provisioningState\&quot;, \&quot;properties/provisioningStateTransitionTime\&quot;, \&quot;name\&quot;. (optional)
     * @return ApiResponse&lt;ListCertificatesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains a list of certificates associated with the account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCertificatesResult> certificateListByBatchAccountWithHttpInfo(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, Integer maxresults, String $select, String $filter) throws ApiException {
        okhttp3.Call localVarCall = certificateListByBatchAccountValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, maxresults, $select, $filter, null);
        Type localVarReturnType = new TypeToken<ListCertificatesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all of the certificates in the specified account.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param maxresults The maximum number of items to return in the response. (optional)
     * @param $select Comma separated list of properties that should be returned. e.g. \&quot;properties/provisioningState\&quot;. Only top level properties under properties/ are valid for selection. (optional)
     * @param $filter OData filter expression. Valid properties for filtering are \&quot;properties/provisioningState\&quot;, \&quot;properties/provisioningStateTransitionTime\&quot;, \&quot;name\&quot;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains a list of certificates associated with the account. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateListByBatchAccountAsync(String resourceGroupName, String accountName, String apiVersion, String subscriptionId, Integer maxresults, String $select, String $filter, final ApiCallback<ListCertificatesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateListByBatchAccountValidateBeforeCall(resourceGroupName, accountName, apiVersion, subscriptionId, maxresults, $select, $filter, _callback);
        Type localVarReturnType = new TypeToken<ListCertificatesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateUpdate
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Certificate entity to update. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. This value can be omitted or set to \&quot;*\&quot; to apply the operation unconditionally. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateUpdateCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/certificates/{certificateName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateUpdateValidateBeforeCall(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling certificateUpdate(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificateUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling certificateUpdate(Async)");
        }

        return certificateUpdateCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, _callback);

    }

    /**
     * 
     * Updates the properties of an existing certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Certificate entity to update. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. This value can be omitted or set to \&quot;*\&quot; to apply the operation unconditionally. (optional)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificateUpdate(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificateUpdateWithHttpInfo(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the properties of an existing certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Certificate entity to update. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. This value can be omitted or set to \&quot;*\&quot; to apply the operation unconditionally. (optional)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificateUpdateWithHttpInfo(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = certificateUpdateValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the properties of an existing certificate.
     * @param resourceGroupName The name of the resource group that contains the Batch account. (required)
     * @param accountName The name of the Batch account. (required)
     * @param certificateName The identifier for the certificate. This must be made up of algorithm and thumbprint separated by a dash, and must match the certificate data in the request. For example SHA1-a3d1c5. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000) (required)
     * @param parameters Certificate entity to update. (required)
     * @param ifMatch The entity state (ETag) version of the certificate to update. This value can be omitted or set to \&quot;*\&quot; to apply the operation unconditionally. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation was successful. The response contains the certificate entity. </td><td>  * ETag - The ETag HTTP response header. This is an opaque string. You can use it to detect whether the resource has changed between requests. In particular, you can pass the ETag to one of the If-Match or If-None-Match headers. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateUpdateAsync(String resourceGroupName, String accountName, String certificateName, String apiVersion, String subscriptionId, CertificateCreateOrUpdateParameters parameters, String ifMatch, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateUpdateValidateBeforeCall(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
