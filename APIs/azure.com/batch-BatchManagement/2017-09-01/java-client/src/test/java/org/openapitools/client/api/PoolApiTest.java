/*
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.ListPoolsResult;
import org.openapitools.client.model.Pool;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PoolApi
 */
@Disabled
public class PoolApiTest {

    private final PoolApi api = new PoolApi();

    /**
     * Creates a new pool inside the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolCreateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Pool parameters = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        Pool response = api.poolCreate(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.poolDelete(resourceGroupName, accountName, poolName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Disables automatic scaling for a pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolDisableAutoScaleTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Pool response = api.poolDisableAutoScale(resourceGroupName, accountName, poolName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets information about the specified pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolGetTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Pool response = api.poolGet(resourceGroupName, accountName, poolName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all of the pools in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolListByBatchAccountTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer maxresults = null;
        String $select = null;
        String $filter = null;
        ListPoolsResult response = api.poolListByBatchAccount(resourceGroupName, accountName, apiVersion, subscriptionId, maxresults, $select, $filter);
        // TODO: test validations
    }

    /**
     * Stops an ongoing resize operation on the pool.
     *
     * This does not restore the pool to its previous state before the resize operation: it only stops any further changes being made, and the pool maintains its current state. After stopping, the pool stabilizes at the number of nodes it was at when the stop operation was done. During the stop operation, the pool allocation state changes first to stopping and then to steady. A resize operation need not be an explicit resize pool request; this API can also be used to halt the initial sizing of the pool when it is created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolStopResizeTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Pool response = api.poolStopResize(resourceGroupName, accountName, poolName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates the properties of an existing pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void poolUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Pool parameters = null;
        String ifMatch = null;
        Pool response = api.poolUpdate(resourceGroupName, accountName, poolName, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

}
