/*
 * BatchManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateCreateOrUpdateParameters;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.ListCertificatesResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificateApi
 */
@Disabled
public class CertificateApiTest {

    private final CertificateApi api = new CertificateApi();

    /**
     * Cancels a failed deletion of a certificate from the specified account.
     *
     * If you try to delete a certificate that is being used by a pool or compute node, the status of the certificate changes to deleteFailed. If you decide that you want to continue using the certificate, you can use this operation to set the status of the certificate back to active. If you intend to delete the certificate, you do not need to run this operation after the deletion failed. You must make sure that the certificate is not being used by any resources, and then you can try again to delete the certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCancelDeletionTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String certificateName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Certificate response = api.certificateCancelDeletion(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Creates a new certificate inside the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCreateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String certificateName = null;
        String apiVersion = null;
        String subscriptionId = null;
        CertificateCreateOrUpdateParameters parameters = null;
        String ifMatch = null;
        String ifNoneMatch = null;
        Certificate response = api.certificateCreate(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String certificateName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.certificateDelete(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets information about the specified certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateGetTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String certificateName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Certificate response = api.certificateGet(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all of the certificates in the specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateListByBatchAccountTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Integer maxresults = null;
        String $select = null;
        String $filter = null;
        ListCertificatesResult response = api.certificateListByBatchAccount(resourceGroupName, accountName, apiVersion, subscriptionId, maxresults, $select, $filter);
        // TODO: test validations
    }

    /**
     * Updates the properties of an existing certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String accountName = null;
        String certificateName = null;
        String apiVersion = null;
        String subscriptionId = null;
        CertificateCreateOrUpdateParameters parameters = null;
        String ifMatch = null;
        Certificate response = api.certificateUpdate(resourceGroupName, accountName, certificateName, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

}
