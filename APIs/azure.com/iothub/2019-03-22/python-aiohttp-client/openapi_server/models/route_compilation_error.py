# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route_error_range import RouteErrorRange
from openapi_server import util


class RouteCompilationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: RouteErrorRange=None, message: str=None, severity: str=None):
        """RouteCompilationError - a model defined in OpenAPI

        :param location: The location of this RouteCompilationError.
        :param message: The message of this RouteCompilationError.
        :param severity: The severity of this RouteCompilationError.
        """
        self.openapi_types = {
            'location': RouteErrorRange,
            'message': str,
            'severity': str
        }

        self.attribute_map = {
            'location': 'location',
            'message': 'message',
            'severity': 'severity'
        }

        self._location = location
        self._message = message
        self._severity = severity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteCompilationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteCompilationError of this RouteCompilationError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this RouteCompilationError.


        :return: The location of this RouteCompilationError.
        :rtype: RouteErrorRange
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RouteCompilationError.


        :param location: The location of this RouteCompilationError.
        :type location: RouteErrorRange
        """

        self._location = location

    @property
    def message(self):
        """Gets the message of this RouteCompilationError.

        Route error message

        :return: The message of this RouteCompilationError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RouteCompilationError.

        Route error message

        :param message: The message of this RouteCompilationError.
        :type message: str
        """

        self._message = message

    @property
    def severity(self):
        """Gets the severity of this RouteCompilationError.

        Severity of the route error

        :return: The severity of this RouteCompilationError.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this RouteCompilationError.

        Severity of the route error

        :param severity: The severity of this RouteCompilationError.
        :type severity: str
        """
        allowed_values = ["error", "warning"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity
