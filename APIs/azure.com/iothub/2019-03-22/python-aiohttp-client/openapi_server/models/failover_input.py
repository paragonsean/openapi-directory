# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailoverInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover_region: str=None):
        """FailoverInput - a model defined in OpenAPI

        :param failover_region: The failover_region of this FailoverInput.
        """
        self.openapi_types = {
            'failover_region': str
        }

        self.attribute_map = {
            'failover_region': 'failoverRegion'
        }

        self._failover_region = failover_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverInput of this FailoverInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover_region(self):
        """Gets the failover_region of this FailoverInput.

        Region the hub will be failed over to

        :return: The failover_region of this FailoverInput.
        :rtype: str
        """
        return self._failover_region

    @failover_region.setter
    def failover_region(self, failover_region):
        """Sets the failover_region of this FailoverInput.

        Region the hub will be failed over to

        :param failover_region: The failover_region of this FailoverInput.
        :type failover_region: str
        """
        if failover_region is None:
            raise ValueError("Invalid value for `failover_region`, must not be `None`")

        self._failover_region = failover_region
