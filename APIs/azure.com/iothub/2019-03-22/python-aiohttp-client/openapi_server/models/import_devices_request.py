# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportDevicesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_blob_container_uri: str=None, output_blob_container_uri: str=None):
        """ImportDevicesRequest - a model defined in OpenAPI

        :param input_blob_container_uri: The input_blob_container_uri of this ImportDevicesRequest.
        :param output_blob_container_uri: The output_blob_container_uri of this ImportDevicesRequest.
        """
        self.openapi_types = {
            'input_blob_container_uri': str,
            'output_blob_container_uri': str
        }

        self.attribute_map = {
            'input_blob_container_uri': 'inputBlobContainerUri',
            'output_blob_container_uri': 'outputBlobContainerUri'
        }

        self._input_blob_container_uri = input_blob_container_uri
        self._output_blob_container_uri = output_blob_container_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportDevicesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportDevicesRequest of this ImportDevicesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_blob_container_uri(self):
        """Gets the input_blob_container_uri of this ImportDevicesRequest.

        The input blob container URI.

        :return: The input_blob_container_uri of this ImportDevicesRequest.
        :rtype: str
        """
        return self._input_blob_container_uri

    @input_blob_container_uri.setter
    def input_blob_container_uri(self, input_blob_container_uri):
        """Sets the input_blob_container_uri of this ImportDevicesRequest.

        The input blob container URI.

        :param input_blob_container_uri: The input_blob_container_uri of this ImportDevicesRequest.
        :type input_blob_container_uri: str
        """
        if input_blob_container_uri is None:
            raise ValueError("Invalid value for `input_blob_container_uri`, must not be `None`")

        self._input_blob_container_uri = input_blob_container_uri

    @property
    def output_blob_container_uri(self):
        """Gets the output_blob_container_uri of this ImportDevicesRequest.

        The output blob container URI.

        :return: The output_blob_container_uri of this ImportDevicesRequest.
        :rtype: str
        """
        return self._output_blob_container_uri

    @output_blob_container_uri.setter
    def output_blob_container_uri(self, output_blob_container_uri):
        """Sets the output_blob_container_uri of this ImportDevicesRequest.

        The output blob container URI.

        :param output_blob_container_uri: The output_blob_container_uri of this ImportDevicesRequest.
        :type output_blob_container_uri: str
        """
        if output_blob_container_uri is None:
            raise ValueError("Invalid value for `output_blob_container_uri`, must not be `None`")

        self._output_blob_container_uri = output_blob_container_uri
