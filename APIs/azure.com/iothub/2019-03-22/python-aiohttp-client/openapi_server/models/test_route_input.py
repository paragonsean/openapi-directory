# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route_properties import RouteProperties
from openapi_server.models.routing_message import RoutingMessage
from openapi_server.models.routing_twin import RoutingTwin
from openapi_server import util


class TestRouteInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: RoutingMessage=None, route: RouteProperties=None, twin: RoutingTwin=None):
        """TestRouteInput - a model defined in OpenAPI

        :param message: The message of this TestRouteInput.
        :param route: The route of this TestRouteInput.
        :param twin: The twin of this TestRouteInput.
        """
        self.openapi_types = {
            'message': RoutingMessage,
            'route': RouteProperties,
            'twin': RoutingTwin
        }

        self.attribute_map = {
            'message': 'message',
            'route': 'route',
            'twin': 'twin'
        }

        self._message = message
        self._route = route
        self._twin = twin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRouteInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestRouteInput of this TestRouteInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this TestRouteInput.


        :return: The message of this TestRouteInput.
        :rtype: RoutingMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TestRouteInput.


        :param message: The message of this TestRouteInput.
        :type message: RoutingMessage
        """

        self._message = message

    @property
    def route(self):
        """Gets the route of this TestRouteInput.


        :return: The route of this TestRouteInput.
        :rtype: RouteProperties
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this TestRouteInput.


        :param route: The route of this TestRouteInput.
        :type route: RouteProperties
        """
        if route is None:
            raise ValueError("Invalid value for `route`, must not be `None`")

        self._route = route

    @property
    def twin(self):
        """Gets the twin of this TestRouteInput.


        :return: The twin of this TestRouteInput.
        :rtype: RoutingTwin
        """
        return self._twin

    @twin.setter
    def twin(self, twin):
        """Sets the twin of this TestRouteInput.


        :param twin: The twin of this TestRouteInput.
        :type twin: RoutingTwin
        """

        self._twin = twin
