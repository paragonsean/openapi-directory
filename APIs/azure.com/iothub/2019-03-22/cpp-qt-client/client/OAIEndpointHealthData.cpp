/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointHealthData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointHealthData::OAIEndpointHealthData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointHealthData::OAIEndpointHealthData() {
    this->initializeModel();
}

OAIEndpointHealthData::~OAIEndpointHealthData() {}

void OAIEndpointHealthData::initializeModel() {

    m_endpoint_id_isSet = false;
    m_endpoint_id_isValid = false;

    m_health_status_isSet = false;
    m_health_status_isValid = false;
}

void OAIEndpointHealthData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointHealthData::fromJsonObject(QJsonObject json) {

    m_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_endpoint_id, json[QString("endpointId")]);
    m_endpoint_id_isSet = !json[QString("endpointId")].isNull() && m_endpoint_id_isValid;

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;
}

QString OAIEndpointHealthData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointHealthData::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_id_isSet) {
        obj.insert(QString("endpointId"), ::OpenAPI::toJsonValue(m_endpoint_id));
    }
    if (m_health_status_isSet) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    return obj;
}

QString OAIEndpointHealthData::getEndpointId() const {
    return m_endpoint_id;
}
void OAIEndpointHealthData::setEndpointId(const QString &endpoint_id) {
    m_endpoint_id = endpoint_id;
    m_endpoint_id_isSet = true;
}

bool OAIEndpointHealthData::is_endpoint_id_Set() const{
    return m_endpoint_id_isSet;
}

bool OAIEndpointHealthData::is_endpoint_id_Valid() const{
    return m_endpoint_id_isValid;
}

QString OAIEndpointHealthData::getHealthStatus() const {
    return m_health_status;
}
void OAIEndpointHealthData::setHealthStatus(const QString &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIEndpointHealthData::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIEndpointHealthData::is_health_status_Valid() const{
    return m_health_status_isValid;
}

bool OAIEndpointHealthData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointHealthData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
