/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingEventHubProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutingEventHubProperties::OAIRoutingEventHubProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutingEventHubProperties::OAIRoutingEventHubProperties() {
    this->initializeModel();
}

OAIRoutingEventHubProperties::~OAIRoutingEventHubProperties() {}

void OAIRoutingEventHubProperties::initializeModel() {

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIRoutingEventHubProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutingEventHubProperties::fromJsonObject(QJsonObject json) {

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIRoutingEventHubProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutingEventHubProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAIRoutingEventHubProperties::getConnectionString() const {
    return m_connection_string;
}
void OAIRoutingEventHubProperties::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAIRoutingEventHubProperties::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAIRoutingEventHubProperties::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QString OAIRoutingEventHubProperties::getName() const {
    return m_name;
}
void OAIRoutingEventHubProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoutingEventHubProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoutingEventHubProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRoutingEventHubProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIRoutingEventHubProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIRoutingEventHubProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIRoutingEventHubProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIRoutingEventHubProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIRoutingEventHubProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIRoutingEventHubProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIRoutingEventHubProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIRoutingEventHubProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutingEventHubProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_string_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
