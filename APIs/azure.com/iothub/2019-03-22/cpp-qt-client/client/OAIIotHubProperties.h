/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIotHubProperties.h
 *
 * The properties of an IoT hub.
 */

#ifndef OAIIotHubProperties_H
#define OAIIotHubProperties_H

#include <QJsonObject>

#include "OAICloudToDeviceProperties.h"
#include "OAIEventHubProperties.h"
#include "OAIIotHubLocationDescription.h"
#include "OAIIpFilterRule.h"
#include "OAIMessagingEndpointProperties.h"
#include "OAIRoutingProperties.h"
#include "OAISharedAccessSignatureAuthorizationRule.h"
#include "OAIStorageEndpointProperties.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISharedAccessSignatureAuthorizationRule;
class OAICloudToDeviceProperties;
class OAIEventHubProperties;
class OAIIpFilterRule;
class OAIIotHubLocationDescription;
class OAIMessagingEndpointProperties;
class OAIRoutingProperties;
class OAIStorageEndpointProperties;

class OAIIotHubProperties : public OAIObject {
public:
    OAIIotHubProperties();
    OAIIotHubProperties(QString json);
    ~OAIIotHubProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAISharedAccessSignatureAuthorizationRule> getAuthorizationPolicies() const;
    void setAuthorizationPolicies(const QList<OAISharedAccessSignatureAuthorizationRule> &authorization_policies);
    bool is_authorization_policies_Set() const;
    bool is_authorization_policies_Valid() const;

    OAICloudToDeviceProperties getCloudToDevice() const;
    void setCloudToDevice(const OAICloudToDeviceProperties &cloud_to_device);
    bool is_cloud_to_device_Set() const;
    bool is_cloud_to_device_Valid() const;

    QString getComments() const;
    void setComments(const QString &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    bool isEnableFileUploadNotifications() const;
    void setEnableFileUploadNotifications(const bool &enable_file_upload_notifications);
    bool is_enable_file_upload_notifications_Set() const;
    bool is_enable_file_upload_notifications_Valid() const;

    QMap<QString, OAIEventHubProperties> getEventHubEndpoints() const;
    void setEventHubEndpoints(const QMap<QString, OAIEventHubProperties> &event_hub_endpoints);
    bool is_event_hub_endpoints_Set() const;
    bool is_event_hub_endpoints_Valid() const;

    QString getFeatures() const;
    void setFeatures(const QString &features);
    bool is_features_Set() const;
    bool is_features_Valid() const;

    QString getHostName() const;
    void setHostName(const QString &host_name);
    bool is_host_name_Set() const;
    bool is_host_name_Valid() const;

    QList<OAIIpFilterRule> getIpFilterRules() const;
    void setIpFilterRules(const QList<OAIIpFilterRule> &ip_filter_rules);
    bool is_ip_filter_rules_Set() const;
    bool is_ip_filter_rules_Valid() const;

    QList<OAIIotHubLocationDescription> getLocations() const;
    void setLocations(const QList<OAIIotHubLocationDescription> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QMap<QString, OAIMessagingEndpointProperties> getMessagingEndpoints() const;
    void setMessagingEndpoints(const QMap<QString, OAIMessagingEndpointProperties> &messaging_endpoints);
    bool is_messaging_endpoints_Set() const;
    bool is_messaging_endpoints_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    OAIRoutingProperties getRouting() const;
    void setRouting(const OAIRoutingProperties &routing);
    bool is_routing_Set() const;
    bool is_routing_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QMap<QString, OAIStorageEndpointProperties> getStorageEndpoints() const;
    void setStorageEndpoints(const QMap<QString, OAIStorageEndpointProperties> &storage_endpoints);
    bool is_storage_endpoints_Set() const;
    bool is_storage_endpoints_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAISharedAccessSignatureAuthorizationRule> m_authorization_policies;
    bool m_authorization_policies_isSet;
    bool m_authorization_policies_isValid;

    OAICloudToDeviceProperties m_cloud_to_device;
    bool m_cloud_to_device_isSet;
    bool m_cloud_to_device_isValid;

    QString m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    bool m_enable_file_upload_notifications;
    bool m_enable_file_upload_notifications_isSet;
    bool m_enable_file_upload_notifications_isValid;

    QMap<QString, OAIEventHubProperties> m_event_hub_endpoints;
    bool m_event_hub_endpoints_isSet;
    bool m_event_hub_endpoints_isValid;

    QString m_features;
    bool m_features_isSet;
    bool m_features_isValid;

    QString m_host_name;
    bool m_host_name_isSet;
    bool m_host_name_isValid;

    QList<OAIIpFilterRule> m_ip_filter_rules;
    bool m_ip_filter_rules_isSet;
    bool m_ip_filter_rules_isValid;

    QList<OAIIotHubLocationDescription> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QMap<QString, OAIMessagingEndpointProperties> m_messaging_endpoints;
    bool m_messaging_endpoints_isSet;
    bool m_messaging_endpoints_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    OAIRoutingProperties m_routing;
    bool m_routing_isSet;
    bool m_routing_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QMap<QString, OAIStorageEndpointProperties> m_storage_endpoints;
    bool m_storage_endpoints_isSet;
    bool m_storage_endpoints_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIotHubProperties)

#endif // OAIIotHubProperties_H
