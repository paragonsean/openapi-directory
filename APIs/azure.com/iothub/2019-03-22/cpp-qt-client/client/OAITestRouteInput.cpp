/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestRouteInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestRouteInput::OAITestRouteInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestRouteInput::OAITestRouteInput() {
    this->initializeModel();
}

OAITestRouteInput::~OAITestRouteInput() {}

void OAITestRouteInput::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_route_isSet = false;
    m_route_isValid = false;

    m_twin_isSet = false;
    m_twin_isValid = false;
}

void OAITestRouteInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestRouteInput::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_route_isValid = ::OpenAPI::fromJsonValue(m_route, json[QString("route")]);
    m_route_isSet = !json[QString("route")].isNull() && m_route_isValid;

    m_twin_isValid = ::OpenAPI::fromJsonValue(m_twin, json[QString("twin")]);
    m_twin_isSet = !json[QString("twin")].isNull() && m_twin_isValid;
}

QString OAITestRouteInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestRouteInput::asJsonObject() const {
    QJsonObject obj;
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_route.isSet()) {
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(m_route));
    }
    if (m_twin.isSet()) {
        obj.insert(QString("twin"), ::OpenAPI::toJsonValue(m_twin));
    }
    return obj;
}

OAIRoutingMessage OAITestRouteInput::getMessage() const {
    return m_message;
}
void OAITestRouteInput::setMessage(const OAIRoutingMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITestRouteInput::is_message_Set() const{
    return m_message_isSet;
}

bool OAITestRouteInput::is_message_Valid() const{
    return m_message_isValid;
}

OAIRouteProperties OAITestRouteInput::getRoute() const {
    return m_route;
}
void OAITestRouteInput::setRoute(const OAIRouteProperties &route) {
    m_route = route;
    m_route_isSet = true;
}

bool OAITestRouteInput::is_route_Set() const{
    return m_route_isSet;
}

bool OAITestRouteInput::is_route_Valid() const{
    return m_route_isValid;
}

OAIRoutingTwin OAITestRouteInput::getTwin() const {
    return m_twin;
}
void OAITestRouteInput::setTwin(const OAIRoutingTwin &twin) {
    m_twin = twin;
    m_twin_isSet = true;
}

bool OAITestRouteInput::is_twin_Set() const{
    return m_twin_isSet;
}

bool OAITestRouteInput::is_twin_Valid() const{
    return m_twin_isValid;
}

bool OAITestRouteInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_twin.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestRouteInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_route_isValid && true;
}

} // namespace OpenAPI
