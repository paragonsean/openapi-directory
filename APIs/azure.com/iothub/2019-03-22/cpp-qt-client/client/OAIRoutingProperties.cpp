/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutingProperties::OAIRoutingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutingProperties::OAIRoutingProperties() {
    this->initializeModel();
}

OAIRoutingProperties::~OAIRoutingProperties() {}

void OAIRoutingProperties::initializeModel() {

    m_endpoints_isSet = false;
    m_endpoints_isValid = false;

    m_fallback_route_isSet = false;
    m_fallback_route_isValid = false;

    m_routes_isSet = false;
    m_routes_isValid = false;
}

void OAIRoutingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutingProperties::fromJsonObject(QJsonObject json) {

    m_endpoints_isValid = ::OpenAPI::fromJsonValue(m_endpoints, json[QString("endpoints")]);
    m_endpoints_isSet = !json[QString("endpoints")].isNull() && m_endpoints_isValid;

    m_fallback_route_isValid = ::OpenAPI::fromJsonValue(m_fallback_route, json[QString("fallbackRoute")]);
    m_fallback_route_isSet = !json[QString("fallbackRoute")].isNull() && m_fallback_route_isValid;

    m_routes_isValid = ::OpenAPI::fromJsonValue(m_routes, json[QString("routes")]);
    m_routes_isSet = !json[QString("routes")].isNull() && m_routes_isValid;
}

QString OAIRoutingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoints.isSet()) {
        obj.insert(QString("endpoints"), ::OpenAPI::toJsonValue(m_endpoints));
    }
    if (m_fallback_route.isSet()) {
        obj.insert(QString("fallbackRoute"), ::OpenAPI::toJsonValue(m_fallback_route));
    }
    if (m_routes.size() > 0) {
        obj.insert(QString("routes"), ::OpenAPI::toJsonValue(m_routes));
    }
    return obj;
}

OAIRoutingEndpoints OAIRoutingProperties::getEndpoints() const {
    return m_endpoints;
}
void OAIRoutingProperties::setEndpoints(const OAIRoutingEndpoints &endpoints) {
    m_endpoints = endpoints;
    m_endpoints_isSet = true;
}

bool OAIRoutingProperties::is_endpoints_Set() const{
    return m_endpoints_isSet;
}

bool OAIRoutingProperties::is_endpoints_Valid() const{
    return m_endpoints_isValid;
}

OAIFallbackRouteProperties OAIRoutingProperties::getFallbackRoute() const {
    return m_fallback_route;
}
void OAIRoutingProperties::setFallbackRoute(const OAIFallbackRouteProperties &fallback_route) {
    m_fallback_route = fallback_route;
    m_fallback_route_isSet = true;
}

bool OAIRoutingProperties::is_fallback_route_Set() const{
    return m_fallback_route_isSet;
}

bool OAIRoutingProperties::is_fallback_route_Valid() const{
    return m_fallback_route_isValid;
}

QList<OAIRouteProperties> OAIRoutingProperties::getRoutes() const {
    return m_routes;
}
void OAIRoutingProperties::setRoutes(const QList<OAIRouteProperties> &routes) {
    m_routes = routes;
    m_routes_isSet = true;
}

bool OAIRoutingProperties::is_routes_Set() const{
    return m_routes_isSet;
}

bool OAIRoutingProperties::is_routes_Valid() const{
    return m_routes_isValid;
}

bool OAIRoutingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_route.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
