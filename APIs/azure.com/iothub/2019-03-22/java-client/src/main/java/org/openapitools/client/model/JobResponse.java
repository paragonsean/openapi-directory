/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Job Response object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:53.784805-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobResponse {
  public static final String SERIALIZED_NAME_END_TIME_UTC = "endTimeUtc";
  @SerializedName(SERIALIZED_NAME_END_TIME_UTC)
  private String endTimeUtc;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failureReason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_PARENT_JOB_ID = "parentJobId";
  @SerializedName(SERIALIZED_NAME_PARENT_JOB_ID)
  private String parentJobId;

  public static final String SERIALIZED_NAME_START_TIME_UTC = "startTimeUtc";
  @SerializedName(SERIALIZED_NAME_START_TIME_UTC)
  private String startTimeUtc;

  /**
   * The status of the job.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("unknown"),
    
    ENQUEUED("enqueued"),
    
    RUNNING("running"),
    
    COMPLETED("completed"),
    
    FAILED("failed"),
    
    CANCELLED("cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  /**
   * The type of the job.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    UNKNOWN("unknown"),
    
    EXPORT("export"),
    
    IMPORT("import"),
    
    BACKUP("backup"),
    
    READ_DEVICE_PROPERTIES("readDeviceProperties"),
    
    WRITE_DEVICE_PROPERTIES("writeDeviceProperties"),
    
    UPDATE_DEVICE_CONFIGURATION("updateDeviceConfiguration"),
    
    REBOOT_DEVICE("rebootDevice"),
    
    FACTORY_RESET_DEVICE("factoryResetDevice"),
    
    FIRMWARE_UPDATE("firmwareUpdate");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public JobResponse() {
  }

  public JobResponse(
     String endTimeUtc, 
     String failureReason, 
     String jobId, 
     String parentJobId, 
     String startTimeUtc, 
     StatusEnum status, 
     String statusMessage, 
     TypeEnum type
  ) {
    this();
    this.endTimeUtc = endTimeUtc;
    this.failureReason = failureReason;
    this.jobId = jobId;
    this.parentJobId = parentJobId;
    this.startTimeUtc = startTimeUtc;
    this.status = status;
    this.statusMessage = statusMessage;
    this.type = type;
  }

  /**
   * The time the job stopped processing.
   * @return endTimeUtc
   */
  @javax.annotation.Nullable
  public String getEndTimeUtc() {
    return endTimeUtc;
  }



  /**
   * If status &#x3D;&#x3D; failed, this string containing the reason for the failure.
   * @return failureReason
   */
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }



  /**
   * The job identifier.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }



  /**
   * The job identifier of the parent job, if any.
   * @return parentJobId
   */
  @javax.annotation.Nullable
  public String getParentJobId() {
    return parentJobId;
  }



  /**
   * The start time of the job.
   * @return startTimeUtc
   */
  @javax.annotation.Nullable
  public String getStartTimeUtc() {
    return startTimeUtc;
  }



  /**
   * The status of the job.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * The status message for the job.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }



  /**
   * The type of the job.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobResponse jobResponse = (JobResponse) o;
    return Objects.equals(this.endTimeUtc, jobResponse.endTimeUtc) &&
        Objects.equals(this.failureReason, jobResponse.failureReason) &&
        Objects.equals(this.jobId, jobResponse.jobId) &&
        Objects.equals(this.parentJobId, jobResponse.parentJobId) &&
        Objects.equals(this.startTimeUtc, jobResponse.startTimeUtc) &&
        Objects.equals(this.status, jobResponse.status) &&
        Objects.equals(this.statusMessage, jobResponse.statusMessage) &&
        Objects.equals(this.type, jobResponse.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimeUtc, failureReason, jobId, parentJobId, startTimeUtc, status, statusMessage, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobResponse {\n");
    sb.append("    endTimeUtc: ").append(toIndentedString(endTimeUtc)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    parentJobId: ").append(toIndentedString(parentJobId)).append("\n");
    sb.append("    startTimeUtc: ").append(toIndentedString(startTimeUtc)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTimeUtc");
    openapiFields.add("failureReason");
    openapiFields.add("jobId");
    openapiFields.add("parentJobId");
    openapiFields.add("startTimeUtc");
    openapiFields.add("status");
    openapiFields.add("statusMessage");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobResponse is not found in the empty JSON string", JobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endTimeUtc") != null && !jsonObj.get("endTimeUtc").isJsonNull()) && !jsonObj.get("endTimeUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTimeUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTimeUtc").toString()));
      }
      if ((jsonObj.get("failureReason") != null && !jsonObj.get("failureReason").isJsonNull()) && !jsonObj.get("failureReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureReason").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("parentJobId") != null && !jsonObj.get("parentJobId").isJsonNull()) && !jsonObj.get("parentJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentJobId").toString()));
      }
      if ((jsonObj.get("startTimeUtc") != null && !jsonObj.get("startTimeUtc").isJsonNull()) && !jsonObj.get("startTimeUtc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTimeUtc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTimeUtc").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<JobResponse>() {
           @Override
           public void write(JsonWriter out, JobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobResponse
   * @throws IOException if the JSON string is invalid with respect to JobResponse
   */
  public static JobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobResponse.class);
  }

  /**
   * Convert an instance of JobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

