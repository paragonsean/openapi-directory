/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Azure Storage endpoint for file upload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:53.784805-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageEndpointProperties {
  public static final String SERIALIZED_NAME_CONNECTION_STRING = "connectionString";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING)
  private String connectionString;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_SAS_TTL_AS_ISO8601 = "sasTtlAsIso8601";
  @SerializedName(SERIALIZED_NAME_SAS_TTL_AS_ISO8601)
  private String sasTtlAsIso8601;

  public StorageEndpointProperties() {
  }

  public StorageEndpointProperties connectionString(String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  /**
   * The connection string for the Azure Storage account to which files are uploaded.
   * @return connectionString
   */
  @javax.annotation.Nonnull
  public String getConnectionString() {
    return connectionString;
  }

  public void setConnectionString(String connectionString) {
    this.connectionString = connectionString;
  }


  public StorageEndpointProperties containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * The name of the root container where you upload files. The container need not exist but should be creatable using the connectionString specified.
   * @return containerName
   */
  @javax.annotation.Nonnull
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public StorageEndpointProperties sasTtlAsIso8601(String sasTtlAsIso8601) {
    this.sasTtlAsIso8601 = sasTtlAsIso8601;
    return this;
  }

  /**
   * The period of time for which the SAS URI generated by IoT Hub for file upload is valid. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-file-upload#file-upload-notification-configuration-options.
   * @return sasTtlAsIso8601
   */
  @javax.annotation.Nullable
  public String getSasTtlAsIso8601() {
    return sasTtlAsIso8601;
  }

  public void setSasTtlAsIso8601(String sasTtlAsIso8601) {
    this.sasTtlAsIso8601 = sasTtlAsIso8601;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageEndpointProperties storageEndpointProperties = (StorageEndpointProperties) o;
    return Objects.equals(this.connectionString, storageEndpointProperties.connectionString) &&
        Objects.equals(this.containerName, storageEndpointProperties.containerName) &&
        Objects.equals(this.sasTtlAsIso8601, storageEndpointProperties.sasTtlAsIso8601);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionString, containerName, sasTtlAsIso8601);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageEndpointProperties {\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    sasTtlAsIso8601: ").append(toIndentedString(sasTtlAsIso8601)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionString");
    openapiFields.add("containerName");
    openapiFields.add("sasTtlAsIso8601");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectionString");
    openapiRequiredFields.add("containerName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageEndpointProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageEndpointProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageEndpointProperties is not found in the empty JSON string", StorageEndpointProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageEndpointProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageEndpointProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StorageEndpointProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionString").toString()));
      }
      if (!jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("sasTtlAsIso8601") != null && !jsonObj.get("sasTtlAsIso8601").isJsonNull()) && !jsonObj.get("sasTtlAsIso8601").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sasTtlAsIso8601` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sasTtlAsIso8601").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageEndpointProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageEndpointProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageEndpointProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageEndpointProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageEndpointProperties>() {
           @Override
           public void write(JsonWriter out, StorageEndpointProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageEndpointProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageEndpointProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageEndpointProperties
   * @throws IOException if the JSON string is invalid with respect to StorageEndpointProperties
   */
  public static StorageEndpointProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageEndpointProperties.class);
  }

  /**
   * Convert an instance of StorageEndpointProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

