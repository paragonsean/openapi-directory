/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RouteProperties from './RouteProperties';
import RoutingMessage from './RoutingMessage';
import RoutingTwin from './RoutingTwin';

/**
 * The TestRouteInput model module.
 * @module model/TestRouteInput
 * @version 2019-03-22
 */
class TestRouteInput {
    /**
     * Constructs a new <code>TestRouteInput</code>.
     * Input for testing route
     * @alias module:model/TestRouteInput
     * @param route {module:model/RouteProperties} 
     */
    constructor(route) { 
        
        TestRouteInput.initialize(this, route);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, route) { 
        obj['route'] = route;
    }

    /**
     * Constructs a <code>TestRouteInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRouteInput} obj Optional instance to populate.
     * @return {module:model/TestRouteInput} The populated <code>TestRouteInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRouteInput();

            if (data.hasOwnProperty('message')) {
                obj['message'] = RoutingMessage.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('route')) {
                obj['route'] = RouteProperties.constructFromObject(data['route']);
            }
            if (data.hasOwnProperty('twin')) {
                obj['twin'] = RoutingTwin.constructFromObject(data['twin']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestRouteInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestRouteInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestRouteInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `message`
        if (data['message']) { // data not null
          RoutingMessage.validateJSON(data['message']);
        }
        // validate the optional field `route`
        if (data['route']) { // data not null
          RouteProperties.validateJSON(data['route']);
        }
        // validate the optional field `twin`
        if (data['twin']) { // data not null
          RoutingTwin.validateJSON(data['twin']);
        }

        return true;
    }


}

TestRouteInput.RequiredProperties = ["route"];

/**
 * @member {module:model/RoutingMessage} message
 */
TestRouteInput.prototype['message'] = undefined;

/**
 * @member {module:model/RouteProperties} route
 */
TestRouteInput.prototype['route'] = undefined;

/**
 * @member {module:model/RoutingTwin} twin
 */
TestRouteInput.prototype['twin'] = undefined;






export default TestRouteInput;

