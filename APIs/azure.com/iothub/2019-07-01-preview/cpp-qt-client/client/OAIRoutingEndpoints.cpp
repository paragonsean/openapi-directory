/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingEndpoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutingEndpoints::OAIRoutingEndpoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutingEndpoints::OAIRoutingEndpoints() {
    this->initializeModel();
}

OAIRoutingEndpoints::~OAIRoutingEndpoints() {}

void OAIRoutingEndpoints::initializeModel() {

    m_event_hubs_isSet = false;
    m_event_hubs_isValid = false;

    m_service_bus_queues_isSet = false;
    m_service_bus_queues_isValid = false;

    m_service_bus_topics_isSet = false;
    m_service_bus_topics_isValid = false;

    m_storage_containers_isSet = false;
    m_storage_containers_isValid = false;
}

void OAIRoutingEndpoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutingEndpoints::fromJsonObject(QJsonObject json) {

    m_event_hubs_isValid = ::OpenAPI::fromJsonValue(m_event_hubs, json[QString("eventHubs")]);
    m_event_hubs_isSet = !json[QString("eventHubs")].isNull() && m_event_hubs_isValid;

    m_service_bus_queues_isValid = ::OpenAPI::fromJsonValue(m_service_bus_queues, json[QString("serviceBusQueues")]);
    m_service_bus_queues_isSet = !json[QString("serviceBusQueues")].isNull() && m_service_bus_queues_isValid;

    m_service_bus_topics_isValid = ::OpenAPI::fromJsonValue(m_service_bus_topics, json[QString("serviceBusTopics")]);
    m_service_bus_topics_isSet = !json[QString("serviceBusTopics")].isNull() && m_service_bus_topics_isValid;

    m_storage_containers_isValid = ::OpenAPI::fromJsonValue(m_storage_containers, json[QString("storageContainers")]);
    m_storage_containers_isSet = !json[QString("storageContainers")].isNull() && m_storage_containers_isValid;
}

QString OAIRoutingEndpoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutingEndpoints::asJsonObject() const {
    QJsonObject obj;
    if (m_event_hubs.size() > 0) {
        obj.insert(QString("eventHubs"), ::OpenAPI::toJsonValue(m_event_hubs));
    }
    if (m_service_bus_queues.size() > 0) {
        obj.insert(QString("serviceBusQueues"), ::OpenAPI::toJsonValue(m_service_bus_queues));
    }
    if (m_service_bus_topics.size() > 0) {
        obj.insert(QString("serviceBusTopics"), ::OpenAPI::toJsonValue(m_service_bus_topics));
    }
    if (m_storage_containers.size() > 0) {
        obj.insert(QString("storageContainers"), ::OpenAPI::toJsonValue(m_storage_containers));
    }
    return obj;
}

QList<OAIRoutingEventHubProperties> OAIRoutingEndpoints::getEventHubs() const {
    return m_event_hubs;
}
void OAIRoutingEndpoints::setEventHubs(const QList<OAIRoutingEventHubProperties> &event_hubs) {
    m_event_hubs = event_hubs;
    m_event_hubs_isSet = true;
}

bool OAIRoutingEndpoints::is_event_hubs_Set() const{
    return m_event_hubs_isSet;
}

bool OAIRoutingEndpoints::is_event_hubs_Valid() const{
    return m_event_hubs_isValid;
}

QList<OAIRoutingServiceBusQueueEndpointProperties> OAIRoutingEndpoints::getServiceBusQueues() const {
    return m_service_bus_queues;
}
void OAIRoutingEndpoints::setServiceBusQueues(const QList<OAIRoutingServiceBusQueueEndpointProperties> &service_bus_queues) {
    m_service_bus_queues = service_bus_queues;
    m_service_bus_queues_isSet = true;
}

bool OAIRoutingEndpoints::is_service_bus_queues_Set() const{
    return m_service_bus_queues_isSet;
}

bool OAIRoutingEndpoints::is_service_bus_queues_Valid() const{
    return m_service_bus_queues_isValid;
}

QList<OAIRoutingServiceBusTopicEndpointProperties> OAIRoutingEndpoints::getServiceBusTopics() const {
    return m_service_bus_topics;
}
void OAIRoutingEndpoints::setServiceBusTopics(const QList<OAIRoutingServiceBusTopicEndpointProperties> &service_bus_topics) {
    m_service_bus_topics = service_bus_topics;
    m_service_bus_topics_isSet = true;
}

bool OAIRoutingEndpoints::is_service_bus_topics_Set() const{
    return m_service_bus_topics_isSet;
}

bool OAIRoutingEndpoints::is_service_bus_topics_Valid() const{
    return m_service_bus_topics_isValid;
}

QList<OAIRoutingStorageContainerProperties> OAIRoutingEndpoints::getStorageContainers() const {
    return m_storage_containers;
}
void OAIRoutingEndpoints::setStorageContainers(const QList<OAIRoutingStorageContainerProperties> &storage_containers) {
    m_storage_containers = storage_containers;
    m_storage_containers_isSet = true;
}

bool OAIRoutingEndpoints::is_storage_containers_Set() const{
    return m_storage_containers_isSet;
}

bool OAIRoutingEndpoints::is_storage_containers_Valid() const{
    return m_storage_containers_isValid;
}

bool OAIRoutingEndpoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_hubs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_queues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutingEndpoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
