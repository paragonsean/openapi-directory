/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotHubProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotHubProperties::OAIIotHubProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotHubProperties::OAIIotHubProperties() {
    this->initializeModel();
}

OAIIotHubProperties::~OAIIotHubProperties() {}

void OAIIotHubProperties::initializeModel() {

    m_authorization_policies_isSet = false;
    m_authorization_policies_isValid = false;

    m_cloud_to_device_isSet = false;
    m_cloud_to_device_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_device_streams_isSet = false;
    m_device_streams_isValid = false;

    m_enable_file_upload_notifications_isSet = false;
    m_enable_file_upload_notifications_isValid = false;

    m_event_hub_endpoints_isSet = false;
    m_event_hub_endpoints_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_ip_filter_rules_isSet = false;
    m_ip_filter_rules_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_messaging_endpoints_isSet = false;
    m_messaging_endpoints_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_routing_isSet = false;
    m_routing_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_endpoints_isSet = false;
    m_storage_endpoints_isValid = false;
}

void OAIIotHubProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotHubProperties::fromJsonObject(QJsonObject json) {

    m_authorization_policies_isValid = ::OpenAPI::fromJsonValue(m_authorization_policies, json[QString("authorizationPolicies")]);
    m_authorization_policies_isSet = !json[QString("authorizationPolicies")].isNull() && m_authorization_policies_isValid;

    m_cloud_to_device_isValid = ::OpenAPI::fromJsonValue(m_cloud_to_device, json[QString("cloudToDevice")]);
    m_cloud_to_device_isSet = !json[QString("cloudToDevice")].isNull() && m_cloud_to_device_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_device_streams_isValid = ::OpenAPI::fromJsonValue(m_device_streams, json[QString("deviceStreams")]);
    m_device_streams_isSet = !json[QString("deviceStreams")].isNull() && m_device_streams_isValid;

    m_enable_file_upload_notifications_isValid = ::OpenAPI::fromJsonValue(m_enable_file_upload_notifications, json[QString("enableFileUploadNotifications")]);
    m_enable_file_upload_notifications_isSet = !json[QString("enableFileUploadNotifications")].isNull() && m_enable_file_upload_notifications_isValid;

    m_event_hub_endpoints_isValid = ::OpenAPI::fromJsonValue(m_event_hub_endpoints, json[QString("eventHubEndpoints")]);
    m_event_hub_endpoints_isSet = !json[QString("eventHubEndpoints")].isNull() && m_event_hub_endpoints_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_ip_filter_rules_isValid = ::OpenAPI::fromJsonValue(m_ip_filter_rules, json[QString("ipFilterRules")]);
    m_ip_filter_rules_isSet = !json[QString("ipFilterRules")].isNull() && m_ip_filter_rules_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_messaging_endpoints_isValid = ::OpenAPI::fromJsonValue(m_messaging_endpoints, json[QString("messagingEndpoints")]);
    m_messaging_endpoints_isSet = !json[QString("messagingEndpoints")].isNull() && m_messaging_endpoints_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_routing_isValid = ::OpenAPI::fromJsonValue(m_routing, json[QString("routing")]);
    m_routing_isSet = !json[QString("routing")].isNull() && m_routing_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_endpoints_isValid = ::OpenAPI::fromJsonValue(m_storage_endpoints, json[QString("storageEndpoints")]);
    m_storage_endpoints_isSet = !json[QString("storageEndpoints")].isNull() && m_storage_endpoints_isValid;
}

QString OAIIotHubProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotHubProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_policies.size() > 0) {
        obj.insert(QString("authorizationPolicies"), ::OpenAPI::toJsonValue(m_authorization_policies));
    }
    if (m_cloud_to_device.isSet()) {
        obj.insert(QString("cloudToDevice"), ::OpenAPI::toJsonValue(m_cloud_to_device));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_device_streams.isSet()) {
        obj.insert(QString("deviceStreams"), ::OpenAPI::toJsonValue(m_device_streams));
    }
    if (m_enable_file_upload_notifications_isSet) {
        obj.insert(QString("enableFileUploadNotifications"), ::OpenAPI::toJsonValue(m_enable_file_upload_notifications));
    }
    if (m_event_hub_endpoints.size() > 0) {
        obj.insert(QString("eventHubEndpoints"), ::OpenAPI::toJsonValue(m_event_hub_endpoints));
    }
    if (m_features_isSet) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_ip_filter_rules.size() > 0) {
        obj.insert(QString("ipFilterRules"), ::OpenAPI::toJsonValue(m_ip_filter_rules));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_messaging_endpoints.size() > 0) {
        obj.insert(QString("messagingEndpoints"), ::OpenAPI::toJsonValue(m_messaging_endpoints));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_routing.isSet()) {
        obj.insert(QString("routing"), ::OpenAPI::toJsonValue(m_routing));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_endpoints.size() > 0) {
        obj.insert(QString("storageEndpoints"), ::OpenAPI::toJsonValue(m_storage_endpoints));
    }
    return obj;
}

QList<OAISharedAccessSignatureAuthorizationRule> OAIIotHubProperties::getAuthorizationPolicies() const {
    return m_authorization_policies;
}
void OAIIotHubProperties::setAuthorizationPolicies(const QList<OAISharedAccessSignatureAuthorizationRule> &authorization_policies) {
    m_authorization_policies = authorization_policies;
    m_authorization_policies_isSet = true;
}

bool OAIIotHubProperties::is_authorization_policies_Set() const{
    return m_authorization_policies_isSet;
}

bool OAIIotHubProperties::is_authorization_policies_Valid() const{
    return m_authorization_policies_isValid;
}

OAICloudToDeviceProperties OAIIotHubProperties::getCloudToDevice() const {
    return m_cloud_to_device;
}
void OAIIotHubProperties::setCloudToDevice(const OAICloudToDeviceProperties &cloud_to_device) {
    m_cloud_to_device = cloud_to_device;
    m_cloud_to_device_isSet = true;
}

bool OAIIotHubProperties::is_cloud_to_device_Set() const{
    return m_cloud_to_device_isSet;
}

bool OAIIotHubProperties::is_cloud_to_device_Valid() const{
    return m_cloud_to_device_isValid;
}

QString OAIIotHubProperties::getComments() const {
    return m_comments;
}
void OAIIotHubProperties::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIIotHubProperties::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIIotHubProperties::is_comments_Valid() const{
    return m_comments_isValid;
}

OAIIotHubProperties_deviceStreams OAIIotHubProperties::getDeviceStreams() const {
    return m_device_streams;
}
void OAIIotHubProperties::setDeviceStreams(const OAIIotHubProperties_deviceStreams &device_streams) {
    m_device_streams = device_streams;
    m_device_streams_isSet = true;
}

bool OAIIotHubProperties::is_device_streams_Set() const{
    return m_device_streams_isSet;
}

bool OAIIotHubProperties::is_device_streams_Valid() const{
    return m_device_streams_isValid;
}

bool OAIIotHubProperties::isEnableFileUploadNotifications() const {
    return m_enable_file_upload_notifications;
}
void OAIIotHubProperties::setEnableFileUploadNotifications(const bool &enable_file_upload_notifications) {
    m_enable_file_upload_notifications = enable_file_upload_notifications;
    m_enable_file_upload_notifications_isSet = true;
}

bool OAIIotHubProperties::is_enable_file_upload_notifications_Set() const{
    return m_enable_file_upload_notifications_isSet;
}

bool OAIIotHubProperties::is_enable_file_upload_notifications_Valid() const{
    return m_enable_file_upload_notifications_isValid;
}

QMap<QString, OAIEventHubProperties> OAIIotHubProperties::getEventHubEndpoints() const {
    return m_event_hub_endpoints;
}
void OAIIotHubProperties::setEventHubEndpoints(const QMap<QString, OAIEventHubProperties> &event_hub_endpoints) {
    m_event_hub_endpoints = event_hub_endpoints;
    m_event_hub_endpoints_isSet = true;
}

bool OAIIotHubProperties::is_event_hub_endpoints_Set() const{
    return m_event_hub_endpoints_isSet;
}

bool OAIIotHubProperties::is_event_hub_endpoints_Valid() const{
    return m_event_hub_endpoints_isValid;
}

QString OAIIotHubProperties::getFeatures() const {
    return m_features;
}
void OAIIotHubProperties::setFeatures(const QString &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIIotHubProperties::is_features_Set() const{
    return m_features_isSet;
}

bool OAIIotHubProperties::is_features_Valid() const{
    return m_features_isValid;
}

QString OAIIotHubProperties::getHostName() const {
    return m_host_name;
}
void OAIIotHubProperties::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIIotHubProperties::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIIotHubProperties::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QList<OAIIpFilterRule> OAIIotHubProperties::getIpFilterRules() const {
    return m_ip_filter_rules;
}
void OAIIotHubProperties::setIpFilterRules(const QList<OAIIpFilterRule> &ip_filter_rules) {
    m_ip_filter_rules = ip_filter_rules;
    m_ip_filter_rules_isSet = true;
}

bool OAIIotHubProperties::is_ip_filter_rules_Set() const{
    return m_ip_filter_rules_isSet;
}

bool OAIIotHubProperties::is_ip_filter_rules_Valid() const{
    return m_ip_filter_rules_isValid;
}

QList<OAIIotHubLocationDescription> OAIIotHubProperties::getLocations() const {
    return m_locations;
}
void OAIIotHubProperties::setLocations(const QList<OAIIotHubLocationDescription> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIIotHubProperties::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIIotHubProperties::is_locations_Valid() const{
    return m_locations_isValid;
}

QMap<QString, OAIMessagingEndpointProperties> OAIIotHubProperties::getMessagingEndpoints() const {
    return m_messaging_endpoints;
}
void OAIIotHubProperties::setMessagingEndpoints(const QMap<QString, OAIMessagingEndpointProperties> &messaging_endpoints) {
    m_messaging_endpoints = messaging_endpoints;
    m_messaging_endpoints_isSet = true;
}

bool OAIIotHubProperties::is_messaging_endpoints_Set() const{
    return m_messaging_endpoints_isSet;
}

bool OAIIotHubProperties::is_messaging_endpoints_Valid() const{
    return m_messaging_endpoints_isValid;
}

QString OAIIotHubProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIIotHubProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIIotHubProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIIotHubProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIRoutingProperties OAIIotHubProperties::getRouting() const {
    return m_routing;
}
void OAIIotHubProperties::setRouting(const OAIRoutingProperties &routing) {
    m_routing = routing;
    m_routing_isSet = true;
}

bool OAIIotHubProperties::is_routing_Set() const{
    return m_routing_isSet;
}

bool OAIIotHubProperties::is_routing_Valid() const{
    return m_routing_isValid;
}

QString OAIIotHubProperties::getState() const {
    return m_state;
}
void OAIIotHubProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIotHubProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIotHubProperties::is_state_Valid() const{
    return m_state_isValid;
}

QMap<QString, OAIStorageEndpointProperties> OAIIotHubProperties::getStorageEndpoints() const {
    return m_storage_endpoints;
}
void OAIIotHubProperties::setStorageEndpoints(const QMap<QString, OAIStorageEndpointProperties> &storage_endpoints) {
    m_storage_endpoints = storage_endpoints;
    m_storage_endpoints_isSet = true;
}

bool OAIIotHubProperties::is_storage_endpoints_Set() const{
    return m_storage_endpoints_isSet;
}

bool OAIIotHubProperties::is_storage_endpoints_Valid() const{
    return m_storage_endpoints_isValid;
}

bool OAIIotHubProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_to_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_streams.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_file_upload_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_hub_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_features_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_filter_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_messaging_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotHubProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
