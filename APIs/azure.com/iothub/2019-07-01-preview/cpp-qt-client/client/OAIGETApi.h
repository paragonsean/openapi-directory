/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGETApi_H
#define OAI_OAIGETApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEndpointHealthDataListResult.h"
#include "OAIErrorDetails.h"
#include "OAIEventHubConsumerGroupInfo.h"
#include "OAIEventHubConsumerGroupsListResult.h"
#include "OAIIotHubDescription.h"
#include "OAIIotHubDescriptionListResult.h"
#include "OAIIotHubQuotaMetricInfoListResult.h"
#include "OAIIotHubSkuDescriptionListResult.h"
#include "OAIJobResponse.h"
#include "OAIJobResponseListResult.h"
#include "OAIRegistryStatistics.h"
#include "OAIUserSubscriptionQuotaListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGETApi : public QObject {
    Q_OBJECT

public:
    OAIGETApi(const int timeOut = 0);
    ~OAIGETApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void iotHubResourceGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  iot_hub_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void iotHubResourceGetEndpointHealth(const QString &subscription_id, const QString &resource_group_name, const QString &iot_hub_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  event_hub_endpoint_name QString [required]
    * @param[in]  name QString [required]
    */
    virtual void iotHubResourceGetEventHubConsumerGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &event_hub_endpoint_name, const QString &name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  job_id QString [required]
    */
    virtual void iotHubResourceGetJob(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &job_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void iotHubResourceGetQuotaMetrics(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void iotHubResourceGetStats(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void iotHubResourceGetValidSkus(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void iotHubResourceListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void iotHubResourceListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  event_hub_endpoint_name QString [required]
    */
    virtual void iotHubResourceListEventHubConsumerGroups(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const QString &event_hub_endpoint_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void iotHubResourceListJobs(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void resourceProviderCommonGetSubscriptionQuota(const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void iotHubResourceGetCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceGetEndpointHealthCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceGetEventHubConsumerGroupCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceGetJobCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceGetQuotaMetricsCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceGetStatsCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceGetValidSkusCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceListEventHubConsumerGroupsCallback(OAIHttpRequestWorker *worker);
    void iotHubResourceListJobsCallback(OAIHttpRequestWorker *worker);
    void resourceProviderCommonGetSubscriptionQuotaCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void iotHubResourceGetSignal(OAIIotHubDescription summary);
    void iotHubResourceGetEndpointHealthSignal(OAIEndpointHealthDataListResult summary);
    void iotHubResourceGetEventHubConsumerGroupSignal(OAIEventHubConsumerGroupInfo summary);
    void iotHubResourceGetJobSignal(OAIJobResponse summary);
    void iotHubResourceGetQuotaMetricsSignal(OAIIotHubQuotaMetricInfoListResult summary);
    void iotHubResourceGetStatsSignal(OAIRegistryStatistics summary);
    void iotHubResourceGetValidSkusSignal(OAIIotHubSkuDescriptionListResult summary);
    void iotHubResourceListByResourceGroupSignal(OAIIotHubDescriptionListResult summary);
    void iotHubResourceListBySubscriptionSignal(OAIIotHubDescriptionListResult summary);
    void iotHubResourceListEventHubConsumerGroupsSignal(OAIEventHubConsumerGroupsListResult summary);
    void iotHubResourceListJobsSignal(OAIJobResponseListResult summary);
    void resourceProviderCommonGetSubscriptionQuotaSignal(OAIUserSubscriptionQuotaListResult summary);


    void iotHubResourceGetSignalFull(OAIHttpRequestWorker *worker, OAIIotHubDescription summary);
    void iotHubResourceGetEndpointHealthSignalFull(OAIHttpRequestWorker *worker, OAIEndpointHealthDataListResult summary);
    void iotHubResourceGetEventHubConsumerGroupSignalFull(OAIHttpRequestWorker *worker, OAIEventHubConsumerGroupInfo summary);
    void iotHubResourceGetJobSignalFull(OAIHttpRequestWorker *worker, OAIJobResponse summary);
    void iotHubResourceGetQuotaMetricsSignalFull(OAIHttpRequestWorker *worker, OAIIotHubQuotaMetricInfoListResult summary);
    void iotHubResourceGetStatsSignalFull(OAIHttpRequestWorker *worker, OAIRegistryStatistics summary);
    void iotHubResourceGetValidSkusSignalFull(OAIHttpRequestWorker *worker, OAIIotHubSkuDescriptionListResult summary);
    void iotHubResourceListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIIotHubDescriptionListResult summary);
    void iotHubResourceListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIIotHubDescriptionListResult summary);
    void iotHubResourceListEventHubConsumerGroupsSignalFull(OAIHttpRequestWorker *worker, OAIEventHubConsumerGroupsListResult summary);
    void iotHubResourceListJobsSignalFull(OAIHttpRequestWorker *worker, OAIJobResponseListResult summary);
    void resourceProviderCommonGetSubscriptionQuotaSignalFull(OAIHttpRequestWorker *worker, OAIUserSubscriptionQuotaListResult summary);

    Q_DECL_DEPRECATED_X("Use iotHubResourceGetSignalError() instead")
    void iotHubResourceGetSignalE(OAIIotHubDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetSignalError(OAIIotHubDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetEndpointHealthSignalError() instead")
    void iotHubResourceGetEndpointHealthSignalE(OAIEndpointHealthDataListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetEndpointHealthSignalError(OAIEndpointHealthDataListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetEventHubConsumerGroupSignalError() instead")
    void iotHubResourceGetEventHubConsumerGroupSignalE(OAIEventHubConsumerGroupInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetEventHubConsumerGroupSignalError(OAIEventHubConsumerGroupInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetJobSignalError() instead")
    void iotHubResourceGetJobSignalE(OAIJobResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetJobSignalError(OAIJobResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetQuotaMetricsSignalError() instead")
    void iotHubResourceGetQuotaMetricsSignalE(OAIIotHubQuotaMetricInfoListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetQuotaMetricsSignalError(OAIIotHubQuotaMetricInfoListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetStatsSignalError() instead")
    void iotHubResourceGetStatsSignalE(OAIRegistryStatistics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetStatsSignalError(OAIRegistryStatistics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetValidSkusSignalError() instead")
    void iotHubResourceGetValidSkusSignalE(OAIIotHubSkuDescriptionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetValidSkusSignalError(OAIIotHubSkuDescriptionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListByResourceGroupSignalError() instead")
    void iotHubResourceListByResourceGroupSignalE(OAIIotHubDescriptionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListByResourceGroupSignalError(OAIIotHubDescriptionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListBySubscriptionSignalError() instead")
    void iotHubResourceListBySubscriptionSignalE(OAIIotHubDescriptionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListBySubscriptionSignalError(OAIIotHubDescriptionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListEventHubConsumerGroupsSignalError() instead")
    void iotHubResourceListEventHubConsumerGroupsSignalE(OAIEventHubConsumerGroupsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListEventHubConsumerGroupsSignalError(OAIEventHubConsumerGroupsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListJobsSignalError() instead")
    void iotHubResourceListJobsSignalE(OAIJobResponseListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListJobsSignalError(OAIJobResponseListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceProviderCommonGetSubscriptionQuotaSignalError() instead")
    void resourceProviderCommonGetSubscriptionQuotaSignalE(OAIUserSubscriptionQuotaListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceProviderCommonGetSubscriptionQuotaSignalError(OAIUserSubscriptionQuotaListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use iotHubResourceGetSignalErrorFull() instead")
    void iotHubResourceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetEndpointHealthSignalErrorFull() instead")
    void iotHubResourceGetEndpointHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetEndpointHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetEventHubConsumerGroupSignalErrorFull() instead")
    void iotHubResourceGetEventHubConsumerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetEventHubConsumerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetJobSignalErrorFull() instead")
    void iotHubResourceGetJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetQuotaMetricsSignalErrorFull() instead")
    void iotHubResourceGetQuotaMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetQuotaMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetStatsSignalErrorFull() instead")
    void iotHubResourceGetStatsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetStatsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceGetValidSkusSignalErrorFull() instead")
    void iotHubResourceGetValidSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceGetValidSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListByResourceGroupSignalErrorFull() instead")
    void iotHubResourceListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListBySubscriptionSignalErrorFull() instead")
    void iotHubResourceListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListEventHubConsumerGroupsSignalErrorFull() instead")
    void iotHubResourceListEventHubConsumerGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListEventHubConsumerGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use iotHubResourceListJobsSignalErrorFull() instead")
    void iotHubResourceListJobsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void iotHubResourceListJobsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourceProviderCommonGetSubscriptionQuotaSignalErrorFull() instead")
    void resourceProviderCommonGetSubscriptionQuotaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourceProviderCommonGetSubscriptionQuotaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
