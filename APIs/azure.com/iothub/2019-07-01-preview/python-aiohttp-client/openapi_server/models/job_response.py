# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time_utc: str=None, failure_reason: str=None, job_id: str=None, parent_job_id: str=None, start_time_utc: str=None, status: str=None, status_message: str=None, type: str=None):
        """JobResponse - a model defined in OpenAPI

        :param end_time_utc: The end_time_utc of this JobResponse.
        :param failure_reason: The failure_reason of this JobResponse.
        :param job_id: The job_id of this JobResponse.
        :param parent_job_id: The parent_job_id of this JobResponse.
        :param start_time_utc: The start_time_utc of this JobResponse.
        :param status: The status of this JobResponse.
        :param status_message: The status_message of this JobResponse.
        :param type: The type of this JobResponse.
        """
        self.openapi_types = {
            'end_time_utc': str,
            'failure_reason': str,
            'job_id': str,
            'parent_job_id': str,
            'start_time_utc': str,
            'status': str,
            'status_message': str,
            'type': str
        }

        self.attribute_map = {
            'end_time_utc': 'endTimeUtc',
            'failure_reason': 'failureReason',
            'job_id': 'jobId',
            'parent_job_id': 'parentJobId',
            'start_time_utc': 'startTimeUtc',
            'status': 'status',
            'status_message': 'statusMessage',
            'type': 'type'
        }

        self._end_time_utc = end_time_utc
        self._failure_reason = failure_reason
        self._job_id = job_id
        self._parent_job_id = parent_job_id
        self._start_time_utc = start_time_utc
        self._status = status
        self._status_message = status_message
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobResponse of this JobResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time_utc(self):
        """Gets the end_time_utc of this JobResponse.

        The time the job stopped processing.

        :return: The end_time_utc of this JobResponse.
        :rtype: str
        """
        return self._end_time_utc

    @end_time_utc.setter
    def end_time_utc(self, end_time_utc):
        """Sets the end_time_utc of this JobResponse.

        The time the job stopped processing.

        :param end_time_utc: The end_time_utc of this JobResponse.
        :type end_time_utc: str
        """

        self._end_time_utc = end_time_utc

    @property
    def failure_reason(self):
        """Gets the failure_reason of this JobResponse.

        If status == failed, this string containing the reason for the failure.

        :return: The failure_reason of this JobResponse.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this JobResponse.

        If status == failed, this string containing the reason for the failure.

        :param failure_reason: The failure_reason of this JobResponse.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def job_id(self):
        """Gets the job_id of this JobResponse.

        The job identifier.

        :return: The job_id of this JobResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobResponse.

        The job identifier.

        :param job_id: The job_id of this JobResponse.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def parent_job_id(self):
        """Gets the parent_job_id of this JobResponse.

        The job identifier of the parent job, if any.

        :return: The parent_job_id of this JobResponse.
        :rtype: str
        """
        return self._parent_job_id

    @parent_job_id.setter
    def parent_job_id(self, parent_job_id):
        """Sets the parent_job_id of this JobResponse.

        The job identifier of the parent job, if any.

        :param parent_job_id: The parent_job_id of this JobResponse.
        :type parent_job_id: str
        """

        self._parent_job_id = parent_job_id

    @property
    def start_time_utc(self):
        """Gets the start_time_utc of this JobResponse.

        The start time of the job.

        :return: The start_time_utc of this JobResponse.
        :rtype: str
        """
        return self._start_time_utc

    @start_time_utc.setter
    def start_time_utc(self, start_time_utc):
        """Sets the start_time_utc of this JobResponse.

        The start time of the job.

        :param start_time_utc: The start_time_utc of this JobResponse.
        :type start_time_utc: str
        """

        self._start_time_utc = start_time_utc

    @property
    def status(self):
        """Gets the status of this JobResponse.

        The status of the job.

        :return: The status of this JobResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobResponse.

        The status of the job.

        :param status: The status of this JobResponse.
        :type status: str
        """
        allowed_values = ["unknown", "enqueued", "running", "completed", "failed", "cancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this JobResponse.

        The status message for the job.

        :return: The status_message of this JobResponse.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this JobResponse.

        The status message for the job.

        :param status_message: The status_message of this JobResponse.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def type(self):
        """Gets the type of this JobResponse.

        The type of the job.

        :return: The type of this JobResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JobResponse.

        The type of the job.

        :param type: The type of this JobResponse.
        :type type: str
        """
        allowed_values = ["unknown", "export", "import", "backup", "readDeviceProperties", "writeDeviceProperties", "updateDeviceConfiguration", "rebootDevice", "factoryResetDevice", "firmwareUpdate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
