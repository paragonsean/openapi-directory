# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointHealthData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_id: str=None, health_status: str=None):
        """EndpointHealthData - a model defined in OpenAPI

        :param endpoint_id: The endpoint_id of this EndpointHealthData.
        :param health_status: The health_status of this EndpointHealthData.
        """
        self.openapi_types = {
            'endpoint_id': str,
            'health_status': str
        }

        self.attribute_map = {
            'endpoint_id': 'endpointId',
            'health_status': 'healthStatus'
        }

        self._endpoint_id = endpoint_id
        self._health_status = health_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EndpointHealthData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EndpointHealthData of this EndpointHealthData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this EndpointHealthData.

        Id of the endpoint

        :return: The endpoint_id of this EndpointHealthData.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this EndpointHealthData.

        Id of the endpoint

        :param endpoint_id: The endpoint_id of this EndpointHealthData.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def health_status(self):
        """Gets the health_status of this EndpointHealthData.

        Health statuses have following meanings. The 'healthy' status shows that the endpoint is accepting messages as expected. The 'unhealthy' status shows that the endpoint is not accepting messages as expected and IoT Hub is retrying to send data to this endpoint. The status of an unhealthy endpoint will be updated to healthy when IoT Hub has established an eventually consistent state of health. The 'dead' status shows that the endpoint is not accepting messages, after IoT Hub retried sending messages for the retrial period. See IoT Hub metrics to identify errors and monitor issues with endpoints. The 'unknown' status shows that the IoT Hub has not established a connection with the endpoint. No messages have been delivered to or rejected from this endpoint

        :return: The health_status of this EndpointHealthData.
        :rtype: str
        """
        return self._health_status

    @health_status.setter
    def health_status(self, health_status):
        """Sets the health_status of this EndpointHealthData.

        Health statuses have following meanings. The 'healthy' status shows that the endpoint is accepting messages as expected. The 'unhealthy' status shows that the endpoint is not accepting messages as expected and IoT Hub is retrying to send data to this endpoint. The status of an unhealthy endpoint will be updated to healthy when IoT Hub has established an eventually consistent state of health. The 'dead' status shows that the endpoint is not accepting messages, after IoT Hub retried sending messages for the retrial period. See IoT Hub metrics to identify errors and monitor issues with endpoints. The 'unknown' status shows that the IoT Hub has not established a connection with the endpoint. No messages have been delivered to or rejected from this endpoint

        :param health_status: The health_status of this EndpointHealthData.
        :type health_status: str
        """
        allowed_values = ["unknown", "healthy", "unhealthy", "dead"]  # noqa: E501
        if health_status not in allowed_values:
            raise ValueError(
                "Invalid value for `health_status` ({0}), must be one of {1}"
                .format(health_status, allowed_values)
            )

        self._health_status = health_status
