/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IotHubDescription from '../model/IotHubDescription';
import TagsResource from '../model/TagsResource';

/**
* PATCH service.
* @module api/PATCHApi
* @version 2019-07-01-preview
*/
export default class PATCHApi {

    /**
    * Constructs a new PATCHApi. 
    * @alias module:api/PATCHApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iotHubResourceUpdate operation.
     * @callback module:api/PATCHApi~iotHubResourceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IotHubDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing IoT Hubs tags.
     * Update an existing IoT Hub tags. to update other fields use the CreateOrUpdate method
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName Resource group identifier.
     * @param {String} resourceName Name of iot hub to update.
     * @param {String} apiVersion The version of the API.
     * @param {module:model/TagsResource} iotHubTags Updated tag information to set into the iot hub instance.
     * @param {module:api/PATCHApi~iotHubResourceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IotHubDescription}
     */
    iotHubResourceUpdate(subscriptionId, resourceGroupName, resourceName, apiVersion, iotHubTags, callback) {
      let postBody = iotHubTags;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling iotHubResourceUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceUpdate");
      }
      // verify the required parameter 'iotHubTags' is set
      if (iotHubTags === undefined || iotHubTags === null) {
        throw new Error("Missing the required parameter 'iotHubTags' when calling iotHubResourceUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IotHubDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
