/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CertificateBodyDescription;
import org.openapitools.client.model.CertificateDescription;
import org.openapitools.client.model.CertificateListDescription;
import org.openapitools.client.model.CertificateVerificationDescription;
import org.openapitools.client.model.CertificateWithNonceDescription;
import org.openapitools.client.model.ErrorDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificatesCreateOrUpdate
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param certificateDescription The certificate body. (required)
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If certificate already exist and update was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If certificate didn&#39;t exist creation was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, CertificateBodyDescription certificateDescription, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateDescription;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, CertificateBodyDescription certificateDescription, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'certificateDescription' is set
        if (certificateDescription == null) {
            throw new ApiException("Missing the required parameter 'certificateDescription' when calling certificatesCreateOrUpdate(Async)");
        }

        return certificatesCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, certificateDescription, ifMatch, _callback);

    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param certificateDescription The certificate body. (required)
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate. (optional)
     * @return CertificateDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If certificate already exist and update was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If certificate didn&#39;t exist creation was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public CertificateDescription certificatesCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, CertificateBodyDescription certificateDescription, String ifMatch) throws ApiException {
        ApiResponse<CertificateDescription> localVarResp = certificatesCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, certificateDescription, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param certificateDescription The certificate body. (required)
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate. (optional)
     * @return ApiResponse&lt;CertificateDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If certificate already exist and update was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If certificate didn&#39;t exist creation was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateDescription> certificatesCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, CertificateBodyDescription certificateDescription, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = certificatesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, certificateDescription, ifMatch, null);
        Type localVarReturnType = new TypeToken<CertificateDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload the certificate to the IoT hub. (asynchronously)
     * Adds new or replaces existing certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param certificateDescription The certificate body. (required)
     * @param ifMatch ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If certificate already exist and update was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> If certificate didn&#39;t exist creation was successful, the operation returns HTTP status code of 201 (OK). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, CertificateBodyDescription certificateDescription, String ifMatch, final ApiCallback<CertificateDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, certificateDescription, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<CertificateDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesDelete
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Certificate has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling certificatesDelete(Async)");
        }

        return certificatesDeleteCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, _callback);

    }

    /**
     * Delete an X509 certificate.
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Certificate has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public void certificatesDelete(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch) throws ApiException {
        certificatesDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch);
    }

    /**
     * Delete an X509 certificate.
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Certificate has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificatesDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = certificatesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an X509 certificate. (asynchronously)
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Certificate has been deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Certificate does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGenerateVerificationCode
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGenerateVerificationCodeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGenerateVerificationCodeValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling certificatesGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesGenerateVerificationCode(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling certificatesGenerateVerificationCode(Async)");
        }

        return certificatesGenerateVerificationCodeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, _callback);

    }

    /**
     * Generate verification code for proof of possession flow.
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @return CertificateWithNonceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public CertificateWithNonceDescription certificatesGenerateVerificationCode(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch) throws ApiException {
        ApiResponse<CertificateWithNonceDescription> localVarResp = certificatesGenerateVerificationCodeWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Generate verification code for proof of possession flow.
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @return ApiResponse&lt;CertificateWithNonceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateWithNonceDescription> certificatesGenerateVerificationCodeWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = certificatesGenerateVerificationCodeValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, null);
        Type localVarReturnType = new TypeToken<CertificateWithNonceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate verification code for proof of possession flow. (asynchronously)
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGenerateVerificationCodeAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, final ApiCallback<CertificateWithNonceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGenerateVerificationCodeValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<CertificateWithNonceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGet
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesGet(Async)");
        }

        return certificatesGetCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, _callback);

    }

    /**
     * Get the certificate.
     * Returns the certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @return CertificateDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public CertificateDescription certificatesGet(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName) throws ApiException {
        ApiResponse<CertificateDescription> localVarResp = certificatesGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName);
        return localVarResp.getData();
    }

    /**
     * Get the certificate.
     * Returns the certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @return ApiResponse&lt;CertificateDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateDescription> certificatesGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName) throws ApiException {
        okhttp3.Call localVarCall = certificatesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, null);
        Type localVarReturnType = new TypeToken<CertificateDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the certificate. (asynchronously)
     * Returns the certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, final ApiCallback<CertificateDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, _callback);
        Type localVarReturnType = new TypeToken<CertificateDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesListByIotHub
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains all the certificate list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListByIotHubCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesListByIotHubValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesListByIotHub(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesListByIotHub(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesListByIotHub(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling certificatesListByIotHub(Async)");
        }

        return certificatesListByIotHubCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);

    }

    /**
     * Get the certificate list.
     * Returns the list of certificates.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @return CertificateListDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains all the certificate list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public CertificateListDescription certificatesListByIotHub(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        ApiResponse<CertificateListDescription> localVarResp = certificatesListByIotHubWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName);
        return localVarResp.getData();
    }

    /**
     * Get the certificate list.
     * Returns the list of certificates.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @return ApiResponse&lt;CertificateListDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains all the certificate list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateListDescription> certificatesListByIotHubWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = certificatesListByIotHubValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, null);
        Type localVarReturnType = new TypeToken<CertificateListDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the certificate list. (asynchronously)
     * Returns the list of certificates.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains all the certificate list. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListByIotHubAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback<CertificateListDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesListByIotHubValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);
        Type localVarReturnType = new TypeToken<CertificateListDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesVerify
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param certificateVerificationBody The name of the certificate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesVerifyCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, CertificateVerificationDescription certificateVerificationBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateVerificationBody;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesVerifyValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, CertificateVerificationDescription certificateVerificationBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesVerify(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesVerify(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesVerify(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling certificatesVerify(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesVerify(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling certificatesVerify(Async)");
        }

        // verify the required parameter 'certificateVerificationBody' is set
        if (certificateVerificationBody == null) {
            throw new ApiException("Missing the required parameter 'certificateVerificationBody' when calling certificatesVerify(Async)");
        }

        return certificatesVerifyCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, certificateVerificationBody, _callback);

    }

    /**
     * Verify certificate&#39;s private key possession.
     * Verifies the certificate&#39;s private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param certificateVerificationBody The name of the certificate (required)
     * @return CertificateDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public CertificateDescription certificatesVerify(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, CertificateVerificationDescription certificateVerificationBody) throws ApiException {
        ApiResponse<CertificateDescription> localVarResp = certificatesVerifyWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, certificateVerificationBody);
        return localVarResp.getData();
    }

    /**
     * Verify certificate&#39;s private key possession.
     * Verifies the certificate&#39;s private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param certificateVerificationBody The name of the certificate (required)
     * @return ApiResponse&lt;CertificateDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateDescription> certificatesVerifyWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, CertificateVerificationDescription certificateVerificationBody) throws ApiException {
        okhttp3.Call localVarCall = certificatesVerifyValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, certificateVerificationBody, null);
        Type localVarReturnType = new TypeToken<CertificateDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify certificate&#39;s private key possession. (asynchronously)
     * Verifies the certificate&#39;s private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param certificateName The name of the certificate (required)
     * @param ifMatch ETag of the Certificate. (required)
     * @param certificateVerificationBody The name of the certificate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The body contains the certificate. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesVerifyAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String certificateName, String ifMatch, CertificateVerificationDescription certificateVerificationBody, final ApiCallback<CertificateDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesVerifyValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, certificateVerificationBody, _callback);
        Type localVarReturnType = new TypeToken<CertificateDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
