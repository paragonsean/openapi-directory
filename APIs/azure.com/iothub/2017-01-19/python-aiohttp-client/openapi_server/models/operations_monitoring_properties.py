# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperationsMonitoringProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: Dict[str, str]=None):
        """OperationsMonitoringProperties - a model defined in OpenAPI

        :param events: The events of this OperationsMonitoringProperties.
        """
        self.openapi_types = {
            'events': Dict[str, str]
        }

        self.attribute_map = {
            'events': 'events'
        }

        self._events = events

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationsMonitoringProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationsMonitoringProperties of this OperationsMonitoringProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this OperationsMonitoringProperties.


        :return: The events of this OperationsMonitoringProperties.
        :rtype: Dict[str, str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this OperationsMonitoringProperties.


        :param events: The events of this OperationsMonitoringProperties.
        :type events: Dict[str, str]
        """
        allowed_values = ["None", "Error", "Information", "Error, Information"]  # noqa: E501
        if not set(events.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `events` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(events.keys()) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._events = events
