# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FallbackRouteProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: str=None, endpoint_names: List[str]=None, is_enabled: bool=None, source: str=None):
        """FallbackRouteProperties - a model defined in OpenAPI

        :param condition: The condition of this FallbackRouteProperties.
        :param endpoint_names: The endpoint_names of this FallbackRouteProperties.
        :param is_enabled: The is_enabled of this FallbackRouteProperties.
        :param source: The source of this FallbackRouteProperties.
        """
        self.openapi_types = {
            'condition': str,
            'endpoint_names': List[str],
            'is_enabled': bool,
            'source': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'endpoint_names': 'endpointNames',
            'is_enabled': 'isEnabled',
            'source': 'source'
        }

        self._condition = condition
        self._endpoint_names = endpoint_names
        self._is_enabled = is_enabled
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FallbackRouteProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FallbackRouteProperties of this FallbackRouteProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this FallbackRouteProperties.

        The condition which is evaluated in order to apply the fallback route. If the condition is not provided it will evaluate to true by default. For grammar, See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language

        :return: The condition of this FallbackRouteProperties.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this FallbackRouteProperties.

        The condition which is evaluated in order to apply the fallback route. If the condition is not provided it will evaluate to true by default. For grammar, See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language

        :param condition: The condition of this FallbackRouteProperties.
        :type condition: str
        """

        self._condition = condition

    @property
    def endpoint_names(self):
        """Gets the endpoint_names of this FallbackRouteProperties.

        The list of endpoints to which the messages that satisfy the condition are routed to. Currently only 1 endpoint is allowed.

        :return: The endpoint_names of this FallbackRouteProperties.
        :rtype: List[str]
        """
        return self._endpoint_names

    @endpoint_names.setter
    def endpoint_names(self, endpoint_names):
        """Sets the endpoint_names of this FallbackRouteProperties.

        The list of endpoints to which the messages that satisfy the condition are routed to. Currently only 1 endpoint is allowed.

        :param endpoint_names: The endpoint_names of this FallbackRouteProperties.
        :type endpoint_names: List[str]
        """
        if endpoint_names is None:
            raise ValueError("Invalid value for `endpoint_names`, must not be `None`")
        if endpoint_names is not None and len(endpoint_names) > 1:
            raise ValueError("Invalid value for `endpoint_names`, number of items must be less than or equal to `1`")
        if endpoint_names is not None and len(endpoint_names) < 1:
            raise ValueError("Invalid value for `endpoint_names`, number of items must be greater than or equal to `1`")

        self._endpoint_names = endpoint_names

    @property
    def is_enabled(self):
        """Gets the is_enabled of this FallbackRouteProperties.

        Used to specify whether the fallback route is enabled or not.

        :return: The is_enabled of this FallbackRouteProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this FallbackRouteProperties.

        Used to specify whether the fallback route is enabled or not.

        :param is_enabled: The is_enabled of this FallbackRouteProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def source(self):
        """Gets the source of this FallbackRouteProperties.

        The source to which the routing rule is to be applied to. e.g. DeviceMessages

        :return: The source of this FallbackRouteProperties.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FallbackRouteProperties.

        The source to which the routing rule is to be applied to. e.g. DeviceMessages

        :param source: The source of this FallbackRouteProperties.
        :type source: str
        """
        allowed_values = ["DeviceMessages"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
