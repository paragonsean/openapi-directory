/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-01-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventHubProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventHubProperties::OAIEventHubProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventHubProperties::OAIEventHubProperties() {
    this->initializeModel();
}

OAIEventHubProperties::~OAIEventHubProperties() {}

void OAIEventHubProperties::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_partition_count_isSet = false;
    m_partition_count_isValid = false;

    m_partition_ids_isSet = false;
    m_partition_ids_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_retention_time_in_days_isSet = false;
    m_retention_time_in_days_isValid = false;
}

void OAIEventHubProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventHubProperties::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_partition_count_isValid = ::OpenAPI::fromJsonValue(m_partition_count, json[QString("partitionCount")]);
    m_partition_count_isSet = !json[QString("partitionCount")].isNull() && m_partition_count_isValid;

    m_partition_ids_isValid = ::OpenAPI::fromJsonValue(m_partition_ids, json[QString("partitionIds")]);
    m_partition_ids_isSet = !json[QString("partitionIds")].isNull() && m_partition_ids_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_retention_time_in_days_isValid = ::OpenAPI::fromJsonValue(m_retention_time_in_days, json[QString("retentionTimeInDays")]);
    m_retention_time_in_days_isSet = !json[QString("retentionTimeInDays")].isNull() && m_retention_time_in_days_isValid;
}

QString OAIEventHubProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventHubProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_partition_count_isSet) {
        obj.insert(QString("partitionCount"), ::OpenAPI::toJsonValue(m_partition_count));
    }
    if (m_partition_ids.size() > 0) {
        obj.insert(QString("partitionIds"), ::OpenAPI::toJsonValue(m_partition_ids));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_retention_time_in_days_isSet) {
        obj.insert(QString("retentionTimeInDays"), ::OpenAPI::toJsonValue(m_retention_time_in_days));
    }
    return obj;
}

QString OAIEventHubProperties::getEndpoint() const {
    return m_endpoint;
}
void OAIEventHubProperties::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIEventHubProperties::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIEventHubProperties::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

qint32 OAIEventHubProperties::getPartitionCount() const {
    return m_partition_count;
}
void OAIEventHubProperties::setPartitionCount(const qint32 &partition_count) {
    m_partition_count = partition_count;
    m_partition_count_isSet = true;
}

bool OAIEventHubProperties::is_partition_count_Set() const{
    return m_partition_count_isSet;
}

bool OAIEventHubProperties::is_partition_count_Valid() const{
    return m_partition_count_isValid;
}

QList<QString> OAIEventHubProperties::getPartitionIds() const {
    return m_partition_ids;
}
void OAIEventHubProperties::setPartitionIds(const QList<QString> &partition_ids) {
    m_partition_ids = partition_ids;
    m_partition_ids_isSet = true;
}

bool OAIEventHubProperties::is_partition_ids_Set() const{
    return m_partition_ids_isSet;
}

bool OAIEventHubProperties::is_partition_ids_Valid() const{
    return m_partition_ids_isValid;
}

QString OAIEventHubProperties::getPath() const {
    return m_path;
}
void OAIEventHubProperties::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIEventHubProperties::is_path_Set() const{
    return m_path_isSet;
}

bool OAIEventHubProperties::is_path_Valid() const{
    return m_path_isValid;
}

qint64 OAIEventHubProperties::getRetentionTimeInDays() const {
    return m_retention_time_in_days;
}
void OAIEventHubProperties::setRetentionTimeInDays(const qint64 &retention_time_in_days) {
    m_retention_time_in_days = retention_time_in_days;
    m_retention_time_in_days_isSet = true;
}

bool OAIEventHubProperties::is_retention_time_in_days_Set() const{
    return m_retention_time_in_days_isSet;
}

bool OAIEventHubProperties::is_retention_time_in_days_Valid() const{
    return m_retention_time_in_days_isValid;
}

bool OAIEventHubProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_time_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventHubProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
