/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-01-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageEndpointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageEndpointProperties::OAIStorageEndpointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageEndpointProperties::OAIStorageEndpointProperties() {
    this->initializeModel();
}

OAIStorageEndpointProperties::~OAIStorageEndpointProperties() {}

void OAIStorageEndpointProperties::initializeModel() {

    m_connection_string_isSet = false;
    m_connection_string_isValid = false;

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_sas_ttl_as_iso8601_isSet = false;
    m_sas_ttl_as_iso8601_isValid = false;
}

void OAIStorageEndpointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageEndpointProperties::fromJsonObject(QJsonObject json) {

    m_connection_string_isValid = ::OpenAPI::fromJsonValue(m_connection_string, json[QString("connectionString")]);
    m_connection_string_isSet = !json[QString("connectionString")].isNull() && m_connection_string_isValid;

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_sas_ttl_as_iso8601_isValid = ::OpenAPI::fromJsonValue(m_sas_ttl_as_iso8601, json[QString("sasTtlAsIso8601")]);
    m_sas_ttl_as_iso8601_isSet = !json[QString("sasTtlAsIso8601")].isNull() && m_sas_ttl_as_iso8601_isValid;
}

QString OAIStorageEndpointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageEndpointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_string_isSet) {
        obj.insert(QString("connectionString"), ::OpenAPI::toJsonValue(m_connection_string));
    }
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_sas_ttl_as_iso8601_isSet) {
        obj.insert(QString("sasTtlAsIso8601"), ::OpenAPI::toJsonValue(m_sas_ttl_as_iso8601));
    }
    return obj;
}

QString OAIStorageEndpointProperties::getConnectionString() const {
    return m_connection_string;
}
void OAIStorageEndpointProperties::setConnectionString(const QString &connection_string) {
    m_connection_string = connection_string;
    m_connection_string_isSet = true;
}

bool OAIStorageEndpointProperties::is_connection_string_Set() const{
    return m_connection_string_isSet;
}

bool OAIStorageEndpointProperties::is_connection_string_Valid() const{
    return m_connection_string_isValid;
}

QString OAIStorageEndpointProperties::getContainerName() const {
    return m_container_name;
}
void OAIStorageEndpointProperties::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIStorageEndpointProperties::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIStorageEndpointProperties::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIStorageEndpointProperties::getSasTtlAsIso8601() const {
    return m_sas_ttl_as_iso8601;
}
void OAIStorageEndpointProperties::setSasTtlAsIso8601(const QString &sas_ttl_as_iso8601) {
    m_sas_ttl_as_iso8601 = sas_ttl_as_iso8601;
    m_sas_ttl_as_iso8601_isSet = true;
}

bool OAIStorageEndpointProperties::is_sas_ttl_as_iso8601_Set() const{
    return m_sas_ttl_as_iso8601_isSet;
}

bool OAIStorageEndpointProperties::is_sas_ttl_as_iso8601_Valid() const{
    return m_sas_ttl_as_iso8601_isValid;
}

bool OAIStorageEndpointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sas_ttl_as_iso8601_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageEndpointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_connection_string_isValid && m_container_name_isValid && true;
}

} // namespace OpenAPI
