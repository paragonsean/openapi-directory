/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-01-19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpFilterRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpFilterRule::OAIIpFilterRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpFilterRule::OAIIpFilterRule() {
    this->initializeModel();
}

OAIIpFilterRule::~OAIIpFilterRule() {}

void OAIIpFilterRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_filter_name_isSet = false;
    m_filter_name_isValid = false;

    m_ip_mask_isSet = false;
    m_ip_mask_isValid = false;
}

void OAIIpFilterRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpFilterRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_filter_name_isValid = ::OpenAPI::fromJsonValue(m_filter_name, json[QString("filterName")]);
    m_filter_name_isSet = !json[QString("filterName")].isNull() && m_filter_name_isValid;

    m_ip_mask_isValid = ::OpenAPI::fromJsonValue(m_ip_mask, json[QString("ipMask")]);
    m_ip_mask_isSet = !json[QString("ipMask")].isNull() && m_ip_mask_isValid;
}

QString OAIIpFilterRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpFilterRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_filter_name_isSet) {
        obj.insert(QString("filterName"), ::OpenAPI::toJsonValue(m_filter_name));
    }
    if (m_ip_mask_isSet) {
        obj.insert(QString("ipMask"), ::OpenAPI::toJsonValue(m_ip_mask));
    }
    return obj;
}

QString OAIIpFilterRule::getAction() const {
    return m_action;
}
void OAIIpFilterRule::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIIpFilterRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIIpFilterRule::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIIpFilterRule::getFilterName() const {
    return m_filter_name;
}
void OAIIpFilterRule::setFilterName(const QString &filter_name) {
    m_filter_name = filter_name;
    m_filter_name_isSet = true;
}

bool OAIIpFilterRule::is_filter_name_Set() const{
    return m_filter_name_isSet;
}

bool OAIIpFilterRule::is_filter_name_Valid() const{
    return m_filter_name_isValid;
}

QString OAIIpFilterRule::getIpMask() const {
    return m_ip_mask;
}
void OAIIpFilterRule::setIpMask(const QString &ip_mask) {
    m_ip_mask = ip_mask;
    m_ip_mask_isSet = true;
}

bool OAIIpFilterRule::is_ip_mask_Set() const{
    return m_ip_mask_isSet;
}

bool OAIIpFilterRule::is_ip_mask_Valid() const{
    return m_ip_mask_isValid;
}

bool OAIIpFilterRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpFilterRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_filter_name_isValid && m_ip_mask_isValid && true;
}

} // namespace OpenAPI
