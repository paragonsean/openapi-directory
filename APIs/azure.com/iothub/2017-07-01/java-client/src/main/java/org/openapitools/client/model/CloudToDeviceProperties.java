/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FeedbackProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The IoT hub cloud-to-device messaging properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:41.723357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloudToDeviceProperties {
  public static final String SERIALIZED_NAME_DEFAULT_TTL_AS_ISO8601 = "defaultTtlAsIso8601";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TTL_AS_ISO8601)
  private String defaultTtlAsIso8601;

  public static final String SERIALIZED_NAME_FEEDBACK = "feedback";
  @SerializedName(SERIALIZED_NAME_FEEDBACK)
  private FeedbackProperties feedback;

  public static final String SERIALIZED_NAME_MAX_DELIVERY_COUNT = "maxDeliveryCount";
  @SerializedName(SERIALIZED_NAME_MAX_DELIVERY_COUNT)
  private Integer maxDeliveryCount;

  public CloudToDeviceProperties() {
  }

  public CloudToDeviceProperties defaultTtlAsIso8601(String defaultTtlAsIso8601) {
    this.defaultTtlAsIso8601 = defaultTtlAsIso8601;
    return this;
  }

  /**
   * The default time to live for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
   * @return defaultTtlAsIso8601
   */
  @javax.annotation.Nullable
  public String getDefaultTtlAsIso8601() {
    return defaultTtlAsIso8601;
  }

  public void setDefaultTtlAsIso8601(String defaultTtlAsIso8601) {
    this.defaultTtlAsIso8601 = defaultTtlAsIso8601;
  }


  public CloudToDeviceProperties feedback(FeedbackProperties feedback) {
    this.feedback = feedback;
    return this;
  }

  /**
   * Get feedback
   * @return feedback
   */
  @javax.annotation.Nullable
  public FeedbackProperties getFeedback() {
    return feedback;
  }

  public void setFeedback(FeedbackProperties feedback) {
    this.feedback = feedback;
  }


  public CloudToDeviceProperties maxDeliveryCount(Integer maxDeliveryCount) {
    this.maxDeliveryCount = maxDeliveryCount;
    return this;
  }

  /**
   * The max delivery count for cloud-to-device messages in the device queue. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging#cloud-to-device-messages.
   * minimum: 1
   * maximum: 100
   * @return maxDeliveryCount
   */
  @javax.annotation.Nullable
  public Integer getMaxDeliveryCount() {
    return maxDeliveryCount;
  }

  public void setMaxDeliveryCount(Integer maxDeliveryCount) {
    this.maxDeliveryCount = maxDeliveryCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloudToDeviceProperties cloudToDeviceProperties = (CloudToDeviceProperties) o;
    return Objects.equals(this.defaultTtlAsIso8601, cloudToDeviceProperties.defaultTtlAsIso8601) &&
        Objects.equals(this.feedback, cloudToDeviceProperties.feedback) &&
        Objects.equals(this.maxDeliveryCount, cloudToDeviceProperties.maxDeliveryCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultTtlAsIso8601, feedback, maxDeliveryCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloudToDeviceProperties {\n");
    sb.append("    defaultTtlAsIso8601: ").append(toIndentedString(defaultTtlAsIso8601)).append("\n");
    sb.append("    feedback: ").append(toIndentedString(feedback)).append("\n");
    sb.append("    maxDeliveryCount: ").append(toIndentedString(maxDeliveryCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultTtlAsIso8601");
    openapiFields.add("feedback");
    openapiFields.add("maxDeliveryCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloudToDeviceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloudToDeviceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloudToDeviceProperties is not found in the empty JSON string", CloudToDeviceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloudToDeviceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloudToDeviceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultTtlAsIso8601") != null && !jsonObj.get("defaultTtlAsIso8601").isJsonNull()) && !jsonObj.get("defaultTtlAsIso8601").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultTtlAsIso8601` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultTtlAsIso8601").toString()));
      }
      // validate the optional field `feedback`
      if (jsonObj.get("feedback") != null && !jsonObj.get("feedback").isJsonNull()) {
        FeedbackProperties.validateJsonElement(jsonObj.get("feedback"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloudToDeviceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloudToDeviceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloudToDeviceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloudToDeviceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CloudToDeviceProperties>() {
           @Override
           public void write(JsonWriter out, CloudToDeviceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloudToDeviceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloudToDeviceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloudToDeviceProperties
   * @throws IOException if the JSON string is invalid with respect to CloudToDeviceProperties
   */
  public static CloudToDeviceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloudToDeviceProperties.class);
  }

  /**
   * Convert an instance of CloudToDeviceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

