/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CloudToDeviceProperties;
import org.openapitools.client.model.EventHubProperties;
import org.openapitools.client.model.IpFilterRule;
import org.openapitools.client.model.MessagingEndpointProperties;
import org.openapitools.client.model.OperationsMonitoringProperties;
import org.openapitools.client.model.RoutingProperties;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRule;
import org.openapitools.client.model.StorageEndpointProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of an IoT hub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:41.723357-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IotHubProperties {
  public static final String SERIALIZED_NAME_AUTHORIZATION_POLICIES = "authorizationPolicies";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_POLICIES)
  private List<SharedAccessSignatureAuthorizationRule> authorizationPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_TO_DEVICE = "cloudToDevice";
  @SerializedName(SERIALIZED_NAME_CLOUD_TO_DEVICE)
  private CloudToDeviceProperties cloudToDevice;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_ENABLE_FILE_UPLOAD_NOTIFICATIONS = "enableFileUploadNotifications";
  @SerializedName(SERIALIZED_NAME_ENABLE_FILE_UPLOAD_NOTIFICATIONS)
  private Boolean enableFileUploadNotifications;

  public static final String SERIALIZED_NAME_EVENT_HUB_ENDPOINTS = "eventHubEndpoints";
  @SerializedName(SERIALIZED_NAME_EVENT_HUB_ENDPOINTS)
  private Map<String, EventHubProperties> eventHubEndpoints = new HashMap<>();

  /**
   * The capabilities and features enabled for the IoT hub.
   */
  @JsonAdapter(FeaturesEnum.Adapter.class)
  public enum FeaturesEnum {
    NONE("None"),
    
    DEVICE_MANAGEMENT("DeviceManagement");

    private String value;

    FeaturesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeaturesEnum fromValue(String value) {
      for (FeaturesEnum b : FeaturesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeaturesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeaturesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeaturesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeaturesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeaturesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private FeaturesEnum features;

  public static final String SERIALIZED_NAME_HOST_NAME = "hostName";
  @SerializedName(SERIALIZED_NAME_HOST_NAME)
  private String hostName;

  public static final String SERIALIZED_NAME_IP_FILTER_RULES = "ipFilterRules";
  @SerializedName(SERIALIZED_NAME_IP_FILTER_RULES)
  private List<IpFilterRule> ipFilterRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGING_ENDPOINTS = "messagingEndpoints";
  @SerializedName(SERIALIZED_NAME_MESSAGING_ENDPOINTS)
  private Map<String, MessagingEndpointProperties> messagingEndpoints = new HashMap<>();

  public static final String SERIALIZED_NAME_OPERATIONS_MONITORING_PROPERTIES = "operationsMonitoringProperties";
  @SerializedName(SERIALIZED_NAME_OPERATIONS_MONITORING_PROPERTIES)
  private OperationsMonitoringProperties operationsMonitoringProperties;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_ROUTING = "routing";
  @SerializedName(SERIALIZED_NAME_ROUTING)
  private RoutingProperties routing;

  public static final String SERIALIZED_NAME_STORAGE_ENDPOINTS = "storageEndpoints";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENDPOINTS)
  private Map<String, StorageEndpointProperties> storageEndpoints = new HashMap<>();

  public IotHubProperties() {
  }

  public IotHubProperties(
     String hostName, 
     String provisioningState
  ) {
    this();
    this.hostName = hostName;
    this.provisioningState = provisioningState;
  }

  public IotHubProperties authorizationPolicies(List<SharedAccessSignatureAuthorizationRule> authorizationPolicies) {
    this.authorizationPolicies = authorizationPolicies;
    return this;
  }

  public IotHubProperties addAuthorizationPoliciesItem(SharedAccessSignatureAuthorizationRule authorizationPoliciesItem) {
    if (this.authorizationPolicies == null) {
      this.authorizationPolicies = new ArrayList<>();
    }
    this.authorizationPolicies.add(authorizationPoliciesItem);
    return this;
  }

  /**
   * The shared access policies you can use to secure a connection to the IoT hub.
   * @return authorizationPolicies
   */
  @javax.annotation.Nullable
  public List<SharedAccessSignatureAuthorizationRule> getAuthorizationPolicies() {
    return authorizationPolicies;
  }

  public void setAuthorizationPolicies(List<SharedAccessSignatureAuthorizationRule> authorizationPolicies) {
    this.authorizationPolicies = authorizationPolicies;
  }


  public IotHubProperties cloudToDevice(CloudToDeviceProperties cloudToDevice) {
    this.cloudToDevice = cloudToDevice;
    return this;
  }

  /**
   * Get cloudToDevice
   * @return cloudToDevice
   */
  @javax.annotation.Nullable
  public CloudToDeviceProperties getCloudToDevice() {
    return cloudToDevice;
  }

  public void setCloudToDevice(CloudToDeviceProperties cloudToDevice) {
    this.cloudToDevice = cloudToDevice;
  }


  public IotHubProperties comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * IoT hub comments.
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public IotHubProperties enableFileUploadNotifications(Boolean enableFileUploadNotifications) {
    this.enableFileUploadNotifications = enableFileUploadNotifications;
    return this;
  }

  /**
   * If True, file upload notifications are enabled.
   * @return enableFileUploadNotifications
   */
  @javax.annotation.Nullable
  public Boolean getEnableFileUploadNotifications() {
    return enableFileUploadNotifications;
  }

  public void setEnableFileUploadNotifications(Boolean enableFileUploadNotifications) {
    this.enableFileUploadNotifications = enableFileUploadNotifications;
  }


  public IotHubProperties eventHubEndpoints(Map<String, EventHubProperties> eventHubEndpoints) {
    this.eventHubEndpoints = eventHubEndpoints;
    return this;
  }

  public IotHubProperties putEventHubEndpointsItem(String key, EventHubProperties eventHubEndpointsItem) {
    if (this.eventHubEndpoints == null) {
      this.eventHubEndpoints = new HashMap<>();
    }
    this.eventHubEndpoints.put(key, eventHubEndpointsItem);
    return this;
  }

  /**
   * The Event Hub-compatible endpoint properties. The possible keys to this dictionary are events and operationsMonitoringEvents. Both of these keys have to be present in the dictionary while making create or update calls for the IoT hub.
   * @return eventHubEndpoints
   */
  @javax.annotation.Nullable
  public Map<String, EventHubProperties> getEventHubEndpoints() {
    return eventHubEndpoints;
  }

  public void setEventHubEndpoints(Map<String, EventHubProperties> eventHubEndpoints) {
    this.eventHubEndpoints = eventHubEndpoints;
  }


  public IotHubProperties features(FeaturesEnum features) {
    this.features = features;
    return this;
  }

  /**
   * The capabilities and features enabled for the IoT hub.
   * @return features
   */
  @javax.annotation.Nullable
  public FeaturesEnum getFeatures() {
    return features;
  }

  public void setFeatures(FeaturesEnum features) {
    this.features = features;
  }


  /**
   * The name of the host.
   * @return hostName
   */
  @javax.annotation.Nullable
  public String getHostName() {
    return hostName;
  }



  public IotHubProperties ipFilterRules(List<IpFilterRule> ipFilterRules) {
    this.ipFilterRules = ipFilterRules;
    return this;
  }

  public IotHubProperties addIpFilterRulesItem(IpFilterRule ipFilterRulesItem) {
    if (this.ipFilterRules == null) {
      this.ipFilterRules = new ArrayList<>();
    }
    this.ipFilterRules.add(ipFilterRulesItem);
    return this;
  }

  /**
   * The IP filter rules.
   * @return ipFilterRules
   */
  @javax.annotation.Nullable
  public List<IpFilterRule> getIpFilterRules() {
    return ipFilterRules;
  }

  public void setIpFilterRules(List<IpFilterRule> ipFilterRules) {
    this.ipFilterRules = ipFilterRules;
  }


  public IotHubProperties messagingEndpoints(Map<String, MessagingEndpointProperties> messagingEndpoints) {
    this.messagingEndpoints = messagingEndpoints;
    return this;
  }

  public IotHubProperties putMessagingEndpointsItem(String key, MessagingEndpointProperties messagingEndpointsItem) {
    if (this.messagingEndpoints == null) {
      this.messagingEndpoints = new HashMap<>();
    }
    this.messagingEndpoints.put(key, messagingEndpointsItem);
    return this;
  }

  /**
   * The messaging endpoint properties for the file upload notification queue.
   * @return messagingEndpoints
   */
  @javax.annotation.Nullable
  public Map<String, MessagingEndpointProperties> getMessagingEndpoints() {
    return messagingEndpoints;
  }

  public void setMessagingEndpoints(Map<String, MessagingEndpointProperties> messagingEndpoints) {
    this.messagingEndpoints = messagingEndpoints;
  }


  public IotHubProperties operationsMonitoringProperties(OperationsMonitoringProperties operationsMonitoringProperties) {
    this.operationsMonitoringProperties = operationsMonitoringProperties;
    return this;
  }

  /**
   * Get operationsMonitoringProperties
   * @return operationsMonitoringProperties
   */
  @javax.annotation.Nullable
  public OperationsMonitoringProperties getOperationsMonitoringProperties() {
    return operationsMonitoringProperties;
  }

  public void setOperationsMonitoringProperties(OperationsMonitoringProperties operationsMonitoringProperties) {
    this.operationsMonitoringProperties = operationsMonitoringProperties;
  }


  /**
   * The provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public IotHubProperties routing(RoutingProperties routing) {
    this.routing = routing;
    return this;
  }

  /**
   * Get routing
   * @return routing
   */
  @javax.annotation.Nullable
  public RoutingProperties getRouting() {
    return routing;
  }

  public void setRouting(RoutingProperties routing) {
    this.routing = routing;
  }


  public IotHubProperties storageEndpoints(Map<String, StorageEndpointProperties> storageEndpoints) {
    this.storageEndpoints = storageEndpoints;
    return this;
  }

  public IotHubProperties putStorageEndpointsItem(String key, StorageEndpointProperties storageEndpointsItem) {
    if (this.storageEndpoints == null) {
      this.storageEndpoints = new HashMap<>();
    }
    this.storageEndpoints.put(key, storageEndpointsItem);
    return this;
  }

  /**
   * The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.
   * @return storageEndpoints
   */
  @javax.annotation.Nullable
  public Map<String, StorageEndpointProperties> getStorageEndpoints() {
    return storageEndpoints;
  }

  public void setStorageEndpoints(Map<String, StorageEndpointProperties> storageEndpoints) {
    this.storageEndpoints = storageEndpoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IotHubProperties iotHubProperties = (IotHubProperties) o;
    return Objects.equals(this.authorizationPolicies, iotHubProperties.authorizationPolicies) &&
        Objects.equals(this.cloudToDevice, iotHubProperties.cloudToDevice) &&
        Objects.equals(this.comments, iotHubProperties.comments) &&
        Objects.equals(this.enableFileUploadNotifications, iotHubProperties.enableFileUploadNotifications) &&
        Objects.equals(this.eventHubEndpoints, iotHubProperties.eventHubEndpoints) &&
        Objects.equals(this.features, iotHubProperties.features) &&
        Objects.equals(this.hostName, iotHubProperties.hostName) &&
        Objects.equals(this.ipFilterRules, iotHubProperties.ipFilterRules) &&
        Objects.equals(this.messagingEndpoints, iotHubProperties.messagingEndpoints) &&
        Objects.equals(this.operationsMonitoringProperties, iotHubProperties.operationsMonitoringProperties) &&
        Objects.equals(this.provisioningState, iotHubProperties.provisioningState) &&
        Objects.equals(this.routing, iotHubProperties.routing) &&
        Objects.equals(this.storageEndpoints, iotHubProperties.storageEndpoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationPolicies, cloudToDevice, comments, enableFileUploadNotifications, eventHubEndpoints, features, hostName, ipFilterRules, messagingEndpoints, operationsMonitoringProperties, provisioningState, routing, storageEndpoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IotHubProperties {\n");
    sb.append("    authorizationPolicies: ").append(toIndentedString(authorizationPolicies)).append("\n");
    sb.append("    cloudToDevice: ").append(toIndentedString(cloudToDevice)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    enableFileUploadNotifications: ").append(toIndentedString(enableFileUploadNotifications)).append("\n");
    sb.append("    eventHubEndpoints: ").append(toIndentedString(eventHubEndpoints)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    ipFilterRules: ").append(toIndentedString(ipFilterRules)).append("\n");
    sb.append("    messagingEndpoints: ").append(toIndentedString(messagingEndpoints)).append("\n");
    sb.append("    operationsMonitoringProperties: ").append(toIndentedString(operationsMonitoringProperties)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("    storageEndpoints: ").append(toIndentedString(storageEndpoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationPolicies");
    openapiFields.add("cloudToDevice");
    openapiFields.add("comments");
    openapiFields.add("enableFileUploadNotifications");
    openapiFields.add("eventHubEndpoints");
    openapiFields.add("features");
    openapiFields.add("hostName");
    openapiFields.add("ipFilterRules");
    openapiFields.add("messagingEndpoints");
    openapiFields.add("operationsMonitoringProperties");
    openapiFields.add("provisioningState");
    openapiFields.add("routing");
    openapiFields.add("storageEndpoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IotHubProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IotHubProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IotHubProperties is not found in the empty JSON string", IotHubProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IotHubProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IotHubProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authorizationPolicies") != null && !jsonObj.get("authorizationPolicies").isJsonNull()) {
        JsonArray jsonArrayauthorizationPolicies = jsonObj.getAsJsonArray("authorizationPolicies");
        if (jsonArrayauthorizationPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizationPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizationPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("authorizationPolicies").toString()));
          }

          // validate the optional field `authorizationPolicies` (array)
          for (int i = 0; i < jsonArrayauthorizationPolicies.size(); i++) {
            SharedAccessSignatureAuthorizationRule.validateJsonElement(jsonArrayauthorizationPolicies.get(i));
          };
        }
      }
      // validate the optional field `cloudToDevice`
      if (jsonObj.get("cloudToDevice") != null && !jsonObj.get("cloudToDevice").isJsonNull()) {
        CloudToDeviceProperties.validateJsonElement(jsonObj.get("cloudToDevice"));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) && !jsonObj.get("features").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `features` to be a primitive type in the JSON string but got `%s`", jsonObj.get("features").toString()));
      }
      // validate the optional field `features`
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        FeaturesEnum.validateJsonElement(jsonObj.get("features"));
      }
      if ((jsonObj.get("hostName") != null && !jsonObj.get("hostName").isJsonNull()) && !jsonObj.get("hostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostName").toString()));
      }
      if (jsonObj.get("ipFilterRules") != null && !jsonObj.get("ipFilterRules").isJsonNull()) {
        JsonArray jsonArrayipFilterRules = jsonObj.getAsJsonArray("ipFilterRules");
        if (jsonArrayipFilterRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipFilterRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipFilterRules` to be an array in the JSON string but got `%s`", jsonObj.get("ipFilterRules").toString()));
          }

          // validate the optional field `ipFilterRules` (array)
          for (int i = 0; i < jsonArrayipFilterRules.size(); i++) {
            IpFilterRule.validateJsonElement(jsonArrayipFilterRules.get(i));
          };
        }
      }
      // validate the optional field `operationsMonitoringProperties`
      if (jsonObj.get("operationsMonitoringProperties") != null && !jsonObj.get("operationsMonitoringProperties").isJsonNull()) {
        OperationsMonitoringProperties.validateJsonElement(jsonObj.get("operationsMonitoringProperties"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `routing`
      if (jsonObj.get("routing") != null && !jsonObj.get("routing").isJsonNull()) {
        RoutingProperties.validateJsonElement(jsonObj.get("routing"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IotHubProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IotHubProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IotHubProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IotHubProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IotHubProperties>() {
           @Override
           public void write(JsonWriter out, IotHubProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IotHubProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IotHubProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IotHubProperties
   * @throws IOException if the JSON string is invalid with respect to IotHubProperties
   */
  public static IotHubProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IotHubProperties.class);
  }

  /**
   * Convert an instance of IotHubProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

