/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFallbackRouteProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFallbackRouteProperties::OAIFallbackRouteProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFallbackRouteProperties::OAIFallbackRouteProperties() {
    this->initializeModel();
}

OAIFallbackRouteProperties::~OAIFallbackRouteProperties() {}

void OAIFallbackRouteProperties::initializeModel() {

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_endpoint_names_isSet = false;
    m_endpoint_names_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIFallbackRouteProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFallbackRouteProperties::fromJsonObject(QJsonObject json) {

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_endpoint_names_isValid = ::OpenAPI::fromJsonValue(m_endpoint_names, json[QString("endpointNames")]);
    m_endpoint_names_isSet = !json[QString("endpointNames")].isNull() && m_endpoint_names_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIFallbackRouteProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFallbackRouteProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_endpoint_names.size() > 0) {
        obj.insert(QString("endpointNames"), ::OpenAPI::toJsonValue(m_endpoint_names));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIFallbackRouteProperties::getCondition() const {
    return m_condition;
}
void OAIFallbackRouteProperties::setCondition(const QString &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIFallbackRouteProperties::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIFallbackRouteProperties::is_condition_Valid() const{
    return m_condition_isValid;
}

QList<QString> OAIFallbackRouteProperties::getEndpointNames() const {
    return m_endpoint_names;
}
void OAIFallbackRouteProperties::setEndpointNames(const QList<QString> &endpoint_names) {
    m_endpoint_names = endpoint_names;
    m_endpoint_names_isSet = true;
}

bool OAIFallbackRouteProperties::is_endpoint_names_Set() const{
    return m_endpoint_names_isSet;
}

bool OAIFallbackRouteProperties::is_endpoint_names_Valid() const{
    return m_endpoint_names_isValid;
}

bool OAIFallbackRouteProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAIFallbackRouteProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIFallbackRouteProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIFallbackRouteProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QString OAIFallbackRouteProperties::getSource() const {
    return m_source;
}
void OAIFallbackRouteProperties::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIFallbackRouteProperties::is_source_Set() const{
    return m_source_isSet;
}

bool OAIFallbackRouteProperties::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIFallbackRouteProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFallbackRouteProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_endpoint_names_isValid && m_is_enabled_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
