/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIotHubQuotaMetricInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIotHubQuotaMetricInfo::OAIIotHubQuotaMetricInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIotHubQuotaMetricInfo::OAIIotHubQuotaMetricInfo() {
    this->initializeModel();
}

OAIIotHubQuotaMetricInfo::~OAIIotHubQuotaMetricInfo() {}

void OAIIotHubQuotaMetricInfo::initializeModel() {

    m_current_value_isSet = false;
    m_current_value_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIIotHubQuotaMetricInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIotHubQuotaMetricInfo::fromJsonObject(QJsonObject json) {

    m_current_value_isValid = ::OpenAPI::fromJsonValue(m_current_value, json[QString("CurrentValue")]);
    m_current_value_isSet = !json[QString("CurrentValue")].isNull() && m_current_value_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("MaxValue")]);
    m_max_value_isSet = !json[QString("MaxValue")].isNull() && m_max_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIIotHubQuotaMetricInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIotHubQuotaMetricInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_current_value_isSet) {
        obj.insert(QString("CurrentValue"), ::OpenAPI::toJsonValue(m_current_value));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("MaxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint64 OAIIotHubQuotaMetricInfo::getCurrentValue() const {
    return m_current_value;
}
void OAIIotHubQuotaMetricInfo::setCurrentValue(const qint64 &current_value) {
    m_current_value = current_value;
    m_current_value_isSet = true;
}

bool OAIIotHubQuotaMetricInfo::is_current_value_Set() const{
    return m_current_value_isSet;
}

bool OAIIotHubQuotaMetricInfo::is_current_value_Valid() const{
    return m_current_value_isValid;
}

qint64 OAIIotHubQuotaMetricInfo::getMaxValue() const {
    return m_max_value;
}
void OAIIotHubQuotaMetricInfo::setMaxValue(const qint64 &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIIotHubQuotaMetricInfo::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIIotHubQuotaMetricInfo::is_max_value_Valid() const{
    return m_max_value_isValid;
}

QString OAIIotHubQuotaMetricInfo::getName() const {
    return m_name;
}
void OAIIotHubQuotaMetricInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIotHubQuotaMetricInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIotHubQuotaMetricInfo::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIIotHubQuotaMetricInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIotHubQuotaMetricInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
