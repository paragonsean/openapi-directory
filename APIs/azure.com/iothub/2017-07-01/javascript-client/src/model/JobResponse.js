/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JobResponse model module.
 * @module model/JobResponse
 * @version 2017-07-01
 */
class JobResponse {
    /**
     * Constructs a new <code>JobResponse</code>.
     * The properties of the Job Response object.
     * @alias module:model/JobResponse
     */
    constructor() { 
        
        JobResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JobResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobResponse} obj Optional instance to populate.
     * @return {module:model/JobResponse} The populated <code>JobResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobResponse();

            if (data.hasOwnProperty('endTimeUtc')) {
                obj['endTimeUtc'] = ApiClient.convertToType(data['endTimeUtc'], 'String');
            }
            if (data.hasOwnProperty('failureReason')) {
                obj['failureReason'] = ApiClient.convertToType(data['failureReason'], 'String');
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('parentJobId')) {
                obj['parentJobId'] = ApiClient.convertToType(data['parentJobId'], 'String');
            }
            if (data.hasOwnProperty('startTimeUtc')) {
                obj['startTimeUtc'] = ApiClient.convertToType(data['startTimeUtc'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endTimeUtc'] && !(typeof data['endTimeUtc'] === 'string' || data['endTimeUtc'] instanceof String)) {
            throw new Error("Expected the field `endTimeUtc` to be a primitive type in the JSON string but got " + data['endTimeUtc']);
        }
        // ensure the json data is a string
        if (data['failureReason'] && !(typeof data['failureReason'] === 'string' || data['failureReason'] instanceof String)) {
            throw new Error("Expected the field `failureReason` to be a primitive type in the JSON string but got " + data['failureReason']);
        }
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is a string
        if (data['parentJobId'] && !(typeof data['parentJobId'] === 'string' || data['parentJobId'] instanceof String)) {
            throw new Error("Expected the field `parentJobId` to be a primitive type in the JSON string but got " + data['parentJobId']);
        }
        // ensure the json data is a string
        if (data['startTimeUtc'] && !(typeof data['startTimeUtc'] === 'string' || data['startTimeUtc'] instanceof String)) {
            throw new Error("Expected the field `startTimeUtc` to be a primitive type in the JSON string but got " + data['startTimeUtc']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusMessage'] && !(typeof data['statusMessage'] === 'string' || data['statusMessage'] instanceof String)) {
            throw new Error("Expected the field `statusMessage` to be a primitive type in the JSON string but got " + data['statusMessage']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The time the job stopped processing.
 * @member {String} endTimeUtc
 */
JobResponse.prototype['endTimeUtc'] = undefined;

/**
 * If status == failed, this string containing the reason for the failure.
 * @member {String} failureReason
 */
JobResponse.prototype['failureReason'] = undefined;

/**
 * The job identifier.
 * @member {String} jobId
 */
JobResponse.prototype['jobId'] = undefined;

/**
 * The job identifier of the parent job, if any.
 * @member {String} parentJobId
 */
JobResponse.prototype['parentJobId'] = undefined;

/**
 * The start time of the job.
 * @member {String} startTimeUtc
 */
JobResponse.prototype['startTimeUtc'] = undefined;

/**
 * The status of the job.
 * @member {module:model/JobResponse.StatusEnum} status
 */
JobResponse.prototype['status'] = undefined;

/**
 * The status message for the job.
 * @member {String} statusMessage
 */
JobResponse.prototype['statusMessage'] = undefined;

/**
 * The type of the job.
 * @member {module:model/JobResponse.TypeEnum} type
 */
JobResponse.prototype['type'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
JobResponse['StatusEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "enqueued"
     * @const
     */
    "enqueued": "enqueued",

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
JobResponse['TypeEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "export"
     * @const
     */
    "export": "export",

    /**
     * value: "import"
     * @const
     */
    "import": "import",

    /**
     * value: "backup"
     * @const
     */
    "backup": "backup",

    /**
     * value: "readDeviceProperties"
     * @const
     */
    "readDeviceProperties": "readDeviceProperties",

    /**
     * value: "writeDeviceProperties"
     * @const
     */
    "writeDeviceProperties": "writeDeviceProperties",

    /**
     * value: "updateDeviceConfiguration"
     * @const
     */
    "updateDeviceConfiguration": "updateDeviceConfiguration",

    /**
     * value: "rebootDevice"
     * @const
     */
    "rebootDevice": "rebootDevice",

    /**
     * value: "factoryResetDevice"
     * @const
     */
    "factoryResetDevice": "factoryResetDevice",

    /**
     * value: "firmwareUpdate"
     * @const
     */
    "firmwareUpdate": "firmwareUpdate"
};



export default JobResponse;

