/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2017-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudToDeviceProperties from './CloudToDeviceProperties';
import EventHubProperties from './EventHubProperties';
import IpFilterRule from './IpFilterRule';
import MessagingEndpointProperties from './MessagingEndpointProperties';
import OperationsMonitoringProperties from './OperationsMonitoringProperties';
import RoutingProperties from './RoutingProperties';
import SharedAccessSignatureAuthorizationRule from './SharedAccessSignatureAuthorizationRule';
import StorageEndpointProperties from './StorageEndpointProperties';

/**
 * The IotHubProperties model module.
 * @module model/IotHubProperties
 * @version 2017-07-01
 */
class IotHubProperties {
    /**
     * Constructs a new <code>IotHubProperties</code>.
     * The properties of an IoT hub.
     * @alias module:model/IotHubProperties
     */
    constructor() { 
        
        IotHubProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IotHubProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IotHubProperties} obj Optional instance to populate.
     * @return {module:model/IotHubProperties} The populated <code>IotHubProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IotHubProperties();

            if (data.hasOwnProperty('authorizationPolicies')) {
                obj['authorizationPolicies'] = ApiClient.convertToType(data['authorizationPolicies'], [SharedAccessSignatureAuthorizationRule]);
            }
            if (data.hasOwnProperty('cloudToDevice')) {
                obj['cloudToDevice'] = CloudToDeviceProperties.constructFromObject(data['cloudToDevice']);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('enableFileUploadNotifications')) {
                obj['enableFileUploadNotifications'] = ApiClient.convertToType(data['enableFileUploadNotifications'], 'Boolean');
            }
            if (data.hasOwnProperty('eventHubEndpoints')) {
                obj['eventHubEndpoints'] = ApiClient.convertToType(data['eventHubEndpoints'], {'String': EventHubProperties});
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], 'String');
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('ipFilterRules')) {
                obj['ipFilterRules'] = ApiClient.convertToType(data['ipFilterRules'], [IpFilterRule]);
            }
            if (data.hasOwnProperty('messagingEndpoints')) {
                obj['messagingEndpoints'] = ApiClient.convertToType(data['messagingEndpoints'], {'String': MessagingEndpointProperties});
            }
            if (data.hasOwnProperty('operationsMonitoringProperties')) {
                obj['operationsMonitoringProperties'] = OperationsMonitoringProperties.constructFromObject(data['operationsMonitoringProperties']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('routing')) {
                obj['routing'] = RoutingProperties.constructFromObject(data['routing']);
            }
            if (data.hasOwnProperty('storageEndpoints')) {
                obj['storageEndpoints'] = ApiClient.convertToType(data['storageEndpoints'], {'String': StorageEndpointProperties});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IotHubProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IotHubProperties</code>.
     */
    static validateJSON(data) {
        if (data['authorizationPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorizationPolicies'])) {
                throw new Error("Expected the field `authorizationPolicies` to be an array in the JSON data but got " + data['authorizationPolicies']);
            }
            // validate the optional field `authorizationPolicies` (array)
            for (const item of data['authorizationPolicies']) {
                SharedAccessSignatureAuthorizationRule.validateJSON(item);
            };
        }
        // validate the optional field `cloudToDevice`
        if (data['cloudToDevice']) { // data not null
          CloudToDeviceProperties.validateJSON(data['cloudToDevice']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['features'] && !(typeof data['features'] === 'string' || data['features'] instanceof String)) {
            throw new Error("Expected the field `features` to be a primitive type in the JSON string but got " + data['features']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        if (data['ipFilterRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ipFilterRules'])) {
                throw new Error("Expected the field `ipFilterRules` to be an array in the JSON data but got " + data['ipFilterRules']);
            }
            // validate the optional field `ipFilterRules` (array)
            for (const item of data['ipFilterRules']) {
                IpFilterRule.validateJSON(item);
            };
        }
        // validate the optional field `operationsMonitoringProperties`
        if (data['operationsMonitoringProperties']) { // data not null
          OperationsMonitoringProperties.validateJSON(data['operationsMonitoringProperties']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `routing`
        if (data['routing']) { // data not null
          RoutingProperties.validateJSON(data['routing']);
        }

        return true;
    }


}



/**
 * The shared access policies you can use to secure a connection to the IoT hub.
 * @member {Array.<module:model/SharedAccessSignatureAuthorizationRule>} authorizationPolicies
 */
IotHubProperties.prototype['authorizationPolicies'] = undefined;

/**
 * @member {module:model/CloudToDeviceProperties} cloudToDevice
 */
IotHubProperties.prototype['cloudToDevice'] = undefined;

/**
 * IoT hub comments.
 * @member {String} comments
 */
IotHubProperties.prototype['comments'] = undefined;

/**
 * If True, file upload notifications are enabled.
 * @member {Boolean} enableFileUploadNotifications
 */
IotHubProperties.prototype['enableFileUploadNotifications'] = undefined;

/**
 * The Event Hub-compatible endpoint properties. The possible keys to this dictionary are events and operationsMonitoringEvents. Both of these keys have to be present in the dictionary while making create or update calls for the IoT hub.
 * @member {Object.<String, module:model/EventHubProperties>} eventHubEndpoints
 */
IotHubProperties.prototype['eventHubEndpoints'] = undefined;

/**
 * The capabilities and features enabled for the IoT hub.
 * @member {module:model/IotHubProperties.FeaturesEnum} features
 */
IotHubProperties.prototype['features'] = undefined;

/**
 * The name of the host.
 * @member {String} hostName
 */
IotHubProperties.prototype['hostName'] = undefined;

/**
 * The IP filter rules.
 * @member {Array.<module:model/IpFilterRule>} ipFilterRules
 */
IotHubProperties.prototype['ipFilterRules'] = undefined;

/**
 * The messaging endpoint properties for the file upload notification queue.
 * @member {Object.<String, module:model/MessagingEndpointProperties>} messagingEndpoints
 */
IotHubProperties.prototype['messagingEndpoints'] = undefined;

/**
 * @member {module:model/OperationsMonitoringProperties} operationsMonitoringProperties
 */
IotHubProperties.prototype['operationsMonitoringProperties'] = undefined;

/**
 * The provisioning state.
 * @member {String} provisioningState
 */
IotHubProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/RoutingProperties} routing
 */
IotHubProperties.prototype['routing'] = undefined;

/**
 * The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.
 * @member {Object.<String, module:model/StorageEndpointProperties>} storageEndpoints
 */
IotHubProperties.prototype['storageEndpoints'] = undefined;





/**
 * Allowed values for the <code>features</code> property.
 * @enum {String}
 * @readonly
 */
IotHubProperties['FeaturesEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "DeviceManagement"
     * @const
     */
    "DeviceManagement": "DeviceManagement"
};



export default IotHubProperties;

