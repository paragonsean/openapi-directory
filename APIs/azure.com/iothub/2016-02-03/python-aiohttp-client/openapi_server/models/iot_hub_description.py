# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iot_hub_properties import IotHubProperties
from openapi_server.models.iot_hub_sku_info import IotHubSkuInfo
import re
from openapi_server import util


class IotHubDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, properties: IotHubProperties=None, resourcegroup: str=None, sku: IotHubSkuInfo=None, subscriptionid: str=None, id: str=None, location: str=None, name: str=None, tags: Dict[str, str]=None, type: str=None):
        """IotHubDescription - a model defined in OpenAPI

        :param etag: The etag of this IotHubDescription.
        :param properties: The properties of this IotHubDescription.
        :param resourcegroup: The resourcegroup of this IotHubDescription.
        :param sku: The sku of this IotHubDescription.
        :param subscriptionid: The subscriptionid of this IotHubDescription.
        :param id: The id of this IotHubDescription.
        :param location: The location of this IotHubDescription.
        :param name: The name of this IotHubDescription.
        :param tags: The tags of this IotHubDescription.
        :param type: The type of this IotHubDescription.
        """
        self.openapi_types = {
            'etag': str,
            'properties': IotHubProperties,
            'resourcegroup': str,
            'sku': IotHubSkuInfo,
            'subscriptionid': str,
            'id': str,
            'location': str,
            'name': str,
            'tags': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'properties': 'properties',
            'resourcegroup': 'resourcegroup',
            'sku': 'sku',
            'subscriptionid': 'subscriptionid',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'tags': 'tags',
            'type': 'type'
        }

        self._etag = etag
        self._properties = properties
        self._resourcegroup = resourcegroup
        self._sku = sku
        self._subscriptionid = subscriptionid
        self._id = id
        self._location = location
        self._name = name
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IotHubDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IotHubDescription of this IotHubDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this IotHubDescription.

        The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.

        :return: The etag of this IotHubDescription.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this IotHubDescription.

        The Etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal ETag convention.

        :param etag: The etag of this IotHubDescription.
        :type etag: str
        """

        self._etag = etag

    @property
    def properties(self):
        """Gets the properties of this IotHubDescription.


        :return: The properties of this IotHubDescription.
        :rtype: IotHubProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this IotHubDescription.


        :param properties: The properties of this IotHubDescription.
        :type properties: IotHubProperties
        """

        self._properties = properties

    @property
    def resourcegroup(self):
        """Gets the resourcegroup of this IotHubDescription.

        The name of the resource group that contains the IoT hub. A resource group name uniquely identifies the resource group within the subscription.

        :return: The resourcegroup of this IotHubDescription.
        :rtype: str
        """
        return self._resourcegroup

    @resourcegroup.setter
    def resourcegroup(self, resourcegroup):
        """Sets the resourcegroup of this IotHubDescription.

        The name of the resource group that contains the IoT hub. A resource group name uniquely identifies the resource group within the subscription.

        :param resourcegroup: The resourcegroup of this IotHubDescription.
        :type resourcegroup: str
        """
        if resourcegroup is None:
            raise ValueError("Invalid value for `resourcegroup`, must not be `None`")

        self._resourcegroup = resourcegroup

    @property
    def sku(self):
        """Gets the sku of this IotHubDescription.


        :return: The sku of this IotHubDescription.
        :rtype: IotHubSkuInfo
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this IotHubDescription.


        :param sku: The sku of this IotHubDescription.
        :type sku: IotHubSkuInfo
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def subscriptionid(self):
        """Gets the subscriptionid of this IotHubDescription.

        The subscription identifier.

        :return: The subscriptionid of this IotHubDescription.
        :rtype: str
        """
        return self._subscriptionid

    @subscriptionid.setter
    def subscriptionid(self, subscriptionid):
        """Sets the subscriptionid of this IotHubDescription.

        The subscription identifier.

        :param subscriptionid: The subscriptionid of this IotHubDescription.
        :type subscriptionid: str
        """
        if subscriptionid is None:
            raise ValueError("Invalid value for `subscriptionid`, must not be `None`")

        self._subscriptionid = subscriptionid

    @property
    def id(self):
        """Gets the id of this IotHubDescription.

        The resource identifier.

        :return: The id of this IotHubDescription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IotHubDescription.

        The resource identifier.

        :param id: The id of this IotHubDescription.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this IotHubDescription.

        The resource location.

        :return: The location of this IotHubDescription.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this IotHubDescription.

        The resource location.

        :param location: The location of this IotHubDescription.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this IotHubDescription.

        The resource name.

        :return: The name of this IotHubDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IotHubDescription.

        The resource name.

        :param name: The name of this IotHubDescription.
        :type name: str
        """
        if name is not None and not re.search(r'^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^(?![0-9]+$)(?!-)[a-zA-Z0-9-]{2,49}[a-zA-Z0-9]$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this IotHubDescription.

        The resource tags.

        :return: The tags of this IotHubDescription.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IotHubDescription.

        The resource tags.

        :param tags: The tags of this IotHubDescription.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this IotHubDescription.

        The resource type.

        :return: The type of this IotHubDescription.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IotHubDescription.

        The resource type.

        :param type: The type of this IotHubDescription.
        :type type: str
        """

        self._type = type
