/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2016-02-03
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportDevicesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportDevicesRequest::OAIExportDevicesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportDevicesRequest::OAIExportDevicesRequest() {
    this->initializeModel();
}

OAIExportDevicesRequest::~OAIExportDevicesRequest() {}

void OAIExportDevicesRequest::initializeModel() {

    m_exclude_keys_isSet = false;
    m_exclude_keys_isValid = false;

    m_export_blob_container_uri_isSet = false;
    m_export_blob_container_uri_isValid = false;
}

void OAIExportDevicesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportDevicesRequest::fromJsonObject(QJsonObject json) {

    m_exclude_keys_isValid = ::OpenAPI::fromJsonValue(m_exclude_keys, json[QString("ExcludeKeys")]);
    m_exclude_keys_isSet = !json[QString("ExcludeKeys")].isNull() && m_exclude_keys_isValid;

    m_export_blob_container_uri_isValid = ::OpenAPI::fromJsonValue(m_export_blob_container_uri, json[QString("ExportBlobContainerUri")]);
    m_export_blob_container_uri_isSet = !json[QString("ExportBlobContainerUri")].isNull() && m_export_blob_container_uri_isValid;
}

QString OAIExportDevicesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportDevicesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_exclude_keys_isSet) {
        obj.insert(QString("ExcludeKeys"), ::OpenAPI::toJsonValue(m_exclude_keys));
    }
    if (m_export_blob_container_uri_isSet) {
        obj.insert(QString("ExportBlobContainerUri"), ::OpenAPI::toJsonValue(m_export_blob_container_uri));
    }
    return obj;
}

bool OAIExportDevicesRequest::isExcludeKeys() const {
    return m_exclude_keys;
}
void OAIExportDevicesRequest::setExcludeKeys(const bool &exclude_keys) {
    m_exclude_keys = exclude_keys;
    m_exclude_keys_isSet = true;
}

bool OAIExportDevicesRequest::is_exclude_keys_Set() const{
    return m_exclude_keys_isSet;
}

bool OAIExportDevicesRequest::is_exclude_keys_Valid() const{
    return m_exclude_keys_isValid;
}

QString OAIExportDevicesRequest::getExportBlobContainerUri() const {
    return m_export_blob_container_uri;
}
void OAIExportDevicesRequest::setExportBlobContainerUri(const QString &export_blob_container_uri) {
    m_export_blob_container_uri = export_blob_container_uri;
    m_export_blob_container_uri_isSet = true;
}

bool OAIExportDevicesRequest::is_export_blob_container_uri_Set() const{
    return m_export_blob_container_uri_isSet;
}

bool OAIExportDevicesRequest::is_export_blob_container_uri_Valid() const{
    return m_export_blob_container_uri_isValid;
}

bool OAIExportDevicesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exclude_keys_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_blob_container_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportDevicesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_exclude_keys_isValid && m_export_blob_container_uri_isValid && true;
}

} // namespace OpenAPI
