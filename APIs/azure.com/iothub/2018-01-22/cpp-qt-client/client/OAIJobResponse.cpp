/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-01-22
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobResponse::OAIJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobResponse::OAIJobResponse() {
    this->initializeModel();
}

OAIJobResponse::~OAIJobResponse() {}

void OAIJobResponse::initializeModel() {

    m_end_time_utc_isSet = false;
    m_end_time_utc_isValid = false;

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_parent_job_id_isSet = false;
    m_parent_job_id_isValid = false;

    m_start_time_utc_isSet = false;
    m_start_time_utc_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobResponse::fromJsonObject(QJsonObject json) {

    m_end_time_utc_isValid = ::OpenAPI::fromJsonValue(m_end_time_utc, json[QString("endTimeUtc")]);
    m_end_time_utc_isSet = !json[QString("endTimeUtc")].isNull() && m_end_time_utc_isValid;

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_parent_job_id_isValid = ::OpenAPI::fromJsonValue(m_parent_job_id, json[QString("parentJobId")]);
    m_parent_job_id_isSet = !json[QString("parentJobId")].isNull() && m_parent_job_id_isValid;

    m_start_time_utc_isValid = ::OpenAPI::fromJsonValue(m_start_time_utc, json[QString("startTimeUtc")]);
    m_start_time_utc_isSet = !json[QString("startTimeUtc")].isNull() && m_start_time_utc_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_utc_isSet) {
        obj.insert(QString("endTimeUtc"), ::OpenAPI::toJsonValue(m_end_time_utc));
    }
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_parent_job_id_isSet) {
        obj.insert(QString("parentJobId"), ::OpenAPI::toJsonValue(m_parent_job_id));
    }
    if (m_start_time_utc_isSet) {
        obj.insert(QString("startTimeUtc"), ::OpenAPI::toJsonValue(m_start_time_utc));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIJobResponse::getEndTimeUtc() const {
    return m_end_time_utc;
}
void OAIJobResponse::setEndTimeUtc(const QString &end_time_utc) {
    m_end_time_utc = end_time_utc;
    m_end_time_utc_isSet = true;
}

bool OAIJobResponse::is_end_time_utc_Set() const{
    return m_end_time_utc_isSet;
}

bool OAIJobResponse::is_end_time_utc_Valid() const{
    return m_end_time_utc_isValid;
}

QString OAIJobResponse::getFailureReason() const {
    return m_failure_reason;
}
void OAIJobResponse::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIJobResponse::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIJobResponse::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIJobResponse::getJobId() const {
    return m_job_id;
}
void OAIJobResponse::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobResponse::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobResponse::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJobResponse::getParentJobId() const {
    return m_parent_job_id;
}
void OAIJobResponse::setParentJobId(const QString &parent_job_id) {
    m_parent_job_id = parent_job_id;
    m_parent_job_id_isSet = true;
}

bool OAIJobResponse::is_parent_job_id_Set() const{
    return m_parent_job_id_isSet;
}

bool OAIJobResponse::is_parent_job_id_Valid() const{
    return m_parent_job_id_isValid;
}

QString OAIJobResponse::getStartTimeUtc() const {
    return m_start_time_utc;
}
void OAIJobResponse::setStartTimeUtc(const QString &start_time_utc) {
    m_start_time_utc = start_time_utc;
    m_start_time_utc_isSet = true;
}

bool OAIJobResponse::is_start_time_utc_Set() const{
    return m_start_time_utc_isSet;
}

bool OAIJobResponse::is_start_time_utc_Valid() const{
    return m_start_time_utc_isValid;
}

QString OAIJobResponse::getStatus() const {
    return m_status;
}
void OAIJobResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJobResponse::getStatusMessage() const {
    return m_status_message;
}
void OAIJobResponse::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIJobResponse::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIJobResponse::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIJobResponse::getType() const {
    return m_type;
}
void OAIJobResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJobResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJobResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
