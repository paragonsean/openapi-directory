/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-01-22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties related to a storage container endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:47.859761-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutingStorageContainerProperties {
  public static final String SERIALIZED_NAME_BATCH_FREQUENCY_IN_SECONDS = "batchFrequencyInSeconds";
  @SerializedName(SERIALIZED_NAME_BATCH_FREQUENCY_IN_SECONDS)
  private Integer batchFrequencyInSeconds;

  public static final String SERIALIZED_NAME_CONNECTION_STRING = "connectionString";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING)
  private String connectionString;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "containerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_FILE_NAME_FORMAT = "fileNameFormat";
  @SerializedName(SERIALIZED_NAME_FILE_NAME_FORMAT)
  private String fileNameFormat;

  public static final String SERIALIZED_NAME_MAX_CHUNK_SIZE_IN_BYTES = "maxChunkSizeInBytes";
  @SerializedName(SERIALIZED_NAME_MAX_CHUNK_SIZE_IN_BYTES)
  private Integer maxChunkSizeInBytes;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public RoutingStorageContainerProperties() {
  }

  public RoutingStorageContainerProperties batchFrequencyInSeconds(Integer batchFrequencyInSeconds) {
    this.batchFrequencyInSeconds = batchFrequencyInSeconds;
    return this;
  }

  /**
   * Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
   * minimum: 60
   * maximum: 720
   * @return batchFrequencyInSeconds
   */
  @javax.annotation.Nullable
  public Integer getBatchFrequencyInSeconds() {
    return batchFrequencyInSeconds;
  }

  public void setBatchFrequencyInSeconds(Integer batchFrequencyInSeconds) {
    this.batchFrequencyInSeconds = batchFrequencyInSeconds;
  }


  public RoutingStorageContainerProperties connectionString(String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  /**
   * The connection string of the storage account.
   * @return connectionString
   */
  @javax.annotation.Nonnull
  public String getConnectionString() {
    return connectionString;
  }

  public void setConnectionString(String connectionString) {
    this.connectionString = connectionString;
  }


  public RoutingStorageContainerProperties containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * The name of storage container in the storage account.
   * @return containerName
   */
  @javax.annotation.Nonnull
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public RoutingStorageContainerProperties encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Encoding that is used to serialize messages to blobs. Supported values are &#39;avro&#39; and &#39;avroDeflate&#39;. Default value is &#39;avro&#39;.
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public RoutingStorageContainerProperties fileNameFormat(String fileNameFormat) {
    this.fileNameFormat = fileNameFormat;
    return this;
  }

  /**
   * File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.
   * @return fileNameFormat
   */
  @javax.annotation.Nullable
  public String getFileNameFormat() {
    return fileNameFormat;
  }

  public void setFileNameFormat(String fileNameFormat) {
    this.fileNameFormat = fileNameFormat;
  }


  public RoutingStorageContainerProperties maxChunkSizeInBytes(Integer maxChunkSizeInBytes) {
    this.maxChunkSizeInBytes = maxChunkSizeInBytes;
    return this;
  }

  /**
   * Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
   * minimum: 10485760
   * maximum: 524288000
   * @return maxChunkSizeInBytes
   */
  @javax.annotation.Nullable
  public Integer getMaxChunkSizeInBytes() {
    return maxChunkSizeInBytes;
  }

  public void setMaxChunkSizeInBytes(Integer maxChunkSizeInBytes) {
    this.maxChunkSizeInBytes = maxChunkSizeInBytes;
  }


  public RoutingStorageContainerProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, operationsMonitoringEvents, fileNotifications, $default. Endpoint names must be unique across endpoint types.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RoutingStorageContainerProperties resourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
    return this;
  }

  /**
   * The name of the resource group of the storage account.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }

  public void setResourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
  }


  public RoutingStorageContainerProperties subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The subscription identifier of the storage account.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingStorageContainerProperties routingStorageContainerProperties = (RoutingStorageContainerProperties) o;
    return Objects.equals(this.batchFrequencyInSeconds, routingStorageContainerProperties.batchFrequencyInSeconds) &&
        Objects.equals(this.connectionString, routingStorageContainerProperties.connectionString) &&
        Objects.equals(this.containerName, routingStorageContainerProperties.containerName) &&
        Objects.equals(this.encoding, routingStorageContainerProperties.encoding) &&
        Objects.equals(this.fileNameFormat, routingStorageContainerProperties.fileNameFormat) &&
        Objects.equals(this.maxChunkSizeInBytes, routingStorageContainerProperties.maxChunkSizeInBytes) &&
        Objects.equals(this.name, routingStorageContainerProperties.name) &&
        Objects.equals(this.resourceGroup, routingStorageContainerProperties.resourceGroup) &&
        Objects.equals(this.subscriptionId, routingStorageContainerProperties.subscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchFrequencyInSeconds, connectionString, containerName, encoding, fileNameFormat, maxChunkSizeInBytes, name, resourceGroup, subscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingStorageContainerProperties {\n");
    sb.append("    batchFrequencyInSeconds: ").append(toIndentedString(batchFrequencyInSeconds)).append("\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    fileNameFormat: ").append(toIndentedString(fileNameFormat)).append("\n");
    sb.append("    maxChunkSizeInBytes: ").append(toIndentedString(maxChunkSizeInBytes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchFrequencyInSeconds");
    openapiFields.add("connectionString");
    openapiFields.add("containerName");
    openapiFields.add("encoding");
    openapiFields.add("fileNameFormat");
    openapiFields.add("maxChunkSizeInBytes");
    openapiFields.add("name");
    openapiFields.add("resourceGroup");
    openapiFields.add("subscriptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectionString");
    openapiRequiredFields.add("containerName");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutingStorageContainerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutingStorageContainerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutingStorageContainerProperties is not found in the empty JSON string", RoutingStorageContainerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutingStorageContainerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutingStorageContainerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoutingStorageContainerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionString").toString()));
      }
      if (!jsonObj.get("containerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerName").toString()));
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if ((jsonObj.get("fileNameFormat") != null && !jsonObj.get("fileNameFormat").isJsonNull()) && !jsonObj.get("fileNameFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileNameFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileNameFormat").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutingStorageContainerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutingStorageContainerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutingStorageContainerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutingStorageContainerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutingStorageContainerProperties>() {
           @Override
           public void write(JsonWriter out, RoutingStorageContainerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutingStorageContainerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutingStorageContainerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutingStorageContainerProperties
   * @throws IOException if the JSON string is invalid with respect to RoutingStorageContainerProperties
   */
  public static RoutingStorageContainerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutingStorageContainerProperties.class);
  }

  /**
   * Convert an instance of RoutingStorageContainerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

