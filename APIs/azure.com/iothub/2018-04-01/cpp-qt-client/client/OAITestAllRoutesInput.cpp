/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestAllRoutesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestAllRoutesInput::OAITestAllRoutesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestAllRoutesInput::OAITestAllRoutesInput() {
    this->initializeModel();
}

OAITestAllRoutesInput::~OAITestAllRoutesInput() {}

void OAITestAllRoutesInput::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_routing_source_isSet = false;
    m_routing_source_isValid = false;

    m_twin_isSet = false;
    m_twin_isValid = false;
}

void OAITestAllRoutesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestAllRoutesInput::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_routing_source_isValid = ::OpenAPI::fromJsonValue(m_routing_source, json[QString("routingSource")]);
    m_routing_source_isSet = !json[QString("routingSource")].isNull() && m_routing_source_isValid;

    m_twin_isValid = ::OpenAPI::fromJsonValue(m_twin, json[QString("twin")]);
    m_twin_isSet = !json[QString("twin")].isNull() && m_twin_isValid;
}

QString OAITestAllRoutesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestAllRoutesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_routing_source_isSet) {
        obj.insert(QString("routingSource"), ::OpenAPI::toJsonValue(m_routing_source));
    }
    if (m_twin.isSet()) {
        obj.insert(QString("twin"), ::OpenAPI::toJsonValue(m_twin));
    }
    return obj;
}

OAIRoutingMessage OAITestAllRoutesInput::getMessage() const {
    return m_message;
}
void OAITestAllRoutesInput::setMessage(const OAIRoutingMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITestAllRoutesInput::is_message_Set() const{
    return m_message_isSet;
}

bool OAITestAllRoutesInput::is_message_Valid() const{
    return m_message_isValid;
}

QString OAITestAllRoutesInput::getRoutingSource() const {
    return m_routing_source;
}
void OAITestAllRoutesInput::setRoutingSource(const QString &routing_source) {
    m_routing_source = routing_source;
    m_routing_source_isSet = true;
}

bool OAITestAllRoutesInput::is_routing_source_Set() const{
    return m_routing_source_isSet;
}

bool OAITestAllRoutesInput::is_routing_source_Valid() const{
    return m_routing_source_isValid;
}

OAIRoutingTwin OAITestAllRoutesInput::getTwin() const {
    return m_twin;
}
void OAITestAllRoutesInput::setTwin(const OAIRoutingTwin &twin) {
    m_twin = twin;
    m_twin_isSet = true;
}

bool OAITestAllRoutesInput::is_twin_Set() const{
    return m_twin_isSet;
}

bool OAITestAllRoutesInput::is_twin_Valid() const{
    return m_twin_isValid;
}

bool OAITestAllRoutesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twin.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestAllRoutesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
