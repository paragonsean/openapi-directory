# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistryStatistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled_device_count: int=None, enabled_device_count: int=None, total_device_count: int=None):
        """RegistryStatistics - a model defined in OpenAPI

        :param disabled_device_count: The disabled_device_count of this RegistryStatistics.
        :param enabled_device_count: The enabled_device_count of this RegistryStatistics.
        :param total_device_count: The total_device_count of this RegistryStatistics.
        """
        self.openapi_types = {
            'disabled_device_count': int,
            'enabled_device_count': int,
            'total_device_count': int
        }

        self.attribute_map = {
            'disabled_device_count': 'disabledDeviceCount',
            'enabled_device_count': 'enabledDeviceCount',
            'total_device_count': 'totalDeviceCount'
        }

        self._disabled_device_count = disabled_device_count
        self._enabled_device_count = enabled_device_count
        self._total_device_count = total_device_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistryStatistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistryStatistics of this RegistryStatistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled_device_count(self):
        """Gets the disabled_device_count of this RegistryStatistics.

        The count of disabled devices in the identity registry.

        :return: The disabled_device_count of this RegistryStatistics.
        :rtype: int
        """
        return self._disabled_device_count

    @disabled_device_count.setter
    def disabled_device_count(self, disabled_device_count):
        """Sets the disabled_device_count of this RegistryStatistics.

        The count of disabled devices in the identity registry.

        :param disabled_device_count: The disabled_device_count of this RegistryStatistics.
        :type disabled_device_count: int
        """

        self._disabled_device_count = disabled_device_count

    @property
    def enabled_device_count(self):
        """Gets the enabled_device_count of this RegistryStatistics.

        The count of enabled devices in the identity registry.

        :return: The enabled_device_count of this RegistryStatistics.
        :rtype: int
        """
        return self._enabled_device_count

    @enabled_device_count.setter
    def enabled_device_count(self, enabled_device_count):
        """Sets the enabled_device_count of this RegistryStatistics.

        The count of enabled devices in the identity registry.

        :param enabled_device_count: The enabled_device_count of this RegistryStatistics.
        :type enabled_device_count: int
        """

        self._enabled_device_count = enabled_device_count

    @property
    def total_device_count(self):
        """Gets the total_device_count of this RegistryStatistics.

        The total count of devices in the identity registry.

        :return: The total_device_count of this RegistryStatistics.
        :rtype: int
        """
        return self._total_device_count

    @total_device_count.setter
    def total_device_count(self, total_device_count):
        """Sets the total_device_count of this RegistryStatistics.

        The total count of devices in the identity registry.

        :param total_device_count: The total_device_count of this RegistryStatistics.
        :type total_device_count: int
        """

        self._total_device_count = total_device_count
