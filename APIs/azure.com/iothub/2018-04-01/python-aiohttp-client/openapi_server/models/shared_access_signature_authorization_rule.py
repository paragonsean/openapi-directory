# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SharedAccessSignatureAuthorizationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_name: str=None, primary_key: str=None, rights: str=None, secondary_key: str=None):
        """SharedAccessSignatureAuthorizationRule - a model defined in OpenAPI

        :param key_name: The key_name of this SharedAccessSignatureAuthorizationRule.
        :param primary_key: The primary_key of this SharedAccessSignatureAuthorizationRule.
        :param rights: The rights of this SharedAccessSignatureAuthorizationRule.
        :param secondary_key: The secondary_key of this SharedAccessSignatureAuthorizationRule.
        """
        self.openapi_types = {
            'key_name': str,
            'primary_key': str,
            'rights': str,
            'secondary_key': str
        }

        self.attribute_map = {
            'key_name': 'keyName',
            'primary_key': 'primaryKey',
            'rights': 'rights',
            'secondary_key': 'secondaryKey'
        }

        self._key_name = key_name
        self._primary_key = primary_key
        self._rights = rights
        self._secondary_key = secondary_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedAccessSignatureAuthorizationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SharedAccessSignatureAuthorizationRule of this SharedAccessSignatureAuthorizationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_name(self):
        """Gets the key_name of this SharedAccessSignatureAuthorizationRule.

        The name of the shared access policy.

        :return: The key_name of this SharedAccessSignatureAuthorizationRule.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this SharedAccessSignatureAuthorizationRule.

        The name of the shared access policy.

        :param key_name: The key_name of this SharedAccessSignatureAuthorizationRule.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name

    @property
    def primary_key(self):
        """Gets the primary_key of this SharedAccessSignatureAuthorizationRule.

        The primary key.

        :return: The primary_key of this SharedAccessSignatureAuthorizationRule.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this SharedAccessSignatureAuthorizationRule.

        The primary key.

        :param primary_key: The primary_key of this SharedAccessSignatureAuthorizationRule.
        :type primary_key: str
        """

        self._primary_key = primary_key

    @property
    def rights(self):
        """Gets the rights of this SharedAccessSignatureAuthorizationRule.

        The permissions assigned to the shared access policy.

        :return: The rights of this SharedAccessSignatureAuthorizationRule.
        :rtype: str
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this SharedAccessSignatureAuthorizationRule.

        The permissions assigned to the shared access policy.

        :param rights: The rights of this SharedAccessSignatureAuthorizationRule.
        :type rights: str
        """
        allowed_values = ["RegistryRead", "RegistryWrite", "ServiceConnect", "DeviceConnect", "RegistryRead, RegistryWrite", "RegistryRead, ServiceConnect", "RegistryRead, DeviceConnect", "RegistryWrite, ServiceConnect", "RegistryWrite, DeviceConnect", "ServiceConnect, DeviceConnect", "RegistryRead, RegistryWrite, ServiceConnect", "RegistryRead, RegistryWrite, DeviceConnect", "RegistryRead, ServiceConnect, DeviceConnect", "RegistryWrite, ServiceConnect, DeviceConnect", "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect"]  # noqa: E501
        if rights not in allowed_values:
            raise ValueError(
                "Invalid value for `rights` ({0}), must be one of {1}"
                .format(rights, allowed_values)
            )

        self._rights = rights

    @property
    def secondary_key(self):
        """Gets the secondary_key of this SharedAccessSignatureAuthorizationRule.

        The secondary key.

        :return: The secondary_key of this SharedAccessSignatureAuthorizationRule.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this SharedAccessSignatureAuthorizationRule.

        The secondary key.

        :param secondary_key: The secondary_key of this SharedAccessSignatureAuthorizationRule.
        :type secondary_key: str
        """

        self._secondary_key = secondary_key
