/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EndpointHealthData model module.
 * @module model/EndpointHealthData
 * @version 2018-04-01
 */
class EndpointHealthData {
    /**
     * Constructs a new <code>EndpointHealthData</code>.
     * The health data for an endpoint
     * @alias module:model/EndpointHealthData
     */
    constructor() { 
        
        EndpointHealthData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EndpointHealthData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EndpointHealthData} obj Optional instance to populate.
     * @return {module:model/EndpointHealthData} The populated <code>EndpointHealthData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EndpointHealthData();

            if (data.hasOwnProperty('endpointId')) {
                obj['endpointId'] = ApiClient.convertToType(data['endpointId'], 'String');
            }
            if (data.hasOwnProperty('healthStatus')) {
                obj['healthStatus'] = ApiClient.convertToType(data['healthStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EndpointHealthData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EndpointHealthData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endpointId'] && !(typeof data['endpointId'] === 'string' || data['endpointId'] instanceof String)) {
            throw new Error("Expected the field `endpointId` to be a primitive type in the JSON string but got " + data['endpointId']);
        }
        // ensure the json data is a string
        if (data['healthStatus'] && !(typeof data['healthStatus'] === 'string' || data['healthStatus'] instanceof String)) {
            throw new Error("Expected the field `healthStatus` to be a primitive type in the JSON string but got " + data['healthStatus']);
        }

        return true;
    }


}



/**
 * Id of the endpoint
 * @member {String} endpointId
 */
EndpointHealthData.prototype['endpointId'] = undefined;

/**
 * The health status code of the endpoint
 * @member {module:model/EndpointHealthData.HealthStatusEnum} healthStatus
 */
EndpointHealthData.prototype['healthStatus'] = undefined;





/**
 * Allowed values for the <code>healthStatus</code> property.
 * @enum {String}
 * @readonly
 */
EndpointHealthData['HealthStatusEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "healthy"
     * @const
     */
    "healthy": "healthy",

    /**
     * value: "unhealthy"
     * @const
     */
    "unhealthy": "unhealthy",

    /**
     * value: "dead"
     * @const
     */
    "dead": "dead"
};



export default EndpointHealthData;

