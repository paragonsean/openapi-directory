/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDetails from '../model/ErrorDetails';
import EventHubConsumerGroupInfo from '../model/EventHubConsumerGroupInfo';
import IotHubDescription from '../model/IotHubDescription';

/**
* PUT service.
* @module api/PUTApi
* @version 2018-04-01
*/
export default class PUTApi {

    /**
    * Constructs a new PUTApi. 
    * @alias module:api/PUTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iotHubResourceCreateEventHubConsumerGroup operation.
     * @callback module:api/PUTApi~iotHubResourceCreateEventHubConsumerGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventHubConsumerGroupInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub
     * Add a consumer group to an Event Hub-compatible endpoint in an IoT hub.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {String} eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub.
     * @param {String} name The name of the consumer group to add.
     * @param {module:api/PUTApi~iotHubResourceCreateEventHubConsumerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventHubConsumerGroupInfo}
     */
    iotHubResourceCreateEventHubConsumerGroup(apiVersion, subscriptionId, resourceGroupName, resourceName, eventHubEndpointName, name, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceCreateEventHubConsumerGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceCreateEventHubConsumerGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceCreateEventHubConsumerGroup");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling iotHubResourceCreateEventHubConsumerGroup");
      }
      // verify the required parameter 'eventHubEndpointName' is set
      if (eventHubEndpointName === undefined || eventHubEndpointName === null) {
        throw new Error("Missing the required parameter 'eventHubEndpointName' when calling iotHubResourceCreateEventHubConsumerGroup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling iotHubResourceCreateEventHubConsumerGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'eventHubEndpointName': eventHubEndpointName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventHubConsumerGroupInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotHubResourceCreateOrUpdate operation.
     * @callback module:api/PUTApi~iotHubResourceCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IotHubDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the metadata of an IoT hub.
     * Create or update the metadata of an Iot hub. The usual pattern to modify a property is to retrieve the IoT hub metadata and security metadata, and then combine them with the modified values in a new body to update the IoT hub.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {module:model/IotHubDescription} iotHubDescription The IoT hub metadata and security metadata.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the IoT Hub. Do not specify for creating a brand new IoT Hub. Required to update an existing IoT Hub.
     * @param {module:api/PUTApi~iotHubResourceCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IotHubDescription}
     */
    iotHubResourceCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, iotHubDescription, opts, callback) {
      opts = opts || {};
      let postBody = iotHubDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceCreateOrUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling iotHubResourceCreateOrUpdate");
      }
      // verify the required parameter 'iotHubDescription' is set
      if (iotHubDescription === undefined || iotHubDescription === null) {
        throw new Error("Missing the required parameter 'iotHubDescription' when calling iotHubResourceCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IotHubDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
