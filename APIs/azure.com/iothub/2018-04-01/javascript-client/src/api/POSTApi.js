/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorDetails from '../model/ErrorDetails';
import ExportDevicesRequest from '../model/ExportDevicesRequest';
import ImportDevicesRequest from '../model/ImportDevicesRequest';
import IotHubNameAvailabilityInfo from '../model/IotHubNameAvailabilityInfo';
import JobResponse from '../model/JobResponse';
import OperationInputs from '../model/OperationInputs';
import SharedAccessSignatureAuthorizationRule from '../model/SharedAccessSignatureAuthorizationRule';
import SharedAccessSignatureAuthorizationRuleListResult from '../model/SharedAccessSignatureAuthorizationRuleListResult';
import TestAllRoutesInput from '../model/TestAllRoutesInput';
import TestAllRoutesResult from '../model/TestAllRoutesResult';
import TestRouteInput from '../model/TestRouteInput';
import TestRouteResult from '../model/TestRouteResult';

/**
* POST service.
* @module api/POSTApi
* @version 2018-04-01
*/
export default class POSTApi {

    /**
    * Constructs a new POSTApi. 
    * @alias module:api/POSTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the iotHubResourceCheckNameAvailability operation.
     * @callback module:api/POSTApi~iotHubResourceCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IotHubNameAvailabilityInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if an IoT hub name is available
     * Check if an IoT hub name is available.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {module:model/OperationInputs} operationInputs Set the name parameter in the OperationInputs structure to the name of the IoT hub to check.
     * @param {module:api/POSTApi~iotHubResourceCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IotHubNameAvailabilityInfo}
     */
    iotHubResourceCheckNameAvailability(apiVersion, subscriptionId, operationInputs, callback) {
      let postBody = operationInputs;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceCheckNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceCheckNameAvailability");
      }
      // verify the required parameter 'operationInputs' is set
      if (operationInputs === undefined || operationInputs === null) {
        throw new Error("Missing the required parameter 'operationInputs' when calling iotHubResourceCheckNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IotHubNameAvailabilityInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotHubResourceExportDevices operation.
     * @callback module:api/POSTApi~iotHubResourceExportDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {module:model/ExportDevicesRequest} exportDevicesParameters The parameters that specify the export devices operation.
     * @param {module:api/POSTApi~iotHubResourceExportDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    iotHubResourceExportDevices(apiVersion, subscriptionId, resourceGroupName, resourceName, exportDevicesParameters, callback) {
      let postBody = exportDevicesParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceExportDevices");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceExportDevices");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceExportDevices");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling iotHubResourceExportDevices");
      }
      // verify the required parameter 'exportDevicesParameters' is set
      if (exportDevicesParameters === undefined || exportDevicesParameters === null) {
        throw new Error("Missing the required parameter 'exportDevicesParameters' when calling iotHubResourceExportDevices");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotHubResourceGetKeysForKeyName operation.
     * @callback module:api/POSTApi~iotHubResourceGetKeysForKeyNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessSignatureAuthorizationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {String} keyName The name of the shared access policy.
     * @param {module:api/POSTApi~iotHubResourceGetKeysForKeyNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessSignatureAuthorizationRule}
     */
    iotHubResourceGetKeysForKeyName(apiVersion, subscriptionId, resourceGroupName, resourceName, keyName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceGetKeysForKeyName");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceGetKeysForKeyName");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceGetKeysForKeyName");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling iotHubResourceGetKeysForKeyName");
      }
      // verify the required parameter 'keyName' is set
      if (keyName === undefined || keyName === null) {
        throw new Error("Missing the required parameter 'keyName' when calling iotHubResourceGetKeysForKeyName");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'keyName': keyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessSignatureAuthorizationRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotHubResourceImportDevices operation.
     * @callback module:api/POSTApi~iotHubResourceImportDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {module:model/ImportDevicesRequest} importDevicesParameters The parameters that specify the import devices operation.
     * @param {module:api/POSTApi~iotHubResourceImportDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    iotHubResourceImportDevices(apiVersion, subscriptionId, resourceGroupName, resourceName, importDevicesParameters, callback) {
      let postBody = importDevicesParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceImportDevices");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceImportDevices");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceImportDevices");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling iotHubResourceImportDevices");
      }
      // verify the required parameter 'importDevicesParameters' is set
      if (importDevicesParameters === undefined || importDevicesParameters === null) {
        throw new Error("Missing the required parameter 'importDevicesParameters' when calling iotHubResourceImportDevices");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotHubResourceListKeys operation.
     * @callback module:api/POSTApi~iotHubResourceListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessSignatureAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {module:api/POSTApi~iotHubResourceListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessSignatureAuthorizationRuleListResult}
     */
    iotHubResourceListKeys(apiVersion, subscriptionId, resourceGroupName, resourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceListKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceListKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceListKeys");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling iotHubResourceListKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessSignatureAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotHubResourceTestAllRoutes operation.
     * @callback module:api/POSTApi~iotHubResourceTestAllRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestAllRoutesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test all routes
     * Test all routes configured in this Iot Hub
     * @param {String} iotHubName IotHub to be tested
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName resource group which Iot Hub belongs to
     * @param {String} apiVersion The version of the API.
     * @param {module:model/TestAllRoutesInput} input Input for testing all routes
     * @param {module:api/POSTApi~iotHubResourceTestAllRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestAllRoutesResult}
     */
    iotHubResourceTestAllRoutes(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, callback) {
      let postBody = input;
      // verify the required parameter 'iotHubName' is set
      if (iotHubName === undefined || iotHubName === null) {
        throw new Error("Missing the required parameter 'iotHubName' when calling iotHubResourceTestAllRoutes");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceTestAllRoutes");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceTestAllRoutes");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceTestAllRoutes");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling iotHubResourceTestAllRoutes");
      }

      let pathParams = {
        'iotHubName': iotHubName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestAllRoutesResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the iotHubResourceTestRoute operation.
     * @callback module:api/POSTApi~iotHubResourceTestRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestRouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test the new route
     * Test the new route for this Iot Hub
     * @param {String} iotHubName IotHub to be tested
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName resource group which Iot Hub belongs to
     * @param {String} apiVersion The version of the API.
     * @param {module:model/TestRouteInput} input Route that needs to be tested
     * @param {module:api/POSTApi~iotHubResourceTestRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestRouteResult}
     */
    iotHubResourceTestRoute(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, callback) {
      let postBody = input;
      // verify the required parameter 'iotHubName' is set
      if (iotHubName === undefined || iotHubName === null) {
        throw new Error("Missing the required parameter 'iotHubName' when calling iotHubResourceTestRoute");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling iotHubResourceTestRoute");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling iotHubResourceTestRoute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling iotHubResourceTestRoute");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling iotHubResourceTestRoute");
      }

      let pathParams = {
        'iotHubName': iotHubName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestRouteResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
