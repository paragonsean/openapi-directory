# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_route_result_details import TestRouteResultDetails
from openapi_server import util


class TestRouteResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: TestRouteResultDetails=None, result: str=None):
        """TestRouteResult - a model defined in OpenAPI

        :param details: The details of this TestRouteResult.
        :param result: The result of this TestRouteResult.
        """
        self.openapi_types = {
            'details': TestRouteResultDetails,
            'result': str
        }

        self.attribute_map = {
            'details': 'details',
            'result': 'result'
        }

        self._details = details
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestRouteResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestRouteResult of this TestRouteResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this TestRouteResult.


        :return: The details of this TestRouteResult.
        :rtype: TestRouteResultDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this TestRouteResult.


        :param details: The details of this TestRouteResult.
        :type details: TestRouteResultDetails
        """

        self._details = details

    @property
    def result(self):
        """Gets the result of this TestRouteResult.

        Result of testing route

        :return: The result of this TestRouteResult.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TestRouteResult.

        Result of testing route

        :param result: The result of this TestRouteResult.
        :type result: str
        """
        allowed_values = ["undefined", "false", "true"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result
