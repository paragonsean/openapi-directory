/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ExportDevicesRequest;
import org.openapitools.client.model.ImportDevicesRequest;
import org.openapitools.client.model.IotHubNameAvailabilityInfo;
import org.openapitools.client.model.JobResponse;
import org.openapitools.client.model.OperationInputs;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRule;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRuleListResult;
import org.openapitools.client.model.TestAllRoutesInput;
import org.openapitools.client.model.TestAllRoutesResult;
import org.openapitools.client.model.TestRouteInput;
import org.openapitools.client.model.TestRouteResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iotHubResourceCheckNameAvailability
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the IoT hub to check. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the IoT hub name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceCheckNameAvailabilityCall(String apiVersion, String subscriptionId, OperationInputs operationInputs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = operationInputs;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Devices/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceCheckNameAvailabilityValidateBeforeCall(String apiVersion, String subscriptionId, OperationInputs operationInputs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceCheckNameAvailability(Async)");
        }

        // verify the required parameter 'operationInputs' is set
        if (operationInputs == null) {
            throw new ApiException("Missing the required parameter 'operationInputs' when calling iotHubResourceCheckNameAvailability(Async)");
        }

        return iotHubResourceCheckNameAvailabilityCall(apiVersion, subscriptionId, operationInputs, _callback);

    }

    /**
     * Check if an IoT hub name is available
     * Check if an IoT hub name is available.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the IoT hub to check. (required)
     * @return IotHubNameAvailabilityInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the IoT hub name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public IotHubNameAvailabilityInfo iotHubResourceCheckNameAvailability(String apiVersion, String subscriptionId, OperationInputs operationInputs) throws ApiException {
        ApiResponse<IotHubNameAvailabilityInfo> localVarResp = iotHubResourceCheckNameAvailabilityWithHttpInfo(apiVersion, subscriptionId, operationInputs);
        return localVarResp.getData();
    }

    /**
     * Check if an IoT hub name is available
     * Check if an IoT hub name is available.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the IoT hub to check. (required)
     * @return ApiResponse&lt;IotHubNameAvailabilityInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the IoT hub name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IotHubNameAvailabilityInfo> iotHubResourceCheckNameAvailabilityWithHttpInfo(String apiVersion, String subscriptionId, OperationInputs operationInputs) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceCheckNameAvailabilityValidateBeforeCall(apiVersion, subscriptionId, operationInputs, null);
        Type localVarReturnType = new TypeToken<IotHubNameAvailabilityInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if an IoT hub name is available (asynchronously)
     * Check if an IoT hub name is available.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param operationInputs Set the name parameter in the OperationInputs structure to the name of the IoT hub to check. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized response that specifies whether the IoT hub name is available. If the name is not available, the body contains the reason. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceCheckNameAvailabilityAsync(String apiVersion, String subscriptionId, OperationInputs operationInputs, final ApiCallback<IotHubNameAvailabilityInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceCheckNameAvailabilityValidateBeforeCall(apiVersion, subscriptionId, operationInputs, _callback);
        Type localVarReturnType = new TypeToken<IotHubNameAvailabilityInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotHubResourceExportDevices
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param exportDevicesParameters The parameters that specify the export devices operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceExportDevicesCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ExportDevicesRequest exportDevicesParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportDevicesParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/exportDevices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceExportDevicesValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ExportDevicesRequest exportDevicesParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceExportDevices(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceExportDevices(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceExportDevices(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling iotHubResourceExportDevices(Async)");
        }

        // verify the required parameter 'exportDevicesParameters' is set
        if (exportDevicesParameters == null) {
            throw new ApiException("Missing the required parameter 'exportDevicesParameters' when calling iotHubResourceExportDevices(Async)");
        }

        return iotHubResourceExportDevicesCall(apiVersion, subscriptionId, resourceGroupName, resourceName, exportDevicesParameters, _callback);

    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param exportDevicesParameters The parameters that specify the export devices operation. (required)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public JobResponse iotHubResourceExportDevices(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ExportDevicesRequest exportDevicesParameters) throws ApiException {
        ApiResponse<JobResponse> localVarResp = iotHubResourceExportDevicesWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, exportDevicesParameters);
        return localVarResp.getData();
    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param exportDevicesParameters The parameters that specify the export devices operation. (required)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResponse> iotHubResourceExportDevicesWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ExportDevicesRequest exportDevicesParameters) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceExportDevicesValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, exportDevicesParameters, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities (asynchronously)
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param exportDevicesParameters The parameters that specify the export devices operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceExportDevicesAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ExportDevicesRequest exportDevicesParameters, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceExportDevicesValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, exportDevicesParameters, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotHubResourceGetKeysForKeyName
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param keyName The name of the shared access policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceGetKeysForKeyNameCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String keyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/IotHubKeys/{keyName}/listkeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "keyName" + "}", localVarApiClient.escapeString(keyName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceGetKeysForKeyNameValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String keyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling iotHubResourceGetKeysForKeyName(Async)");
        }

        // verify the required parameter 'keyName' is set
        if (keyName == null) {
            throw new ApiException("Missing the required parameter 'keyName' when calling iotHubResourceGetKeysForKeyName(Async)");
        }

        return iotHubResourceGetKeysForKeyNameCall(apiVersion, subscriptionId, resourceGroupName, resourceName, keyName, _callback);

    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param keyName The name of the shared access policy. (required)
     * @return SharedAccessSignatureAuthorizationRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessSignatureAuthorizationRule iotHubResourceGetKeysForKeyName(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String keyName) throws ApiException {
        ApiResponse<SharedAccessSignatureAuthorizationRule> localVarResp = iotHubResourceGetKeysForKeyNameWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, keyName);
        return localVarResp.getData();
    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param keyName The name of the shared access policy. (required)
     * @return ApiResponse&lt;SharedAccessSignatureAuthorizationRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessSignatureAuthorizationRule> iotHubResourceGetKeysForKeyNameWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String keyName) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceGetKeysForKeyNameValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, keyName, null);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security (asynchronously)
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param keyName The name of the shared access policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized shared access policy, including keys, that you can use to access one or more IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceGetKeysForKeyNameAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String keyName, final ApiCallback<SharedAccessSignatureAuthorizationRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceGetKeysForKeyNameValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, keyName, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotHubResourceImportDevices
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param importDevicesParameters The parameters that specify the import devices operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceImportDevicesCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ImportDevicesRequest importDevicesParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importDevicesParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/importDevices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceImportDevicesValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ImportDevicesRequest importDevicesParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceImportDevices(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceImportDevices(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceImportDevices(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling iotHubResourceImportDevices(Async)");
        }

        // verify the required parameter 'importDevicesParameters' is set
        if (importDevicesParameters == null) {
            throw new ApiException("Missing the required parameter 'importDevicesParameters' when calling iotHubResourceImportDevices(Async)");
        }

        return iotHubResourceImportDevicesCall(apiVersion, subscriptionId, resourceGroupName, resourceName, importDevicesParameters, _callback);

    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param importDevicesParameters The parameters that specify the import devices operation. (required)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public JobResponse iotHubResourceImportDevices(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ImportDevicesRequest importDevicesParameters) throws ApiException {
        ApiResponse<JobResponse> localVarResp = iotHubResourceImportDevicesWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, importDevicesParameters);
        return localVarResp.getData();
    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param importDevicesParameters The parameters that specify the import devices operation. (required)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobResponse> iotHubResourceImportDevicesWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ImportDevicesRequest importDevicesParameters) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceImportDevicesValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, importDevicesParameters, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities (asynchronously)
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param importDevicesParameters The parameters that specify the import devices operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceImportDevicesAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, ImportDevicesRequest importDevicesParameters, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceImportDevicesValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, importDevicesParameters, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotHubResourceListKeys
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceListKeysCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/listkeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceListKeysValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceListKeys(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling iotHubResourceListKeys(Async)");
        }

        return iotHubResourceListKeysCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);

    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @return SharedAccessSignatureAuthorizationRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public SharedAccessSignatureAuthorizationRuleListResult iotHubResourceListKeys(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        ApiResponse<SharedAccessSignatureAuthorizationRuleListResult> localVarResp = iotHubResourceListKeysWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName);
        return localVarResp.getData();
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @return ApiResponse&lt;SharedAccessSignatureAuthorizationRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SharedAccessSignatureAuthorizationRuleListResult> iotHubResourceListKeysWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceListKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, null);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security (asynchronously)
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. The body contains a JSON-serialized array of shared access policies, including keys, that you can use to access the IoT hub endpoints. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceListKeysAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback<SharedAccessSignatureAuthorizationRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceListKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);
        Type localVarReturnType = new TypeToken<SharedAccessSignatureAuthorizationRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotHubResourceTestAllRoutes
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Input for testing all routes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceTestAllRoutesCall(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestAllRoutesInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testall"
            .replace("{" + "iotHubName" + "}", localVarApiClient.escapeString(iotHubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceTestAllRoutesValidateBeforeCall(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestAllRoutesInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iotHubName' is set
        if (iotHubName == null) {
            throw new ApiException("Missing the required parameter 'iotHubName' when calling iotHubResourceTestAllRoutes(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceTestAllRoutes(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceTestAllRoutes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceTestAllRoutes(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling iotHubResourceTestAllRoutes(Async)");
        }

        return iotHubResourceTestAllRoutesCall(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, _callback);

    }

    /**
     * Test all routes
     * Test all routes configured in this Iot Hub
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Input for testing all routes (required)
     * @return TestAllRoutesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public TestAllRoutesResult iotHubResourceTestAllRoutes(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestAllRoutesInput input) throws ApiException {
        ApiResponse<TestAllRoutesResult> localVarResp = iotHubResourceTestAllRoutesWithHttpInfo(iotHubName, subscriptionId, resourceGroupName, apiVersion, input);
        return localVarResp.getData();
    }

    /**
     * Test all routes
     * Test all routes configured in this Iot Hub
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Input for testing all routes (required)
     * @return ApiResponse&lt;TestAllRoutesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestAllRoutesResult> iotHubResourceTestAllRoutesWithHttpInfo(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestAllRoutesInput input) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceTestAllRoutesValidateBeforeCall(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, null);
        Type localVarReturnType = new TypeToken<TestAllRoutesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test all routes (asynchronously)
     * Test all routes configured in this Iot Hub
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Input for testing all routes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceTestAllRoutesAsync(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestAllRoutesInput input, final ApiCallback<TestAllRoutesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceTestAllRoutesValidateBeforeCall(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, _callback);
        Type localVarReturnType = new TypeToken<TestAllRoutesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotHubResourceTestRoute
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Route that needs to be tested (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceTestRouteCall(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestRouteInput input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{iotHubName}/routing/routes/$testnew"
            .replace("{" + "iotHubName" + "}", localVarApiClient.escapeString(iotHubName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceTestRouteValidateBeforeCall(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestRouteInput input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iotHubName' is set
        if (iotHubName == null) {
            throw new ApiException("Missing the required parameter 'iotHubName' when calling iotHubResourceTestRoute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceTestRoute(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceTestRoute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceTestRoute(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling iotHubResourceTestRoute(Async)");
        }

        return iotHubResourceTestRouteCall(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, _callback);

    }

    /**
     * Test the new route
     * Test the new route for this Iot Hub
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Route that needs to be tested (required)
     * @return TestRouteResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public TestRouteResult iotHubResourceTestRoute(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestRouteInput input) throws ApiException {
        ApiResponse<TestRouteResult> localVarResp = iotHubResourceTestRouteWithHttpInfo(iotHubName, subscriptionId, resourceGroupName, apiVersion, input);
        return localVarResp.getData();
    }

    /**
     * Test the new route
     * Test the new route for this Iot Hub
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Route that needs to be tested (required)
     * @return ApiResponse&lt;TestRouteResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRouteResult> iotHubResourceTestRouteWithHttpInfo(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestRouteInput input) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceTestRouteValidateBeforeCall(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, null);
        Type localVarReturnType = new TypeToken<TestRouteResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test the new route (asynchronously)
     * Test the new route for this Iot Hub
     * @param iotHubName IotHub to be tested (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName resource group which Iot Hub belongs to (required)
     * @param apiVersion The version of the API. (required)
     * @param input Route that needs to be tested (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceTestRouteAsync(String iotHubName, String subscriptionId, String resourceGroupName, String apiVersion, TestRouteInput input, final ApiCallback<TestRouteResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceTestRouteValidateBeforeCall(iotHubName, subscriptionId, resourceGroupName, apiVersion, input, _callback);
        Type localVarReturnType = new TypeToken<TestRouteResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
