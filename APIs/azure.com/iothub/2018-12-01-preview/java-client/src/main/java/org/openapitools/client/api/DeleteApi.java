/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.IotHubDescription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeleteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeleteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeleteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for iotHubResourceDelete
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Iot Hub resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the IoT Hub service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the Iot hub metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the Iot hub metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling iotHubResourceDelete(Async)");
        }

        return iotHubResourceDeleteCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);

    }

    /**
     * Delete an IoT hub
     * Delete an IoT hub.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @return IotHubDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Iot Hub resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the IoT Hub service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the Iot hub metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the Iot hub metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public IotHubDescription iotHubResourceDelete(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        ApiResponse<IotHubDescription> localVarResp = iotHubResourceDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName);
        return localVarResp.getData();
    }

    /**
     * Delete an IoT hub
     * Delete an IoT hub.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @return ApiResponse&lt;IotHubDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Iot Hub resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the IoT Hub service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the Iot hub metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the Iot hub metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IotHubDescription> iotHubResourceDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, null);
        Type localVarReturnType = new TypeToken<IotHubDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an IoT hub (asynchronously)
     * Delete an IoT hub.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is returned as a response to the status polling request for the delete operation. The body contains the resource representation that indicates a transitional provisioning state. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The Iot Hub resource provider always returns a 202 Accepted status code with valid Location and Retry-After headers. The resource provider also sets the Azure-AsyncOperation header with a URL that points to the operation resource for this operation. Subsequent GET attempts on the resource after a DELETE operation return a resource representation that indicates a transitional provisioning state (such as Terminating). To retrieve the status of the operation, a client can either poll the URL returned in the Location header after the Retry-After interval, get the IoT Hub service status directly, or query the operation resource. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Once the long running delete operation completes successfully, a 204 No Content status code is returned when the status polling request finds the Iot hub metadata in the service and the status of the delete operation is set to a completed state. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> After the long running delete operation completes successfully, a 404 Not Found is returned when the status polling request no longer finds the Iot hub metadata in the service. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, final ApiCallback<IotHubDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, _callback);
        Type localVarReturnType = new TypeToken<IotHubDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for iotHubResourceDeleteEventHubConsumerGroup
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub. (required)
     * @param name The name of the consumer group to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceDeleteEventHubConsumerGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String eventHubEndpointName, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/eventHubEndpoints/{eventHubEndpointName}/ConsumerGroups/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "eventHubEndpointName" + "}", localVarApiClient.escapeString(eventHubEndpointName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call iotHubResourceDeleteEventHubConsumerGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String eventHubEndpointName, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling iotHubResourceDeleteEventHubConsumerGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling iotHubResourceDeleteEventHubConsumerGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling iotHubResourceDeleteEventHubConsumerGroup(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling iotHubResourceDeleteEventHubConsumerGroup(Async)");
        }

        // verify the required parameter 'eventHubEndpointName' is set
        if (eventHubEndpointName == null) {
            throw new ApiException("Missing the required parameter 'eventHubEndpointName' when calling iotHubResourceDeleteEventHubConsumerGroup(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling iotHubResourceDeleteEventHubConsumerGroup(Async)");
        }

        return iotHubResourceDeleteEventHubConsumerGroupCall(apiVersion, subscriptionId, resourceGroupName, resourceName, eventHubEndpointName, name, _callback);

    }

    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub. (required)
     * @param name The name of the consumer group to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public void iotHubResourceDeleteEventHubConsumerGroup(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String eventHubEndpointName, String name) throws ApiException {
        iotHubResourceDeleteEventHubConsumerGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, resourceName, eventHubEndpointName, name);
    }

    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub. (required)
     * @param name The name of the consumer group to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> iotHubResourceDeleteEventHubConsumerGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String eventHubEndpointName, String name) throws ApiException {
        okhttp3.Call localVarCall = iotHubResourceDeleteEventHubConsumerGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, eventHubEndpointName, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub (asynchronously)
     * Delete a consumer group from an Event Hub-compatible endpoint in an IoT hub.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the IoT hub. (required)
     * @param resourceName The name of the IoT hub. (required)
     * @param eventHubEndpointName The name of the Event Hub-compatible endpoint in the IoT hub. (required)
     * @param name The name of the consumer group to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This is a synchronous operation. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call iotHubResourceDeleteEventHubConsumerGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, String resourceName, String eventHubEndpointName, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = iotHubResourceDeleteEventHubConsumerGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, resourceName, eventHubEndpointName, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
