/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Routing message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:45.516913-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutingMessage {
  public static final String SERIALIZED_NAME_APP_PROPERTIES = "appProperties";
  @SerializedName(SERIALIZED_NAME_APP_PROPERTIES)
  private Map<String, String> appProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_SYSTEM_PROPERTIES = "systemProperties";
  @SerializedName(SERIALIZED_NAME_SYSTEM_PROPERTIES)
  private Map<String, String> systemProperties = new HashMap<>();

  public RoutingMessage() {
  }

  public RoutingMessage appProperties(Map<String, String> appProperties) {
    this.appProperties = appProperties;
    return this;
  }

  public RoutingMessage putAppPropertiesItem(String key, String appPropertiesItem) {
    if (this.appProperties == null) {
      this.appProperties = new HashMap<>();
    }
    this.appProperties.put(key, appPropertiesItem);
    return this;
  }

  /**
   * App properties
   * @return appProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getAppProperties() {
    return appProperties;
  }

  public void setAppProperties(Map<String, String> appProperties) {
    this.appProperties = appProperties;
  }


  public RoutingMessage body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Body of routing message
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public RoutingMessage systemProperties(Map<String, String> systemProperties) {
    this.systemProperties = systemProperties;
    return this;
  }

  public RoutingMessage putSystemPropertiesItem(String key, String systemPropertiesItem) {
    if (this.systemProperties == null) {
      this.systemProperties = new HashMap<>();
    }
    this.systemProperties.put(key, systemPropertiesItem);
    return this;
  }

  /**
   * System properties
   * @return systemProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getSystemProperties() {
    return systemProperties;
  }

  public void setSystemProperties(Map<String, String> systemProperties) {
    this.systemProperties = systemProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingMessage routingMessage = (RoutingMessage) o;
    return Objects.equals(this.appProperties, routingMessage.appProperties) &&
        Objects.equals(this.body, routingMessage.body) &&
        Objects.equals(this.systemProperties, routingMessage.systemProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appProperties, body, systemProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingMessage {\n");
    sb.append("    appProperties: ").append(toIndentedString(appProperties)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    systemProperties: ").append(toIndentedString(systemProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appProperties");
    openapiFields.add("body");
    openapiFields.add("systemProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutingMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutingMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutingMessage is not found in the empty JSON string", RoutingMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutingMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutingMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutingMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutingMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutingMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutingMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutingMessage>() {
           @Override
           public void write(JsonWriter out, RoutingMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutingMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutingMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutingMessage
   * @throws IOException if the JSON string is invalid with respect to RoutingMessage
   */
  public static RoutingMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutingMessage.class);
  }

  /**
   * Convert an instance of RoutingMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

