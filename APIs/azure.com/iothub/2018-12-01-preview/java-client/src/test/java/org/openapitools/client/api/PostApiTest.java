/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.ExportDevicesRequest;
import org.openapitools.client.model.ImportDevicesRequest;
import org.openapitools.client.model.IotHubNameAvailabilityInfo;
import org.openapitools.client.model.JobResponse;
import org.openapitools.client.model.OperationInputs;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRule;
import org.openapitools.client.model.SharedAccessSignatureAuthorizationRuleListResult;
import org.openapitools.client.model.TestAllRoutesInput;
import org.openapitools.client.model.TestAllRoutesResult;
import org.openapitools.client.model.TestRouteInput;
import org.openapitools.client.model.TestRouteResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostApi
 */
@Disabled
public class PostApiTest {

    private final PostApi api = new PostApi();

    /**
     * Check if an IoT hub name is available
     *
     * Check if an IoT hub name is available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotHubResourceCheckNameAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        OperationInputs operationInputs = null;
        IotHubNameAvailabilityInfo response = api.iotHubResourceCheckNameAvailability(apiVersion, subscriptionId, operationInputs);
        // TODO: test validations
    }

    /**
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     *
     * Exports all the device identities in the IoT hub identity registry to an Azure Storage blob container. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotHubResourceExportDevicesTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        ExportDevicesRequest exportDevicesParameters = null;
        JobResponse response = api.iotHubResourceExportDevices(apiVersion, subscriptionId, resourceGroupName, resourceName, exportDevicesParameters);
        // TODO: test validations
    }

    /**
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     *
     * Get a shared access policy by name from an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotHubResourceGetKeysForKeyNameTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        String keyName = null;
        SharedAccessSignatureAuthorizationRule response = api.iotHubResourceGetKeysForKeyName(apiVersion, subscriptionId, resourceGroupName, resourceName, keyName);
        // TODO: test validations
    }

    /**
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities
     *
     * Import, update, or delete device identities in the IoT hub identity registry from a blob. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-identity-registry#import-and-export-device-identities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotHubResourceImportDevicesTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        ImportDevicesRequest importDevicesParameters = null;
        JobResponse response = api.iotHubResourceImportDevices(apiVersion, subscriptionId, resourceGroupName, resourceName, importDevicesParameters);
        // TODO: test validations
    }

    /**
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security
     *
     * Get the security metadata for an IoT hub. For more information, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-security.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotHubResourceListKeysTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        SharedAccessSignatureAuthorizationRuleListResult response = api.iotHubResourceListKeys(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Test all routes
     *
     * Test all routes configured in this Iot Hub
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotHubResourceTestAllRoutesTest() throws ApiException {
        String iotHubName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        TestAllRoutesInput input = null;
        TestAllRoutesResult response = api.iotHubResourceTestAllRoutes(iotHubName, subscriptionId, resourceGroupName, apiVersion, input);
        // TODO: test validations
    }

    /**
     * Test the new route
     *
     * Test the new route for this Iot Hub
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void iotHubResourceTestRouteTest() throws ApiException {
        String iotHubName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        TestRouteInput input = null;
        TestRouteResult response = api.iotHubResourceTestRoute(iotHubName, subscriptionId, resourceGroupName, apiVersion, input);
        // TODO: test validations
    }

}
