/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RouteProperties model module.
 * @module model/RouteProperties
 * @version 2018-12-01-preview
 */
class RouteProperties {
    /**
     * Constructs a new <code>RouteProperties</code>.
     * The properties of a routing rule that your IoT hub uses to route messages to endpoints.
     * @alias module:model/RouteProperties
     * @param endpointNames {Array.<String>} The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.
     * @param isEnabled {Boolean} Used to specify whether a route is enabled.
     * @param name {String} The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
     * @param source {module:model/RouteProperties.SourceEnum} The source that the routing rule is to be applied to, such as DeviceMessages.
     */
    constructor(endpointNames, isEnabled, name, source) { 
        
        RouteProperties.initialize(this, endpointNames, isEnabled, name, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, endpointNames, isEnabled, name, source) { 
        obj['endpointNames'] = endpointNames;
        obj['isEnabled'] = isEnabled;
        obj['name'] = name;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>RouteProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RouteProperties} obj Optional instance to populate.
     * @return {module:model/RouteProperties} The populated <code>RouteProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RouteProperties();

            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], 'String');
            }
            if (data.hasOwnProperty('endpointNames')) {
                obj['endpointNames'] = ApiClient.convertToType(data['endpointNames'], ['String']);
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RouteProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RouteProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RouteProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['condition'] && !(typeof data['condition'] === 'string' || data['condition'] instanceof String)) {
            throw new Error("Expected the field `condition` to be a primitive type in the JSON string but got " + data['condition']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['endpointNames'])) {
            throw new Error("Expected the field `endpointNames` to be an array in the JSON data but got " + data['endpointNames']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

RouteProperties.RequiredProperties = ["endpointNames", "isEnabled", "name", "source"];

/**
 * The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to true by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language
 * @member {String} condition
 */
RouteProperties.prototype['condition'] = undefined;

/**
 * The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.
 * @member {Array.<String>} endpointNames
 */
RouteProperties.prototype['endpointNames'] = undefined;

/**
 * Used to specify whether a route is enabled.
 * @member {Boolean} isEnabled
 */
RouteProperties.prototype['isEnabled'] = undefined;

/**
 * The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.
 * @member {String} name
 */
RouteProperties.prototype['name'] = undefined;

/**
 * The source that the routing rule is to be applied to, such as DeviceMessages.
 * @member {module:model/RouteProperties.SourceEnum} source
 */
RouteProperties.prototype['source'] = undefined;





/**
 * Allowed values for the <code>source</code> property.
 * @enum {String}
 * @readonly
 */
RouteProperties['SourceEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "DeviceMessages"
     * @const
     */
    "DeviceMessages": "DeviceMessages",

    /**
     * value: "TwinChangeEvents"
     * @const
     */
    "TwinChangeEvents": "TwinChangeEvents",

    /**
     * value: "DeviceLifecycleEvents"
     * @const
     */
    "DeviceLifecycleEvents": "DeviceLifecycleEvents",

    /**
     * value: "DeviceJobLifecycleEvents"
     * @const
     */
    "DeviceJobLifecycleEvents": "DeviceJobLifecycleEvents"
};



export default RouteProperties;

