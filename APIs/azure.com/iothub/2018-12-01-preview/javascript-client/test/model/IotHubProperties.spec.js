/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.IotHubClient);
  }
}(this, function(expect, IotHubClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new IotHubClient.IotHubProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('IotHubProperties', function() {
    it('should create an instance of IotHubProperties', function() {
      // uncomment below and update the code to test IotHubProperties
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be.a(IotHubClient.IotHubProperties);
    });

    it('should have the property authorizationPolicies (base name: "authorizationPolicies")', function() {
      // uncomment below and update the code to test the property authorizationPolicies
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property cloudToDevice (base name: "cloudToDevice")', function() {
      // uncomment below and update the code to test the property cloudToDevice
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property comments (base name: "comments")', function() {
      // uncomment below and update the code to test the property comments
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property deviceStreams (base name: "deviceStreams")', function() {
      // uncomment below and update the code to test the property deviceStreams
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property enableFileUploadNotifications (base name: "enableFileUploadNotifications")', function() {
      // uncomment below and update the code to test the property enableFileUploadNotifications
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property eventHubEndpoints (base name: "eventHubEndpoints")', function() {
      // uncomment below and update the code to test the property eventHubEndpoints
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property features (base name: "features")', function() {
      // uncomment below and update the code to test the property features
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property hostName (base name: "hostName")', function() {
      // uncomment below and update the code to test the property hostName
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property ipFilterRules (base name: "ipFilterRules")', function() {
      // uncomment below and update the code to test the property ipFilterRules
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property locations (base name: "locations")', function() {
      // uncomment below and update the code to test the property locations
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property messagingEndpoints (base name: "messagingEndpoints")', function() {
      // uncomment below and update the code to test the property messagingEndpoints
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property routing (base name: "routing")', function() {
      // uncomment below and update the code to test the property routing
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

    it('should have the property storageEndpoints (base name: "storageEndpoints")', function() {
      // uncomment below and update the code to test the property storageEndpoints
      //var instance = new IotHubClient.IotHubProperties();
      //expect(instance).to.be();
    });

  });

}));
