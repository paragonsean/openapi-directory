/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-11-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoutingMessage from './RoutingMessage';
import RoutingTwin from './RoutingTwin';

/**
 * The TestAllRoutesInput model module.
 * @module model/TestAllRoutesInput
 * @version 2019-11-04
 */
class TestAllRoutesInput {
    /**
     * Constructs a new <code>TestAllRoutesInput</code>.
     * Input for testing all routes
     * @alias module:model/TestAllRoutesInput
     */
    constructor() { 
        
        TestAllRoutesInput.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestAllRoutesInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestAllRoutesInput} obj Optional instance to populate.
     * @return {module:model/TestAllRoutesInput} The populated <code>TestAllRoutesInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestAllRoutesInput();

            if (data.hasOwnProperty('message')) {
                obj['message'] = RoutingMessage.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('routingSource')) {
                obj['routingSource'] = ApiClient.convertToType(data['routingSource'], 'String');
            }
            if (data.hasOwnProperty('twin')) {
                obj['twin'] = RoutingTwin.constructFromObject(data['twin']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestAllRoutesInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestAllRoutesInput</code>.
     */
    static validateJSON(data) {
        // validate the optional field `message`
        if (data['message']) { // data not null
          RoutingMessage.validateJSON(data['message']);
        }
        // ensure the json data is a string
        if (data['routingSource'] && !(typeof data['routingSource'] === 'string' || data['routingSource'] instanceof String)) {
            throw new Error("Expected the field `routingSource` to be a primitive type in the JSON string but got " + data['routingSource']);
        }
        // validate the optional field `twin`
        if (data['twin']) { // data not null
          RoutingTwin.validateJSON(data['twin']);
        }

        return true;
    }


}



/**
 * @member {module:model/RoutingMessage} message
 */
TestAllRoutesInput.prototype['message'] = undefined;

/**
 * Routing source
 * @member {module:model/TestAllRoutesInput.RoutingSourceEnum} routingSource
 */
TestAllRoutesInput.prototype['routingSource'] = undefined;

/**
 * @member {module:model/RoutingTwin} twin
 */
TestAllRoutesInput.prototype['twin'] = undefined;





/**
 * Allowed values for the <code>routingSource</code> property.
 * @enum {String}
 * @readonly
 */
TestAllRoutesInput['RoutingSourceEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "DeviceMessages"
     * @const
     */
    "DeviceMessages": "DeviceMessages",

    /**
     * value: "TwinChangeEvents"
     * @const
     */
    "TwinChangeEvents": "TwinChangeEvents",

    /**
     * value: "DeviceLifecycleEvents"
     * @const
     */
    "DeviceLifecycleEvents": "DeviceLifecycleEvents",

    /**
     * value: "DeviceJobLifecycleEvents"
     * @const
     */
    "DeviceJobLifecycleEvents": "DeviceJobLifecycleEvents"
};



export default TestAllRoutesInput;

