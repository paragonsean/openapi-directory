/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-11-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestRouteResultDetails from './TestRouteResultDetails';

/**
 * The TestRouteResult model module.
 * @module model/TestRouteResult
 * @version 2019-11-04
 */
class TestRouteResult {
    /**
     * Constructs a new <code>TestRouteResult</code>.
     * Result of testing one route
     * @alias module:model/TestRouteResult
     */
    constructor() { 
        
        TestRouteResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TestRouteResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRouteResult} obj Optional instance to populate.
     * @return {module:model/TestRouteResult} The populated <code>TestRouteResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRouteResult();

            if (data.hasOwnProperty('details')) {
                obj['details'] = TestRouteResultDetails.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestRouteResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestRouteResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `details`
        if (data['details']) { // data not null
          TestRouteResultDetails.validateJSON(data['details']);
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }

        return true;
    }


}



/**
 * @member {module:model/TestRouteResultDetails} details
 */
TestRouteResult.prototype['details'] = undefined;

/**
 * Result of testing route
 * @member {module:model/TestRouteResult.ResultEnum} result
 */
TestRouteResult.prototype['result'] = undefined;





/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
TestRouteResult['ResultEnum'] = {

    /**
     * value: "undefined"
     * @const
     */
    "undefined": "undefined",

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "true"
     * @const
     */
    "true": "true"
};



export default TestRouteResult;

