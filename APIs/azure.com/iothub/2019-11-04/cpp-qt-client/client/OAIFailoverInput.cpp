/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-11-04
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverInput::OAIFailoverInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverInput::OAIFailoverInput() {
    this->initializeModel();
}

OAIFailoverInput::~OAIFailoverInput() {}

void OAIFailoverInput::initializeModel() {

    m_failover_region_isSet = false;
    m_failover_region_isValid = false;
}

void OAIFailoverInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverInput::fromJsonObject(QJsonObject json) {

    m_failover_region_isValid = ::OpenAPI::fromJsonValue(m_failover_region, json[QString("failoverRegion")]);
    m_failover_region_isSet = !json[QString("failoverRegion")].isNull() && m_failover_region_isValid;
}

QString OAIFailoverInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverInput::asJsonObject() const {
    QJsonObject obj;
    if (m_failover_region_isSet) {
        obj.insert(QString("failoverRegion"), ::OpenAPI::toJsonValue(m_failover_region));
    }
    return obj;
}

QString OAIFailoverInput::getFailoverRegion() const {
    return m_failover_region;
}
void OAIFailoverInput::setFailoverRegion(const QString &failover_region) {
    m_failover_region = failover_region;
    m_failover_region_isSet = true;
}

bool OAIFailoverInput::is_failover_region_Set() const{
    return m_failover_region_isSet;
}

bool OAIFailoverInput::is_failover_region_Valid() const{
    return m_failover_region_isValid;
}

bool OAIFailoverInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failover_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_failover_region_isValid && true;
}

} // namespace OpenAPI
