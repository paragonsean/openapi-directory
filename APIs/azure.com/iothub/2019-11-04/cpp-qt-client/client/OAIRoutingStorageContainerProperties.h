/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-11-04
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRoutingStorageContainerProperties.h
 *
 * The properties related to a storage container endpoint.
 */

#ifndef OAIRoutingStorageContainerProperties_H
#define OAIRoutingStorageContainerProperties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRoutingStorageContainerProperties : public OAIObject {
public:
    OAIRoutingStorageContainerProperties();
    OAIRoutingStorageContainerProperties(QString json);
    ~OAIRoutingStorageContainerProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBatchFrequencyInSeconds() const;
    void setBatchFrequencyInSeconds(const qint32 &batch_frequency_in_seconds);
    bool is_batch_frequency_in_seconds_Set() const;
    bool is_batch_frequency_in_seconds_Valid() const;

    QString getConnectionString() const;
    void setConnectionString(const QString &connection_string);
    bool is_connection_string_Set() const;
    bool is_connection_string_Valid() const;

    QString getContainerName() const;
    void setContainerName(const QString &container_name);
    bool is_container_name_Set() const;
    bool is_container_name_Valid() const;

    QString getEncoding() const;
    void setEncoding(const QString &encoding);
    bool is_encoding_Set() const;
    bool is_encoding_Valid() const;

    QString getFileNameFormat() const;
    void setFileNameFormat(const QString &file_name_format);
    bool is_file_name_format_Set() const;
    bool is_file_name_format_Valid() const;

    qint32 getMaxChunkSizeInBytes() const;
    void setMaxChunkSizeInBytes(const qint32 &max_chunk_size_in_bytes);
    bool is_max_chunk_size_in_bytes_Set() const;
    bool is_max_chunk_size_in_bytes_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getResourceGroup() const;
    void setResourceGroup(const QString &resource_group);
    bool is_resource_group_Set() const;
    bool is_resource_group_Valid() const;

    QString getSubscriptionId() const;
    void setSubscriptionId(const QString &subscription_id);
    bool is_subscription_id_Set() const;
    bool is_subscription_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_batch_frequency_in_seconds;
    bool m_batch_frequency_in_seconds_isSet;
    bool m_batch_frequency_in_seconds_isValid;

    QString m_connection_string;
    bool m_connection_string_isSet;
    bool m_connection_string_isValid;

    QString m_container_name;
    bool m_container_name_isSet;
    bool m_container_name_isValid;

    QString m_encoding;
    bool m_encoding_isSet;
    bool m_encoding_isValid;

    QString m_file_name_format;
    bool m_file_name_format_isSet;
    bool m_file_name_format_isValid;

    qint32 m_max_chunk_size_in_bytes;
    bool m_max_chunk_size_in_bytes_isSet;
    bool m_max_chunk_size_in_bytes_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_resource_group;
    bool m_resource_group_isSet;
    bool m_resource_group_isValid;

    QString m_subscription_id;
    bool m_subscription_id_isSet;
    bool m_subscription_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRoutingStorageContainerProperties)

#endif // OAIRoutingStorageContainerProperties_H
