# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EnrichmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_names: List[str]=None, key: str=None, value: str=None):
        """EnrichmentProperties - a model defined in OpenAPI

        :param endpoint_names: The endpoint_names of this EnrichmentProperties.
        :param key: The key of this EnrichmentProperties.
        :param value: The value of this EnrichmentProperties.
        """
        self.openapi_types = {
            'endpoint_names': List[str],
            'key': str,
            'value': str
        }

        self.attribute_map = {
            'endpoint_names': 'endpointNames',
            'key': 'key',
            'value': 'value'
        }

        self._endpoint_names = endpoint_names
        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnrichmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnrichmentProperties of this EnrichmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_names(self):
        """Gets the endpoint_names of this EnrichmentProperties.

        The list of endpoints for which the enrichment is applied to the message.

        :return: The endpoint_names of this EnrichmentProperties.
        :rtype: List[str]
        """
        return self._endpoint_names

    @endpoint_names.setter
    def endpoint_names(self, endpoint_names):
        """Sets the endpoint_names of this EnrichmentProperties.

        The list of endpoints for which the enrichment is applied to the message.

        :param endpoint_names: The endpoint_names of this EnrichmentProperties.
        :type endpoint_names: List[str]
        """
        if endpoint_names is None:
            raise ValueError("Invalid value for `endpoint_names`, must not be `None`")
        if endpoint_names is not None and len(endpoint_names) < 1:
            raise ValueError("Invalid value for `endpoint_names`, number of items must be greater than or equal to `1`")

        self._endpoint_names = endpoint_names

    @property
    def key(self):
        """Gets the key of this EnrichmentProperties.

        The key or name for the enrichment property.

        :return: The key of this EnrichmentProperties.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this EnrichmentProperties.

        The key or name for the enrichment property.

        :param key: The key of this EnrichmentProperties.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def value(self):
        """Gets the value of this EnrichmentProperties.

        The value for the enrichment property.

        :return: The value of this EnrichmentProperties.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EnrichmentProperties.

        The value for the enrichment property.

        :param value: The value of this EnrichmentProperties.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
