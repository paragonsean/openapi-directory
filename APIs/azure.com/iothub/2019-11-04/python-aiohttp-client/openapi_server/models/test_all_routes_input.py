# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.routing_message import RoutingMessage
from openapi_server.models.routing_twin import RoutingTwin
from openapi_server import util


class TestAllRoutesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: RoutingMessage=None, routing_source: str=None, twin: RoutingTwin=None):
        """TestAllRoutesInput - a model defined in OpenAPI

        :param message: The message of this TestAllRoutesInput.
        :param routing_source: The routing_source of this TestAllRoutesInput.
        :param twin: The twin of this TestAllRoutesInput.
        """
        self.openapi_types = {
            'message': RoutingMessage,
            'routing_source': str,
            'twin': RoutingTwin
        }

        self.attribute_map = {
            'message': 'message',
            'routing_source': 'routingSource',
            'twin': 'twin'
        }

        self._message = message
        self._routing_source = routing_source
        self._twin = twin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestAllRoutesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestAllRoutesInput of this TestAllRoutesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this TestAllRoutesInput.


        :return: The message of this TestAllRoutesInput.
        :rtype: RoutingMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TestAllRoutesInput.


        :param message: The message of this TestAllRoutesInput.
        :type message: RoutingMessage
        """

        self._message = message

    @property
    def routing_source(self):
        """Gets the routing_source of this TestAllRoutesInput.

        Routing source

        :return: The routing_source of this TestAllRoutesInput.
        :rtype: str
        """
        return self._routing_source

    @routing_source.setter
    def routing_source(self, routing_source):
        """Sets the routing_source of this TestAllRoutesInput.

        Routing source

        :param routing_source: The routing_source of this TestAllRoutesInput.
        :type routing_source: str
        """
        allowed_values = ["Invalid", "DeviceMessages", "TwinChangeEvents", "DeviceLifecycleEvents", "DeviceJobLifecycleEvents"]  # noqa: E501
        if routing_source not in allowed_values:
            raise ValueError(
                "Invalid value for `routing_source` ({0}), must be one of {1}"
                .format(routing_source, allowed_values)
            )

        self._routing_source = routing_source

    @property
    def twin(self):
        """Gets the twin of this TestAllRoutesInput.


        :return: The twin of this TestAllRoutesInput.
        :rtype: RoutingTwin
        """
        return self._twin

    @twin.setter
    def twin(self, twin):
        """Sets the twin of this TestAllRoutesInput.


        :param twin: The twin of this TestAllRoutesInput.
        :type twin: RoutingTwin
        """

        self._twin = twin
