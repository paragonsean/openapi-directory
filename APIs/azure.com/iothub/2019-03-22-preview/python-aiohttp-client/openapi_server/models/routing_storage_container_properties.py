# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RoutingStorageContainerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_frequency_in_seconds: int=None, connection_string: str=None, container_name: str=None, encoding: str=None, file_name_format: str=None, max_chunk_size_in_bytes: int=None, name: str=None, resource_group: str=None, subscription_id: str=None):
        """RoutingStorageContainerProperties - a model defined in OpenAPI

        :param batch_frequency_in_seconds: The batch_frequency_in_seconds of this RoutingStorageContainerProperties.
        :param connection_string: The connection_string of this RoutingStorageContainerProperties.
        :param container_name: The container_name of this RoutingStorageContainerProperties.
        :param encoding: The encoding of this RoutingStorageContainerProperties.
        :param file_name_format: The file_name_format of this RoutingStorageContainerProperties.
        :param max_chunk_size_in_bytes: The max_chunk_size_in_bytes of this RoutingStorageContainerProperties.
        :param name: The name of this RoutingStorageContainerProperties.
        :param resource_group: The resource_group of this RoutingStorageContainerProperties.
        :param subscription_id: The subscription_id of this RoutingStorageContainerProperties.
        """
        self.openapi_types = {
            'batch_frequency_in_seconds': int,
            'connection_string': str,
            'container_name': str,
            'encoding': str,
            'file_name_format': str,
            'max_chunk_size_in_bytes': int,
            'name': str,
            'resource_group': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'batch_frequency_in_seconds': 'batchFrequencyInSeconds',
            'connection_string': 'connectionString',
            'container_name': 'containerName',
            'encoding': 'encoding',
            'file_name_format': 'fileNameFormat',
            'max_chunk_size_in_bytes': 'maxChunkSizeInBytes',
            'name': 'name',
            'resource_group': 'resourceGroup',
            'subscription_id': 'subscriptionId'
        }

        self._batch_frequency_in_seconds = batch_frequency_in_seconds
        self._connection_string = connection_string
        self._container_name = container_name
        self._encoding = encoding
        self._file_name_format = file_name_format
        self._max_chunk_size_in_bytes = max_chunk_size_in_bytes
        self._name = name
        self._resource_group = resource_group
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoutingStorageContainerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoutingStorageContainerProperties of this RoutingStorageContainerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_frequency_in_seconds(self):
        """Gets the batch_frequency_in_seconds of this RoutingStorageContainerProperties.

        Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.

        :return: The batch_frequency_in_seconds of this RoutingStorageContainerProperties.
        :rtype: int
        """
        return self._batch_frequency_in_seconds

    @batch_frequency_in_seconds.setter
    def batch_frequency_in_seconds(self, batch_frequency_in_seconds):
        """Sets the batch_frequency_in_seconds of this RoutingStorageContainerProperties.

        Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.

        :param batch_frequency_in_seconds: The batch_frequency_in_seconds of this RoutingStorageContainerProperties.
        :type batch_frequency_in_seconds: int
        """
        if batch_frequency_in_seconds is not None and batch_frequency_in_seconds > 720:
            raise ValueError("Invalid value for `batch_frequency_in_seconds`, must be a value less than or equal to `720`")
        if batch_frequency_in_seconds is not None and batch_frequency_in_seconds < 60:
            raise ValueError("Invalid value for `batch_frequency_in_seconds`, must be a value greater than or equal to `60`")

        self._batch_frequency_in_seconds = batch_frequency_in_seconds

    @property
    def connection_string(self):
        """Gets the connection_string of this RoutingStorageContainerProperties.

        The connection string of the storage account.

        :return: The connection_string of this RoutingStorageContainerProperties.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this RoutingStorageContainerProperties.

        The connection string of the storage account.

        :param connection_string: The connection_string of this RoutingStorageContainerProperties.
        :type connection_string: str
        """
        if connection_string is None:
            raise ValueError("Invalid value for `connection_string`, must not be `None`")

        self._connection_string = connection_string

    @property
    def container_name(self):
        """Gets the container_name of this RoutingStorageContainerProperties.

        The name of storage container in the storage account.

        :return: The container_name of this RoutingStorageContainerProperties.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this RoutingStorageContainerProperties.

        The name of storage container in the storage account.

        :param container_name: The container_name of this RoutingStorageContainerProperties.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def encoding(self):
        """Gets the encoding of this RoutingStorageContainerProperties.

        Encoding that is used to serialize messages to blobs. Supported values are 'avro', 'avrodeflate', and 'JSON'. Default value is 'avro'.

        :return: The encoding of this RoutingStorageContainerProperties.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this RoutingStorageContainerProperties.

        Encoding that is used to serialize messages to blobs. Supported values are 'avro', 'avrodeflate', and 'JSON'. Default value is 'avro'.

        :param encoding: The encoding of this RoutingStorageContainerProperties.
        :type encoding: str
        """
        allowed_values = ["Avro", "AvroDeflate", "JSON"]  # noqa: E501
        if encoding not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding` ({0}), must be one of {1}"
                .format(encoding, allowed_values)
            )

        self._encoding = encoding

    @property
    def file_name_format(self):
        """Gets the file_name_format of this RoutingStorageContainerProperties.

        File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.

        :return: The file_name_format of this RoutingStorageContainerProperties.
        :rtype: str
        """
        return self._file_name_format

    @file_name_format.setter
    def file_name_format(self, file_name_format):
        """Sets the file_name_format of this RoutingStorageContainerProperties.

        File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.

        :param file_name_format: The file_name_format of this RoutingStorageContainerProperties.
        :type file_name_format: str
        """

        self._file_name_format = file_name_format

    @property
    def max_chunk_size_in_bytes(self):
        """Gets the max_chunk_size_in_bytes of this RoutingStorageContainerProperties.

        Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).

        :return: The max_chunk_size_in_bytes of this RoutingStorageContainerProperties.
        :rtype: int
        """
        return self._max_chunk_size_in_bytes

    @max_chunk_size_in_bytes.setter
    def max_chunk_size_in_bytes(self, max_chunk_size_in_bytes):
        """Sets the max_chunk_size_in_bytes of this RoutingStorageContainerProperties.

        Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).

        :param max_chunk_size_in_bytes: The max_chunk_size_in_bytes of this RoutingStorageContainerProperties.
        :type max_chunk_size_in_bytes: int
        """
        if max_chunk_size_in_bytes is not None and max_chunk_size_in_bytes > 524288000:
            raise ValueError("Invalid value for `max_chunk_size_in_bytes`, must be a value less than or equal to `524288000`")
        if max_chunk_size_in_bytes is not None and max_chunk_size_in_bytes < 10485760:
            raise ValueError("Invalid value for `max_chunk_size_in_bytes`, must be a value greater than or equal to `10485760`")

        self._max_chunk_size_in_bytes = max_chunk_size_in_bytes

    @property
    def name(self):
        """Gets the name of this RoutingStorageContainerProperties.

        The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.

        :return: The name of this RoutingStorageContainerProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RoutingStorageContainerProperties.

        The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.

        :param name: The name of this RoutingStorageContainerProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search(r'^[A-Za-z0-9-._]{1,64}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9-._]{1,64}$/`")

        self._name = name

    @property
    def resource_group(self):
        """Gets the resource_group of this RoutingStorageContainerProperties.

        The name of the resource group of the storage account.

        :return: The resource_group of this RoutingStorageContainerProperties.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this RoutingStorageContainerProperties.

        The name of the resource group of the storage account.

        :param resource_group: The resource_group of this RoutingStorageContainerProperties.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def subscription_id(self):
        """Gets the subscription_id of this RoutingStorageContainerProperties.

        The subscription identifier of the storage account.

        :return: The subscription_id of this RoutingStorageContainerProperties.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this RoutingStorageContainerProperties.

        The subscription identifier of the storage account.

        :param subscription_id: The subscription_id of this RoutingStorageContainerProperties.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id
