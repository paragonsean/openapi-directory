# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_to_device_properties import CloudToDeviceProperties
from openapi_server.models.event_hub_properties import EventHubProperties
from openapi_server.models.iot_hub_location_description import IotHubLocationDescription
from openapi_server.models.iot_hub_properties_device_streams import IotHubPropertiesDeviceStreams
from openapi_server.models.ip_filter_rule import IpFilterRule
from openapi_server.models.messaging_endpoint_properties import MessagingEndpointProperties
from openapi_server.models.routing_properties import RoutingProperties
from openapi_server.models.shared_access_signature_authorization_rule import SharedAccessSignatureAuthorizationRule
from openapi_server.models.storage_endpoint_properties import StorageEndpointProperties
from openapi_server import util


class IotHubProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_policies: List[SharedAccessSignatureAuthorizationRule]=None, cloud_to_device: CloudToDeviceProperties=None, comments: str=None, device_streams: IotHubPropertiesDeviceStreams=None, enable_file_upload_notifications: bool=None, event_hub_endpoints: Dict[str, EventHubProperties]=None, features: str=None, host_name: str=None, ip_filter_rules: List[IpFilterRule]=None, locations: List[IotHubLocationDescription]=None, messaging_endpoints: Dict[str, MessagingEndpointProperties]=None, provisioning_state: str=None, routing: RoutingProperties=None, state: str=None, storage_endpoints: Dict[str, StorageEndpointProperties]=None):
        """IotHubProperties - a model defined in OpenAPI

        :param authorization_policies: The authorization_policies of this IotHubProperties.
        :param cloud_to_device: The cloud_to_device of this IotHubProperties.
        :param comments: The comments of this IotHubProperties.
        :param device_streams: The device_streams of this IotHubProperties.
        :param enable_file_upload_notifications: The enable_file_upload_notifications of this IotHubProperties.
        :param event_hub_endpoints: The event_hub_endpoints of this IotHubProperties.
        :param features: The features of this IotHubProperties.
        :param host_name: The host_name of this IotHubProperties.
        :param ip_filter_rules: The ip_filter_rules of this IotHubProperties.
        :param locations: The locations of this IotHubProperties.
        :param messaging_endpoints: The messaging_endpoints of this IotHubProperties.
        :param provisioning_state: The provisioning_state of this IotHubProperties.
        :param routing: The routing of this IotHubProperties.
        :param state: The state of this IotHubProperties.
        :param storage_endpoints: The storage_endpoints of this IotHubProperties.
        """
        self.openapi_types = {
            'authorization_policies': List[SharedAccessSignatureAuthorizationRule],
            'cloud_to_device': CloudToDeviceProperties,
            'comments': str,
            'device_streams': IotHubPropertiesDeviceStreams,
            'enable_file_upload_notifications': bool,
            'event_hub_endpoints': Dict[str, EventHubProperties],
            'features': str,
            'host_name': str,
            'ip_filter_rules': List[IpFilterRule],
            'locations': List[IotHubLocationDescription],
            'messaging_endpoints': Dict[str, MessagingEndpointProperties],
            'provisioning_state': str,
            'routing': RoutingProperties,
            'state': str,
            'storage_endpoints': Dict[str, StorageEndpointProperties]
        }

        self.attribute_map = {
            'authorization_policies': 'authorizationPolicies',
            'cloud_to_device': 'cloudToDevice',
            'comments': 'comments',
            'device_streams': 'deviceStreams',
            'enable_file_upload_notifications': 'enableFileUploadNotifications',
            'event_hub_endpoints': 'eventHubEndpoints',
            'features': 'features',
            'host_name': 'hostName',
            'ip_filter_rules': 'ipFilterRules',
            'locations': 'locations',
            'messaging_endpoints': 'messagingEndpoints',
            'provisioning_state': 'provisioningState',
            'routing': 'routing',
            'state': 'state',
            'storage_endpoints': 'storageEndpoints'
        }

        self._authorization_policies = authorization_policies
        self._cloud_to_device = cloud_to_device
        self._comments = comments
        self._device_streams = device_streams
        self._enable_file_upload_notifications = enable_file_upload_notifications
        self._event_hub_endpoints = event_hub_endpoints
        self._features = features
        self._host_name = host_name
        self._ip_filter_rules = ip_filter_rules
        self._locations = locations
        self._messaging_endpoints = messaging_endpoints
        self._provisioning_state = provisioning_state
        self._routing = routing
        self._state = state
        self._storage_endpoints = storage_endpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IotHubProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IotHubProperties of this IotHubProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_policies(self):
        """Gets the authorization_policies of this IotHubProperties.

        The shared access policies you can use to secure a connection to the IoT hub.

        :return: The authorization_policies of this IotHubProperties.
        :rtype: List[SharedAccessSignatureAuthorizationRule]
        """
        return self._authorization_policies

    @authorization_policies.setter
    def authorization_policies(self, authorization_policies):
        """Sets the authorization_policies of this IotHubProperties.

        The shared access policies you can use to secure a connection to the IoT hub.

        :param authorization_policies: The authorization_policies of this IotHubProperties.
        :type authorization_policies: List[SharedAccessSignatureAuthorizationRule]
        """

        self._authorization_policies = authorization_policies

    @property
    def cloud_to_device(self):
        """Gets the cloud_to_device of this IotHubProperties.


        :return: The cloud_to_device of this IotHubProperties.
        :rtype: CloudToDeviceProperties
        """
        return self._cloud_to_device

    @cloud_to_device.setter
    def cloud_to_device(self, cloud_to_device):
        """Sets the cloud_to_device of this IotHubProperties.


        :param cloud_to_device: The cloud_to_device of this IotHubProperties.
        :type cloud_to_device: CloudToDeviceProperties
        """

        self._cloud_to_device = cloud_to_device

    @property
    def comments(self):
        """Gets the comments of this IotHubProperties.

        IoT hub comments.

        :return: The comments of this IotHubProperties.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this IotHubProperties.

        IoT hub comments.

        :param comments: The comments of this IotHubProperties.
        :type comments: str
        """

        self._comments = comments

    @property
    def device_streams(self):
        """Gets the device_streams of this IotHubProperties.


        :return: The device_streams of this IotHubProperties.
        :rtype: IotHubPropertiesDeviceStreams
        """
        return self._device_streams

    @device_streams.setter
    def device_streams(self, device_streams):
        """Sets the device_streams of this IotHubProperties.


        :param device_streams: The device_streams of this IotHubProperties.
        :type device_streams: IotHubPropertiesDeviceStreams
        """

        self._device_streams = device_streams

    @property
    def enable_file_upload_notifications(self):
        """Gets the enable_file_upload_notifications of this IotHubProperties.

        If True, file upload notifications are enabled.

        :return: The enable_file_upload_notifications of this IotHubProperties.
        :rtype: bool
        """
        return self._enable_file_upload_notifications

    @enable_file_upload_notifications.setter
    def enable_file_upload_notifications(self, enable_file_upload_notifications):
        """Sets the enable_file_upload_notifications of this IotHubProperties.

        If True, file upload notifications are enabled.

        :param enable_file_upload_notifications: The enable_file_upload_notifications of this IotHubProperties.
        :type enable_file_upload_notifications: bool
        """

        self._enable_file_upload_notifications = enable_file_upload_notifications

    @property
    def event_hub_endpoints(self):
        """Gets the event_hub_endpoints of this IotHubProperties.

        The Event Hub-compatible endpoint properties. The only possible keys to this dictionary is events. This key has to be present in the dictionary while making create or update calls for the IoT hub.

        :return: The event_hub_endpoints of this IotHubProperties.
        :rtype: Dict[str, EventHubProperties]
        """
        return self._event_hub_endpoints

    @event_hub_endpoints.setter
    def event_hub_endpoints(self, event_hub_endpoints):
        """Sets the event_hub_endpoints of this IotHubProperties.

        The Event Hub-compatible endpoint properties. The only possible keys to this dictionary is events. This key has to be present in the dictionary while making create or update calls for the IoT hub.

        :param event_hub_endpoints: The event_hub_endpoints of this IotHubProperties.
        :type event_hub_endpoints: Dict[str, EventHubProperties]
        """

        self._event_hub_endpoints = event_hub_endpoints

    @property
    def features(self):
        """Gets the features of this IotHubProperties.

        The capabilities and features enabled for the IoT hub.

        :return: The features of this IotHubProperties.
        :rtype: str
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this IotHubProperties.

        The capabilities and features enabled for the IoT hub.

        :param features: The features of this IotHubProperties.
        :type features: str
        """
        allowed_values = ["None", "DeviceManagement"]  # noqa: E501
        if features not in allowed_values:
            raise ValueError(
                "Invalid value for `features` ({0}), must be one of {1}"
                .format(features, allowed_values)
            )

        self._features = features

    @property
    def host_name(self):
        """Gets the host_name of this IotHubProperties.

        The name of the host.

        :return: The host_name of this IotHubProperties.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this IotHubProperties.

        The name of the host.

        :param host_name: The host_name of this IotHubProperties.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def ip_filter_rules(self):
        """Gets the ip_filter_rules of this IotHubProperties.

        The IP filter rules.

        :return: The ip_filter_rules of this IotHubProperties.
        :rtype: List[IpFilterRule]
        """
        return self._ip_filter_rules

    @ip_filter_rules.setter
    def ip_filter_rules(self, ip_filter_rules):
        """Sets the ip_filter_rules of this IotHubProperties.

        The IP filter rules.

        :param ip_filter_rules: The ip_filter_rules of this IotHubProperties.
        :type ip_filter_rules: List[IpFilterRule]
        """

        self._ip_filter_rules = ip_filter_rules

    @property
    def locations(self):
        """Gets the locations of this IotHubProperties.

        Primary and secondary location for iot hub

        :return: The locations of this IotHubProperties.
        :rtype: List[IotHubLocationDescription]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this IotHubProperties.

        Primary and secondary location for iot hub

        :param locations: The locations of this IotHubProperties.
        :type locations: List[IotHubLocationDescription]
        """

        self._locations = locations

    @property
    def messaging_endpoints(self):
        """Gets the messaging_endpoints of this IotHubProperties.

        The messaging endpoint properties for the file upload notification queue.

        :return: The messaging_endpoints of this IotHubProperties.
        :rtype: Dict[str, MessagingEndpointProperties]
        """
        return self._messaging_endpoints

    @messaging_endpoints.setter
    def messaging_endpoints(self, messaging_endpoints):
        """Sets the messaging_endpoints of this IotHubProperties.

        The messaging endpoint properties for the file upload notification queue.

        :param messaging_endpoints: The messaging_endpoints of this IotHubProperties.
        :type messaging_endpoints: Dict[str, MessagingEndpointProperties]
        """

        self._messaging_endpoints = messaging_endpoints

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this IotHubProperties.

        The provisioning state.

        :return: The provisioning_state of this IotHubProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this IotHubProperties.

        The provisioning state.

        :param provisioning_state: The provisioning_state of this IotHubProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def routing(self):
        """Gets the routing of this IotHubProperties.


        :return: The routing of this IotHubProperties.
        :rtype: RoutingProperties
        """
        return self._routing

    @routing.setter
    def routing(self, routing):
        """Sets the routing of this IotHubProperties.


        :param routing: The routing of this IotHubProperties.
        :type routing: RoutingProperties
        """

        self._routing = routing

    @property
    def state(self):
        """Gets the state of this IotHubProperties.

        The hub state.

        :return: The state of this IotHubProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IotHubProperties.

        The hub state.

        :param state: The state of this IotHubProperties.
        :type state: str
        """

        self._state = state

    @property
    def storage_endpoints(self):
        """Gets the storage_endpoints of this IotHubProperties.

        The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.

        :return: The storage_endpoints of this IotHubProperties.
        :rtype: Dict[str, StorageEndpointProperties]
        """
        return self._storage_endpoints

    @storage_endpoints.setter
    def storage_endpoints(self, storage_endpoints):
        """Sets the storage_endpoints of this IotHubProperties.

        The list of Azure Storage endpoints where you can upload files. Currently you can configure only one Azure Storage account and that MUST have its key as $default. Specifying more than one storage account causes an error to be thrown. Not specifying a value for this property when the enableFileUploadNotifications property is set to True, causes an error to be thrown.

        :param storage_endpoints: The storage_endpoints of this IotHubProperties.
        :type storage_endpoints: Dict[str, StorageEndpointProperties]
        """

        self._storage_endpoints = storage_endpoints
