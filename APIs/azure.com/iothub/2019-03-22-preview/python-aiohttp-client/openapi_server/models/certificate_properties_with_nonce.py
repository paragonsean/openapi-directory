# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificatePropertiesWithNonce(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate: str=None, created: str=None, expiry: str=None, is_verified: bool=None, subject: str=None, thumbprint: str=None, updated: str=None, verification_code: str=None):
        """CertificatePropertiesWithNonce - a model defined in OpenAPI

        :param certificate: The certificate of this CertificatePropertiesWithNonce.
        :param created: The created of this CertificatePropertiesWithNonce.
        :param expiry: The expiry of this CertificatePropertiesWithNonce.
        :param is_verified: The is_verified of this CertificatePropertiesWithNonce.
        :param subject: The subject of this CertificatePropertiesWithNonce.
        :param thumbprint: The thumbprint of this CertificatePropertiesWithNonce.
        :param updated: The updated of this CertificatePropertiesWithNonce.
        :param verification_code: The verification_code of this CertificatePropertiesWithNonce.
        """
        self.openapi_types = {
            'certificate': str,
            'created': str,
            'expiry': str,
            'is_verified': bool,
            'subject': str,
            'thumbprint': str,
            'updated': str,
            'verification_code': str
        }

        self.attribute_map = {
            'certificate': 'certificate',
            'created': 'created',
            'expiry': 'expiry',
            'is_verified': 'isVerified',
            'subject': 'subject',
            'thumbprint': 'thumbprint',
            'updated': 'updated',
            'verification_code': 'verificationCode'
        }

        self._certificate = certificate
        self._created = created
        self._expiry = expiry
        self._is_verified = is_verified
        self._subject = subject
        self._thumbprint = thumbprint
        self._updated = updated
        self._verification_code = verification_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificatePropertiesWithNonce':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificatePropertiesWithNonce of this CertificatePropertiesWithNonce.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate(self):
        """Gets the certificate of this CertificatePropertiesWithNonce.

        The certificate content

        :return: The certificate of this CertificatePropertiesWithNonce.
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this CertificatePropertiesWithNonce.

        The certificate content

        :param certificate: The certificate of this CertificatePropertiesWithNonce.
        :type certificate: str
        """

        self._certificate = certificate

    @property
    def created(self):
        """Gets the created of this CertificatePropertiesWithNonce.

        The certificate's create date and time.

        :return: The created of this CertificatePropertiesWithNonce.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CertificatePropertiesWithNonce.

        The certificate's create date and time.

        :param created: The created of this CertificatePropertiesWithNonce.
        :type created: str
        """

        self._created = created

    @property
    def expiry(self):
        """Gets the expiry of this CertificatePropertiesWithNonce.

        The certificate's expiration date and time.

        :return: The expiry of this CertificatePropertiesWithNonce.
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this CertificatePropertiesWithNonce.

        The certificate's expiration date and time.

        :param expiry: The expiry of this CertificatePropertiesWithNonce.
        :type expiry: str
        """

        self._expiry = expiry

    @property
    def is_verified(self):
        """Gets the is_verified of this CertificatePropertiesWithNonce.

        Determines whether certificate has been verified.

        :return: The is_verified of this CertificatePropertiesWithNonce.
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this CertificatePropertiesWithNonce.

        Determines whether certificate has been verified.

        :param is_verified: The is_verified of this CertificatePropertiesWithNonce.
        :type is_verified: bool
        """

        self._is_verified = is_verified

    @property
    def subject(self):
        """Gets the subject of this CertificatePropertiesWithNonce.

        The certificate's subject name.

        :return: The subject of this CertificatePropertiesWithNonce.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificatePropertiesWithNonce.

        The certificate's subject name.

        :param subject: The subject of this CertificatePropertiesWithNonce.
        :type subject: str
        """

        self._subject = subject

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificatePropertiesWithNonce.

        The certificate's thumbprint.

        :return: The thumbprint of this CertificatePropertiesWithNonce.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificatePropertiesWithNonce.

        The certificate's thumbprint.

        :param thumbprint: The thumbprint of this CertificatePropertiesWithNonce.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint

    @property
    def updated(self):
        """Gets the updated of this CertificatePropertiesWithNonce.

        The certificate's last update date and time.

        :return: The updated of this CertificatePropertiesWithNonce.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this CertificatePropertiesWithNonce.

        The certificate's last update date and time.

        :param updated: The updated of this CertificatePropertiesWithNonce.
        :type updated: str
        """

        self._updated = updated

    @property
    def verification_code(self):
        """Gets the verification_code of this CertificatePropertiesWithNonce.

        The certificate's verification code that will be used for proof of possession.

        :return: The verification_code of this CertificatePropertiesWithNonce.
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this CertificatePropertiesWithNonce.

        The certificate's verification code that will be used for proof of possession.

        :param verification_code: The verification_code of this CertificatePropertiesWithNonce.
        :type verification_code: str
        """

        self._verification_code = verification_code
