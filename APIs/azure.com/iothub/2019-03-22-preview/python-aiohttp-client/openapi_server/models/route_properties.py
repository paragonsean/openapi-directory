# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RouteProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, condition: str=None, endpoint_names: List[str]=None, is_enabled: bool=None, name: str=None, source: str=None):
        """RouteProperties - a model defined in OpenAPI

        :param condition: The condition of this RouteProperties.
        :param endpoint_names: The endpoint_names of this RouteProperties.
        :param is_enabled: The is_enabled of this RouteProperties.
        :param name: The name of this RouteProperties.
        :param source: The source of this RouteProperties.
        """
        self.openapi_types = {
            'condition': str,
            'endpoint_names': List[str],
            'is_enabled': bool,
            'name': str,
            'source': str
        }

        self.attribute_map = {
            'condition': 'condition',
            'endpoint_names': 'endpointNames',
            'is_enabled': 'isEnabled',
            'name': 'name',
            'source': 'source'
        }

        self._condition = condition
        self._endpoint_names = endpoint_names
        self._is_enabled = is_enabled
        self._name = name
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteProperties of this RouteProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def condition(self):
        """Gets the condition of this RouteProperties.

        The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to true by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language

        :return: The condition of this RouteProperties.
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this RouteProperties.

        The condition that is evaluated to apply the routing rule. If no condition is provided, it evaluates to true by default. For grammar, see: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-query-language

        :param condition: The condition of this RouteProperties.
        :type condition: str
        """

        self._condition = condition

    @property
    def endpoint_names(self):
        """Gets the endpoint_names of this RouteProperties.

        The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.

        :return: The endpoint_names of this RouteProperties.
        :rtype: List[str]
        """
        return self._endpoint_names

    @endpoint_names.setter
    def endpoint_names(self, endpoint_names):
        """Sets the endpoint_names of this RouteProperties.

        The list of endpoints to which messages that satisfy the condition are routed. Currently only one endpoint is allowed.

        :param endpoint_names: The endpoint_names of this RouteProperties.
        :type endpoint_names: List[str]
        """
        if endpoint_names is None:
            raise ValueError("Invalid value for `endpoint_names`, must not be `None`")
        if endpoint_names is not None and len(endpoint_names) > 1:
            raise ValueError("Invalid value for `endpoint_names`, number of items must be less than or equal to `1`")
        if endpoint_names is not None and len(endpoint_names) < 1:
            raise ValueError("Invalid value for `endpoint_names`, number of items must be greater than or equal to `1`")

        self._endpoint_names = endpoint_names

    @property
    def is_enabled(self):
        """Gets the is_enabled of this RouteProperties.

        Used to specify whether a route is enabled.

        :return: The is_enabled of this RouteProperties.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this RouteProperties.

        Used to specify whether a route is enabled.

        :param is_enabled: The is_enabled of this RouteProperties.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def name(self):
        """Gets the name of this RouteProperties.

        The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.

        :return: The name of this RouteProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RouteProperties.

        The name of the route. The name can only include alphanumeric characters, periods, underscores, hyphens, has a maximum length of 64 characters, and must be unique.

        :param name: The name of this RouteProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search(r'^[A-Za-z0-9-._]{1,64}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9-._]{1,64}$/`")

        self._name = name

    @property
    def source(self):
        """Gets the source of this RouteProperties.

        The source that the routing rule is to be applied to, such as DeviceMessages.

        :return: The source of this RouteProperties.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RouteProperties.

        The source that the routing rule is to be applied to, such as DeviceMessages.

        :param source: The source of this RouteProperties.
        :type source: str
        """
        allowed_values = ["Invalid", "DeviceMessages", "TwinChangeEvents", "DeviceLifecycleEvents", "DeviceJobLifecycleEvents"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source
