/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateBodyDescription;
import org.openapitools.client.model.CertificateDescription;
import org.openapitools.client.model.CertificateListDescription;
import org.openapitools.client.model.CertificateVerificationDescription;
import org.openapitools.client.model.CertificateWithNonceDescription;
import org.openapitools.client.model.ErrorDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificatesApi
 */
@Disabled
public class CertificatesApiTest {

    private final CertificatesApi api = new CertificatesApi();

    /**
     * Upload the certificate to the IoT hub.
     *
     * Adds new or replaces existing certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesCreateOrUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        String certificateName = null;
        CertificateBodyDescription certificateDescription = null;
        String ifMatch = null;
        CertificateDescription response = api.certificatesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, certificateDescription, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete an X509 certificate.
     *
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        String certificateName = null;
        String ifMatch = null;
        api.certificatesDelete(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch);
        // TODO: test validations
    }

    /**
     * Generate verification code for proof of possession flow.
     *
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesGenerateVerificationCodeTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        String certificateName = null;
        String ifMatch = null;
        CertificateWithNonceDescription response = api.certificatesGenerateVerificationCode(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch);
        // TODO: test validations
    }

    /**
     * Get the certificate.
     *
     * Returns the certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        String certificateName = null;
        CertificateDescription response = api.certificatesGet(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName);
        // TODO: test validations
    }

    /**
     * Get the certificate list.
     *
     * Returns the list of certificates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesListByIotHubTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        CertificateListDescription response = api.certificatesListByIotHub(apiVersion, subscriptionId, resourceGroupName, resourceName);
        // TODO: test validations
    }

    /**
     * Verify certificate&#39;s private key possession.
     *
     * Verifies the certificate&#39;s private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesVerifyTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String resourceName = null;
        String certificateName = null;
        String ifMatch = null;
        CertificateVerificationDescription certificateVerificationBody = null;
        CertificateDescription response = api.certificatesVerify(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, certificateVerificationBody);
        // TODO: test validations
    }

}
