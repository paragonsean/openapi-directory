/*
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The health data for an endpoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:04:53.169120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EndpointHealthData {
  public static final String SERIALIZED_NAME_ENDPOINT_ID = "endpointId";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ID)
  private String endpointId;

  /**
   * Health statuses have following meanings. The &#39;healthy&#39; status shows that the endpoint is accepting messages as expected. The &#39;unhealthy&#39; status shows that the endpoint is not accepting messages as expected and IoT Hub is retrying to send data to this endpoint. The status of an unhealthy endpoint will be updated to healthy when IoT Hub has established an eventually consistent state of health. The &#39;dead&#39; status shows that the endpoint is not accepting messages, after IoT Hub retried sending messages for the retrial period. See IoT Hub metrics to identify errors and monitor issues with endpoints. The &#39;unknown&#39; status shows that the IoT Hub has not established a connection with the endpoint. No messages have been delivered to or rejected from this endpoint
   */
  @JsonAdapter(HealthStatusEnum.Adapter.class)
  public enum HealthStatusEnum {
    UNKNOWN("unknown"),
    
    HEALTHY("healthy"),
    
    UNHEALTHY("unhealthy"),
    
    DEAD("dead");

    private String value;

    HealthStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthStatusEnum fromValue(String value) {
      for (HealthStatusEnum b : HealthStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HealthStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HealthStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private HealthStatusEnum healthStatus;

  public EndpointHealthData() {
  }

  public EndpointHealthData endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

  /**
   * Id of the endpoint
   * @return endpointId
   */
  @javax.annotation.Nullable
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }


  public EndpointHealthData healthStatus(HealthStatusEnum healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Health statuses have following meanings. The &#39;healthy&#39; status shows that the endpoint is accepting messages as expected. The &#39;unhealthy&#39; status shows that the endpoint is not accepting messages as expected and IoT Hub is retrying to send data to this endpoint. The status of an unhealthy endpoint will be updated to healthy when IoT Hub has established an eventually consistent state of health. The &#39;dead&#39; status shows that the endpoint is not accepting messages, after IoT Hub retried sending messages for the retrial period. See IoT Hub metrics to identify errors and monitor issues with endpoints. The &#39;unknown&#39; status shows that the IoT Hub has not established a connection with the endpoint. No messages have been delivered to or rejected from this endpoint
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public HealthStatusEnum getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(HealthStatusEnum healthStatus) {
    this.healthStatus = healthStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointHealthData endpointHealthData = (EndpointHealthData) o;
    return Objects.equals(this.endpointId, endpointHealthData.endpointId) &&
        Objects.equals(this.healthStatus, endpointHealthData.healthStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointId, healthStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointHealthData {\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointId");
    openapiFields.add("healthStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EndpointHealthData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointHealthData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointHealthData is not found in the empty JSON string", EndpointHealthData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EndpointHealthData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointHealthData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointId") != null && !jsonObj.get("endpointId").isJsonNull()) && !jsonObj.get("endpointId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointId").toString()));
      }
      if ((jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) && !jsonObj.get("healthStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthStatus").toString()));
      }
      // validate the optional field `healthStatus`
      if (jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) {
        HealthStatusEnum.validateJsonElement(jsonObj.get("healthStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointHealthData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointHealthData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointHealthData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointHealthData.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointHealthData>() {
           @Override
           public void write(JsonWriter out, EndpointHealthData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointHealthData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EndpointHealthData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EndpointHealthData
   * @throws IOException if the JSON string is invalid with respect to EndpointHealthData
   */
  public static EndpointHealthData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointHealthData.class);
  }

  /**
   * Convert an instance of EndpointHealthData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

