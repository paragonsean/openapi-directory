/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateBodyDescription from '../model/CertificateBodyDescription';
import CertificateDescription from '../model/CertificateDescription';
import CertificateListDescription from '../model/CertificateListDescription';
import CertificateVerificationDescription from '../model/CertificateVerificationDescription';
import CertificateWithNonceDescription from '../model/CertificateWithNonceDescription';
import ErrorDetails from '../model/ErrorDetails';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 2019-03-22-preview
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the certificatesCreateOrUpdate operation.
     * @callback module:api/CertificatesApi~certificatesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload the certificate to the IoT hub.
     * Adds new or replaces existing certificate.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {String} certificateName The name of the certificate
     * @param {module:model/CertificateBodyDescription} certificateDescription The certificate body.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] ETag of the Certificate. Do not specify for creating a brand new certificate. Required to update an existing certificate.
     * @param {module:api/CertificatesApi~certificatesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateDescription}
     */
    certificatesCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, certificateDescription, opts, callback) {
      opts = opts || {};
      let postBody = certificateDescription;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdate");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling certificatesCreateOrUpdate");
      }
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling certificatesCreateOrUpdate");
      }
      // verify the required parameter 'certificateDescription' is set
      if (certificateDescription === undefined || certificateDescription === null) {
        throw new Error("Missing the required parameter 'certificateDescription' when calling certificatesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'certificateName': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesDelete operation.
     * @callback module:api/CertificatesApi~certificatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an X509 certificate.
     * Deletes an existing X509 certificate or does nothing if it does not exist.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {String} certificateName The name of the certificate
     * @param {String} ifMatch ETag of the Certificate.
     * @param {module:api/CertificatesApi~certificatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    certificatesDelete(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesDelete");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling certificatesDelete");
      }
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling certificatesDelete");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling certificatesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'certificateName': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesGenerateVerificationCode operation.
     * @callback module:api/CertificatesApi~certificatesGenerateVerificationCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateWithNonceDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate verification code for proof of possession flow.
     * Generates verification code for proof of possession flow. The verification code will be used to generate a leaf certificate.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {String} certificateName The name of the certificate
     * @param {String} ifMatch ETag of the Certificate.
     * @param {module:api/CertificatesApi~certificatesGenerateVerificationCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateWithNonceDescription}
     */
    certificatesGenerateVerificationCode(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesGenerateVerificationCode");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesGenerateVerificationCode");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesGenerateVerificationCode");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling certificatesGenerateVerificationCode");
      }
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling certificatesGenerateVerificationCode");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling certificatesGenerateVerificationCode");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'certificateName': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateWithNonceDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/generateVerificationCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesGet operation.
     * @callback module:api/CertificatesApi~certificatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the certificate.
     * Returns the certificate.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {String} certificateName The name of the certificate
     * @param {module:api/CertificatesApi~certificatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateDescription}
     */
    certificatesGet(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesGet");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling certificatesGet");
      }
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling certificatesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'certificateName': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesListByIotHub operation.
     * @callback module:api/CertificatesApi~certificatesListByIotHubCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateListDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the certificate list.
     * Returns the list of certificates.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {module:api/CertificatesApi~certificatesListByIotHubCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateListDescription}
     */
    certificatesListByIotHub(apiVersion, subscriptionId, resourceGroupName, resourceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesListByIotHub");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesListByIotHub");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesListByIotHub");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling certificatesListByIotHub");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CertificateListDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesVerify operation.
     * @callback module:api/CertificatesApi~certificatesVerifyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateDescription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify certificate's private key possession.
     * Verifies the certificate's private key possession by providing the leaf cert issued by the verifying pre uploaded certificate.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {String} resourceGroupName The name of the resource group that contains the IoT hub.
     * @param {String} resourceName The name of the IoT hub.
     * @param {String} certificateName The name of the certificate
     * @param {String} ifMatch ETag of the Certificate.
     * @param {module:model/CertificateVerificationDescription} certificateVerificationBody The name of the certificate
     * @param {module:api/CertificatesApi~certificatesVerifyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateDescription}
     */
    certificatesVerify(apiVersion, subscriptionId, resourceGroupName, resourceName, certificateName, ifMatch, certificateVerificationBody, callback) {
      let postBody = certificateVerificationBody;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesVerify");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesVerify");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesVerify");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling certificatesVerify");
      }
      // verify the required parameter 'certificateName' is set
      if (certificateName === undefined || certificateName === null) {
        throw new Error("Missing the required parameter 'certificateName' when calling certificatesVerify");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling certificatesVerify");
      }
      // verify the required parameter 'certificateVerificationBody' is set
      if (certificateVerificationBody === undefined || certificateVerificationBody === null) {
        throw new Error("Missing the required parameter 'certificateVerificationBody' when calling certificatesVerify");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'resourceName': resourceName,
        'certificateName': certificateName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CertificateDescription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Devices/IotHubs/{resourceName}/certificates/{certificateName}/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
