/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedAccessSignatureAuthorizationRule model module.
 * @module model/SharedAccessSignatureAuthorizationRule
 * @version 2019-03-22-preview
 */
class SharedAccessSignatureAuthorizationRule {
    /**
     * Constructs a new <code>SharedAccessSignatureAuthorizationRule</code>.
     * The properties of an IoT hub shared access policy.
     * @alias module:model/SharedAccessSignatureAuthorizationRule
     * @param keyName {String} The name of the shared access policy.
     * @param rights {module:model/SharedAccessSignatureAuthorizationRule.RightsEnum} The permissions assigned to the shared access policy.
     */
    constructor(keyName, rights) { 
        
        SharedAccessSignatureAuthorizationRule.initialize(this, keyName, rights);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyName, rights) { 
        obj['keyName'] = keyName;
        obj['rights'] = rights;
    }

    /**
     * Constructs a <code>SharedAccessSignatureAuthorizationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedAccessSignatureAuthorizationRule} obj Optional instance to populate.
     * @return {module:model/SharedAccessSignatureAuthorizationRule} The populated <code>SharedAccessSignatureAuthorizationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedAccessSignatureAuthorizationRule();

            if (data.hasOwnProperty('keyName')) {
                obj['keyName'] = ApiClient.convertToType(data['keyName'], 'String');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], 'String');
            }
            if (data.hasOwnProperty('rights')) {
                obj['rights'] = ApiClient.convertToType(data['rights'], 'String');
            }
            if (data.hasOwnProperty('secondaryKey')) {
                obj['secondaryKey'] = ApiClient.convertToType(data['secondaryKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedAccessSignatureAuthorizationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedAccessSignatureAuthorizationRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SharedAccessSignatureAuthorizationRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyName'] && !(typeof data['keyName'] === 'string' || data['keyName'] instanceof String)) {
            throw new Error("Expected the field `keyName` to be a primitive type in the JSON string but got " + data['keyName']);
        }
        // ensure the json data is a string
        if (data['primaryKey'] && !(typeof data['primaryKey'] === 'string' || data['primaryKey'] instanceof String)) {
            throw new Error("Expected the field `primaryKey` to be a primitive type in the JSON string but got " + data['primaryKey']);
        }
        // ensure the json data is a string
        if (data['rights'] && !(typeof data['rights'] === 'string' || data['rights'] instanceof String)) {
            throw new Error("Expected the field `rights` to be a primitive type in the JSON string but got " + data['rights']);
        }
        // ensure the json data is a string
        if (data['secondaryKey'] && !(typeof data['secondaryKey'] === 'string' || data['secondaryKey'] instanceof String)) {
            throw new Error("Expected the field `secondaryKey` to be a primitive type in the JSON string but got " + data['secondaryKey']);
        }

        return true;
    }


}

SharedAccessSignatureAuthorizationRule.RequiredProperties = ["keyName", "rights"];

/**
 * The name of the shared access policy.
 * @member {String} keyName
 */
SharedAccessSignatureAuthorizationRule.prototype['keyName'] = undefined;

/**
 * The primary key.
 * @member {String} primaryKey
 */
SharedAccessSignatureAuthorizationRule.prototype['primaryKey'] = undefined;

/**
 * The permissions assigned to the shared access policy.
 * @member {module:model/SharedAccessSignatureAuthorizationRule.RightsEnum} rights
 */
SharedAccessSignatureAuthorizationRule.prototype['rights'] = undefined;

/**
 * The secondary key.
 * @member {String} secondaryKey
 */
SharedAccessSignatureAuthorizationRule.prototype['secondaryKey'] = undefined;





/**
 * Allowed values for the <code>rights</code> property.
 * @enum {String}
 * @readonly
 */
SharedAccessSignatureAuthorizationRule['RightsEnum'] = {

    /**
     * value: "RegistryRead"
     * @const
     */
    "RegistryRead": "RegistryRead",

    /**
     * value: "RegistryWrite"
     * @const
     */
    "RegistryWrite": "RegistryWrite",

    /**
     * value: "ServiceConnect"
     * @const
     */
    "ServiceConnect": "ServiceConnect",

    /**
     * value: "DeviceConnect"
     * @const
     */
    "DeviceConnect": "DeviceConnect",

    /**
     * value: "RegistryRead, RegistryWrite"
     * @const
     */
    "RegistryRead, RegistryWrite": "RegistryRead, RegistryWrite",

    /**
     * value: "RegistryRead, ServiceConnect"
     * @const
     */
    "RegistryRead, ServiceConnect": "RegistryRead, ServiceConnect",

    /**
     * value: "RegistryRead, DeviceConnect"
     * @const
     */
    "RegistryRead, DeviceConnect": "RegistryRead, DeviceConnect",

    /**
     * value: "RegistryWrite, ServiceConnect"
     * @const
     */
    "RegistryWrite, ServiceConnect": "RegistryWrite, ServiceConnect",

    /**
     * value: "RegistryWrite, DeviceConnect"
     * @const
     */
    "RegistryWrite, DeviceConnect": "RegistryWrite, DeviceConnect",

    /**
     * value: "ServiceConnect, DeviceConnect"
     * @const
     */
    "ServiceConnect, DeviceConnect": "ServiceConnect, DeviceConnect",

    /**
     * value: "RegistryRead, RegistryWrite, ServiceConnect"
     * @const
     */
    "RegistryRead, RegistryWrite, ServiceConnect": "RegistryRead, RegistryWrite, ServiceConnect",

    /**
     * value: "RegistryRead, RegistryWrite, DeviceConnect"
     * @const
     */
    "RegistryRead, RegistryWrite, DeviceConnect": "RegistryRead, RegistryWrite, DeviceConnect",

    /**
     * value: "RegistryRead, ServiceConnect, DeviceConnect"
     * @const
     */
    "RegistryRead, ServiceConnect, DeviceConnect": "RegistryRead, ServiceConnect, DeviceConnect",

    /**
     * value: "RegistryWrite, ServiceConnect, DeviceConnect"
     * @const
     */
    "RegistryWrite, ServiceConnect, DeviceConnect": "RegistryWrite, ServiceConnect, DeviceConnect",

    /**
     * value: "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect"
     * @const
     */
    "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect": "RegistryRead, RegistryWrite, ServiceConnect, DeviceConnect"
};



export default SharedAccessSignatureAuthorizationRule;

