/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IpFilterRule model module.
 * @module model/IpFilterRule
 * @version 2019-03-22-preview
 */
class IpFilterRule {
    /**
     * Constructs a new <code>IpFilterRule</code>.
     * The IP filter rules for the IoT hub.
     * @alias module:model/IpFilterRule
     * @param action {module:model/IpFilterRule.ActionEnum} The desired action for requests captured by this rule.
     * @param filterName {String} The name of the IP filter rule.
     * @param ipMask {String} A string that contains the IP address range in CIDR notation for the rule.
     */
    constructor(action, filterName, ipMask) { 
        
        IpFilterRule.initialize(this, action, filterName, ipMask);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, filterName, ipMask) { 
        obj['action'] = action;
        obj['filterName'] = filterName;
        obj['ipMask'] = ipMask;
    }

    /**
     * Constructs a <code>IpFilterRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpFilterRule} obj Optional instance to populate.
     * @return {module:model/IpFilterRule} The populated <code>IpFilterRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpFilterRule();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('filterName')) {
                obj['filterName'] = ApiClient.convertToType(data['filterName'], 'String');
            }
            if (data.hasOwnProperty('ipMask')) {
                obj['ipMask'] = ApiClient.convertToType(data['ipMask'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpFilterRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpFilterRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IpFilterRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['filterName'] && !(typeof data['filterName'] === 'string' || data['filterName'] instanceof String)) {
            throw new Error("Expected the field `filterName` to be a primitive type in the JSON string but got " + data['filterName']);
        }
        // ensure the json data is a string
        if (data['ipMask'] && !(typeof data['ipMask'] === 'string' || data['ipMask'] instanceof String)) {
            throw new Error("Expected the field `ipMask` to be a primitive type in the JSON string but got " + data['ipMask']);
        }

        return true;
    }


}

IpFilterRule.RequiredProperties = ["action", "filterName", "ipMask"];

/**
 * The desired action for requests captured by this rule.
 * @member {module:model/IpFilterRule.ActionEnum} action
 */
IpFilterRule.prototype['action'] = undefined;

/**
 * The name of the IP filter rule.
 * @member {String} filterName
 */
IpFilterRule.prototype['filterName'] = undefined;

/**
 * A string that contains the IP address range in CIDR notation for the rule.
 * @member {String} ipMask
 */
IpFilterRule.prototype['ipMask'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
IpFilterRule['ActionEnum'] = {

    /**
     * value: "Accept"
     * @const
     */
    "Accept": "Accept",

    /**
     * value: "Reject"
     * @const
     */
    "Reject": "Reject"
};



export default IpFilterRule;

