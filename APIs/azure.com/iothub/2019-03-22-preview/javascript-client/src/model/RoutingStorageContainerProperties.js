/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-03-22-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RoutingStorageContainerProperties model module.
 * @module model/RoutingStorageContainerProperties
 * @version 2019-03-22-preview
 */
class RoutingStorageContainerProperties {
    /**
     * Constructs a new <code>RoutingStorageContainerProperties</code>.
     * The properties related to a storage container endpoint.
     * @alias module:model/RoutingStorageContainerProperties
     * @param connectionString {String} The connection string of the storage account.
     * @param containerName {String} The name of storage container in the storage account.
     * @param name {String} The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
     */
    constructor(connectionString, containerName, name) { 
        
        RoutingStorageContainerProperties.initialize(this, connectionString, containerName, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, connectionString, containerName, name) { 
        obj['connectionString'] = connectionString;
        obj['containerName'] = containerName;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>RoutingStorageContainerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoutingStorageContainerProperties} obj Optional instance to populate.
     * @return {module:model/RoutingStorageContainerProperties} The populated <code>RoutingStorageContainerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoutingStorageContainerProperties();

            if (data.hasOwnProperty('batchFrequencyInSeconds')) {
                obj['batchFrequencyInSeconds'] = ApiClient.convertToType(data['batchFrequencyInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('connectionString')) {
                obj['connectionString'] = ApiClient.convertToType(data['connectionString'], 'String');
            }
            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('encoding')) {
                obj['encoding'] = ApiClient.convertToType(data['encoding'], 'String');
            }
            if (data.hasOwnProperty('fileNameFormat')) {
                obj['fileNameFormat'] = ApiClient.convertToType(data['fileNameFormat'], 'String');
            }
            if (data.hasOwnProperty('maxChunkSizeInBytes')) {
                obj['maxChunkSizeInBytes'] = ApiClient.convertToType(data['maxChunkSizeInBytes'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceGroup')) {
                obj['resourceGroup'] = ApiClient.convertToType(data['resourceGroup'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoutingStorageContainerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoutingStorageContainerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoutingStorageContainerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connectionString'] && !(typeof data['connectionString'] === 'string' || data['connectionString'] instanceof String)) {
            throw new Error("Expected the field `connectionString` to be a primitive type in the JSON string but got " + data['connectionString']);
        }
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['encoding'] && !(typeof data['encoding'] === 'string' || data['encoding'] instanceof String)) {
            throw new Error("Expected the field `encoding` to be a primitive type in the JSON string but got " + data['encoding']);
        }
        // ensure the json data is a string
        if (data['fileNameFormat'] && !(typeof data['fileNameFormat'] === 'string' || data['fileNameFormat'] instanceof String)) {
            throw new Error("Expected the field `fileNameFormat` to be a primitive type in the JSON string but got " + data['fileNameFormat']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceGroup'] && !(typeof data['resourceGroup'] === 'string' || data['resourceGroup'] instanceof String)) {
            throw new Error("Expected the field `resourceGroup` to be a primitive type in the JSON string but got " + data['resourceGroup']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}

RoutingStorageContainerProperties.RequiredProperties = ["connectionString", "containerName", "name"];

/**
 * Time interval at which blobs are written to storage. Value should be between 60 and 720 seconds. Default value is 300 seconds.
 * @member {Number} batchFrequencyInSeconds
 */
RoutingStorageContainerProperties.prototype['batchFrequencyInSeconds'] = undefined;

/**
 * The connection string of the storage account.
 * @member {String} connectionString
 */
RoutingStorageContainerProperties.prototype['connectionString'] = undefined;

/**
 * The name of storage container in the storage account.
 * @member {String} containerName
 */
RoutingStorageContainerProperties.prototype['containerName'] = undefined;

/**
 * Encoding that is used to serialize messages to blobs. Supported values are 'avro', 'avrodeflate', and 'JSON'. Default value is 'avro'.
 * @member {module:model/RoutingStorageContainerProperties.EncodingEnum} encoding
 */
RoutingStorageContainerProperties.prototype['encoding'] = undefined;

/**
 * File name format for the blob. Default format is {iothub}/{partition}/{YYYY}/{MM}/{DD}/{HH}/{mm}. All parameters are mandatory but can be reordered.
 * @member {String} fileNameFormat
 */
RoutingStorageContainerProperties.prototype['fileNameFormat'] = undefined;

/**
 * Maximum number of bytes for each blob written to storage. Value should be between 10485760(10MB) and 524288000(500MB). Default value is 314572800(300MB).
 * @member {Number} maxChunkSizeInBytes
 */
RoutingStorageContainerProperties.prototype['maxChunkSizeInBytes'] = undefined;

/**
 * The name that identifies this endpoint. The name can only include alphanumeric characters, periods, underscores, hyphens and has a maximum length of 64 characters. The following names are reserved:  events, fileNotifications, $default. Endpoint names must be unique across endpoint types.
 * @member {String} name
 */
RoutingStorageContainerProperties.prototype['name'] = undefined;

/**
 * The name of the resource group of the storage account.
 * @member {String} resourceGroup
 */
RoutingStorageContainerProperties.prototype['resourceGroup'] = undefined;

/**
 * The subscription identifier of the storage account.
 * @member {String} subscriptionId
 */
RoutingStorageContainerProperties.prototype['subscriptionId'] = undefined;





/**
 * Allowed values for the <code>encoding</code> property.
 * @enum {String}
 * @readonly
 */
RoutingStorageContainerProperties['EncodingEnum'] = {

    /**
     * value: "Avro"
     * @const
     */
    "Avro": "Avro",

    /**
     * value: "AvroDeflate"
     * @const
     */
    "AvroDeflate": "AvroDeflate",

    /**
     * value: "JSON"
     * @const
     */
    "JSON": "JSON"
};



export default RoutingStorageContainerProperties;

