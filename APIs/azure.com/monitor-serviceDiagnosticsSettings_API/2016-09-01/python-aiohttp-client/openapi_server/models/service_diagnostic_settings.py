# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_settings import LogSettings
from openapi_server.models.metric_settings import MetricSettings
from openapi_server import util


class ServiceDiagnosticSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_hub_authorization_rule_id: str=None, logs: List[LogSettings]=None, metrics: List[MetricSettings]=None, service_bus_rule_id: str=None, storage_account_id: str=None, workspace_id: str=None):
        """ServiceDiagnosticSettings - a model defined in OpenAPI

        :param event_hub_authorization_rule_id: The event_hub_authorization_rule_id of this ServiceDiagnosticSettings.
        :param logs: The logs of this ServiceDiagnosticSettings.
        :param metrics: The metrics of this ServiceDiagnosticSettings.
        :param service_bus_rule_id: The service_bus_rule_id of this ServiceDiagnosticSettings.
        :param storage_account_id: The storage_account_id of this ServiceDiagnosticSettings.
        :param workspace_id: The workspace_id of this ServiceDiagnosticSettings.
        """
        self.openapi_types = {
            'event_hub_authorization_rule_id': str,
            'logs': List[LogSettings],
            'metrics': List[MetricSettings],
            'service_bus_rule_id': str,
            'storage_account_id': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'event_hub_authorization_rule_id': 'eventHubAuthorizationRuleId',
            'logs': 'logs',
            'metrics': 'metrics',
            'service_bus_rule_id': 'serviceBusRuleId',
            'storage_account_id': 'storageAccountId',
            'workspace_id': 'workspaceId'
        }

        self._event_hub_authorization_rule_id = event_hub_authorization_rule_id
        self._logs = logs
        self._metrics = metrics
        self._service_bus_rule_id = service_bus_rule_id
        self._storage_account_id = storage_account_id
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDiagnosticSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDiagnosticSettings of this ServiceDiagnosticSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_hub_authorization_rule_id(self):
        """Gets the event_hub_authorization_rule_id of this ServiceDiagnosticSettings.

        The resource Id for the event hub namespace authorization rule.

        :return: The event_hub_authorization_rule_id of this ServiceDiagnosticSettings.
        :rtype: str
        """
        return self._event_hub_authorization_rule_id

    @event_hub_authorization_rule_id.setter
    def event_hub_authorization_rule_id(self, event_hub_authorization_rule_id):
        """Sets the event_hub_authorization_rule_id of this ServiceDiagnosticSettings.

        The resource Id for the event hub namespace authorization rule.

        :param event_hub_authorization_rule_id: The event_hub_authorization_rule_id of this ServiceDiagnosticSettings.
        :type event_hub_authorization_rule_id: str
        """

        self._event_hub_authorization_rule_id = event_hub_authorization_rule_id

    @property
    def logs(self):
        """Gets the logs of this ServiceDiagnosticSettings.

        the list of logs settings.

        :return: The logs of this ServiceDiagnosticSettings.
        :rtype: List[LogSettings]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this ServiceDiagnosticSettings.

        the list of logs settings.

        :param logs: The logs of this ServiceDiagnosticSettings.
        :type logs: List[LogSettings]
        """

        self._logs = logs

    @property
    def metrics(self):
        """Gets the metrics of this ServiceDiagnosticSettings.

        the list of metric settings.

        :return: The metrics of this ServiceDiagnosticSettings.
        :rtype: List[MetricSettings]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ServiceDiagnosticSettings.

        the list of metric settings.

        :param metrics: The metrics of this ServiceDiagnosticSettings.
        :type metrics: List[MetricSettings]
        """

        self._metrics = metrics

    @property
    def service_bus_rule_id(self):
        """Gets the service_bus_rule_id of this ServiceDiagnosticSettings.

        The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming Diagnostic Logs. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.

        :return: The service_bus_rule_id of this ServiceDiagnosticSettings.
        :rtype: str
        """
        return self._service_bus_rule_id

    @service_bus_rule_id.setter
    def service_bus_rule_id(self, service_bus_rule_id):
        """Sets the service_bus_rule_id of this ServiceDiagnosticSettings.

        The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming Diagnostic Logs. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.

        :param service_bus_rule_id: The service_bus_rule_id of this ServiceDiagnosticSettings.
        :type service_bus_rule_id: str
        """

        self._service_bus_rule_id = service_bus_rule_id

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this ServiceDiagnosticSettings.

        The resource ID of the storage account to which you would like to send Diagnostic Logs.

        :return: The storage_account_id of this ServiceDiagnosticSettings.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this ServiceDiagnosticSettings.

        The resource ID of the storage account to which you would like to send Diagnostic Logs.

        :param storage_account_id: The storage_account_id of this ServiceDiagnosticSettings.
        :type storage_account_id: str
        """

        self._storage_account_id = storage_account_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ServiceDiagnosticSettings.

        The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2

        :return: The workspace_id of this ServiceDiagnosticSettings.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ServiceDiagnosticSettings.

        The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2

        :param workspace_id: The workspace_id of this ServiceDiagnosticSettings.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
