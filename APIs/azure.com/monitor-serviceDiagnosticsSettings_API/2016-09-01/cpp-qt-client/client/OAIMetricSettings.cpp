/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricSettings::OAIMetricSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricSettings::OAIMetricSettings() {
    this->initializeModel();
}

OAIMetricSettings::~OAIMetricSettings() {}

void OAIMetricSettings::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;

    m_time_grain_isSet = false;
    m_time_grain_isValid = false;
}

void OAIMetricSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricSettings::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retentionPolicy")]);
    m_retention_policy_isSet = !json[QString("retentionPolicy")].isNull() && m_retention_policy_isValid;

    m_time_grain_isValid = ::OpenAPI::fromJsonValue(m_time_grain, json[QString("timeGrain")]);
    m_time_grain_isSet = !json[QString("timeGrain")].isNull() && m_time_grain_isValid;
}

QString OAIMetricSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_retention_policy.isSet()) {
        obj.insert(QString("retentionPolicy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    if (m_time_grain_isSet) {
        obj.insert(QString("timeGrain"), ::OpenAPI::toJsonValue(m_time_grain));
    }
    return obj;
}

bool OAIMetricSettings::isEnabled() const {
    return m_enabled;
}
void OAIMetricSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIMetricSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIMetricSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIRetentionPolicy OAIMetricSettings::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAIMetricSettings::setRetentionPolicy(const OAIRetentionPolicy &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAIMetricSettings::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAIMetricSettings::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

QString OAIMetricSettings::getTimeGrain() const {
    return m_time_grain;
}
void OAIMetricSettings::setTimeGrain(const QString &time_grain) {
    m_time_grain = time_grain;
    m_time_grain_isSet = true;
}

bool OAIMetricSettings::is_time_grain_Set() const{
    return m_time_grain_isSet;
}

bool OAIMetricSettings::is_time_grain_Valid() const{
    return m_time_grain_isValid;
}

bool OAIMetricSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_grain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && m_time_grain_isValid && true;
}

} // namespace OpenAPI
