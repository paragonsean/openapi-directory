/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogSettings;
import org.openapitools.client.model.MetricSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The diagnostic settings for service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:28:28.403892-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceDiagnosticSettings {
  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<LogSettings> logs = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricSettings> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_BUS_RULE_ID = "serviceBusRuleId";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_RULE_ID)
  private String serviceBusRuleId;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_ID = "storageAccountId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_ID)
  private String storageAccountId;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public ServiceDiagnosticSettings() {
  }

  public ServiceDiagnosticSettings logs(List<LogSettings> logs) {
    this.logs = logs;
    return this;
  }

  public ServiceDiagnosticSettings addLogsItem(LogSettings logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

  /**
   * the list of logs settings.
   * @return logs
   */
  @javax.annotation.Nullable
  public List<LogSettings> getLogs() {
    return logs;
  }

  public void setLogs(List<LogSettings> logs) {
    this.logs = logs;
  }


  public ServiceDiagnosticSettings metrics(List<MetricSettings> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ServiceDiagnosticSettings addMetricsItem(MetricSettings metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * the list of metric settings.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<MetricSettings> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<MetricSettings> metrics) {
    this.metrics = metrics;
  }


  public ServiceDiagnosticSettings serviceBusRuleId(String serviceBusRuleId) {
    this.serviceBusRuleId = serviceBusRuleId;
    return this;
  }

  /**
   * The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming Diagnostic Logs. The rule ID is of the format: &#39;{service bus resource ID}/authorizationrules/{key name}&#39;.
   * @return serviceBusRuleId
   */
  @javax.annotation.Nullable
  public String getServiceBusRuleId() {
    return serviceBusRuleId;
  }

  public void setServiceBusRuleId(String serviceBusRuleId) {
    this.serviceBusRuleId = serviceBusRuleId;
  }


  public ServiceDiagnosticSettings storageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
    return this;
  }

  /**
   * The resource ID of the storage account to which you would like to send Diagnostic Logs.
   * @return storageAccountId
   */
  @javax.annotation.Nullable
  public String getStorageAccountId() {
    return storageAccountId;
  }

  public void setStorageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
  }


  public ServiceDiagnosticSettings workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
   * @return workspaceId
   */
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceDiagnosticSettings serviceDiagnosticSettings = (ServiceDiagnosticSettings) o;
    return Objects.equals(this.logs, serviceDiagnosticSettings.logs) &&
        Objects.equals(this.metrics, serviceDiagnosticSettings.metrics) &&
        Objects.equals(this.serviceBusRuleId, serviceDiagnosticSettings.serviceBusRuleId) &&
        Objects.equals(this.storageAccountId, serviceDiagnosticSettings.storageAccountId) &&
        Objects.equals(this.workspaceId, serviceDiagnosticSettings.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logs, metrics, serviceBusRuleId, storageAccountId, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceDiagnosticSettings {\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    serviceBusRuleId: ").append(toIndentedString(serviceBusRuleId)).append("\n");
    sb.append("    storageAccountId: ").append(toIndentedString(storageAccountId)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logs");
    openapiFields.add("metrics");
    openapiFields.add("serviceBusRuleId");
    openapiFields.add("storageAccountId");
    openapiFields.add("workspaceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceDiagnosticSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceDiagnosticSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceDiagnosticSettings is not found in the empty JSON string", ServiceDiagnosticSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceDiagnosticSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceDiagnosticSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
        if (jsonArraylogs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
          }

          // validate the optional field `logs` (array)
          for (int i = 0; i < jsonArraylogs.size(); i++) {
            LogSettings.validateJsonElement(jsonArraylogs.get(i));
          };
        }
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            MetricSettings.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceBusRuleId") != null && !jsonObj.get("serviceBusRuleId").isJsonNull()) && !jsonObj.get("serviceBusRuleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceBusRuleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceBusRuleId").toString()));
      }
      if ((jsonObj.get("storageAccountId") != null && !jsonObj.get("storageAccountId").isJsonNull()) && !jsonObj.get("storageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountId").toString()));
      }
      if ((jsonObj.get("workspaceId") != null && !jsonObj.get("workspaceId").isJsonNull()) && !jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceDiagnosticSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceDiagnosticSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceDiagnosticSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceDiagnosticSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceDiagnosticSettings>() {
           @Override
           public void write(JsonWriter out, ServiceDiagnosticSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceDiagnosticSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceDiagnosticSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceDiagnosticSettings
   * @throws IOException if the JSON string is invalid with respect to ServiceDiagnosticSettings
   */
  public static ServiceDiagnosticSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceDiagnosticSettings.class);
  }

  /**
   * Convert an instance of ServiceDiagnosticSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

