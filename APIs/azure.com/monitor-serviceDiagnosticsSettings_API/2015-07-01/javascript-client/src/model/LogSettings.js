/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RetentionPolicy from './RetentionPolicy';

/**
 * The LogSettings model module.
 * @module model/LogSettings
 * @version 2015-07-01
 */
class LogSettings {
    /**
     * Constructs a new <code>LogSettings</code>.
     * Part of MultiTenantDiagnosticSettings. Specifies the settings for a particular log.
     * @alias module:model/LogSettings
     * @param enabled {Boolean} a value indicating whether this log is enabled.
     */
    constructor(enabled) { 
        
        LogSettings.initialize(this, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled) { 
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>LogSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogSettings} obj Optional instance to populate.
     * @return {module:model/LogSettings} The populated <code>LogSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogSettings();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('retentionPolicy')) {
                obj['retentionPolicy'] = RetentionPolicy.constructFromObject(data['retentionPolicy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `retentionPolicy`
        if (data['retentionPolicy']) { // data not null
          RetentionPolicy.validateJSON(data['retentionPolicy']);
        }

        return true;
    }


}

LogSettings.RequiredProperties = ["enabled"];

/**
 * Name of a Diagnostic Log category for a resource type this setting is applied to. To obtain the list of Diagnostic Log categories for a resource, first perform a GET diagnostic settings operation.
 * @member {String} category
 */
LogSettings.prototype['category'] = undefined;

/**
 * a value indicating whether this log is enabled.
 * @member {Boolean} enabled
 */
LogSettings.prototype['enabled'] = undefined;

/**
 * @member {module:model/RetentionPolicy} retentionPolicy
 */
LogSettings.prototype['retentionPolicy'] = undefined;






export default LogSettings;

