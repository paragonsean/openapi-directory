/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogSettings from './LogSettings';
import MetricSettings from './MetricSettings';

/**
 * The ServiceDiagnosticSettings model module.
 * @module model/ServiceDiagnosticSettings
 * @version 2015-07-01
 */
class ServiceDiagnosticSettings {
    /**
     * Constructs a new <code>ServiceDiagnosticSettings</code>.
     * The diagnostic settings for service.
     * @alias module:model/ServiceDiagnosticSettings
     */
    constructor() { 
        
        ServiceDiagnosticSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceDiagnosticSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceDiagnosticSettings} obj Optional instance to populate.
     * @return {module:model/ServiceDiagnosticSettings} The populated <code>ServiceDiagnosticSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceDiagnosticSettings();

            if (data.hasOwnProperty('logs')) {
                obj['logs'] = ApiClient.convertToType(data['logs'], [LogSettings]);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [MetricSettings]);
            }
            if (data.hasOwnProperty('serviceBusRuleId')) {
                obj['serviceBusRuleId'] = ApiClient.convertToType(data['serviceBusRuleId'], 'String');
            }
            if (data.hasOwnProperty('storageAccountId')) {
                obj['storageAccountId'] = ApiClient.convertToType(data['storageAccountId'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceDiagnosticSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceDiagnosticSettings</code>.
     */
    static validateJSON(data) {
        if (data['logs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logs'])) {
                throw new Error("Expected the field `logs` to be an array in the JSON data but got " + data['logs']);
            }
            // validate the optional field `logs` (array)
            for (const item of data['logs']) {
                LogSettings.validateJSON(item);
            };
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                MetricSettings.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceBusRuleId'] && !(typeof data['serviceBusRuleId'] === 'string' || data['serviceBusRuleId'] instanceof String)) {
            throw new Error("Expected the field `serviceBusRuleId` to be a primitive type in the JSON string but got " + data['serviceBusRuleId']);
        }
        // ensure the json data is a string
        if (data['storageAccountId'] && !(typeof data['storageAccountId'] === 'string' || data['storageAccountId'] instanceof String)) {
            throw new Error("Expected the field `storageAccountId` to be a primitive type in the JSON string but got " + data['storageAccountId']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * the list of logs settings.
 * @member {Array.<module:model/LogSettings>} logs
 */
ServiceDiagnosticSettings.prototype['logs'] = undefined;

/**
 * the list of metric settings.
 * @member {Array.<module:model/MetricSettings>} metrics
 */
ServiceDiagnosticSettings.prototype['metrics'] = undefined;

/**
 * The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming Diagnostic Logs. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
 * @member {String} serviceBusRuleId
 */
ServiceDiagnosticSettings.prototype['serviceBusRuleId'] = undefined;

/**
 * The resource ID of the storage account to which you would like to send Diagnostic Logs.
 * @member {String} storageAccountId
 */
ServiceDiagnosticSettings.prototype['storageAccountId'] = undefined;

/**
 * The workspace ID (resource ID of a Log Analytics workspace) for a Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
 * @member {String} workspaceId
 */
ServiceDiagnosticSettings.prototype['workspaceId'] = undefined;






export default ServiceDiagnosticSettings;

