/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionUsageProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionUsageProperties::OAISubscriptionUsageProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionUsageProperties::OAISubscriptionUsageProperties() {
    this->initializeModel();
}

OAISubscriptionUsageProperties::~OAISubscriptionUsageProperties() {}

void OAISubscriptionUsageProperties::initializeModel() {

    m_current_value_isSet = false;
    m_current_value_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAISubscriptionUsageProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionUsageProperties::fromJsonObject(QJsonObject json) {

    m_current_value_isValid = ::OpenAPI::fromJsonValue(m_current_value, json[QString("currentValue")]);
    m_current_value_isSet = !json[QString("currentValue")].isNull() && m_current_value_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAISubscriptionUsageProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionUsageProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_current_value_isSet) {
        obj.insert(QString("currentValue"), ::OpenAPI::toJsonValue(m_current_value));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

double OAISubscriptionUsageProperties::getCurrentValue() const {
    return m_current_value;
}
void OAISubscriptionUsageProperties::setCurrentValue(const double &current_value) {
    m_current_value = current_value;
    m_current_value_isSet = true;
}

bool OAISubscriptionUsageProperties::is_current_value_Set() const{
    return m_current_value_isSet;
}

bool OAISubscriptionUsageProperties::is_current_value_Valid() const{
    return m_current_value_isValid;
}

QString OAISubscriptionUsageProperties::getDisplayName() const {
    return m_display_name;
}
void OAISubscriptionUsageProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISubscriptionUsageProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISubscriptionUsageProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

double OAISubscriptionUsageProperties::getLimit() const {
    return m_limit;
}
void OAISubscriptionUsageProperties::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISubscriptionUsageProperties::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISubscriptionUsageProperties::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAISubscriptionUsageProperties::getUnit() const {
    return m_unit;
}
void OAISubscriptionUsageProperties::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAISubscriptionUsageProperties::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAISubscriptionUsageProperties::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAISubscriptionUsageProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionUsageProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
