# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionUsageProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_value: float=None, display_name: str=None, limit: float=None, unit: str=None):
        """SubscriptionUsageProperties - a model defined in OpenAPI

        :param current_value: The current_value of this SubscriptionUsageProperties.
        :param display_name: The display_name of this SubscriptionUsageProperties.
        :param limit: The limit of this SubscriptionUsageProperties.
        :param unit: The unit of this SubscriptionUsageProperties.
        """
        self.openapi_types = {
            'current_value': float,
            'display_name': str,
            'limit': float,
            'unit': str
        }

        self.attribute_map = {
            'current_value': 'currentValue',
            'display_name': 'displayName',
            'limit': 'limit',
            'unit': 'unit'
        }

        self._current_value = current_value
        self._display_name = display_name
        self._limit = limit
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionUsageProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionUsageProperties of this SubscriptionUsageProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_value(self):
        """Gets the current_value of this SubscriptionUsageProperties.

        Current value of the metric.

        :return: The current_value of this SubscriptionUsageProperties.
        :rtype: float
        """
        return self._current_value

    @current_value.setter
    def current_value(self, current_value):
        """Sets the current_value of this SubscriptionUsageProperties.

        Current value of the metric.

        :param current_value: The current_value of this SubscriptionUsageProperties.
        :type current_value: float
        """

        self._current_value = current_value

    @property
    def display_name(self):
        """Gets the display_name of this SubscriptionUsageProperties.

        User-readable name of the metric.

        :return: The display_name of this SubscriptionUsageProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SubscriptionUsageProperties.

        User-readable name of the metric.

        :param display_name: The display_name of this SubscriptionUsageProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def limit(self):
        """Gets the limit of this SubscriptionUsageProperties.

        Boundary value of the metric.

        :return: The limit of this SubscriptionUsageProperties.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SubscriptionUsageProperties.

        Boundary value of the metric.

        :param limit: The limit of this SubscriptionUsageProperties.
        :type limit: float
        """

        self._limit = limit

    @property
    def unit(self):
        """Gets the unit of this SubscriptionUsageProperties.

        Unit of the metric.

        :return: The unit of this SubscriptionUsageProperties.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SubscriptionUsageProperties.

        Unit of the metric.

        :param unit: The unit of this SubscriptionUsageProperties.
        :type unit: str
        """

        self._unit = unit
