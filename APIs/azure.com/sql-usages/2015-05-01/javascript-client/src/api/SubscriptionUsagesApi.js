/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SubscriptionUsage from '../model/SubscriptionUsage';
import SubscriptionUsageListResult from '../model/SubscriptionUsageListResult';

/**
* SubscriptionUsages service.
* @module api/SubscriptionUsagesApi
* @version 2015-05-01
*/
export default class SubscriptionUsagesApi {

    /**
    * Constructs a new SubscriptionUsagesApi. 
    * @alias module:api/SubscriptionUsagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the subscriptionUsagesGet operation.
     * @callback module:api/SubscriptionUsagesApi~subscriptionUsagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a subscription usage metric.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} usageName Name of usage metric to return.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/SubscriptionUsagesApi~subscriptionUsagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionUsage}
     */
    subscriptionUsagesGet(locationName, usageName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling subscriptionUsagesGet");
      }
      // verify the required parameter 'usageName' is set
      if (usageName === undefined || usageName === null) {
        throw new Error("Missing the required parameter 'usageName' when calling subscriptionUsagesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionUsagesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionUsagesGet");
      }

      let pathParams = {
        'locationName': locationName,
        'usageName': usageName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionUsage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscriptionUsagesListByLocation operation.
     * @callback module:api/SubscriptionUsagesApi~subscriptionUsagesListByLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscriptionUsageListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all subscription usage metrics in a given location.
     * @param {String} locationName The name of the region where the resource is located.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/SubscriptionUsagesApi~subscriptionUsagesListByLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscriptionUsageListResult}
     */
    subscriptionUsagesListByLocation(locationName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling subscriptionUsagesListByLocation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling subscriptionUsagesListByLocation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling subscriptionUsagesListByLocation");
      }

      let pathParams = {
        'locationName': locationName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscriptionUsageListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
