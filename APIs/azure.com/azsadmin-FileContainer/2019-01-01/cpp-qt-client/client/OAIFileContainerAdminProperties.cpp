/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileContainerAdminProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileContainerAdminProperties::OAIFileContainerAdminProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileContainerAdminProperties::OAIFileContainerAdminProperties() {
    this->initializeModel();
}

OAIFileContainerAdminProperties::~OAIFileContainerAdminProperties() {}

void OAIFileContainerAdminProperties::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_file_container_id_isSet = false;
    m_file_container_id_isValid = false;

    m_post_copy_action_isSet = false;
    m_post_copy_action_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIFileContainerAdminProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileContainerAdminProperties::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_file_container_id_isValid = ::OpenAPI::fromJsonValue(m_file_container_id, json[QString("fileContainerId")]);
    m_file_container_id_isSet = !json[QString("fileContainerId")].isNull() && m_file_container_id_isValid;

    m_post_copy_action_isValid = ::OpenAPI::fromJsonValue(m_post_copy_action, json[QString("postCopyAction")]);
    m_post_copy_action_isSet = !json[QString("postCopyAction")].isNull() && m_post_copy_action_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("sourceUri")]);
    m_source_uri_isSet = !json[QString("sourceUri")].isNull() && m_source_uri_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIFileContainerAdminProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileContainerAdminProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_file_container_id_isSet) {
        obj.insert(QString("fileContainerId"), ::OpenAPI::toJsonValue(m_file_container_id));
    }
    if (m_post_copy_action.isSet()) {
        obj.insert(QString("postCopyAction"), ::OpenAPI::toJsonValue(m_post_copy_action));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("sourceUri"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIErrorInfo OAIFileContainerAdminProperties::getError() const {
    return m_error;
}
void OAIFileContainerAdminProperties::setError(const OAIErrorInfo &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIFileContainerAdminProperties::is_error_Set() const{
    return m_error_isSet;
}

bool OAIFileContainerAdminProperties::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIFileContainerAdminProperties::getFileContainerId() const {
    return m_file_container_id;
}
void OAIFileContainerAdminProperties::setFileContainerId(const QString &file_container_id) {
    m_file_container_id = file_container_id;
    m_file_container_id_isSet = true;
}

bool OAIFileContainerAdminProperties::is_file_container_id_Set() const{
    return m_file_container_id_isSet;
}

bool OAIFileContainerAdminProperties::is_file_container_id_Valid() const{
    return m_file_container_id_isValid;
}

OAIPostCopyAction OAIFileContainerAdminProperties::getPostCopyAction() const {
    return m_post_copy_action;
}
void OAIFileContainerAdminProperties::setPostCopyAction(const OAIPostCopyAction &post_copy_action) {
    m_post_copy_action = post_copy_action;
    m_post_copy_action_isSet = true;
}

bool OAIFileContainerAdminProperties::is_post_copy_action_Set() const{
    return m_post_copy_action_isSet;
}

bool OAIFileContainerAdminProperties::is_post_copy_action_Valid() const{
    return m_post_copy_action_isValid;
}

QString OAIFileContainerAdminProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIFileContainerAdminProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIFileContainerAdminProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIFileContainerAdminProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIFileContainerAdminProperties::getSourceUri() const {
    return m_source_uri;
}
void OAIFileContainerAdminProperties::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAIFileContainerAdminProperties::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAIFileContainerAdminProperties::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

QString OAIFileContainerAdminProperties::getUri() const {
    return m_uri;
}
void OAIFileContainerAdminProperties::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIFileContainerAdminProperties::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIFileContainerAdminProperties::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIFileContainerAdminProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_copy_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileContainerAdminProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
