# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_policy import RetentionPolicy
from openapi_server import util


class MetricSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, enabled: bool=None, retention_policy: RetentionPolicy=None, time_grain: str=None):
        """MetricSettings - a model defined in OpenAPI

        :param category: The category of this MetricSettings.
        :param enabled: The enabled of this MetricSettings.
        :param retention_policy: The retention_policy of this MetricSettings.
        :param time_grain: The time_grain of this MetricSettings.
        """
        self.openapi_types = {
            'category': str,
            'enabled': bool,
            'retention_policy': RetentionPolicy,
            'time_grain': str
        }

        self.attribute_map = {
            'category': 'category',
            'enabled': 'enabled',
            'retention_policy': 'retentionPolicy',
            'time_grain': 'timeGrain'
        }

        self._category = category
        self._enabled = enabled
        self._retention_policy = retention_policy
        self._time_grain = time_grain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricSettings of this MetricSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this MetricSettings.

        Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.

        :return: The category of this MetricSettings.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MetricSettings.

        Name of a Diagnostic Metric category for a resource type this setting is applied to. To obtain the list of Diagnostic metric categories for a resource, first perform a GET diagnostic settings operation.

        :param category: The category of this MetricSettings.
        :type category: str
        """

        self._category = category

    @property
    def enabled(self):
        """Gets the enabled of this MetricSettings.

        a value indicating whether this category is enabled.

        :return: The enabled of this MetricSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this MetricSettings.

        a value indicating whether this category is enabled.

        :param enabled: The enabled of this MetricSettings.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def retention_policy(self):
        """Gets the retention_policy of this MetricSettings.


        :return: The retention_policy of this MetricSettings.
        :rtype: RetentionPolicy
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this MetricSettings.


        :param retention_policy: The retention_policy of this MetricSettings.
        :type retention_policy: RetentionPolicy
        """

        self._retention_policy = retention_policy

    @property
    def time_grain(self):
        """Gets the time_grain of this MetricSettings.

        the timegrain of the metric in ISO8601 format.

        :return: The time_grain of this MetricSettings.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this MetricSettings.

        the timegrain of the metric in ISO8601 format.

        :param time_grain: The time_grain of this MetricSettings.
        :type time_grain: str
        """

        self._time_grain = time_grain
