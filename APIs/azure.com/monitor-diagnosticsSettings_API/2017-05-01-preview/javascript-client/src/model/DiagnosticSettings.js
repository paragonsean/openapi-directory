/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogSettings from './LogSettings';
import MetricSettings from './MetricSettings';

/**
 * The DiagnosticSettings model module.
 * @module model/DiagnosticSettings
 * @version 2017-05-01-preview
 */
class DiagnosticSettings {
    /**
     * Constructs a new <code>DiagnosticSettings</code>.
     * The diagnostic settings.
     * @alias module:model/DiagnosticSettings
     */
    constructor() { 
        
        DiagnosticSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DiagnosticSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticSettings} obj Optional instance to populate.
     * @return {module:model/DiagnosticSettings} The populated <code>DiagnosticSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticSettings();

            if (data.hasOwnProperty('eventHubAuthorizationRuleId')) {
                obj['eventHubAuthorizationRuleId'] = ApiClient.convertToType(data['eventHubAuthorizationRuleId'], 'String');
            }
            if (data.hasOwnProperty('eventHubName')) {
                obj['eventHubName'] = ApiClient.convertToType(data['eventHubName'], 'String');
            }
            if (data.hasOwnProperty('logAnalyticsDestinationType')) {
                obj['logAnalyticsDestinationType'] = ApiClient.convertToType(data['logAnalyticsDestinationType'], 'String');
            }
            if (data.hasOwnProperty('logs')) {
                obj['logs'] = ApiClient.convertToType(data['logs'], [LogSettings]);
            }
            if (data.hasOwnProperty('metrics')) {
                obj['metrics'] = ApiClient.convertToType(data['metrics'], [MetricSettings]);
            }
            if (data.hasOwnProperty('serviceBusRuleId')) {
                obj['serviceBusRuleId'] = ApiClient.convertToType(data['serviceBusRuleId'], 'String');
            }
            if (data.hasOwnProperty('storageAccountId')) {
                obj['storageAccountId'] = ApiClient.convertToType(data['storageAccountId'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['eventHubAuthorizationRuleId'] && !(typeof data['eventHubAuthorizationRuleId'] === 'string' || data['eventHubAuthorizationRuleId'] instanceof String)) {
            throw new Error("Expected the field `eventHubAuthorizationRuleId` to be a primitive type in the JSON string but got " + data['eventHubAuthorizationRuleId']);
        }
        // ensure the json data is a string
        if (data['eventHubName'] && !(typeof data['eventHubName'] === 'string' || data['eventHubName'] instanceof String)) {
            throw new Error("Expected the field `eventHubName` to be a primitive type in the JSON string but got " + data['eventHubName']);
        }
        // ensure the json data is a string
        if (data['logAnalyticsDestinationType'] && !(typeof data['logAnalyticsDestinationType'] === 'string' || data['logAnalyticsDestinationType'] instanceof String)) {
            throw new Error("Expected the field `logAnalyticsDestinationType` to be a primitive type in the JSON string but got " + data['logAnalyticsDestinationType']);
        }
        if (data['logs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logs'])) {
                throw new Error("Expected the field `logs` to be an array in the JSON data but got " + data['logs']);
            }
            // validate the optional field `logs` (array)
            for (const item of data['logs']) {
                LogSettings.validateJSON(item);
            };
        }
        if (data['metrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metrics'])) {
                throw new Error("Expected the field `metrics` to be an array in the JSON data but got " + data['metrics']);
            }
            // validate the optional field `metrics` (array)
            for (const item of data['metrics']) {
                MetricSettings.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceBusRuleId'] && !(typeof data['serviceBusRuleId'] === 'string' || data['serviceBusRuleId'] instanceof String)) {
            throw new Error("Expected the field `serviceBusRuleId` to be a primitive type in the JSON string but got " + data['serviceBusRuleId']);
        }
        // ensure the json data is a string
        if (data['storageAccountId'] && !(typeof data['storageAccountId'] === 'string' || data['storageAccountId'] instanceof String)) {
            throw new Error("Expected the field `storageAccountId` to be a primitive type in the JSON string but got " + data['storageAccountId']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}



/**
 * The resource Id for the event hub authorization rule.
 * @member {String} eventHubAuthorizationRuleId
 */
DiagnosticSettings.prototype['eventHubAuthorizationRuleId'] = undefined;

/**
 * The name of the event hub. If none is specified, the default event hub will be selected.
 * @member {String} eventHubName
 */
DiagnosticSettings.prototype['eventHubName'] = undefined;

/**
 * A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: <normalized service identity>_<normalized category name>. Possible values are: Dedicated and null (null is default.)
 * @member {String} logAnalyticsDestinationType
 */
DiagnosticSettings.prototype['logAnalyticsDestinationType'] = undefined;

/**
 * The list of logs settings.
 * @member {Array.<module:model/LogSettings>} logs
 */
DiagnosticSettings.prototype['logs'] = undefined;

/**
 * The list of metric settings.
 * @member {Array.<module:model/MetricSettings>} metrics
 */
DiagnosticSettings.prototype['metrics'] = undefined;

/**
 * The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
 * @member {String} serviceBusRuleId
 */
DiagnosticSettings.prototype['serviceBusRuleId'] = undefined;

/**
 * The resource ID of the storage account to which you would like to send Diagnostic Logs.
 * @member {String} storageAccountId
 */
DiagnosticSettings.prototype['storageAccountId'] = undefined;

/**
 * The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
 * @member {String} workspaceId
 */
DiagnosticSettings.prototype['workspaceId'] = undefined;






export default DiagnosticSettings;

