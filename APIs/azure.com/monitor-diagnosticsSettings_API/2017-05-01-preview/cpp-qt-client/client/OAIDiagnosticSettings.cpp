/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticSettings::OAIDiagnosticSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticSettings::OAIDiagnosticSettings() {
    this->initializeModel();
}

OAIDiagnosticSettings::~OAIDiagnosticSettings() {}

void OAIDiagnosticSettings::initializeModel() {

    m_event_hub_authorization_rule_id_isSet = false;
    m_event_hub_authorization_rule_id_isValid = false;

    m_event_hub_name_isSet = false;
    m_event_hub_name_isValid = false;

    m_log_analytics_destination_type_isSet = false;
    m_log_analytics_destination_type_isValid = false;

    m_logs_isSet = false;
    m_logs_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_service_bus_rule_id_isSet = false;
    m_service_bus_rule_id_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIDiagnosticSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticSettings::fromJsonObject(QJsonObject json) {

    m_event_hub_authorization_rule_id_isValid = ::OpenAPI::fromJsonValue(m_event_hub_authorization_rule_id, json[QString("eventHubAuthorizationRuleId")]);
    m_event_hub_authorization_rule_id_isSet = !json[QString("eventHubAuthorizationRuleId")].isNull() && m_event_hub_authorization_rule_id_isValid;

    m_event_hub_name_isValid = ::OpenAPI::fromJsonValue(m_event_hub_name, json[QString("eventHubName")]);
    m_event_hub_name_isSet = !json[QString("eventHubName")].isNull() && m_event_hub_name_isValid;

    m_log_analytics_destination_type_isValid = ::OpenAPI::fromJsonValue(m_log_analytics_destination_type, json[QString("logAnalyticsDestinationType")]);
    m_log_analytics_destination_type_isSet = !json[QString("logAnalyticsDestinationType")].isNull() && m_log_analytics_destination_type_isValid;

    m_logs_isValid = ::OpenAPI::fromJsonValue(m_logs, json[QString("logs")]);
    m_logs_isSet = !json[QString("logs")].isNull() && m_logs_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_service_bus_rule_id_isValid = ::OpenAPI::fromJsonValue(m_service_bus_rule_id, json[QString("serviceBusRuleId")]);
    m_service_bus_rule_id_isSet = !json[QString("serviceBusRuleId")].isNull() && m_service_bus_rule_id_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIDiagnosticSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_event_hub_authorization_rule_id_isSet) {
        obj.insert(QString("eventHubAuthorizationRuleId"), ::OpenAPI::toJsonValue(m_event_hub_authorization_rule_id));
    }
    if (m_event_hub_name_isSet) {
        obj.insert(QString("eventHubName"), ::OpenAPI::toJsonValue(m_event_hub_name));
    }
    if (m_log_analytics_destination_type_isSet) {
        obj.insert(QString("logAnalyticsDestinationType"), ::OpenAPI::toJsonValue(m_log_analytics_destination_type));
    }
    if (m_logs.size() > 0) {
        obj.insert(QString("logs"), ::OpenAPI::toJsonValue(m_logs));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_service_bus_rule_id_isSet) {
        obj.insert(QString("serviceBusRuleId"), ::OpenAPI::toJsonValue(m_service_bus_rule_id));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

QString OAIDiagnosticSettings::getEventHubAuthorizationRuleId() const {
    return m_event_hub_authorization_rule_id;
}
void OAIDiagnosticSettings::setEventHubAuthorizationRuleId(const QString &event_hub_authorization_rule_id) {
    m_event_hub_authorization_rule_id = event_hub_authorization_rule_id;
    m_event_hub_authorization_rule_id_isSet = true;
}

bool OAIDiagnosticSettings::is_event_hub_authorization_rule_id_Set() const{
    return m_event_hub_authorization_rule_id_isSet;
}

bool OAIDiagnosticSettings::is_event_hub_authorization_rule_id_Valid() const{
    return m_event_hub_authorization_rule_id_isValid;
}

QString OAIDiagnosticSettings::getEventHubName() const {
    return m_event_hub_name;
}
void OAIDiagnosticSettings::setEventHubName(const QString &event_hub_name) {
    m_event_hub_name = event_hub_name;
    m_event_hub_name_isSet = true;
}

bool OAIDiagnosticSettings::is_event_hub_name_Set() const{
    return m_event_hub_name_isSet;
}

bool OAIDiagnosticSettings::is_event_hub_name_Valid() const{
    return m_event_hub_name_isValid;
}

QString OAIDiagnosticSettings::getLogAnalyticsDestinationType() const {
    return m_log_analytics_destination_type;
}
void OAIDiagnosticSettings::setLogAnalyticsDestinationType(const QString &log_analytics_destination_type) {
    m_log_analytics_destination_type = log_analytics_destination_type;
    m_log_analytics_destination_type_isSet = true;
}

bool OAIDiagnosticSettings::is_log_analytics_destination_type_Set() const{
    return m_log_analytics_destination_type_isSet;
}

bool OAIDiagnosticSettings::is_log_analytics_destination_type_Valid() const{
    return m_log_analytics_destination_type_isValid;
}

QList<OAILogSettings> OAIDiagnosticSettings::getLogs() const {
    return m_logs;
}
void OAIDiagnosticSettings::setLogs(const QList<OAILogSettings> &logs) {
    m_logs = logs;
    m_logs_isSet = true;
}

bool OAIDiagnosticSettings::is_logs_Set() const{
    return m_logs_isSet;
}

bool OAIDiagnosticSettings::is_logs_Valid() const{
    return m_logs_isValid;
}

QList<OAIMetricSettings> OAIDiagnosticSettings::getMetrics() const {
    return m_metrics;
}
void OAIDiagnosticSettings::setMetrics(const QList<OAIMetricSettings> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIDiagnosticSettings::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIDiagnosticSettings::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIDiagnosticSettings::getServiceBusRuleId() const {
    return m_service_bus_rule_id;
}
void OAIDiagnosticSettings::setServiceBusRuleId(const QString &service_bus_rule_id) {
    m_service_bus_rule_id = service_bus_rule_id;
    m_service_bus_rule_id_isSet = true;
}

bool OAIDiagnosticSettings::is_service_bus_rule_id_Set() const{
    return m_service_bus_rule_id_isSet;
}

bool OAIDiagnosticSettings::is_service_bus_rule_id_Valid() const{
    return m_service_bus_rule_id_isValid;
}

QString OAIDiagnosticSettings::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAIDiagnosticSettings::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAIDiagnosticSettings::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAIDiagnosticSettings::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

QString OAIDiagnosticSettings::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIDiagnosticSettings::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIDiagnosticSettings::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIDiagnosticSettings::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIDiagnosticSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_hub_authorization_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_hub_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_analytics_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
