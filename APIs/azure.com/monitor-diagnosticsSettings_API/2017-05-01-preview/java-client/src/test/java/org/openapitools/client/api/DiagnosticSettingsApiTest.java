/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DiagnosticSettingsResource;
import org.openapitools.client.model.DiagnosticSettingsResourceCollection;
import org.openapitools.client.model.ErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DiagnosticSettingsApi
 */
@Disabled
public class DiagnosticSettingsApiTest {

    private final DiagnosticSettingsApi api = new DiagnosticSettingsApi();

    /**
     * Creates or updates diagnostic settings for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticSettingsCreateOrUpdateTest() throws ApiException {
        String resourceUri = null;
        String apiVersion = null;
        String name = null;
        DiagnosticSettingsResource parameters = null;
        DiagnosticSettingsResource response = api.diagnosticSettingsCreateOrUpdate(resourceUri, apiVersion, name, parameters);
        // TODO: test validations
    }

    /**
     * Deletes existing diagnostic settings for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticSettingsDeleteTest() throws ApiException {
        String resourceUri = null;
        String apiVersion = null;
        String name = null;
        api.diagnosticSettingsDelete(resourceUri, apiVersion, name);
        // TODO: test validations
    }

    /**
     * Gets the active diagnostic settings for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticSettingsGetTest() throws ApiException {
        String resourceUri = null;
        String apiVersion = null;
        String name = null;
        DiagnosticSettingsResource response = api.diagnosticSettingsGet(resourceUri, apiVersion, name);
        // TODO: test validations
    }

    /**
     * Gets the active diagnostic settings list for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosticSettingsListTest() throws ApiException {
        String resourceUri = null;
        String apiVersion = null;
        DiagnosticSettingsResourceCollection response = api.diagnosticSettingsList(resourceUri, apiVersion);
        // TODO: test validations
    }

}
