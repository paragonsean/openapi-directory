# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_definition import FieldDefinition
from openapi_server import util


class ConnectionTypeCreateOrUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, field_definitions: Dict[str, FieldDefinition]=None, is_global: bool=None):
        """ConnectionTypeCreateOrUpdateProperties - a model defined in OpenAPI

        :param field_definitions: The field_definitions of this ConnectionTypeCreateOrUpdateProperties.
        :param is_global: The is_global of this ConnectionTypeCreateOrUpdateProperties.
        """
        self.openapi_types = {
            'field_definitions': Dict[str, FieldDefinition],
            'is_global': bool
        }

        self.attribute_map = {
            'field_definitions': 'fieldDefinitions',
            'is_global': 'isGlobal'
        }

        self._field_definitions = field_definitions
        self._is_global = is_global

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionTypeCreateOrUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionTypeCreateOrUpdateProperties of this ConnectionTypeCreateOrUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def field_definitions(self):
        """Gets the field_definitions of this ConnectionTypeCreateOrUpdateProperties.

        Gets or sets the field definitions of the connection type.

        :return: The field_definitions of this ConnectionTypeCreateOrUpdateProperties.
        :rtype: Dict[str, FieldDefinition]
        """
        return self._field_definitions

    @field_definitions.setter
    def field_definitions(self, field_definitions):
        """Sets the field_definitions of this ConnectionTypeCreateOrUpdateProperties.

        Gets or sets the field definitions of the connection type.

        :param field_definitions: The field_definitions of this ConnectionTypeCreateOrUpdateProperties.
        :type field_definitions: Dict[str, FieldDefinition]
        """
        if field_definitions is None:
            raise ValueError("Invalid value for `field_definitions`, must not be `None`")

        self._field_definitions = field_definitions

    @property
    def is_global(self):
        """Gets the is_global of this ConnectionTypeCreateOrUpdateProperties.

        Gets or sets a Boolean value to indicate if the connection type is global.

        :return: The is_global of this ConnectionTypeCreateOrUpdateProperties.
        :rtype: bool
        """
        return self._is_global

    @is_global.setter
    def is_global(self, is_global):
        """Sets the is_global of this ConnectionTypeCreateOrUpdateProperties.

        Gets or sets a Boolean value to indicate if the connection type is global.

        :param is_global: The is_global of this ConnectionTypeCreateOrUpdateProperties.
        :type is_global: bool
        """

        self._is_global = is_global
