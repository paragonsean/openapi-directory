# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_encrypted: bool=None, is_optional: bool=None, type: str=None):
        """FieldDefinition - a model defined in OpenAPI

        :param is_encrypted: The is_encrypted of this FieldDefinition.
        :param is_optional: The is_optional of this FieldDefinition.
        :param type: The type of this FieldDefinition.
        """
        self.openapi_types = {
            'is_encrypted': bool,
            'is_optional': bool,
            'type': str
        }

        self.attribute_map = {
            'is_encrypted': 'isEncrypted',
            'is_optional': 'isOptional',
            'type': 'type'
        }

        self._is_encrypted = is_encrypted
        self._is_optional = is_optional
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldDefinition of this FieldDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this FieldDefinition.

        Gets or sets the isEncrypted flag of the connection field definition.

        :return: The is_encrypted of this FieldDefinition.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this FieldDefinition.

        Gets or sets the isEncrypted flag of the connection field definition.

        :param is_encrypted: The is_encrypted of this FieldDefinition.
        :type is_encrypted: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def is_optional(self):
        """Gets the is_optional of this FieldDefinition.

        Gets or sets the isOptional flag of the connection field definition.

        :return: The is_optional of this FieldDefinition.
        :rtype: bool
        """
        return self._is_optional

    @is_optional.setter
    def is_optional(self, is_optional):
        """Sets the is_optional of this FieldDefinition.

        Gets or sets the isOptional flag of the connection field definition.

        :param is_optional: The is_optional of this FieldDefinition.
        :type is_optional: bool
        """

        self._is_optional = is_optional

    @property
    def type(self):
        """Gets the type of this FieldDefinition.

        Gets or sets the type of the connection field definition.

        :return: The type of this FieldDefinition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FieldDefinition.

        Gets or sets the type of the connection field definition.

        :param type: The type of this FieldDefinition.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
