# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.field_definition import FieldDefinition
from openapi_server import util


class ConnectionTypeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, description: str=None, field_definitions: Dict[str, FieldDefinition]=None, is_global: bool=None, last_modified_time: datetime=None):
        """ConnectionTypeProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this ConnectionTypeProperties.
        :param description: The description of this ConnectionTypeProperties.
        :param field_definitions: The field_definitions of this ConnectionTypeProperties.
        :param is_global: The is_global of this ConnectionTypeProperties.
        :param last_modified_time: The last_modified_time of this ConnectionTypeProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'description': str,
            'field_definitions': Dict[str, FieldDefinition],
            'is_global': bool,
            'last_modified_time': datetime
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'description': 'description',
            'field_definitions': 'fieldDefinitions',
            'is_global': 'isGlobal',
            'last_modified_time': 'lastModifiedTime'
        }

        self._creation_time = creation_time
        self._description = description
        self._field_definitions = field_definitions
        self._is_global = is_global
        self._last_modified_time = last_modified_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionTypeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionTypeProperties of this ConnectionTypeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this ConnectionTypeProperties.

        Gets the creation time.

        :return: The creation_time of this ConnectionTypeProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ConnectionTypeProperties.

        Gets the creation time.

        :param creation_time: The creation_time of this ConnectionTypeProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this ConnectionTypeProperties.

        Gets or sets the description.

        :return: The description of this ConnectionTypeProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConnectionTypeProperties.

        Gets or sets the description.

        :param description: The description of this ConnectionTypeProperties.
        :type description: str
        """

        self._description = description

    @property
    def field_definitions(self):
        """Gets the field_definitions of this ConnectionTypeProperties.

        Gets the field definitions of the connection type.

        :return: The field_definitions of this ConnectionTypeProperties.
        :rtype: Dict[str, FieldDefinition]
        """
        return self._field_definitions

    @field_definitions.setter
    def field_definitions(self, field_definitions):
        """Sets the field_definitions of this ConnectionTypeProperties.

        Gets the field definitions of the connection type.

        :param field_definitions: The field_definitions of this ConnectionTypeProperties.
        :type field_definitions: Dict[str, FieldDefinition]
        """

        self._field_definitions = field_definitions

    @property
    def is_global(self):
        """Gets the is_global of this ConnectionTypeProperties.

        Gets or sets a Boolean value to indicate if the connection type is global.

        :return: The is_global of this ConnectionTypeProperties.
        :rtype: bool
        """
        return self._is_global

    @is_global.setter
    def is_global(self, is_global):
        """Sets the is_global of this ConnectionTypeProperties.

        Gets or sets a Boolean value to indicate if the connection type is global.

        :param is_global: The is_global of this ConnectionTypeProperties.
        :type is_global: bool
        """

        self._is_global = is_global

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ConnectionTypeProperties.

        Gets or sets the last modified time.

        :return: The last_modified_time of this ConnectionTypeProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ConnectionTypeProperties.

        Gets or sets the last modified time.

        :param last_modified_time: The last_modified_time of this ConnectionTypeProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time
