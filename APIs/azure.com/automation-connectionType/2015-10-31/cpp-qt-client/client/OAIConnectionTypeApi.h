/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectionTypeApi_H
#define OAI_OAIConnectionTypeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionType.h"
#include "OAIConnectionTypeCreateOrUpdateParameters.h"
#include "OAIConnectionTypeListResult.h"
#include "OAIConnectionType_ListByAutomationAccount_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectionTypeApi : public QObject {
    Q_OBJECT

public:
    OAIConnectionTypeApi(const int timeOut = 0);
    ~OAIConnectionTypeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  connection_type_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIConnectionTypeCreateOrUpdateParameters [required]
    */
    virtual void connectionTypeCreateOrUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &connection_type_name, const QString &subscription_id, const QString &api_version, const OAIConnectionTypeCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  connection_type_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionTypeDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &connection_type_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  connection_type_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionTypeGet(const QString &resource_group_name, const QString &automation_account_name, const QString &connection_type_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionTypeListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void connectionTypeCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void connectionTypeDeleteCallback(OAIHttpRequestWorker *worker);
    void connectionTypeGetCallback(OAIHttpRequestWorker *worker);
    void connectionTypeListByAutomationAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void connectionTypeCreateOrUpdateSignal(OAIConnectionType summary);
    void connectionTypeDeleteSignal();
    void connectionTypeGetSignal(OAIConnectionType summary);
    void connectionTypeListByAutomationAccountSignal(OAIConnectionTypeListResult summary);


    void connectionTypeCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConnectionType summary);
    void connectionTypeDeleteSignalFull(OAIHttpRequestWorker *worker);
    void connectionTypeGetSignalFull(OAIHttpRequestWorker *worker, OAIConnectionType summary);
    void connectionTypeListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAIConnectionTypeListResult summary);

    Q_DECL_DEPRECATED_X("Use connectionTypeCreateOrUpdateSignalError() instead")
    void connectionTypeCreateOrUpdateSignalE(OAIConnectionType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeCreateOrUpdateSignalError(OAIConnectionType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionTypeDeleteSignalError() instead")
    void connectionTypeDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionTypeGetSignalError() instead")
    void connectionTypeGetSignalE(OAIConnectionType summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeGetSignalError(OAIConnectionType summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionTypeListByAutomationAccountSignalError() instead")
    void connectionTypeListByAutomationAccountSignalE(OAIConnectionTypeListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeListByAutomationAccountSignalError(OAIConnectionTypeListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use connectionTypeCreateOrUpdateSignalErrorFull() instead")
    void connectionTypeCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionTypeDeleteSignalErrorFull() instead")
    void connectionTypeDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionTypeGetSignalErrorFull() instead")
    void connectionTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionTypeListByAutomationAccountSignalErrorFull() instead")
    void connectionTypeListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionTypeListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
