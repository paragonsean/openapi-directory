/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FieldDefinition from './FieldDefinition';

/**
 * The ConnectionTypeCreateOrUpdateProperties model module.
 * @module model/ConnectionTypeCreateOrUpdateProperties
 * @version 2015-10-31
 */
class ConnectionTypeCreateOrUpdateProperties {
    /**
     * Constructs a new <code>ConnectionTypeCreateOrUpdateProperties</code>.
     * The properties of the create connection type.
     * @alias module:model/ConnectionTypeCreateOrUpdateProperties
     * @param fieldDefinitions {Object.<String, module:model/FieldDefinition>} Gets or sets the field definitions of the connection type.
     */
    constructor(fieldDefinitions) { 
        
        ConnectionTypeCreateOrUpdateProperties.initialize(this, fieldDefinitions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fieldDefinitions) { 
        obj['fieldDefinitions'] = fieldDefinitions;
    }

    /**
     * Constructs a <code>ConnectionTypeCreateOrUpdateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectionTypeCreateOrUpdateProperties} obj Optional instance to populate.
     * @return {module:model/ConnectionTypeCreateOrUpdateProperties} The populated <code>ConnectionTypeCreateOrUpdateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectionTypeCreateOrUpdateProperties();

            if (data.hasOwnProperty('fieldDefinitions')) {
                obj['fieldDefinitions'] = ApiClient.convertToType(data['fieldDefinitions'], {'String': FieldDefinition});
            }
            if (data.hasOwnProperty('isGlobal')) {
                obj['isGlobal'] = ApiClient.convertToType(data['isGlobal'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectionTypeCreateOrUpdateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectionTypeCreateOrUpdateProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectionTypeCreateOrUpdateProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ConnectionTypeCreateOrUpdateProperties.RequiredProperties = ["fieldDefinitions"];

/**
 * Gets or sets the field definitions of the connection type.
 * @member {Object.<String, module:model/FieldDefinition>} fieldDefinitions
 */
ConnectionTypeCreateOrUpdateProperties.prototype['fieldDefinitions'] = undefined;

/**
 * Gets or sets a Boolean value to indicate if the connection type is global.
 * @member {Boolean} isGlobal
 */
ConnectionTypeCreateOrUpdateProperties.prototype['isGlobal'] = undefined;






export default ConnectionTypeCreateOrUpdateProperties;

