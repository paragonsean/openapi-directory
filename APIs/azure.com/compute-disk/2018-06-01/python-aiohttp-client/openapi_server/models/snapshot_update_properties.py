# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_settings import EncryptionSettings
from openapi_server import util


class SnapshotUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_size_gb: int=None, encryption_settings: EncryptionSettings=None, os_type: str=None):
        """SnapshotUpdateProperties - a model defined in OpenAPI

        :param disk_size_gb: The disk_size_gb of this SnapshotUpdateProperties.
        :param encryption_settings: The encryption_settings of this SnapshotUpdateProperties.
        :param os_type: The os_type of this SnapshotUpdateProperties.
        """
        self.openapi_types = {
            'disk_size_gb': int,
            'encryption_settings': EncryptionSettings,
            'os_type': str
        }

        self.attribute_map = {
            'disk_size_gb': 'diskSizeGB',
            'encryption_settings': 'encryptionSettings',
            'os_type': 'osType'
        }

        self._disk_size_gb = disk_size_gb
        self._encryption_settings = encryption_settings
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotUpdateProperties of this SnapshotUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this SnapshotUpdateProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :return: The disk_size_gb of this SnapshotUpdateProperties.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this SnapshotUpdateProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :param disk_size_gb: The disk_size_gb of this SnapshotUpdateProperties.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def encryption_settings(self):
        """Gets the encryption_settings of this SnapshotUpdateProperties.


        :return: The encryption_settings of this SnapshotUpdateProperties.
        :rtype: EncryptionSettings
        """
        return self._encryption_settings

    @encryption_settings.setter
    def encryption_settings(self, encryption_settings):
        """Sets the encryption_settings of this SnapshotUpdateProperties.


        :param encryption_settings: The encryption_settings of this SnapshotUpdateProperties.
        :type encryption_settings: EncryptionSettings
        """

        self._encryption_settings = encryption_settings

    @property
    def os_type(self):
        """Gets the os_type of this SnapshotUpdateProperties.

        the Operating System type.

        :return: The os_type of this SnapshotUpdateProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this SnapshotUpdateProperties.

        the Operating System type.

        :param os_type: The os_type of this SnapshotUpdateProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type
