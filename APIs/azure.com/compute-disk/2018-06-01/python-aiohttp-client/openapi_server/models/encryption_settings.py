# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_and_key_reference import KeyVaultAndKeyReference
from openapi_server.models.key_vault_and_secret_reference import KeyVaultAndSecretReference
from openapi_server import util


class EncryptionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_encryption_key: KeyVaultAndSecretReference=None, enabled: bool=None, key_encryption_key: KeyVaultAndKeyReference=None):
        """EncryptionSettings - a model defined in OpenAPI

        :param disk_encryption_key: The disk_encryption_key of this EncryptionSettings.
        :param enabled: The enabled of this EncryptionSettings.
        :param key_encryption_key: The key_encryption_key of this EncryptionSettings.
        """
        self.openapi_types = {
            'disk_encryption_key': KeyVaultAndSecretReference,
            'enabled': bool,
            'key_encryption_key': KeyVaultAndKeyReference
        }

        self.attribute_map = {
            'disk_encryption_key': 'diskEncryptionKey',
            'enabled': 'enabled',
            'key_encryption_key': 'keyEncryptionKey'
        }

        self._disk_encryption_key = disk_encryption_key
        self._enabled = enabled
        self._key_encryption_key = key_encryption_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionSettings of this EncryptionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_encryption_key(self):
        """Gets the disk_encryption_key of this EncryptionSettings.


        :return: The disk_encryption_key of this EncryptionSettings.
        :rtype: KeyVaultAndSecretReference
        """
        return self._disk_encryption_key

    @disk_encryption_key.setter
    def disk_encryption_key(self, disk_encryption_key):
        """Sets the disk_encryption_key of this EncryptionSettings.


        :param disk_encryption_key: The disk_encryption_key of this EncryptionSettings.
        :type disk_encryption_key: KeyVaultAndSecretReference
        """

        self._disk_encryption_key = disk_encryption_key

    @property
    def enabled(self):
        """Gets the enabled of this EncryptionSettings.

        Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.

        :return: The enabled of this EncryptionSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EncryptionSettings.

        Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.

        :param enabled: The enabled of this EncryptionSettings.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def key_encryption_key(self):
        """Gets the key_encryption_key of this EncryptionSettings.


        :return: The key_encryption_key of this EncryptionSettings.
        :rtype: KeyVaultAndKeyReference
        """
        return self._key_encryption_key

    @key_encryption_key.setter
    def key_encryption_key(self, key_encryption_key):
        """Sets the key_encryption_key of this EncryptionSettings.


        :param key_encryption_key: The key_encryption_key of this EncryptionSettings.
        :type key_encryption_key: KeyVaultAndKeyReference
        """

        self._key_encryption_key = key_encryption_key
