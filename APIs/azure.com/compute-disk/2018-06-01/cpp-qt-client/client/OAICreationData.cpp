/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreationData::OAICreationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreationData::OAICreationData() {
    this->initializeModel();
}

OAICreationData::~OAICreationData() {}

void OAICreationData::initializeModel() {

    m_create_option_isSet = false;
    m_create_option_isValid = false;

    m_image_reference_isSet = false;
    m_image_reference_isValid = false;

    m_source_resource_id_isSet = false;
    m_source_resource_id_isValid = false;

    m_source_uri_isSet = false;
    m_source_uri_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;
}

void OAICreationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreationData::fromJsonObject(QJsonObject json) {

    m_create_option_isValid = ::OpenAPI::fromJsonValue(m_create_option, json[QString("createOption")]);
    m_create_option_isSet = !json[QString("createOption")].isNull() && m_create_option_isValid;

    m_image_reference_isValid = ::OpenAPI::fromJsonValue(m_image_reference, json[QString("imageReference")]);
    m_image_reference_isSet = !json[QString("imageReference")].isNull() && m_image_reference_isValid;

    m_source_resource_id_isValid = ::OpenAPI::fromJsonValue(m_source_resource_id, json[QString("sourceResourceId")]);
    m_source_resource_id_isSet = !json[QString("sourceResourceId")].isNull() && m_source_resource_id_isValid;

    m_source_uri_isValid = ::OpenAPI::fromJsonValue(m_source_uri, json[QString("sourceUri")]);
    m_source_uri_isSet = !json[QString("sourceUri")].isNull() && m_source_uri_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;
}

QString OAICreationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreationData::asJsonObject() const {
    QJsonObject obj;
    if (m_create_option_isSet) {
        obj.insert(QString("createOption"), ::OpenAPI::toJsonValue(m_create_option));
    }
    if (m_image_reference.isSet()) {
        obj.insert(QString("imageReference"), ::OpenAPI::toJsonValue(m_image_reference));
    }
    if (m_source_resource_id_isSet) {
        obj.insert(QString("sourceResourceId"), ::OpenAPI::toJsonValue(m_source_resource_id));
    }
    if (m_source_uri_isSet) {
        obj.insert(QString("sourceUri"), ::OpenAPI::toJsonValue(m_source_uri));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    return obj;
}

QString OAICreationData::getCreateOption() const {
    return m_create_option;
}
void OAICreationData::setCreateOption(const QString &create_option) {
    m_create_option = create_option;
    m_create_option_isSet = true;
}

bool OAICreationData::is_create_option_Set() const{
    return m_create_option_isSet;
}

bool OAICreationData::is_create_option_Valid() const{
    return m_create_option_isValid;
}

OAIImageDiskReference OAICreationData::getImageReference() const {
    return m_image_reference;
}
void OAICreationData::setImageReference(const OAIImageDiskReference &image_reference) {
    m_image_reference = image_reference;
    m_image_reference_isSet = true;
}

bool OAICreationData::is_image_reference_Set() const{
    return m_image_reference_isSet;
}

bool OAICreationData::is_image_reference_Valid() const{
    return m_image_reference_isValid;
}

QString OAICreationData::getSourceResourceId() const {
    return m_source_resource_id;
}
void OAICreationData::setSourceResourceId(const QString &source_resource_id) {
    m_source_resource_id = source_resource_id;
    m_source_resource_id_isSet = true;
}

bool OAICreationData::is_source_resource_id_Set() const{
    return m_source_resource_id_isSet;
}

bool OAICreationData::is_source_resource_id_Valid() const{
    return m_source_resource_id_isValid;
}

QString OAICreationData::getSourceUri() const {
    return m_source_uri;
}
void OAICreationData::setSourceUri(const QString &source_uri) {
    m_source_uri = source_uri;
    m_source_uri_isSet = true;
}

bool OAICreationData::is_source_uri_Set() const{
    return m_source_uri_isSet;
}

bool OAICreationData::is_source_uri_Valid() const{
    return m_source_uri_isValid;
}

QString OAICreationData::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAICreationData::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAICreationData::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAICreationData::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

bool OAICreationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_option_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_create_option_isValid && true;
}

} // namespace OpenAPI
