/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotProperties::OAISnapshotProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotProperties::OAISnapshotProperties() {
    this->initializeModel();
}

OAISnapshotProperties::~OAISnapshotProperties() {}

void OAISnapshotProperties::initializeModel() {

    m_creation_data_isSet = false;
    m_creation_data_isValid = false;

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_encryption_settings_isSet = false;
    m_encryption_settings_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;
}

void OAISnapshotProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotProperties::fromJsonObject(QJsonObject json) {

    m_creation_data_isValid = ::OpenAPI::fromJsonValue(m_creation_data, json[QString("creationData")]);
    m_creation_data_isSet = !json[QString("creationData")].isNull() && m_creation_data_isValid;

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGB")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGB")].isNull() && m_disk_size_gb_isValid;

    m_encryption_settings_isValid = ::OpenAPI::fromJsonValue(m_encryption_settings, json[QString("encryptionSettings")]);
    m_encryption_settings_isSet = !json[QString("encryptionSettings")].isNull() && m_encryption_settings_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;
}

QString OAISnapshotProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_data.isSet()) {
        obj.insert(QString("creationData"), ::OpenAPI::toJsonValue(m_creation_data));
    }
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGB"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_encryption_settings.isSet()) {
        obj.insert(QString("encryptionSettings"), ::OpenAPI::toJsonValue(m_encryption_settings));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    return obj;
}

OAICreationData OAISnapshotProperties::getCreationData() const {
    return m_creation_data;
}
void OAISnapshotProperties::setCreationData(const OAICreationData &creation_data) {
    m_creation_data = creation_data;
    m_creation_data_isSet = true;
}

bool OAISnapshotProperties::is_creation_data_Set() const{
    return m_creation_data_isSet;
}

bool OAISnapshotProperties::is_creation_data_Valid() const{
    return m_creation_data_isValid;
}

qint32 OAISnapshotProperties::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAISnapshotProperties::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAISnapshotProperties::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAISnapshotProperties::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

OAIEncryptionSettings OAISnapshotProperties::getEncryptionSettings() const {
    return m_encryption_settings;
}
void OAISnapshotProperties::setEncryptionSettings(const OAIEncryptionSettings &encryption_settings) {
    m_encryption_settings = encryption_settings;
    m_encryption_settings_isSet = true;
}

bool OAISnapshotProperties::is_encryption_settings_Set() const{
    return m_encryption_settings_isSet;
}

bool OAISnapshotProperties::is_encryption_settings_Valid() const{
    return m_encryption_settings_isValid;
}

QString OAISnapshotProperties::getOsType() const {
    return m_os_type;
}
void OAISnapshotProperties::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAISnapshotProperties::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAISnapshotProperties::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAISnapshotProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAISnapshotProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAISnapshotProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAISnapshotProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAISnapshotProperties::getTimeCreated() const {
    return m_time_created;
}
void OAISnapshotProperties::setTimeCreated(const QDateTime &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAISnapshotProperties::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAISnapshotProperties::is_time_created_Valid() const{
    return m_time_created_isValid;
}

bool OAISnapshotProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_data_isValid && true;
}

} // namespace OpenAPI
