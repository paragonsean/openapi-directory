/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageDiskReference from './ImageDiskReference';

/**
 * The CreationData model module.
 * @module model/CreationData
 * @version 2018-06-01
 */
class CreationData {
    /**
     * Constructs a new <code>CreationData</code>.
     * Data used when creating a disk.
     * @alias module:model/CreationData
     * @param createOption {module:model/CreationData.CreateOptionEnum} This enumerates the possible sources of a disk's creation.
     */
    constructor(createOption) { 
        
        CreationData.initialize(this, createOption);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createOption) { 
        obj['createOption'] = createOption;
    }

    /**
     * Constructs a <code>CreationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreationData} obj Optional instance to populate.
     * @return {module:model/CreationData} The populated <code>CreationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreationData();

            if (data.hasOwnProperty('createOption')) {
                obj['createOption'] = ApiClient.convertToType(data['createOption'], 'String');
            }
            if (data.hasOwnProperty('imageReference')) {
                obj['imageReference'] = ImageDiskReference.constructFromObject(data['imageReference']);
            }
            if (data.hasOwnProperty('sourceResourceId')) {
                obj['sourceResourceId'] = ApiClient.convertToType(data['sourceResourceId'], 'String');
            }
            if (data.hasOwnProperty('sourceUri')) {
                obj['sourceUri'] = ApiClient.convertToType(data['sourceUri'], 'String');
            }
            if (data.hasOwnProperty('storageAccountId')) {
                obj['storageAccountId'] = ApiClient.convertToType(data['storageAccountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['createOption'] && !(typeof data['createOption'] === 'string' || data['createOption'] instanceof String)) {
            throw new Error("Expected the field `createOption` to be a primitive type in the JSON string but got " + data['createOption']);
        }
        // validate the optional field `imageReference`
        if (data['imageReference']) { // data not null
          ImageDiskReference.validateJSON(data['imageReference']);
        }
        // ensure the json data is a string
        if (data['sourceResourceId'] && !(typeof data['sourceResourceId'] === 'string' || data['sourceResourceId'] instanceof String)) {
            throw new Error("Expected the field `sourceResourceId` to be a primitive type in the JSON string but got " + data['sourceResourceId']);
        }
        // ensure the json data is a string
        if (data['sourceUri'] && !(typeof data['sourceUri'] === 'string' || data['sourceUri'] instanceof String)) {
            throw new Error("Expected the field `sourceUri` to be a primitive type in the JSON string but got " + data['sourceUri']);
        }
        // ensure the json data is a string
        if (data['storageAccountId'] && !(typeof data['storageAccountId'] === 'string' || data['storageAccountId'] instanceof String)) {
            throw new Error("Expected the field `storageAccountId` to be a primitive type in the JSON string but got " + data['storageAccountId']);
        }

        return true;
    }


}

CreationData.RequiredProperties = ["createOption"];

/**
 * This enumerates the possible sources of a disk's creation.
 * @member {module:model/CreationData.CreateOptionEnum} createOption
 */
CreationData.prototype['createOption'] = undefined;

/**
 * @member {module:model/ImageDiskReference} imageReference
 */
CreationData.prototype['imageReference'] = undefined;

/**
 * If createOption is Copy, this is the ARM id of the source snapshot or disk.
 * @member {String} sourceResourceId
 */
CreationData.prototype['sourceResourceId'] = undefined;

/**
 * If createOption is Import, this is the URI of a blob to be imported into a managed disk.
 * @member {String} sourceUri
 */
CreationData.prototype['sourceUri'] = undefined;

/**
 * If createOption is Import, the Azure Resource Manager identifier of the storage account containing the blob to import as a disk. Required only if the blob is in a different subscription
 * @member {String} storageAccountId
 */
CreationData.prototype['storageAccountId'] = undefined;





/**
 * Allowed values for the <code>createOption</code> property.
 * @enum {String}
 * @readonly
 */
CreationData['CreateOptionEnum'] = {

    /**
     * value: "Empty"
     * @const
     */
    "Empty": "Empty",

    /**
     * value: "Attach"
     * @const
     */
    "Attach": "Attach",

    /**
     * value: "FromImage"
     * @const
     */
    "FromImage": "FromImage",

    /**
     * value: "Import"
     * @const
     */
    "Import": "Import",

    /**
     * value: "Copy"
     * @const
     */
    "Copy": "Copy",

    /**
     * value: "Restore"
     * @const
     */
    "Restore": "Restore"
};



export default CreationData;

