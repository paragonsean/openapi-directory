/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyVaultAndSecretReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyVaultAndSecretReference::OAIKeyVaultAndSecretReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyVaultAndSecretReference::OAIKeyVaultAndSecretReference() {
    this->initializeModel();
}

OAIKeyVaultAndSecretReference::~OAIKeyVaultAndSecretReference() {}

void OAIKeyVaultAndSecretReference::initializeModel() {

    m_secret_url_isSet = false;
    m_secret_url_isValid = false;

    m_source_vault_isSet = false;
    m_source_vault_isValid = false;
}

void OAIKeyVaultAndSecretReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyVaultAndSecretReference::fromJsonObject(QJsonObject json) {

    m_secret_url_isValid = ::OpenAPI::fromJsonValue(m_secret_url, json[QString("secretUrl")]);
    m_secret_url_isSet = !json[QString("secretUrl")].isNull() && m_secret_url_isValid;

    m_source_vault_isValid = ::OpenAPI::fromJsonValue(m_source_vault, json[QString("sourceVault")]);
    m_source_vault_isSet = !json[QString("sourceVault")].isNull() && m_source_vault_isValid;
}

QString OAIKeyVaultAndSecretReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyVaultAndSecretReference::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_url_isSet) {
        obj.insert(QString("secretUrl"), ::OpenAPI::toJsonValue(m_secret_url));
    }
    if (m_source_vault.isSet()) {
        obj.insert(QString("sourceVault"), ::OpenAPI::toJsonValue(m_source_vault));
    }
    return obj;
}

QString OAIKeyVaultAndSecretReference::getSecretUrl() const {
    return m_secret_url;
}
void OAIKeyVaultAndSecretReference::setSecretUrl(const QString &secret_url) {
    m_secret_url = secret_url;
    m_secret_url_isSet = true;
}

bool OAIKeyVaultAndSecretReference::is_secret_url_Set() const{
    return m_secret_url_isSet;
}

bool OAIKeyVaultAndSecretReference::is_secret_url_Valid() const{
    return m_secret_url_isValid;
}

OAISourceVault OAIKeyVaultAndSecretReference::getSourceVault() const {
    return m_source_vault;
}
void OAIKeyVaultAndSecretReference::setSourceVault(const OAISourceVault &source_vault) {
    m_source_vault = source_vault;
    m_source_vault_isSet = true;
}

bool OAIKeyVaultAndSecretReference::is_source_vault_Set() const{
    return m_source_vault_isSet;
}

bool OAIKeyVaultAndSecretReference::is_source_vault_Valid() const{
    return m_source_vault_isValid;
}

bool OAIKeyVaultAndSecretReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_vault.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyVaultAndSecretReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_secret_url_isValid && m_source_vault_isValid && true;
}

} // namespace OpenAPI
