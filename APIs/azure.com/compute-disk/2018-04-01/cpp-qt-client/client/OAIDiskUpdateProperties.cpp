/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiskUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiskUpdateProperties::OAIDiskUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiskUpdateProperties::OAIDiskUpdateProperties() {
    this->initializeModel();
}

OAIDiskUpdateProperties::~OAIDiskUpdateProperties() {}

void OAIDiskUpdateProperties::initializeModel() {

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_encryption_settings_isSet = false;
    m_encryption_settings_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;
}

void OAIDiskUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiskUpdateProperties::fromJsonObject(QJsonObject json) {

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGB")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGB")].isNull() && m_disk_size_gb_isValid;

    m_encryption_settings_isValid = ::OpenAPI::fromJsonValue(m_encryption_settings, json[QString("encryptionSettings")]);
    m_encryption_settings_isSet = !json[QString("encryptionSettings")].isNull() && m_encryption_settings_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;
}

QString OAIDiskUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiskUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGB"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_encryption_settings.isSet()) {
        obj.insert(QString("encryptionSettings"), ::OpenAPI::toJsonValue(m_encryption_settings));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    return obj;
}

qint32 OAIDiskUpdateProperties::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIDiskUpdateProperties::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIDiskUpdateProperties::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIDiskUpdateProperties::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

OAIEncryptionSettings OAIDiskUpdateProperties::getEncryptionSettings() const {
    return m_encryption_settings;
}
void OAIDiskUpdateProperties::setEncryptionSettings(const OAIEncryptionSettings &encryption_settings) {
    m_encryption_settings = encryption_settings;
    m_encryption_settings_isSet = true;
}

bool OAIDiskUpdateProperties::is_encryption_settings_Set() const{
    return m_encryption_settings_isSet;
}

bool OAIDiskUpdateProperties::is_encryption_settings_Valid() const{
    return m_encryption_settings_isValid;
}

QString OAIDiskUpdateProperties::getOsType() const {
    return m_os_type;
}
void OAIDiskUpdateProperties::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIDiskUpdateProperties::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIDiskUpdateProperties::is_os_type_Valid() const{
    return m_os_type_isValid;
}

bool OAIDiskUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiskUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
