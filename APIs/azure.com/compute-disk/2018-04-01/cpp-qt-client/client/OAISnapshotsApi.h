/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISnapshotsApi_H
#define OAI_OAISnapshotsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessUri.h"
#include "OAIGrantAccessData.h"
#include "OAISnapshot.h"
#include "OAISnapshotList.h"
#include "OAISnapshotUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISnapshotsApi : public QObject {
    Q_OBJECT

public:
    OAISnapshotsApi(const int timeOut = 0);
    ~OAISnapshotsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  snapshot_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  snapshot OAISnapshot [required]
    */
    virtual void snapshotsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &snapshot_name, const QString &api_version, const OAISnapshot &snapshot);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  snapshot_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void snapshotsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &snapshot_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  snapshot_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void snapshotsGet(const QString &subscription_id, const QString &resource_group_name, const QString &snapshot_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  snapshot_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  grant_access_data OAIGrantAccessData [required]
    */
    virtual void snapshotsGrantAccess(const QString &subscription_id, const QString &resource_group_name, const QString &snapshot_name, const QString &api_version, const OAIGrantAccessData &grant_access_data);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void snapshotsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void snapshotsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  snapshot_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void snapshotsRevokeAccess(const QString &subscription_id, const QString &resource_group_name, const QString &snapshot_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  snapshot_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  snapshot OAISnapshotUpdate [required]
    */
    virtual void snapshotsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &snapshot_name, const QString &api_version, const OAISnapshotUpdate &snapshot);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void snapshotsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void snapshotsDeleteCallback(OAIHttpRequestWorker *worker);
    void snapshotsGetCallback(OAIHttpRequestWorker *worker);
    void snapshotsGrantAccessCallback(OAIHttpRequestWorker *worker);
    void snapshotsListCallback(OAIHttpRequestWorker *worker);
    void snapshotsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void snapshotsRevokeAccessCallback(OAIHttpRequestWorker *worker);
    void snapshotsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void snapshotsCreateOrUpdateSignal(OAISnapshot summary);
    void snapshotsDeleteSignal();
    void snapshotsGetSignal(OAISnapshot summary);
    void snapshotsGrantAccessSignal(OAIAccessUri summary);
    void snapshotsListSignal(OAISnapshotList summary);
    void snapshotsListByResourceGroupSignal(OAISnapshotList summary);
    void snapshotsRevokeAccessSignal();
    void snapshotsUpdateSignal(OAISnapshot summary);


    void snapshotsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);
    void snapshotsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void snapshotsGetSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);
    void snapshotsGrantAccessSignalFull(OAIHttpRequestWorker *worker, OAIAccessUri summary);
    void snapshotsListSignalFull(OAIHttpRequestWorker *worker, OAISnapshotList summary);
    void snapshotsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAISnapshotList summary);
    void snapshotsRevokeAccessSignalFull(OAIHttpRequestWorker *worker);
    void snapshotsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISnapshot summary);

    Q_DECL_DEPRECATED_X("Use snapshotsCreateOrUpdateSignalError() instead")
    void snapshotsCreateOrUpdateSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsCreateOrUpdateSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsDeleteSignalError() instead")
    void snapshotsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsGetSignalError() instead")
    void snapshotsGetSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsGetSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsGrantAccessSignalError() instead")
    void snapshotsGrantAccessSignalE(OAIAccessUri summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsGrantAccessSignalError(OAIAccessUri summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsListSignalError() instead")
    void snapshotsListSignalE(OAISnapshotList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsListSignalError(OAISnapshotList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsListByResourceGroupSignalError() instead")
    void snapshotsListByResourceGroupSignalE(OAISnapshotList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsListByResourceGroupSignalError(OAISnapshotList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsRevokeAccessSignalError() instead")
    void snapshotsRevokeAccessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsRevokeAccessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsUpdateSignalError() instead")
    void snapshotsUpdateSignalE(OAISnapshot summary, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsUpdateSignalError(OAISnapshot summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use snapshotsCreateOrUpdateSignalErrorFull() instead")
    void snapshotsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsDeleteSignalErrorFull() instead")
    void snapshotsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsGetSignalErrorFull() instead")
    void snapshotsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsGrantAccessSignalErrorFull() instead")
    void snapshotsGrantAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsGrantAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsListSignalErrorFull() instead")
    void snapshotsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsListByResourceGroupSignalErrorFull() instead")
    void snapshotsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsRevokeAccessSignalErrorFull() instead")
    void snapshotsRevokeAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsRevokeAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use snapshotsUpdateSignalErrorFull() instead")
    void snapshotsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void snapshotsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
