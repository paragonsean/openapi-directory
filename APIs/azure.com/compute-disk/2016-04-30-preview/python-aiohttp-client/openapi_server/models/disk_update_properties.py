# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creation_data import CreationData
from openapi_server.models.encryption_settings import EncryptionSettings
from openapi_server import util


class DiskUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_type: str=None, creation_data: CreationData=None, disk_size_gb: int=None, encryption_settings: EncryptionSettings=None, os_type: str=None):
        """DiskUpdateProperties - a model defined in OpenAPI

        :param account_type: The account_type of this DiskUpdateProperties.
        :param creation_data: The creation_data of this DiskUpdateProperties.
        :param disk_size_gb: The disk_size_gb of this DiskUpdateProperties.
        :param encryption_settings: The encryption_settings of this DiskUpdateProperties.
        :param os_type: The os_type of this DiskUpdateProperties.
        """
        self.openapi_types = {
            'account_type': str,
            'creation_data': CreationData,
            'disk_size_gb': int,
            'encryption_settings': EncryptionSettings,
            'os_type': str
        }

        self.attribute_map = {
            'account_type': 'accountType',
            'creation_data': 'creationData',
            'disk_size_gb': 'diskSizeGB',
            'encryption_settings': 'encryptionSettings',
            'os_type': 'osType'
        }

        self._account_type = account_type
        self._creation_data = creation_data
        self._disk_size_gb = disk_size_gb
        self._encryption_settings = encryption_settings
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskUpdateProperties of this DiskUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_type(self):
        """Gets the account_type of this DiskUpdateProperties.

        the storage account type of the disk.

        :return: The account_type of this DiskUpdateProperties.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this DiskUpdateProperties.

        the storage account type of the disk.

        :param account_type: The account_type of this DiskUpdateProperties.
        :type account_type: str
        """
        allowed_values = ["Standard_LRS", "Premium_LRS"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def creation_data(self):
        """Gets the creation_data of this DiskUpdateProperties.


        :return: The creation_data of this DiskUpdateProperties.
        :rtype: CreationData
        """
        return self._creation_data

    @creation_data.setter
    def creation_data(self, creation_data):
        """Sets the creation_data of this DiskUpdateProperties.


        :param creation_data: The creation_data of this DiskUpdateProperties.
        :type creation_data: CreationData
        """

        self._creation_data = creation_data

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this DiskUpdateProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :return: The disk_size_gb of this DiskUpdateProperties.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this DiskUpdateProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :param disk_size_gb: The disk_size_gb of this DiskUpdateProperties.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def encryption_settings(self):
        """Gets the encryption_settings of this DiskUpdateProperties.


        :return: The encryption_settings of this DiskUpdateProperties.
        :rtype: EncryptionSettings
        """
        return self._encryption_settings

    @encryption_settings.setter
    def encryption_settings(self, encryption_settings):
        """Sets the encryption_settings of this DiskUpdateProperties.


        :param encryption_settings: The encryption_settings of this DiskUpdateProperties.
        :type encryption_settings: EncryptionSettings
        """

        self._encryption_settings = encryption_settings

    @property
    def os_type(self):
        """Gets the os_type of this DiskUpdateProperties.

        the Operating System type.

        :return: The os_type of this DiskUpdateProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this DiskUpdateProperties.

        the Operating System type.

        :param os_type: The os_type of this DiskUpdateProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type
