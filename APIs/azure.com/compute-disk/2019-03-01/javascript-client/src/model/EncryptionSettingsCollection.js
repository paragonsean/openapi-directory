/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionSettingsElement from './EncryptionSettingsElement';

/**
 * The EncryptionSettingsCollection model module.
 * @module model/EncryptionSettingsCollection
 * @version 2019-03-01
 */
class EncryptionSettingsCollection {
    /**
     * Constructs a new <code>EncryptionSettingsCollection</code>.
     * Encryption settings for disk or snapshot
     * @alias module:model/EncryptionSettingsCollection
     * @param enabled {Boolean} Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
     */
    constructor(enabled) { 
        
        EncryptionSettingsCollection.initialize(this, enabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enabled) { 
        obj['enabled'] = enabled;
    }

    /**
     * Constructs a <code>EncryptionSettingsCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionSettingsCollection} obj Optional instance to populate.
     * @return {module:model/EncryptionSettingsCollection} The populated <code>EncryptionSettingsCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionSettingsCollection();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('encryptionSettings')) {
                obj['encryptionSettings'] = ApiClient.convertToType(data['encryptionSettings'], [EncryptionSettingsElement]);
            }
            if (data.hasOwnProperty('encryptionSettingsVersion')) {
                obj['encryptionSettingsVersion'] = ApiClient.convertToType(data['encryptionSettingsVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionSettingsCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionSettingsCollection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EncryptionSettingsCollection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['encryptionSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['encryptionSettings'])) {
                throw new Error("Expected the field `encryptionSettings` to be an array in the JSON data but got " + data['encryptionSettings']);
            }
            // validate the optional field `encryptionSettings` (array)
            for (const item of data['encryptionSettings']) {
                EncryptionSettingsElement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['encryptionSettingsVersion'] && !(typeof data['encryptionSettingsVersion'] === 'string' || data['encryptionSettingsVersion'] instanceof String)) {
            throw new Error("Expected the field `encryptionSettingsVersion` to be a primitive type in the JSON string but got " + data['encryptionSettingsVersion']);
        }

        return true;
    }


}

EncryptionSettingsCollection.RequiredProperties = ["enabled"];

/**
 * Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
 * @member {Boolean} enabled
 */
EncryptionSettingsCollection.prototype['enabled'] = undefined;

/**
 * A collection of encryption settings, one for each disk volume.
 * @member {Array.<module:model/EncryptionSettingsElement>} encryptionSettings
 */
EncryptionSettingsCollection.prototype['encryptionSettings'] = undefined;

/**
 * Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk Encryption.
 * @member {String} encryptionSettingsVersion
 */
EncryptionSettingsCollection.prototype['encryptionSettingsVersion'] = undefined;






export default EncryptionSettingsCollection;

