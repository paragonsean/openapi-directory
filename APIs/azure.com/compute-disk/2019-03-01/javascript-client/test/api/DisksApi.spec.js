/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DiskResourceProviderClient);
  }
}(this, function(expect, DiskResourceProviderClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DiskResourceProviderClient.DisksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DisksApi', function() {
    describe('disksCreateOrUpdate', function() {
      it('should call disksCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test disksCreateOrUpdate
        //instance.disksCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disksDelete', function() {
      it('should call disksDelete successfully', function(done) {
        //uncomment below and update the code to test disksDelete
        //instance.disksDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disksGet', function() {
      it('should call disksGet successfully', function(done) {
        //uncomment below and update the code to test disksGet
        //instance.disksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disksGrantAccess', function() {
      it('should call disksGrantAccess successfully', function(done) {
        //uncomment below and update the code to test disksGrantAccess
        //instance.disksGrantAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disksList', function() {
      it('should call disksList successfully', function(done) {
        //uncomment below and update the code to test disksList
        //instance.disksList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disksListByResourceGroup', function() {
      it('should call disksListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test disksListByResourceGroup
        //instance.disksListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disksRevokeAccess', function() {
      it('should call disksRevokeAccess successfully', function(done) {
        //uncomment below and update the code to test disksRevokeAccess
        //instance.disksRevokeAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disksUpdate', function() {
      it('should call disksUpdate successfully', function(done) {
        //uncomment below and update the code to test disksUpdate
        //instance.disksUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
