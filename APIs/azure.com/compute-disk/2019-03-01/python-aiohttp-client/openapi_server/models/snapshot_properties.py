# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creation_data import CreationData
from openapi_server.models.encryption_settings_collection import EncryptionSettingsCollection
from openapi_server import util


class SnapshotProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_data: CreationData=None, disk_size_bytes: int=None, disk_size_gb: int=None, encryption_settings_collection: EncryptionSettingsCollection=None, hyper_v_generation: str=None, incremental: bool=None, os_type: str=None, provisioning_state: str=None, time_created: datetime=None, unique_id: str=None):
        """SnapshotProperties - a model defined in OpenAPI

        :param creation_data: The creation_data of this SnapshotProperties.
        :param disk_size_bytes: The disk_size_bytes of this SnapshotProperties.
        :param disk_size_gb: The disk_size_gb of this SnapshotProperties.
        :param encryption_settings_collection: The encryption_settings_collection of this SnapshotProperties.
        :param hyper_v_generation: The hyper_v_generation of this SnapshotProperties.
        :param incremental: The incremental of this SnapshotProperties.
        :param os_type: The os_type of this SnapshotProperties.
        :param provisioning_state: The provisioning_state of this SnapshotProperties.
        :param time_created: The time_created of this SnapshotProperties.
        :param unique_id: The unique_id of this SnapshotProperties.
        """
        self.openapi_types = {
            'creation_data': CreationData,
            'disk_size_bytes': int,
            'disk_size_gb': int,
            'encryption_settings_collection': EncryptionSettingsCollection,
            'hyper_v_generation': str,
            'incremental': bool,
            'os_type': str,
            'provisioning_state': str,
            'time_created': datetime,
            'unique_id': str
        }

        self.attribute_map = {
            'creation_data': 'creationData',
            'disk_size_bytes': 'diskSizeBytes',
            'disk_size_gb': 'diskSizeGB',
            'encryption_settings_collection': 'encryptionSettingsCollection',
            'hyper_v_generation': 'hyperVGeneration',
            'incremental': 'incremental',
            'os_type': 'osType',
            'provisioning_state': 'provisioningState',
            'time_created': 'timeCreated',
            'unique_id': 'uniqueId'
        }

        self._creation_data = creation_data
        self._disk_size_bytes = disk_size_bytes
        self._disk_size_gb = disk_size_gb
        self._encryption_settings_collection = encryption_settings_collection
        self._hyper_v_generation = hyper_v_generation
        self._incremental = incremental
        self._os_type = os_type
        self._provisioning_state = provisioning_state
        self._time_created = time_created
        self._unique_id = unique_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SnapshotProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SnapshotProperties of this SnapshotProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_data(self):
        """Gets the creation_data of this SnapshotProperties.


        :return: The creation_data of this SnapshotProperties.
        :rtype: CreationData
        """
        return self._creation_data

    @creation_data.setter
    def creation_data(self, creation_data):
        """Sets the creation_data of this SnapshotProperties.


        :param creation_data: The creation_data of this SnapshotProperties.
        :type creation_data: CreationData
        """
        if creation_data is None:
            raise ValueError("Invalid value for `creation_data`, must not be `None`")

        self._creation_data = creation_data

    @property
    def disk_size_bytes(self):
        """Gets the disk_size_bytes of this SnapshotProperties.

        The size of the disk in bytes. This field is read only.

        :return: The disk_size_bytes of this SnapshotProperties.
        :rtype: int
        """
        return self._disk_size_bytes

    @disk_size_bytes.setter
    def disk_size_bytes(self, disk_size_bytes):
        """Sets the disk_size_bytes of this SnapshotProperties.

        The size of the disk in bytes. This field is read only.

        :param disk_size_bytes: The disk_size_bytes of this SnapshotProperties.
        :type disk_size_bytes: int
        """

        self._disk_size_bytes = disk_size_bytes

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this SnapshotProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :return: The disk_size_gb of this SnapshotProperties.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this SnapshotProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :param disk_size_gb: The disk_size_gb of this SnapshotProperties.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def encryption_settings_collection(self):
        """Gets the encryption_settings_collection of this SnapshotProperties.


        :return: The encryption_settings_collection of this SnapshotProperties.
        :rtype: EncryptionSettingsCollection
        """
        return self._encryption_settings_collection

    @encryption_settings_collection.setter
    def encryption_settings_collection(self, encryption_settings_collection):
        """Sets the encryption_settings_collection of this SnapshotProperties.


        :param encryption_settings_collection: The encryption_settings_collection of this SnapshotProperties.
        :type encryption_settings_collection: EncryptionSettingsCollection
        """

        self._encryption_settings_collection = encryption_settings_collection

    @property
    def hyper_v_generation(self):
        """Gets the hyper_v_generation of this SnapshotProperties.

        The hypervisor generation of the Virtual Machine. Applicable to OS disks only.

        :return: The hyper_v_generation of this SnapshotProperties.
        :rtype: str
        """
        return self._hyper_v_generation

    @hyper_v_generation.setter
    def hyper_v_generation(self, hyper_v_generation):
        """Sets the hyper_v_generation of this SnapshotProperties.

        The hypervisor generation of the Virtual Machine. Applicable to OS disks only.

        :param hyper_v_generation: The hyper_v_generation of this SnapshotProperties.
        :type hyper_v_generation: str
        """
        allowed_values = ["V1", "V2"]  # noqa: E501
        if hyper_v_generation not in allowed_values:
            raise ValueError(
                "Invalid value for `hyper_v_generation` ({0}), must be one of {1}"
                .format(hyper_v_generation, allowed_values)
            )

        self._hyper_v_generation = hyper_v_generation

    @property
    def incremental(self):
        """Gets the incremental of this SnapshotProperties.

        Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.

        :return: The incremental of this SnapshotProperties.
        :rtype: bool
        """
        return self._incremental

    @incremental.setter
    def incremental(self, incremental):
        """Sets the incremental of this SnapshotProperties.

        Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can be diffed.

        :param incremental: The incremental of this SnapshotProperties.
        :type incremental: bool
        """

        self._incremental = incremental

    @property
    def os_type(self):
        """Gets the os_type of this SnapshotProperties.

        The Operating System type.

        :return: The os_type of this SnapshotProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this SnapshotProperties.

        The Operating System type.

        :param os_type: The os_type of this SnapshotProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this SnapshotProperties.

        The disk provisioning state.

        :return: The provisioning_state of this SnapshotProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this SnapshotProperties.

        The disk provisioning state.

        :param provisioning_state: The provisioning_state of this SnapshotProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def time_created(self):
        """Gets the time_created of this SnapshotProperties.

        The time when the disk was created.

        :return: The time_created of this SnapshotProperties.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this SnapshotProperties.

        The time when the disk was created.

        :param time_created: The time_created of this SnapshotProperties.
        :type time_created: datetime
        """

        self._time_created = time_created

    @property
    def unique_id(self):
        """Gets the unique_id of this SnapshotProperties.

        Unique Guid identifying the resource.

        :return: The unique_id of this SnapshotProperties.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this SnapshotProperties.

        Unique Guid identifying the resource.

        :param unique_id: The unique_id of this SnapshotProperties.
        :type unique_id: str
        """

        self._unique_id = unique_id
