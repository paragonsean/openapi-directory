# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GrantAccessData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, duration_in_seconds: int=None):
        """GrantAccessData - a model defined in OpenAPI

        :param access: The access of this GrantAccessData.
        :param duration_in_seconds: The duration_in_seconds of this GrantAccessData.
        """
        self.openapi_types = {
            'access': str,
            'duration_in_seconds': int
        }

        self.attribute_map = {
            'access': 'access',
            'duration_in_seconds': 'durationInSeconds'
        }

        self._access = access
        self._duration_in_seconds = duration_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GrantAccessData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GrantAccessData of this GrantAccessData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this GrantAccessData.


        :return: The access of this GrantAccessData.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this GrantAccessData.


        :param access: The access of this GrantAccessData.
        :type access: str
        """
        allowed_values = ["None", "Read", "Write"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this GrantAccessData.

        Time duration in seconds until the SAS access expires.

        :return: The duration_in_seconds of this GrantAccessData.
        :rtype: int
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this GrantAccessData.

        Time duration in seconds until the SAS access expires.

        :param duration_in_seconds: The duration_in_seconds of this GrantAccessData.
        :type duration_in_seconds: int
        """
        if duration_in_seconds is None:
            raise ValueError("Invalid value for `duration_in_seconds`, must not be `None`")

        self._duration_in_seconds = duration_in_seconds
