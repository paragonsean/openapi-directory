/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionSettingsElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionSettingsElement::OAIEncryptionSettingsElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionSettingsElement::OAIEncryptionSettingsElement() {
    this->initializeModel();
}

OAIEncryptionSettingsElement::~OAIEncryptionSettingsElement() {}

void OAIEncryptionSettingsElement::initializeModel() {

    m_disk_encryption_key_isSet = false;
    m_disk_encryption_key_isValid = false;

    m_key_encryption_key_isSet = false;
    m_key_encryption_key_isValid = false;
}

void OAIEncryptionSettingsElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionSettingsElement::fromJsonObject(QJsonObject json) {

    m_disk_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_key, json[QString("diskEncryptionKey")]);
    m_disk_encryption_key_isSet = !json[QString("diskEncryptionKey")].isNull() && m_disk_encryption_key_isValid;

    m_key_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_key_encryption_key, json[QString("keyEncryptionKey")]);
    m_key_encryption_key_isSet = !json[QString("keyEncryptionKey")].isNull() && m_key_encryption_key_isValid;
}

QString OAIEncryptionSettingsElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionSettingsElement::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_encryption_key.isSet()) {
        obj.insert(QString("diskEncryptionKey"), ::OpenAPI::toJsonValue(m_disk_encryption_key));
    }
    if (m_key_encryption_key.isSet()) {
        obj.insert(QString("keyEncryptionKey"), ::OpenAPI::toJsonValue(m_key_encryption_key));
    }
    return obj;
}

OAIKeyVaultAndSecretReference OAIEncryptionSettingsElement::getDiskEncryptionKey() const {
    return m_disk_encryption_key;
}
void OAIEncryptionSettingsElement::setDiskEncryptionKey(const OAIKeyVaultAndSecretReference &disk_encryption_key) {
    m_disk_encryption_key = disk_encryption_key;
    m_disk_encryption_key_isSet = true;
}

bool OAIEncryptionSettingsElement::is_disk_encryption_key_Set() const{
    return m_disk_encryption_key_isSet;
}

bool OAIEncryptionSettingsElement::is_disk_encryption_key_Valid() const{
    return m_disk_encryption_key_isValid;
}

OAIKeyVaultAndKeyReference OAIEncryptionSettingsElement::getKeyEncryptionKey() const {
    return m_key_encryption_key;
}
void OAIEncryptionSettingsElement::setKeyEncryptionKey(const OAIKeyVaultAndKeyReference &key_encryption_key) {
    m_key_encryption_key = key_encryption_key;
    m_key_encryption_key_isSet = true;
}

bool OAIEncryptionSettingsElement::is_key_encryption_key_Set() const{
    return m_key_encryption_key_isSet;
}

bool OAIEncryptionSettingsElement::is_key_encryption_key_Valid() const{
    return m_key_encryption_key_isValid;
}

bool OAIEncryptionSettingsElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionSettingsElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
