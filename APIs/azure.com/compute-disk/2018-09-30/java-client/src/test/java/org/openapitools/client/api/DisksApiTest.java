/*
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessUri;
import org.openapitools.client.model.Disk;
import org.openapitools.client.model.DiskList;
import org.openapitools.client.model.DiskUpdate;
import org.openapitools.client.model.GrantAccessData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DisksApi
 */
@Disabled
public class DisksApiTest {

    private final DisksApi api = new DisksApi();

    /**
     * Creates or updates a disk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String diskName = null;
        String apiVersion = null;
        Disk disk = null;
        Disk response = api.disksCreateOrUpdate(subscriptionId, resourceGroupName, diskName, apiVersion, disk);
        // TODO: test validations
    }

    /**
     * Deletes a disk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String diskName = null;
        String apiVersion = null;
        api.disksDelete(subscriptionId, resourceGroupName, diskName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets information about a disk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String diskName = null;
        String apiVersion = null;
        Disk response = api.disksGet(subscriptionId, resourceGroupName, diskName, apiVersion);
        // TODO: test validations
    }

    /**
     * Grants access to a disk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksGrantAccessTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String diskName = null;
        String apiVersion = null;
        GrantAccessData grantAccessData = null;
        AccessUri response = api.disksGrantAccess(subscriptionId, resourceGroupName, diskName, apiVersion, grantAccessData);
        // TODO: test validations
    }

    /**
     * Lists all the disks under a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DiskList response = api.disksList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all the disks under a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        DiskList response = api.disksListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Revokes access to a disk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksRevokeAccessTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String diskName = null;
        String apiVersion = null;
        api.disksRevokeAccess(subscriptionId, resourceGroupName, diskName, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates (patches) a disk.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disksUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String diskName = null;
        String apiVersion = null;
        DiskUpdate disk = null;
        Disk response = api.disksUpdate(subscriptionId, resourceGroupName, diskName, apiVersion, disk);
        // TODO: test validations
    }

}
