/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-09-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageDiskReference model module.
 * @module model/ImageDiskReference
 * @version 2018-09-30
 */
class ImageDiskReference {
    /**
     * Constructs a new <code>ImageDiskReference</code>.
     * The source image used for creating the disk.
     * @alias module:model/ImageDiskReference
     * @param id {String} A relative uri containing either a Platform Image Repository or user image reference.
     */
    constructor(id) { 
        
        ImageDiskReference.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>ImageDiskReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageDiskReference} obj Optional instance to populate.
     * @return {module:model/ImageDiskReference} The populated <code>ImageDiskReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageDiskReference();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lun')) {
                obj['lun'] = ApiClient.convertToType(data['lun'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageDiskReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageDiskReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageDiskReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }

        return true;
    }


}

ImageDiskReference.RequiredProperties = ["id"];

/**
 * A relative uri containing either a Platform Image Repository or user image reference.
 * @member {String} id
 */
ImageDiskReference.prototype['id'] = undefined;

/**
 * If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image to use. For OS disks, this field is null.
 * @member {Number} lun
 */
ImageDiskReference.prototype['lun'] = undefined;






export default ImageDiskReference;

