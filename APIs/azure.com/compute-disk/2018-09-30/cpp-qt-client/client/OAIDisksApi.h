/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2018-09-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisksApi_H
#define OAI_OAIDisksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessUri.h"
#include "OAIDisk.h"
#include "OAIDiskList.h"
#include "OAIDiskUpdate.h"
#include "OAIGrantAccessData.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisksApi : public QObject {
    Q_OBJECT

public:
    OAIDisksApi(const int timeOut = 0);
    ~OAIDisksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  disk OAIDisk [required]
    */
    virtual void disksCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &disk_name, const QString &api_version, const OAIDisk &disk);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void disksDelete(const QString &subscription_id, const QString &resource_group_name, const QString &disk_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void disksGet(const QString &subscription_id, const QString &resource_group_name, const QString &disk_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  grant_access_data OAIGrantAccessData [required]
    */
    virtual void disksGrantAccess(const QString &subscription_id, const QString &resource_group_name, const QString &disk_name, const QString &api_version, const OAIGrantAccessData &grant_access_data);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void disksList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void disksListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void disksRevokeAccess(const QString &subscription_id, const QString &resource_group_name, const QString &disk_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  disk OAIDiskUpdate [required]
    */
    virtual void disksUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &disk_name, const QString &api_version, const OAIDiskUpdate &disk);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disksCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void disksDeleteCallback(OAIHttpRequestWorker *worker);
    void disksGetCallback(OAIHttpRequestWorker *worker);
    void disksGrantAccessCallback(OAIHttpRequestWorker *worker);
    void disksListCallback(OAIHttpRequestWorker *worker);
    void disksListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void disksRevokeAccessCallback(OAIHttpRequestWorker *worker);
    void disksUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disksCreateOrUpdateSignal(OAIDisk summary);
    void disksDeleteSignal();
    void disksGetSignal(OAIDisk summary);
    void disksGrantAccessSignal(OAIAccessUri summary);
    void disksListSignal(OAIDiskList summary);
    void disksListByResourceGroupSignal(OAIDiskList summary);
    void disksRevokeAccessSignal();
    void disksUpdateSignal(OAIDisk summary);


    void disksCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDisk summary);
    void disksDeleteSignalFull(OAIHttpRequestWorker *worker);
    void disksGetSignalFull(OAIHttpRequestWorker *worker, OAIDisk summary);
    void disksGrantAccessSignalFull(OAIHttpRequestWorker *worker, OAIAccessUri summary);
    void disksListSignalFull(OAIHttpRequestWorker *worker, OAIDiskList summary);
    void disksListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDiskList summary);
    void disksRevokeAccessSignalFull(OAIHttpRequestWorker *worker);
    void disksUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDisk summary);

    Q_DECL_DEPRECATED_X("Use disksCreateOrUpdateSignalError() instead")
    void disksCreateOrUpdateSignalE(OAIDisk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disksCreateOrUpdateSignalError(OAIDisk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksDeleteSignalError() instead")
    void disksDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disksDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksGetSignalError() instead")
    void disksGetSignalE(OAIDisk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disksGetSignalError(OAIDisk summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksGrantAccessSignalError() instead")
    void disksGrantAccessSignalE(OAIAccessUri summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disksGrantAccessSignalError(OAIAccessUri summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksListSignalError() instead")
    void disksListSignalE(OAIDiskList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disksListSignalError(OAIDiskList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksListByResourceGroupSignalError() instead")
    void disksListByResourceGroupSignalE(OAIDiskList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disksListByResourceGroupSignalError(OAIDiskList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksRevokeAccessSignalError() instead")
    void disksRevokeAccessSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disksRevokeAccessSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksUpdateSignalError() instead")
    void disksUpdateSignalE(OAIDisk summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disksUpdateSignalError(OAIDisk summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disksCreateOrUpdateSignalErrorFull() instead")
    void disksCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksDeleteSignalErrorFull() instead")
    void disksDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksGetSignalErrorFull() instead")
    void disksGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksGrantAccessSignalErrorFull() instead")
    void disksGrantAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksGrantAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksListSignalErrorFull() instead")
    void disksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksListByResourceGroupSignalErrorFull() instead")
    void disksListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksRevokeAccessSignalErrorFull() instead")
    void disksRevokeAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksRevokeAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disksUpdateSignalErrorFull() instead")
    void disksUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disksUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
