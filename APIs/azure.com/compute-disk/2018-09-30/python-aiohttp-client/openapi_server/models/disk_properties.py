# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creation_data import CreationData
from openapi_server.models.encryption_settings_collection import EncryptionSettingsCollection
from openapi_server import util


class DiskProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_data: CreationData=None, disk_iops_read_write: int=None, disk_m_bps_read_write: int=None, disk_size_gb: int=None, disk_state: str=None, encryption_settings_collection: EncryptionSettingsCollection=None, hyper_v_generation: str=None, os_type: str=None, provisioning_state: str=None, time_created: datetime=None):
        """DiskProperties - a model defined in OpenAPI

        :param creation_data: The creation_data of this DiskProperties.
        :param disk_iops_read_write: The disk_iops_read_write of this DiskProperties.
        :param disk_m_bps_read_write: The disk_m_bps_read_write of this DiskProperties.
        :param disk_size_gb: The disk_size_gb of this DiskProperties.
        :param disk_state: The disk_state of this DiskProperties.
        :param encryption_settings_collection: The encryption_settings_collection of this DiskProperties.
        :param hyper_v_generation: The hyper_v_generation of this DiskProperties.
        :param os_type: The os_type of this DiskProperties.
        :param provisioning_state: The provisioning_state of this DiskProperties.
        :param time_created: The time_created of this DiskProperties.
        """
        self.openapi_types = {
            'creation_data': CreationData,
            'disk_iops_read_write': int,
            'disk_m_bps_read_write': int,
            'disk_size_gb': int,
            'disk_state': str,
            'encryption_settings_collection': EncryptionSettingsCollection,
            'hyper_v_generation': str,
            'os_type': str,
            'provisioning_state': str,
            'time_created': datetime
        }

        self.attribute_map = {
            'creation_data': 'creationData',
            'disk_iops_read_write': 'diskIOPSReadWrite',
            'disk_m_bps_read_write': 'diskMBpsReadWrite',
            'disk_size_gb': 'diskSizeGB',
            'disk_state': 'diskState',
            'encryption_settings_collection': 'encryptionSettingsCollection',
            'hyper_v_generation': 'hyperVGeneration',
            'os_type': 'osType',
            'provisioning_state': 'provisioningState',
            'time_created': 'timeCreated'
        }

        self._creation_data = creation_data
        self._disk_iops_read_write = disk_iops_read_write
        self._disk_m_bps_read_write = disk_m_bps_read_write
        self._disk_size_gb = disk_size_gb
        self._disk_state = disk_state
        self._encryption_settings_collection = encryption_settings_collection
        self._hyper_v_generation = hyper_v_generation
        self._os_type = os_type
        self._provisioning_state = provisioning_state
        self._time_created = time_created

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskProperties of this DiskProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_data(self):
        """Gets the creation_data of this DiskProperties.


        :return: The creation_data of this DiskProperties.
        :rtype: CreationData
        """
        return self._creation_data

    @creation_data.setter
    def creation_data(self, creation_data):
        """Sets the creation_data of this DiskProperties.


        :param creation_data: The creation_data of this DiskProperties.
        :type creation_data: CreationData
        """
        if creation_data is None:
            raise ValueError("Invalid value for `creation_data`, must not be `None`")

        self._creation_data = creation_data

    @property
    def disk_iops_read_write(self):
        """Gets the disk_iops_read_write of this DiskProperties.

        The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.

        :return: The disk_iops_read_write of this DiskProperties.
        :rtype: int
        """
        return self._disk_iops_read_write

    @disk_iops_read_write.setter
    def disk_iops_read_write(self, disk_iops_read_write):
        """Sets the disk_iops_read_write of this DiskProperties.

        The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.

        :param disk_iops_read_write: The disk_iops_read_write of this DiskProperties.
        :type disk_iops_read_write: int
        """

        self._disk_iops_read_write = disk_iops_read_write

    @property
    def disk_m_bps_read_write(self):
        """Gets the disk_m_bps_read_write of this DiskProperties.

        The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.

        :return: The disk_m_bps_read_write of this DiskProperties.
        :rtype: int
        """
        return self._disk_m_bps_read_write

    @disk_m_bps_read_write.setter
    def disk_m_bps_read_write(self, disk_m_bps_read_write):
        """Sets the disk_m_bps_read_write of this DiskProperties.

        The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.

        :param disk_m_bps_read_write: The disk_m_bps_read_write of this DiskProperties.
        :type disk_m_bps_read_write: int
        """

        self._disk_m_bps_read_write = disk_m_bps_read_write

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this DiskProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :return: The disk_size_gb of this DiskProperties.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this DiskProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the VHD to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :param disk_size_gb: The disk_size_gb of this DiskProperties.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def disk_state(self):
        """Gets the disk_state of this DiskProperties.

        The state of the disk.

        :return: The disk_state of this DiskProperties.
        :rtype: str
        """
        return self._disk_state

    @disk_state.setter
    def disk_state(self, disk_state):
        """Sets the disk_state of this DiskProperties.

        The state of the disk.

        :param disk_state: The disk_state of this DiskProperties.
        :type disk_state: str
        """
        allowed_values = ["Unattached", "Attached", "Reserved", "ActiveSAS", "ReadyToUpload", "ActiveUpload"]  # noqa: E501
        if disk_state not in allowed_values:
            raise ValueError(
                "Invalid value for `disk_state` ({0}), must be one of {1}"
                .format(disk_state, allowed_values)
            )

        self._disk_state = disk_state

    @property
    def encryption_settings_collection(self):
        """Gets the encryption_settings_collection of this DiskProperties.


        :return: The encryption_settings_collection of this DiskProperties.
        :rtype: EncryptionSettingsCollection
        """
        return self._encryption_settings_collection

    @encryption_settings_collection.setter
    def encryption_settings_collection(self, encryption_settings_collection):
        """Sets the encryption_settings_collection of this DiskProperties.


        :param encryption_settings_collection: The encryption_settings_collection of this DiskProperties.
        :type encryption_settings_collection: EncryptionSettingsCollection
        """

        self._encryption_settings_collection = encryption_settings_collection

    @property
    def hyper_v_generation(self):
        """Gets the hyper_v_generation of this DiskProperties.

        The hypervisor generation of the Virtual Machine. Applicable to OS disks only.

        :return: The hyper_v_generation of this DiskProperties.
        :rtype: str
        """
        return self._hyper_v_generation

    @hyper_v_generation.setter
    def hyper_v_generation(self, hyper_v_generation):
        """Sets the hyper_v_generation of this DiskProperties.

        The hypervisor generation of the Virtual Machine. Applicable to OS disks only.

        :param hyper_v_generation: The hyper_v_generation of this DiskProperties.
        :type hyper_v_generation: str
        """
        allowed_values = ["V1", "V2"]  # noqa: E501
        if hyper_v_generation not in allowed_values:
            raise ValueError(
                "Invalid value for `hyper_v_generation` ({0}), must be one of {1}"
                .format(hyper_v_generation, allowed_values)
            )

        self._hyper_v_generation = hyper_v_generation

    @property
    def os_type(self):
        """Gets the os_type of this DiskProperties.

        The Operating System type.

        :return: The os_type of this DiskProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this DiskProperties.

        The Operating System type.

        :param os_type: The os_type of this DiskProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this DiskProperties.

        The disk provisioning state.

        :return: The provisioning_state of this DiskProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this DiskProperties.

        The disk provisioning state.

        :param provisioning_state: The provisioning_state of this DiskProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def time_created(self):
        """Gets the time_created of this DiskProperties.

        The time when the disk was created.

        :return: The time_created of this DiskProperties.
        :rtype: datetime
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this DiskProperties.

        The time when the disk was created.

        :param time_created: The time_created of this DiskProperties.
        :type time_created: datetime
        """

        self._time_created = time_created
