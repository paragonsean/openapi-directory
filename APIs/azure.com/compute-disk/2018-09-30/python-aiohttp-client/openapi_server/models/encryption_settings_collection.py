# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_settings_element import EncryptionSettingsElement
from openapi_server import util


class EncryptionSettingsCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, encryption_settings: List[EncryptionSettingsElement]=None):
        """EncryptionSettingsCollection - a model defined in OpenAPI

        :param enabled: The enabled of this EncryptionSettingsCollection.
        :param encryption_settings: The encryption_settings of this EncryptionSettingsCollection.
        """
        self.openapi_types = {
            'enabled': bool,
            'encryption_settings': List[EncryptionSettingsElement]
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'encryption_settings': 'encryptionSettings'
        }

        self._enabled = enabled
        self._encryption_settings = encryption_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionSettingsCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionSettingsCollection of this EncryptionSettingsCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this EncryptionSettingsCollection.

        Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.

        :return: The enabled of this EncryptionSettingsCollection.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this EncryptionSettingsCollection.

        Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.

        :param enabled: The enabled of this EncryptionSettingsCollection.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def encryption_settings(self):
        """Gets the encryption_settings of this EncryptionSettingsCollection.

        A collection of encryption settings, one for each disk volume.

        :return: The encryption_settings of this EncryptionSettingsCollection.
        :rtype: List[EncryptionSettingsElement]
        """
        return self._encryption_settings

    @encryption_settings.setter
    def encryption_settings(self, encryption_settings):
        """Sets the encryption_settings of this EncryptionSettingsCollection.

        A collection of encryption settings, one for each disk volume.

        :param encryption_settings: The encryption_settings of this EncryptionSettingsCollection.
        :type encryption_settings: List[EncryptionSettingsElement]
        """

        self._encryption_settings = encryption_settings
