# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_and_key_reference import KeyVaultAndKeyReference
from openapi_server import util


class EncryptionSetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_key: KeyVaultAndKeyReference=None, previous_keys: List[KeyVaultAndKeyReference]=None, provisioning_state: str=None):
        """EncryptionSetProperties - a model defined in OpenAPI

        :param active_key: The active_key of this EncryptionSetProperties.
        :param previous_keys: The previous_keys of this EncryptionSetProperties.
        :param provisioning_state: The provisioning_state of this EncryptionSetProperties.
        """
        self.openapi_types = {
            'active_key': KeyVaultAndKeyReference,
            'previous_keys': List[KeyVaultAndKeyReference],
            'provisioning_state': str
        }

        self.attribute_map = {
            'active_key': 'activeKey',
            'previous_keys': 'previousKeys',
            'provisioning_state': 'provisioningState'
        }

        self._active_key = active_key
        self._previous_keys = previous_keys
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionSetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionSetProperties of this EncryptionSetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_key(self):
        """Gets the active_key of this EncryptionSetProperties.


        :return: The active_key of this EncryptionSetProperties.
        :rtype: KeyVaultAndKeyReference
        """
        return self._active_key

    @active_key.setter
    def active_key(self, active_key):
        """Sets the active_key of this EncryptionSetProperties.


        :param active_key: The active_key of this EncryptionSetProperties.
        :type active_key: KeyVaultAndKeyReference
        """

        self._active_key = active_key

    @property
    def previous_keys(self):
        """Gets the previous_keys of this EncryptionSetProperties.

        A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.

        :return: The previous_keys of this EncryptionSetProperties.
        :rtype: List[KeyVaultAndKeyReference]
        """
        return self._previous_keys

    @previous_keys.setter
    def previous_keys(self, previous_keys):
        """Sets the previous_keys of this EncryptionSetProperties.

        A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.

        :param previous_keys: The previous_keys of this EncryptionSetProperties.
        :type previous_keys: List[KeyVaultAndKeyReference]
        """

        self._previous_keys = previous_keys

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this EncryptionSetProperties.

        The disk encryption set provisioning state.

        :return: The provisioning_state of this EncryptionSetProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this EncryptionSetProperties.

        The disk encryption set provisioning state.

        :param provisioning_state: The provisioning_state of this EncryptionSetProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
