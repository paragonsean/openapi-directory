# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_and_key_reference import KeyVaultAndKeyReference
from openapi_server import util


class DiskEncryptionSetUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_key: KeyVaultAndKeyReference=None):
        """DiskEncryptionSetUpdateProperties - a model defined in OpenAPI

        :param active_key: The active_key of this DiskEncryptionSetUpdateProperties.
        """
        self.openapi_types = {
            'active_key': KeyVaultAndKeyReference
        }

        self.attribute_map = {
            'active_key': 'activeKey'
        }

        self._active_key = active_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskEncryptionSetUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskEncryptionSetUpdateProperties of this DiskEncryptionSetUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_key(self):
        """Gets the active_key of this DiskEncryptionSetUpdateProperties.


        :return: The active_key of this DiskEncryptionSetUpdateProperties.
        :rtype: KeyVaultAndKeyReference
        """
        return self._active_key

    @active_key.setter
    def active_key(self, active_key):
        """Sets the active_key of this DiskEncryptionSetUpdateProperties.


        :param active_key: The active_key of this DiskEncryptionSetUpdateProperties.
        :type active_key: KeyVaultAndKeyReference
        """

        self._active_key = active_key
