# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption import Encryption
from openapi_server.models.encryption_settings_collection import EncryptionSettingsCollection
from openapi_server import util


class DiskUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_iops_read_write: int=None, disk_m_bps_read_write: int=None, disk_size_gb: int=None, encryption: Encryption=None, encryption_settings_collection: EncryptionSettingsCollection=None, os_type: str=None):
        """DiskUpdateProperties - a model defined in OpenAPI

        :param disk_iops_read_write: The disk_iops_read_write of this DiskUpdateProperties.
        :param disk_m_bps_read_write: The disk_m_bps_read_write of this DiskUpdateProperties.
        :param disk_size_gb: The disk_size_gb of this DiskUpdateProperties.
        :param encryption: The encryption of this DiskUpdateProperties.
        :param encryption_settings_collection: The encryption_settings_collection of this DiskUpdateProperties.
        :param os_type: The os_type of this DiskUpdateProperties.
        """
        self.openapi_types = {
            'disk_iops_read_write': int,
            'disk_m_bps_read_write': int,
            'disk_size_gb': int,
            'encryption': Encryption,
            'encryption_settings_collection': EncryptionSettingsCollection,
            'os_type': str
        }

        self.attribute_map = {
            'disk_iops_read_write': 'diskIOPSReadWrite',
            'disk_m_bps_read_write': 'diskMBpsReadWrite',
            'disk_size_gb': 'diskSizeGB',
            'encryption': 'encryption',
            'encryption_settings_collection': 'encryptionSettingsCollection',
            'os_type': 'osType'
        }

        self._disk_iops_read_write = disk_iops_read_write
        self._disk_m_bps_read_write = disk_m_bps_read_write
        self._disk_size_gb = disk_size_gb
        self._encryption = encryption
        self._encryption_settings_collection = encryption_settings_collection
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiskUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiskUpdateProperties of this DiskUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_iops_read_write(self):
        """Gets the disk_iops_read_write of this DiskUpdateProperties.

        The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.

        :return: The disk_iops_read_write of this DiskUpdateProperties.
        :rtype: int
        """
        return self._disk_iops_read_write

    @disk_iops_read_write.setter
    def disk_iops_read_write(self, disk_iops_read_write):
        """Sets the disk_iops_read_write of this DiskUpdateProperties.

        The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.

        :param disk_iops_read_write: The disk_iops_read_write of this DiskUpdateProperties.
        :type disk_iops_read_write: int
        """

        self._disk_iops_read_write = disk_iops_read_write

    @property
    def disk_m_bps_read_write(self):
        """Gets the disk_m_bps_read_write of this DiskUpdateProperties.

        The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.

        :return: The disk_m_bps_read_write of this DiskUpdateProperties.
        :rtype: int
        """
        return self._disk_m_bps_read_write

    @disk_m_bps_read_write.setter
    def disk_m_bps_read_write(self, disk_m_bps_read_write):
        """Sets the disk_m_bps_read_write of this DiskUpdateProperties.

        The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.

        :param disk_m_bps_read_write: The disk_m_bps_read_write of this DiskUpdateProperties.
        :type disk_m_bps_read_write: int
        """

        self._disk_m_bps_read_write = disk_m_bps_read_write

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this DiskUpdateProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :return: The disk_size_gb of this DiskUpdateProperties.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this DiskUpdateProperties.

        If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.

        :param disk_size_gb: The disk_size_gb of this DiskUpdateProperties.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def encryption(self):
        """Gets the encryption of this DiskUpdateProperties.


        :return: The encryption of this DiskUpdateProperties.
        :rtype: Encryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this DiskUpdateProperties.


        :param encryption: The encryption of this DiskUpdateProperties.
        :type encryption: Encryption
        """

        self._encryption = encryption

    @property
    def encryption_settings_collection(self):
        """Gets the encryption_settings_collection of this DiskUpdateProperties.


        :return: The encryption_settings_collection of this DiskUpdateProperties.
        :rtype: EncryptionSettingsCollection
        """
        return self._encryption_settings_collection

    @encryption_settings_collection.setter
    def encryption_settings_collection(self, encryption_settings_collection):
        """Sets the encryption_settings_collection of this DiskUpdateProperties.


        :param encryption_settings_collection: The encryption_settings_collection of this DiskUpdateProperties.
        :type encryption_settings_collection: EncryptionSettingsCollection
        """

        self._encryption_settings_collection = encryption_settings_collection

    @property
    def os_type(self):
        """Gets the os_type of this DiskUpdateProperties.

        the Operating System type.

        :return: The os_type of this DiskUpdateProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this DiskUpdateProperties.

        the Operating System type.

        :param os_type: The os_type of this DiskUpdateProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type
