# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Encryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_encryption_set_id: str=None, type: str=None):
        """Encryption - a model defined in OpenAPI

        :param disk_encryption_set_id: The disk_encryption_set_id of this Encryption.
        :param type: The type of this Encryption.
        """
        self.openapi_types = {
            'disk_encryption_set_id': str,
            'type': str
        }

        self.attribute_map = {
            'disk_encryption_set_id': 'diskEncryptionSetId',
            'type': 'type'
        }

        self._disk_encryption_set_id = disk_encryption_set_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Encryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Encryption of this Encryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_encryption_set_id(self):
        """Gets the disk_encryption_set_id of this Encryption.

        ResourceId of the disk encryption set to use for enabling encryption at rest.

        :return: The disk_encryption_set_id of this Encryption.
        :rtype: str
        """
        return self._disk_encryption_set_id

    @disk_encryption_set_id.setter
    def disk_encryption_set_id(self, disk_encryption_set_id):
        """Sets the disk_encryption_set_id of this Encryption.

        ResourceId of the disk encryption set to use for enabling encryption at rest.

        :param disk_encryption_set_id: The disk_encryption_set_id of this Encryption.
        :type disk_encryption_set_id: str
        """

        self._disk_encryption_set_id = disk_encryption_set_id

    @property
    def type(self):
        """Gets the type of this Encryption.

        The type of key used to encrypt the data of the disk.

        :return: The type of this Encryption.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Encryption.

        The type of key used to encrypt the data of the disk.

        :param type: The type of this Encryption.
        :type type: str
        """
        allowed_values = ["EncryptionAtRestWithPlatformKey", "EncryptionAtRestWithCustomerKey"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
