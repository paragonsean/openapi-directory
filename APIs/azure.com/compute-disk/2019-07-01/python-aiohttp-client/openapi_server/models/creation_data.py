# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_disk_reference import ImageDiskReference
from openapi_server import util


class CreationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_option: str=None, image_reference: ImageDiskReference=None, source_resource_id: str=None, source_unique_id: str=None, source_uri: str=None, storage_account_id: str=None, upload_size_bytes: int=None):
        """CreationData - a model defined in OpenAPI

        :param create_option: The create_option of this CreationData.
        :param image_reference: The image_reference of this CreationData.
        :param source_resource_id: The source_resource_id of this CreationData.
        :param source_unique_id: The source_unique_id of this CreationData.
        :param source_uri: The source_uri of this CreationData.
        :param storage_account_id: The storage_account_id of this CreationData.
        :param upload_size_bytes: The upload_size_bytes of this CreationData.
        """
        self.openapi_types = {
            'create_option': str,
            'image_reference': ImageDiskReference,
            'source_resource_id': str,
            'source_unique_id': str,
            'source_uri': str,
            'storage_account_id': str,
            'upload_size_bytes': int
        }

        self.attribute_map = {
            'create_option': 'createOption',
            'image_reference': 'imageReference',
            'source_resource_id': 'sourceResourceId',
            'source_unique_id': 'sourceUniqueId',
            'source_uri': 'sourceUri',
            'storage_account_id': 'storageAccountId',
            'upload_size_bytes': 'uploadSizeBytes'
        }

        self._create_option = create_option
        self._image_reference = image_reference
        self._source_resource_id = source_resource_id
        self._source_unique_id = source_unique_id
        self._source_uri = source_uri
        self._storage_account_id = storage_account_id
        self._upload_size_bytes = upload_size_bytes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreationData of this CreationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_option(self):
        """Gets the create_option of this CreationData.

        This enumerates the possible sources of a disk's creation.

        :return: The create_option of this CreationData.
        :rtype: str
        """
        return self._create_option

    @create_option.setter
    def create_option(self, create_option):
        """Sets the create_option of this CreationData.

        This enumerates the possible sources of a disk's creation.

        :param create_option: The create_option of this CreationData.
        :type create_option: str
        """
        allowed_values = ["Empty", "Attach", "FromImage", "Import", "Copy", "Restore", "Upload"]  # noqa: E501
        if create_option not in allowed_values:
            raise ValueError(
                "Invalid value for `create_option` ({0}), must be one of {1}"
                .format(create_option, allowed_values)
            )

        self._create_option = create_option

    @property
    def image_reference(self):
        """Gets the image_reference of this CreationData.


        :return: The image_reference of this CreationData.
        :rtype: ImageDiskReference
        """
        return self._image_reference

    @image_reference.setter
    def image_reference(self, image_reference):
        """Sets the image_reference of this CreationData.


        :param image_reference: The image_reference of this CreationData.
        :type image_reference: ImageDiskReference
        """

        self._image_reference = image_reference

    @property
    def source_resource_id(self):
        """Gets the source_resource_id of this CreationData.

        If createOption is Copy, this is the ARM id of the source snapshot or disk.

        :return: The source_resource_id of this CreationData.
        :rtype: str
        """
        return self._source_resource_id

    @source_resource_id.setter
    def source_resource_id(self, source_resource_id):
        """Sets the source_resource_id of this CreationData.

        If createOption is Copy, this is the ARM id of the source snapshot or disk.

        :param source_resource_id: The source_resource_id of this CreationData.
        :type source_resource_id: str
        """

        self._source_resource_id = source_resource_id

    @property
    def source_unique_id(self):
        """Gets the source_unique_id of this CreationData.

        If this field is set, this is the unique id identifying the source of this resource.

        :return: The source_unique_id of this CreationData.
        :rtype: str
        """
        return self._source_unique_id

    @source_unique_id.setter
    def source_unique_id(self, source_unique_id):
        """Sets the source_unique_id of this CreationData.

        If this field is set, this is the unique id identifying the source of this resource.

        :param source_unique_id: The source_unique_id of this CreationData.
        :type source_unique_id: str
        """

        self._source_unique_id = source_unique_id

    @property
    def source_uri(self):
        """Gets the source_uri of this CreationData.

        If createOption is Import, this is the URI of a blob to be imported into a managed disk.

        :return: The source_uri of this CreationData.
        :rtype: str
        """
        return self._source_uri

    @source_uri.setter
    def source_uri(self, source_uri):
        """Sets the source_uri of this CreationData.

        If createOption is Import, this is the URI of a blob to be imported into a managed disk.

        :param source_uri: The source_uri of this CreationData.
        :type source_uri: str
        """

        self._source_uri = source_uri

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this CreationData.

        Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.

        :return: The storage_account_id of this CreationData.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this CreationData.

        Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.

        :param storage_account_id: The storage_account_id of this CreationData.
        :type storage_account_id: str
        """

        self._storage_account_id = storage_account_id

    @property
    def upload_size_bytes(self):
        """Gets the upload_size_bytes of this CreationData.

        If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).

        :return: The upload_size_bytes of this CreationData.
        :rtype: int
        """
        return self._upload_size_bytes

    @upload_size_bytes.setter
    def upload_size_bytes(self, upload_size_bytes):
        """Sets the upload_size_bytes of this CreationData.

        If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).

        :param upload_size_bytes: The upload_size_bytes of this CreationData.
        :type upload_size_bytes: int
        """

        self._upload_size_bytes = upload_size_bytes
