/*
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageDiskReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data used when creating a disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:15.029957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreationData {
  /**
   * This enumerates the possible sources of a disk&#39;s creation.
   */
  @JsonAdapter(CreateOptionEnum.Adapter.class)
  public enum CreateOptionEnum {
    EMPTY("Empty"),
    
    ATTACH("Attach"),
    
    FROM_IMAGE("FromImage"),
    
    IMPORT("Import"),
    
    COPY("Copy"),
    
    RESTORE("Restore"),
    
    UPLOAD("Upload");

    private String value;

    CreateOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreateOptionEnum fromValue(String value) {
      for (CreateOptionEnum b : CreateOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreateOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreateOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreateOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreateOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreateOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATE_OPTION = "createOption";
  @SerializedName(SERIALIZED_NAME_CREATE_OPTION)
  private CreateOptionEnum createOption;

  public static final String SERIALIZED_NAME_IMAGE_REFERENCE = "imageReference";
  @SerializedName(SERIALIZED_NAME_IMAGE_REFERENCE)
  private ImageDiskReference imageReference;

  public static final String SERIALIZED_NAME_SOURCE_RESOURCE_ID = "sourceResourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_RESOURCE_ID)
  private String sourceResourceId;

  public static final String SERIALIZED_NAME_SOURCE_UNIQUE_ID = "sourceUniqueId";
  @SerializedName(SERIALIZED_NAME_SOURCE_UNIQUE_ID)
  private String sourceUniqueId;

  public static final String SERIALIZED_NAME_SOURCE_URI = "sourceUri";
  @SerializedName(SERIALIZED_NAME_SOURCE_URI)
  private String sourceUri;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_ID = "storageAccountId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_ID)
  private String storageAccountId;

  public static final String SERIALIZED_NAME_UPLOAD_SIZE_BYTES = "uploadSizeBytes";
  @SerializedName(SERIALIZED_NAME_UPLOAD_SIZE_BYTES)
  private Long uploadSizeBytes;

  public CreationData() {
  }

  public CreationData(
     String sourceUniqueId
  ) {
    this();
    this.sourceUniqueId = sourceUniqueId;
  }

  public CreationData createOption(CreateOptionEnum createOption) {
    this.createOption = createOption;
    return this;
  }

  /**
   * This enumerates the possible sources of a disk&#39;s creation.
   * @return createOption
   */
  @javax.annotation.Nonnull
  public CreateOptionEnum getCreateOption() {
    return createOption;
  }

  public void setCreateOption(CreateOptionEnum createOption) {
    this.createOption = createOption;
  }


  public CreationData imageReference(ImageDiskReference imageReference) {
    this.imageReference = imageReference;
    return this;
  }

  /**
   * Get imageReference
   * @return imageReference
   */
  @javax.annotation.Nullable
  public ImageDiskReference getImageReference() {
    return imageReference;
  }

  public void setImageReference(ImageDiskReference imageReference) {
    this.imageReference = imageReference;
  }


  public CreationData sourceResourceId(String sourceResourceId) {
    this.sourceResourceId = sourceResourceId;
    return this;
  }

  /**
   * If createOption is Copy, this is the ARM id of the source snapshot or disk.
   * @return sourceResourceId
   */
  @javax.annotation.Nullable
  public String getSourceResourceId() {
    return sourceResourceId;
  }

  public void setSourceResourceId(String sourceResourceId) {
    this.sourceResourceId = sourceResourceId;
  }


  /**
   * If this field is set, this is the unique id identifying the source of this resource.
   * @return sourceUniqueId
   */
  @javax.annotation.Nullable
  public String getSourceUniqueId() {
    return sourceUniqueId;
  }



  public CreationData sourceUri(String sourceUri) {
    this.sourceUri = sourceUri;
    return this;
  }

  /**
   * If createOption is Import, this is the URI of a blob to be imported into a managed disk.
   * @return sourceUri
   */
  @javax.annotation.Nullable
  public String getSourceUri() {
    return sourceUri;
  }

  public void setSourceUri(String sourceUri) {
    this.sourceUri = sourceUri;
  }


  public CreationData storageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
    return this;
  }

  /**
   * Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to import as a disk.
   * @return storageAccountId
   */
  @javax.annotation.Nullable
  public String getStorageAccountId() {
    return storageAccountId;
  }

  public void setStorageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
  }


  public CreationData uploadSizeBytes(Long uploadSizeBytes) {
    this.uploadSizeBytes = uploadSizeBytes;
    return this;
  }

  /**
   * If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520 bytes (32 TiB + 512 bytes for the VHD footer).
   * @return uploadSizeBytes
   */
  @javax.annotation.Nullable
  public Long getUploadSizeBytes() {
    return uploadSizeBytes;
  }

  public void setUploadSizeBytes(Long uploadSizeBytes) {
    this.uploadSizeBytes = uploadSizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreationData creationData = (CreationData) o;
    return Objects.equals(this.createOption, creationData.createOption) &&
        Objects.equals(this.imageReference, creationData.imageReference) &&
        Objects.equals(this.sourceResourceId, creationData.sourceResourceId) &&
        Objects.equals(this.sourceUniqueId, creationData.sourceUniqueId) &&
        Objects.equals(this.sourceUri, creationData.sourceUri) &&
        Objects.equals(this.storageAccountId, creationData.storageAccountId) &&
        Objects.equals(this.uploadSizeBytes, creationData.uploadSizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createOption, imageReference, sourceResourceId, sourceUniqueId, sourceUri, storageAccountId, uploadSizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreationData {\n");
    sb.append("    createOption: ").append(toIndentedString(createOption)).append("\n");
    sb.append("    imageReference: ").append(toIndentedString(imageReference)).append("\n");
    sb.append("    sourceResourceId: ").append(toIndentedString(sourceResourceId)).append("\n");
    sb.append("    sourceUniqueId: ").append(toIndentedString(sourceUniqueId)).append("\n");
    sb.append("    sourceUri: ").append(toIndentedString(sourceUri)).append("\n");
    sb.append("    storageAccountId: ").append(toIndentedString(storageAccountId)).append("\n");
    sb.append("    uploadSizeBytes: ").append(toIndentedString(uploadSizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createOption");
    openapiFields.add("imageReference");
    openapiFields.add("sourceResourceId");
    openapiFields.add("sourceUniqueId");
    openapiFields.add("sourceUri");
    openapiFields.add("storageAccountId");
    openapiFields.add("uploadSizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createOption");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreationData is not found in the empty JSON string", CreationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreationData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("createOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createOption").toString()));
      }
      // validate the required field `createOption`
      CreateOptionEnum.validateJsonElement(jsonObj.get("createOption"));
      // validate the optional field `imageReference`
      if (jsonObj.get("imageReference") != null && !jsonObj.get("imageReference").isJsonNull()) {
        ImageDiskReference.validateJsonElement(jsonObj.get("imageReference"));
      }
      if ((jsonObj.get("sourceResourceId") != null && !jsonObj.get("sourceResourceId").isJsonNull()) && !jsonObj.get("sourceResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceResourceId").toString()));
      }
      if ((jsonObj.get("sourceUniqueId") != null && !jsonObj.get("sourceUniqueId").isJsonNull()) && !jsonObj.get("sourceUniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUniqueId").toString()));
      }
      if ((jsonObj.get("sourceUri") != null && !jsonObj.get("sourceUri").isJsonNull()) && !jsonObj.get("sourceUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUri").toString()));
      }
      if ((jsonObj.get("storageAccountId") != null && !jsonObj.get("storageAccountId").isJsonNull()) && !jsonObj.get("storageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreationData.class));

       return (TypeAdapter<T>) new TypeAdapter<CreationData>() {
           @Override
           public void write(JsonWriter out, CreationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreationData
   * @throws IOException if the JSON string is invalid with respect to CreationData
   */
  public static CreationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreationData.class);
  }

  /**
   * Convert an instance of CreationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

