/*
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EncryptionSettingsElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Encryption settings for disk or snapshot
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:15.029957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EncryptionSettingsCollection {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS = "encryptionSettings";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS)
  private List<EncryptionSettingsElement> encryptionSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS_VERSION = "encryptionSettingsVersion";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS_VERSION)
  private String encryptionSettingsVersion;

  public EncryptionSettingsCollection() {
  }

  public EncryptionSettingsCollection enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public EncryptionSettingsCollection encryptionSettings(List<EncryptionSettingsElement> encryptionSettings) {
    this.encryptionSettings = encryptionSettings;
    return this;
  }

  public EncryptionSettingsCollection addEncryptionSettingsItem(EncryptionSettingsElement encryptionSettingsItem) {
    if (this.encryptionSettings == null) {
      this.encryptionSettings = new ArrayList<>();
    }
    this.encryptionSettings.add(encryptionSettingsItem);
    return this;
  }

  /**
   * A collection of encryption settings, one for each disk volume.
   * @return encryptionSettings
   */
  @javax.annotation.Nullable
  public List<EncryptionSettingsElement> getEncryptionSettings() {
    return encryptionSettings;
  }

  public void setEncryptionSettings(List<EncryptionSettingsElement> encryptionSettings) {
    this.encryptionSettings = encryptionSettings;
  }


  public EncryptionSettingsCollection encryptionSettingsVersion(String encryptionSettingsVersion) {
    this.encryptionSettingsVersion = encryptionSettingsVersion;
    return this;
  }

  /**
   * Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. &#39;1.0&#39; corresponds to Azure Disk Encryption with AAD app.&#39;1.1&#39; corresponds to Azure Disk Encryption.
   * @return encryptionSettingsVersion
   */
  @javax.annotation.Nullable
  public String getEncryptionSettingsVersion() {
    return encryptionSettingsVersion;
  }

  public void setEncryptionSettingsVersion(String encryptionSettingsVersion) {
    this.encryptionSettingsVersion = encryptionSettingsVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncryptionSettingsCollection encryptionSettingsCollection = (EncryptionSettingsCollection) o;
    return Objects.equals(this.enabled, encryptionSettingsCollection.enabled) &&
        Objects.equals(this.encryptionSettings, encryptionSettingsCollection.encryptionSettings) &&
        Objects.equals(this.encryptionSettingsVersion, encryptionSettingsCollection.encryptionSettingsVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, encryptionSettings, encryptionSettingsVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncryptionSettingsCollection {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    encryptionSettings: ").append(toIndentedString(encryptionSettings)).append("\n");
    sb.append("    encryptionSettingsVersion: ").append(toIndentedString(encryptionSettingsVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("encryptionSettings");
    openapiFields.add("encryptionSettingsVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EncryptionSettingsCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EncryptionSettingsCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EncryptionSettingsCollection is not found in the empty JSON string", EncryptionSettingsCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EncryptionSettingsCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EncryptionSettingsCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EncryptionSettingsCollection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("encryptionSettings") != null && !jsonObj.get("encryptionSettings").isJsonNull()) {
        JsonArray jsonArrayencryptionSettings = jsonObj.getAsJsonArray("encryptionSettings");
        if (jsonArrayencryptionSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("encryptionSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `encryptionSettings` to be an array in the JSON string but got `%s`", jsonObj.get("encryptionSettings").toString()));
          }

          // validate the optional field `encryptionSettings` (array)
          for (int i = 0; i < jsonArrayencryptionSettings.size(); i++) {
            EncryptionSettingsElement.validateJsonElement(jsonArrayencryptionSettings.get(i));
          };
        }
      }
      if ((jsonObj.get("encryptionSettingsVersion") != null && !jsonObj.get("encryptionSettingsVersion").isJsonNull()) && !jsonObj.get("encryptionSettingsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionSettingsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionSettingsVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EncryptionSettingsCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EncryptionSettingsCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EncryptionSettingsCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EncryptionSettingsCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<EncryptionSettingsCollection>() {
           @Override
           public void write(JsonWriter out, EncryptionSettingsCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EncryptionSettingsCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EncryptionSettingsCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EncryptionSettingsCollection
   * @throws IOException if the JSON string is invalid with respect to EncryptionSettingsCollection
   */
  public static EncryptionSettingsCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EncryptionSettingsCollection.class);
  }

  /**
   * Convert an instance of EncryptionSettingsCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

