/*
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Encryption;
import org.openapitools.client.model.EncryptionSettingsCollection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Snapshot resource update properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:15.029957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnapshotUpdateProperties {
  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Encryption encryption;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS_COLLECTION = "encryptionSettingsCollection";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS_COLLECTION)
  private EncryptionSettingsCollection encryptionSettingsCollection;

  /**
   * the Operating System type.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public SnapshotUpdateProperties() {
  }

  public SnapshotUpdateProperties diskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  public SnapshotUpdateProperties encryption(Encryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public Encryption getEncryption() {
    return encryption;
  }

  public void setEncryption(Encryption encryption) {
    this.encryption = encryption;
  }


  public SnapshotUpdateProperties encryptionSettingsCollection(EncryptionSettingsCollection encryptionSettingsCollection) {
    this.encryptionSettingsCollection = encryptionSettingsCollection;
    return this;
  }

  /**
   * Get encryptionSettingsCollection
   * @return encryptionSettingsCollection
   */
  @javax.annotation.Nullable
  public EncryptionSettingsCollection getEncryptionSettingsCollection() {
    return encryptionSettingsCollection;
  }

  public void setEncryptionSettingsCollection(EncryptionSettingsCollection encryptionSettingsCollection) {
    this.encryptionSettingsCollection = encryptionSettingsCollection;
  }


  public SnapshotUpdateProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * the Operating System type.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotUpdateProperties snapshotUpdateProperties = (SnapshotUpdateProperties) o;
    return Objects.equals(this.diskSizeGB, snapshotUpdateProperties.diskSizeGB) &&
        Objects.equals(this.encryption, snapshotUpdateProperties.encryption) &&
        Objects.equals(this.encryptionSettingsCollection, snapshotUpdateProperties.encryptionSettingsCollection) &&
        Objects.equals(this.osType, snapshotUpdateProperties.osType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskSizeGB, encryption, encryptionSettingsCollection, osType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotUpdateProperties {\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    encryptionSettingsCollection: ").append(toIndentedString(encryptionSettingsCollection)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("diskSizeGB");
    openapiFields.add("encryption");
    openapiFields.add("encryptionSettingsCollection");
    openapiFields.add("osType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnapshotUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnapshotUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnapshotUpdateProperties is not found in the empty JSON string", SnapshotUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnapshotUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnapshotUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        Encryption.validateJsonElement(jsonObj.get("encryption"));
      }
      // validate the optional field `encryptionSettingsCollection`
      if (jsonObj.get("encryptionSettingsCollection") != null && !jsonObj.get("encryptionSettingsCollection").isJsonNull()) {
        EncryptionSettingsCollection.validateJsonElement(jsonObj.get("encryptionSettingsCollection"));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnapshotUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnapshotUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnapshotUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnapshotUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SnapshotUpdateProperties>() {
           @Override
           public void write(JsonWriter out, SnapshotUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnapshotUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnapshotUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnapshotUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to SnapshotUpdateProperties
   */
  public static SnapshotUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnapshotUpdateProperties.class);
  }

  /**
   * Convert an instance of SnapshotUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

