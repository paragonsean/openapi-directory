/*
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreationData;
import org.openapitools.client.model.Encryption;
import org.openapitools.client.model.EncryptionSettingsCollection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Disk resource properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:15.029957-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiskProperties {
  public static final String SERIALIZED_NAME_CREATION_DATA = "creationData";
  @SerializedName(SERIALIZED_NAME_CREATION_DATA)
  private CreationData creationData;

  public static final String SERIALIZED_NAME_DISK_I_O_P_S_READ_WRITE = "diskIOPSReadWrite";
  @SerializedName(SERIALIZED_NAME_DISK_I_O_P_S_READ_WRITE)
  private Long diskIOPSReadWrite;

  public static final String SERIALIZED_NAME_DISK_M_BPS_READ_WRITE = "diskMBpsReadWrite";
  @SerializedName(SERIALIZED_NAME_DISK_M_BPS_READ_WRITE)
  private Integer diskMBpsReadWrite;

  public static final String SERIALIZED_NAME_DISK_SIZE_BYTES = "diskSizeBytes";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_BYTES)
  private Long diskSizeBytes;

  public static final String SERIALIZED_NAME_DISK_SIZE_G_B = "diskSizeGB";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_G_B)
  private Integer diskSizeGB;

  /**
   * The state of the disk.
   */
  @JsonAdapter(DiskStateEnum.Adapter.class)
  public enum DiskStateEnum {
    UNATTACHED("Unattached"),
    
    ATTACHED("Attached"),
    
    RESERVED("Reserved"),
    
    ACTIVE_SAS("ActiveSAS"),
    
    READY_TO_UPLOAD("ReadyToUpload"),
    
    ACTIVE_UPLOAD("ActiveUpload");

    private String value;

    DiskStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiskStateEnum fromValue(String value) {
      for (DiskStateEnum b : DiskStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiskStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiskStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiskStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiskStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiskStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISK_STATE = "diskState";
  @SerializedName(SERIALIZED_NAME_DISK_STATE)
  private DiskStateEnum diskState;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Encryption encryption;

  public static final String SERIALIZED_NAME_ENCRYPTION_SETTINGS_COLLECTION = "encryptionSettingsCollection";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_SETTINGS_COLLECTION)
  private EncryptionSettingsCollection encryptionSettingsCollection;

  /**
   * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
   */
  @JsonAdapter(HyperVGenerationEnum.Adapter.class)
  public enum HyperVGenerationEnum {
    V1("V1"),
    
    V2("V2");

    private String value;

    HyperVGenerationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HyperVGenerationEnum fromValue(String value) {
      for (HyperVGenerationEnum b : HyperVGenerationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HyperVGenerationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HyperVGenerationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HyperVGenerationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HyperVGenerationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HyperVGenerationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HYPER_V_GENERATION = "hyperVGeneration";
  @SerializedName(SERIALIZED_NAME_HYPER_V_GENERATION)
  private HyperVGenerationEnum hyperVGeneration;

  /**
   * The Operating System type.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_TIME_CREATED = "timeCreated";
  @SerializedName(SERIALIZED_NAME_TIME_CREATED)
  private OffsetDateTime timeCreated;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public DiskProperties() {
  }

  public DiskProperties(
     Long diskSizeBytes, 
     DiskStateEnum diskState, 
     String provisioningState, 
     OffsetDateTime timeCreated, 
     String uniqueId
  ) {
    this();
    this.diskSizeBytes = diskSizeBytes;
    this.diskState = diskState;
    this.provisioningState = provisioningState;
    this.timeCreated = timeCreated;
    this.uniqueId = uniqueId;
  }

  public DiskProperties creationData(CreationData creationData) {
    this.creationData = creationData;
    return this;
  }

  /**
   * Get creationData
   * @return creationData
   */
  @javax.annotation.Nonnull
  public CreationData getCreationData() {
    return creationData;
  }

  public void setCreationData(CreationData creationData) {
    this.creationData = creationData;
  }


  public DiskProperties diskIOPSReadWrite(Long diskIOPSReadWrite) {
    this.diskIOPSReadWrite = diskIOPSReadWrite;
    return this;
  }

  /**
   * The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes.
   * @return diskIOPSReadWrite
   */
  @javax.annotation.Nullable
  public Long getDiskIOPSReadWrite() {
    return diskIOPSReadWrite;
  }

  public void setDiskIOPSReadWrite(Long diskIOPSReadWrite) {
    this.diskIOPSReadWrite = diskIOPSReadWrite;
  }


  public DiskProperties diskMBpsReadWrite(Integer diskMBpsReadWrite) {
    this.diskMBpsReadWrite = diskMBpsReadWrite;
    return this;
  }

  /**
   * The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10.
   * @return diskMBpsReadWrite
   */
  @javax.annotation.Nullable
  public Integer getDiskMBpsReadWrite() {
    return diskMBpsReadWrite;
  }

  public void setDiskMBpsReadWrite(Integer diskMBpsReadWrite) {
    this.diskMBpsReadWrite = diskMBpsReadWrite;
  }


  /**
   * The size of the disk in bytes. This field is read only.
   * @return diskSizeBytes
   */
  @javax.annotation.Nullable
  public Long getDiskSizeBytes() {
    return diskSizeBytes;
  }



  public DiskProperties diskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
    return this;
  }

  /**
   * If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this field is present for updates or creation with other options, it indicates a resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk&#39;s size.
   * @return diskSizeGB
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeGB() {
    return diskSizeGB;
  }

  public void setDiskSizeGB(Integer diskSizeGB) {
    this.diskSizeGB = diskSizeGB;
  }


  /**
   * The state of the disk.
   * @return diskState
   */
  @javax.annotation.Nullable
  public DiskStateEnum getDiskState() {
    return diskState;
  }



  public DiskProperties encryption(Encryption encryption) {
    this.encryption = encryption;
    return this;
  }

  /**
   * Get encryption
   * @return encryption
   */
  @javax.annotation.Nullable
  public Encryption getEncryption() {
    return encryption;
  }

  public void setEncryption(Encryption encryption) {
    this.encryption = encryption;
  }


  public DiskProperties encryptionSettingsCollection(EncryptionSettingsCollection encryptionSettingsCollection) {
    this.encryptionSettingsCollection = encryptionSettingsCollection;
    return this;
  }

  /**
   * Get encryptionSettingsCollection
   * @return encryptionSettingsCollection
   */
  @javax.annotation.Nullable
  public EncryptionSettingsCollection getEncryptionSettingsCollection() {
    return encryptionSettingsCollection;
  }

  public void setEncryptionSettingsCollection(EncryptionSettingsCollection encryptionSettingsCollection) {
    this.encryptionSettingsCollection = encryptionSettingsCollection;
  }


  public DiskProperties hyperVGeneration(HyperVGenerationEnum hyperVGeneration) {
    this.hyperVGeneration = hyperVGeneration;
    return this;
  }

  /**
   * The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
   * @return hyperVGeneration
   */
  @javax.annotation.Nullable
  public HyperVGenerationEnum getHyperVGeneration() {
    return hyperVGeneration;
  }

  public void setHyperVGeneration(HyperVGenerationEnum hyperVGeneration) {
    this.hyperVGeneration = hyperVGeneration;
  }


  public DiskProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The Operating System type.
   * @return osType
   */
  @javax.annotation.Nullable
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  /**
   * The disk provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The time when the disk was created.
   * @return timeCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimeCreated() {
    return timeCreated;
  }



  /**
   * Unique Guid identifying the resource.
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiskProperties diskProperties = (DiskProperties) o;
    return Objects.equals(this.creationData, diskProperties.creationData) &&
        Objects.equals(this.diskIOPSReadWrite, diskProperties.diskIOPSReadWrite) &&
        Objects.equals(this.diskMBpsReadWrite, diskProperties.diskMBpsReadWrite) &&
        Objects.equals(this.diskSizeBytes, diskProperties.diskSizeBytes) &&
        Objects.equals(this.diskSizeGB, diskProperties.diskSizeGB) &&
        Objects.equals(this.diskState, diskProperties.diskState) &&
        Objects.equals(this.encryption, diskProperties.encryption) &&
        Objects.equals(this.encryptionSettingsCollection, diskProperties.encryptionSettingsCollection) &&
        Objects.equals(this.hyperVGeneration, diskProperties.hyperVGeneration) &&
        Objects.equals(this.osType, diskProperties.osType) &&
        Objects.equals(this.provisioningState, diskProperties.provisioningState) &&
        Objects.equals(this.timeCreated, diskProperties.timeCreated) &&
        Objects.equals(this.uniqueId, diskProperties.uniqueId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationData, diskIOPSReadWrite, diskMBpsReadWrite, diskSizeBytes, diskSizeGB, diskState, encryption, encryptionSettingsCollection, hyperVGeneration, osType, provisioningState, timeCreated, uniqueId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiskProperties {\n");
    sb.append("    creationData: ").append(toIndentedString(creationData)).append("\n");
    sb.append("    diskIOPSReadWrite: ").append(toIndentedString(diskIOPSReadWrite)).append("\n");
    sb.append("    diskMBpsReadWrite: ").append(toIndentedString(diskMBpsReadWrite)).append("\n");
    sb.append("    diskSizeBytes: ").append(toIndentedString(diskSizeBytes)).append("\n");
    sb.append("    diskSizeGB: ").append(toIndentedString(diskSizeGB)).append("\n");
    sb.append("    diskState: ").append(toIndentedString(diskState)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    encryptionSettingsCollection: ").append(toIndentedString(encryptionSettingsCollection)).append("\n");
    sb.append("    hyperVGeneration: ").append(toIndentedString(hyperVGeneration)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    timeCreated: ").append(toIndentedString(timeCreated)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationData");
    openapiFields.add("diskIOPSReadWrite");
    openapiFields.add("diskMBpsReadWrite");
    openapiFields.add("diskSizeBytes");
    openapiFields.add("diskSizeGB");
    openapiFields.add("diskState");
    openapiFields.add("encryption");
    openapiFields.add("encryptionSettingsCollection");
    openapiFields.add("hyperVGeneration");
    openapiFields.add("osType");
    openapiFields.add("provisioningState");
    openapiFields.add("timeCreated");
    openapiFields.add("uniqueId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creationData");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiskProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiskProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiskProperties is not found in the empty JSON string", DiskProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiskProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiskProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiskProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `creationData`
      CreationData.validateJsonElement(jsonObj.get("creationData"));
      if ((jsonObj.get("diskState") != null && !jsonObj.get("diskState").isJsonNull()) && !jsonObj.get("diskState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diskState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diskState").toString()));
      }
      // validate the optional field `diskState`
      if (jsonObj.get("diskState") != null && !jsonObj.get("diskState").isJsonNull()) {
        DiskStateEnum.validateJsonElement(jsonObj.get("diskState"));
      }
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        Encryption.validateJsonElement(jsonObj.get("encryption"));
      }
      // validate the optional field `encryptionSettingsCollection`
      if (jsonObj.get("encryptionSettingsCollection") != null && !jsonObj.get("encryptionSettingsCollection").isJsonNull()) {
        EncryptionSettingsCollection.validateJsonElement(jsonObj.get("encryptionSettingsCollection"));
      }
      if ((jsonObj.get("hyperVGeneration") != null && !jsonObj.get("hyperVGeneration").isJsonNull()) && !jsonObj.get("hyperVGeneration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hyperVGeneration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hyperVGeneration").toString()));
      }
      // validate the optional field `hyperVGeneration`
      if (jsonObj.get("hyperVGeneration") != null && !jsonObj.get("hyperVGeneration").isJsonNull()) {
        HyperVGenerationEnum.validateJsonElement(jsonObj.get("hyperVGeneration"));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the optional field `osType`
      if (jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) {
        OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiskProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiskProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiskProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiskProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DiskProperties>() {
           @Override
           public void write(JsonWriter out, DiskProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiskProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiskProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiskProperties
   * @throws IOException if the JSON string is invalid with respect to DiskProperties
   */
  public static DiskProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiskProperties.class);
  }

  /**
   * Convert an instance of DiskProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

