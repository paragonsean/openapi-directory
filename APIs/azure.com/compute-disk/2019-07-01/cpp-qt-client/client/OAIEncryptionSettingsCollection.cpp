/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionSettingsCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionSettingsCollection::OAIEncryptionSettingsCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionSettingsCollection::OAIEncryptionSettingsCollection() {
    this->initializeModel();
}

OAIEncryptionSettingsCollection::~OAIEncryptionSettingsCollection() {}

void OAIEncryptionSettingsCollection::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_encryption_settings_isSet = false;
    m_encryption_settings_isValid = false;

    m_encryption_settings_version_isSet = false;
    m_encryption_settings_version_isValid = false;
}

void OAIEncryptionSettingsCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionSettingsCollection::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_encryption_settings_isValid = ::OpenAPI::fromJsonValue(m_encryption_settings, json[QString("encryptionSettings")]);
    m_encryption_settings_isSet = !json[QString("encryptionSettings")].isNull() && m_encryption_settings_isValid;

    m_encryption_settings_version_isValid = ::OpenAPI::fromJsonValue(m_encryption_settings_version, json[QString("encryptionSettingsVersion")]);
    m_encryption_settings_version_isSet = !json[QString("encryptionSettingsVersion")].isNull() && m_encryption_settings_version_isValid;
}

QString OAIEncryptionSettingsCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionSettingsCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_encryption_settings.size() > 0) {
        obj.insert(QString("encryptionSettings"), ::OpenAPI::toJsonValue(m_encryption_settings));
    }
    if (m_encryption_settings_version_isSet) {
        obj.insert(QString("encryptionSettingsVersion"), ::OpenAPI::toJsonValue(m_encryption_settings_version));
    }
    return obj;
}

bool OAIEncryptionSettingsCollection::isEnabled() const {
    return m_enabled;
}
void OAIEncryptionSettingsCollection::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIEncryptionSettingsCollection::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIEncryptionSettingsCollection::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<OAIEncryptionSettingsElement> OAIEncryptionSettingsCollection::getEncryptionSettings() const {
    return m_encryption_settings;
}
void OAIEncryptionSettingsCollection::setEncryptionSettings(const QList<OAIEncryptionSettingsElement> &encryption_settings) {
    m_encryption_settings = encryption_settings;
    m_encryption_settings_isSet = true;
}

bool OAIEncryptionSettingsCollection::is_encryption_settings_Set() const{
    return m_encryption_settings_isSet;
}

bool OAIEncryptionSettingsCollection::is_encryption_settings_Valid() const{
    return m_encryption_settings_isValid;
}

QString OAIEncryptionSettingsCollection::getEncryptionSettingsVersion() const {
    return m_encryption_settings_version;
}
void OAIEncryptionSettingsCollection::setEncryptionSettingsVersion(const QString &encryption_settings_version) {
    m_encryption_settings_version = encryption_settings_version;
    m_encryption_settings_version_isSet = true;
}

bool OAIEncryptionSettingsCollection::is_encryption_settings_version_Set() const{
    return m_encryption_settings_version_isSet;
}

bool OAIEncryptionSettingsCollection::is_encryption_settings_version_Valid() const{
    return m_encryption_settings_version_isValid;
}

bool OAIEncryptionSettingsCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_settings_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionSettingsCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enabled_isValid && true;
}

} // namespace OpenAPI
