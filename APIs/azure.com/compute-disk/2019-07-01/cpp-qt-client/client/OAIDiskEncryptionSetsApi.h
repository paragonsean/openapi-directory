/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDiskEncryptionSetsApi_H
#define OAI_OAIDiskEncryptionSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIDiskEncryptionSet.h"
#include "OAIDiskEncryptionSetList.h"
#include "OAIDiskEncryptionSetUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDiskEncryptionSetsApi : public QObject {
    Q_OBJECT

public:
    OAIDiskEncryptionSetsApi(const int timeOut = 0);
    ~OAIDiskEncryptionSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_encryption_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  disk_encryption_set OAIDiskEncryptionSet [required]
    */
    virtual void diskEncryptionSetsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &disk_encryption_set_name, const QString &api_version, const OAIDiskEncryptionSet &disk_encryption_set);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_encryption_set_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diskEncryptionSetsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &disk_encryption_set_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_encryption_set_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diskEncryptionSetsGet(const QString &subscription_id, const QString &resource_group_name, const QString &disk_encryption_set_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diskEncryptionSetsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void diskEncryptionSetsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  disk_encryption_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  disk_encryption_set OAIDiskEncryptionSetUpdate [required]
    */
    virtual void diskEncryptionSetsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &disk_encryption_set_name, const QString &api_version, const OAIDiskEncryptionSetUpdate &disk_encryption_set);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void diskEncryptionSetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void diskEncryptionSetsDeleteCallback(OAIHttpRequestWorker *worker);
    void diskEncryptionSetsGetCallback(OAIHttpRequestWorker *worker);
    void diskEncryptionSetsListCallback(OAIHttpRequestWorker *worker);
    void diskEncryptionSetsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void diskEncryptionSetsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void diskEncryptionSetsCreateOrUpdateSignal(OAIDiskEncryptionSet summary);
    void diskEncryptionSetsDeleteSignal();
    void diskEncryptionSetsGetSignal(OAIDiskEncryptionSet summary);
    void diskEncryptionSetsListSignal(OAIDiskEncryptionSetList summary);
    void diskEncryptionSetsListByResourceGroupSignal(OAIDiskEncryptionSetList summary);
    void diskEncryptionSetsUpdateSignal(OAIDiskEncryptionSet summary);


    void diskEncryptionSetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDiskEncryptionSet summary);
    void diskEncryptionSetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void diskEncryptionSetsGetSignalFull(OAIHttpRequestWorker *worker, OAIDiskEncryptionSet summary);
    void diskEncryptionSetsListSignalFull(OAIHttpRequestWorker *worker, OAIDiskEncryptionSetList summary);
    void diskEncryptionSetsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDiskEncryptionSetList summary);
    void diskEncryptionSetsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDiskEncryptionSet summary);

    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsCreateOrUpdateSignalError() instead")
    void diskEncryptionSetsCreateOrUpdateSignalE(OAIDiskEncryptionSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsCreateOrUpdateSignalError(OAIDiskEncryptionSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsDeleteSignalError() instead")
    void diskEncryptionSetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsGetSignalError() instead")
    void diskEncryptionSetsGetSignalE(OAIDiskEncryptionSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsGetSignalError(OAIDiskEncryptionSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsListSignalError() instead")
    void diskEncryptionSetsListSignalE(OAIDiskEncryptionSetList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsListSignalError(OAIDiskEncryptionSetList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsListByResourceGroupSignalError() instead")
    void diskEncryptionSetsListByResourceGroupSignalE(OAIDiskEncryptionSetList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsListByResourceGroupSignalError(OAIDiskEncryptionSetList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsUpdateSignalError() instead")
    void diskEncryptionSetsUpdateSignalE(OAIDiskEncryptionSet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsUpdateSignalError(OAIDiskEncryptionSet summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsCreateOrUpdateSignalErrorFull() instead")
    void diskEncryptionSetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsDeleteSignalErrorFull() instead")
    void diskEncryptionSetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsGetSignalErrorFull() instead")
    void diskEncryptionSetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsListSignalErrorFull() instead")
    void diskEncryptionSetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsListByResourceGroupSignalErrorFull() instead")
    void diskEncryptionSetsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diskEncryptionSetsUpdateSignalErrorFull() instead")
    void diskEncryptionSetsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diskEncryptionSetsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
