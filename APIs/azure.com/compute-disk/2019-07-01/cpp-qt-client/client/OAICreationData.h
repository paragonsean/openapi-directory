/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreationData.h
 *
 * Data used when creating a disk.
 */

#ifndef OAICreationData_H
#define OAICreationData_H

#include <QJsonObject>

#include "OAIImageDiskReference.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageDiskReference;

class OAICreationData : public OAIObject {
public:
    OAICreationData();
    OAICreationData(QString json);
    ~OAICreationData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateOption() const;
    void setCreateOption(const QString &create_option);
    bool is_create_option_Set() const;
    bool is_create_option_Valid() const;

    OAIImageDiskReference getImageReference() const;
    void setImageReference(const OAIImageDiskReference &image_reference);
    bool is_image_reference_Set() const;
    bool is_image_reference_Valid() const;

    QString getSourceResourceId() const;
    void setSourceResourceId(const QString &source_resource_id);
    bool is_source_resource_id_Set() const;
    bool is_source_resource_id_Valid() const;

    QString getSourceUniqueId() const;
    void setSourceUniqueId(const QString &source_unique_id);
    bool is_source_unique_id_Set() const;
    bool is_source_unique_id_Valid() const;

    QString getSourceUri() const;
    void setSourceUri(const QString &source_uri);
    bool is_source_uri_Set() const;
    bool is_source_uri_Valid() const;

    QString getStorageAccountId() const;
    void setStorageAccountId(const QString &storage_account_id);
    bool is_storage_account_id_Set() const;
    bool is_storage_account_id_Valid() const;

    qint64 getUploadSizeBytes() const;
    void setUploadSizeBytes(const qint64 &upload_size_bytes);
    bool is_upload_size_bytes_Set() const;
    bool is_upload_size_bytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_option;
    bool m_create_option_isSet;
    bool m_create_option_isValid;

    OAIImageDiskReference m_image_reference;
    bool m_image_reference_isSet;
    bool m_image_reference_isValid;

    QString m_source_resource_id;
    bool m_source_resource_id_isSet;
    bool m_source_resource_id_isValid;

    QString m_source_unique_id;
    bool m_source_unique_id_isSet;
    bool m_source_unique_id_isValid;

    QString m_source_uri;
    bool m_source_uri_isSet;
    bool m_source_uri_isValid;

    QString m_storage_account_id;
    bool m_storage_account_id_isSet;
    bool m_storage_account_id_isValid;

    qint64 m_upload_size_bytes;
    bool m_upload_size_bytes_isSet;
    bool m_upload_size_bytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreationData)

#endif // OAICreationData_H
