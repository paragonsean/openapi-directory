/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionSetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionSetProperties::OAIEncryptionSetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionSetProperties::OAIEncryptionSetProperties() {
    this->initializeModel();
}

OAIEncryptionSetProperties::~OAIEncryptionSetProperties() {}

void OAIEncryptionSetProperties::initializeModel() {

    m_active_key_isSet = false;
    m_active_key_isValid = false;

    m_previous_keys_isSet = false;
    m_previous_keys_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIEncryptionSetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionSetProperties::fromJsonObject(QJsonObject json) {

    m_active_key_isValid = ::OpenAPI::fromJsonValue(m_active_key, json[QString("activeKey")]);
    m_active_key_isSet = !json[QString("activeKey")].isNull() && m_active_key_isValid;

    m_previous_keys_isValid = ::OpenAPI::fromJsonValue(m_previous_keys, json[QString("previousKeys")]);
    m_previous_keys_isSet = !json[QString("previousKeys")].isNull() && m_previous_keys_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIEncryptionSetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionSetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_active_key.isSet()) {
        obj.insert(QString("activeKey"), ::OpenAPI::toJsonValue(m_active_key));
    }
    if (m_previous_keys.size() > 0) {
        obj.insert(QString("previousKeys"), ::OpenAPI::toJsonValue(m_previous_keys));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAIKeyVaultAndKeyReference OAIEncryptionSetProperties::getActiveKey() const {
    return m_active_key;
}
void OAIEncryptionSetProperties::setActiveKey(const OAIKeyVaultAndKeyReference &active_key) {
    m_active_key = active_key;
    m_active_key_isSet = true;
}

bool OAIEncryptionSetProperties::is_active_key_Set() const{
    return m_active_key_isSet;
}

bool OAIEncryptionSetProperties::is_active_key_Valid() const{
    return m_active_key_isValid;
}

QList<OAIKeyVaultAndKeyReference> OAIEncryptionSetProperties::getPreviousKeys() const {
    return m_previous_keys;
}
void OAIEncryptionSetProperties::setPreviousKeys(const QList<OAIKeyVaultAndKeyReference> &previous_keys) {
    m_previous_keys = previous_keys;
    m_previous_keys_isSet = true;
}

bool OAIEncryptionSetProperties::is_previous_keys_Set() const{
    return m_previous_keys_isSet;
}

bool OAIEncryptionSetProperties::is_previous_keys_Valid() const{
    return m_previous_keys_isValid;
}

QString OAIEncryptionSetProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIEncryptionSetProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIEncryptionSetProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIEncryptionSetProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIEncryptionSetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionSetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
