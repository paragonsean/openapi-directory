/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyVaultAndKeyReference from './KeyVaultAndKeyReference';

/**
 * The EncryptionSetProperties model module.
 * @module model/EncryptionSetProperties
 * @version 2019-07-01
 */
class EncryptionSetProperties {
    /**
     * Constructs a new <code>EncryptionSetProperties</code>.
     * @alias module:model/EncryptionSetProperties
     */
    constructor() { 
        
        EncryptionSetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EncryptionSetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionSetProperties} obj Optional instance to populate.
     * @return {module:model/EncryptionSetProperties} The populated <code>EncryptionSetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionSetProperties();

            if (data.hasOwnProperty('activeKey')) {
                obj['activeKey'] = KeyVaultAndKeyReference.constructFromObject(data['activeKey']);
            }
            if (data.hasOwnProperty('previousKeys')) {
                obj['previousKeys'] = ApiClient.convertToType(data['previousKeys'], [KeyVaultAndKeyReference]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionSetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionSetProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `activeKey`
        if (data['activeKey']) { // data not null
          KeyVaultAndKeyReference.validateJSON(data['activeKey']);
        }
        if (data['previousKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['previousKeys'])) {
                throw new Error("Expected the field `previousKeys` to be an array in the JSON data but got " + data['previousKeys']);
            }
            // validate the optional field `previousKeys` (array)
            for (const item of data['previousKeys']) {
                KeyVaultAndKeyReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * @member {module:model/KeyVaultAndKeyReference} activeKey
 */
EncryptionSetProperties.prototype['activeKey'] = undefined;

/**
 * A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is in progress. It will be empty if there is no ongoing key rotation.
 * @member {Array.<module:model/KeyVaultAndKeyReference>} previousKeys
 */
EncryptionSetProperties.prototype['previousKeys'] = undefined;

/**
 * The disk encryption set provisioning state.
 * @member {String} provisioningState
 */
EncryptionSetProperties.prototype['provisioningState'] = undefined;






export default EncryptionSetProperties;

