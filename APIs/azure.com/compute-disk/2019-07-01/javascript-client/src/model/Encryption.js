/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Encryption model module.
 * @module model/Encryption
 * @version 2019-07-01
 */
class Encryption {
    /**
     * Constructs a new <code>Encryption</code>.
     * Encryption at rest settings for disk or snapshot
     * @alias module:model/Encryption
     * @param type {module:model/Encryption.TypeEnum} The type of key used to encrypt the data of the disk.
     */
    constructor(type) { 
        
        Encryption.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Encryption</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Encryption} obj Optional instance to populate.
     * @return {module:model/Encryption} The populated <code>Encryption</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Encryption();

            if (data.hasOwnProperty('diskEncryptionSetId')) {
                obj['diskEncryptionSetId'] = ApiClient.convertToType(data['diskEncryptionSetId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Encryption</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Encryption</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Encryption.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['diskEncryptionSetId'] && !(typeof data['diskEncryptionSetId'] === 'string' || data['diskEncryptionSetId'] instanceof String)) {
            throw new Error("Expected the field `diskEncryptionSetId` to be a primitive type in the JSON string but got " + data['diskEncryptionSetId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Encryption.RequiredProperties = ["type"];

/**
 * ResourceId of the disk encryption set to use for enabling encryption at rest.
 * @member {String} diskEncryptionSetId
 */
Encryption.prototype['diskEncryptionSetId'] = undefined;

/**
 * The type of key used to encrypt the data of the disk.
 * @member {module:model/Encryption.TypeEnum} type
 */
Encryption.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Encryption['TypeEnum'] = {

    /**
     * value: "EncryptionAtRestWithPlatformKey"
     * @const
     */
    "EncryptionAtRestWithPlatformKey": "EncryptionAtRestWithPlatformKey",

    /**
     * value: "EncryptionAtRestWithCustomerKey"
     * @const
     */
    "EncryptionAtRestWithCustomerKey": "EncryptionAtRestWithCustomerKey"
};



export default Encryption;

