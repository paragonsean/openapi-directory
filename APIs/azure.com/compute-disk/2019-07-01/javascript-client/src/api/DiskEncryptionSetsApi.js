/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import DiskEncryptionSet from '../model/DiskEncryptionSet';
import DiskEncryptionSetList from '../model/DiskEncryptionSetList';
import DiskEncryptionSetUpdate from '../model/DiskEncryptionSetUpdate';

/**
* DiskEncryptionSets service.
* @module api/DiskEncryptionSetsApi
* @version 2019-07-01
*/
export default class DiskEncryptionSetsApi {

    /**
    * Constructs a new DiskEncryptionSetsApi. 
    * @alias module:api/DiskEncryptionSetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the diskEncryptionSetsCreateOrUpdate operation.
     * @callback module:api/DiskEncryptionSetsApi~diskEncryptionSetsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiskEncryptionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a disk encryption set
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/DiskEncryptionSet} diskEncryptionSet disk encryption set object supplied in the body of the Put disk encryption set operation.
     * @param {module:api/DiskEncryptionSetsApi~diskEncryptionSetsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiskEncryptionSet}
     */
    diskEncryptionSetsCreateOrUpdate(subscriptionId, resourceGroupName, diskEncryptionSetName, apiVersion, diskEncryptionSet, callback) {
      let postBody = diskEncryptionSet;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diskEncryptionSetsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diskEncryptionSetsCreateOrUpdate");
      }
      // verify the required parameter 'diskEncryptionSetName' is set
      if (diskEncryptionSetName === undefined || diskEncryptionSetName === null) {
        throw new Error("Missing the required parameter 'diskEncryptionSetName' when calling diskEncryptionSetsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diskEncryptionSetsCreateOrUpdate");
      }
      // verify the required parameter 'diskEncryptionSet' is set
      if (diskEncryptionSet === undefined || diskEncryptionSet === null) {
        throw new Error("Missing the required parameter 'diskEncryptionSet' when calling diskEncryptionSetsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'diskEncryptionSetName': diskEncryptionSetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiskEncryptionSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diskEncryptionSetsDelete operation.
     * @callback module:api/DiskEncryptionSetsApi~diskEncryptionSetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a disk encryption set.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DiskEncryptionSetsApi~diskEncryptionSetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    diskEncryptionSetsDelete(subscriptionId, resourceGroupName, diskEncryptionSetName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diskEncryptionSetsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diskEncryptionSetsDelete");
      }
      // verify the required parameter 'diskEncryptionSetName' is set
      if (diskEncryptionSetName === undefined || diskEncryptionSetName === null) {
        throw new Error("Missing the required parameter 'diskEncryptionSetName' when calling diskEncryptionSetsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diskEncryptionSetsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'diskEncryptionSetName': diskEncryptionSetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diskEncryptionSetsGet operation.
     * @callback module:api/DiskEncryptionSetsApi~diskEncryptionSetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiskEncryptionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a disk encryption set.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DiskEncryptionSetsApi~diskEncryptionSetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiskEncryptionSet}
     */
    diskEncryptionSetsGet(subscriptionId, resourceGroupName, diskEncryptionSetName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diskEncryptionSetsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diskEncryptionSetsGet");
      }
      // verify the required parameter 'diskEncryptionSetName' is set
      if (diskEncryptionSetName === undefined || diskEncryptionSetName === null) {
        throw new Error("Missing the required parameter 'diskEncryptionSetName' when calling diskEncryptionSetsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diskEncryptionSetsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'diskEncryptionSetName': diskEncryptionSetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiskEncryptionSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diskEncryptionSetsList operation.
     * @callback module:api/DiskEncryptionSetsApi~diskEncryptionSetsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiskEncryptionSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the disk encryption sets under a subscription.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DiskEncryptionSetsApi~diskEncryptionSetsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiskEncryptionSetList}
     */
    diskEncryptionSetsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diskEncryptionSetsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diskEncryptionSetsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiskEncryptionSetList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Compute/diskEncryptionSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diskEncryptionSetsListByResourceGroup operation.
     * @callback module:api/DiskEncryptionSetsApi~diskEncryptionSetsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiskEncryptionSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the disk encryption sets under a resource group.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/DiskEncryptionSetsApi~diskEncryptionSetsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiskEncryptionSetList}
     */
    diskEncryptionSetsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diskEncryptionSetsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diskEncryptionSetsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diskEncryptionSetsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DiskEncryptionSetList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diskEncryptionSetsUpdate operation.
     * @callback module:api/DiskEncryptionSetsApi~diskEncryptionSetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiskEncryptionSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates (patches) a disk encryption set.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} diskEncryptionSetName The name of the disk encryption set that is being created. The name can't be changed after the disk encryption set is created. Supported characters for the name are a-z, A-Z, 0-9 and _. The maximum name length is 80 characters.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/DiskEncryptionSetUpdate} diskEncryptionSet disk encryption set object supplied in the body of the Patch disk encryption set operation.
     * @param {module:api/DiskEncryptionSetsApi~diskEncryptionSetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiskEncryptionSet}
     */
    diskEncryptionSetsUpdate(subscriptionId, resourceGroupName, diskEncryptionSetName, apiVersion, diskEncryptionSet, callback) {
      let postBody = diskEncryptionSet;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling diskEncryptionSetsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling diskEncryptionSetsUpdate");
      }
      // verify the required parameter 'diskEncryptionSetName' is set
      if (diskEncryptionSetName === undefined || diskEncryptionSetName === null) {
        throw new Error("Missing the required parameter 'diskEncryptionSetName' when calling diskEncryptionSetsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling diskEncryptionSetsUpdate");
      }
      // verify the required parameter 'diskEncryptionSet' is set
      if (diskEncryptionSet === undefined || diskEncryptionSet === null) {
        throw new Error("Missing the required parameter 'diskEncryptionSet' when calling diskEncryptionSetsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'diskEncryptionSetName': diskEncryptionSetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiskEncryptionSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/diskEncryptionSets/{diskEncryptionSetName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
