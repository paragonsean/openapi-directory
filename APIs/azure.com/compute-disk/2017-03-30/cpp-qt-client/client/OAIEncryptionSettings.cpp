/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2017-03-30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptionSettings::OAIEncryptionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptionSettings::OAIEncryptionSettings() {
    this->initializeModel();
}

OAIEncryptionSettings::~OAIEncryptionSettings() {}

void OAIEncryptionSettings::initializeModel() {

    m_disk_encryption_key_isSet = false;
    m_disk_encryption_key_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_key_encryption_key_isSet = false;
    m_key_encryption_key_isValid = false;
}

void OAIEncryptionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptionSettings::fromJsonObject(QJsonObject json) {

    m_disk_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_key, json[QString("diskEncryptionKey")]);
    m_disk_encryption_key_isSet = !json[QString("diskEncryptionKey")].isNull() && m_disk_encryption_key_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_key_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_key_encryption_key, json[QString("keyEncryptionKey")]);
    m_key_encryption_key_isSet = !json[QString("keyEncryptionKey")].isNull() && m_key_encryption_key_isValid;
}

QString OAIEncryptionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_encryption_key.isSet()) {
        obj.insert(QString("diskEncryptionKey"), ::OpenAPI::toJsonValue(m_disk_encryption_key));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_key_encryption_key.isSet()) {
        obj.insert(QString("keyEncryptionKey"), ::OpenAPI::toJsonValue(m_key_encryption_key));
    }
    return obj;
}

OAIKeyVaultAndSecretReference OAIEncryptionSettings::getDiskEncryptionKey() const {
    return m_disk_encryption_key;
}
void OAIEncryptionSettings::setDiskEncryptionKey(const OAIKeyVaultAndSecretReference &disk_encryption_key) {
    m_disk_encryption_key = disk_encryption_key;
    m_disk_encryption_key_isSet = true;
}

bool OAIEncryptionSettings::is_disk_encryption_key_Set() const{
    return m_disk_encryption_key_isSet;
}

bool OAIEncryptionSettings::is_disk_encryption_key_Valid() const{
    return m_disk_encryption_key_isValid;
}

bool OAIEncryptionSettings::isEnabled() const {
    return m_enabled;
}
void OAIEncryptionSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIEncryptionSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIEncryptionSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIKeyVaultAndKeyReference OAIEncryptionSettings::getKeyEncryptionKey() const {
    return m_key_encryption_key;
}
void OAIEncryptionSettings::setKeyEncryptionKey(const OAIKeyVaultAndKeyReference &key_encryption_key) {
    m_key_encryption_key = key_encryption_key;
    m_key_encryption_key_isSet = true;
}

bool OAIEncryptionSettings::is_key_encryption_key_Set() const{
    return m_key_encryption_key_isSet;
}

bool OAIEncryptionSettings::is_key_encryption_key_Valid() const{
    return m_key_encryption_key_isValid;
}

bool OAIEncryptionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_encryption_key.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
