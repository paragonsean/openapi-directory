/**
 * DiskResourceProviderClient
 * The Disk Resource Provider Client.
 *
 * The version of the OpenAPI document: 2017-03-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyVaultAndKeyReference from './KeyVaultAndKeyReference';
import KeyVaultAndSecretReference from './KeyVaultAndSecretReference';

/**
 * The EncryptionSettings model module.
 * @module model/EncryptionSettings
 * @version 2017-03-30
 */
class EncryptionSettings {
    /**
     * Constructs a new <code>EncryptionSettings</code>.
     * Encryption settings for disk or snapshot
     * @alias module:model/EncryptionSettings
     */
    constructor() { 
        
        EncryptionSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EncryptionSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EncryptionSettings} obj Optional instance to populate.
     * @return {module:model/EncryptionSettings} The populated <code>EncryptionSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EncryptionSettings();

            if (data.hasOwnProperty('diskEncryptionKey')) {
                obj['diskEncryptionKey'] = KeyVaultAndSecretReference.constructFromObject(data['diskEncryptionKey']);
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('keyEncryptionKey')) {
                obj['keyEncryptionKey'] = KeyVaultAndKeyReference.constructFromObject(data['keyEncryptionKey']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EncryptionSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EncryptionSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `diskEncryptionKey`
        if (data['diskEncryptionKey']) { // data not null
          KeyVaultAndSecretReference.validateJSON(data['diskEncryptionKey']);
        }
        // validate the optional field `keyEncryptionKey`
        if (data['keyEncryptionKey']) { // data not null
          KeyVaultAndKeyReference.validateJSON(data['keyEncryptionKey']);
        }

        return true;
    }


}



/**
 * @member {module:model/KeyVaultAndSecretReference} diskEncryptionKey
 */
EncryptionSettings.prototype['diskEncryptionKey'] = undefined;

/**
 * Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption. If EncryptionSettings is null in the request object, the existing settings remain unchanged.
 * @member {Boolean} enabled
 */
EncryptionSettings.prototype['enabled'] = undefined;

/**
 * @member {module:model/KeyVaultAndKeyReference} keyEncryptionKey
 */
EncryptionSettings.prototype['keyEncryptionKey'] = undefined;






export default EncryptionSettings;

