/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Active Directory
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:02:14.029764-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActiveDirectory {
  public static final String SERIALIZED_NAME_ACTIVE_DIRECTORY_ID = "activeDirectoryId";
  @SerializedName(SERIALIZED_NAME_ACTIVE_DIRECTORY_ID)
  private String activeDirectoryId;

  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private String dns;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_ORGANIZATIONAL_UNIT = "organizationalUnit";
  @SerializedName(SERIALIZED_NAME_ORGANIZATIONAL_UNIT)
  private String organizationalUnit;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SMB_SERVER_NAME = "smbServerName";
  @SerializedName(SERIALIZED_NAME_SMB_SERVER_NAME)
  private String smbServerName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public ActiveDirectory() {
  }

  public ActiveDirectory activeDirectoryId(String activeDirectoryId) {
    this.activeDirectoryId = activeDirectoryId;
    return this;
  }

  /**
   * Id of the Active Directory
   * @return activeDirectoryId
   */
  @javax.annotation.Nullable
  public String getActiveDirectoryId() {
    return activeDirectoryId;
  }

  public void setActiveDirectoryId(String activeDirectoryId) {
    this.activeDirectoryId = activeDirectoryId;
  }


  public ActiveDirectory dns(String dns) {
    this.dns = dns;
    return this;
  }

  /**
   * Comma separated list of DNS server IP addresses for the Active Directory domain
   * @return dns
   */
  @javax.annotation.Nullable
  public String getDns() {
    return dns;
  }

  public void setDns(String dns) {
    this.dns = dns;
  }


  public ActiveDirectory domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Name of the Active Directory domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public ActiveDirectory organizationalUnit(String organizationalUnit) {
    this.organizationalUnit = organizationalUnit;
    return this;
  }

  /**
   * The Organizational Unit (OU) within the Windows Active Directory
   * @return organizationalUnit
   */
  @javax.annotation.Nullable
  public String getOrganizationalUnit() {
    return organizationalUnit;
  }

  public void setOrganizationalUnit(String organizationalUnit) {
    this.organizationalUnit = organizationalUnit;
  }


  public ActiveDirectory password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Plain text password of Active Directory domain administrator
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ActiveDirectory smbServerName(String smbServerName) {
    this.smbServerName = smbServerName;
    return this;
  }

  /**
   * NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
   * @return smbServerName
   */
  @javax.annotation.Nullable
  public String getSmbServerName() {
    return smbServerName;
  }

  public void setSmbServerName(String smbServerName) {
    this.smbServerName = smbServerName;
  }


  public ActiveDirectory status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the Active Directory
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ActiveDirectory username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Username of Active Directory domain administrator
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveDirectory activeDirectory = (ActiveDirectory) o;
    return Objects.equals(this.activeDirectoryId, activeDirectory.activeDirectoryId) &&
        Objects.equals(this.dns, activeDirectory.dns) &&
        Objects.equals(this.domain, activeDirectory.domain) &&
        Objects.equals(this.organizationalUnit, activeDirectory.organizationalUnit) &&
        Objects.equals(this.password, activeDirectory.password) &&
        Objects.equals(this.smbServerName, activeDirectory.smbServerName) &&
        Objects.equals(this.status, activeDirectory.status) &&
        Objects.equals(this.username, activeDirectory.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeDirectoryId, dns, domain, organizationalUnit, password, smbServerName, status, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveDirectory {\n");
    sb.append("    activeDirectoryId: ").append(toIndentedString(activeDirectoryId)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    organizationalUnit: ").append(toIndentedString(organizationalUnit)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    smbServerName: ").append(toIndentedString(smbServerName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeDirectoryId");
    openapiFields.add("dns");
    openapiFields.add("domain");
    openapiFields.add("organizationalUnit");
    openapiFields.add("password");
    openapiFields.add("smbServerName");
    openapiFields.add("status");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveDirectory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveDirectory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveDirectory is not found in the empty JSON string", ActiveDirectory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveDirectory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveDirectory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeDirectoryId") != null && !jsonObj.get("activeDirectoryId").isJsonNull()) && !jsonObj.get("activeDirectoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeDirectoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeDirectoryId").toString()));
      }
      if ((jsonObj.get("dns") != null && !jsonObj.get("dns").isJsonNull()) && !jsonObj.get("dns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("organizationalUnit") != null && !jsonObj.get("organizationalUnit").isJsonNull()) && !jsonObj.get("organizationalUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationalUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationalUnit").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("smbServerName") != null && !jsonObj.get("smbServerName").isJsonNull()) && !jsonObj.get("smbServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smbServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smbServerName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveDirectory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveDirectory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveDirectory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveDirectory.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveDirectory>() {
           @Override
           public void write(JsonWriter out, ActiveDirectory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveDirectory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveDirectory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveDirectory
   * @throws IOException if the JSON string is invalid with respect to ActiveDirectory
   */
  public static ActiveDirectory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveDirectory.class);
  }

  /**
   * Convert an instance of ActiveDirectory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

