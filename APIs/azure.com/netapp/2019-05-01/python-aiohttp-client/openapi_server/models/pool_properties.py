# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PoolProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pool_id: str=None, provisioning_state: str=None, service_level: str='Premium', size: int=4398046511104):
        """PoolProperties - a model defined in OpenAPI

        :param pool_id: The pool_id of this PoolProperties.
        :param provisioning_state: The provisioning_state of this PoolProperties.
        :param service_level: The service_level of this PoolProperties.
        :param size: The size of this PoolProperties.
        """
        self.openapi_types = {
            'pool_id': str,
            'provisioning_state': str,
            'service_level': str,
            'size': int
        }

        self.attribute_map = {
            'pool_id': 'poolId',
            'provisioning_state': 'provisioningState',
            'service_level': 'serviceLevel',
            'size': 'size'
        }

        self._pool_id = pool_id
        self._provisioning_state = provisioning_state
        self._service_level = service_level
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoolProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The poolProperties of this PoolProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pool_id(self):
        """Gets the pool_id of this PoolProperties.

        UUID v4 used to identify the Pool

        :return: The pool_id of this PoolProperties.
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this PoolProperties.

        UUID v4 used to identify the Pool

        :param pool_id: The pool_id of this PoolProperties.
        :type pool_id: str
        """
        if pool_id is not None and len(pool_id) > 36:
            raise ValueError("Invalid value for `pool_id`, length must be less than or equal to `36`")
        if pool_id is not None and len(pool_id) < 36:
            raise ValueError("Invalid value for `pool_id`, length must be greater than or equal to `36`")
        if pool_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', pool_id):
            raise ValueError("Invalid value for `pool_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._pool_id = pool_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PoolProperties.

        Azure lifecycle management

        :return: The provisioning_state of this PoolProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PoolProperties.

        Azure lifecycle management

        :param provisioning_state: The provisioning_state of this PoolProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_level(self):
        """Gets the service_level of this PoolProperties.

        The service level of the file system

        :return: The service_level of this PoolProperties.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this PoolProperties.

        The service level of the file system

        :param service_level: The service_level of this PoolProperties.
        :type service_level: str
        """
        allowed_values = ["Standard", "Premium", "Ultra"]  # noqa: E501
        if service_level not in allowed_values:
            raise ValueError(
                "Invalid value for `service_level` ({0}), must be one of {1}"
                .format(service_level, allowed_values)
            )

        self._service_level = service_level

    @property
    def size(self):
        """Gets the size of this PoolProperties.

        Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).

        :return: The size of this PoolProperties.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PoolProperties.

        Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).

        :param size: The size of this PoolProperties.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")
        if size is not None and size > 549755813888000:
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `549755813888000`")
        if size is not None and size < 4398046511104:
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `4398046511104`")

        self._size = size
