/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMountTargetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMountTargetProperties::OAIMountTargetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMountTargetProperties::OAIMountTargetProperties() {
    this->initializeModel();
}

OAIMountTargetProperties::~OAIMountTargetProperties() {}

void OAIMountTargetProperties::initializeModel() {

    m_end_ip_isSet = false;
    m_end_ip_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_mount_target_id_isSet = false;
    m_mount_target_id_isValid = false;

    m_netmask_isSet = false;
    m_netmask_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_smb_server_fqdn_isSet = false;
    m_smb_server_fqdn_isValid = false;

    m_start_ip_isSet = false;
    m_start_ip_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIMountTargetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMountTargetProperties::fromJsonObject(QJsonObject json) {

    m_end_ip_isValid = ::OpenAPI::fromJsonValue(m_end_ip, json[QString("endIp")]);
    m_end_ip_isSet = !json[QString("endIp")].isNull() && m_end_ip_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("fileSystemId")]);
    m_file_system_id_isSet = !json[QString("fileSystemId")].isNull() && m_file_system_id_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_mount_target_id_isValid = ::OpenAPI::fromJsonValue(m_mount_target_id, json[QString("mountTargetId")]);
    m_mount_target_id_isSet = !json[QString("mountTargetId")].isNull() && m_mount_target_id_isValid;

    m_netmask_isValid = ::OpenAPI::fromJsonValue(m_netmask, json[QString("netmask")]);
    m_netmask_isSet = !json[QString("netmask")].isNull() && m_netmask_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_smb_server_fqdn_isValid = ::OpenAPI::fromJsonValue(m_smb_server_fqdn, json[QString("smbServerFqdn")]);
    m_smb_server_fqdn_isSet = !json[QString("smbServerFqdn")].isNull() && m_smb_server_fqdn_isValid;

    m_start_ip_isValid = ::OpenAPI::fromJsonValue(m_start_ip, json[QString("startIp")]);
    m_start_ip_isSet = !json[QString("startIp")].isNull() && m_start_ip_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIMountTargetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMountTargetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_end_ip_isSet) {
        obj.insert(QString("endIp"), ::OpenAPI::toJsonValue(m_end_ip));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("fileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_mount_target_id_isSet) {
        obj.insert(QString("mountTargetId"), ::OpenAPI::toJsonValue(m_mount_target_id));
    }
    if (m_netmask_isSet) {
        obj.insert(QString("netmask"), ::OpenAPI::toJsonValue(m_netmask));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_smb_server_fqdn_isSet) {
        obj.insert(QString("smbServerFqdn"), ::OpenAPI::toJsonValue(m_smb_server_fqdn));
    }
    if (m_start_ip_isSet) {
        obj.insert(QString("startIp"), ::OpenAPI::toJsonValue(m_start_ip));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

QString OAIMountTargetProperties::getEndIp() const {
    return m_end_ip;
}
void OAIMountTargetProperties::setEndIp(const QString &end_ip) {
    m_end_ip = end_ip;
    m_end_ip_isSet = true;
}

bool OAIMountTargetProperties::is_end_ip_Set() const{
    return m_end_ip_isSet;
}

bool OAIMountTargetProperties::is_end_ip_Valid() const{
    return m_end_ip_isValid;
}

QString OAIMountTargetProperties::getFileSystemId() const {
    return m_file_system_id;
}
void OAIMountTargetProperties::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIMountTargetProperties::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIMountTargetProperties::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIMountTargetProperties::getGateway() const {
    return m_gateway;
}
void OAIMountTargetProperties::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIMountTargetProperties::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIMountTargetProperties::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIMountTargetProperties::getIpAddress() const {
    return m_ip_address;
}
void OAIMountTargetProperties::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIMountTargetProperties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIMountTargetProperties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIMountTargetProperties::getMountTargetId() const {
    return m_mount_target_id;
}
void OAIMountTargetProperties::setMountTargetId(const QString &mount_target_id) {
    m_mount_target_id = mount_target_id;
    m_mount_target_id_isSet = true;
}

bool OAIMountTargetProperties::is_mount_target_id_Set() const{
    return m_mount_target_id_isSet;
}

bool OAIMountTargetProperties::is_mount_target_id_Valid() const{
    return m_mount_target_id_isValid;
}

QString OAIMountTargetProperties::getNetmask() const {
    return m_netmask;
}
void OAIMountTargetProperties::setNetmask(const QString &netmask) {
    m_netmask = netmask;
    m_netmask_isSet = true;
}

bool OAIMountTargetProperties::is_netmask_Set() const{
    return m_netmask_isSet;
}

bool OAIMountTargetProperties::is_netmask_Valid() const{
    return m_netmask_isValid;
}

QString OAIMountTargetProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIMountTargetProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIMountTargetProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIMountTargetProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIMountTargetProperties::getSmbServerFqdn() const {
    return m_smb_server_fqdn;
}
void OAIMountTargetProperties::setSmbServerFqdn(const QString &smb_server_fqdn) {
    m_smb_server_fqdn = smb_server_fqdn;
    m_smb_server_fqdn_isSet = true;
}

bool OAIMountTargetProperties::is_smb_server_fqdn_Set() const{
    return m_smb_server_fqdn_isSet;
}

bool OAIMountTargetProperties::is_smb_server_fqdn_Valid() const{
    return m_smb_server_fqdn_isValid;
}

QString OAIMountTargetProperties::getStartIp() const {
    return m_start_ip;
}
void OAIMountTargetProperties::setStartIp(const QString &start_ip) {
    m_start_ip = start_ip;
    m_start_ip_isSet = true;
}

bool OAIMountTargetProperties::is_start_ip_Set() const{
    return m_start_ip_isSet;
}

bool OAIMountTargetProperties::is_start_ip_Valid() const{
    return m_start_ip_isValid;
}

QString OAIMountTargetProperties::getSubnet() const {
    return m_subnet;
}
void OAIMountTargetProperties::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIMountTargetProperties::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIMountTargetProperties::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIMountTargetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_netmask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smb_server_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMountTargetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && true;
}

} // namespace OpenAPI
