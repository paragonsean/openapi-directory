/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolumeProperties.h
 *
 * Volume properties
 */

#ifndef OAIVolumeProperties_H
#define OAIVolumeProperties_H

#include <QJsonObject>

#include "OAIExportPolicy.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExportPolicy;

class OAIVolumeProperties : public OAIObject {
public:
    OAIVolumeProperties();
    OAIVolumeProperties(QString json);
    ~OAIVolumeProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBaremetalTenantId() const;
    void setBaremetalTenantId(const QString &baremetal_tenant_id);
    bool is_baremetal_tenant_id_Set() const;
    bool is_baremetal_tenant_id_Valid() const;

    QString getCreationToken() const;
    void setCreationToken(const QString &creation_token);
    bool is_creation_token_Set() const;
    bool is_creation_token_Valid() const;

    OAIExportPolicy getExportPolicy() const;
    void setExportPolicy(const OAIExportPolicy &export_policy);
    bool is_export_policy_Set() const;
    bool is_export_policy_Valid() const;

    QString getFileSystemId() const;
    void setFileSystemId(const QString &file_system_id);
    bool is_file_system_id_Set() const;
    bool is_file_system_id_Valid() const;

    OAIObject getMountTargets() const;
    void setMountTargets(const OAIObject &mount_targets);
    bool is_mount_targets_Set() const;
    bool is_mount_targets_Valid() const;

    QList<QString> getProtocolTypes() const;
    void setProtocolTypes(const QList<QString> &protocol_types);
    bool is_protocol_types_Set() const;
    bool is_protocol_types_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getServiceLevel() const;
    void setServiceLevel(const QString &service_level);
    bool is_service_level_Set() const;
    bool is_service_level_Valid() const;

    QString getSnapshotId() const;
    void setSnapshotId(const QString &snapshot_id);
    bool is_snapshot_id_Set() const;
    bool is_snapshot_id_Valid() const;

    QString getSubnetId() const;
    void setSubnetId(const QString &subnet_id);
    bool is_subnet_id_Set() const;
    bool is_subnet_id_Valid() const;

    qint64 getUsageThreshold() const;
    void setUsageThreshold(const qint64 &usage_threshold);
    bool is_usage_threshold_Set() const;
    bool is_usage_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_baremetal_tenant_id;
    bool m_baremetal_tenant_id_isSet;
    bool m_baremetal_tenant_id_isValid;

    QString m_creation_token;
    bool m_creation_token_isSet;
    bool m_creation_token_isValid;

    OAIExportPolicy m_export_policy;
    bool m_export_policy_isSet;
    bool m_export_policy_isValid;

    QString m_file_system_id;
    bool m_file_system_id_isSet;
    bool m_file_system_id_isValid;

    OAIObject m_mount_targets;
    bool m_mount_targets_isSet;
    bool m_mount_targets_isValid;

    QList<QString> m_protocol_types;
    bool m_protocol_types_isSet;
    bool m_protocol_types_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_service_level;
    bool m_service_level_isSet;
    bool m_service_level_isValid;

    QString m_snapshot_id;
    bool m_snapshot_id_isSet;
    bool m_snapshot_id_isValid;

    QString m_subnet_id;
    bool m_subnet_id_isSet;
    bool m_subnet_id_isValid;

    qint64 m_usage_threshold;
    bool m_usage_threshold_isSet;
    bool m_usage_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolumeProperties)

#endif // OAIVolumeProperties_H
