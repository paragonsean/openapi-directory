/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationStatus::OAIReplicationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationStatus::OAIReplicationStatus() {
    this->initializeModel();
}

OAIReplicationStatus::~OAIReplicationStatus() {}

void OAIReplicationStatus::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_healthy_isSet = false;
    m_healthy_isValid = false;

    m_mirror_state_isSet = false;
    m_mirror_state_isValid = false;

    m_relationship_status_isSet = false;
    m_relationship_status_isValid = false;

    m_total_progress_isSet = false;
    m_total_progress_isValid = false;
}

void OAIReplicationStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationStatus::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_healthy_isValid = ::OpenAPI::fromJsonValue(m_healthy, json[QString("healthy")]);
    m_healthy_isSet = !json[QString("healthy")].isNull() && m_healthy_isValid;

    m_mirror_state_isValid = ::OpenAPI::fromJsonValue(m_mirror_state, json[QString("mirrorState")]);
    m_mirror_state_isSet = !json[QString("mirrorState")].isNull() && m_mirror_state_isValid;

    m_relationship_status_isValid = ::OpenAPI::fromJsonValue(m_relationship_status, json[QString("relationshipStatus")]);
    m_relationship_status_isSet = !json[QString("relationshipStatus")].isNull() && m_relationship_status_isValid;

    m_total_progress_isValid = ::OpenAPI::fromJsonValue(m_total_progress, json[QString("totalProgress")]);
    m_total_progress_isSet = !json[QString("totalProgress")].isNull() && m_total_progress_isValid;
}

QString OAIReplicationStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_healthy_isSet) {
        obj.insert(QString("healthy"), ::OpenAPI::toJsonValue(m_healthy));
    }
    if (m_mirror_state_isSet) {
        obj.insert(QString("mirrorState"), ::OpenAPI::toJsonValue(m_mirror_state));
    }
    if (m_relationship_status_isSet) {
        obj.insert(QString("relationshipStatus"), ::OpenAPI::toJsonValue(m_relationship_status));
    }
    if (m_total_progress_isSet) {
        obj.insert(QString("totalProgress"), ::OpenAPI::toJsonValue(m_total_progress));
    }
    return obj;
}

QString OAIReplicationStatus::getErrorMessage() const {
    return m_error_message;
}
void OAIReplicationStatus::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIReplicationStatus::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIReplicationStatus::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIReplicationStatus::isHealthy() const {
    return m_healthy;
}
void OAIReplicationStatus::setHealthy(const bool &healthy) {
    m_healthy = healthy;
    m_healthy_isSet = true;
}

bool OAIReplicationStatus::is_healthy_Set() const{
    return m_healthy_isSet;
}

bool OAIReplicationStatus::is_healthy_Valid() const{
    return m_healthy_isValid;
}

QString OAIReplicationStatus::getMirrorState() const {
    return m_mirror_state;
}
void OAIReplicationStatus::setMirrorState(const QString &mirror_state) {
    m_mirror_state = mirror_state;
    m_mirror_state_isSet = true;
}

bool OAIReplicationStatus::is_mirror_state_Set() const{
    return m_mirror_state_isSet;
}

bool OAIReplicationStatus::is_mirror_state_Valid() const{
    return m_mirror_state_isValid;
}

QString OAIReplicationStatus::getRelationshipStatus() const {
    return m_relationship_status;
}
void OAIReplicationStatus::setRelationshipStatus(const QString &relationship_status) {
    m_relationship_status = relationship_status;
    m_relationship_status_isSet = true;
}

bool OAIReplicationStatus::is_relationship_status_Set() const{
    return m_relationship_status_isSet;
}

bool OAIReplicationStatus::is_relationship_status_Valid() const{
    return m_relationship_status_isValid;
}

QString OAIReplicationStatus::getTotalProgress() const {
    return m_total_progress;
}
void OAIReplicationStatus::setTotalProgress(const QString &total_progress) {
    m_total_progress = total_progress;
    m_total_progress_isSet = true;
}

bool OAIReplicationStatus::is_total_progress_Set() const{
    return m_total_progress_isSet;
}

bool OAIReplicationStatus::is_total_progress_Valid() const{
    return m_total_progress_isValid;
}

bool OAIReplicationStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mirror_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_progress_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
