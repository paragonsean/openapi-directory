/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationObject::OAIReplicationObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationObject::OAIReplicationObject() {
    this->initializeModel();
}

OAIReplicationObject::~OAIReplicationObject() {}

void OAIReplicationObject::initializeModel() {

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_remote_volume_region_isSet = false;
    m_remote_volume_region_isValid = false;

    m_remote_volume_resource_id_isSet = false;
    m_remote_volume_resource_id_isValid = false;

    m_replication_id_isSet = false;
    m_replication_id_isValid = false;

    m_replication_schedule_isSet = false;
    m_replication_schedule_isValid = false;
}

void OAIReplicationObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationObject::fromJsonObject(QJsonObject json) {

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("endpointType")]);
    m_endpoint_type_isSet = !json[QString("endpointType")].isNull() && m_endpoint_type_isValid;

    m_remote_volume_region_isValid = ::OpenAPI::fromJsonValue(m_remote_volume_region, json[QString("remoteVolumeRegion")]);
    m_remote_volume_region_isSet = !json[QString("remoteVolumeRegion")].isNull() && m_remote_volume_region_isValid;

    m_remote_volume_resource_id_isValid = ::OpenAPI::fromJsonValue(m_remote_volume_resource_id, json[QString("remoteVolumeResourceId")]);
    m_remote_volume_resource_id_isSet = !json[QString("remoteVolumeResourceId")].isNull() && m_remote_volume_resource_id_isValid;

    m_replication_id_isValid = ::OpenAPI::fromJsonValue(m_replication_id, json[QString("replicationId")]);
    m_replication_id_isSet = !json[QString("replicationId")].isNull() && m_replication_id_isValid;

    m_replication_schedule_isValid = ::OpenAPI::fromJsonValue(m_replication_schedule, json[QString("replicationSchedule")]);
    m_replication_schedule_isSet = !json[QString("replicationSchedule")].isNull() && m_replication_schedule_isValid;
}

QString OAIReplicationObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationObject::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_type_isSet) {
        obj.insert(QString("endpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_remote_volume_region_isSet) {
        obj.insert(QString("remoteVolumeRegion"), ::OpenAPI::toJsonValue(m_remote_volume_region));
    }
    if (m_remote_volume_resource_id_isSet) {
        obj.insert(QString("remoteVolumeResourceId"), ::OpenAPI::toJsonValue(m_remote_volume_resource_id));
    }
    if (m_replication_id_isSet) {
        obj.insert(QString("replicationId"), ::OpenAPI::toJsonValue(m_replication_id));
    }
    if (m_replication_schedule_isSet) {
        obj.insert(QString("replicationSchedule"), ::OpenAPI::toJsonValue(m_replication_schedule));
    }
    return obj;
}

QString OAIReplicationObject::getEndpointType() const {
    return m_endpoint_type;
}
void OAIReplicationObject::setEndpointType(const QString &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIReplicationObject::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIReplicationObject::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIReplicationObject::getRemoteVolumeRegion() const {
    return m_remote_volume_region;
}
void OAIReplicationObject::setRemoteVolumeRegion(const QString &remote_volume_region) {
    m_remote_volume_region = remote_volume_region;
    m_remote_volume_region_isSet = true;
}

bool OAIReplicationObject::is_remote_volume_region_Set() const{
    return m_remote_volume_region_isSet;
}

bool OAIReplicationObject::is_remote_volume_region_Valid() const{
    return m_remote_volume_region_isValid;
}

QString OAIReplicationObject::getRemoteVolumeResourceId() const {
    return m_remote_volume_resource_id;
}
void OAIReplicationObject::setRemoteVolumeResourceId(const QString &remote_volume_resource_id) {
    m_remote_volume_resource_id = remote_volume_resource_id;
    m_remote_volume_resource_id_isSet = true;
}

bool OAIReplicationObject::is_remote_volume_resource_id_Set() const{
    return m_remote_volume_resource_id_isSet;
}

bool OAIReplicationObject::is_remote_volume_resource_id_Valid() const{
    return m_remote_volume_resource_id_isValid;
}

QString OAIReplicationObject::getReplicationId() const {
    return m_replication_id;
}
void OAIReplicationObject::setReplicationId(const QString &replication_id) {
    m_replication_id = replication_id;
    m_replication_id_isSet = true;
}

bool OAIReplicationObject::is_replication_id_Set() const{
    return m_replication_id_isSet;
}

bool OAIReplicationObject::is_replication_id_Valid() const{
    return m_replication_id_isValid;
}

QString OAIReplicationObject::getReplicationSchedule() const {
    return m_replication_schedule;
}
void OAIReplicationObject::setReplicationSchedule(const QString &replication_schedule) {
    m_replication_schedule = replication_schedule;
    m_replication_schedule_isSet = true;
}

bool OAIReplicationObject::is_replication_schedule_Set() const{
    return m_replication_schedule_isSet;
}

bool OAIReplicationObject::is_replication_schedule_Valid() const{
    return m_replication_schedule_isValid;
}

bool OAIReplicationObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_volume_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_volume_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_remote_volume_resource_id_isValid && m_replication_schedule_isValid && true;
}

} // namespace OpenAPI
