/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumePatchProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumePatchProperties::OAIVolumePatchProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumePatchProperties::OAIVolumePatchProperties() {
    this->initializeModel();
}

OAIVolumePatchProperties::~OAIVolumePatchProperties() {}

void OAIVolumePatchProperties::initializeModel() {

    m_export_policy_isSet = false;
    m_export_policy_isValid = false;

    m_service_level_isSet = false;
    m_service_level_isValid = false;

    m_usage_threshold_isSet = false;
    m_usage_threshold_isValid = false;
}

void OAIVolumePatchProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumePatchProperties::fromJsonObject(QJsonObject json) {

    m_export_policy_isValid = ::OpenAPI::fromJsonValue(m_export_policy, json[QString("exportPolicy")]);
    m_export_policy_isSet = !json[QString("exportPolicy")].isNull() && m_export_policy_isValid;

    m_service_level_isValid = ::OpenAPI::fromJsonValue(m_service_level, json[QString("serviceLevel")]);
    m_service_level_isSet = !json[QString("serviceLevel")].isNull() && m_service_level_isValid;

    m_usage_threshold_isValid = ::OpenAPI::fromJsonValue(m_usage_threshold, json[QString("usageThreshold")]);
    m_usage_threshold_isSet = !json[QString("usageThreshold")].isNull() && m_usage_threshold_isValid;
}

QString OAIVolumePatchProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumePatchProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_export_policy.isSet()) {
        obj.insert(QString("exportPolicy"), ::OpenAPI::toJsonValue(m_export_policy));
    }
    if (m_service_level_isSet) {
        obj.insert(QString("serviceLevel"), ::OpenAPI::toJsonValue(m_service_level));
    }
    if (m_usage_threshold_isSet) {
        obj.insert(QString("usageThreshold"), ::OpenAPI::toJsonValue(m_usage_threshold));
    }
    return obj;
}

OAIExportPolicy OAIVolumePatchProperties::getExportPolicy() const {
    return m_export_policy;
}
void OAIVolumePatchProperties::setExportPolicy(const OAIExportPolicy &export_policy) {
    m_export_policy = export_policy;
    m_export_policy_isSet = true;
}

bool OAIVolumePatchProperties::is_export_policy_Set() const{
    return m_export_policy_isSet;
}

bool OAIVolumePatchProperties::is_export_policy_Valid() const{
    return m_export_policy_isValid;
}

QString OAIVolumePatchProperties::getServiceLevel() const {
    return m_service_level;
}
void OAIVolumePatchProperties::setServiceLevel(const QString &service_level) {
    m_service_level = service_level;
    m_service_level_isSet = true;
}

bool OAIVolumePatchProperties::is_service_level_Set() const{
    return m_service_level_isSet;
}

bool OAIVolumePatchProperties::is_service_level_Valid() const{
    return m_service_level_isValid;
}

qint64 OAIVolumePatchProperties::getUsageThreshold() const {
    return m_usage_threshold;
}
void OAIVolumePatchProperties::setUsageThreshold(const qint64 &usage_threshold) {
    m_usage_threshold = usage_threshold;
    m_usage_threshold_isSet = true;
}

bool OAIVolumePatchProperties::is_usage_threshold_Set() const{
    return m_usage_threshold_isSet;
}

bool OAIVolumePatchProperties::is_usage_threshold_Valid() const{
    return m_usage_threshold_isValid;
}

bool OAIVolumePatchProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_export_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumePatchProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
