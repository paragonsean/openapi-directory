/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportPolicyRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportPolicyRule::OAIExportPolicyRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportPolicyRule::OAIExportPolicyRule() {
    this->initializeModel();
}

OAIExportPolicyRule::~OAIExportPolicyRule() {}

void OAIExportPolicyRule::initializeModel() {

    m_allowed_clients_isSet = false;
    m_allowed_clients_isValid = false;

    m_cifs_isSet = false;
    m_cifs_isValid = false;

    m_nfsv3_isSet = false;
    m_nfsv3_isValid = false;

    m_nfsv41_isSet = false;
    m_nfsv41_isValid = false;

    m_rule_index_isSet = false;
    m_rule_index_isValid = false;

    m_unix_read_only_isSet = false;
    m_unix_read_only_isValid = false;

    m_unix_read_write_isSet = false;
    m_unix_read_write_isValid = false;
}

void OAIExportPolicyRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportPolicyRule::fromJsonObject(QJsonObject json) {

    m_allowed_clients_isValid = ::OpenAPI::fromJsonValue(m_allowed_clients, json[QString("allowedClients")]);
    m_allowed_clients_isSet = !json[QString("allowedClients")].isNull() && m_allowed_clients_isValid;

    m_cifs_isValid = ::OpenAPI::fromJsonValue(m_cifs, json[QString("cifs")]);
    m_cifs_isSet = !json[QString("cifs")].isNull() && m_cifs_isValid;

    m_nfsv3_isValid = ::OpenAPI::fromJsonValue(m_nfsv3, json[QString("nfsv3")]);
    m_nfsv3_isSet = !json[QString("nfsv3")].isNull() && m_nfsv3_isValid;

    m_nfsv41_isValid = ::OpenAPI::fromJsonValue(m_nfsv41, json[QString("nfsv41")]);
    m_nfsv41_isSet = !json[QString("nfsv41")].isNull() && m_nfsv41_isValid;

    m_rule_index_isValid = ::OpenAPI::fromJsonValue(m_rule_index, json[QString("ruleIndex")]);
    m_rule_index_isSet = !json[QString("ruleIndex")].isNull() && m_rule_index_isValid;

    m_unix_read_only_isValid = ::OpenAPI::fromJsonValue(m_unix_read_only, json[QString("unixReadOnly")]);
    m_unix_read_only_isSet = !json[QString("unixReadOnly")].isNull() && m_unix_read_only_isValid;

    m_unix_read_write_isValid = ::OpenAPI::fromJsonValue(m_unix_read_write, json[QString("unixReadWrite")]);
    m_unix_read_write_isSet = !json[QString("unixReadWrite")].isNull() && m_unix_read_write_isValid;
}

QString OAIExportPolicyRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportPolicyRule::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_clients_isSet) {
        obj.insert(QString("allowedClients"), ::OpenAPI::toJsonValue(m_allowed_clients));
    }
    if (m_cifs_isSet) {
        obj.insert(QString("cifs"), ::OpenAPI::toJsonValue(m_cifs));
    }
    if (m_nfsv3_isSet) {
        obj.insert(QString("nfsv3"), ::OpenAPI::toJsonValue(m_nfsv3));
    }
    if (m_nfsv41_isSet) {
        obj.insert(QString("nfsv41"), ::OpenAPI::toJsonValue(m_nfsv41));
    }
    if (m_rule_index_isSet) {
        obj.insert(QString("ruleIndex"), ::OpenAPI::toJsonValue(m_rule_index));
    }
    if (m_unix_read_only_isSet) {
        obj.insert(QString("unixReadOnly"), ::OpenAPI::toJsonValue(m_unix_read_only));
    }
    if (m_unix_read_write_isSet) {
        obj.insert(QString("unixReadWrite"), ::OpenAPI::toJsonValue(m_unix_read_write));
    }
    return obj;
}

QString OAIExportPolicyRule::getAllowedClients() const {
    return m_allowed_clients;
}
void OAIExportPolicyRule::setAllowedClients(const QString &allowed_clients) {
    m_allowed_clients = allowed_clients;
    m_allowed_clients_isSet = true;
}

bool OAIExportPolicyRule::is_allowed_clients_Set() const{
    return m_allowed_clients_isSet;
}

bool OAIExportPolicyRule::is_allowed_clients_Valid() const{
    return m_allowed_clients_isValid;
}

bool OAIExportPolicyRule::isCifs() const {
    return m_cifs;
}
void OAIExportPolicyRule::setCifs(const bool &cifs) {
    m_cifs = cifs;
    m_cifs_isSet = true;
}

bool OAIExportPolicyRule::is_cifs_Set() const{
    return m_cifs_isSet;
}

bool OAIExportPolicyRule::is_cifs_Valid() const{
    return m_cifs_isValid;
}

bool OAIExportPolicyRule::isNfsv3() const {
    return m_nfsv3;
}
void OAIExportPolicyRule::setNfsv3(const bool &nfsv3) {
    m_nfsv3 = nfsv3;
    m_nfsv3_isSet = true;
}

bool OAIExportPolicyRule::is_nfsv3_Set() const{
    return m_nfsv3_isSet;
}

bool OAIExportPolicyRule::is_nfsv3_Valid() const{
    return m_nfsv3_isValid;
}

bool OAIExportPolicyRule::isNfsv41() const {
    return m_nfsv41;
}
void OAIExportPolicyRule::setNfsv41(const bool &nfsv41) {
    m_nfsv41 = nfsv41;
    m_nfsv41_isSet = true;
}

bool OAIExportPolicyRule::is_nfsv41_Set() const{
    return m_nfsv41_isSet;
}

bool OAIExportPolicyRule::is_nfsv41_Valid() const{
    return m_nfsv41_isValid;
}

qint32 OAIExportPolicyRule::getRuleIndex() const {
    return m_rule_index;
}
void OAIExportPolicyRule::setRuleIndex(const qint32 &rule_index) {
    m_rule_index = rule_index;
    m_rule_index_isSet = true;
}

bool OAIExportPolicyRule::is_rule_index_Set() const{
    return m_rule_index_isSet;
}

bool OAIExportPolicyRule::is_rule_index_Valid() const{
    return m_rule_index_isValid;
}

bool OAIExportPolicyRule::isUnixReadOnly() const {
    return m_unix_read_only;
}
void OAIExportPolicyRule::setUnixReadOnly(const bool &unix_read_only) {
    m_unix_read_only = unix_read_only;
    m_unix_read_only_isSet = true;
}

bool OAIExportPolicyRule::is_unix_read_only_Set() const{
    return m_unix_read_only_isSet;
}

bool OAIExportPolicyRule::is_unix_read_only_Valid() const{
    return m_unix_read_only_isValid;
}

bool OAIExportPolicyRule::isUnixReadWrite() const {
    return m_unix_read_write;
}
void OAIExportPolicyRule::setUnixReadWrite(const bool &unix_read_write) {
    m_unix_read_write = unix_read_write;
    m_unix_read_write_isSet = true;
}

bool OAIExportPolicyRule::is_unix_read_write_Set() const{
    return m_unix_read_write_isSet;
}

bool OAIExportPolicyRule::is_unix_read_write_Valid() const{
    return m_unix_read_write_isValid;
}

bool OAIExportPolicyRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_clients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cifs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfsv3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfsv41_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unix_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unix_read_write_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportPolicyRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
