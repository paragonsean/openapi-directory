/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMountTargetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMountTargetProperties::OAIMountTargetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMountTargetProperties::OAIMountTargetProperties() {
    this->initializeModel();
}

OAIMountTargetProperties::~OAIMountTargetProperties() {}

void OAIMountTargetProperties::initializeModel() {

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_mount_target_id_isSet = false;
    m_mount_target_id_isValid = false;

    m_smb_server_fqdn_isSet = false;
    m_smb_server_fqdn_isValid = false;
}

void OAIMountTargetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMountTargetProperties::fromJsonObject(QJsonObject json) {

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("fileSystemId")]);
    m_file_system_id_isSet = !json[QString("fileSystemId")].isNull() && m_file_system_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_mount_target_id_isValid = ::OpenAPI::fromJsonValue(m_mount_target_id, json[QString("mountTargetId")]);
    m_mount_target_id_isSet = !json[QString("mountTargetId")].isNull() && m_mount_target_id_isValid;

    m_smb_server_fqdn_isValid = ::OpenAPI::fromJsonValue(m_smb_server_fqdn, json[QString("smbServerFqdn")]);
    m_smb_server_fqdn_isSet = !json[QString("smbServerFqdn")].isNull() && m_smb_server_fqdn_isValid;
}

QString OAIMountTargetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMountTargetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_file_system_id_isSet) {
        obj.insert(QString("fileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_mount_target_id_isSet) {
        obj.insert(QString("mountTargetId"), ::OpenAPI::toJsonValue(m_mount_target_id));
    }
    if (m_smb_server_fqdn_isSet) {
        obj.insert(QString("smbServerFqdn"), ::OpenAPI::toJsonValue(m_smb_server_fqdn));
    }
    return obj;
}

QString OAIMountTargetProperties::getFileSystemId() const {
    return m_file_system_id;
}
void OAIMountTargetProperties::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIMountTargetProperties::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIMountTargetProperties::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIMountTargetProperties::getIpAddress() const {
    return m_ip_address;
}
void OAIMountTargetProperties::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIMountTargetProperties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIMountTargetProperties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIMountTargetProperties::getMountTargetId() const {
    return m_mount_target_id;
}
void OAIMountTargetProperties::setMountTargetId(const QString &mount_target_id) {
    m_mount_target_id = mount_target_id;
    m_mount_target_id_isSet = true;
}

bool OAIMountTargetProperties::is_mount_target_id_Set() const{
    return m_mount_target_id_isSet;
}

bool OAIMountTargetProperties::is_mount_target_id_Valid() const{
    return m_mount_target_id_isValid;
}

QString OAIMountTargetProperties::getSmbServerFqdn() const {
    return m_smb_server_fqdn;
}
void OAIMountTargetProperties::setSmbServerFqdn(const QString &smb_server_fqdn) {
    m_smb_server_fqdn = smb_server_fqdn;
    m_smb_server_fqdn_isSet = true;
}

bool OAIMountTargetProperties::is_smb_server_fqdn_Set() const{
    return m_smb_server_fqdn_isSet;
}

bool OAIMountTargetProperties::is_smb_server_fqdn_Valid() const{
    return m_smb_server_fqdn_isValid;
}

bool OAIMountTargetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smb_server_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMountTargetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_id_isValid && true;
}

} // namespace OpenAPI
