/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoolProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoolProperties::OAIPoolProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoolProperties::OAIPoolProperties() {
    this->initializeModel();
}

OAIPoolProperties::~OAIPoolProperties() {}

void OAIPoolProperties::initializeModel() {

    m_pool_id_isSet = false;
    m_pool_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_level_isSet = false;
    m_service_level_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIPoolProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoolProperties::fromJsonObject(QJsonObject json) {

    m_pool_id_isValid = ::OpenAPI::fromJsonValue(m_pool_id, json[QString("poolId")]);
    m_pool_id_isSet = !json[QString("poolId")].isNull() && m_pool_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_level_isValid = ::OpenAPI::fromJsonValue(m_service_level, json[QString("serviceLevel")]);
    m_service_level_isSet = !json[QString("serviceLevel")].isNull() && m_service_level_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIPoolProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoolProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_pool_id_isSet) {
        obj.insert(QString("poolId"), ::OpenAPI::toJsonValue(m_pool_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_level_isSet) {
        obj.insert(QString("serviceLevel"), ::OpenAPI::toJsonValue(m_service_level));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAIPoolProperties::getPoolId() const {
    return m_pool_id;
}
void OAIPoolProperties::setPoolId(const QString &pool_id) {
    m_pool_id = pool_id;
    m_pool_id_isSet = true;
}

bool OAIPoolProperties::is_pool_id_Set() const{
    return m_pool_id_isSet;
}

bool OAIPoolProperties::is_pool_id_Valid() const{
    return m_pool_id_isValid;
}

QString OAIPoolProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPoolProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPoolProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPoolProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIPoolProperties::getServiceLevel() const {
    return m_service_level;
}
void OAIPoolProperties::setServiceLevel(const QString &service_level) {
    m_service_level = service_level;
    m_service_level_isSet = true;
}

bool OAIPoolProperties::is_service_level_Set() const{
    return m_service_level_isSet;
}

bool OAIPoolProperties::is_service_level_Valid() const{
    return m_service_level_isValid;
}

qint64 OAIPoolProperties::getSize() const {
    return m_size;
}
void OAIPoolProperties::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPoolProperties::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPoolProperties::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIPoolProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoolProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_level_isValid && m_size_isValid && true;
}

} // namespace OpenAPI
