# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, remote_volume_resource_id: str=None):
        """AuthorizeRequest - a model defined in OpenAPI

        :param remote_volume_resource_id: The remote_volume_resource_id of this AuthorizeRequest.
        """
        self.openapi_types = {
            'remote_volume_resource_id': str
        }

        self.attribute_map = {
            'remote_volume_resource_id': 'remoteVolumeResourceId'
        }

        self._remote_volume_resource_id = remote_volume_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The authorizeRequest of this AuthorizeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def remote_volume_resource_id(self):
        """Gets the remote_volume_resource_id of this AuthorizeRequest.

        Resource id of the remote volume

        :return: The remote_volume_resource_id of this AuthorizeRequest.
        :rtype: str
        """
        return self._remote_volume_resource_id

    @remote_volume_resource_id.setter
    def remote_volume_resource_id(self, remote_volume_resource_id):
        """Sets the remote_volume_resource_id of this AuthorizeRequest.

        Resource id of the remote volume

        :param remote_volume_resource_id: The remote_volume_resource_id of this AuthorizeRequest.
        :type remote_volume_resource_id: str
        """

        self._remote_volume_resource_id = remote_volume_resource_id
