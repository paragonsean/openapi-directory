# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MountTargetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_system_id: str=None, ip_address: str=None, mount_target_id: str=None, smb_server_fqdn: str=None):
        """MountTargetProperties - a model defined in OpenAPI

        :param file_system_id: The file_system_id of this MountTargetProperties.
        :param ip_address: The ip_address of this MountTargetProperties.
        :param mount_target_id: The mount_target_id of this MountTargetProperties.
        :param smb_server_fqdn: The smb_server_fqdn of this MountTargetProperties.
        """
        self.openapi_types = {
            'file_system_id': str,
            'ip_address': str,
            'mount_target_id': str,
            'smb_server_fqdn': str
        }

        self.attribute_map = {
            'file_system_id': 'fileSystemId',
            'ip_address': 'ipAddress',
            'mount_target_id': 'mountTargetId',
            'smb_server_fqdn': 'smbServerFqdn'
        }

        self._file_system_id = file_system_id
        self._ip_address = ip_address
        self._mount_target_id = mount_target_id
        self._smb_server_fqdn = smb_server_fqdn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MountTargetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The mountTargetProperties of this MountTargetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_system_id(self):
        """Gets the file_system_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :return: The file_system_id of this MountTargetProperties.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :param file_system_id: The file_system_id of this MountTargetProperties.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")
        if file_system_id is not None and len(file_system_id) > 36:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `36`")
        if file_system_id is not None and len(file_system_id) < 36:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `36`")
        if file_system_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._file_system_id = file_system_id

    @property
    def ip_address(self):
        """Gets the ip_address of this MountTargetProperties.

        The mount target's IPv4 address

        :return: The ip_address of this MountTargetProperties.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this MountTargetProperties.

        The mount target's IPv4 address

        :param ip_address: The ip_address of this MountTargetProperties.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def mount_target_id(self):
        """Gets the mount_target_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :return: The mount_target_id of this MountTargetProperties.
        :rtype: str
        """
        return self._mount_target_id

    @mount_target_id.setter
    def mount_target_id(self, mount_target_id):
        """Sets the mount_target_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :param mount_target_id: The mount_target_id of this MountTargetProperties.
        :type mount_target_id: str
        """
        if mount_target_id is not None and len(mount_target_id) > 36:
            raise ValueError("Invalid value for `mount_target_id`, length must be less than or equal to `36`")
        if mount_target_id is not None and len(mount_target_id) < 36:
            raise ValueError("Invalid value for `mount_target_id`, length must be greater than or equal to `36`")
        if mount_target_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', mount_target_id):
            raise ValueError("Invalid value for `mount_target_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._mount_target_id = mount_target_id

    @property
    def smb_server_fqdn(self):
        """Gets the smb_server_fqdn of this MountTargetProperties.

        The SMB server's Fully Qualified Domain Name, FQDN

        :return: The smb_server_fqdn of this MountTargetProperties.
        :rtype: str
        """
        return self._smb_server_fqdn

    @smb_server_fqdn.setter
    def smb_server_fqdn(self, smb_server_fqdn):
        """Sets the smb_server_fqdn of this MountTargetProperties.

        The SMB server's Fully Qualified Domain Name, FQDN

        :param smb_server_fqdn: The smb_server_fqdn of this MountTargetProperties.
        :type smb_server_fqdn: str
        """

        self._smb_server_fqdn = smb_server_fqdn
