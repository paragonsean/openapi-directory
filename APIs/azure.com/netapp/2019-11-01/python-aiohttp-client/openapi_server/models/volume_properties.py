# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_protection import DataProtection
from openapi_server.models.export_policy import ExportPolicy
import re
from openapi_server import util


class VolumeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baremetal_tenant_id: str=None, creation_token: str=None, data_protection: DataProtection=None, export_policy: ExportPolicy=None, file_system_id: str=None, is_restoring: bool=None, mount_targets: object=None, protocol_types: List[str]=None, provisioning_state: str=None, service_level: str='Premium', snapshot_id: str=None, subnet_id: str=None, usage_threshold: int=107374182400, volume_type: str=None):
        """VolumeProperties - a model defined in OpenAPI

        :param baremetal_tenant_id: The baremetal_tenant_id of this VolumeProperties.
        :param creation_token: The creation_token of this VolumeProperties.
        :param data_protection: The data_protection of this VolumeProperties.
        :param export_policy: The export_policy of this VolumeProperties.
        :param file_system_id: The file_system_id of this VolumeProperties.
        :param is_restoring: The is_restoring of this VolumeProperties.
        :param mount_targets: The mount_targets of this VolumeProperties.
        :param protocol_types: The protocol_types of this VolumeProperties.
        :param provisioning_state: The provisioning_state of this VolumeProperties.
        :param service_level: The service_level of this VolumeProperties.
        :param snapshot_id: The snapshot_id of this VolumeProperties.
        :param subnet_id: The subnet_id of this VolumeProperties.
        :param usage_threshold: The usage_threshold of this VolumeProperties.
        :param volume_type: The volume_type of this VolumeProperties.
        """
        self.openapi_types = {
            'baremetal_tenant_id': str,
            'creation_token': str,
            'data_protection': DataProtection,
            'export_policy': ExportPolicy,
            'file_system_id': str,
            'is_restoring': bool,
            'mount_targets': object,
            'protocol_types': List[str],
            'provisioning_state': str,
            'service_level': str,
            'snapshot_id': str,
            'subnet_id': str,
            'usage_threshold': int,
            'volume_type': str
        }

        self.attribute_map = {
            'baremetal_tenant_id': 'baremetalTenantId',
            'creation_token': 'creationToken',
            'data_protection': 'dataProtection',
            'export_policy': 'exportPolicy',
            'file_system_id': 'fileSystemId',
            'is_restoring': 'isRestoring',
            'mount_targets': 'mountTargets',
            'protocol_types': 'protocolTypes',
            'provisioning_state': 'provisioningState',
            'service_level': 'serviceLevel',
            'snapshot_id': 'snapshotId',
            'subnet_id': 'subnetId',
            'usage_threshold': 'usageThreshold',
            'volume_type': 'volumeType'
        }

        self._baremetal_tenant_id = baremetal_tenant_id
        self._creation_token = creation_token
        self._data_protection = data_protection
        self._export_policy = export_policy
        self._file_system_id = file_system_id
        self._is_restoring = is_restoring
        self._mount_targets = mount_targets
        self._protocol_types = protocol_types
        self._provisioning_state = provisioning_state
        self._service_level = service_level
        self._snapshot_id = snapshot_id
        self._subnet_id = subnet_id
        self._usage_threshold = usage_threshold
        self._volume_type = volume_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The volumeProperties of this VolumeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baremetal_tenant_id(self):
        """Gets the baremetal_tenant_id of this VolumeProperties.

        Unique Baremetal Tenant Identifier.

        :return: The baremetal_tenant_id of this VolumeProperties.
        :rtype: str
        """
        return self._baremetal_tenant_id

    @baremetal_tenant_id.setter
    def baremetal_tenant_id(self, baremetal_tenant_id):
        """Sets the baremetal_tenant_id of this VolumeProperties.

        Unique Baremetal Tenant Identifier.

        :param baremetal_tenant_id: The baremetal_tenant_id of this VolumeProperties.
        :type baremetal_tenant_id: str
        """
        if baremetal_tenant_id is not None and len(baremetal_tenant_id) > 36:
            raise ValueError("Invalid value for `baremetal_tenant_id`, length must be less than or equal to `36`")
        if baremetal_tenant_id is not None and len(baremetal_tenant_id) < 36:
            raise ValueError("Invalid value for `baremetal_tenant_id`, length must be greater than or equal to `36`")
        if baremetal_tenant_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', baremetal_tenant_id):
            raise ValueError("Invalid value for `baremetal_tenant_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._baremetal_tenant_id = baremetal_tenant_id

    @property
    def creation_token(self):
        """Gets the creation_token of this VolumeProperties.

        A unique file path for the volume. Used when creating mount targets

        :return: The creation_token of this VolumeProperties.
        :rtype: str
        """
        return self._creation_token

    @creation_token.setter
    def creation_token(self, creation_token):
        """Sets the creation_token of this VolumeProperties.

        A unique file path for the volume. Used when creating mount targets

        :param creation_token: The creation_token of this VolumeProperties.
        :type creation_token: str
        """
        if creation_token is None:
            raise ValueError("Invalid value for `creation_token`, must not be `None`")
        if creation_token is not None and len(creation_token) > 80:
            raise ValueError("Invalid value for `creation_token`, length must be less than or equal to `80`")
        if creation_token is not None and len(creation_token) < 1:
            raise ValueError("Invalid value for `creation_token`, length must be greater than or equal to `1`")
        if creation_token is not None and not re.search(r'^[a-zA-Z][a-zA-Z0-9\-]{0,79}$', creation_token):
            raise ValueError("Invalid value for `creation_token`, must be a follow pattern or equal to `/^[a-zA-Z][a-zA-Z0-9\-]{0,79}$/`")

        self._creation_token = creation_token

    @property
    def data_protection(self):
        """Gets the data_protection of this VolumeProperties.


        :return: The data_protection of this VolumeProperties.
        :rtype: DataProtection
        """
        return self._data_protection

    @data_protection.setter
    def data_protection(self, data_protection):
        """Sets the data_protection of this VolumeProperties.


        :param data_protection: The data_protection of this VolumeProperties.
        :type data_protection: DataProtection
        """

        self._data_protection = data_protection

    @property
    def export_policy(self):
        """Gets the export_policy of this VolumeProperties.


        :return: The export_policy of this VolumeProperties.
        :rtype: ExportPolicy
        """
        return self._export_policy

    @export_policy.setter
    def export_policy(self, export_policy):
        """Sets the export_policy of this VolumeProperties.


        :param export_policy: The export_policy of this VolumeProperties.
        :type export_policy: ExportPolicy
        """

        self._export_policy = export_policy

    @property
    def file_system_id(self):
        """Gets the file_system_id of this VolumeProperties.

        Unique FileSystem Identifier.

        :return: The file_system_id of this VolumeProperties.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this VolumeProperties.

        Unique FileSystem Identifier.

        :param file_system_id: The file_system_id of this VolumeProperties.
        :type file_system_id: str
        """
        if file_system_id is not None and len(file_system_id) > 36:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `36`")
        if file_system_id is not None and len(file_system_id) < 36:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `36`")
        if file_system_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._file_system_id = file_system_id

    @property
    def is_restoring(self):
        """Gets the is_restoring of this VolumeProperties.

        Restoring

        :return: The is_restoring of this VolumeProperties.
        :rtype: bool
        """
        return self._is_restoring

    @is_restoring.setter
    def is_restoring(self, is_restoring):
        """Sets the is_restoring of this VolumeProperties.

        Restoring

        :param is_restoring: The is_restoring of this VolumeProperties.
        :type is_restoring: bool
        """

        self._is_restoring = is_restoring

    @property
    def mount_targets(self):
        """Gets the mount_targets of this VolumeProperties.

        List of mount targets

        :return: The mount_targets of this VolumeProperties.
        :rtype: object
        """
        return self._mount_targets

    @mount_targets.setter
    def mount_targets(self, mount_targets):
        """Sets the mount_targets of this VolumeProperties.

        List of mount targets

        :param mount_targets: The mount_targets of this VolumeProperties.
        :type mount_targets: object
        """

        self._mount_targets = mount_targets

    @property
    def protocol_types(self):
        """Gets the protocol_types of this VolumeProperties.

        Set of protocol types

        :return: The protocol_types of this VolumeProperties.
        :rtype: List[str]
        """
        return self._protocol_types

    @protocol_types.setter
    def protocol_types(self, protocol_types):
        """Sets the protocol_types of this VolumeProperties.

        Set of protocol types

        :param protocol_types: The protocol_types of this VolumeProperties.
        :type protocol_types: List[str]
        """

        self._protocol_types = protocol_types

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VolumeProperties.

        Azure lifecycle management

        :return: The provisioning_state of this VolumeProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VolumeProperties.

        Azure lifecycle management

        :param provisioning_state: The provisioning_state of this VolumeProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_level(self):
        """Gets the service_level of this VolumeProperties.

        The service level of the file system

        :return: The service_level of this VolumeProperties.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this VolumeProperties.

        The service level of the file system

        :param service_level: The service_level of this VolumeProperties.
        :type service_level: str
        """
        allowed_values = ["Standard", "Premium", "Ultra"]  # noqa: E501
        if service_level not in allowed_values:
            raise ValueError(
                "Invalid value for `service_level` ({0}), must be one of {1}"
                .format(service_level, allowed_values)
            )

        self._service_level = service_level

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this VolumeProperties.

        UUID v4 or resource identifier used to identify the Snapshot.

        :return: The snapshot_id of this VolumeProperties.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this VolumeProperties.

        UUID v4 or resource identifier used to identify the Snapshot.

        :param snapshot_id: The snapshot_id of this VolumeProperties.
        :type snapshot_id: str
        """
        if snapshot_id is not None and len(snapshot_id) > 36:
            raise ValueError("Invalid value for `snapshot_id`, length must be less than or equal to `36`")
        if snapshot_id is not None and len(snapshot_id) < 36:
            raise ValueError("Invalid value for `snapshot_id`, length must be greater than or equal to `36`")
        if snapshot_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\?([^\/]*[\/])*)([^\/]+)$', snapshot_id):
            raise ValueError("Invalid value for `snapshot_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}|(\\?([^\/]*[\/])*)([^\/]+)$/`")

        self._snapshot_id = snapshot_id

    @property
    def subnet_id(self):
        """Gets the subnet_id of this VolumeProperties.

        The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes

        :return: The subnet_id of this VolumeProperties.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this VolumeProperties.

        The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes

        :param subnet_id: The subnet_id of this VolumeProperties.
        :type subnet_id: str
        """
        if subnet_id is None:
            raise ValueError("Invalid value for `subnet_id`, must not be `None`")

        self._subnet_id = subnet_id

    @property
    def usage_threshold(self):
        """Gets the usage_threshold of this VolumeProperties.

        Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.

        :return: The usage_threshold of this VolumeProperties.
        :rtype: int
        """
        return self._usage_threshold

    @usage_threshold.setter
    def usage_threshold(self, usage_threshold):
        """Sets the usage_threshold of this VolumeProperties.

        Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.

        :param usage_threshold: The usage_threshold of this VolumeProperties.
        :type usage_threshold: int
        """
        if usage_threshold is None:
            raise ValueError("Invalid value for `usage_threshold`, must not be `None`")
        if usage_threshold is not None and usage_threshold > 109951162777600:
            raise ValueError("Invalid value for `usage_threshold`, must be a value less than or equal to `109951162777600`")
        if usage_threshold is not None and usage_threshold < 107374182400:
            raise ValueError("Invalid value for `usage_threshold`, must be a value greater than or equal to `107374182400`")

        self._usage_threshold = usage_threshold

    @property
    def volume_type(self):
        """Gets the volume_type of this VolumeProperties.

        What type of volume is this

        :return: The volume_type of this VolumeProperties.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this VolumeProperties.

        What type of volume is this

        :param volume_type: The volume_type of this VolumeProperties.
        :type volume_type: str
        """

        self._volume_type = volume_type
