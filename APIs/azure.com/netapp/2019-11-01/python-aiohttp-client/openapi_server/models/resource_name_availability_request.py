# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceNameAvailabilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, resource_group: str=None, type: str=None):
        """ResourceNameAvailabilityRequest - a model defined in OpenAPI

        :param name: The name of this ResourceNameAvailabilityRequest.
        :param resource_group: The resource_group of this ResourceNameAvailabilityRequest.
        :param type: The type of this ResourceNameAvailabilityRequest.
        """
        self.openapi_types = {
            'name': str,
            'resource_group': str,
            'type': str
        }

        self.attribute_map = {
            'name': 'name',
            'resource_group': 'resourceGroup',
            'type': 'type'
        }

        self._name = name
        self._resource_group = resource_group
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceNameAvailabilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceNameAvailabilityRequest of this ResourceNameAvailabilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ResourceNameAvailabilityRequest.

        Resource name to verify.

        :return: The name of this ResourceNameAvailabilityRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceNameAvailabilityRequest.

        Resource name to verify.

        :param name: The name of this ResourceNameAvailabilityRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resource_group(self):
        """Gets the resource_group of this ResourceNameAvailabilityRequest.

        Resource group name.

        :return: The resource_group of this ResourceNameAvailabilityRequest.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this ResourceNameAvailabilityRequest.

        Resource group name.

        :param resource_group: The resource_group of this ResourceNameAvailabilityRequest.
        :type resource_group: str
        """
        if resource_group is None:
            raise ValueError("Invalid value for `resource_group`, must not be `None`")

        self._resource_group = resource_group

    @property
    def type(self):
        """Gets the type of this ResourceNameAvailabilityRequest.

        Resource type used for verification.

        :return: The type of this ResourceNameAvailabilityRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResourceNameAvailabilityRequest.

        Resource type used for verification.

        :param type: The type of this ResourceNameAvailabilityRequest.
        :type type: str
        """
        allowed_values = ["Microsoft.NetApp/netAppAccounts", "Microsoft.NetApp/netAppAccounts/capacityPools", "Microsoft.NetApp/netAppAccounts/capacityPools/volumes", "Microsoft.NetApp/netAppAccounts/capacityPools/volumes/snapshots"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
