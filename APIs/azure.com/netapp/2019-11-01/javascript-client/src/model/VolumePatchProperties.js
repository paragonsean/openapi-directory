/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportPolicy from './ExportPolicy';

/**
 * The VolumePatchProperties model module.
 * @module model/VolumePatchProperties
 * @version 2019-11-01
 */
class VolumePatchProperties {
    /**
     * Constructs a new <code>VolumePatchProperties</code>.
     * Patchable volume properties
     * @alias module:model/VolumePatchProperties
     */
    constructor() { 
        
        VolumePatchProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['serviceLevel'] = 'Premium';
        obj['usageThreshold'] = 107374182400;
    }

    /**
     * Constructs a <code>VolumePatchProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumePatchProperties} obj Optional instance to populate.
     * @return {module:model/VolumePatchProperties} The populated <code>VolumePatchProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumePatchProperties();

            if (data.hasOwnProperty('exportPolicy')) {
                obj['exportPolicy'] = ExportPolicy.constructFromObject(data['exportPolicy']);
            }
            if (data.hasOwnProperty('serviceLevel')) {
                obj['serviceLevel'] = ApiClient.convertToType(data['serviceLevel'], 'String');
            }
            if (data.hasOwnProperty('usageThreshold')) {
                obj['usageThreshold'] = ApiClient.convertToType(data['usageThreshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumePatchProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumePatchProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `exportPolicy`
        if (data['exportPolicy']) { // data not null
          ExportPolicy.validateJSON(data['exportPolicy']);
        }
        // ensure the json data is a string
        if (data['serviceLevel'] && !(typeof data['serviceLevel'] === 'string' || data['serviceLevel'] instanceof String)) {
            throw new Error("Expected the field `serviceLevel` to be a primitive type in the JSON string but got " + data['serviceLevel']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExportPolicy} exportPolicy
 */
VolumePatchProperties.prototype['exportPolicy'] = undefined;

/**
 * The service level of the file system
 * @member {module:model/VolumePatchProperties.ServiceLevelEnum} serviceLevel
 * @default 'Premium'
 */
VolumePatchProperties.prototype['serviceLevel'] = 'Premium';

/**
 * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
 * @member {Number} usageThreshold
 * @default 107374182400
 */
VolumePatchProperties.prototype['usageThreshold'] = 107374182400;





/**
 * Allowed values for the <code>serviceLevel</code> property.
 * @enum {String}
 * @readonly
 */
VolumePatchProperties['ServiceLevelEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "Ultra"
     * @const
     */
    "Ultra": "Ultra"
};



export default VolumePatchProperties;

