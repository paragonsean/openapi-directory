/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataProtection from './DataProtection';
import ExportPolicy from './ExportPolicy';

/**
 * The VolumeProperties model module.
 * @module model/VolumeProperties
 * @version 2019-11-01
 */
class VolumeProperties {
    /**
     * Constructs a new <code>VolumeProperties</code>.
     * Volume properties
     * @alias module:model/VolumeProperties
     * @param creationToken {String} A unique file path for the volume. Used when creating mount targets
     * @param subnetId {String} The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
     * @param usageThreshold {Number} Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
     */
    constructor(creationToken, subnetId, usageThreshold) { 
        
        VolumeProperties.initialize(this, creationToken, subnetId, usageThreshold);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, creationToken, subnetId, usageThreshold) { 
        obj['creationToken'] = creationToken;
        obj['serviceLevel'] = 'Premium';
        obj['subnetId'] = subnetId;
        obj['usageThreshold'] = usageThreshold || 107374182400;
    }

    /**
     * Constructs a <code>VolumeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeProperties} obj Optional instance to populate.
     * @return {module:model/VolumeProperties} The populated <code>VolumeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeProperties();

            if (data.hasOwnProperty('baremetalTenantId')) {
                obj['baremetalTenantId'] = ApiClient.convertToType(data['baremetalTenantId'], 'String');
            }
            if (data.hasOwnProperty('creationToken')) {
                obj['creationToken'] = ApiClient.convertToType(data['creationToken'], 'String');
            }
            if (data.hasOwnProperty('dataProtection')) {
                obj['dataProtection'] = DataProtection.constructFromObject(data['dataProtection']);
            }
            if (data.hasOwnProperty('exportPolicy')) {
                obj['exportPolicy'] = ExportPolicy.constructFromObject(data['exportPolicy']);
            }
            if (data.hasOwnProperty('fileSystemId')) {
                obj['fileSystemId'] = ApiClient.convertToType(data['fileSystemId'], 'String');
            }
            if (data.hasOwnProperty('isRestoring')) {
                obj['isRestoring'] = ApiClient.convertToType(data['isRestoring'], 'Boolean');
            }
            if (data.hasOwnProperty('mountTargets')) {
                obj['mountTargets'] = ApiClient.convertToType(data['mountTargets'], Object);
            }
            if (data.hasOwnProperty('protocolTypes')) {
                obj['protocolTypes'] = ApiClient.convertToType(data['protocolTypes'], ['String']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('serviceLevel')) {
                obj['serviceLevel'] = ApiClient.convertToType(data['serviceLevel'], 'String');
            }
            if (data.hasOwnProperty('snapshotId')) {
                obj['snapshotId'] = ApiClient.convertToType(data['snapshotId'], 'String');
            }
            if (data.hasOwnProperty('subnetId')) {
                obj['subnetId'] = ApiClient.convertToType(data['subnetId'], 'String');
            }
            if (data.hasOwnProperty('usageThreshold')) {
                obj['usageThreshold'] = ApiClient.convertToType(data['usageThreshold'], 'Number');
            }
            if (data.hasOwnProperty('volumeType')) {
                obj['volumeType'] = ApiClient.convertToType(data['volumeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VolumeProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['baremetalTenantId'] && !(typeof data['baremetalTenantId'] === 'string' || data['baremetalTenantId'] instanceof String)) {
            throw new Error("Expected the field `baremetalTenantId` to be a primitive type in the JSON string but got " + data['baremetalTenantId']);
        }
        // ensure the json data is a string
        if (data['creationToken'] && !(typeof data['creationToken'] === 'string' || data['creationToken'] instanceof String)) {
            throw new Error("Expected the field `creationToken` to be a primitive type in the JSON string but got " + data['creationToken']);
        }
        // validate the optional field `dataProtection`
        if (data['dataProtection']) { // data not null
          DataProtection.validateJSON(data['dataProtection']);
        }
        // validate the optional field `exportPolicy`
        if (data['exportPolicy']) { // data not null
          ExportPolicy.validateJSON(data['exportPolicy']);
        }
        // ensure the json data is a string
        if (data['fileSystemId'] && !(typeof data['fileSystemId'] === 'string' || data['fileSystemId'] instanceof String)) {
            throw new Error("Expected the field `fileSystemId` to be a primitive type in the JSON string but got " + data['fileSystemId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['protocolTypes'])) {
            throw new Error("Expected the field `protocolTypes` to be an array in the JSON data but got " + data['protocolTypes']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['serviceLevel'] && !(typeof data['serviceLevel'] === 'string' || data['serviceLevel'] instanceof String)) {
            throw new Error("Expected the field `serviceLevel` to be a primitive type in the JSON string but got " + data['serviceLevel']);
        }
        // ensure the json data is a string
        if (data['snapshotId'] && !(typeof data['snapshotId'] === 'string' || data['snapshotId'] instanceof String)) {
            throw new Error("Expected the field `snapshotId` to be a primitive type in the JSON string but got " + data['snapshotId']);
        }
        // ensure the json data is a string
        if (data['subnetId'] && !(typeof data['subnetId'] === 'string' || data['subnetId'] instanceof String)) {
            throw new Error("Expected the field `subnetId` to be a primitive type in the JSON string but got " + data['subnetId']);
        }
        // ensure the json data is a string
        if (data['volumeType'] && !(typeof data['volumeType'] === 'string' || data['volumeType'] instanceof String)) {
            throw new Error("Expected the field `volumeType` to be a primitive type in the JSON string but got " + data['volumeType']);
        }

        return true;
    }


}

VolumeProperties.RequiredProperties = ["creationToken", "subnetId", "usageThreshold"];

/**
 * Unique Baremetal Tenant Identifier.
 * @member {String} baremetalTenantId
 */
VolumeProperties.prototype['baremetalTenantId'] = undefined;

/**
 * A unique file path for the volume. Used when creating mount targets
 * @member {String} creationToken
 */
VolumeProperties.prototype['creationToken'] = undefined;

/**
 * @member {module:model/DataProtection} dataProtection
 */
VolumeProperties.prototype['dataProtection'] = undefined;

/**
 * @member {module:model/ExportPolicy} exportPolicy
 */
VolumeProperties.prototype['exportPolicy'] = undefined;

/**
 * Unique FileSystem Identifier.
 * @member {String} fileSystemId
 */
VolumeProperties.prototype['fileSystemId'] = undefined;

/**
 * Restoring
 * @member {Boolean} isRestoring
 */
VolumeProperties.prototype['isRestoring'] = undefined;

/**
 * List of mount targets
 * @member {Object} mountTargets
 */
VolumeProperties.prototype['mountTargets'] = undefined;

/**
 * Set of protocol types
 * @member {Array.<String>} protocolTypes
 */
VolumeProperties.prototype['protocolTypes'] = undefined;

/**
 * Azure lifecycle management
 * @member {String} provisioningState
 */
VolumeProperties.prototype['provisioningState'] = undefined;

/**
 * The service level of the file system
 * @member {module:model/VolumeProperties.ServiceLevelEnum} serviceLevel
 * @default 'Premium'
 */
VolumeProperties.prototype['serviceLevel'] = 'Premium';

/**
 * UUID v4 or resource identifier used to identify the Snapshot.
 * @member {String} snapshotId
 */
VolumeProperties.prototype['snapshotId'] = undefined;

/**
 * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
 * @member {String} subnetId
 */
VolumeProperties.prototype['subnetId'] = undefined;

/**
 * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
 * @member {Number} usageThreshold
 * @default 107374182400
 */
VolumeProperties.prototype['usageThreshold'] = 107374182400;

/**
 * What type of volume is this
 * @member {String} volumeType
 */
VolumeProperties.prototype['volumeType'] = undefined;





/**
 * Allowed values for the <code>serviceLevel</code> property.
 * @enum {String}
 * @readonly
 */
VolumeProperties['ServiceLevelEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "Ultra"
     * @const
     */
    "Ultra": "Ultra"
};



export default VolumeProperties;

