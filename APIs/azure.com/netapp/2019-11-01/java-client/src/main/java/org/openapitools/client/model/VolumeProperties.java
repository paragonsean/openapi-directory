/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataProtection;
import org.openapitools.client.model.ExportPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Volume properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:02:20.845587-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VolumeProperties {
  public static final String SERIALIZED_NAME_BAREMETAL_TENANT_ID = "baremetalTenantId";
  @SerializedName(SERIALIZED_NAME_BAREMETAL_TENANT_ID)
  private String baremetalTenantId;

  public static final String SERIALIZED_NAME_CREATION_TOKEN = "creationToken";
  @SerializedName(SERIALIZED_NAME_CREATION_TOKEN)
  private String creationToken;

  public static final String SERIALIZED_NAME_DATA_PROTECTION = "dataProtection";
  @SerializedName(SERIALIZED_NAME_DATA_PROTECTION)
  private DataProtection dataProtection;

  public static final String SERIALIZED_NAME_EXPORT_POLICY = "exportPolicy";
  @SerializedName(SERIALIZED_NAME_EXPORT_POLICY)
  private ExportPolicy exportPolicy;

  public static final String SERIALIZED_NAME_FILE_SYSTEM_ID = "fileSystemId";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM_ID)
  private String fileSystemId;

  public static final String SERIALIZED_NAME_IS_RESTORING = "isRestoring";
  @SerializedName(SERIALIZED_NAME_IS_RESTORING)
  private Boolean isRestoring;

  public static final String SERIALIZED_NAME_MOUNT_TARGETS = "mountTargets";
  @SerializedName(SERIALIZED_NAME_MOUNT_TARGETS)
  private Object mountTargets;

  public static final String SERIALIZED_NAME_PROTOCOL_TYPES = "protocolTypes";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_TYPES)
  private List<String> protocolTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * The service level of the file system
   */
  @JsonAdapter(ServiceLevelEnum.Adapter.class)
  public enum ServiceLevelEnum {
    STANDARD("Standard"),
    
    PREMIUM("Premium"),
    
    ULTRA("Ultra");

    private String value;

    ServiceLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceLevelEnum fromValue(String value) {
      for (ServiceLevelEnum b : ServiceLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_LEVEL = "serviceLevel";
  @SerializedName(SERIALIZED_NAME_SERVICE_LEVEL)
  private ServiceLevelEnum serviceLevel = ServiceLevelEnum.PREMIUM;

  public static final String SERIALIZED_NAME_SNAPSHOT_ID = "snapshotId";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ID)
  private String snapshotId;

  public static final String SERIALIZED_NAME_SUBNET_ID = "subnetId";
  @SerializedName(SERIALIZED_NAME_SUBNET_ID)
  private String subnetId;

  public static final String SERIALIZED_NAME_USAGE_THRESHOLD = "usageThreshold";
  @SerializedName(SERIALIZED_NAME_USAGE_THRESHOLD)
  private Long usageThreshold = 107374182400l;

  public static final String SERIALIZED_NAME_VOLUME_TYPE = "volumeType";
  @SerializedName(SERIALIZED_NAME_VOLUME_TYPE)
  private String volumeType;

  public VolumeProperties() {
  }

  public VolumeProperties(
     String baremetalTenantId, 
     String fileSystemId, 
     String provisioningState
  ) {
    this();
    this.baremetalTenantId = baremetalTenantId;
    this.fileSystemId = fileSystemId;
    this.provisioningState = provisioningState;
  }

  /**
   * Unique Baremetal Tenant Identifier.
   * @return baremetalTenantId
   */
  @javax.annotation.Nullable
  public String getBaremetalTenantId() {
    return baremetalTenantId;
  }



  public VolumeProperties creationToken(String creationToken) {
    this.creationToken = creationToken;
    return this;
  }

  /**
   * A unique file path for the volume. Used when creating mount targets
   * @return creationToken
   */
  @javax.annotation.Nonnull
  public String getCreationToken() {
    return creationToken;
  }

  public void setCreationToken(String creationToken) {
    this.creationToken = creationToken;
  }


  public VolumeProperties dataProtection(DataProtection dataProtection) {
    this.dataProtection = dataProtection;
    return this;
  }

  /**
   * Get dataProtection
   * @return dataProtection
   */
  @javax.annotation.Nullable
  public DataProtection getDataProtection() {
    return dataProtection;
  }

  public void setDataProtection(DataProtection dataProtection) {
    this.dataProtection = dataProtection;
  }


  public VolumeProperties exportPolicy(ExportPolicy exportPolicy) {
    this.exportPolicy = exportPolicy;
    return this;
  }

  /**
   * Get exportPolicy
   * @return exportPolicy
   */
  @javax.annotation.Nullable
  public ExportPolicy getExportPolicy() {
    return exportPolicy;
  }

  public void setExportPolicy(ExportPolicy exportPolicy) {
    this.exportPolicy = exportPolicy;
  }


  /**
   * Unique FileSystem Identifier.
   * @return fileSystemId
   */
  @javax.annotation.Nullable
  public String getFileSystemId() {
    return fileSystemId;
  }



  public VolumeProperties isRestoring(Boolean isRestoring) {
    this.isRestoring = isRestoring;
    return this;
  }

  /**
   * Restoring
   * @return isRestoring
   */
  @javax.annotation.Nullable
  public Boolean getIsRestoring() {
    return isRestoring;
  }

  public void setIsRestoring(Boolean isRestoring) {
    this.isRestoring = isRestoring;
  }


  public VolumeProperties mountTargets(Object mountTargets) {
    this.mountTargets = mountTargets;
    return this;
  }

  /**
   * List of mount targets
   * @return mountTargets
   */
  @javax.annotation.Nullable
  public Object getMountTargets() {
    return mountTargets;
  }

  public void setMountTargets(Object mountTargets) {
    this.mountTargets = mountTargets;
  }


  public VolumeProperties protocolTypes(List<String> protocolTypes) {
    this.protocolTypes = protocolTypes;
    return this;
  }

  public VolumeProperties addProtocolTypesItem(String protocolTypesItem) {
    if (this.protocolTypes == null) {
      this.protocolTypes = new ArrayList<>();
    }
    this.protocolTypes.add(protocolTypesItem);
    return this;
  }

  /**
   * Set of protocol types
   * @return protocolTypes
   */
  @javax.annotation.Nullable
  public List<String> getProtocolTypes() {
    return protocolTypes;
  }

  public void setProtocolTypes(List<String> protocolTypes) {
    this.protocolTypes = protocolTypes;
  }


  /**
   * Azure lifecycle management
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public VolumeProperties serviceLevel(ServiceLevelEnum serviceLevel) {
    this.serviceLevel = serviceLevel;
    return this;
  }

  /**
   * The service level of the file system
   * @return serviceLevel
   */
  @javax.annotation.Nullable
  public ServiceLevelEnum getServiceLevel() {
    return serviceLevel;
  }

  public void setServiceLevel(ServiceLevelEnum serviceLevel) {
    this.serviceLevel = serviceLevel;
  }


  public VolumeProperties snapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
    return this;
  }

  /**
   * UUID v4 or resource identifier used to identify the Snapshot.
   * @return snapshotId
   */
  @javax.annotation.Nullable
  public String getSnapshotId() {
    return snapshotId;
  }

  public void setSnapshotId(String snapshotId) {
    this.snapshotId = snapshotId;
  }


  public VolumeProperties subnetId(String subnetId) {
    this.subnetId = subnetId;
    return this;
  }

  /**
   * The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes
   * @return subnetId
   */
  @javax.annotation.Nonnull
  public String getSubnetId() {
    return subnetId;
  }

  public void setSubnetId(String subnetId) {
    this.subnetId = subnetId;
  }


  public VolumeProperties usageThreshold(Long usageThreshold) {
    this.usageThreshold = usageThreshold;
    return this;
  }

  /**
   * Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB. Specified in bytes.
   * minimum: 107374182400
   * maximum: 109951162777600
   * @return usageThreshold
   */
  @javax.annotation.Nonnull
  public Long getUsageThreshold() {
    return usageThreshold;
  }

  public void setUsageThreshold(Long usageThreshold) {
    this.usageThreshold = usageThreshold;
  }


  public VolumeProperties volumeType(String volumeType) {
    this.volumeType = volumeType;
    return this;
  }

  /**
   * What type of volume is this
   * @return volumeType
   */
  @javax.annotation.Nullable
  public String getVolumeType() {
    return volumeType;
  }

  public void setVolumeType(String volumeType) {
    this.volumeType = volumeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VolumeProperties volumeProperties = (VolumeProperties) o;
    return Objects.equals(this.baremetalTenantId, volumeProperties.baremetalTenantId) &&
        Objects.equals(this.creationToken, volumeProperties.creationToken) &&
        Objects.equals(this.dataProtection, volumeProperties.dataProtection) &&
        Objects.equals(this.exportPolicy, volumeProperties.exportPolicy) &&
        Objects.equals(this.fileSystemId, volumeProperties.fileSystemId) &&
        Objects.equals(this.isRestoring, volumeProperties.isRestoring) &&
        Objects.equals(this.mountTargets, volumeProperties.mountTargets) &&
        Objects.equals(this.protocolTypes, volumeProperties.protocolTypes) &&
        Objects.equals(this.provisioningState, volumeProperties.provisioningState) &&
        Objects.equals(this.serviceLevel, volumeProperties.serviceLevel) &&
        Objects.equals(this.snapshotId, volumeProperties.snapshotId) &&
        Objects.equals(this.subnetId, volumeProperties.subnetId) &&
        Objects.equals(this.usageThreshold, volumeProperties.usageThreshold) &&
        Objects.equals(this.volumeType, volumeProperties.volumeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baremetalTenantId, creationToken, dataProtection, exportPolicy, fileSystemId, isRestoring, mountTargets, protocolTypes, provisioningState, serviceLevel, snapshotId, subnetId, usageThreshold, volumeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VolumeProperties {\n");
    sb.append("    baremetalTenantId: ").append(toIndentedString(baremetalTenantId)).append("\n");
    sb.append("    creationToken: ").append(toIndentedString(creationToken)).append("\n");
    sb.append("    dataProtection: ").append(toIndentedString(dataProtection)).append("\n");
    sb.append("    exportPolicy: ").append(toIndentedString(exportPolicy)).append("\n");
    sb.append("    fileSystemId: ").append(toIndentedString(fileSystemId)).append("\n");
    sb.append("    isRestoring: ").append(toIndentedString(isRestoring)).append("\n");
    sb.append("    mountTargets: ").append(toIndentedString(mountTargets)).append("\n");
    sb.append("    protocolTypes: ").append(toIndentedString(protocolTypes)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    serviceLevel: ").append(toIndentedString(serviceLevel)).append("\n");
    sb.append("    snapshotId: ").append(toIndentedString(snapshotId)).append("\n");
    sb.append("    subnetId: ").append(toIndentedString(subnetId)).append("\n");
    sb.append("    usageThreshold: ").append(toIndentedString(usageThreshold)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baremetalTenantId");
    openapiFields.add("creationToken");
    openapiFields.add("dataProtection");
    openapiFields.add("exportPolicy");
    openapiFields.add("fileSystemId");
    openapiFields.add("isRestoring");
    openapiFields.add("mountTargets");
    openapiFields.add("protocolTypes");
    openapiFields.add("provisioningState");
    openapiFields.add("serviceLevel");
    openapiFields.add("snapshotId");
    openapiFields.add("subnetId");
    openapiFields.add("usageThreshold");
    openapiFields.add("volumeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("creationToken");
    openapiRequiredFields.add("subnetId");
    openapiRequiredFields.add("usageThreshold");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VolumeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VolumeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VolumeProperties is not found in the empty JSON string", VolumeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VolumeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VolumeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VolumeProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baremetalTenantId") != null && !jsonObj.get("baremetalTenantId").isJsonNull()) && !jsonObj.get("baremetalTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baremetalTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baremetalTenantId").toString()));
      }
      if (!jsonObj.get("creationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationToken").toString()));
      }
      // validate the optional field `dataProtection`
      if (jsonObj.get("dataProtection") != null && !jsonObj.get("dataProtection").isJsonNull()) {
        DataProtection.validateJsonElement(jsonObj.get("dataProtection"));
      }
      // validate the optional field `exportPolicy`
      if (jsonObj.get("exportPolicy") != null && !jsonObj.get("exportPolicy").isJsonNull()) {
        ExportPolicy.validateJsonElement(jsonObj.get("exportPolicy"));
      }
      if ((jsonObj.get("fileSystemId") != null && !jsonObj.get("fileSystemId").isJsonNull()) && !jsonObj.get("fileSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSystemId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("protocolTypes") != null && !jsonObj.get("protocolTypes").isJsonNull() && !jsonObj.get("protocolTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolTypes` to be an array in the JSON string but got `%s`", jsonObj.get("protocolTypes").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("serviceLevel") != null && !jsonObj.get("serviceLevel").isJsonNull()) && !jsonObj.get("serviceLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceLevel").toString()));
      }
      // validate the optional field `serviceLevel`
      if (jsonObj.get("serviceLevel") != null && !jsonObj.get("serviceLevel").isJsonNull()) {
        ServiceLevelEnum.validateJsonElement(jsonObj.get("serviceLevel"));
      }
      if ((jsonObj.get("snapshotId") != null && !jsonObj.get("snapshotId").isJsonNull()) && !jsonObj.get("snapshotId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotId").toString()));
      }
      if (!jsonObj.get("subnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetId").toString()));
      }
      if ((jsonObj.get("volumeType") != null && !jsonObj.get("volumeType").isJsonNull()) && !jsonObj.get("volumeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volumeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volumeType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VolumeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VolumeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VolumeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VolumeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VolumeProperties>() {
           @Override
           public void write(JsonWriter out, VolumeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VolumeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VolumeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VolumeProperties
   * @throws IOException if the JSON string is invalid with respect to VolumeProperties
   */
  public static VolumeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VolumeProperties.class);
  }

  /**
   * Convert an instance of VolumeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

