/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2017-08-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveDirectory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveDirectory::OAIActiveDirectory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveDirectory::OAIActiveDirectory() {
    this->initializeModel();
}

OAIActiveDirectory::~OAIActiveDirectory() {}

void OAIActiveDirectory::initializeModel() {

    m_active_directory_id_isSet = false;
    m_active_directory_id_isValid = false;

    m_d_ns_isSet = false;
    m_d_ns_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_organizational_unit_isSet = false;
    m_organizational_unit_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_s_mb_server_name_isSet = false;
    m_s_mb_server_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIActiveDirectory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveDirectory::fromJsonObject(QJsonObject json) {

    m_active_directory_id_isValid = ::OpenAPI::fromJsonValue(m_active_directory_id, json[QString("activeDirectoryId")]);
    m_active_directory_id_isSet = !json[QString("activeDirectoryId")].isNull() && m_active_directory_id_isValid;

    m_d_ns_isValid = ::OpenAPI::fromJsonValue(m_d_ns, json[QString("dNS")]);
    m_d_ns_isSet = !json[QString("dNS")].isNull() && m_d_ns_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_organizational_unit_isValid = ::OpenAPI::fromJsonValue(m_organizational_unit, json[QString("organizationalUnit")]);
    m_organizational_unit_isSet = !json[QString("organizationalUnit")].isNull() && m_organizational_unit_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_s_mb_server_name_isValid = ::OpenAPI::fromJsonValue(m_s_mb_server_name, json[QString("sMBServerName")]);
    m_s_mb_server_name_isSet = !json[QString("sMBServerName")].isNull() && m_s_mb_server_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIActiveDirectory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveDirectory::asJsonObject() const {
    QJsonObject obj;
    if (m_active_directory_id_isSet) {
        obj.insert(QString("activeDirectoryId"), ::OpenAPI::toJsonValue(m_active_directory_id));
    }
    if (m_d_ns_isSet) {
        obj.insert(QString("dNS"), ::OpenAPI::toJsonValue(m_d_ns));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_organizational_unit_isSet) {
        obj.insert(QString("organizationalUnit"), ::OpenAPI::toJsonValue(m_organizational_unit));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_s_mb_server_name_isSet) {
        obj.insert(QString("sMBServerName"), ::OpenAPI::toJsonValue(m_s_mb_server_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIActiveDirectory::getActiveDirectoryId() const {
    return m_active_directory_id;
}
void OAIActiveDirectory::setActiveDirectoryId(const QString &active_directory_id) {
    m_active_directory_id = active_directory_id;
    m_active_directory_id_isSet = true;
}

bool OAIActiveDirectory::is_active_directory_id_Set() const{
    return m_active_directory_id_isSet;
}

bool OAIActiveDirectory::is_active_directory_id_Valid() const{
    return m_active_directory_id_isValid;
}

QString OAIActiveDirectory::getDNs() const {
    return m_d_ns;
}
void OAIActiveDirectory::setDNs(const QString &d_ns) {
    m_d_ns = d_ns;
    m_d_ns_isSet = true;
}

bool OAIActiveDirectory::is_d_ns_Set() const{
    return m_d_ns_isSet;
}

bool OAIActiveDirectory::is_d_ns_Valid() const{
    return m_d_ns_isValid;
}

QString OAIActiveDirectory::getDomain() const {
    return m_domain;
}
void OAIActiveDirectory::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIActiveDirectory::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIActiveDirectory::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIActiveDirectory::getOrganizationalUnit() const {
    return m_organizational_unit;
}
void OAIActiveDirectory::setOrganizationalUnit(const QString &organizational_unit) {
    m_organizational_unit = organizational_unit;
    m_organizational_unit_isSet = true;
}

bool OAIActiveDirectory::is_organizational_unit_Set() const{
    return m_organizational_unit_isSet;
}

bool OAIActiveDirectory::is_organizational_unit_Valid() const{
    return m_organizational_unit_isValid;
}

QString OAIActiveDirectory::getPassword() const {
    return m_password;
}
void OAIActiveDirectory::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIActiveDirectory::is_password_Set() const{
    return m_password_isSet;
}

bool OAIActiveDirectory::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIActiveDirectory::getSMbServerName() const {
    return m_s_mb_server_name;
}
void OAIActiveDirectory::setSMbServerName(const QString &s_mb_server_name) {
    m_s_mb_server_name = s_mb_server_name;
    m_s_mb_server_name_isSet = true;
}

bool OAIActiveDirectory::is_s_mb_server_name_Set() const{
    return m_s_mb_server_name_isSet;
}

bool OAIActiveDirectory::is_s_mb_server_name_Valid() const{
    return m_s_mb_server_name_isValid;
}

QString OAIActiveDirectory::getStatus() const {
    return m_status;
}
void OAIActiveDirectory::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActiveDirectory::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActiveDirectory::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIActiveDirectory::getUsername() const {
    return m_username;
}
void OAIActiveDirectory::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIActiveDirectory::is_username_Set() const{
    return m_username_isSet;
}

bool OAIActiveDirectory::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIActiveDirectory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_d_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizational_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s_mb_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveDirectory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
