/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2017-08-15
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeProperties::OAIVolumeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeProperties::OAIVolumeProperties() {
    this->initializeModel();
}

OAIVolumeProperties::~OAIVolumeProperties() {}

void OAIVolumeProperties::initializeModel() {

    m_creation_token_isSet = false;
    m_creation_token_isValid = false;

    m_export_policy_isSet = false;
    m_export_policy_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_level_isSet = false;
    m_service_level_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_usage_threshold_isSet = false;
    m_usage_threshold_isValid = false;
}

void OAIVolumeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeProperties::fromJsonObject(QJsonObject json) {

    m_creation_token_isValid = ::OpenAPI::fromJsonValue(m_creation_token, json[QString("creationToken")]);
    m_creation_token_isSet = !json[QString("creationToken")].isNull() && m_creation_token_isValid;

    m_export_policy_isValid = ::OpenAPI::fromJsonValue(m_export_policy, json[QString("exportPolicy")]);
    m_export_policy_isSet = !json[QString("exportPolicy")].isNull() && m_export_policy_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("fileSystemId")]);
    m_file_system_id_isSet = !json[QString("fileSystemId")].isNull() && m_file_system_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_level_isValid = ::OpenAPI::fromJsonValue(m_service_level, json[QString("serviceLevel")]);
    m_service_level_isSet = !json[QString("serviceLevel")].isNull() && m_service_level_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_usage_threshold_isValid = ::OpenAPI::fromJsonValue(m_usage_threshold, json[QString("usageThreshold")]);
    m_usage_threshold_isSet = !json[QString("usageThreshold")].isNull() && m_usage_threshold_isValid;
}

QString OAIVolumeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_token_isSet) {
        obj.insert(QString("creationToken"), ::OpenAPI::toJsonValue(m_creation_token));
    }
    if (m_export_policy.isSet()) {
        obj.insert(QString("exportPolicy"), ::OpenAPI::toJsonValue(m_export_policy));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("fileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_level_isSet) {
        obj.insert(QString("serviceLevel"), ::OpenAPI::toJsonValue(m_service_level));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_usage_threshold_isSet) {
        obj.insert(QString("usageThreshold"), ::OpenAPI::toJsonValue(m_usage_threshold));
    }
    return obj;
}

QString OAIVolumeProperties::getCreationToken() const {
    return m_creation_token;
}
void OAIVolumeProperties::setCreationToken(const QString &creation_token) {
    m_creation_token = creation_token;
    m_creation_token_isSet = true;
}

bool OAIVolumeProperties::is_creation_token_Set() const{
    return m_creation_token_isSet;
}

bool OAIVolumeProperties::is_creation_token_Valid() const{
    return m_creation_token_isValid;
}

OAIVolumePatchProperties_exportPolicy OAIVolumeProperties::getExportPolicy() const {
    return m_export_policy;
}
void OAIVolumeProperties::setExportPolicy(const OAIVolumePatchProperties_exportPolicy &export_policy) {
    m_export_policy = export_policy;
    m_export_policy_isSet = true;
}

bool OAIVolumeProperties::is_export_policy_Set() const{
    return m_export_policy_isSet;
}

bool OAIVolumeProperties::is_export_policy_Valid() const{
    return m_export_policy_isValid;
}

QString OAIVolumeProperties::getFileSystemId() const {
    return m_file_system_id;
}
void OAIVolumeProperties::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAIVolumeProperties::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAIVolumeProperties::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAIVolumeProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVolumeProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVolumeProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVolumeProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVolumeProperties::getServiceLevel() const {
    return m_service_level;
}
void OAIVolumeProperties::setServiceLevel(const QString &service_level) {
    m_service_level = service_level;
    m_service_level_isSet = true;
}

bool OAIVolumeProperties::is_service_level_Set() const{
    return m_service_level_isSet;
}

bool OAIVolumeProperties::is_service_level_Valid() const{
    return m_service_level_isValid;
}

QString OAIVolumeProperties::getSubnetId() const {
    return m_subnet_id;
}
void OAIVolumeProperties::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIVolumeProperties::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIVolumeProperties::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

qint64 OAIVolumeProperties::getUsageThreshold() const {
    return m_usage_threshold;
}
void OAIVolumeProperties::setUsageThreshold(const qint64 &usage_threshold) {
    m_usage_threshold = usage_threshold;
    m_usage_threshold_isSet = true;
}

bool OAIVolumeProperties::is_usage_threshold_Set() const{
    return m_usage_threshold_isSet;
}

bool OAIVolumeProperties::is_usage_threshold_Valid() const{
    return m_usage_threshold_isValid;
}

bool OAIVolumeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_token_isValid && m_service_level_isValid && true;
}

} // namespace OpenAPI
