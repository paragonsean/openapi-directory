/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2017-08-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActiveDirectory model module.
 * @module model/ActiveDirectory
 * @version 2017-08-15
 */
class ActiveDirectory {
    /**
     * Constructs a new <code>ActiveDirectory</code>.
     * Active Directory
     * @alias module:model/ActiveDirectory
     */
    constructor() { 
        
        ActiveDirectory.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActiveDirectory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActiveDirectory} obj Optional instance to populate.
     * @return {module:model/ActiveDirectory} The populated <code>ActiveDirectory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActiveDirectory();

            if (data.hasOwnProperty('activeDirectoryId')) {
                obj['activeDirectoryId'] = ApiClient.convertToType(data['activeDirectoryId'], 'String');
            }
            if (data.hasOwnProperty('dNS')) {
                obj['dNS'] = ApiClient.convertToType(data['dNS'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('organizationalUnit')) {
                obj['organizationalUnit'] = ApiClient.convertToType(data['organizationalUnit'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('sMBServerName')) {
                obj['sMBServerName'] = ApiClient.convertToType(data['sMBServerName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActiveDirectory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActiveDirectory</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activeDirectoryId'] && !(typeof data['activeDirectoryId'] === 'string' || data['activeDirectoryId'] instanceof String)) {
            throw new Error("Expected the field `activeDirectoryId` to be a primitive type in the JSON string but got " + data['activeDirectoryId']);
        }
        // ensure the json data is a string
        if (data['dNS'] && !(typeof data['dNS'] === 'string' || data['dNS'] instanceof String)) {
            throw new Error("Expected the field `dNS` to be a primitive type in the JSON string but got " + data['dNS']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['organizationalUnit'] && !(typeof data['organizationalUnit'] === 'string' || data['organizationalUnit'] instanceof String)) {
            throw new Error("Expected the field `organizationalUnit` to be a primitive type in the JSON string but got " + data['organizationalUnit']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['sMBServerName'] && !(typeof data['sMBServerName'] === 'string' || data['sMBServerName'] instanceof String)) {
            throw new Error("Expected the field `sMBServerName` to be a primitive type in the JSON string but got " + data['sMBServerName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Id of the Active Directory
 * @member {String} activeDirectoryId
 */
ActiveDirectory.prototype['activeDirectoryId'] = undefined;

/**
 * Comma separated list of DNS server IP addresses for the Active Directory domain
 * @member {String} dNS
 */
ActiveDirectory.prototype['dNS'] = undefined;

/**
 * Name of the Active Directory domain
 * @member {String} domain
 */
ActiveDirectory.prototype['domain'] = undefined;

/**
 * The Organizational Unit (OU) within the Windows Active Directory
 * @member {String} organizationalUnit
 */
ActiveDirectory.prototype['organizationalUnit'] = undefined;

/**
 * Plain text password of Active Directory domain administrator
 * @member {String} password
 */
ActiveDirectory.prototype['password'] = undefined;

/**
 * NetBIOS name of the SMB server. This name will be registered as a computer account in the AD and used to mount volumes
 * @member {String} sMBServerName
 */
ActiveDirectory.prototype['sMBServerName'] = undefined;

/**
 * Status of the Active Directory
 * @member {String} status
 */
ActiveDirectory.prototype['status'] = undefined;

/**
 * Username of Active Directory domain administrator
 * @member {String} username
 */
ActiveDirectory.prototype['username'] = undefined;






export default ActiveDirectory;

