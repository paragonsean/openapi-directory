# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volume_patch_properties_export_policy import VolumePatchPropertiesExportPolicy
from openapi_server import util


class VolumePatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_policy: VolumePatchPropertiesExportPolicy=None, service_level: str='Premium', usage_threshold: int=107374182400):
        """VolumePatchProperties - a model defined in OpenAPI

        :param export_policy: The export_policy of this VolumePatchProperties.
        :param service_level: The service_level of this VolumePatchProperties.
        :param usage_threshold: The usage_threshold of this VolumePatchProperties.
        """
        self.openapi_types = {
            'export_policy': VolumePatchPropertiesExportPolicy,
            'service_level': str,
            'usage_threshold': int
        }

        self.attribute_map = {
            'export_policy': 'exportPolicy',
            'service_level': 'serviceLevel',
            'usage_threshold': 'usageThreshold'
        }

        self._export_policy = export_policy
        self._service_level = service_level
        self._usage_threshold = usage_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumePatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The volumePatchProperties of this VolumePatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_policy(self):
        """Gets the export_policy of this VolumePatchProperties.


        :return: The export_policy of this VolumePatchProperties.
        :rtype: VolumePatchPropertiesExportPolicy
        """
        return self._export_policy

    @export_policy.setter
    def export_policy(self, export_policy):
        """Sets the export_policy of this VolumePatchProperties.


        :param export_policy: The export_policy of this VolumePatchProperties.
        :type export_policy: VolumePatchPropertiesExportPolicy
        """

        self._export_policy = export_policy

    @property
    def service_level(self):
        """Gets the service_level of this VolumePatchProperties.

        The service level of the file system

        :return: The service_level of this VolumePatchProperties.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this VolumePatchProperties.

        The service level of the file system

        :param service_level: The service_level of this VolumePatchProperties.
        :type service_level: str
        """
        allowed_values = ["Standard", "Premium", "Ultra"]  # noqa: E501
        if service_level not in allowed_values:
            raise ValueError(
                "Invalid value for `service_level` ({0}), must be one of {1}"
                .format(service_level, allowed_values)
            )

        self._service_level = service_level

    @property
    def usage_threshold(self):
        """Gets the usage_threshold of this VolumePatchProperties.

        Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.

        :return: The usage_threshold of this VolumePatchProperties.
        :rtype: int
        """
        return self._usage_threshold

    @usage_threshold.setter
    def usage_threshold(self, usage_threshold):
        """Sets the usage_threshold of this VolumePatchProperties.

        Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.

        :param usage_threshold: The usage_threshold of this VolumePatchProperties.
        :type usage_threshold: int
        """
        if usage_threshold is not None and usage_threshold > 109951162777600:
            raise ValueError("Invalid value for `usage_threshold`, must be a value less than or equal to `109951162777600`")
        if usage_threshold is not None and usage_threshold < 107374182400:
            raise ValueError("Invalid value for `usage_threshold`, must be a value greater than or equal to `107374182400`")

        self._usage_threshold = usage_threshold
