# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.volume_patch_properties_export_policy import VolumePatchPropertiesExportPolicy
import re
from openapi_server import util


class VolumeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_token: str=None, export_policy: VolumePatchPropertiesExportPolicy=None, file_system_id: str=None, provisioning_state: str=None, service_level: str='Premium', subnet_id: str=None, usage_threshold: int=107374182400):
        """VolumeProperties - a model defined in OpenAPI

        :param creation_token: The creation_token of this VolumeProperties.
        :param export_policy: The export_policy of this VolumeProperties.
        :param file_system_id: The file_system_id of this VolumeProperties.
        :param provisioning_state: The provisioning_state of this VolumeProperties.
        :param service_level: The service_level of this VolumeProperties.
        :param subnet_id: The subnet_id of this VolumeProperties.
        :param usage_threshold: The usage_threshold of this VolumeProperties.
        """
        self.openapi_types = {
            'creation_token': str,
            'export_policy': VolumePatchPropertiesExportPolicy,
            'file_system_id': str,
            'provisioning_state': str,
            'service_level': str,
            'subnet_id': str,
            'usage_threshold': int
        }

        self.attribute_map = {
            'creation_token': 'creationToken',
            'export_policy': 'exportPolicy',
            'file_system_id': 'fileSystemId',
            'provisioning_state': 'provisioningState',
            'service_level': 'serviceLevel',
            'subnet_id': 'subnetId',
            'usage_threshold': 'usageThreshold'
        }

        self._creation_token = creation_token
        self._export_policy = export_policy
        self._file_system_id = file_system_id
        self._provisioning_state = provisioning_state
        self._service_level = service_level
        self._subnet_id = subnet_id
        self._usage_threshold = usage_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The volumeProperties of this VolumeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_token(self):
        """Gets the creation_token of this VolumeProperties.

        A unique file path for the volume. Used when creating mount targets

        :return: The creation_token of this VolumeProperties.
        :rtype: str
        """
        return self._creation_token

    @creation_token.setter
    def creation_token(self, creation_token):
        """Sets the creation_token of this VolumeProperties.

        A unique file path for the volume. Used when creating mount targets

        :param creation_token: The creation_token of this VolumeProperties.
        :type creation_token: str
        """
        if creation_token is None:
            raise ValueError("Invalid value for `creation_token`, must not be `None`")

        self._creation_token = creation_token

    @property
    def export_policy(self):
        """Gets the export_policy of this VolumeProperties.


        :return: The export_policy of this VolumeProperties.
        :rtype: VolumePatchPropertiesExportPolicy
        """
        return self._export_policy

    @export_policy.setter
    def export_policy(self, export_policy):
        """Sets the export_policy of this VolumeProperties.


        :param export_policy: The export_policy of this VolumeProperties.
        :type export_policy: VolumePatchPropertiesExportPolicy
        """

        self._export_policy = export_policy

    @property
    def file_system_id(self):
        """Gets the file_system_id of this VolumeProperties.

        Unique FileSystem Identifier.

        :return: The file_system_id of this VolumeProperties.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this VolumeProperties.

        Unique FileSystem Identifier.

        :param file_system_id: The file_system_id of this VolumeProperties.
        :type file_system_id: str
        """
        if file_system_id is not None and len(file_system_id) > 36:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `36`")
        if file_system_id is not None and len(file_system_id) < 36:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `36`")
        if file_system_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._file_system_id = file_system_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VolumeProperties.

        Azure lifecycle management

        :return: The provisioning_state of this VolumeProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VolumeProperties.

        Azure lifecycle management

        :param provisioning_state: The provisioning_state of this VolumeProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_level(self):
        """Gets the service_level of this VolumeProperties.

        The service level of the file system

        :return: The service_level of this VolumeProperties.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this VolumeProperties.

        The service level of the file system

        :param service_level: The service_level of this VolumeProperties.
        :type service_level: str
        """
        allowed_values = ["Standard", "Premium", "Ultra"]  # noqa: E501
        if service_level not in allowed_values:
            raise ValueError(
                "Invalid value for `service_level` ({0}), must be one of {1}"
                .format(service_level, allowed_values)
            )

        self._service_level = service_level

    @property
    def subnet_id(self):
        """Gets the subnet_id of this VolumeProperties.

        The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes

        :return: The subnet_id of this VolumeProperties.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this VolumeProperties.

        The Azure Resource URI for a delegated subnet. Must have the delegation Microsoft.NetApp/volumes

        :param subnet_id: The subnet_id of this VolumeProperties.
        :type subnet_id: str
        """

        self._subnet_id = subnet_id

    @property
    def usage_threshold(self):
        """Gets the usage_threshold of this VolumeProperties.

        Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.

        :return: The usage_threshold of this VolumeProperties.
        :rtype: int
        """
        return self._usage_threshold

    @usage_threshold.setter
    def usage_threshold(self, usage_threshold):
        """Sets the usage_threshold of this VolumeProperties.

        Maximum storage quota allowed for a file system in bytes. This is a soft quota used for alerting only. Minimum size is 100 GiB. Upper limit is 100TiB.

        :param usage_threshold: The usage_threshold of this VolumeProperties.
        :type usage_threshold: int
        """
        if usage_threshold is not None and usage_threshold > 109951162777600:
            raise ValueError("Invalid value for `usage_threshold`, must be a value less than or equal to `109951162777600`")
        if usage_threshold is not None and usage_threshold < 107374182400:
            raise ValueError("Invalid value for `usage_threshold`, must be a value greater than or equal to `107374182400`")

        self._usage_threshold = usage_threshold
