# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class MountTargetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_ip: str=None, file_system_id: str=None, gateway: str=None, ip_address: str=None, mount_target_id: str=None, netmask: str=None, provisioning_state: str=None, smb_server_fqdn: str=None, start_ip: str=None, subnet: str=None):
        """MountTargetProperties - a model defined in OpenAPI

        :param end_ip: The end_ip of this MountTargetProperties.
        :param file_system_id: The file_system_id of this MountTargetProperties.
        :param gateway: The gateway of this MountTargetProperties.
        :param ip_address: The ip_address of this MountTargetProperties.
        :param mount_target_id: The mount_target_id of this MountTargetProperties.
        :param netmask: The netmask of this MountTargetProperties.
        :param provisioning_state: The provisioning_state of this MountTargetProperties.
        :param smb_server_fqdn: The smb_server_fqdn of this MountTargetProperties.
        :param start_ip: The start_ip of this MountTargetProperties.
        :param subnet: The subnet of this MountTargetProperties.
        """
        self.openapi_types = {
            'end_ip': str,
            'file_system_id': str,
            'gateway': str,
            'ip_address': str,
            'mount_target_id': str,
            'netmask': str,
            'provisioning_state': str,
            'smb_server_fqdn': str,
            'start_ip': str,
            'subnet': str
        }

        self.attribute_map = {
            'end_ip': 'endIp',
            'file_system_id': 'fileSystemId',
            'gateway': 'gateway',
            'ip_address': 'ipAddress',
            'mount_target_id': 'mountTargetId',
            'netmask': 'netmask',
            'provisioning_state': 'provisioningState',
            'smb_server_fqdn': 'smbServerFqdn',
            'start_ip': 'startIp',
            'subnet': 'subnet'
        }

        self._end_ip = end_ip
        self._file_system_id = file_system_id
        self._gateway = gateway
        self._ip_address = ip_address
        self._mount_target_id = mount_target_id
        self._netmask = netmask
        self._provisioning_state = provisioning_state
        self._smb_server_fqdn = smb_server_fqdn
        self._start_ip = start_ip
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MountTargetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The mountTargetProperties of this MountTargetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_ip(self):
        """Gets the end_ip of this MountTargetProperties.

        The end of IPv4 address range to use when creating a new mount target

        :return: The end_ip of this MountTargetProperties.
        :rtype: str
        """
        return self._end_ip

    @end_ip.setter
    def end_ip(self, end_ip):
        """Sets the end_ip of this MountTargetProperties.

        The end of IPv4 address range to use when creating a new mount target

        :param end_ip: The end_ip of this MountTargetProperties.
        :type end_ip: str
        """

        self._end_ip = end_ip

    @property
    def file_system_id(self):
        """Gets the file_system_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :return: The file_system_id of this MountTargetProperties.
        :rtype: str
        """
        return self._file_system_id

    @file_system_id.setter
    def file_system_id(self, file_system_id):
        """Sets the file_system_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :param file_system_id: The file_system_id of this MountTargetProperties.
        :type file_system_id: str
        """
        if file_system_id is None:
            raise ValueError("Invalid value for `file_system_id`, must not be `None`")
        if file_system_id is not None and len(file_system_id) > 36:
            raise ValueError("Invalid value for `file_system_id`, length must be less than or equal to `36`")
        if file_system_id is not None and len(file_system_id) < 36:
            raise ValueError("Invalid value for `file_system_id`, length must be greater than or equal to `36`")
        if file_system_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', file_system_id):
            raise ValueError("Invalid value for `file_system_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._file_system_id = file_system_id

    @property
    def gateway(self):
        """Gets the gateway of this MountTargetProperties.

        The gateway of the IPv4 address range to use when creating a new mount target

        :return: The gateway of this MountTargetProperties.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this MountTargetProperties.

        The gateway of the IPv4 address range to use when creating a new mount target

        :param gateway: The gateway of this MountTargetProperties.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this MountTargetProperties.

        The mount target's IPv4 address

        :return: The ip_address of this MountTargetProperties.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this MountTargetProperties.

        The mount target's IPv4 address

        :param ip_address: The ip_address of this MountTargetProperties.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def mount_target_id(self):
        """Gets the mount_target_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :return: The mount_target_id of this MountTargetProperties.
        :rtype: str
        """
        return self._mount_target_id

    @mount_target_id.setter
    def mount_target_id(self, mount_target_id):
        """Sets the mount_target_id of this MountTargetProperties.

        UUID v4 used to identify the MountTarget

        :param mount_target_id: The mount_target_id of this MountTargetProperties.
        :type mount_target_id: str
        """
        if mount_target_id is not None and len(mount_target_id) > 36:
            raise ValueError("Invalid value for `mount_target_id`, length must be less than or equal to `36`")
        if mount_target_id is not None and len(mount_target_id) < 36:
            raise ValueError("Invalid value for `mount_target_id`, length must be greater than or equal to `36`")
        if mount_target_id is not None and not re.search(r'^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', mount_target_id):
            raise ValueError("Invalid value for `mount_target_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")

        self._mount_target_id = mount_target_id

    @property
    def netmask(self):
        """Gets the netmask of this MountTargetProperties.

        The netmask of the IPv4 address range to use when creating a new mount target

        :return: The netmask of this MountTargetProperties.
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this MountTargetProperties.

        The netmask of the IPv4 address range to use when creating a new mount target

        :param netmask: The netmask of this MountTargetProperties.
        :type netmask: str
        """

        self._netmask = netmask

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this MountTargetProperties.

        Azure lifecycle management

        :return: The provisioning_state of this MountTargetProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this MountTargetProperties.

        Azure lifecycle management

        :param provisioning_state: The provisioning_state of this MountTargetProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def smb_server_fqdn(self):
        """Gets the smb_server_fqdn of this MountTargetProperties.

        The SMB server's Fully Qualified Domain Name, FQDN

        :return: The smb_server_fqdn of this MountTargetProperties.
        :rtype: str
        """
        return self._smb_server_fqdn

    @smb_server_fqdn.setter
    def smb_server_fqdn(self, smb_server_fqdn):
        """Sets the smb_server_fqdn of this MountTargetProperties.

        The SMB server's Fully Qualified Domain Name, FQDN

        :param smb_server_fqdn: The smb_server_fqdn of this MountTargetProperties.
        :type smb_server_fqdn: str
        """

        self._smb_server_fqdn = smb_server_fqdn

    @property
    def start_ip(self):
        """Gets the start_ip of this MountTargetProperties.

        The start of IPv4 address range to use when creating a new mount target

        :return: The start_ip of this MountTargetProperties.
        :rtype: str
        """
        return self._start_ip

    @start_ip.setter
    def start_ip(self, start_ip):
        """Sets the start_ip of this MountTargetProperties.

        The start of IPv4 address range to use when creating a new mount target

        :param start_ip: The start_ip of this MountTargetProperties.
        :type start_ip: str
        """

        self._start_ip = start_ip

    @property
    def subnet(self):
        """Gets the subnet of this MountTargetProperties.

        The subnet

        :return: The subnet of this MountTargetProperties.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this MountTargetProperties.

        The subnet

        :param subnet: The subnet of this MountTargetProperties.
        :type subnet: str
        """

        self._subnet = subnet
