# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceNameAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_available: bool=None, message: str=None, reason: str=None):
        """ResourceNameAvailability - a model defined in OpenAPI

        :param is_available: The is_available of this ResourceNameAvailability.
        :param message: The message of this ResourceNameAvailability.
        :param reason: The reason of this ResourceNameAvailability.
        """
        self.openapi_types = {
            'is_available': bool,
            'message': str,
            'reason': str
        }

        self.attribute_map = {
            'is_available': 'isAvailable',
            'message': 'message',
            'reason': 'reason'
        }

        self._is_available = is_available
        self._message = message
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceNameAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceNameAvailability of this ResourceNameAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_available(self):
        """Gets the is_available of this ResourceNameAvailability.

        <code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both.

        :return: The is_available of this ResourceNameAvailability.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this ResourceNameAvailability.

        <code>true</code> indicates name is valid and available. <code>false</code> indicates the name is invalid, unavailable, or both.

        :param is_available: The is_available of this ResourceNameAvailability.
        :type is_available: bool
        """

        self._is_available = is_available

    @property
    def message(self):
        """Gets the message of this ResourceNameAvailability.

        If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name.

        :return: The message of this ResourceNameAvailability.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResourceNameAvailability.

        If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that resource name is already in use, and direct them to select a different name.

        :param message: The message of this ResourceNameAvailability.
        :type message: str
        """

        self._message = message

    @property
    def reason(self):
        """Gets the reason of this ResourceNameAvailability.

        <code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable.

        :return: The reason of this ResourceNameAvailability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ResourceNameAvailability.

        <code>Invalid</code> indicates the name provided does not match Azure App Service naming requirements. <code>AlreadyExists</code> indicates that the name is already in use and is therefore unavailable.

        :param reason: The reason of this ResourceNameAvailability.
        :type reason: str
        """
        allowed_values = ["Invalid", "AlreadyExists"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
