# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportPolicyRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_clients: str=None, cifs: bool=None, nfsv3: bool=None, nfsv4: bool=None, rule_index: int=None, unix_read_only: bool=None, unix_read_write: bool=None):
        """ExportPolicyRule - a model defined in OpenAPI

        :param allowed_clients: The allowed_clients of this ExportPolicyRule.
        :param cifs: The cifs of this ExportPolicyRule.
        :param nfsv3: The nfsv3 of this ExportPolicyRule.
        :param nfsv4: The nfsv4 of this ExportPolicyRule.
        :param rule_index: The rule_index of this ExportPolicyRule.
        :param unix_read_only: The unix_read_only of this ExportPolicyRule.
        :param unix_read_write: The unix_read_write of this ExportPolicyRule.
        """
        self.openapi_types = {
            'allowed_clients': str,
            'cifs': bool,
            'nfsv3': bool,
            'nfsv4': bool,
            'rule_index': int,
            'unix_read_only': bool,
            'unix_read_write': bool
        }

        self.attribute_map = {
            'allowed_clients': 'allowedClients',
            'cifs': 'cifs',
            'nfsv3': 'nfsv3',
            'nfsv4': 'nfsv4',
            'rule_index': 'ruleIndex',
            'unix_read_only': 'unixReadOnly',
            'unix_read_write': 'unixReadWrite'
        }

        self._allowed_clients = allowed_clients
        self._cifs = cifs
        self._nfsv3 = nfsv3
        self._nfsv4 = nfsv4
        self._rule_index = rule_index
        self._unix_read_only = unix_read_only
        self._unix_read_write = unix_read_write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportPolicyRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The exportPolicyRule of this ExportPolicyRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_clients(self):
        """Gets the allowed_clients of this ExportPolicyRule.

        Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names

        :return: The allowed_clients of this ExportPolicyRule.
        :rtype: str
        """
        return self._allowed_clients

    @allowed_clients.setter
    def allowed_clients(self, allowed_clients):
        """Sets the allowed_clients of this ExportPolicyRule.

        Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names

        :param allowed_clients: The allowed_clients of this ExportPolicyRule.
        :type allowed_clients: str
        """

        self._allowed_clients = allowed_clients

    @property
    def cifs(self):
        """Gets the cifs of this ExportPolicyRule.

        Allows CIFS protocol

        :return: The cifs of this ExportPolicyRule.
        :rtype: bool
        """
        return self._cifs

    @cifs.setter
    def cifs(self, cifs):
        """Sets the cifs of this ExportPolicyRule.

        Allows CIFS protocol

        :param cifs: The cifs of this ExportPolicyRule.
        :type cifs: bool
        """

        self._cifs = cifs

    @property
    def nfsv3(self):
        """Gets the nfsv3 of this ExportPolicyRule.

        Allows NFSv3 protocol

        :return: The nfsv3 of this ExportPolicyRule.
        :rtype: bool
        """
        return self._nfsv3

    @nfsv3.setter
    def nfsv3(self, nfsv3):
        """Sets the nfsv3 of this ExportPolicyRule.

        Allows NFSv3 protocol

        :param nfsv3: The nfsv3 of this ExportPolicyRule.
        :type nfsv3: bool
        """

        self._nfsv3 = nfsv3

    @property
    def nfsv4(self):
        """Gets the nfsv4 of this ExportPolicyRule.

        Deprecated: Will use the NFSv4.1 protocol, please use swagger version 2019-07-01 or later

        :return: The nfsv4 of this ExportPolicyRule.
        :rtype: bool
        """
        return self._nfsv4

    @nfsv4.setter
    def nfsv4(self, nfsv4):
        """Sets the nfsv4 of this ExportPolicyRule.

        Deprecated: Will use the NFSv4.1 protocol, please use swagger version 2019-07-01 or later

        :param nfsv4: The nfsv4 of this ExportPolicyRule.
        :type nfsv4: bool
        """

        self._nfsv4 = nfsv4

    @property
    def rule_index(self):
        """Gets the rule_index of this ExportPolicyRule.

        Order index

        :return: The rule_index of this ExportPolicyRule.
        :rtype: int
        """
        return self._rule_index

    @rule_index.setter
    def rule_index(self, rule_index):
        """Sets the rule_index of this ExportPolicyRule.

        Order index

        :param rule_index: The rule_index of this ExportPolicyRule.
        :type rule_index: int
        """

        self._rule_index = rule_index

    @property
    def unix_read_only(self):
        """Gets the unix_read_only of this ExportPolicyRule.

        Read only access

        :return: The unix_read_only of this ExportPolicyRule.
        :rtype: bool
        """
        return self._unix_read_only

    @unix_read_only.setter
    def unix_read_only(self, unix_read_only):
        """Sets the unix_read_only of this ExportPolicyRule.

        Read only access

        :param unix_read_only: The unix_read_only of this ExportPolicyRule.
        :type unix_read_only: bool
        """

        self._unix_read_only = unix_read_only

    @property
    def unix_read_write(self):
        """Gets the unix_read_write of this ExportPolicyRule.

        Read and write access

        :return: The unix_read_write of this ExportPolicyRule.
        :rtype: bool
        """
        return self._unix_read_write

    @unix_read_write.setter
    def unix_read_write(self, unix_read_write):
        """Sets the unix_read_write of this ExportPolicyRule.

        Read and write access

        :param unix_read_write: The unix_read_write of this ExportPolicyRule.
        :type unix_read_write: bool
        """

        self._unix_read_write = unix_read_write
