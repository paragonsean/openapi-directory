# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PoolPatchProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_level: str='Premium', size: int=4398046511104):
        """PoolPatchProperties - a model defined in OpenAPI

        :param service_level: The service_level of this PoolPatchProperties.
        :param size: The size of this PoolPatchProperties.
        """
        self.openapi_types = {
            'service_level': str,
            'size': int
        }

        self.attribute_map = {
            'service_level': 'serviceLevel',
            'size': 'size'
        }

        self._service_level = service_level
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PoolPatchProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The poolPatchProperties of this PoolPatchProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_level(self):
        """Gets the service_level of this PoolPatchProperties.

        The service level of the file system

        :return: The service_level of this PoolPatchProperties.
        :rtype: str
        """
        return self._service_level

    @service_level.setter
    def service_level(self, service_level):
        """Sets the service_level of this PoolPatchProperties.

        The service level of the file system

        :param service_level: The service_level of this PoolPatchProperties.
        :type service_level: str
        """
        allowed_values = ["Standard", "Premium", "Ultra"]  # noqa: E501
        if service_level not in allowed_values:
            raise ValueError(
                "Invalid value for `service_level` ({0}), must be one of {1}"
                .format(service_level, allowed_values)
            )

        self._service_level = service_level

    @property
    def size(self):
        """Gets the size of this PoolPatchProperties.

        Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).

        :return: The size of this PoolPatchProperties.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PoolPatchProperties.

        Provisioned size of the pool (in bytes). Allowed values are in 4TiB chunks (value must be multiply of 4398046511104).

        :param size: The size of this PoolPatchProperties.
        :type size: int
        """
        if size is not None and size > 549755813888000:
            raise ValueError("Invalid value for `size`, must be a value less than or equal to `549755813888000`")
        if size is not None and size < 4398046511104:
            raise ValueError("Invalid value for `size`, must be a value greater than or equal to `4398046511104`")

        self._size = size
