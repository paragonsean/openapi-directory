# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplicationObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint_type: str=None, remote_volume_resource_id: str=None, replication_id: str=None, replication_schedule: str=None):
        """ReplicationObject - a model defined in OpenAPI

        :param endpoint_type: The endpoint_type of this ReplicationObject.
        :param remote_volume_resource_id: The remote_volume_resource_id of this ReplicationObject.
        :param replication_id: The replication_id of this ReplicationObject.
        :param replication_schedule: The replication_schedule of this ReplicationObject.
        """
        self.openapi_types = {
            'endpoint_type': str,
            'remote_volume_resource_id': str,
            'replication_id': str,
            'replication_schedule': str
        }

        self.attribute_map = {
            'endpoint_type': 'endpointType',
            'remote_volume_resource_id': 'remoteVolumeResourceId',
            'replication_id': 'replicationId',
            'replication_schedule': 'replicationSchedule'
        }

        self._endpoint_type = endpoint_type
        self._remote_volume_resource_id = remote_volume_resource_id
        self._replication_id = replication_id
        self._replication_schedule = replication_schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The replicationObject of this ReplicationObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint_type(self):
        """Gets the endpoint_type of this ReplicationObject.

        Indicates whether the local volume is the source or destination for the Volume Replication

        :return: The endpoint_type of this ReplicationObject.
        :rtype: str
        """
        return self._endpoint_type

    @endpoint_type.setter
    def endpoint_type(self, endpoint_type):
        """Sets the endpoint_type of this ReplicationObject.

        Indicates whether the local volume is the source or destination for the Volume Replication

        :param endpoint_type: The endpoint_type of this ReplicationObject.
        :type endpoint_type: str
        """
        if endpoint_type is None:
            raise ValueError("Invalid value for `endpoint_type`, must not be `None`")

        self._endpoint_type = endpoint_type

    @property
    def remote_volume_resource_id(self):
        """Gets the remote_volume_resource_id of this ReplicationObject.

        The resource ID of the remote volume.

        :return: The remote_volume_resource_id of this ReplicationObject.
        :rtype: str
        """
        return self._remote_volume_resource_id

    @remote_volume_resource_id.setter
    def remote_volume_resource_id(self, remote_volume_resource_id):
        """Sets the remote_volume_resource_id of this ReplicationObject.

        The resource ID of the remote volume.

        :param remote_volume_resource_id: The remote_volume_resource_id of this ReplicationObject.
        :type remote_volume_resource_id: str
        """
        if remote_volume_resource_id is None:
            raise ValueError("Invalid value for `remote_volume_resource_id`, must not be `None`")

        self._remote_volume_resource_id = remote_volume_resource_id

    @property
    def replication_id(self):
        """Gets the replication_id of this ReplicationObject.

        Id

        :return: The replication_id of this ReplicationObject.
        :rtype: str
        """
        return self._replication_id

    @replication_id.setter
    def replication_id(self, replication_id):
        """Sets the replication_id of this ReplicationObject.

        Id

        :param replication_id: The replication_id of this ReplicationObject.
        :type replication_id: str
        """

        self._replication_id = replication_id

    @property
    def replication_schedule(self):
        """Gets the replication_schedule of this ReplicationObject.

        Schedule

        :return: The replication_schedule of this ReplicationObject.
        :rtype: str
        """
        return self._replication_schedule

    @replication_schedule.setter
    def replication_schedule(self, replication_schedule):
        """Sets the replication_schedule of this ReplicationObject.

        Schedule

        :param replication_schedule: The replication_schedule of this ReplicationObject.
        :type replication_schedule: str
        """
        if replication_schedule is None:
            raise ValueError("Invalid value for `replication_schedule`, must not be `None`")

        self._replication_schedule = replication_schedule
