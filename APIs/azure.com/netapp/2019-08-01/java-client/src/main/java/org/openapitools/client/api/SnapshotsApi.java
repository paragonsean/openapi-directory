/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Snapshot;
import org.openapitools.client.model.SnapshotPatch;
import org.openapitools.client.model.SnapshotsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SnapshotsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SnapshotsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SnapshotsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for snapshotsCreate
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snapshot created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, Snapshot body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "snapshotName" + "}", localVarApiClient.escapeString(snapshotName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snapshotsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, Snapshot body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling snapshotsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling snapshotsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling snapshotsCreate(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling snapshotsCreate(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling snapshotsCreate(Async)");
        }

        // verify the required parameter 'snapshotName' is set
        if (snapshotName == null) {
            throw new ApiException("Missing the required parameter 'snapshotName' when calling snapshotsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling snapshotsCreate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling snapshotsCreate(Async)");
        }

        return snapshotsCreateCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body, _callback);

    }

    /**
     * Create a snapshot
     * Create the specified snapshot within the given volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snapshot created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Snapshot snapshotsCreate(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, Snapshot body) throws ApiException {
        ApiResponse<Snapshot> localVarResp = snapshotsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * Create a snapshot
     * Create the specified snapshot within the given volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snapshot created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Snapshot> snapshotsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, Snapshot body) throws ApiException {
        okhttp3.Call localVarCall = snapshotsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a snapshot (asynchronously)
     * Create the specified snapshot within the given volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Snapshot created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, Snapshot body, final ApiCallback<Snapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = snapshotsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for snapshotsDelete
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "snapshotName" + "}", localVarApiClient.escapeString(snapshotName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snapshotsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling snapshotsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling snapshotsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling snapshotsDelete(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling snapshotsDelete(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling snapshotsDelete(Async)");
        }

        // verify the required parameter 'snapshotName' is set
        if (snapshotName == null) {
            throw new ApiException("Missing the required parameter 'snapshotName' when calling snapshotsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling snapshotsDelete(Async)");
        }

        return snapshotsDeleteCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, _callback);

    }

    /**
     * Delete a snapshot
     * Delete snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void snapshotsDelete(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion) throws ApiException {
        snapshotsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion);
    }

    /**
     * Delete a snapshot
     * Delete snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> snapshotsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = snapshotsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a snapshot (asynchronously)
     * Delete snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = snapshotsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for snapshotsGet
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsGetCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "snapshotName" + "}", localVarApiClient.escapeString(snapshotName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snapshotsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling snapshotsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling snapshotsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling snapshotsGet(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling snapshotsGet(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling snapshotsGet(Async)");
        }

        // verify the required parameter 'snapshotName' is set
        if (snapshotName == null) {
            throw new ApiException("Missing the required parameter 'snapshotName' when calling snapshotsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling snapshotsGet(Async)");
        }

        return snapshotsGetCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, _callback);

    }

    /**
     * Describe a snapshot
     * Get details of the specified snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Snapshot snapshotsGet(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion) throws ApiException {
        ApiResponse<Snapshot> localVarResp = snapshotsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Describe a snapshot
     * Get details of the specified snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Snapshot> snapshotsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = snapshotsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe a snapshot (asynchronously)
     * Get details of the specified snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, final ApiCallback<Snapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = snapshotsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for snapshotsList
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsListCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snapshotsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling snapshotsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling snapshotsList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling snapshotsList(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling snapshotsList(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling snapshotsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling snapshotsList(Async)");
        }

        return snapshotsListCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, _callback);

    }

    /**
     * Describe all snapshots
     * List all snapshots associated with the volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return SnapshotsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SnapshotsList snapshotsList(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion) throws ApiException {
        ApiResponse<SnapshotsList> localVarResp = snapshotsListWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Describe all snapshots
     * List all snapshots associated with the volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;SnapshotsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SnapshotsList> snapshotsListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = snapshotsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SnapshotsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe all snapshots (asynchronously)
     * List all snapshots associated with the volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsListAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback<SnapshotsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = snapshotsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SnapshotsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for snapshotsUpdate
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Update request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, SnapshotPatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/snapshots/{snapshotName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()))
            .replace("{" + "snapshotName" + "}", localVarApiClient.escapeString(snapshotName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call snapshotsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, SnapshotPatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling snapshotsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling snapshotsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling snapshotsUpdate(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling snapshotsUpdate(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling snapshotsUpdate(Async)");
        }

        // verify the required parameter 'snapshotName' is set
        if (snapshotName == null) {
            throw new ApiException("Missing the required parameter 'snapshotName' when calling snapshotsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling snapshotsUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling snapshotsUpdate(Async)");
        }

        return snapshotsUpdateCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body, _callback);

    }

    /**
     * Update a snapshot
     * Patch a snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @return Snapshot
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Update request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Snapshot snapshotsUpdate(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, SnapshotPatch body) throws ApiException {
        ApiResponse<Snapshot> localVarResp = snapshotsUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * Update a snapshot
     * Patch a snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @return ApiResponse&lt;Snapshot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Update request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Snapshot> snapshotsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, SnapshotPatch body) throws ApiException {
        okhttp3.Call localVarCall = snapshotsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a snapshot (asynchronously)
     * Patch a snapshot
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param snapshotName The name of the mount target (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Snapshot object supplied in the body of the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Update request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call snapshotsUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String snapshotName, String apiVersion, SnapshotPatch body, final ApiCallback<Snapshot> _callback) throws ApiException {

        okhttp3.Call localVarCall = snapshotsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, snapshotName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<Snapshot>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
