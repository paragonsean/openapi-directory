/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Volume;
import org.openapitools.client.model.VolumeList;
import org.openapitools.client.model.VolumePatch;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VolumesApi
 */
@Disabled
public class VolumesApiTest {

    private final VolumesApi api = new VolumesApi();

    /**
     * Create or Update a volume
     *
     * Create or update the specified volume within the capacity pool
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        Volume body = null;
        Volume response = api.volumesCreateOrUpdate(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body);
        // TODO: test validations
    }

    /**
     * Delete a volume
     *
     * Delete the specified volume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        api.volumesDelete(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Describe a volume
     *
     * Get the details of the specified volume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        Volume response = api.volumesGet(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Describe all volumes
     *
     * List all volumes within the capacity pool
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String apiVersion = null;
        VolumeList response = api.volumesList(subscriptionId, resourceGroupName, accountName, poolName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update a volume
     *
     * Patch the specified volume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        VolumePatch body = null;
        Volume response = api.volumesUpdate(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body);
        // TODO: test validations
    }

}
