/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotProperties::OAISnapshotProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotProperties::OAISnapshotProperties() {
    this->initializeModel();
}

OAISnapshotProperties::~OAISnapshotProperties() {}

void OAISnapshotProperties::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_file_system_id_isSet = false;
    m_file_system_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_snapshot_id_isSet = false;
    m_snapshot_id_isValid = false;
}

void OAISnapshotProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotProperties::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_file_system_id_isValid = ::OpenAPI::fromJsonValue(m_file_system_id, json[QString("fileSystemId")]);
    m_file_system_id_isSet = !json[QString("fileSystemId")].isNull() && m_file_system_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_snapshot_id, json[QString("snapshotId")]);
    m_snapshot_id_isSet = !json[QString("snapshotId")].isNull() && m_snapshot_id_isValid;
}

QString OAISnapshotProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_file_system_id_isSet) {
        obj.insert(QString("fileSystemId"), ::OpenAPI::toJsonValue(m_file_system_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_snapshot_id_isSet) {
        obj.insert(QString("snapshotId"), ::OpenAPI::toJsonValue(m_snapshot_id));
    }
    return obj;
}

QDateTime OAISnapshotProperties::getCreated() const {
    return m_created;
}
void OAISnapshotProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAISnapshotProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAISnapshotProperties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAISnapshotProperties::getFileSystemId() const {
    return m_file_system_id;
}
void OAISnapshotProperties::setFileSystemId(const QString &file_system_id) {
    m_file_system_id = file_system_id;
    m_file_system_id_isSet = true;
}

bool OAISnapshotProperties::is_file_system_id_Set() const{
    return m_file_system_id_isSet;
}

bool OAISnapshotProperties::is_file_system_id_Valid() const{
    return m_file_system_id_isValid;
}

QString OAISnapshotProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAISnapshotProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAISnapshotProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAISnapshotProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAISnapshotProperties::getSnapshotId() const {
    return m_snapshot_id;
}
void OAISnapshotProperties::setSnapshotId(const QString &snapshot_id) {
    m_snapshot_id = snapshot_id;
    m_snapshot_id_isSet = true;
}

bool OAISnapshotProperties::is_snapshot_id_Set() const{
    return m_snapshot_id_isSet;
}

bool OAISnapshotProperties::is_snapshot_id_Valid() const{
    return m_snapshot_id_isValid;
}

bool OAISnapshotProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
