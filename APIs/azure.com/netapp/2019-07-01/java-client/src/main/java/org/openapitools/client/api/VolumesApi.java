/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Volume;
import org.openapitools.client.model.VolumeList;
import org.openapitools.client.model.VolumePatch;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VolumesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VolumesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VolumesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for volumesCreateOrUpdate
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - volume updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Volume created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, Volume body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, Volume body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling volumesCreateOrUpdate(Async)");
        }

        return volumesCreateOrUpdateCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body, _callback);

    }

    /**
     * Create or Update a volume
     * Create or update the specified volume within the capacity pool
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @return Volume
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - volume updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Volume created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Volume volumesCreateOrUpdate(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, Volume body) throws ApiException {
        ApiResponse<Volume> localVarResp = volumesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * Create or Update a volume
     * Create or update the specified volume within the capacity pool
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @return ApiResponse&lt;Volume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - volume updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Volume created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Volume> volumesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, Volume body) throws ApiException {
        okhttp3.Call localVarCall = volumesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update a volume (asynchronously)
     * Create or update the specified volume within the capacity pool
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ok - volume updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Volume created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, Volume body, final ApiCallback<Volume> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesDelete
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesDelete(Async)");
        }

        return volumesDeleteCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, _callback);

    }

    /**
     * Delete a volume
     * Delete the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void volumesDelete(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion) throws ApiException {
        volumesDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
    }

    /**
     * Delete a volume
     * Delete the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> volumesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a volume (asynchronously)
     * Delete the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent -- Resource does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesGet
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesGetCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesGet(Async)");
        }

        return volumesGetCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, _callback);

    }

    /**
     * Describe a volume
     * Get the details of the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return Volume
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Volume volumesGet(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion) throws ApiException {
        ApiResponse<Volume> localVarResp = volumesGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Describe a volume
     * Get the details of the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Volume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Volume> volumesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe a volume (asynchronously)
     * Get the details of the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesGetAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, final ApiCallback<Volume> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesList
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling volumesList(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling volumesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesList(Async)");
        }

        return volumesListCall(subscriptionId, resourceGroupName, accountName, poolName, apiVersion, _callback);

    }

    /**
     * Describe all volumes
     * List all volumes within the capacity pool
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return VolumeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public VolumeList volumesList(String subscriptionId, String resourceGroupName, String accountName, String poolName, String apiVersion) throws ApiException {
        ApiResponse<VolumeList> localVarResp = volumesListWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Describe all volumes
     * List all volumes within the capacity pool
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;VolumeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VolumeList> volumesListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = volumesListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VolumeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describe all volumes (asynchronously)
     * List all volumes within the capacity pool
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesListAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String apiVersion, final ApiCallback<VolumeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VolumeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for volumesUpdate
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, VolumePatch body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "poolName" + "}", localVarApiClient.escapeString(poolName.toString()))
            .replace("{" + "volumeName" + "}", localVarApiClient.escapeString(volumeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, VolumePatch body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling volumesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling volumesUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling volumesUpdate(Async)");
        }

        // verify the required parameter 'poolName' is set
        if (poolName == null) {
            throw new ApiException("Missing the required parameter 'poolName' when calling volumesUpdate(Async)");
        }

        // verify the required parameter 'volumeName' is set
        if (volumeName == null) {
            throw new ApiException("Missing the required parameter 'volumeName' when calling volumesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling volumesUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling volumesUpdate(Async)");
        }

        return volumesUpdateCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body, _callback);

    }

    /**
     * Update a volume
     * Patch the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @return Volume
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Volume volumesUpdate(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, VolumePatch body) throws ApiException {
        ApiResponse<Volume> localVarResp = volumesUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * Update a volume
     * Patch the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @return ApiResponse&lt;Volume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Volume> volumesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, VolumePatch body) throws ApiException {
        okhttp3.Call localVarCall = volumesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a volume (asynchronously)
     * Patch the specified volume
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param accountName The name of the NetApp account (required)
     * @param poolName The name of the capacity pool (required)
     * @param volumeName The name of the volume (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param body Volume object supplied in the body of the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted -- Create, update or delete request accepted; operation will complete asynchronously </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call volumesUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String poolName, String volumeName, String apiVersion, VolumePatch body, final ApiCallback<Volume> _callback) throws ApiException {

        okhttp3.Call localVarCall = volumesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<Volume>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
