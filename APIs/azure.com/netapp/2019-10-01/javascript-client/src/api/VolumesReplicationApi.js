/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthorizeRequest from '../model/AuthorizeRequest';
import ReplicationStatus from '../model/ReplicationStatus';

/**
* VolumesReplication service.
* @module api/VolumesReplicationApi
* @version 2019-10-01
*/
export default class VolumesReplicationApi {

    /**
    * Constructs a new VolumesReplicationApi. 
    * @alias module:api/VolumesReplicationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the volumesAuthorizeReplication operation.
     * @callback module:api/VolumesReplicationApi~volumesAuthorizeReplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize source volume replication
     * Authorize the replication connection on the source volume
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} accountName The name of the NetApp account
     * @param {String} poolName The name of the capacity pool
     * @param {String} volumeName The name of the volume
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/AuthorizeRequest} body authorize request object supplied in the body of the operation.
     * @param {module:api/VolumesReplicationApi~volumesAuthorizeReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    volumesAuthorizeReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body, callback) {
      let postBody = body;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling volumesAuthorizeReplication");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling volumesAuthorizeReplication");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling volumesAuthorizeReplication");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling volumesAuthorizeReplication");
      }
      // verify the required parameter 'volumeName' is set
      if (volumeName === undefined || volumeName === null) {
        throw new Error("Missing the required parameter 'volumeName' when calling volumesAuthorizeReplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling volumesAuthorizeReplication");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling volumesAuthorizeReplication");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'volumeName': volumeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/authorizeReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesBreakReplication operation.
     * @callback module:api/VolumesReplicationApi~volumesBreakReplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Break volume replication
     * Break the replication connection on the destination volume
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} accountName The name of the NetApp account
     * @param {String} poolName The name of the capacity pool
     * @param {String} volumeName The name of the volume
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/VolumesReplicationApi~volumesBreakReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    volumesBreakReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling volumesBreakReplication");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling volumesBreakReplication");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling volumesBreakReplication");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling volumesBreakReplication");
      }
      // verify the required parameter 'volumeName' is set
      if (volumeName === undefined || volumeName === null) {
        throw new Error("Missing the required parameter 'volumeName' when calling volumesBreakReplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling volumesBreakReplication");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'volumeName': volumeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/breakReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesDeleteReplication operation.
     * @callback module:api/VolumesReplicationApi~volumesDeleteReplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete volume replication
     * Delete the replication connection on the destination volume, and send release to the source replication
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} accountName The name of the NetApp account
     * @param {String} poolName The name of the capacity pool
     * @param {String} volumeName The name of the volume
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/VolumesReplicationApi~volumesDeleteReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    volumesDeleteReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling volumesDeleteReplication");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling volumesDeleteReplication");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling volumesDeleteReplication");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling volumesDeleteReplication");
      }
      // verify the required parameter 'volumeName' is set
      if (volumeName === undefined || volumeName === null) {
        throw new Error("Missing the required parameter 'volumeName' when calling volumesDeleteReplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling volumesDeleteReplication");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'volumeName': volumeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/deleteReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesReplicationStatus operation.
     * @callback module:api/VolumesReplicationApi~volumesReplicationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get volume replication status
     * Get the status of the replication
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} accountName The name of the NetApp account
     * @param {String} poolName The name of the capacity pool
     * @param {String} volumeName The name of the volume
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/VolumesReplicationApi~volumesReplicationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationStatus}
     */
    volumesReplicationStatus(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling volumesReplicationStatus");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling volumesReplicationStatus");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling volumesReplicationStatus");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling volumesReplicationStatus");
      }
      // verify the required parameter 'volumeName' is set
      if (volumeName === undefined || volumeName === null) {
        throw new Error("Missing the required parameter 'volumeName' when calling volumesReplicationStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling volumesReplicationStatus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'volumeName': volumeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReplicationStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/replicationStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the volumesResyncReplication operation.
     * @callback module:api/VolumesReplicationApi~volumesResyncReplicationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resync volume replication
     * Resync the connection on the destination volume. If the operation is ran on the source volume it will reverse-resync the connection and sync from source to destination.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} accountName The name of the NetApp account
     * @param {String} poolName The name of the capacity pool
     * @param {String} volumeName The name of the volume
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/VolumesReplicationApi~volumesResyncReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    volumesResyncReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling volumesResyncReplication");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling volumesResyncReplication");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling volumesResyncReplication");
      }
      // verify the required parameter 'poolName' is set
      if (poolName === undefined || poolName === null) {
        throw new Error("Missing the required parameter 'poolName' when calling volumesResyncReplication");
      }
      // verify the required parameter 'volumeName' is set
      if (volumeName === undefined || volumeName === null) {
        throw new Error("Missing the required parameter 'volumeName' when calling volumesResyncReplication");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling volumesResyncReplication");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'poolName': poolName,
        'volumeName': volumeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetApp/netAppAccounts/{accountName}/capacityPools/{poolName}/volumes/{volumeName}/resyncReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
