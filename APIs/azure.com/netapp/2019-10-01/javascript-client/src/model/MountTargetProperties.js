/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MountTargetProperties model module.
 * @module model/MountTargetProperties
 * @version 2019-10-01
 */
class MountTargetProperties {
    /**
     * Constructs a new <code>MountTargetProperties</code>.
     * Mount target properties
     * @alias module:model/MountTargetProperties
     * @param fileSystemId {String} UUID v4 used to identify the MountTarget
     */
    constructor(fileSystemId) { 
        
        MountTargetProperties.initialize(this, fileSystemId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileSystemId) { 
        obj['fileSystemId'] = fileSystemId;
    }

    /**
     * Constructs a <code>MountTargetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MountTargetProperties} obj Optional instance to populate.
     * @return {module:model/MountTargetProperties} The populated <code>MountTargetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MountTargetProperties();

            if (data.hasOwnProperty('endIp')) {
                obj['endIp'] = ApiClient.convertToType(data['endIp'], 'String');
            }
            if (data.hasOwnProperty('fileSystemId')) {
                obj['fileSystemId'] = ApiClient.convertToType(data['fileSystemId'], 'String');
            }
            if (data.hasOwnProperty('gateway')) {
                obj['gateway'] = ApiClient.convertToType(data['gateway'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('mountTargetId')) {
                obj['mountTargetId'] = ApiClient.convertToType(data['mountTargetId'], 'String');
            }
            if (data.hasOwnProperty('netmask')) {
                obj['netmask'] = ApiClient.convertToType(data['netmask'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('smbServerFqdn')) {
                obj['smbServerFqdn'] = ApiClient.convertToType(data['smbServerFqdn'], 'String');
            }
            if (data.hasOwnProperty('startIp')) {
                obj['startIp'] = ApiClient.convertToType(data['startIp'], 'String');
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiClient.convertToType(data['subnet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MountTargetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MountTargetProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MountTargetProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['endIp'] && !(typeof data['endIp'] === 'string' || data['endIp'] instanceof String)) {
            throw new Error("Expected the field `endIp` to be a primitive type in the JSON string but got " + data['endIp']);
        }
        // ensure the json data is a string
        if (data['fileSystemId'] && !(typeof data['fileSystemId'] === 'string' || data['fileSystemId'] instanceof String)) {
            throw new Error("Expected the field `fileSystemId` to be a primitive type in the JSON string but got " + data['fileSystemId']);
        }
        // ensure the json data is a string
        if (data['gateway'] && !(typeof data['gateway'] === 'string' || data['gateway'] instanceof String)) {
            throw new Error("Expected the field `gateway` to be a primitive type in the JSON string but got " + data['gateway']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['mountTargetId'] && !(typeof data['mountTargetId'] === 'string' || data['mountTargetId'] instanceof String)) {
            throw new Error("Expected the field `mountTargetId` to be a primitive type in the JSON string but got " + data['mountTargetId']);
        }
        // ensure the json data is a string
        if (data['netmask'] && !(typeof data['netmask'] === 'string' || data['netmask'] instanceof String)) {
            throw new Error("Expected the field `netmask` to be a primitive type in the JSON string but got " + data['netmask']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['smbServerFqdn'] && !(typeof data['smbServerFqdn'] === 'string' || data['smbServerFqdn'] instanceof String)) {
            throw new Error("Expected the field `smbServerFqdn` to be a primitive type in the JSON string but got " + data['smbServerFqdn']);
        }
        // ensure the json data is a string
        if (data['startIp'] && !(typeof data['startIp'] === 'string' || data['startIp'] instanceof String)) {
            throw new Error("Expected the field `startIp` to be a primitive type in the JSON string but got " + data['startIp']);
        }
        // ensure the json data is a string
        if (data['subnet'] && !(typeof data['subnet'] === 'string' || data['subnet'] instanceof String)) {
            throw new Error("Expected the field `subnet` to be a primitive type in the JSON string but got " + data['subnet']);
        }

        return true;
    }


}

MountTargetProperties.RequiredProperties = ["fileSystemId"];

/**
 * The end of IPv4 address range to use when creating a new mount target
 * @member {String} endIp
 */
MountTargetProperties.prototype['endIp'] = undefined;

/**
 * UUID v4 used to identify the MountTarget
 * @member {String} fileSystemId
 */
MountTargetProperties.prototype['fileSystemId'] = undefined;

/**
 * The gateway of the IPv4 address range to use when creating a new mount target
 * @member {String} gateway
 */
MountTargetProperties.prototype['gateway'] = undefined;

/**
 * The mount target's IPv4 address
 * @member {String} ipAddress
 */
MountTargetProperties.prototype['ipAddress'] = undefined;

/**
 * UUID v4 used to identify the MountTarget
 * @member {String} mountTargetId
 */
MountTargetProperties.prototype['mountTargetId'] = undefined;

/**
 * The netmask of the IPv4 address range to use when creating a new mount target
 * @member {String} netmask
 */
MountTargetProperties.prototype['netmask'] = undefined;

/**
 * Azure lifecycle management
 * @member {String} provisioningState
 */
MountTargetProperties.prototype['provisioningState'] = undefined;

/**
 * The SMB server's Fully Qualified Domain Name, FQDN
 * @member {String} smbServerFqdn
 */
MountTargetProperties.prototype['smbServerFqdn'] = undefined;

/**
 * The start of IPv4 address range to use when creating a new mount target
 * @member {String} startIp
 */
MountTargetProperties.prototype['startIp'] = undefined;

/**
 * The subnet
 * @member {String} subnet
 */
MountTargetProperties.prototype['subnet'] = undefined;






export default MountTargetProperties;

