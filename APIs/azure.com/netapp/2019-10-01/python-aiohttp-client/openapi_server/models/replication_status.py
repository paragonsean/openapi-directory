# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReplicationStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, healthy: bool=None, mirror_state: str=None, relationship_status: str=None, total_progress: str=None):
        """ReplicationStatus - a model defined in OpenAPI

        :param error_message: The error_message of this ReplicationStatus.
        :param healthy: The healthy of this ReplicationStatus.
        :param mirror_state: The mirror_state of this ReplicationStatus.
        :param relationship_status: The relationship_status of this ReplicationStatus.
        :param total_progress: The total_progress of this ReplicationStatus.
        """
        self.openapi_types = {
            'error_message': str,
            'healthy': bool,
            'mirror_state': str,
            'relationship_status': str,
            'total_progress': str
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'healthy': 'healthy',
            'mirror_state': 'mirrorState',
            'relationship_status': 'relationshipStatus',
            'total_progress': 'totalProgress'
        }

        self._error_message = error_message
        self._healthy = healthy
        self._mirror_state = mirror_state
        self._relationship_status = relationship_status
        self._total_progress = total_progress

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The replicationStatus of this ReplicationStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this ReplicationStatus.

        Displays error message if the replication is in an error state

        :return: The error_message of this ReplicationStatus.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ReplicationStatus.

        Displays error message if the replication is in an error state

        :param error_message: The error_message of this ReplicationStatus.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def healthy(self):
        """Gets the healthy of this ReplicationStatus.

        Replication health check

        :return: The healthy of this ReplicationStatus.
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this ReplicationStatus.

        Replication health check

        :param healthy: The healthy of this ReplicationStatus.
        :type healthy: bool
        """

        self._healthy = healthy

    @property
    def mirror_state(self):
        """Gets the mirror_state of this ReplicationStatus.

        The status of the replication

        :return: The mirror_state of this ReplicationStatus.
        :rtype: str
        """
        return self._mirror_state

    @mirror_state.setter
    def mirror_state(self, mirror_state):
        """Sets the mirror_state of this ReplicationStatus.

        The status of the replication

        :param mirror_state: The mirror_state of this ReplicationStatus.
        :type mirror_state: str
        """
        allowed_values = ["Uninitialized", "Mirrored", "Broken"]  # noqa: E501
        if mirror_state not in allowed_values:
            raise ValueError(
                "Invalid value for `mirror_state` ({0}), must be one of {1}"
                .format(mirror_state, allowed_values)
            )

        self._mirror_state = mirror_state

    @property
    def relationship_status(self):
        """Gets the relationship_status of this ReplicationStatus.

        Status of the mirror relationship

        :return: The relationship_status of this ReplicationStatus.
        :rtype: str
        """
        return self._relationship_status

    @relationship_status.setter
    def relationship_status(self, relationship_status):
        """Sets the relationship_status of this ReplicationStatus.

        Status of the mirror relationship

        :param relationship_status: The relationship_status of this ReplicationStatus.
        :type relationship_status: str
        """
        allowed_values = ["Idle", "Transferring"]  # noqa: E501
        if relationship_status not in allowed_values:
            raise ValueError(
                "Invalid value for `relationship_status` ({0}), must be one of {1}"
                .format(relationship_status, allowed_values)
            )

        self._relationship_status = relationship_status

    @property
    def total_progress(self):
        """Gets the total_progress of this ReplicationStatus.

        The progress of the replication

        :return: The total_progress of this ReplicationStatus.
        :rtype: str
        """
        return self._total_progress

    @total_progress.setter
    def total_progress(self, total_progress):
        """Sets the total_progress of this ReplicationStatus.

        The progress of the replication

        :param total_progress: The total_progress of this ReplicationStatus.
        :type total_progress: str
        """

        self._total_progress = total_progress
