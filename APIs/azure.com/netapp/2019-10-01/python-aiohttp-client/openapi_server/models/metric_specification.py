# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dimension import Dimension
from openapi_server import util


class MetricSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_type: str=None, category: str=None, dimensions: List[Dimension]=None, display_description: str=None, display_name: str=None, fill_gap_with_zero: bool=None, name: str=None, resource_id_dimension_name_override: str=None, unit: str=None):
        """MetricSpecification - a model defined in OpenAPI

        :param aggregation_type: The aggregation_type of this MetricSpecification.
        :param category: The category of this MetricSpecification.
        :param dimensions: The dimensions of this MetricSpecification.
        :param display_description: The display_description of this MetricSpecification.
        :param display_name: The display_name of this MetricSpecification.
        :param fill_gap_with_zero: The fill_gap_with_zero of this MetricSpecification.
        :param name: The name of this MetricSpecification.
        :param resource_id_dimension_name_override: The resource_id_dimension_name_override of this MetricSpecification.
        :param unit: The unit of this MetricSpecification.
        """
        self.openapi_types = {
            'aggregation_type': str,
            'category': str,
            'dimensions': List[Dimension],
            'display_description': str,
            'display_name': str,
            'fill_gap_with_zero': bool,
            'name': str,
            'resource_id_dimension_name_override': str,
            'unit': str
        }

        self.attribute_map = {
            'aggregation_type': 'aggregationType',
            'category': 'category',
            'dimensions': 'dimensions',
            'display_description': 'displayDescription',
            'display_name': 'displayName',
            'fill_gap_with_zero': 'fillGapWithZero',
            'name': 'name',
            'resource_id_dimension_name_override': 'resourceIdDimensionNameOverride',
            'unit': 'unit'
        }

        self._aggregation_type = aggregation_type
        self._category = category
        self._dimensions = dimensions
        self._display_description = display_description
        self._display_name = display_name
        self._fill_gap_with_zero = fill_gap_with_zero
        self._name = name
        self._resource_id_dimension_name_override = resource_id_dimension_name_override
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricSpecification of this MetricSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this MetricSpecification.

        Aggregation type could be Average.

        :return: The aggregation_type of this MetricSpecification.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this MetricSpecification.

        Aggregation type could be Average.

        :param aggregation_type: The aggregation_type of this MetricSpecification.
        :type aggregation_type: str
        """

        self._aggregation_type = aggregation_type

    @property
    def category(self):
        """Gets the category of this MetricSpecification.

        The category this metric specification belong to, could be Capacity.

        :return: The category of this MetricSpecification.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MetricSpecification.

        The category this metric specification belong to, could be Capacity.

        :param category: The category of this MetricSpecification.
        :type category: str
        """

        self._category = category

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricSpecification.

        Dimensions of blobs, including blob type and access tier.

        :return: The dimensions of this MetricSpecification.
        :rtype: List[Dimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricSpecification.

        Dimensions of blobs, including blob type and access tier.

        :param dimensions: The dimensions of this MetricSpecification.
        :type dimensions: List[Dimension]
        """

        self._dimensions = dimensions

    @property
    def display_description(self):
        """Gets the display_description of this MetricSpecification.

        Display description of metric specification.

        :return: The display_description of this MetricSpecification.
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this MetricSpecification.

        Display description of metric specification.

        :param display_description: The display_description of this MetricSpecification.
        :type display_description: str
        """

        self._display_description = display_description

    @property
    def display_name(self):
        """Gets the display_name of this MetricSpecification.

        Display name of metric specification.

        :return: The display_name of this MetricSpecification.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetricSpecification.

        Display name of metric specification.

        :param display_name: The display_name of this MetricSpecification.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fill_gap_with_zero(self):
        """Gets the fill_gap_with_zero of this MetricSpecification.

        The property to decide fill gap with zero or not.

        :return: The fill_gap_with_zero of this MetricSpecification.
        :rtype: bool
        """
        return self._fill_gap_with_zero

    @fill_gap_with_zero.setter
    def fill_gap_with_zero(self, fill_gap_with_zero):
        """Sets the fill_gap_with_zero of this MetricSpecification.

        The property to decide fill gap with zero or not.

        :param fill_gap_with_zero: The fill_gap_with_zero of this MetricSpecification.
        :type fill_gap_with_zero: bool
        """

        self._fill_gap_with_zero = fill_gap_with_zero

    @property
    def name(self):
        """Gets the name of this MetricSpecification.

        Name of metric specification.

        :return: The name of this MetricSpecification.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricSpecification.

        Name of metric specification.

        :param name: The name of this MetricSpecification.
        :type name: str
        """

        self._name = name

    @property
    def resource_id_dimension_name_override(self):
        """Gets the resource_id_dimension_name_override of this MetricSpecification.

        Account Resource Id.

        :return: The resource_id_dimension_name_override of this MetricSpecification.
        :rtype: str
        """
        return self._resource_id_dimension_name_override

    @resource_id_dimension_name_override.setter
    def resource_id_dimension_name_override(self, resource_id_dimension_name_override):
        """Sets the resource_id_dimension_name_override of this MetricSpecification.

        Account Resource Id.

        :param resource_id_dimension_name_override: The resource_id_dimension_name_override of this MetricSpecification.
        :type resource_id_dimension_name_override: str
        """

        self._resource_id_dimension_name_override = resource_id_dimension_name_override

    @property
    def unit(self):
        """Gets the unit of this MetricSpecification.

        Unit could be Bytes or Count.

        :return: The unit of this MetricSpecification.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricSpecification.

        Unit could be Bytes or Count.

        :param unit: The unit of this MetricSpecification.
        :type unit: str
        """

        self._unit = unit
