/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthorizeRequest;
import org.openapitools.client.model.ReplicationStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VolumesReplicationApi
 */
@Disabled
public class VolumesReplicationApiTest {

    private final VolumesReplicationApi api = new VolumesReplicationApi();

    /**
     * Authorize source volume replication
     *
     * Authorize the replication connection on the source volume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesAuthorizeReplicationTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        AuthorizeRequest body = null;
        api.volumesAuthorizeReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion, body);
        // TODO: test validations
    }

    /**
     * Break volume replication
     *
     * Break the replication connection on the destination volume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesBreakReplicationTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        api.volumesBreakReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete volume replication
     *
     * Delete the replication connection on the destination volume, and send release to the source replication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesDeleteReplicationTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        api.volumesDeleteReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get volume replication status
     *
     * Get the status of the replication
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesReplicationStatusTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        ReplicationStatus response = api.volumesReplicationStatus(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Resync volume replication
     *
     * Resync the connection on the destination volume. If the operation is ran on the source volume it will reverse-resync the connection and sync from source to destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void volumesResyncReplicationTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String poolName = null;
        String volumeName = null;
        String apiVersion = null;
        api.volumesResyncReplication(subscriptionId, resourceGroupName, accountName, poolName, volumeName, apiVersion);
        // TODO: test validations
    }

}
