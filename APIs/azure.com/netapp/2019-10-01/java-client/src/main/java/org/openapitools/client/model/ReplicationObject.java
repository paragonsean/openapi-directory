/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:02:23.744450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationObject {
  /**
   * Indicates whether the local volume is the source or destination for the Volume Replication
   */
  @JsonAdapter(EndpointTypeEnum.Adapter.class)
  public enum EndpointTypeEnum {
    SRC("src"),
    
    DST("dst");

    private String value;

    EndpointTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EndpointTypeEnum fromValue(String value) {
      for (EndpointTypeEnum b : EndpointTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EndpointTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EndpointTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EndpointTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EndpointTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EndpointTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENDPOINT_TYPE = "endpointType";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_TYPE)
  private EndpointTypeEnum endpointType;

  public static final String SERIALIZED_NAME_REMOTE_VOLUME_REGION = "remoteVolumeRegion";
  @SerializedName(SERIALIZED_NAME_REMOTE_VOLUME_REGION)
  private String remoteVolumeRegion;

  public static final String SERIALIZED_NAME_REMOTE_VOLUME_RESOURCE_ID = "remoteVolumeResourceId";
  @SerializedName(SERIALIZED_NAME_REMOTE_VOLUME_RESOURCE_ID)
  private String remoteVolumeResourceId;

  public static final String SERIALIZED_NAME_REPLICATION_ID = "replicationId";
  @SerializedName(SERIALIZED_NAME_REPLICATION_ID)
  private String replicationId;

  /**
   * Schedule
   */
  @JsonAdapter(ReplicationScheduleEnum.Adapter.class)
  public enum ReplicationScheduleEnum {
    _10MINUTELY("_10minutely"),
    
    HOURLY("hourly"),
    
    DAILY("daily"),
    
    WEEKLY("weekly"),
    
    MONTHLY("monthly");

    private String value;

    ReplicationScheduleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReplicationScheduleEnum fromValue(String value) {
      for (ReplicationScheduleEnum b : ReplicationScheduleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReplicationScheduleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReplicationScheduleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReplicationScheduleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReplicationScheduleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReplicationScheduleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPLICATION_SCHEDULE = "replicationSchedule";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SCHEDULE)
  private ReplicationScheduleEnum replicationSchedule;

  public ReplicationObject() {
  }

  public ReplicationObject endpointType(EndpointTypeEnum endpointType) {
    this.endpointType = endpointType;
    return this;
  }

  /**
   * Indicates whether the local volume is the source or destination for the Volume Replication
   * @return endpointType
   */
  @javax.annotation.Nullable
  public EndpointTypeEnum getEndpointType() {
    return endpointType;
  }

  public void setEndpointType(EndpointTypeEnum endpointType) {
    this.endpointType = endpointType;
  }


  public ReplicationObject remoteVolumeRegion(String remoteVolumeRegion) {
    this.remoteVolumeRegion = remoteVolumeRegion;
    return this;
  }

  /**
   * The remote region for the other end of the Volume Replication.
   * @return remoteVolumeRegion
   */
  @javax.annotation.Nullable
  public String getRemoteVolumeRegion() {
    return remoteVolumeRegion;
  }

  public void setRemoteVolumeRegion(String remoteVolumeRegion) {
    this.remoteVolumeRegion = remoteVolumeRegion;
  }


  public ReplicationObject remoteVolumeResourceId(String remoteVolumeResourceId) {
    this.remoteVolumeResourceId = remoteVolumeResourceId;
    return this;
  }

  /**
   * The resource ID of the remote volume.
   * @return remoteVolumeResourceId
   */
  @javax.annotation.Nonnull
  public String getRemoteVolumeResourceId() {
    return remoteVolumeResourceId;
  }

  public void setRemoteVolumeResourceId(String remoteVolumeResourceId) {
    this.remoteVolumeResourceId = remoteVolumeResourceId;
  }


  public ReplicationObject replicationId(String replicationId) {
    this.replicationId = replicationId;
    return this;
  }

  /**
   * Id
   * @return replicationId
   */
  @javax.annotation.Nullable
  public String getReplicationId() {
    return replicationId;
  }

  public void setReplicationId(String replicationId) {
    this.replicationId = replicationId;
  }


  public ReplicationObject replicationSchedule(ReplicationScheduleEnum replicationSchedule) {
    this.replicationSchedule = replicationSchedule;
    return this;
  }

  /**
   * Schedule
   * @return replicationSchedule
   */
  @javax.annotation.Nonnull
  public ReplicationScheduleEnum getReplicationSchedule() {
    return replicationSchedule;
  }

  public void setReplicationSchedule(ReplicationScheduleEnum replicationSchedule) {
    this.replicationSchedule = replicationSchedule;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationObject replicationObject = (ReplicationObject) o;
    return Objects.equals(this.endpointType, replicationObject.endpointType) &&
        Objects.equals(this.remoteVolumeRegion, replicationObject.remoteVolumeRegion) &&
        Objects.equals(this.remoteVolumeResourceId, replicationObject.remoteVolumeResourceId) &&
        Objects.equals(this.replicationId, replicationObject.replicationId) &&
        Objects.equals(this.replicationSchedule, replicationObject.replicationSchedule);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointType, remoteVolumeRegion, remoteVolumeResourceId, replicationId, replicationSchedule);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationObject {\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    remoteVolumeRegion: ").append(toIndentedString(remoteVolumeRegion)).append("\n");
    sb.append("    remoteVolumeResourceId: ").append(toIndentedString(remoteVolumeResourceId)).append("\n");
    sb.append("    replicationId: ").append(toIndentedString(replicationId)).append("\n");
    sb.append("    replicationSchedule: ").append(toIndentedString(replicationSchedule)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpointType");
    openapiFields.add("remoteVolumeRegion");
    openapiFields.add("remoteVolumeResourceId");
    openapiFields.add("replicationId");
    openapiFields.add("replicationSchedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("remoteVolumeResourceId");
    openapiRequiredFields.add("replicationSchedule");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationObject is not found in the empty JSON string", ReplicationObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicationObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpointType") != null && !jsonObj.get("endpointType").isJsonNull()) && !jsonObj.get("endpointType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointType").toString()));
      }
      // validate the optional field `endpointType`
      if (jsonObj.get("endpointType") != null && !jsonObj.get("endpointType").isJsonNull()) {
        EndpointTypeEnum.validateJsonElement(jsonObj.get("endpointType"));
      }
      if ((jsonObj.get("remoteVolumeRegion") != null && !jsonObj.get("remoteVolumeRegion").isJsonNull()) && !jsonObj.get("remoteVolumeRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteVolumeRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteVolumeRegion").toString()));
      }
      if (!jsonObj.get("remoteVolumeResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteVolumeResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteVolumeResourceId").toString()));
      }
      if ((jsonObj.get("replicationId") != null && !jsonObj.get("replicationId").isJsonNull()) && !jsonObj.get("replicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationId").toString()));
      }
      if (!jsonObj.get("replicationSchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationSchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationSchedule").toString()));
      }
      // validate the required field `replicationSchedule`
      ReplicationScheduleEnum.validateJsonElement(jsonObj.get("replicationSchedule"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationObject.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationObject>() {
           @Override
           public void write(JsonWriter out, ReplicationObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationObject
   * @throws IOException if the JSON string is invalid with respect to ReplicationObject
   */
  public static ReplicationObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationObject.class);
  }

  /**
   * Convert an instance of ReplicationObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

