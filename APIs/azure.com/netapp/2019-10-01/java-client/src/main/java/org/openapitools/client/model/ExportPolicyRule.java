/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Volume Export Policy Rule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:02:23.744450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportPolicyRule {
  public static final String SERIALIZED_NAME_ALLOWED_CLIENTS = "allowedClients";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CLIENTS)
  private String allowedClients;

  public static final String SERIALIZED_NAME_CIFS = "cifs";
  @SerializedName(SERIALIZED_NAME_CIFS)
  private Boolean cifs;

  public static final String SERIALIZED_NAME_NFSV3 = "nfsv3";
  @SerializedName(SERIALIZED_NAME_NFSV3)
  private Boolean nfsv3;

  public static final String SERIALIZED_NAME_NFSV41 = "nfsv41";
  @SerializedName(SERIALIZED_NAME_NFSV41)
  private Boolean nfsv41;

  public static final String SERIALIZED_NAME_RULE_INDEX = "ruleIndex";
  @SerializedName(SERIALIZED_NAME_RULE_INDEX)
  private Integer ruleIndex;

  public static final String SERIALIZED_NAME_UNIX_READ_ONLY = "unixReadOnly";
  @SerializedName(SERIALIZED_NAME_UNIX_READ_ONLY)
  private Boolean unixReadOnly;

  public static final String SERIALIZED_NAME_UNIX_READ_WRITE = "unixReadWrite";
  @SerializedName(SERIALIZED_NAME_UNIX_READ_WRITE)
  private Boolean unixReadWrite;

  public ExportPolicyRule() {
  }

  public ExportPolicyRule allowedClients(String allowedClients) {
    this.allowedClients = allowedClients;
    return this;
  }

  /**
   * Client ingress specification as comma separated string with IPv4 CIDRs, IPv4 host addresses and host names
   * @return allowedClients
   */
  @javax.annotation.Nullable
  public String getAllowedClients() {
    return allowedClients;
  }

  public void setAllowedClients(String allowedClients) {
    this.allowedClients = allowedClients;
  }


  public ExportPolicyRule cifs(Boolean cifs) {
    this.cifs = cifs;
    return this;
  }

  /**
   * Allows CIFS protocol
   * @return cifs
   */
  @javax.annotation.Nullable
  public Boolean getCifs() {
    return cifs;
  }

  public void setCifs(Boolean cifs) {
    this.cifs = cifs;
  }


  public ExportPolicyRule nfsv3(Boolean nfsv3) {
    this.nfsv3 = nfsv3;
    return this;
  }

  /**
   * Allows NFSv3 protocol
   * @return nfsv3
   */
  @javax.annotation.Nullable
  public Boolean getNfsv3() {
    return nfsv3;
  }

  public void setNfsv3(Boolean nfsv3) {
    this.nfsv3 = nfsv3;
  }


  public ExportPolicyRule nfsv41(Boolean nfsv41) {
    this.nfsv41 = nfsv41;
    return this;
  }

  /**
   * Allows NFSv4.1 protocol
   * @return nfsv41
   */
  @javax.annotation.Nullable
  public Boolean getNfsv41() {
    return nfsv41;
  }

  public void setNfsv41(Boolean nfsv41) {
    this.nfsv41 = nfsv41;
  }


  public ExportPolicyRule ruleIndex(Integer ruleIndex) {
    this.ruleIndex = ruleIndex;
    return this;
  }

  /**
   * Order index
   * @return ruleIndex
   */
  @javax.annotation.Nullable
  public Integer getRuleIndex() {
    return ruleIndex;
  }

  public void setRuleIndex(Integer ruleIndex) {
    this.ruleIndex = ruleIndex;
  }


  public ExportPolicyRule unixReadOnly(Boolean unixReadOnly) {
    this.unixReadOnly = unixReadOnly;
    return this;
  }

  /**
   * Read only access
   * @return unixReadOnly
   */
  @javax.annotation.Nullable
  public Boolean getUnixReadOnly() {
    return unixReadOnly;
  }

  public void setUnixReadOnly(Boolean unixReadOnly) {
    this.unixReadOnly = unixReadOnly;
  }


  public ExportPolicyRule unixReadWrite(Boolean unixReadWrite) {
    this.unixReadWrite = unixReadWrite;
    return this;
  }

  /**
   * Read and write access
   * @return unixReadWrite
   */
  @javax.annotation.Nullable
  public Boolean getUnixReadWrite() {
    return unixReadWrite;
  }

  public void setUnixReadWrite(Boolean unixReadWrite) {
    this.unixReadWrite = unixReadWrite;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportPolicyRule exportPolicyRule = (ExportPolicyRule) o;
    return Objects.equals(this.allowedClients, exportPolicyRule.allowedClients) &&
        Objects.equals(this.cifs, exportPolicyRule.cifs) &&
        Objects.equals(this.nfsv3, exportPolicyRule.nfsv3) &&
        Objects.equals(this.nfsv41, exportPolicyRule.nfsv41) &&
        Objects.equals(this.ruleIndex, exportPolicyRule.ruleIndex) &&
        Objects.equals(this.unixReadOnly, exportPolicyRule.unixReadOnly) &&
        Objects.equals(this.unixReadWrite, exportPolicyRule.unixReadWrite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedClients, cifs, nfsv3, nfsv41, ruleIndex, unixReadOnly, unixReadWrite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportPolicyRule {\n");
    sb.append("    allowedClients: ").append(toIndentedString(allowedClients)).append("\n");
    sb.append("    cifs: ").append(toIndentedString(cifs)).append("\n");
    sb.append("    nfsv3: ").append(toIndentedString(nfsv3)).append("\n");
    sb.append("    nfsv41: ").append(toIndentedString(nfsv41)).append("\n");
    sb.append("    ruleIndex: ").append(toIndentedString(ruleIndex)).append("\n");
    sb.append("    unixReadOnly: ").append(toIndentedString(unixReadOnly)).append("\n");
    sb.append("    unixReadWrite: ").append(toIndentedString(unixReadWrite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedClients");
    openapiFields.add("cifs");
    openapiFields.add("nfsv3");
    openapiFields.add("nfsv41");
    openapiFields.add("ruleIndex");
    openapiFields.add("unixReadOnly");
    openapiFields.add("unixReadWrite");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportPolicyRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportPolicyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportPolicyRule is not found in the empty JSON string", ExportPolicyRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportPolicyRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportPolicyRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedClients") != null && !jsonObj.get("allowedClients").isJsonNull()) && !jsonObj.get("allowedClients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedClients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedClients").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportPolicyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportPolicyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportPolicyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportPolicyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportPolicyRule>() {
           @Override
           public void write(JsonWriter out, ExportPolicyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportPolicyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportPolicyRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportPolicyRule
   * @throws IOException if the JSON string is invalid with respect to ExportPolicyRule
   */
  public static ExportPolicyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportPolicyRule.class);
  }

  /**
   * Convert an instance of ExportPolicyRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

