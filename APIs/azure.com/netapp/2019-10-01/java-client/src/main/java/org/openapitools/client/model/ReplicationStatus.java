/*
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:02:23.744450-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationStatus {
  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_HEALTHY = "healthy";
  @SerializedName(SERIALIZED_NAME_HEALTHY)
  private Boolean healthy;

  /**
   * The status of the replication
   */
  @JsonAdapter(MirrorStateEnum.Adapter.class)
  public enum MirrorStateEnum {
    UNINITIALIZED("Uninitialized"),
    
    MIRRORED("Mirrored"),
    
    BROKEN("Broken");

    private String value;

    MirrorStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MirrorStateEnum fromValue(String value) {
      for (MirrorStateEnum b : MirrorStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MirrorStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MirrorStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MirrorStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MirrorStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MirrorStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIRROR_STATE = "mirrorState";
  @SerializedName(SERIALIZED_NAME_MIRROR_STATE)
  private MirrorStateEnum mirrorState;

  /**
   * Status of the mirror relationship
   */
  @JsonAdapter(RelationshipStatusEnum.Adapter.class)
  public enum RelationshipStatusEnum {
    IDLE("Idle"),
    
    TRANSFERRING("Transferring");

    private String value;

    RelationshipStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RelationshipStatusEnum fromValue(String value) {
      for (RelationshipStatusEnum b : RelationshipStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RelationshipStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RelationshipStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RelationshipStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RelationshipStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RelationshipStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RELATIONSHIP_STATUS = "relationshipStatus";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_STATUS)
  private RelationshipStatusEnum relationshipStatus;

  public static final String SERIALIZED_NAME_TOTAL_PROGRESS = "totalProgress";
  @SerializedName(SERIALIZED_NAME_TOTAL_PROGRESS)
  private String totalProgress;

  public ReplicationStatus() {
  }

  public ReplicationStatus errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Displays error message if the replication is in an error state
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public ReplicationStatus healthy(Boolean healthy) {
    this.healthy = healthy;
    return this;
  }

  /**
   * Replication health check
   * @return healthy
   */
  @javax.annotation.Nullable
  public Boolean getHealthy() {
    return healthy;
  }

  public void setHealthy(Boolean healthy) {
    this.healthy = healthy;
  }


  public ReplicationStatus mirrorState(MirrorStateEnum mirrorState) {
    this.mirrorState = mirrorState;
    return this;
  }

  /**
   * The status of the replication
   * @return mirrorState
   */
  @javax.annotation.Nullable
  public MirrorStateEnum getMirrorState() {
    return mirrorState;
  }

  public void setMirrorState(MirrorStateEnum mirrorState) {
    this.mirrorState = mirrorState;
  }


  public ReplicationStatus relationshipStatus(RelationshipStatusEnum relationshipStatus) {
    this.relationshipStatus = relationshipStatus;
    return this;
  }

  /**
   * Status of the mirror relationship
   * @return relationshipStatus
   */
  @javax.annotation.Nullable
  public RelationshipStatusEnum getRelationshipStatus() {
    return relationshipStatus;
  }

  public void setRelationshipStatus(RelationshipStatusEnum relationshipStatus) {
    this.relationshipStatus = relationshipStatus;
  }


  public ReplicationStatus totalProgress(String totalProgress) {
    this.totalProgress = totalProgress;
    return this;
  }

  /**
   * The progress of the replication
   * @return totalProgress
   */
  @javax.annotation.Nullable
  public String getTotalProgress() {
    return totalProgress;
  }

  public void setTotalProgress(String totalProgress) {
    this.totalProgress = totalProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationStatus replicationStatus = (ReplicationStatus) o;
    return Objects.equals(this.errorMessage, replicationStatus.errorMessage) &&
        Objects.equals(this.healthy, replicationStatus.healthy) &&
        Objects.equals(this.mirrorState, replicationStatus.mirrorState) &&
        Objects.equals(this.relationshipStatus, replicationStatus.relationshipStatus) &&
        Objects.equals(this.totalProgress, replicationStatus.totalProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorMessage, healthy, mirrorState, relationshipStatus, totalProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationStatus {\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    mirrorState: ").append(toIndentedString(mirrorState)).append("\n");
    sb.append("    relationshipStatus: ").append(toIndentedString(relationshipStatus)).append("\n");
    sb.append("    totalProgress: ").append(toIndentedString(totalProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorMessage");
    openapiFields.add("healthy");
    openapiFields.add("mirrorState");
    openapiFields.add("relationshipStatus");
    openapiFields.add("totalProgress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationStatus is not found in the empty JSON string", ReplicationStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) && !jsonObj.get("errorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorMessage").toString()));
      }
      if ((jsonObj.get("mirrorState") != null && !jsonObj.get("mirrorState").isJsonNull()) && !jsonObj.get("mirrorState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mirrorState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mirrorState").toString()));
      }
      // validate the optional field `mirrorState`
      if (jsonObj.get("mirrorState") != null && !jsonObj.get("mirrorState").isJsonNull()) {
        MirrorStateEnum.validateJsonElement(jsonObj.get("mirrorState"));
      }
      if ((jsonObj.get("relationshipStatus") != null && !jsonObj.get("relationshipStatus").isJsonNull()) && !jsonObj.get("relationshipStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relationshipStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relationshipStatus").toString()));
      }
      // validate the optional field `relationshipStatus`
      if (jsonObj.get("relationshipStatus") != null && !jsonObj.get("relationshipStatus").isJsonNull()) {
        RelationshipStatusEnum.validateJsonElement(jsonObj.get("relationshipStatus"));
      }
      if ((jsonObj.get("totalProgress") != null && !jsonObj.get("totalProgress").isJsonNull()) && !jsonObj.get("totalProgress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalProgress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalProgress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationStatus>() {
           @Override
           public void write(JsonWriter out, ReplicationStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationStatus
   * @throws IOException if the JSON string is invalid with respect to ReplicationStatus
   */
  public static ReplicationStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationStatus.class);
  }

  /**
   * Convert an instance of ReplicationStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

