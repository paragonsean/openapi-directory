/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICapacityPoolsApi_H
#define OAI_OAICapacityPoolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICapacityPool.h"
#include "OAICapacityPoolList.h"
#include "OAICapacityPoolPatch.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICapacityPoolsApi : public QObject {
    Q_OBJECT

public:
    OAICapacityPoolsApi(const int timeOut = 0);
    ~OAICapacityPoolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAICapacityPool [required]
    */
    virtual void poolsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &api_version, const OAICapacityPool &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void poolsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void poolsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void poolsList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAICapacityPoolPatch [required]
    */
    virtual void poolsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &api_version, const OAICapacityPoolPatch &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void poolsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void poolsDeleteCallback(OAIHttpRequestWorker *worker);
    void poolsGetCallback(OAIHttpRequestWorker *worker);
    void poolsListCallback(OAIHttpRequestWorker *worker);
    void poolsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void poolsCreateOrUpdateSignal(OAICapacityPool summary);
    void poolsDeleteSignal();
    void poolsGetSignal(OAICapacityPool summary);
    void poolsListSignal(OAICapacityPoolList summary);
    void poolsUpdateSignal(OAICapacityPool summary);


    void poolsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICapacityPool summary);
    void poolsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void poolsGetSignalFull(OAIHttpRequestWorker *worker, OAICapacityPool summary);
    void poolsListSignalFull(OAIHttpRequestWorker *worker, OAICapacityPoolList summary);
    void poolsUpdateSignalFull(OAIHttpRequestWorker *worker, OAICapacityPool summary);

    Q_DECL_DEPRECATED_X("Use poolsCreateOrUpdateSignalError() instead")
    void poolsCreateOrUpdateSignalE(OAICapacityPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsCreateOrUpdateSignalError(OAICapacityPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsDeleteSignalError() instead")
    void poolsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void poolsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsGetSignalError() instead")
    void poolsGetSignalE(OAICapacityPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsGetSignalError(OAICapacityPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsListSignalError() instead")
    void poolsListSignalE(OAICapacityPoolList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsListSignalError(OAICapacityPoolList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsUpdateSignalError() instead")
    void poolsUpdateSignalE(OAICapacityPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsUpdateSignalError(OAICapacityPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use poolsCreateOrUpdateSignalErrorFull() instead")
    void poolsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsDeleteSignalErrorFull() instead")
    void poolsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsGetSignalErrorFull() instead")
    void poolsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsListSignalErrorFull() instead")
    void poolsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use poolsUpdateSignalErrorFull() instead")
    void poolsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void poolsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
