/**
 * Microsoft NetApp
 * Microsoft NetApp Azure Resource Provider specification
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVolumesReplicationApi_H
#define OAI_OAIVolumesReplicationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthorizeRequest.h"
#include "OAIReplicationStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVolumesReplicationApi : public QObject {
    Q_OBJECT

public:
    OAIVolumesReplicationApi(const int timeOut = 0);
    ~OAIVolumesReplicationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  volume_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIAuthorizeRequest [required]
    */
    virtual void volumesAuthorizeReplication(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &volume_name, const QString &api_version, const OAIAuthorizeRequest &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  volume_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void volumesBreakReplication(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &volume_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  volume_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void volumesDeleteReplication(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &volume_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  volume_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void volumesReplicationStatus(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &volume_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  pool_name QString [required]
    * @param[in]  volume_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void volumesResyncReplication(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &pool_name, const QString &volume_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void volumesAuthorizeReplicationCallback(OAIHttpRequestWorker *worker);
    void volumesBreakReplicationCallback(OAIHttpRequestWorker *worker);
    void volumesDeleteReplicationCallback(OAIHttpRequestWorker *worker);
    void volumesReplicationStatusCallback(OAIHttpRequestWorker *worker);
    void volumesResyncReplicationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void volumesAuthorizeReplicationSignal();
    void volumesBreakReplicationSignal();
    void volumesDeleteReplicationSignal();
    void volumesReplicationStatusSignal(OAIReplicationStatus summary);
    void volumesResyncReplicationSignal();


    void volumesAuthorizeReplicationSignalFull(OAIHttpRequestWorker *worker);
    void volumesBreakReplicationSignalFull(OAIHttpRequestWorker *worker);
    void volumesDeleteReplicationSignalFull(OAIHttpRequestWorker *worker);
    void volumesReplicationStatusSignalFull(OAIHttpRequestWorker *worker, OAIReplicationStatus summary);
    void volumesResyncReplicationSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use volumesAuthorizeReplicationSignalError() instead")
    void volumesAuthorizeReplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void volumesAuthorizeReplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesBreakReplicationSignalError() instead")
    void volumesBreakReplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void volumesBreakReplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesDeleteReplicationSignalError() instead")
    void volumesDeleteReplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void volumesDeleteReplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesReplicationStatusSignalError() instead")
    void volumesReplicationStatusSignalE(OAIReplicationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void volumesReplicationStatusSignalError(OAIReplicationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesResyncReplicationSignalError() instead")
    void volumesResyncReplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void volumesResyncReplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use volumesAuthorizeReplicationSignalErrorFull() instead")
    void volumesAuthorizeReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumesAuthorizeReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesBreakReplicationSignalErrorFull() instead")
    void volumesBreakReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumesBreakReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesDeleteReplicationSignalErrorFull() instead")
    void volumesDeleteReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumesDeleteReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesReplicationStatusSignalErrorFull() instead")
    void volumesReplicationStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumesReplicationStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use volumesResyncReplicationSignalErrorFull() instead")
    void volumesResyncReplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void volumesResyncReplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
