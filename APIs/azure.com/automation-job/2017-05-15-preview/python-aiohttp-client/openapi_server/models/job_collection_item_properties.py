# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.runbook_association_property import RunbookAssociationProperty
from openapi_server import util


class JobCollectionItemProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, end_time: datetime=None, job_id: str=None, last_modified_time: datetime=None, provisioning_state: str=None, run_on: str=None, runbook: RunbookAssociationProperty=None, start_time: datetime=None, status: str=None):
        """JobCollectionItemProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this JobCollectionItemProperties.
        :param end_time: The end_time of this JobCollectionItemProperties.
        :param job_id: The job_id of this JobCollectionItemProperties.
        :param last_modified_time: The last_modified_time of this JobCollectionItemProperties.
        :param provisioning_state: The provisioning_state of this JobCollectionItemProperties.
        :param run_on: The run_on of this JobCollectionItemProperties.
        :param runbook: The runbook of this JobCollectionItemProperties.
        :param start_time: The start_time of this JobCollectionItemProperties.
        :param status: The status of this JobCollectionItemProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'end_time': datetime,
            'job_id': str,
            'last_modified_time': datetime,
            'provisioning_state': str,
            'run_on': str,
            'runbook': RunbookAssociationProperty,
            'start_time': datetime,
            'status': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'end_time': 'endTime',
            'job_id': 'jobId',
            'last_modified_time': 'lastModifiedTime',
            'provisioning_state': 'provisioningState',
            'run_on': 'runOn',
            'runbook': 'runbook',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._creation_time = creation_time
        self._end_time = end_time
        self._job_id = job_id
        self._last_modified_time = last_modified_time
        self._provisioning_state = provisioning_state
        self._run_on = run_on
        self._runbook = runbook
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobCollectionItemProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobCollectionItemProperties of this JobCollectionItemProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this JobCollectionItemProperties.

        The creation time of the job.

        :return: The creation_time of this JobCollectionItemProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this JobCollectionItemProperties.

        The creation time of the job.

        :param creation_time: The creation_time of this JobCollectionItemProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def end_time(self):
        """Gets the end_time of this JobCollectionItemProperties.

        The end time of the job.

        :return: The end_time of this JobCollectionItemProperties.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this JobCollectionItemProperties.

        The end time of the job.

        :param end_time: The end_time of this JobCollectionItemProperties.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def job_id(self):
        """Gets the job_id of this JobCollectionItemProperties.

        The id of the job.

        :return: The job_id of this JobCollectionItemProperties.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobCollectionItemProperties.

        The id of the job.

        :param job_id: The job_id of this JobCollectionItemProperties.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this JobCollectionItemProperties.

        The last modified time of the job.

        :return: The last_modified_time of this JobCollectionItemProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this JobCollectionItemProperties.

        The last modified time of the job.

        :param last_modified_time: The last_modified_time of this JobCollectionItemProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this JobCollectionItemProperties.

        The provisioning state of a resource.

        :return: The provisioning_state of this JobCollectionItemProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this JobCollectionItemProperties.

        The provisioning state of a resource.

        :param provisioning_state: The provisioning_state of this JobCollectionItemProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def run_on(self):
        """Gets the run_on of this JobCollectionItemProperties.

        Specifies the runOn group name where the job was executed.

        :return: The run_on of this JobCollectionItemProperties.
        :rtype: str
        """
        return self._run_on

    @run_on.setter
    def run_on(self, run_on):
        """Sets the run_on of this JobCollectionItemProperties.

        Specifies the runOn group name where the job was executed.

        :param run_on: The run_on of this JobCollectionItemProperties.
        :type run_on: str
        """

        self._run_on = run_on

    @property
    def runbook(self):
        """Gets the runbook of this JobCollectionItemProperties.


        :return: The runbook of this JobCollectionItemProperties.
        :rtype: RunbookAssociationProperty
        """
        return self._runbook

    @runbook.setter
    def runbook(self, runbook):
        """Sets the runbook of this JobCollectionItemProperties.


        :param runbook: The runbook of this JobCollectionItemProperties.
        :type runbook: RunbookAssociationProperty
        """

        self._runbook = runbook

    @property
    def start_time(self):
        """Gets the start_time of this JobCollectionItemProperties.

        The start time of the job.

        :return: The start_time of this JobCollectionItemProperties.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this JobCollectionItemProperties.

        The start time of the job.

        :param start_time: The start_time of this JobCollectionItemProperties.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this JobCollectionItemProperties.

        The status of the job.

        :return: The status of this JobCollectionItemProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobCollectionItemProperties.

        The status of the job.

        :param status: The status of this JobCollectionItemProperties.
        :type status: str
        """
        allowed_values = ["New", "Activating", "Running", "Completed", "Failed", "Stopped", "Blocked", "Suspended", "Disconnected", "Suspending", "Stopping", "Resuming", "Removing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
