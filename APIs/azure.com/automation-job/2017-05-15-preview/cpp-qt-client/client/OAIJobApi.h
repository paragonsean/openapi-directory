/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobApi_H
#define OAI_OAIJobApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAIJob.h"
#include "OAIJobCreateParameters.h"
#include "OAIJobListResultV2.h"
#include "OAIJob_ListByAutomationAccount_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobApi : public QObject {
    Q_OBJECT

public:
    OAIJobApi(const int timeOut = 0);
    ~OAIJobApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIJobCreateParameters [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobCreate(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &job_name, const QString &api_version, const OAIJobCreateParameters &parameters, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobGet(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &job_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobGetOutput(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &job_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobGetRunbookContent(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &job_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobResume(const QString &resource_group_name, const QString &automation_account_name, const QString &job_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobStop(const QString &resource_group_name, const QString &automation_account_name, const QString &job_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  job_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  client_request_id QString [optional]
    */
    virtual void jobSuspend(const QString &subscription_id, const QString &resource_group_name, const QString &automation_account_name, const QString &job_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &client_request_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobCreateCallback(OAIHttpRequestWorker *worker);
    void jobGetCallback(OAIHttpRequestWorker *worker);
    void jobGetOutputCallback(OAIHttpRequestWorker *worker);
    void jobGetRunbookContentCallback(OAIHttpRequestWorker *worker);
    void jobListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void jobResumeCallback(OAIHttpRequestWorker *worker);
    void jobStopCallback(OAIHttpRequestWorker *worker);
    void jobSuspendCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobCreateSignal(OAIJob summary);
    void jobGetSignal(OAIJob summary);
    void jobGetOutputSignal(OAIHttpFileElement summary);
    void jobGetRunbookContentSignal(OAIHttpFileElement summary);
    void jobListByAutomationAccountSignal(OAIJobListResultV2 summary);
    void jobResumeSignal();
    void jobStopSignal();
    void jobSuspendSignal();


    void jobCreateSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void jobGetSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void jobGetOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void jobGetRunbookContentSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void jobListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAIJobListResultV2 summary);
    void jobResumeSignalFull(OAIHttpRequestWorker *worker);
    void jobStopSignalFull(OAIHttpRequestWorker *worker);
    void jobSuspendSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jobCreateSignalError() instead")
    void jobCreateSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCreateSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetSignalError() instead")
    void jobGetSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetOutputSignalError() instead")
    void jobGetOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetRunbookContentSignalError() instead")
    void jobGetRunbookContentSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetRunbookContentSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobListByAutomationAccountSignalError() instead")
    void jobListByAutomationAccountSignalE(OAIJobListResultV2 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobListByAutomationAccountSignalError(OAIJobListResultV2 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobResumeSignalError() instead")
    void jobResumeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobResumeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStopSignalError() instead")
    void jobStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSuspendSignalError() instead")
    void jobSuspendSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobSuspendSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobCreateSignalErrorFull() instead")
    void jobCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetSignalErrorFull() instead")
    void jobGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetOutputSignalErrorFull() instead")
    void jobGetOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetRunbookContentSignalErrorFull() instead")
    void jobGetRunbookContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetRunbookContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobListByAutomationAccountSignalErrorFull() instead")
    void jobListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobResumeSignalErrorFull() instead")
    void jobResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobStopSignalErrorFull() instead")
    void jobStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSuspendSignalErrorFull() instead")
    void jobSuspendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSuspendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
