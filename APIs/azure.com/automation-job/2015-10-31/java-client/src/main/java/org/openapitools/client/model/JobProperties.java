/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.openapitools.client.model.JobProvisioningStateProperty;
import org.openapitools.client.model.RunbookAssociationProperty;
import org.openapitools.client.model.ScheduleAssociationProperty;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of job properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:26.060288-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_EXCEPTION = "exception";
  @SerializedName(SERIALIZED_NAME_EXCEPTION)
  private String exception;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private UUID jobId;

  public static final String SERIALIZED_NAME_JOB_SCHEDULE_ID = "jobScheduleId";
  @SerializedName(SERIALIZED_NAME_JOB_SCHEDULE_ID)
  private String jobScheduleId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LAST_STATUS_MODIFIED_TIME = "lastStatusModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_MODIFIED_TIME)
  private OffsetDateTime lastStatusModifiedTime;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private JobProvisioningStateProperty provisioningState;

  public static final String SERIALIZED_NAME_RUN_ON = "runOn";
  @SerializedName(SERIALIZED_NAME_RUN_ON)
  private String runOn;

  public static final String SERIALIZED_NAME_RUNBOOK = "runbook";
  @SerializedName(SERIALIZED_NAME_RUNBOOK)
  private RunbookAssociationProperty runbook;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private ScheduleAssociationProperty schedule;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STARTED_BY = "startedBy";
  @SerializedName(SERIALIZED_NAME_STARTED_BY)
  private String startedBy;

  /**
   * Gets or sets the status of the job.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NEW("New"),
    
    ACTIVATING("Activating"),
    
    RUNNING("Running"),
    
    COMPLETED("Completed"),
    
    FAILED("Failed"),
    
    STOPPED("Stopped"),
    
    BLOCKED("Blocked"),
    
    SUSPENDED("Suspended"),
    
    DISCONNECTED("Disconnected"),
    
    SUSPENDING("Suspending"),
    
    STOPPING("Stopping"),
    
    RESUMING("Resuming"),
    
    REMOVING("Removing");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STATUS_DETAILS = "statusDetails";
  @SerializedName(SERIALIZED_NAME_STATUS_DETAILS)
  private String statusDetails;

  public JobProperties() {
  }

  public JobProperties creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Gets or sets the creation time of the job.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public JobProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * Gets or sets the end time of the job.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public JobProperties exception(String exception) {
    this.exception = exception;
    return this;
  }

  /**
   * Gets or sets the exception of the job.
   * @return exception
   */
  @javax.annotation.Nullable
  public String getException() {
    return exception;
  }

  public void setException(String exception) {
    this.exception = exception;
  }


  public JobProperties jobId(UUID jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Gets or sets the id of the job.
   * @return jobId
   */
  @javax.annotation.Nullable
  public UUID getJobId() {
    return jobId;
  }

  public void setJobId(UUID jobId) {
    this.jobId = jobId;
  }


  public JobProperties jobScheduleId(String jobScheduleId) {
    this.jobScheduleId = jobScheduleId;
    return this;
  }

  /**
   * Gets or sets the id of job schedule.
   * @return jobScheduleId
   */
  @javax.annotation.Nullable
  public String getJobScheduleId() {
    return jobScheduleId;
  }

  public void setJobScheduleId(String jobScheduleId) {
    this.jobScheduleId = jobScheduleId;
  }


  public JobProperties lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Gets or sets the last modified time of the job.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public JobProperties lastStatusModifiedTime(OffsetDateTime lastStatusModifiedTime) {
    this.lastStatusModifiedTime = lastStatusModifiedTime;
    return this;
  }

  /**
   * Gets or sets the last status modified time of the job.
   * @return lastStatusModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStatusModifiedTime() {
    return lastStatusModifiedTime;
  }

  public void setLastStatusModifiedTime(OffsetDateTime lastStatusModifiedTime) {
    this.lastStatusModifiedTime = lastStatusModifiedTime;
  }


  public JobProperties parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public JobProperties putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Gets or sets the parameters of the job.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public JobProperties provisioningState(JobProvisioningStateProperty provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public JobProvisioningStateProperty getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(JobProvisioningStateProperty provisioningState) {
    this.provisioningState = provisioningState;
  }


  public JobProperties runOn(String runOn) {
    this.runOn = runOn;
    return this;
  }

  /**
   * Gets or sets the runOn which specifies the group name where the job is to be executed.
   * @return runOn
   */
  @javax.annotation.Nullable
  public String getRunOn() {
    return runOn;
  }

  public void setRunOn(String runOn) {
    this.runOn = runOn;
  }


  public JobProperties runbook(RunbookAssociationProperty runbook) {
    this.runbook = runbook;
    return this;
  }

  /**
   * Get runbook
   * @return runbook
   */
  @javax.annotation.Nullable
  public RunbookAssociationProperty getRunbook() {
    return runbook;
  }

  public void setRunbook(RunbookAssociationProperty runbook) {
    this.runbook = runbook;
  }


  public JobProperties schedule(ScheduleAssociationProperty schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public ScheduleAssociationProperty getSchedule() {
    return schedule;
  }

  public void setSchedule(ScheduleAssociationProperty schedule) {
    this.schedule = schedule;
  }


  public JobProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Gets or sets the start time of the job.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public JobProperties startedBy(String startedBy) {
    this.startedBy = startedBy;
    return this;
  }

  /**
   * Gets or sets the job started by.
   * @return startedBy
   */
  @javax.annotation.Nullable
  public String getStartedBy() {
    return startedBy;
  }

  public void setStartedBy(String startedBy) {
    this.startedBy = startedBy;
  }


  public JobProperties status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Gets or sets the status of the job.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public JobProperties statusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
    return this;
  }

  /**
   * Gets or sets the status details of the job.
   * @return statusDetails
   */
  @javax.annotation.Nullable
  public String getStatusDetails() {
    return statusDetails;
  }

  public void setStatusDetails(String statusDetails) {
    this.statusDetails = statusDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobProperties jobProperties = (JobProperties) o;
    return Objects.equals(this.creationTime, jobProperties.creationTime) &&
        Objects.equals(this.endTime, jobProperties.endTime) &&
        Objects.equals(this.exception, jobProperties.exception) &&
        Objects.equals(this.jobId, jobProperties.jobId) &&
        Objects.equals(this.jobScheduleId, jobProperties.jobScheduleId) &&
        Objects.equals(this.lastModifiedTime, jobProperties.lastModifiedTime) &&
        Objects.equals(this.lastStatusModifiedTime, jobProperties.lastStatusModifiedTime) &&
        Objects.equals(this.parameters, jobProperties.parameters) &&
        Objects.equals(this.provisioningState, jobProperties.provisioningState) &&
        Objects.equals(this.runOn, jobProperties.runOn) &&
        Objects.equals(this.runbook, jobProperties.runbook) &&
        Objects.equals(this.schedule, jobProperties.schedule) &&
        Objects.equals(this.startTime, jobProperties.startTime) &&
        Objects.equals(this.startedBy, jobProperties.startedBy) &&
        Objects.equals(this.status, jobProperties.status) &&
        Objects.equals(this.statusDetails, jobProperties.statusDetails);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, endTime, exception, jobId, jobScheduleId, lastModifiedTime, lastStatusModifiedTime, parameters, provisioningState, runOn, runbook, schedule, startTime, startedBy, status, statusDetails);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobScheduleId: ").append(toIndentedString(jobScheduleId)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    lastStatusModifiedTime: ").append(toIndentedString(lastStatusModifiedTime)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    runOn: ").append(toIndentedString(runOn)).append("\n");
    sb.append("    runbook: ").append(toIndentedString(runbook)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    startedBy: ").append(toIndentedString(startedBy)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusDetails: ").append(toIndentedString(statusDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("endTime");
    openapiFields.add("exception");
    openapiFields.add("jobId");
    openapiFields.add("jobScheduleId");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("lastStatusModifiedTime");
    openapiFields.add("parameters");
    openapiFields.add("provisioningState");
    openapiFields.add("runOn");
    openapiFields.add("runbook");
    openapiFields.add("schedule");
    openapiFields.add("startTime");
    openapiFields.add("startedBy");
    openapiFields.add("status");
    openapiFields.add("statusDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobProperties is not found in the empty JSON string", JobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("exception") != null && !jsonObj.get("exception").isJsonNull()) && !jsonObj.get("exception").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exception` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exception").toString()));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("jobScheduleId") != null && !jsonObj.get("jobScheduleId").isJsonNull()) && !jsonObj.get("jobScheduleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobScheduleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobScheduleId").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        JobProvisioningStateProperty.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("runOn") != null && !jsonObj.get("runOn").isJsonNull()) && !jsonObj.get("runOn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runOn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runOn").toString()));
      }
      // validate the optional field `runbook`
      if (jsonObj.get("runbook") != null && !jsonObj.get("runbook").isJsonNull()) {
        RunbookAssociationProperty.validateJsonElement(jsonObj.get("runbook"));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        ScheduleAssociationProperty.validateJsonElement(jsonObj.get("schedule"));
      }
      if ((jsonObj.get("startedBy") != null && !jsonObj.get("startedBy").isJsonNull()) && !jsonObj.get("startedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startedBy").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("statusDetails") != null && !jsonObj.get("statusDetails").isJsonNull()) && !jsonObj.get("statusDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusDetails").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobProperties>() {
           @Override
           public void write(JsonWriter out, JobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobProperties
   * @throws IOException if the JSON string is invalid with respect to JobProperties
   */
  public static JobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobProperties.class);
  }

  /**
   * Convert an instance of JobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

