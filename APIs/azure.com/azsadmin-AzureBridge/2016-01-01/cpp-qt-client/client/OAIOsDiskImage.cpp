/**
 * AzureBridgeAdminClient
 * AzureBridge Admin Client.
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOsDiskImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOsDiskImage::OAIOsDiskImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOsDiskImage::OAIOsDiskImage() {
    this->initializeModel();
}

OAIOsDiskImage::~OAIOsDiskImage() {}

void OAIOsDiskImage::initializeModel() {

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_source_blob_sas_uri_isSet = false;
    m_source_blob_sas_uri_isValid = false;
}

void OAIOsDiskImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOsDiskImage::fromJsonObject(QJsonObject json) {

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_source_blob_sas_uri_isValid = ::OpenAPI::fromJsonValue(m_source_blob_sas_uri, json[QString("sourceBlobSasUri")]);
    m_source_blob_sas_uri_isSet = !json[QString("sourceBlobSasUri")].isNull() && m_source_blob_sas_uri_isValid;
}

QString OAIOsDiskImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOsDiskImage::asJsonObject() const {
    QJsonObject obj;
    if (m_operating_system.isSet()) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_source_blob_sas_uri_isSet) {
        obj.insert(QString("sourceBlobSasUri"), ::OpenAPI::toJsonValue(m_source_blob_sas_uri));
    }
    return obj;
}

OAIOperatingSystem OAIOsDiskImage::getOperatingSystem() const {
    return m_operating_system;
}
void OAIOsDiskImage::setOperatingSystem(const OAIOperatingSystem &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIOsDiskImage::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIOsDiskImage::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

QString OAIOsDiskImage::getSourceBlobSasUri() const {
    return m_source_blob_sas_uri;
}
void OAIOsDiskImage::setSourceBlobSasUri(const QString &source_blob_sas_uri) {
    m_source_blob_sas_uri = source_blob_sas_uri;
    m_source_blob_sas_uri_isSet = true;
}

bool OAIOsDiskImage::is_source_blob_sas_uri_Set() const{
    return m_source_blob_sas_uri_isSet;
}

bool OAIOsDiskImage::is_source_blob_sas_uri_Valid() const{
    return m_source_blob_sas_uri_isValid;
}

bool OAIOsDiskImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operating_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_blob_sas_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOsDiskImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
