/**
 * AzureBridgeAdminClient
 * AzureBridge Admin Client.
 *
 * The version of the OpenAPI document: 2016-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompatibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompatibility::OAICompatibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompatibility::OAICompatibility() {
    this->initializeModel();
}

OAICompatibility::~OAICompatibility() {}

void OAICompatibility::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_compatible_isSet = false;
    m_is_compatible_isValid = false;

    m_issues_isSet = false;
    m_issues_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAICompatibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompatibility::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_compatible_isValid = ::OpenAPI::fromJsonValue(m_is_compatible, json[QString("isCompatible")]);
    m_is_compatible_isSet = !json[QString("isCompatible")].isNull() && m_is_compatible_isValid;

    m_issues_isValid = ::OpenAPI::fromJsonValue(m_issues, json[QString("issues")]);
    m_issues_isSet = !json[QString("issues")].isNull() && m_issues_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAICompatibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompatibility::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_compatible_isSet) {
        obj.insert(QString("isCompatible"), ::OpenAPI::toJsonValue(m_is_compatible));
    }
    if (m_issues.size() > 0) {
        obj.insert(QString("issues"), ::OpenAPI::toJsonValue(m_issues));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAICompatibility::getDescription() const {
    return m_description;
}
void OAICompatibility::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICompatibility::is_description_Set() const{
    return m_description_isSet;
}

bool OAICompatibility::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICompatibility::isIsCompatible() const {
    return m_is_compatible;
}
void OAICompatibility::setIsCompatible(const bool &is_compatible) {
    m_is_compatible = is_compatible;
    m_is_compatible_isSet = true;
}

bool OAICompatibility::is_is_compatible_Set() const{
    return m_is_compatible_isSet;
}

bool OAICompatibility::is_is_compatible_Valid() const{
    return m_is_compatible_isValid;
}

QList<QString> OAICompatibility::getIssues() const {
    return m_issues;
}
void OAICompatibility::setIssues(const QList<QString> &issues) {
    m_issues = issues;
    m_issues_isSet = true;
}

bool OAICompatibility::is_issues_Set() const{
    return m_issues_isSet;
}

bool OAICompatibility::is_issues_Valid() const{
    return m_issues_isValid;
}

QString OAICompatibility::getMessage() const {
    return m_message;
}
void OAICompatibility::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICompatibility::is_message_Set() const{
    return m_message_isSet;
}

bool OAICompatibility::is_message_Valid() const{
    return m_message_isValid;
}

bool OAICompatibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_compatible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issues.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompatibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
