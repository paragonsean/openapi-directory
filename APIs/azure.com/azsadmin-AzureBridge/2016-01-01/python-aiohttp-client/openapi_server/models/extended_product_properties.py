# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.compute_role import ComputeRole
from openapi_server.models.data_disk_image import DataDiskImage
from openapi_server.models.operating_system import OperatingSystem
from openapi_server.models.os_disk_image import OsDiskImage
from openapi_server.models.uri import Uri
from openapi_server import util


class ExtendedProductProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_role: ComputeRole=None, is_system_extension: bool=None, source_blob: Uri=None, support_multiple_extensions: bool=None, version: str=None, vm_os_type: OperatingSystem=None, vm_scale_set_enabled: bool=None, data_disk_images: List[DataDiskImage]=None, os_disk_image: OsDiskImage=None):
        """ExtendedProductProperties - a model defined in OpenAPI

        :param compute_role: The compute_role of this ExtendedProductProperties.
        :param is_system_extension: The is_system_extension of this ExtendedProductProperties.
        :param source_blob: The source_blob of this ExtendedProductProperties.
        :param support_multiple_extensions: The support_multiple_extensions of this ExtendedProductProperties.
        :param version: The version of this ExtendedProductProperties.
        :param vm_os_type: The vm_os_type of this ExtendedProductProperties.
        :param vm_scale_set_enabled: The vm_scale_set_enabled of this ExtendedProductProperties.
        :param data_disk_images: The data_disk_images of this ExtendedProductProperties.
        :param os_disk_image: The os_disk_image of this ExtendedProductProperties.
        """
        self.openapi_types = {
            'compute_role': ComputeRole,
            'is_system_extension': bool,
            'source_blob': Uri,
            'support_multiple_extensions': bool,
            'version': str,
            'vm_os_type': OperatingSystem,
            'vm_scale_set_enabled': bool,
            'data_disk_images': List[DataDiskImage],
            'os_disk_image': OsDiskImage
        }

        self.attribute_map = {
            'compute_role': 'computeRole',
            'is_system_extension': 'isSystemExtension',
            'source_blob': 'sourceBlob',
            'support_multiple_extensions': 'supportMultipleExtensions',
            'version': 'version',
            'vm_os_type': 'vmOsType',
            'vm_scale_set_enabled': 'vmScaleSetEnabled',
            'data_disk_images': 'dataDiskImages',
            'os_disk_image': 'osDiskImage'
        }

        self._compute_role = compute_role
        self._is_system_extension = is_system_extension
        self._source_blob = source_blob
        self._support_multiple_extensions = support_multiple_extensions
        self._version = version
        self._vm_os_type = vm_os_type
        self._vm_scale_set_enabled = vm_scale_set_enabled
        self._data_disk_images = data_disk_images
        self._os_disk_image = os_disk_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExtendedProductProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExtendedProductProperties of this ExtendedProductProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_role(self):
        """Gets the compute_role of this ExtendedProductProperties.


        :return: The compute_role of this ExtendedProductProperties.
        :rtype: ComputeRole
        """
        return self._compute_role

    @compute_role.setter
    def compute_role(self, compute_role):
        """Sets the compute_role of this ExtendedProductProperties.


        :param compute_role: The compute_role of this ExtendedProductProperties.
        :type compute_role: ComputeRole
        """

        self._compute_role = compute_role

    @property
    def is_system_extension(self):
        """Gets the is_system_extension of this ExtendedProductProperties.

        Specifies if product is a Virtual Machine Extension.

        :return: The is_system_extension of this ExtendedProductProperties.
        :rtype: bool
        """
        return self._is_system_extension

    @is_system_extension.setter
    def is_system_extension(self, is_system_extension):
        """Sets the is_system_extension of this ExtendedProductProperties.

        Specifies if product is a Virtual Machine Extension.

        :param is_system_extension: The is_system_extension of this ExtendedProductProperties.
        :type is_system_extension: bool
        """

        self._is_system_extension = is_system_extension

    @property
    def source_blob(self):
        """Gets the source_blob of this ExtendedProductProperties.


        :return: The source_blob of this ExtendedProductProperties.
        :rtype: Uri
        """
        return self._source_blob

    @source_blob.setter
    def source_blob(self, source_blob):
        """Sets the source_blob of this ExtendedProductProperties.


        :param source_blob: The source_blob of this ExtendedProductProperties.
        :type source_blob: Uri
        """

        self._source_blob = source_blob

    @property
    def support_multiple_extensions(self):
        """Gets the support_multiple_extensions of this ExtendedProductProperties.

        Indicates if specified product supports multiple extensions.

        :return: The support_multiple_extensions of this ExtendedProductProperties.
        :rtype: bool
        """
        return self._support_multiple_extensions

    @support_multiple_extensions.setter
    def support_multiple_extensions(self, support_multiple_extensions):
        """Sets the support_multiple_extensions of this ExtendedProductProperties.

        Indicates if specified product supports multiple extensions.

        :param support_multiple_extensions: The support_multiple_extensions of this ExtendedProductProperties.
        :type support_multiple_extensions: bool
        """

        self._support_multiple_extensions = support_multiple_extensions

    @property
    def version(self):
        """Gets the version of this ExtendedProductProperties.

        Specifies product version.

        :return: The version of this ExtendedProductProperties.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExtendedProductProperties.

        Specifies product version.

        :param version: The version of this ExtendedProductProperties.
        :type version: str
        """

        self._version = version

    @property
    def vm_os_type(self):
        """Gets the vm_os_type of this ExtendedProductProperties.


        :return: The vm_os_type of this ExtendedProductProperties.
        :rtype: OperatingSystem
        """
        return self._vm_os_type

    @vm_os_type.setter
    def vm_os_type(self, vm_os_type):
        """Sets the vm_os_type of this ExtendedProductProperties.


        :param vm_os_type: The vm_os_type of this ExtendedProductProperties.
        :type vm_os_type: OperatingSystem
        """

        self._vm_os_type = vm_os_type

    @property
    def vm_scale_set_enabled(self):
        """Gets the vm_scale_set_enabled of this ExtendedProductProperties.

        Indicates if virtual machine Scale Set is enabled in the specified product.

        :return: The vm_scale_set_enabled of this ExtendedProductProperties.
        :rtype: bool
        """
        return self._vm_scale_set_enabled

    @vm_scale_set_enabled.setter
    def vm_scale_set_enabled(self, vm_scale_set_enabled):
        """Sets the vm_scale_set_enabled of this ExtendedProductProperties.

        Indicates if virtual machine Scale Set is enabled in the specified product.

        :param vm_scale_set_enabled: The vm_scale_set_enabled of this ExtendedProductProperties.
        :type vm_scale_set_enabled: bool
        """

        self._vm_scale_set_enabled = vm_scale_set_enabled

    @property
    def data_disk_images(self):
        """Gets the data_disk_images of this ExtendedProductProperties.

        List of attached data disks.

        :return: The data_disk_images of this ExtendedProductProperties.
        :rtype: List[DataDiskImage]
        """
        return self._data_disk_images

    @data_disk_images.setter
    def data_disk_images(self, data_disk_images):
        """Sets the data_disk_images of this ExtendedProductProperties.

        List of attached data disks.

        :param data_disk_images: The data_disk_images of this ExtendedProductProperties.
        :type data_disk_images: List[DataDiskImage]
        """

        self._data_disk_images = data_disk_images

    @property
    def os_disk_image(self):
        """Gets the os_disk_image of this ExtendedProductProperties.


        :return: The os_disk_image of this ExtendedProductProperties.
        :rtype: OsDiskImage
        """
        return self._os_disk_image

    @os_disk_image.setter
    def os_disk_image(self, os_disk_image):
        """Sets the os_disk_image of this ExtendedProductProperties.


        :param os_disk_image: The os_disk_image of this ExtendedProductProperties.
        :type os_disk_image: OsDiskImage
        """

        self._os_disk_image = os_disk_image
