# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.downloaded_product_all_of_compatibility import DownloadedProductAllOfCompatibility
from openapi_server.models.downloaded_product_all_of_icon_uris import DownloadedProductAllOfIconUris
from openapi_server.models.downloaded_product_all_of_product_properties import DownloadedProductAllOfProductProperties
from openapi_server import util


class ProductBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_part_number: str=None, compatibility: DownloadedProductAllOfCompatibility=None, description: str=None, display_name: str=None, gallery_item_identity: str=None, icon_uris: DownloadedProductAllOfIconUris=None, offer: str=None, offer_version: str=None, payload_length: int=None, product_kind: str=None, product_properties: DownloadedProductAllOfProductProperties=None, publisher_display_name: str=None, publisher_identifier: str=None, sku: str=None):
        """ProductBase - a model defined in OpenAPI

        :param billing_part_number: The billing_part_number of this ProductBase.
        :param compatibility: The compatibility of this ProductBase.
        :param description: The description of this ProductBase.
        :param display_name: The display_name of this ProductBase.
        :param gallery_item_identity: The gallery_item_identity of this ProductBase.
        :param icon_uris: The icon_uris of this ProductBase.
        :param offer: The offer of this ProductBase.
        :param offer_version: The offer_version of this ProductBase.
        :param payload_length: The payload_length of this ProductBase.
        :param product_kind: The product_kind of this ProductBase.
        :param product_properties: The product_properties of this ProductBase.
        :param publisher_display_name: The publisher_display_name of this ProductBase.
        :param publisher_identifier: The publisher_identifier of this ProductBase.
        :param sku: The sku of this ProductBase.
        """
        self.openapi_types = {
            'billing_part_number': str,
            'compatibility': DownloadedProductAllOfCompatibility,
            'description': str,
            'display_name': str,
            'gallery_item_identity': str,
            'icon_uris': DownloadedProductAllOfIconUris,
            'offer': str,
            'offer_version': str,
            'payload_length': int,
            'product_kind': str,
            'product_properties': DownloadedProductAllOfProductProperties,
            'publisher_display_name': str,
            'publisher_identifier': str,
            'sku': str
        }

        self.attribute_map = {
            'billing_part_number': 'billingPartNumber',
            'compatibility': 'compatibility',
            'description': 'description',
            'display_name': 'displayName',
            'gallery_item_identity': 'galleryItemIdentity',
            'icon_uris': 'iconUris',
            'offer': 'offer',
            'offer_version': 'offerVersion',
            'payload_length': 'payloadLength',
            'product_kind': 'productKind',
            'product_properties': 'productProperties',
            'publisher_display_name': 'publisherDisplayName',
            'publisher_identifier': 'publisherIdentifier',
            'sku': 'sku'
        }

        self._billing_part_number = billing_part_number
        self._compatibility = compatibility
        self._description = description
        self._display_name = display_name
        self._gallery_item_identity = gallery_item_identity
        self._icon_uris = icon_uris
        self._offer = offer
        self._offer_version = offer_version
        self._payload_length = payload_length
        self._product_kind = product_kind
        self._product_properties = product_properties
        self._publisher_display_name = publisher_display_name
        self._publisher_identifier = publisher_identifier
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductBase of this ProductBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_part_number(self):
        """Gets the billing_part_number of this ProductBase.

        Billing part number.

        :return: The billing_part_number of this ProductBase.
        :rtype: str
        """
        return self._billing_part_number

    @billing_part_number.setter
    def billing_part_number(self, billing_part_number):
        """Sets the billing_part_number of this ProductBase.

        Billing part number.

        :param billing_part_number: The billing_part_number of this ProductBase.
        :type billing_part_number: str
        """

        self._billing_part_number = billing_part_number

    @property
    def compatibility(self):
        """Gets the compatibility of this ProductBase.


        :return: The compatibility of this ProductBase.
        :rtype: DownloadedProductAllOfCompatibility
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this ProductBase.


        :param compatibility: The compatibility of this ProductBase.
        :type compatibility: DownloadedProductAllOfCompatibility
        """

        self._compatibility = compatibility

    @property
    def description(self):
        """Gets the description of this ProductBase.

        Description of the product.

        :return: The description of this ProductBase.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductBase.

        Description of the product.

        :param description: The description of this ProductBase.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ProductBase.

        Name displayed for the product.

        :return: The display_name of this ProductBase.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProductBase.

        Name displayed for the product.

        :param display_name: The display_name of this ProductBase.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def gallery_item_identity(self):
        """Gets the gallery_item_identity of this ProductBase.

        Gallery item identity.

        :return: The gallery_item_identity of this ProductBase.
        :rtype: str
        """
        return self._gallery_item_identity

    @gallery_item_identity.setter
    def gallery_item_identity(self, gallery_item_identity):
        """Sets the gallery_item_identity of this ProductBase.

        Gallery item identity.

        :param gallery_item_identity: The gallery_item_identity of this ProductBase.
        :type gallery_item_identity: str
        """

        self._gallery_item_identity = gallery_item_identity

    @property
    def icon_uris(self):
        """Gets the icon_uris of this ProductBase.


        :return: The icon_uris of this ProductBase.
        :rtype: DownloadedProductAllOfIconUris
        """
        return self._icon_uris

    @icon_uris.setter
    def icon_uris(self, icon_uris):
        """Sets the icon_uris of this ProductBase.


        :param icon_uris: The icon_uris of this ProductBase.
        :type icon_uris: DownloadedProductAllOfIconUris
        """

        self._icon_uris = icon_uris

    @property
    def offer(self):
        """Gets the offer of this ProductBase.

        Offer name.

        :return: The offer of this ProductBase.
        :rtype: str
        """
        return self._offer

    @offer.setter
    def offer(self, offer):
        """Sets the offer of this ProductBase.

        Offer name.

        :param offer: The offer of this ProductBase.
        :type offer: str
        """

        self._offer = offer

    @property
    def offer_version(self):
        """Gets the offer_version of this ProductBase.

        Offer version.

        :return: The offer_version of this ProductBase.
        :rtype: str
        """
        return self._offer_version

    @offer_version.setter
    def offer_version(self, offer_version):
        """Sets the offer_version of this ProductBase.

        Offer version.

        :param offer_version: The offer_version of this ProductBase.
        :type offer_version: str
        """

        self._offer_version = offer_version

    @property
    def payload_length(self):
        """Gets the payload_length of this ProductBase.

        Size in bytes.

        :return: The payload_length of this ProductBase.
        :rtype: int
        """
        return self._payload_length

    @payload_length.setter
    def payload_length(self, payload_length):
        """Sets the payload_length of this ProductBase.

        Size in bytes.

        :param payload_length: The payload_length of this ProductBase.
        :type payload_length: int
        """

        self._payload_length = payload_length

    @property
    def product_kind(self):
        """Gets the product_kind of this ProductBase.

        The kind. E.g. VirtualMachineProductProperties.ProductKind or WebApp, SolutionTemplate.

        :return: The product_kind of this ProductBase.
        :rtype: str
        """
        return self._product_kind

    @product_kind.setter
    def product_kind(self, product_kind):
        """Sets the product_kind of this ProductBase.

        The kind. E.g. VirtualMachineProductProperties.ProductKind or WebApp, SolutionTemplate.

        :param product_kind: The product_kind of this ProductBase.
        :type product_kind: str
        """

        self._product_kind = product_kind

    @property
    def product_properties(self):
        """Gets the product_properties of this ProductBase.


        :return: The product_properties of this ProductBase.
        :rtype: DownloadedProductAllOfProductProperties
        """
        return self._product_properties

    @product_properties.setter
    def product_properties(self, product_properties):
        """Sets the product_properties of this ProductBase.


        :param product_properties: The product_properties of this ProductBase.
        :type product_properties: DownloadedProductAllOfProductProperties
        """

        self._product_properties = product_properties

    @property
    def publisher_display_name(self):
        """Gets the publisher_display_name of this ProductBase.

        Name of publisher.

        :return: The publisher_display_name of this ProductBase.
        :rtype: str
        """
        return self._publisher_display_name

    @publisher_display_name.setter
    def publisher_display_name(self, publisher_display_name):
        """Sets the publisher_display_name of this ProductBase.

        Name of publisher.

        :param publisher_display_name: The publisher_display_name of this ProductBase.
        :type publisher_display_name: str
        """

        self._publisher_display_name = publisher_display_name

    @property
    def publisher_identifier(self):
        """Gets the publisher_identifier of this ProductBase.

        Publisher identifier.

        :return: The publisher_identifier of this ProductBase.
        :rtype: str
        """
        return self._publisher_identifier

    @publisher_identifier.setter
    def publisher_identifier(self, publisher_identifier):
        """Sets the publisher_identifier of this ProductBase.

        Publisher identifier.

        :param publisher_identifier: The publisher_identifier of this ProductBase.
        :type publisher_identifier: str
        """

        self._publisher_identifier = publisher_identifier

    @property
    def sku(self):
        """Gets the sku of this ProductBase.

        Product SKU.

        :return: The sku of this ProductBase.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductBase.

        Product SKU.

        :param sku: The sku of this ProductBase.
        :type sku: str
        """

        self._sku = sku
