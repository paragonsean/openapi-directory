# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Compatibility(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, is_compatible: bool=None, issues: List[str]=None, message: str=None):
        """Compatibility - a model defined in OpenAPI

        :param description: The description of this Compatibility.
        :param is_compatible: The is_compatible of this Compatibility.
        :param issues: The issues of this Compatibility.
        :param message: The message of this Compatibility.
        """
        self.openapi_types = {
            'description': str,
            'is_compatible': bool,
            'issues': List[str],
            'message': str
        }

        self.attribute_map = {
            'description': 'description',
            'is_compatible': 'isCompatible',
            'issues': 'issues',
            'message': 'message'
        }

        self._description = description
        self._is_compatible = is_compatible
        self._issues = issues
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Compatibility':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Compatibility of this Compatibility.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Compatibility.

        Full error message if any compatibility issues are found

        :return: The description of this Compatibility.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Compatibility.

        Full error message if any compatibility issues are found

        :param description: The description of this Compatibility.
        :type description: str
        """

        self._description = description

    @property
    def is_compatible(self):
        """Gets the is_compatible of this Compatibility.

        Tells if product is compatible with current device

        :return: The is_compatible of this Compatibility.
        :rtype: bool
        """
        return self._is_compatible

    @is_compatible.setter
    def is_compatible(self, is_compatible):
        """Sets the is_compatible of this Compatibility.

        Tells if product is compatible with current device

        :param is_compatible: The is_compatible of this Compatibility.
        :type is_compatible: bool
        """

        self._is_compatible = is_compatible

    @property
    def issues(self):
        """Gets the issues of this Compatibility.

        List of all issues found

        :return: The issues of this Compatibility.
        :rtype: List[str]
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this Compatibility.

        List of all issues found

        :param issues: The issues of this Compatibility.
        :type issues: List[str]
        """
        allowed_values = ["HigherDeviceVersionRequired", "LowerDeviceVersionRequired", "CapacityBillingModelRequired", "PayAsYouGoBillingModelRequired", "DevelopmentBillingModelRequired", "AzureADIdentitySystemRequired", "ADFSIdentitySystemRequired", "ConnectionToInternetRequired", "ConnectionToAzureRequired", "DisconnectedEnvironmentRequired"]  # noqa: E501
        if not set(issues).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `issues` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(issues) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._issues = issues

    @property
    def message(self):
        """Gets the message of this Compatibility.

        Short error message if any compatibility issues are found

        :return: The message of this Compatibility.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Compatibility.

        Short error message if any compatibility issues are found

        :param message: The message of this Compatibility.
        :type message: str
        """

        self._message = message
