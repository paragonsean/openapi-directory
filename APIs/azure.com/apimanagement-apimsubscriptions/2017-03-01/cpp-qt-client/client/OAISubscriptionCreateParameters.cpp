/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Subscription entity associated with your Azure API Management deployment. The Subscription entity represents the association between a user and a product in API Management. Products contain one or more APIs, and once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscriptionCreateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscriptionCreateParameters::OAISubscriptionCreateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscriptionCreateParameters::OAISubscriptionCreateParameters() {
    this->initializeModel();
}

OAISubscriptionCreateParameters::~OAISubscriptionCreateParameters() {}

void OAISubscriptionCreateParameters::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISubscriptionCreateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscriptionCreateParameters::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAISubscriptionCreateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscriptionCreateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAISubscriptionCreateParameters::getName() const {
    return m_name;
}
void OAISubscriptionCreateParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubscriptionCreateParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubscriptionCreateParameters::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISubscriptionCreateParameters::getPrimaryKey() const {
    return m_primary_key;
}
void OAISubscriptionCreateParameters::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAISubscriptionCreateParameters::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAISubscriptionCreateParameters::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAISubscriptionCreateParameters::getProductId() const {
    return m_product_id;
}
void OAISubscriptionCreateParameters::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAISubscriptionCreateParameters::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAISubscriptionCreateParameters::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAISubscriptionCreateParameters::getSecondaryKey() const {
    return m_secondary_key;
}
void OAISubscriptionCreateParameters::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAISubscriptionCreateParameters::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAISubscriptionCreateParameters::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

QString OAISubscriptionCreateParameters::getState() const {
    return m_state;
}
void OAISubscriptionCreateParameters::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscriptionCreateParameters::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscriptionCreateParameters::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubscriptionCreateParameters::getUserId() const {
    return m_user_id;
}
void OAISubscriptionCreateParameters::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISubscriptionCreateParameters::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISubscriptionCreateParameters::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISubscriptionCreateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscriptionCreateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_id_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
