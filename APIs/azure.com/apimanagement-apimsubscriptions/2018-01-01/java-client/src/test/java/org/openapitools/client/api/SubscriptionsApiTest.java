/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Subscription entity associated with your Azure API Management deployment. The Subscription entity represents the association between a user and a product in API Management. Products contain one or more APIs, and once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.SubscriptionCollection;
import org.openapitools.client.model.SubscriptionContract;
import org.openapitools.client.model.SubscriptionCreateParameters;
import org.openapitools.client.model.SubscriptionListDefaultResponse;
import org.openapitools.client.model.SubscriptionUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubscriptionsApi
 */
@Disabled
public class SubscriptionsApiTest {

    private final SubscriptionsApi api = new SubscriptionsApi();

    /**
     * Creates or updates the subscription of specified user to the specified product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String sid = null;
        String apiVersion = null;
        String subscriptionId = null;
        SubscriptionCreateParameters parameters = null;
        Boolean notify = null;
        String ifMatch = null;
        SubscriptionContract response = api.subscriptionCreateOrUpdate(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, parameters, notify, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String sid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.subscriptionDelete(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified Subscription entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String sid = null;
        String apiVersion = null;
        String subscriptionId = null;
        SubscriptionContract response = api.subscriptionGet(resourceGroupName, serviceName, sid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the apimanagement subscription specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String sid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.subscriptionGetEntityTag(resourceGroupName, serviceName, sid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all subscriptions of the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionListTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        SubscriptionCollection response = api.subscriptionList(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Regenerates primary key of existing subscription of the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionRegeneratePrimaryKeyTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String sid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.subscriptionRegeneratePrimaryKey(resourceGroupName, serviceName, sid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerates secondary key of existing subscription of the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionRegenerateSecondaryKeyTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String sid = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.subscriptionRegenerateSecondaryKey(resourceGroupName, serviceName, sid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates the details of a subscription specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscriptionUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String sid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        SubscriptionUpdateParameters parameters = null;
        Boolean notify = null;
        api.subscriptionUpdate(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, parameters, notify);
        // TODO: test validations
    }

}
