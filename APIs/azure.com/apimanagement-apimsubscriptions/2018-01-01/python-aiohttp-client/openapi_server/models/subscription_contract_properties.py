# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionContractProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: datetime=None, display_name: str=None, end_date: datetime=None, expiration_date: datetime=None, notification_date: datetime=None, primary_key: str=None, product_id: str=None, secondary_key: str=None, start_date: datetime=None, state: str=None, state_comment: str=None, user_id: str=None):
        """SubscriptionContractProperties - a model defined in OpenAPI

        :param created_date: The created_date of this SubscriptionContractProperties.
        :param display_name: The display_name of this SubscriptionContractProperties.
        :param end_date: The end_date of this SubscriptionContractProperties.
        :param expiration_date: The expiration_date of this SubscriptionContractProperties.
        :param notification_date: The notification_date of this SubscriptionContractProperties.
        :param primary_key: The primary_key of this SubscriptionContractProperties.
        :param product_id: The product_id of this SubscriptionContractProperties.
        :param secondary_key: The secondary_key of this SubscriptionContractProperties.
        :param start_date: The start_date of this SubscriptionContractProperties.
        :param state: The state of this SubscriptionContractProperties.
        :param state_comment: The state_comment of this SubscriptionContractProperties.
        :param user_id: The user_id of this SubscriptionContractProperties.
        """
        self.openapi_types = {
            'created_date': datetime,
            'display_name': str,
            'end_date': datetime,
            'expiration_date': datetime,
            'notification_date': datetime,
            'primary_key': str,
            'product_id': str,
            'secondary_key': str,
            'start_date': datetime,
            'state': str,
            'state_comment': str,
            'user_id': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'display_name': 'displayName',
            'end_date': 'endDate',
            'expiration_date': 'expirationDate',
            'notification_date': 'notificationDate',
            'primary_key': 'primaryKey',
            'product_id': 'productId',
            'secondary_key': 'secondaryKey',
            'start_date': 'startDate',
            'state': 'state',
            'state_comment': 'stateComment',
            'user_id': 'userId'
        }

        self._created_date = created_date
        self._display_name = display_name
        self._end_date = end_date
        self._expiration_date = expiration_date
        self._notification_date = notification_date
        self._primary_key = primary_key
        self._product_id = product_id
        self._secondary_key = secondary_key
        self._start_date = start_date
        self._state = state
        self._state_comment = state_comment
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionContractProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionContractProperties of this SubscriptionContractProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this SubscriptionContractProperties.

        Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The created_date of this SubscriptionContractProperties.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SubscriptionContractProperties.

        Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param created_date: The created_date of this SubscriptionContractProperties.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def display_name(self):
        """Gets the display_name of this SubscriptionContractProperties.

        The name of the subscription, or null if the subscription has no name.

        :return: The display_name of this SubscriptionContractProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SubscriptionContractProperties.

        The name of the subscription, or null if the subscription has no name.

        :param display_name: The display_name of this SubscriptionContractProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 100:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `100`")
        if display_name is not None and len(display_name) < 0:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `0`")

        self._display_name = display_name

    @property
    def end_date(self):
        """Gets the end_date of this SubscriptionContractProperties.

        Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The end_date of this SubscriptionContractProperties.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SubscriptionContractProperties.

        Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param end_date: The end_date of this SubscriptionContractProperties.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SubscriptionContractProperties.

        Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The expiration_date of this SubscriptionContractProperties.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SubscriptionContractProperties.

        Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param expiration_date: The expiration_date of this SubscriptionContractProperties.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def notification_date(self):
        """Gets the notification_date of this SubscriptionContractProperties.

        Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The notification_date of this SubscriptionContractProperties.
        :rtype: datetime
        """
        return self._notification_date

    @notification_date.setter
    def notification_date(self, notification_date):
        """Sets the notification_date of this SubscriptionContractProperties.

        Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param notification_date: The notification_date of this SubscriptionContractProperties.
        :type notification_date: datetime
        """

        self._notification_date = notification_date

    @property
    def primary_key(self):
        """Gets the primary_key of this SubscriptionContractProperties.

        Subscription primary key.

        :return: The primary_key of this SubscriptionContractProperties.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this SubscriptionContractProperties.

        Subscription primary key.

        :param primary_key: The primary_key of this SubscriptionContractProperties.
        :type primary_key: str
        """
        if primary_key is None:
            raise ValueError("Invalid value for `primary_key`, must not be `None`")
        if primary_key is not None and len(primary_key) > 256:
            raise ValueError("Invalid value for `primary_key`, length must be less than or equal to `256`")
        if primary_key is not None and len(primary_key) < 1:
            raise ValueError("Invalid value for `primary_key`, length must be greater than or equal to `1`")

        self._primary_key = primary_key

    @property
    def product_id(self):
        """Gets the product_id of this SubscriptionContractProperties.

        The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.

        :return: The product_id of this SubscriptionContractProperties.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SubscriptionContractProperties.

        The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.

        :param product_id: The product_id of this SubscriptionContractProperties.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def secondary_key(self):
        """Gets the secondary_key of this SubscriptionContractProperties.

        Subscription secondary key.

        :return: The secondary_key of this SubscriptionContractProperties.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this SubscriptionContractProperties.

        Subscription secondary key.

        :param secondary_key: The secondary_key of this SubscriptionContractProperties.
        :type secondary_key: str
        """
        if secondary_key is None:
            raise ValueError("Invalid value for `secondary_key`, must not be `None`")
        if secondary_key is not None and len(secondary_key) > 256:
            raise ValueError("Invalid value for `secondary_key`, length must be less than or equal to `256`")
        if secondary_key is not None and len(secondary_key) < 1:
            raise ValueError("Invalid value for `secondary_key`, length must be greater than or equal to `1`")

        self._secondary_key = secondary_key

    @property
    def start_date(self):
        """Gets the start_date of this SubscriptionContractProperties.

        Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The start_date of this SubscriptionContractProperties.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SubscriptionContractProperties.

        Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param start_date: The start_date of this SubscriptionContractProperties.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this SubscriptionContractProperties.

        Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :return: The state of this SubscriptionContractProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionContractProperties.

        Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :param state: The state of this SubscriptionContractProperties.
        :type state: str
        """
        allowed_values = ["suspended", "active", "expired", "submitted", "rejected", "cancelled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_comment(self):
        """Gets the state_comment of this SubscriptionContractProperties.

        Optional subscription comment added by an administrator.

        :return: The state_comment of this SubscriptionContractProperties.
        :rtype: str
        """
        return self._state_comment

    @state_comment.setter
    def state_comment(self, state_comment):
        """Sets the state_comment of this SubscriptionContractProperties.

        Optional subscription comment added by an administrator.

        :param state_comment: The state_comment of this SubscriptionContractProperties.
        :type state_comment: str
        """

        self._state_comment = state_comment

    @property
    def user_id(self):
        """Gets the user_id of this SubscriptionContractProperties.

        The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.

        :return: The user_id of this SubscriptionContractProperties.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SubscriptionContractProperties.

        The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.

        :param user_id: The user_id of this SubscriptionContractProperties.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
