/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Subscription entity associated with your Azure API Management deployment. The Subscription entity represents the association between a user and a product in API Management. Products contain one or more APIs, and once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubscriptionsApi_H
#define OAI_OAISubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISubscriptionCollection.h"
#include "OAISubscriptionContract.h"
#include "OAISubscriptionCreateParameters.h"
#include "OAISubscriptionUpdateParameters.h"
#include "OAISubscriptions_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAISubscriptionsApi(const int timeOut = 0);
    ~OAISubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISubscriptionCreateParameters [required]
    */
    virtual void subscriptionsCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &sid, const QString &api_version, const QString &subscription_id, const OAISubscriptionCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsDelete(const QString &resource_group_name, const QString &service_name, const QString &sid, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsGet(const QString &resource_group_name, const QString &service_name, const QString &sid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void subscriptionsList(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsRegeneratePrimaryKey(const QString &resource_group_name, const QString &service_name, const QString &sid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void subscriptionsRegenerateSecondaryKey(const QString &resource_group_name, const QString &service_name, const QString &sid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  sid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISubscriptionUpdateParameters [required]
    */
    virtual void subscriptionsUpdate(const QString &resource_group_name, const QString &service_name, const QString &sid, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAISubscriptionUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void subscriptionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void subscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void subscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void subscriptionsListCallback(OAIHttpRequestWorker *worker);
    void subscriptionsRegeneratePrimaryKeyCallback(OAIHttpRequestWorker *worker);
    void subscriptionsRegenerateSecondaryKeyCallback(OAIHttpRequestWorker *worker);
    void subscriptionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void subscriptionsCreateOrUpdateSignal();
    void subscriptionsDeleteSignal();
    void subscriptionsGetSignal(OAISubscriptionContract summary);
    void subscriptionsListSignal(OAISubscriptionCollection summary);
    void subscriptionsRegeneratePrimaryKeySignal();
    void subscriptionsRegenerateSecondaryKeySignal();
    void subscriptionsUpdateSignal();


    void subscriptionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsGetSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionContract summary);
    void subscriptionsListSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionCollection summary);
    void subscriptionsRegeneratePrimaryKeySignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsRegenerateSecondaryKeySignalFull(OAIHttpRequestWorker *worker);
    void subscriptionsUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use subscriptionsCreateOrUpdateSignalError() instead")
    void subscriptionsCreateOrUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsCreateOrUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsDeleteSignalError() instead")
    void subscriptionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsGetSignalError() instead")
    void subscriptionsGetSignalE(OAISubscriptionContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsGetSignalError(OAISubscriptionContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsListSignalError() instead")
    void subscriptionsListSignalE(OAISubscriptionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsListSignalError(OAISubscriptionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsRegeneratePrimaryKeySignalError() instead")
    void subscriptionsRegeneratePrimaryKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsRegeneratePrimaryKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsRegenerateSecondaryKeySignalError() instead")
    void subscriptionsRegenerateSecondaryKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsRegenerateSecondaryKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsUpdateSignalError() instead")
    void subscriptionsUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use subscriptionsCreateOrUpdateSignalErrorFull() instead")
    void subscriptionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsDeleteSignalErrorFull() instead")
    void subscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsGetSignalErrorFull() instead")
    void subscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsListSignalErrorFull() instead")
    void subscriptionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsRegeneratePrimaryKeySignalErrorFull() instead")
    void subscriptionsRegeneratePrimaryKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsRegeneratePrimaryKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsRegenerateSecondaryKeySignalErrorFull() instead")
    void subscriptionsRegenerateSecondaryKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsRegenerateSecondaryKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscriptionsUpdateSignalErrorFull() instead")
    void subscriptionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscriptionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
