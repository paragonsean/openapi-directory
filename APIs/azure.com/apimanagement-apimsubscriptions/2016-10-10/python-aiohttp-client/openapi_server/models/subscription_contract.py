# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: datetime=None, end_date: datetime=None, expiration_date: datetime=None, id: str=None, name: str=None, notification_date: datetime=None, primary_key: str=None, product_id: str=None, secondary_key: str=None, start_date: datetime=None, state: str=None, state_comment: str=None, user_id: str=None):
        """SubscriptionContract - a model defined in OpenAPI

        :param created_date: The created_date of this SubscriptionContract.
        :param end_date: The end_date of this SubscriptionContract.
        :param expiration_date: The expiration_date of this SubscriptionContract.
        :param id: The id of this SubscriptionContract.
        :param name: The name of this SubscriptionContract.
        :param notification_date: The notification_date of this SubscriptionContract.
        :param primary_key: The primary_key of this SubscriptionContract.
        :param product_id: The product_id of this SubscriptionContract.
        :param secondary_key: The secondary_key of this SubscriptionContract.
        :param start_date: The start_date of this SubscriptionContract.
        :param state: The state of this SubscriptionContract.
        :param state_comment: The state_comment of this SubscriptionContract.
        :param user_id: The user_id of this SubscriptionContract.
        """
        self.openapi_types = {
            'created_date': datetime,
            'end_date': datetime,
            'expiration_date': datetime,
            'id': str,
            'name': str,
            'notification_date': datetime,
            'primary_key': str,
            'product_id': str,
            'secondary_key': str,
            'start_date': datetime,
            'state': str,
            'state_comment': str,
            'user_id': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'end_date': 'endDate',
            'expiration_date': 'expirationDate',
            'id': 'id',
            'name': 'name',
            'notification_date': 'notificationDate',
            'primary_key': 'primaryKey',
            'product_id': 'productId',
            'secondary_key': 'secondaryKey',
            'start_date': 'startDate',
            'state': 'state',
            'state_comment': 'stateComment',
            'user_id': 'userId'
        }

        self._created_date = created_date
        self._end_date = end_date
        self._expiration_date = expiration_date
        self._id = id
        self._name = name
        self._notification_date = notification_date
        self._primary_key = primary_key
        self._product_id = product_id
        self._secondary_key = secondary_key
        self._start_date = start_date
        self._state = state
        self._state_comment = state_comment
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionContract of this SubscriptionContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this SubscriptionContract.

        Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The created_date of this SubscriptionContract.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this SubscriptionContract.

        Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param created_date: The created_date of this SubscriptionContract.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def end_date(self):
        """Gets the end_date of this SubscriptionContract.

        Date when subscription was cancelled or expired. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The end_date of this SubscriptionContract.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SubscriptionContract.

        Date when subscription was cancelled or expired. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param end_date: The end_date of this SubscriptionContract.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SubscriptionContract.

        Subscription expiration date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The expiration_date of this SubscriptionContract.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SubscriptionContract.

        Subscription expiration date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param expiration_date: The expiration_date of this SubscriptionContract.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def id(self):
        """Gets the id of this SubscriptionContract.

        Uniquely identifies the subscription within the current API Management service instance. The value is a valid relative URL in the format of /subscriptions/{sid} where {sid} is a subscription identifier.

        :return: The id of this SubscriptionContract.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionContract.

        Uniquely identifies the subscription within the current API Management service instance. The value is a valid relative URL in the format of /subscriptions/{sid} where {sid} is a subscription identifier.

        :param id: The id of this SubscriptionContract.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SubscriptionContract.

        The name of the subscription, or null if the subscription has no name.

        :return: The name of this SubscriptionContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionContract.

        The name of the subscription, or null if the subscription has no name.

        :param name: The name of this SubscriptionContract.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def notification_date(self):
        """Gets the notification_date of this SubscriptionContract.

        Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The notification_date of this SubscriptionContract.
        :rtype: datetime
        """
        return self._notification_date

    @notification_date.setter
    def notification_date(self, notification_date):
        """Sets the notification_date of this SubscriptionContract.

        Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param notification_date: The notification_date of this SubscriptionContract.
        :type notification_date: datetime
        """

        self._notification_date = notification_date

    @property
    def primary_key(self):
        """Gets the primary_key of this SubscriptionContract.

        Subscription primary key.

        :return: The primary_key of this SubscriptionContract.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this SubscriptionContract.

        Subscription primary key.

        :param primary_key: The primary_key of this SubscriptionContract.
        :type primary_key: str
        """
        if primary_key is not None and len(primary_key) > 256:
            raise ValueError("Invalid value for `primary_key`, length must be less than or equal to `256`")
        if primary_key is not None and len(primary_key) < 1:
            raise ValueError("Invalid value for `primary_key`, length must be greater than or equal to `1`")

        self._primary_key = primary_key

    @property
    def product_id(self):
        """Gets the product_id of this SubscriptionContract.

        The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.

        :return: The product_id of this SubscriptionContract.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SubscriptionContract.

        The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.

        :param product_id: The product_id of this SubscriptionContract.
        :type product_id: str
        """

        self._product_id = product_id

    @property
    def secondary_key(self):
        """Gets the secondary_key of this SubscriptionContract.

        Subscription secondary key.

        :return: The secondary_key of this SubscriptionContract.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this SubscriptionContract.

        Subscription secondary key.

        :param secondary_key: The secondary_key of this SubscriptionContract.
        :type secondary_key: str
        """
        if secondary_key is not None and len(secondary_key) > 256:
            raise ValueError("Invalid value for `secondary_key`, length must be less than or equal to `256`")
        if secondary_key is not None and len(secondary_key) < 1:
            raise ValueError("Invalid value for `secondary_key`, length must be greater than or equal to `1`")

        self._secondary_key = secondary_key

    @property
    def start_date(self):
        """Gets the start_date of this SubscriptionContract.

        Subscription activation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The start_date of this SubscriptionContract.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SubscriptionContract.

        Subscription activation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param start_date: The start_date of this SubscriptionContract.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this SubscriptionContract.

        Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :return: The state of this SubscriptionContract.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionContract.

        Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :param state: The state of this SubscriptionContract.
        :type state: str
        """
        allowed_values = ["Suspended", "Active", "Expired", "Submitted", "Rejected", "Cancelled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_comment(self):
        """Gets the state_comment of this SubscriptionContract.

        Optional subscription comment added by an administrator.

        :return: The state_comment of this SubscriptionContract.
        :rtype: str
        """
        return self._state_comment

    @state_comment.setter
    def state_comment(self, state_comment):
        """Sets the state_comment of this SubscriptionContract.

        Optional subscription comment added by an administrator.

        :param state_comment: The state_comment of this SubscriptionContract.
        :type state_comment: str
        """

        self._state_comment = state_comment

    @property
    def user_id(self):
        """Gets the user_id of this SubscriptionContract.

        The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.

        :return: The user_id of this SubscriptionContract.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SubscriptionContract.

        The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.

        :param user_id: The user_id of this SubscriptionContract.
        :type user_id: str
        """

        self._user_id = user_id
