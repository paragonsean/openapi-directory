# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionCreateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, primary_key: str=None, product_id: str=None, secondary_key: str=None, state: str=None, user_id: str=None):
        """SubscriptionCreateParameters - a model defined in OpenAPI

        :param name: The name of this SubscriptionCreateParameters.
        :param primary_key: The primary_key of this SubscriptionCreateParameters.
        :param product_id: The product_id of this SubscriptionCreateParameters.
        :param secondary_key: The secondary_key of this SubscriptionCreateParameters.
        :param state: The state of this SubscriptionCreateParameters.
        :param user_id: The user_id of this SubscriptionCreateParameters.
        """
        self.openapi_types = {
            'name': str,
            'primary_key': str,
            'product_id': str,
            'secondary_key': str,
            'state': str,
            'user_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'primary_key': 'primaryKey',
            'product_id': 'productId',
            'secondary_key': 'secondaryKey',
            'state': 'state',
            'user_id': 'userId'
        }

        self._name = name
        self._primary_key = primary_key
        self._product_id = product_id
        self._secondary_key = secondary_key
        self._state = state
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionCreateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionCreateParameters of this SubscriptionCreateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SubscriptionCreateParameters.

        Subscription name.

        :return: The name of this SubscriptionCreateParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionCreateParameters.

        Subscription name.

        :param name: The name of this SubscriptionCreateParameters.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def primary_key(self):
        """Gets the primary_key of this SubscriptionCreateParameters.

        Primary subscription key. If not specified during request key will be generated automatically.

        :return: The primary_key of this SubscriptionCreateParameters.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this SubscriptionCreateParameters.

        Primary subscription key. If not specified during request key will be generated automatically.

        :param primary_key: The primary_key of this SubscriptionCreateParameters.
        :type primary_key: str
        """
        if primary_key is not None and len(primary_key) > 256:
            raise ValueError("Invalid value for `primary_key`, length must be less than or equal to `256`")
        if primary_key is not None and len(primary_key) < 1:
            raise ValueError("Invalid value for `primary_key`, length must be greater than or equal to `1`")

        self._primary_key = primary_key

    @property
    def product_id(self):
        """Gets the product_id of this SubscriptionCreateParameters.

        Product (product id path) for which subscription is being created in form /products/{productId}

        :return: The product_id of this SubscriptionCreateParameters.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SubscriptionCreateParameters.

        Product (product id path) for which subscription is being created in form /products/{productId}

        :param product_id: The product_id of this SubscriptionCreateParameters.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def secondary_key(self):
        """Gets the secondary_key of this SubscriptionCreateParameters.

        Secondary subscription key. If not specified during request key will be generated automatically.

        :return: The secondary_key of this SubscriptionCreateParameters.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this SubscriptionCreateParameters.

        Secondary subscription key. If not specified during request key will be generated automatically.

        :param secondary_key: The secondary_key of this SubscriptionCreateParameters.
        :type secondary_key: str
        """
        if secondary_key is not None and len(secondary_key) > 256:
            raise ValueError("Invalid value for `secondary_key`, length must be less than or equal to `256`")
        if secondary_key is not None and len(secondary_key) < 1:
            raise ValueError("Invalid value for `secondary_key`, length must be greater than or equal to `1`")

        self._secondary_key = secondary_key

    @property
    def state(self):
        """Gets the state of this SubscriptionCreateParameters.

        Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :return: The state of this SubscriptionCreateParameters.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionCreateParameters.

        Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :param state: The state of this SubscriptionCreateParameters.
        :type state: str
        """
        allowed_values = ["Suspended", "Active", "Expired", "Submitted", "Rejected", "Cancelled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user_id(self):
        """Gets the user_id of this SubscriptionCreateParameters.

        User (user id path) for whom subscription is being created in form /users/{uid}

        :return: The user_id of this SubscriptionCreateParameters.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SubscriptionCreateParameters.

        User (user id path) for whom subscription is being created in form /users/{uid}

        :param user_id: The user_id of this SubscriptionCreateParameters.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
