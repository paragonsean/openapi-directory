/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Subscription entity associated with your Azure API Management deployment. The Subscription entity represents the association between a user and a product in API Management. Products contain one or more APIs, and once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiManagementClient);
  }
}(this, function(expect, ApiManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiManagementClient.SubscriptionApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SubscriptionApi', function() {
    describe('subscriptionCreateOrUpdate', function() {
      it('should call subscriptionCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test subscriptionCreateOrUpdate
        //instance.subscriptionCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionDelete', function() {
      it('should call subscriptionDelete successfully', function(done) {
        //uncomment below and update the code to test subscriptionDelete
        //instance.subscriptionDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionGet', function() {
      it('should call subscriptionGet successfully', function(done) {
        //uncomment below and update the code to test subscriptionGet
        //instance.subscriptionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionGetEntityTag', function() {
      it('should call subscriptionGetEntityTag successfully', function(done) {
        //uncomment below and update the code to test subscriptionGetEntityTag
        //instance.subscriptionGetEntityTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionList', function() {
      it('should call subscriptionList successfully', function(done) {
        //uncomment below and update the code to test subscriptionList
        //instance.subscriptionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionListSecrets', function() {
      it('should call subscriptionListSecrets successfully', function(done) {
        //uncomment below and update the code to test subscriptionListSecrets
        //instance.subscriptionListSecrets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionRegeneratePrimaryKey', function() {
      it('should call subscriptionRegeneratePrimaryKey successfully', function(done) {
        //uncomment below and update the code to test subscriptionRegeneratePrimaryKey
        //instance.subscriptionRegeneratePrimaryKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionRegenerateSecondaryKey', function() {
      it('should call subscriptionRegenerateSecondaryKey successfully', function(done) {
        //uncomment below and update the code to test subscriptionRegenerateSecondaryKey
        //instance.subscriptionRegenerateSecondaryKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscriptionUpdate', function() {
      it('should call subscriptionUpdate successfully', function(done) {
        //uncomment below and update the code to test subscriptionUpdate
        //instance.subscriptionUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
