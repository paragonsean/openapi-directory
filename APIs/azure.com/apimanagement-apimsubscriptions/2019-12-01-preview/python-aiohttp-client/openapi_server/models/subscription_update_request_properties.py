# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionUpdateRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_tracing: bool=None, display_name: str=None, expiration_date: datetime=None, owner_id: str=None, primary_key: str=None, scope: str=None, secondary_key: str=None, state: str=None, state_comment: str=None):
        """SubscriptionUpdateRequestProperties - a model defined in OpenAPI

        :param allow_tracing: The allow_tracing of this SubscriptionUpdateRequestProperties.
        :param display_name: The display_name of this SubscriptionUpdateRequestProperties.
        :param expiration_date: The expiration_date of this SubscriptionUpdateRequestProperties.
        :param owner_id: The owner_id of this SubscriptionUpdateRequestProperties.
        :param primary_key: The primary_key of this SubscriptionUpdateRequestProperties.
        :param scope: The scope of this SubscriptionUpdateRequestProperties.
        :param secondary_key: The secondary_key of this SubscriptionUpdateRequestProperties.
        :param state: The state of this SubscriptionUpdateRequestProperties.
        :param state_comment: The state_comment of this SubscriptionUpdateRequestProperties.
        """
        self.openapi_types = {
            'allow_tracing': bool,
            'display_name': str,
            'expiration_date': datetime,
            'owner_id': str,
            'primary_key': str,
            'scope': str,
            'secondary_key': str,
            'state': str,
            'state_comment': str
        }

        self.attribute_map = {
            'allow_tracing': 'allowTracing',
            'display_name': 'displayName',
            'expiration_date': 'expirationDate',
            'owner_id': 'ownerId',
            'primary_key': 'primaryKey',
            'scope': 'scope',
            'secondary_key': 'secondaryKey',
            'state': 'state',
            'state_comment': 'stateComment'
        }

        self._allow_tracing = allow_tracing
        self._display_name = display_name
        self._expiration_date = expiration_date
        self._owner_id = owner_id
        self._primary_key = primary_key
        self._scope = scope
        self._secondary_key = secondary_key
        self._state = state
        self._state_comment = state_comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionUpdateRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription_Update_request_properties of this SubscriptionUpdateRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_tracing(self):
        """Gets the allow_tracing of this SubscriptionUpdateRequestProperties.

        Determines whether tracing can be enabled

        :return: The allow_tracing of this SubscriptionUpdateRequestProperties.
        :rtype: bool
        """
        return self._allow_tracing

    @allow_tracing.setter
    def allow_tracing(self, allow_tracing):
        """Sets the allow_tracing of this SubscriptionUpdateRequestProperties.

        Determines whether tracing can be enabled

        :param allow_tracing: The allow_tracing of this SubscriptionUpdateRequestProperties.
        :type allow_tracing: bool
        """

        self._allow_tracing = allow_tracing

    @property
    def display_name(self):
        """Gets the display_name of this SubscriptionUpdateRequestProperties.

        Subscription name.

        :return: The display_name of this SubscriptionUpdateRequestProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SubscriptionUpdateRequestProperties.

        Subscription name.

        :param display_name: The display_name of this SubscriptionUpdateRequestProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def expiration_date(self):
        """Gets the expiration_date of this SubscriptionUpdateRequestProperties.

        Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :return: The expiration_date of this SubscriptionUpdateRequestProperties.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this SubscriptionUpdateRequestProperties.

        Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.

        :param expiration_date: The expiration_date of this SubscriptionUpdateRequestProperties.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def owner_id(self):
        """Gets the owner_id of this SubscriptionUpdateRequestProperties.

        User identifier path: /users/{userId}

        :return: The owner_id of this SubscriptionUpdateRequestProperties.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this SubscriptionUpdateRequestProperties.

        User identifier path: /users/{userId}

        :param owner_id: The owner_id of this SubscriptionUpdateRequestProperties.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def primary_key(self):
        """Gets the primary_key of this SubscriptionUpdateRequestProperties.

        Primary subscription key.

        :return: The primary_key of this SubscriptionUpdateRequestProperties.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this SubscriptionUpdateRequestProperties.

        Primary subscription key.

        :param primary_key: The primary_key of this SubscriptionUpdateRequestProperties.
        :type primary_key: str
        """
        if primary_key is not None and len(primary_key) > 256:
            raise ValueError("Invalid value for `primary_key`, length must be less than or equal to `256`")
        if primary_key is not None and len(primary_key) < 1:
            raise ValueError("Invalid value for `primary_key`, length must be greater than or equal to `1`")

        self._primary_key = primary_key

    @property
    def scope(self):
        """Gets the scope of this SubscriptionUpdateRequestProperties.

        Scope like /products/{productId} or /apis or /apis/{apiId}

        :return: The scope of this SubscriptionUpdateRequestProperties.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this SubscriptionUpdateRequestProperties.

        Scope like /products/{productId} or /apis or /apis/{apiId}

        :param scope: The scope of this SubscriptionUpdateRequestProperties.
        :type scope: str
        """

        self._scope = scope

    @property
    def secondary_key(self):
        """Gets the secondary_key of this SubscriptionUpdateRequestProperties.

        Secondary subscription key.

        :return: The secondary_key of this SubscriptionUpdateRequestProperties.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this SubscriptionUpdateRequestProperties.

        Secondary subscription key.

        :param secondary_key: The secondary_key of this SubscriptionUpdateRequestProperties.
        :type secondary_key: str
        """
        if secondary_key is not None and len(secondary_key) > 256:
            raise ValueError("Invalid value for `secondary_key`, length must be less than or equal to `256`")
        if secondary_key is not None and len(secondary_key) < 1:
            raise ValueError("Invalid value for `secondary_key`, length must be greater than or equal to `1`")

        self._secondary_key = secondary_key

    @property
    def state(self):
        """Gets the state of this SubscriptionUpdateRequestProperties.

        Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :return: The state of this SubscriptionUpdateRequestProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionUpdateRequestProperties.

        Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.

        :param state: The state of this SubscriptionUpdateRequestProperties.
        :type state: str
        """
        allowed_values = ["suspended", "active", "expired", "submitted", "rejected", "cancelled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_comment(self):
        """Gets the state_comment of this SubscriptionUpdateRequestProperties.

        Comments describing subscription state change by the administrator.

        :return: The state_comment of this SubscriptionUpdateRequestProperties.
        :rtype: str
        """
        return self._state_comment

    @state_comment.setter
    def state_comment(self, state_comment):
        """Sets the state_comment of this SubscriptionUpdateRequestProperties.

        Comments describing subscription state change by the administrator.

        :param state_comment: The state_comment of this SubscriptionUpdateRequestProperties.
        :type state_comment: str
        """

        self._state_comment = state_comment
