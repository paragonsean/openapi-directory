/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Subscription entity associated with your Azure API Management deployment. The Subscription entity represents the association between a user and a product in API Management. Products contain one or more APIs, and once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription_List_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription_List_200_response_value_inner_properties::OAISubscription_List_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription_List_200_response_value_inner_properties::OAISubscription_List_200_response_value_inner_properties() {
    this->initializeModel();
}

OAISubscription_List_200_response_value_inner_properties::~OAISubscription_List_200_response_value_inner_properties() {}

void OAISubscription_List_200_response_value_inner_properties::initializeModel() {

    m_allow_tracing_isSet = false;
    m_allow_tracing_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_notification_date_isSet = false;
    m_notification_date_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_comment_isSet = false;
    m_state_comment_isValid = false;
}

void OAISubscription_List_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription_List_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_allow_tracing_isValid = ::OpenAPI::fromJsonValue(m_allow_tracing, json[QString("allowTracing")]);
    m_allow_tracing_isSet = !json[QString("allowTracing")].isNull() && m_allow_tracing_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_notification_date_isValid = ::OpenAPI::fromJsonValue(m_notification_date, json[QString("notificationDate")]);
    m_notification_date_isSet = !json[QString("notificationDate")].isNull() && m_notification_date_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_state_comment_isValid = ::OpenAPI::fromJsonValue(m_state_comment, json[QString("stateComment")]);
    m_state_comment_isSet = !json[QString("stateComment")].isNull() && m_state_comment_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription_List_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_tracing_isSet) {
        obj.insert(QString("allowTracing"), ::OpenAPI::toJsonValue(m_allow_tracing));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_notification_date_isSet) {
        obj.insert(QString("notificationDate"), ::OpenAPI::toJsonValue(m_notification_date));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_comment_isSet) {
        obj.insert(QString("stateComment"), ::OpenAPI::toJsonValue(m_state_comment));
    }
    return obj;
}

bool OAISubscription_List_200_response_value_inner_properties::isAllowTracing() const {
    return m_allow_tracing;
}
void OAISubscription_List_200_response_value_inner_properties::setAllowTracing(const bool &allow_tracing) {
    m_allow_tracing = allow_tracing;
    m_allow_tracing_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_allow_tracing_Set() const{
    return m_allow_tracing_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_allow_tracing_Valid() const{
    return m_allow_tracing_isValid;
}

QDateTime OAISubscription_List_200_response_value_inner_properties::getCreatedDate() const {
    return m_created_date;
}
void OAISubscription_List_200_response_value_inner_properties::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::getDisplayName() const {
    return m_display_name;
}
void OAISubscription_List_200_response_value_inner_properties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAISubscription_List_200_response_value_inner_properties::getEndDate() const {
    return m_end_date;
}
void OAISubscription_List_200_response_value_inner_properties::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QDateTime OAISubscription_List_200_response_value_inner_properties::getExpirationDate() const {
    return m_expiration_date;
}
void OAISubscription_List_200_response_value_inner_properties::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QDateTime OAISubscription_List_200_response_value_inner_properties::getNotificationDate() const {
    return m_notification_date;
}
void OAISubscription_List_200_response_value_inner_properties::setNotificationDate(const QDateTime &notification_date) {
    m_notification_date = notification_date;
    m_notification_date_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_notification_date_Set() const{
    return m_notification_date_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_notification_date_Valid() const{
    return m_notification_date_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::getOwnerId() const {
    return m_owner_id;
}
void OAISubscription_List_200_response_value_inner_properties::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::getPrimaryKey() const {
    return m_primary_key;
}
void OAISubscription_List_200_response_value_inner_properties::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::getScope() const {
    return m_scope;
}
void OAISubscription_List_200_response_value_inner_properties::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::getSecondaryKey() const {
    return m_secondary_key;
}
void OAISubscription_List_200_response_value_inner_properties::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

QDateTime OAISubscription_List_200_response_value_inner_properties::getStartDate() const {
    return m_start_date;
}
void OAISubscription_List_200_response_value_inner_properties::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::getState() const {
    return m_state;
}
void OAISubscription_List_200_response_value_inner_properties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_state_Set() const{
    return m_state_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISubscription_List_200_response_value_inner_properties::getStateComment() const {
    return m_state_comment;
}
void OAISubscription_List_200_response_value_inner_properties::setStateComment(const QString &state_comment) {
    m_state_comment = state_comment;
    m_state_comment_isSet = true;
}

bool OAISubscription_List_200_response_value_inner_properties::is_state_comment_Set() const{
    return m_state_comment_isSet;
}

bool OAISubscription_List_200_response_value_inner_properties::is_state_comment_Valid() const{
    return m_state_comment_isValid;
}

bool OAISubscription_List_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_tracing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_comment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription_List_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_primary_key_isValid && m_scope_isValid && m_secondary_key_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
