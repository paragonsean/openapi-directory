/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Subscription entity associated with your Azure API Management deployment. The Subscription entity represents the association between a user and a product in API Management. Products contain one or more APIs, and once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SubscriptionCreateOrUpdateRequest;
import org.openapitools.client.model.SubscriptionGet200Response;
import org.openapitools.client.model.SubscriptionList200Response;
import org.openapitools.client.model.SubscriptionListDefaultResponse;
import org.openapitools.client.model.SubscriptionUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SubscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for subscriptionCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user already subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The user was successfully subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateOrUpdateCall(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, SubscriptionCreateOrUpdateRequest parameters, Boolean notify, String ifMatch, String appType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notify", notify));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (appType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appType", appType));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionCreateOrUpdateValidateBeforeCall(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, SubscriptionCreateOrUpdateRequest parameters, Boolean notify, String ifMatch, String appType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subscriptionCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling subscriptionCreateOrUpdate(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling subscriptionCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling subscriptionCreateOrUpdate(Async)");
        }

        return subscriptionCreateOrUpdateCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, parameters, notify, ifMatch, appType, _callback);

    }

    /**
     * 
     * Creates or updates the subscription of specified user to the specified product.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @return SubscriptionGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user already subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The user was successfully subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionGet200Response subscriptionCreateOrUpdate(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, SubscriptionCreateOrUpdateRequest parameters, Boolean notify, String ifMatch, String appType) throws ApiException {
        ApiResponse<SubscriptionGet200Response> localVarResp = subscriptionCreateOrUpdateWithHttpInfo(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, parameters, notify, ifMatch, appType);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the subscription of specified user to the specified product.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @return ApiResponse&lt;SubscriptionGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user already subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The user was successfully subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionGet200Response> subscriptionCreateOrUpdateWithHttpInfo(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, SubscriptionCreateOrUpdateRequest parameters, Boolean notify, String ifMatch, String appType) throws ApiException {
        okhttp3.Call localVarCall = subscriptionCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, parameters, notify, ifMatch, appType, null);
        Type localVarReturnType = new TypeToken<SubscriptionGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the subscription of specified user to the specified product.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Create parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param ifMatch ETag of the Entity. Not required when creating an entity, but required when updating an entity. (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The user already subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 201 </td><td> The user was successfully subscribed to the product. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionCreateOrUpdateAsync(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, SubscriptionCreateOrUpdateRequest parameters, Boolean notify, String ifMatch, String appType, final ApiCallback<SubscriptionGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionCreateOrUpdateValidateBeforeCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, parameters, notify, ifMatch, appType, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDeleteCall(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionDeleteValidateBeforeCall(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subscriptionDelete(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling subscriptionDelete(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling subscriptionDelete(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling subscriptionDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionDelete(Async)");
        }

        return subscriptionDeleteCall(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionDelete(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId) throws ApiException {
        subscriptionDeleteWithHttpInfo(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionDeleteWithHttpInfo(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = subscriptionDeleteValidateBeforeCall(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionDeleteAsync(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionDeleteValidateBeforeCall(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Subscription entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionGetCall(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionGetValidateBeforeCall(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subscriptionGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling subscriptionGet(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling subscriptionGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionGet(Async)");
        }

        return subscriptionGetCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified Subscription entity.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SubscriptionGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Subscription entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionGet200Response subscriptionGet(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SubscriptionGet200Response> localVarResp = subscriptionGetWithHttpInfo(resourceGroupName, serviceName, sid, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified Subscription entity.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SubscriptionGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Subscription entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionGet200Response> subscriptionGetWithHttpInfo(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = subscriptionGetValidateBeforeCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SubscriptionGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified Subscription entity.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response body contains the specified Subscription entity. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionGetAsync(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, final ApiCallback<SubscriptionGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionGetValidateBeforeCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionGetEntityTag
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified apimanagement subscription entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionGetEntityTagCall(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionGetEntityTagValidateBeforeCall(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subscriptionGetEntityTag(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling subscriptionGetEntityTag(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling subscriptionGetEntityTag(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionGetEntityTag(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionGetEntityTag(Async)");
        }

        return subscriptionGetEntityTagCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the entity state (Etag) version of the apimanagement subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified apimanagement subscription entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionGetEntityTag(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId) throws ApiException {
        subscriptionGetEntityTagWithHttpInfo(resourceGroupName, serviceName, sid, apiVersion, subscriptionId);
    }

    /**
     * 
     * Gets the entity state (Etag) version of the apimanagement subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified apimanagement subscription entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionGetEntityTagWithHttpInfo(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = subscriptionGetEntityTagValidateBeforeCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets the entity state (Etag) version of the apimanagement subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Specified apimanagement subscription entity exists and current entity state version is present in the ETag header. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionGetEntityTagAsync(String resourceGroupName, String serviceName, String sid, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionGetEntityTagValidateBeforeCall(resourceGroupName, serviceName, sid, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionList
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| state | filter | eq |     | &lt;/br&gt;| user | expand |     |     | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of the Subscription entities for the specified API Management service instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionListCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionListValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subscriptionList(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling subscriptionList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionList(Async)");
        }

        return subscriptionListCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip, _callback);

    }

    /**
     * 
     * Lists all subscriptions of the API Management service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| state | filter | eq |     | &lt;/br&gt;| user | expand |     |     | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @return SubscriptionList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of the Subscription entities for the specified API Management service instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SubscriptionList200Response subscriptionList(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip) throws ApiException {
        ApiResponse<SubscriptionList200Response> localVarResp = subscriptionListWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all subscriptions of the API Management service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| state | filter | eq |     | &lt;/br&gt;| user | expand |     |     | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @return ApiResponse&lt;SubscriptionList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of the Subscription entities for the specified API Management service instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SubscriptionList200Response> subscriptionListWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip) throws ApiException {
        okhttp3.Call localVarCall = subscriptionListValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip, null);
        Type localVarReturnType = new TypeToken<SubscriptionList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all subscriptions of the API Management service instance.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $filter |   Field     |     Usage     |     Supported operators     |     Supported functions     |&lt;/br&gt;|-------------|-------------|-------------|-------------|&lt;/br&gt;| name | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| displayName | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| stateComment | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| ownerId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| scope | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| userId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| productId | filter | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | &lt;/br&gt;| state | filter | eq |     | &lt;/br&gt;| user | expand |     |     | &lt;/br&gt; (optional)
     * @param $top Number of records to return. (optional)
     * @param $skip Number of records to skip. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A collection of the Subscription entities for the specified API Management service instance. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionListAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $filter, Integer $top, Integer $skip, final ApiCallback<SubscriptionList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionListValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip, _callback);
        Type localVarReturnType = new TypeToken<SubscriptionList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionUpdateCall(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, SubscriptionUpdateRequest parameters, Boolean notify, String appType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/subscriptions/{sid}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "sid" + "}", localVarApiClient.escapeString(sid.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notify", notify));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (appType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appType", appType));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionUpdateValidateBeforeCall(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, SubscriptionUpdateRequest parameters, Boolean notify, String appType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling subscriptionUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling subscriptionUpdate(Async)");
        }

        // verify the required parameter 'sid' is set
        if (sid == null) {
            throw new ApiException("Missing the required parameter 'sid' when calling subscriptionUpdate(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling subscriptionUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling subscriptionUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling subscriptionUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling subscriptionUpdate(Async)");
        }

        return subscriptionUpdateCall(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, parameters, notify, appType, _callback);

    }

    /**
     * 
     * Updates the details of a subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionUpdate(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, SubscriptionUpdateRequest parameters, Boolean notify, String appType) throws ApiException {
        subscriptionUpdateWithHttpInfo(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, parameters, notify, appType);
    }

    /**
     * 
     * Updates the details of a subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionUpdateWithHttpInfo(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, SubscriptionUpdateRequest parameters, Boolean notify, String appType) throws ApiException {
        okhttp3.Call localVarCall = subscriptionUpdateValidateBeforeCall(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, parameters, notify, appType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the details of a subscription specified by its identifier.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param sid Subscription entity Identifier. The entity represents the association between a user and a product in API Management. (required)
     * @param ifMatch ETag of the Entity. ETag should match the current entity state from the header response of the GET request or it should be * for unconditional update. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Update parameters. (required)
     * @param notify Notify change in Subscription State.   - If false, do not send any email notification for change of state of subscription   - If true, send email notification of change of state of subscription  (optional)
     * @param appType Determines the type of application which send the create user request. Default is legacy publisher portal. (optional, default to portal)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The subscription details were successfully updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionUpdateAsync(String resourceGroupName, String serviceName, String sid, String ifMatch, String apiVersion, String subscriptionId, SubscriptionUpdateRequest parameters, Boolean notify, String appType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionUpdateValidateBeforeCall(resourceGroupName, serviceName, sid, ifMatch, apiVersion, subscriptionId, parameters, notify, appType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
