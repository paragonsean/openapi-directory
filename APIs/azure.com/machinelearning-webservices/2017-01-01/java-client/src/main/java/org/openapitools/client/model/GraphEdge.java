/*
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines an edge within the web service&#39;s graph.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:33.445813-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GraphEdge {
  public static final String SERIALIZED_NAME_SOURCE_NODE_ID = "sourceNodeId";
  @SerializedName(SERIALIZED_NAME_SOURCE_NODE_ID)
  private String sourceNodeId;

  public static final String SERIALIZED_NAME_SOURCE_PORT_ID = "sourcePortId";
  @SerializedName(SERIALIZED_NAME_SOURCE_PORT_ID)
  private String sourcePortId;

  public static final String SERIALIZED_NAME_TARGET_NODE_ID = "targetNodeId";
  @SerializedName(SERIALIZED_NAME_TARGET_NODE_ID)
  private String targetNodeId;

  public static final String SERIALIZED_NAME_TARGET_PORT_ID = "targetPortId";
  @SerializedName(SERIALIZED_NAME_TARGET_PORT_ID)
  private String targetPortId;

  public GraphEdge() {
  }

  public GraphEdge sourceNodeId(String sourceNodeId) {
    this.sourceNodeId = sourceNodeId;
    return this;
  }

  /**
   * The source graph node&#39;s identifier.
   * @return sourceNodeId
   */
  @javax.annotation.Nullable
  public String getSourceNodeId() {
    return sourceNodeId;
  }

  public void setSourceNodeId(String sourceNodeId) {
    this.sourceNodeId = sourceNodeId;
  }


  public GraphEdge sourcePortId(String sourcePortId) {
    this.sourcePortId = sourcePortId;
    return this;
  }

  /**
   * The identifier of the source node&#39;s port that the edge connects from.
   * @return sourcePortId
   */
  @javax.annotation.Nullable
  public String getSourcePortId() {
    return sourcePortId;
  }

  public void setSourcePortId(String sourcePortId) {
    this.sourcePortId = sourcePortId;
  }


  public GraphEdge targetNodeId(String targetNodeId) {
    this.targetNodeId = targetNodeId;
    return this;
  }

  /**
   * The destination graph node&#39;s identifier.
   * @return targetNodeId
   */
  @javax.annotation.Nullable
  public String getTargetNodeId() {
    return targetNodeId;
  }

  public void setTargetNodeId(String targetNodeId) {
    this.targetNodeId = targetNodeId;
  }


  public GraphEdge targetPortId(String targetPortId) {
    this.targetPortId = targetPortId;
    return this;
  }

  /**
   * The identifier of the destination node&#39;s port that the edge connects into.
   * @return targetPortId
   */
  @javax.annotation.Nullable
  public String getTargetPortId() {
    return targetPortId;
  }

  public void setTargetPortId(String targetPortId) {
    this.targetPortId = targetPortId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GraphEdge graphEdge = (GraphEdge) o;
    return Objects.equals(this.sourceNodeId, graphEdge.sourceNodeId) &&
        Objects.equals(this.sourcePortId, graphEdge.sourcePortId) &&
        Objects.equals(this.targetNodeId, graphEdge.targetNodeId) &&
        Objects.equals(this.targetPortId, graphEdge.targetPortId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceNodeId, sourcePortId, targetNodeId, targetPortId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GraphEdge {\n");
    sb.append("    sourceNodeId: ").append(toIndentedString(sourceNodeId)).append("\n");
    sb.append("    sourcePortId: ").append(toIndentedString(sourcePortId)).append("\n");
    sb.append("    targetNodeId: ").append(toIndentedString(targetNodeId)).append("\n");
    sb.append("    targetPortId: ").append(toIndentedString(targetPortId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceNodeId");
    openapiFields.add("sourcePortId");
    openapiFields.add("targetNodeId");
    openapiFields.add("targetPortId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GraphEdge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GraphEdge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GraphEdge is not found in the empty JSON string", GraphEdge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GraphEdge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GraphEdge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sourceNodeId") != null && !jsonObj.get("sourceNodeId").isJsonNull()) && !jsonObj.get("sourceNodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceNodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceNodeId").toString()));
      }
      if ((jsonObj.get("sourcePortId") != null && !jsonObj.get("sourcePortId").isJsonNull()) && !jsonObj.get("sourcePortId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePortId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePortId").toString()));
      }
      if ((jsonObj.get("targetNodeId") != null && !jsonObj.get("targetNodeId").isJsonNull()) && !jsonObj.get("targetNodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNodeId").toString()));
      }
      if ((jsonObj.get("targetPortId") != null && !jsonObj.get("targetPortId").isJsonNull()) && !jsonObj.get("targetPortId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPortId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetPortId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GraphEdge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GraphEdge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GraphEdge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GraphEdge.class));

       return (TypeAdapter<T>) new TypeAdapter<GraphEdge>() {
           @Override
           public void write(JsonWriter out, GraphEdge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GraphEdge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GraphEdge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GraphEdge
   * @throws IOException if the JSON string is invalid with respect to GraphEdge
   */
  public static GraphEdge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GraphEdge.class);
  }

  /**
   * Convert an instance of GraphEdge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

