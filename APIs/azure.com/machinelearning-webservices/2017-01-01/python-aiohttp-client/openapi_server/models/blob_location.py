# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlobLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: str=None, uri: str=None):
        """BlobLocation - a model defined in OpenAPI

        :param credentials: The credentials of this BlobLocation.
        :param uri: The uri of this BlobLocation.
        """
        self.openapi_types = {
            'credentials': str,
            'uri': str
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'uri': 'uri'
        }

        self._credentials = credentials
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlobLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlobLocation of this BlobLocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this BlobLocation.

        Access credentials for the blob, if applicable (e.g. blob specified by storage account connection string + blob URI)

        :return: The credentials of this BlobLocation.
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this BlobLocation.

        Access credentials for the blob, if applicable (e.g. blob specified by storage account connection string + blob URI)

        :param credentials: The credentials of this BlobLocation.
        :type credentials: str
        """

        self._credentials = credentials

    @property
    def uri(self):
        """Gets the uri of this BlobLocation.

        The URI from which the blob is accessible from. For example, aml://abc for system assets or https://xyz for user assets or payload.

        :return: The uri of this BlobLocation.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this BlobLocation.

        The URI from which the blob is accessible from. For example, aml://abc for system assets or https://xyz for user assets or payload.

        :param uri: The uri of this BlobLocation.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
