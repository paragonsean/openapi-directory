# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiagnosticsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: datetime=None, level: str=None):
        """DiagnosticsConfiguration - a model defined in OpenAPI

        :param expiry: The expiry of this DiagnosticsConfiguration.
        :param level: The level of this DiagnosticsConfiguration.
        """
        self.openapi_types = {
            'expiry': datetime,
            'level': str
        }

        self.attribute_map = {
            'expiry': 'expiry',
            'level': 'level'
        }

        self._expiry = expiry
        self._level = level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticsConfiguration of this DiagnosticsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this DiagnosticsConfiguration.

        Specifies the date and time when the logging will cease. If null, diagnostic collection is not time limited.

        :return: The expiry of this DiagnosticsConfiguration.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this DiagnosticsConfiguration.

        Specifies the date and time when the logging will cease. If null, diagnostic collection is not time limited.

        :param expiry: The expiry of this DiagnosticsConfiguration.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def level(self):
        """Gets the level of this DiagnosticsConfiguration.

        Specifies the verbosity of the diagnostic output. Valid values are: None - disables tracing; Error - collects only error (stderr) traces; All - collects all traces (stdout and stderr).

        :return: The level of this DiagnosticsConfiguration.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DiagnosticsConfiguration.

        Specifies the verbosity of the diagnostic output. Valid values are: None - disables tracing; Error - collects only error (stderr) traces; All - collects all traces (stdout and stderr).

        :param level: The level of this DiagnosticsConfiguration.
        :type level: str
        """
        allowed_values = ["None", "Error", "All"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level
