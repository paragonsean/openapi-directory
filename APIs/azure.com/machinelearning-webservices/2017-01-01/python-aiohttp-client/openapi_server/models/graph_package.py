# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.graph_edge import GraphEdge
from openapi_server.models.graph_node import GraphNode
from openapi_server.models.graph_parameter import GraphParameter
from openapi_server import util


class GraphPackage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, edges: List[GraphEdge]=None, graph_parameters: Dict[str, GraphParameter]=None, nodes: Dict[str, GraphNode]=None):
        """GraphPackage - a model defined in OpenAPI

        :param edges: The edges of this GraphPackage.
        :param graph_parameters: The graph_parameters of this GraphPackage.
        :param nodes: The nodes of this GraphPackage.
        """
        self.openapi_types = {
            'edges': List[GraphEdge],
            'graph_parameters': Dict[str, GraphParameter],
            'nodes': Dict[str, GraphNode]
        }

        self.attribute_map = {
            'edges': 'edges',
            'graph_parameters': 'graphParameters',
            'nodes': 'nodes'
        }

        self._edges = edges
        self._graph_parameters = graph_parameters
        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GraphPackage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GraphPackage of this GraphPackage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def edges(self):
        """Gets the edges of this GraphPackage.

        The list of edges making up the graph.

        :return: The edges of this GraphPackage.
        :rtype: List[GraphEdge]
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this GraphPackage.

        The list of edges making up the graph.

        :param edges: The edges of this GraphPackage.
        :type edges: List[GraphEdge]
        """

        self._edges = edges

    @property
    def graph_parameters(self):
        """Gets the graph_parameters of this GraphPackage.

        The collection of global parameters for the graph, given as a global parameter name to GraphParameter map. Each parameter here has a 1:1 match with the global parameters values map declared at the WebServiceProperties level.

        :return: The graph_parameters of this GraphPackage.
        :rtype: Dict[str, GraphParameter]
        """
        return self._graph_parameters

    @graph_parameters.setter
    def graph_parameters(self, graph_parameters):
        """Sets the graph_parameters of this GraphPackage.

        The collection of global parameters for the graph, given as a global parameter name to GraphParameter map. Each parameter here has a 1:1 match with the global parameters values map declared at the WebServiceProperties level.

        :param graph_parameters: The graph_parameters of this GraphPackage.
        :type graph_parameters: Dict[str, GraphParameter]
        """

        self._graph_parameters = graph_parameters

    @property
    def nodes(self):
        """Gets the nodes of this GraphPackage.

        The set of nodes making up the graph, provided as a nodeId to GraphNode map

        :return: The nodes of this GraphPackage.
        :rtype: Dict[str, GraphNode]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this GraphPackage.

        The set of nodes making up the graph, provided as a nodeId to GraphNode map

        :param nodes: The nodes of this GraphPackage.
        :type nodes: Dict[str, GraphNode]
        """

        self._nodes = nodes
