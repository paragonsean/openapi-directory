# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RealtimeConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_concurrent_calls: int=None):
        """RealtimeConfiguration - a model defined in OpenAPI

        :param max_concurrent_calls: The max_concurrent_calls of this RealtimeConfiguration.
        """
        self.openapi_types = {
            'max_concurrent_calls': int
        }

        self.attribute_map = {
            'max_concurrent_calls': 'maxConcurrentCalls'
        }

        self._max_concurrent_calls = max_concurrent_calls

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealtimeConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealtimeConfiguration of this RealtimeConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_concurrent_calls(self):
        """Gets the max_concurrent_calls of this RealtimeConfiguration.

        Specifies the maximum concurrent calls that can be made to the web service. Minimum value: 4, Maximum value: 200.

        :return: The max_concurrent_calls of this RealtimeConfiguration.
        :rtype: int
        """
        return self._max_concurrent_calls

    @max_concurrent_calls.setter
    def max_concurrent_calls(self, max_concurrent_calls):
        """Sets the max_concurrent_calls of this RealtimeConfiguration.

        Specifies the maximum concurrent calls that can be made to the web service. Minimum value: 4, Maximum value: 200.

        :param max_concurrent_calls: The max_concurrent_calls of this RealtimeConfiguration.
        :type max_concurrent_calls: int
        """
        if max_concurrent_calls is not None and max_concurrent_calls > 200:
            raise ValueError("Invalid value for `max_concurrent_calls`, must be a value less than or equal to `200`")
        if max_concurrent_calls is not None and max_concurrent_calls < 4:
            raise ValueError("Invalid value for `max_concurrent_calls`, must be a value greater than or equal to `4`")

        self._max_concurrent_calls = max_concurrent_calls
