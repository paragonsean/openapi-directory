# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.graph_parameter_link import GraphParameterLink
from openapi_server import util


class GraphParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, links: List[GraphParameterLink]=None, type: str=None):
        """GraphParameter - a model defined in OpenAPI

        :param description: The description of this GraphParameter.
        :param links: The links of this GraphParameter.
        :param type: The type of this GraphParameter.
        """
        self.openapi_types = {
            'description': str,
            'links': List[GraphParameterLink],
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'links': 'links',
            'type': 'type'
        }

        self._description = description
        self._links = links
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GraphParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GraphParameter of this GraphParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GraphParameter.

        Description of this graph parameter.

        :return: The description of this GraphParameter.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GraphParameter.

        Description of this graph parameter.

        :param description: The description of this GraphParameter.
        :type description: str
        """

        self._description = description

    @property
    def links(self):
        """Gets the links of this GraphParameter.

        Association links for this parameter to nodes in the graph.

        :return: The links of this GraphParameter.
        :rtype: List[GraphParameterLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GraphParameter.

        Association links for this parameter to nodes in the graph.

        :param links: The links of this GraphParameter.
        :type links: List[GraphParameterLink]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def type(self):
        """Gets the type of this GraphParameter.

        Graph parameter's type.

        :return: The type of this GraphParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GraphParameter.

        Graph parameter's type.

        :param type: The type of this GraphParameter.
        :type type: str
        """
        allowed_values = ["String", "Int", "Float", "Enumerated", "Script", "Mode", "Credential", "Boolean", "Double", "ColumnPicker", "ParameterRange", "DataGatewayName"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
