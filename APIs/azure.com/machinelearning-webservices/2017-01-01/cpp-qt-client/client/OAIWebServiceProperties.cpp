/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceProperties::OAIWebServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceProperties::OAIWebServiceProperties() {
    this->initializeModel();
}

OAIWebServiceProperties::~OAIWebServiceProperties() {}

void OAIWebServiceProperties::initializeModel() {

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_commitment_plan_isSet = false;
    m_commitment_plan_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_diagnostics_isSet = false;
    m_diagnostics_isValid = false;

    m_example_request_isSet = false;
    m_example_request_isValid = false;

    m_expose_sample_data_isSet = false;
    m_expose_sample_data_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_machine_learning_workspace_isSet = false;
    m_machine_learning_workspace_isValid = false;

    m_modified_on_isSet = false;
    m_modified_on_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_payloads_in_blob_storage_isSet = false;
    m_payloads_in_blob_storage_isValid = false;

    m_payloads_location_isSet = false;
    m_payloads_location_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_realtime_configuration_isSet = false;
    m_realtime_configuration_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;

    m_swagger_location_isSet = false;
    m_swagger_location_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIWebServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceProperties::fromJsonObject(QJsonObject json) {

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_commitment_plan_isValid = ::OpenAPI::fromJsonValue(m_commitment_plan, json[QString("commitmentPlan")]);
    m_commitment_plan_isSet = !json[QString("commitmentPlan")].isNull() && m_commitment_plan_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_diagnostics_isValid = ::OpenAPI::fromJsonValue(m_diagnostics, json[QString("diagnostics")]);
    m_diagnostics_isSet = !json[QString("diagnostics")].isNull() && m_diagnostics_isValid;

    m_example_request_isValid = ::OpenAPI::fromJsonValue(m_example_request, json[QString("exampleRequest")]);
    m_example_request_isSet = !json[QString("exampleRequest")].isNull() && m_example_request_isValid;

    m_expose_sample_data_isValid = ::OpenAPI::fromJsonValue(m_expose_sample_data, json[QString("exposeSampleData")]);
    m_expose_sample_data_isSet = !json[QString("exposeSampleData")].isNull() && m_expose_sample_data_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("keys")]);
    m_keys_isSet = !json[QString("keys")].isNull() && m_keys_isValid;

    m_machine_learning_workspace_isValid = ::OpenAPI::fromJsonValue(m_machine_learning_workspace, json[QString("machineLearningWorkspace")]);
    m_machine_learning_workspace_isSet = !json[QString("machineLearningWorkspace")].isNull() && m_machine_learning_workspace_isValid;

    m_modified_on_isValid = ::OpenAPI::fromJsonValue(m_modified_on, json[QString("modifiedOn")]);
    m_modified_on_isSet = !json[QString("modifiedOn")].isNull() && m_modified_on_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("packageType")]);
    m_package_type_isSet = !json[QString("packageType")].isNull() && m_package_type_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_payloads_in_blob_storage_isValid = ::OpenAPI::fromJsonValue(m_payloads_in_blob_storage, json[QString("payloadsInBlobStorage")]);
    m_payloads_in_blob_storage_isSet = !json[QString("payloadsInBlobStorage")].isNull() && m_payloads_in_blob_storage_isValid;

    m_payloads_location_isValid = ::OpenAPI::fromJsonValue(m_payloads_location, json[QString("payloadsLocation")]);
    m_payloads_location_isSet = !json[QString("payloadsLocation")].isNull() && m_payloads_location_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_realtime_configuration_isValid = ::OpenAPI::fromJsonValue(m_realtime_configuration, json[QString("realtimeConfiguration")]);
    m_realtime_configuration_isSet = !json[QString("realtimeConfiguration")].isNull() && m_realtime_configuration_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;

    m_swagger_location_isValid = ::OpenAPI::fromJsonValue(m_swagger_location, json[QString("swaggerLocation")]);
    m_swagger_location_isSet = !json[QString("swaggerLocation")].isNull() && m_swagger_location_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIWebServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_assets.size() > 0) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_commitment_plan.isSet()) {
        obj.insert(QString("commitmentPlan"), ::OpenAPI::toJsonValue(m_commitment_plan));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_diagnostics.isSet()) {
        obj.insert(QString("diagnostics"), ::OpenAPI::toJsonValue(m_diagnostics));
    }
    if (m_example_request.isSet()) {
        obj.insert(QString("exampleRequest"), ::OpenAPI::toJsonValue(m_example_request));
    }
    if (m_expose_sample_data_isSet) {
        obj.insert(QString("exposeSampleData"), ::OpenAPI::toJsonValue(m_expose_sample_data));
    }
    if (m_input.isSet()) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_machine_learning_workspace.isSet()) {
        obj.insert(QString("machineLearningWorkspace"), ::OpenAPI::toJsonValue(m_machine_learning_workspace));
    }
    if (m_modified_on_isSet) {
        obj.insert(QString("modifiedOn"), ::OpenAPI::toJsonValue(m_modified_on));
    }
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_package_type_isSet) {
        obj.insert(QString("packageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_payloads_in_blob_storage_isSet) {
        obj.insert(QString("payloadsInBlobStorage"), ::OpenAPI::toJsonValue(m_payloads_in_blob_storage));
    }
    if (m_payloads_location.isSet()) {
        obj.insert(QString("payloadsLocation"), ::OpenAPI::toJsonValue(m_payloads_location));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_realtime_configuration.isSet()) {
        obj.insert(QString("realtimeConfiguration"), ::OpenAPI::toJsonValue(m_realtime_configuration));
    }
    if (m_storage_account.isSet()) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    if (m_swagger_location_isSet) {
        obj.insert(QString("swaggerLocation"), ::OpenAPI::toJsonValue(m_swagger_location));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QMap<QString, OAIAssetItem> OAIWebServiceProperties::getAssets() const {
    return m_assets;
}
void OAIWebServiceProperties::setAssets(const QMap<QString, OAIAssetItem> &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIWebServiceProperties::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIWebServiceProperties::is_assets_Valid() const{
    return m_assets_isValid;
}

OAICommitmentPlan OAIWebServiceProperties::getCommitmentPlan() const {
    return m_commitment_plan;
}
void OAIWebServiceProperties::setCommitmentPlan(const OAICommitmentPlan &commitment_plan) {
    m_commitment_plan = commitment_plan;
    m_commitment_plan_isSet = true;
}

bool OAIWebServiceProperties::is_commitment_plan_Set() const{
    return m_commitment_plan_isSet;
}

bool OAIWebServiceProperties::is_commitment_plan_Valid() const{
    return m_commitment_plan_isValid;
}

QDateTime OAIWebServiceProperties::getCreatedOn() const {
    return m_created_on;
}
void OAIWebServiceProperties::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIWebServiceProperties::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIWebServiceProperties::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QString OAIWebServiceProperties::getDescription() const {
    return m_description;
}
void OAIWebServiceProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebServiceProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebServiceProperties::is_description_Valid() const{
    return m_description_isValid;
}

OAIDiagnosticsConfiguration OAIWebServiceProperties::getDiagnostics() const {
    return m_diagnostics;
}
void OAIWebServiceProperties::setDiagnostics(const OAIDiagnosticsConfiguration &diagnostics) {
    m_diagnostics = diagnostics;
    m_diagnostics_isSet = true;
}

bool OAIWebServiceProperties::is_diagnostics_Set() const{
    return m_diagnostics_isSet;
}

bool OAIWebServiceProperties::is_diagnostics_Valid() const{
    return m_diagnostics_isValid;
}

OAIExampleRequest OAIWebServiceProperties::getExampleRequest() const {
    return m_example_request;
}
void OAIWebServiceProperties::setExampleRequest(const OAIExampleRequest &example_request) {
    m_example_request = example_request;
    m_example_request_isSet = true;
}

bool OAIWebServiceProperties::is_example_request_Set() const{
    return m_example_request_isSet;
}

bool OAIWebServiceProperties::is_example_request_Valid() const{
    return m_example_request_isValid;
}

bool OAIWebServiceProperties::isExposeSampleData() const {
    return m_expose_sample_data;
}
void OAIWebServiceProperties::setExposeSampleData(const bool &expose_sample_data) {
    m_expose_sample_data = expose_sample_data;
    m_expose_sample_data_isSet = true;
}

bool OAIWebServiceProperties::is_expose_sample_data_Set() const{
    return m_expose_sample_data_isSet;
}

bool OAIWebServiceProperties::is_expose_sample_data_Valid() const{
    return m_expose_sample_data_isValid;
}

OAIServiceInputOutputSpecification OAIWebServiceProperties::getInput() const {
    return m_input;
}
void OAIWebServiceProperties::setInput(const OAIServiceInputOutputSpecification &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIWebServiceProperties::is_input_Set() const{
    return m_input_isSet;
}

bool OAIWebServiceProperties::is_input_Valid() const{
    return m_input_isValid;
}

OAIWebServiceKeys OAIWebServiceProperties::getKeys() const {
    return m_keys;
}
void OAIWebServiceProperties::setKeys(const OAIWebServiceKeys &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIWebServiceProperties::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIWebServiceProperties::is_keys_Valid() const{
    return m_keys_isValid;
}

OAIMachineLearningWorkspace OAIWebServiceProperties::getMachineLearningWorkspace() const {
    return m_machine_learning_workspace;
}
void OAIWebServiceProperties::setMachineLearningWorkspace(const OAIMachineLearningWorkspace &machine_learning_workspace) {
    m_machine_learning_workspace = machine_learning_workspace;
    m_machine_learning_workspace_isSet = true;
}

bool OAIWebServiceProperties::is_machine_learning_workspace_Set() const{
    return m_machine_learning_workspace_isSet;
}

bool OAIWebServiceProperties::is_machine_learning_workspace_Valid() const{
    return m_machine_learning_workspace_isValid;
}

QDateTime OAIWebServiceProperties::getModifiedOn() const {
    return m_modified_on;
}
void OAIWebServiceProperties::setModifiedOn(const QDateTime &modified_on) {
    m_modified_on = modified_on;
    m_modified_on_isSet = true;
}

bool OAIWebServiceProperties::is_modified_on_Set() const{
    return m_modified_on_isSet;
}

bool OAIWebServiceProperties::is_modified_on_Valid() const{
    return m_modified_on_isValid;
}

OAIServiceInputOutputSpecification OAIWebServiceProperties::getOutput() const {
    return m_output;
}
void OAIWebServiceProperties::setOutput(const OAIServiceInputOutputSpecification &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIWebServiceProperties::is_output_Set() const{
    return m_output_isSet;
}

bool OAIWebServiceProperties::is_output_Valid() const{
    return m_output_isValid;
}

QString OAIWebServiceProperties::getPackageType() const {
    return m_package_type;
}
void OAIWebServiceProperties::setPackageType(const QString &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIWebServiceProperties::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIWebServiceProperties::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QMap<QString, OAIWebServiceParameter> OAIWebServiceProperties::getParameters() const {
    return m_parameters;
}
void OAIWebServiceProperties::setParameters(const QMap<QString, OAIWebServiceParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIWebServiceProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIWebServiceProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIWebServiceProperties::isPayloadsInBlobStorage() const {
    return m_payloads_in_blob_storage;
}
void OAIWebServiceProperties::setPayloadsInBlobStorage(const bool &payloads_in_blob_storage) {
    m_payloads_in_blob_storage = payloads_in_blob_storage;
    m_payloads_in_blob_storage_isSet = true;
}

bool OAIWebServiceProperties::is_payloads_in_blob_storage_Set() const{
    return m_payloads_in_blob_storage_isSet;
}

bool OAIWebServiceProperties::is_payloads_in_blob_storage_Valid() const{
    return m_payloads_in_blob_storage_isValid;
}

OAIBlobLocation OAIWebServiceProperties::getPayloadsLocation() const {
    return m_payloads_location;
}
void OAIWebServiceProperties::setPayloadsLocation(const OAIBlobLocation &payloads_location) {
    m_payloads_location = payloads_location;
    m_payloads_location_isSet = true;
}

bool OAIWebServiceProperties::is_payloads_location_Set() const{
    return m_payloads_location_isSet;
}

bool OAIWebServiceProperties::is_payloads_location_Valid() const{
    return m_payloads_location_isValid;
}

QString OAIWebServiceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIWebServiceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIWebServiceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIWebServiceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIWebServiceProperties::isReadOnly() const {
    return m_read_only;
}
void OAIWebServiceProperties::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIWebServiceProperties::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIWebServiceProperties::is_read_only_Valid() const{
    return m_read_only_isValid;
}

OAIRealtimeConfiguration OAIWebServiceProperties::getRealtimeConfiguration() const {
    return m_realtime_configuration;
}
void OAIWebServiceProperties::setRealtimeConfiguration(const OAIRealtimeConfiguration &realtime_configuration) {
    m_realtime_configuration = realtime_configuration;
    m_realtime_configuration_isSet = true;
}

bool OAIWebServiceProperties::is_realtime_configuration_Set() const{
    return m_realtime_configuration_isSet;
}

bool OAIWebServiceProperties::is_realtime_configuration_Valid() const{
    return m_realtime_configuration_isValid;
}

OAIStorageAccount OAIWebServiceProperties::getStorageAccount() const {
    return m_storage_account;
}
void OAIWebServiceProperties::setStorageAccount(const OAIStorageAccount &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIWebServiceProperties::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIWebServiceProperties::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

QString OAIWebServiceProperties::getSwaggerLocation() const {
    return m_swagger_location;
}
void OAIWebServiceProperties::setSwaggerLocation(const QString &swagger_location) {
    m_swagger_location = swagger_location;
    m_swagger_location_isSet = true;
}

bool OAIWebServiceProperties::is_swagger_location_Set() const{
    return m_swagger_location_isSet;
}

bool OAIWebServiceProperties::is_swagger_location_Valid() const{
    return m_swagger_location_isValid;
}

QString OAIWebServiceProperties::getTitle() const {
    return m_title;
}
void OAIWebServiceProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIWebServiceProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIWebServiceProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIWebServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_sample_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_learning_workspace.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payloads_in_blob_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payloads_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_swagger_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_package_type_isValid && true;
}

} // namespace OpenAPI
