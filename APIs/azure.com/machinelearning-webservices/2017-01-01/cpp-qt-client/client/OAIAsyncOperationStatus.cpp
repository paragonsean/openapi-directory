/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsyncOperationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsyncOperationStatus::OAIAsyncOperationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsyncOperationStatus::OAIAsyncOperationStatus() {
    this->initializeModel();
}

OAIAsyncOperationStatus::~OAIAsyncOperationStatus() {}

void OAIAsyncOperationStatus::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percent_complete_isSet = false;
    m_percent_complete_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIAsyncOperationStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsyncOperationStatus::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percent_complete_isValid = ::OpenAPI::fromJsonValue(m_percent_complete, json[QString("percentComplete")]);
    m_percent_complete_isSet = !json[QString("percentComplete")].isNull() && m_percent_complete_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIAsyncOperationStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsyncOperationStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percent_complete_isSet) {
        obj.insert(QString("percentComplete"), ::OpenAPI::toJsonValue(m_percent_complete));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QDateTime OAIAsyncOperationStatus::getEndTime() const {
    return m_end_time;
}
void OAIAsyncOperationStatus::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIAsyncOperationStatus::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIAsyncOperationStatus::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIAsyncOperationErrorInfo OAIAsyncOperationStatus::getErrorInfo() const {
    return m_error_info;
}
void OAIAsyncOperationStatus::setErrorInfo(const OAIAsyncOperationErrorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIAsyncOperationStatus::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIAsyncOperationStatus::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIAsyncOperationStatus::getId() const {
    return m_id;
}
void OAIAsyncOperationStatus::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAsyncOperationStatus::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAsyncOperationStatus::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAsyncOperationStatus::getName() const {
    return m_name;
}
void OAIAsyncOperationStatus::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAsyncOperationStatus::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAsyncOperationStatus::is_name_Valid() const{
    return m_name_isValid;
}

double OAIAsyncOperationStatus::getPercentComplete() const {
    return m_percent_complete;
}
void OAIAsyncOperationStatus::setPercentComplete(const double &percent_complete) {
    m_percent_complete = percent_complete;
    m_percent_complete_isSet = true;
}

bool OAIAsyncOperationStatus::is_percent_complete_Set() const{
    return m_percent_complete_isSet;
}

bool OAIAsyncOperationStatus::is_percent_complete_Valid() const{
    return m_percent_complete_isValid;
}

QString OAIAsyncOperationStatus::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAsyncOperationStatus::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAsyncOperationStatus::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAsyncOperationStatus::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QDateTime OAIAsyncOperationStatus::getStartTime() const {
    return m_start_time;
}
void OAIAsyncOperationStatus::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIAsyncOperationStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIAsyncOperationStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIAsyncOperationStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percent_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsyncOperationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
