/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGraphPackage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGraphPackage::OAIGraphPackage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGraphPackage::OAIGraphPackage() {
    this->initializeModel();
}

OAIGraphPackage::~OAIGraphPackage() {}

void OAIGraphPackage::initializeModel() {

    m_edges_isSet = false;
    m_edges_isValid = false;

    m_graph_parameters_isSet = false;
    m_graph_parameters_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;
}

void OAIGraphPackage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGraphPackage::fromJsonObject(QJsonObject json) {

    m_edges_isValid = ::OpenAPI::fromJsonValue(m_edges, json[QString("edges")]);
    m_edges_isSet = !json[QString("edges")].isNull() && m_edges_isValid;

    m_graph_parameters_isValid = ::OpenAPI::fromJsonValue(m_graph_parameters, json[QString("graphParameters")]);
    m_graph_parameters_isSet = !json[QString("graphParameters")].isNull() && m_graph_parameters_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;
}

QString OAIGraphPackage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGraphPackage::asJsonObject() const {
    QJsonObject obj;
    if (m_edges.size() > 0) {
        obj.insert(QString("edges"), ::OpenAPI::toJsonValue(m_edges));
    }
    if (m_graph_parameters.size() > 0) {
        obj.insert(QString("graphParameters"), ::OpenAPI::toJsonValue(m_graph_parameters));
    }
    if (m_nodes.size() > 0) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    return obj;
}

QList<OAIGraphEdge> OAIGraphPackage::getEdges() const {
    return m_edges;
}
void OAIGraphPackage::setEdges(const QList<OAIGraphEdge> &edges) {
    m_edges = edges;
    m_edges_isSet = true;
}

bool OAIGraphPackage::is_edges_Set() const{
    return m_edges_isSet;
}

bool OAIGraphPackage::is_edges_Valid() const{
    return m_edges_isValid;
}

QMap<QString, OAIGraphParameter> OAIGraphPackage::getGraphParameters() const {
    return m_graph_parameters;
}
void OAIGraphPackage::setGraphParameters(const QMap<QString, OAIGraphParameter> &graph_parameters) {
    m_graph_parameters = graph_parameters;
    m_graph_parameters_isSet = true;
}

bool OAIGraphPackage::is_graph_parameters_Set() const{
    return m_graph_parameters_isSet;
}

bool OAIGraphPackage::is_graph_parameters_Valid() const{
    return m_graph_parameters_isValid;
}

QMap<QString, OAIGraphNode> OAIGraphPackage::getNodes() const {
    return m_nodes;
}
void OAIGraphPackage::setNodes(const QMap<QString, OAIGraphNode> &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIGraphPackage::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIGraphPackage::is_nodes_Valid() const{
    return m_nodes_isValid;
}

bool OAIGraphPackage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_edges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_graph_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGraphPackage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
