/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetItem::OAIAssetItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetItem::OAIAssetItem() {
    this->initializeModel();
}

OAIAssetItem::~OAIAssetItem() {}

void OAIAssetItem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_input_ports_isSet = false;
    m_input_ports_isValid = false;

    m_location_info_isSet = false;
    m_location_info_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_output_ports_isSet = false;
    m_output_ports_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAssetItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetItem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_input_ports_isValid = ::OpenAPI::fromJsonValue(m_input_ports, json[QString("inputPorts")]);
    m_input_ports_isSet = !json[QString("inputPorts")].isNull() && m_input_ports_isValid;

    m_location_info_isValid = ::OpenAPI::fromJsonValue(m_location_info, json[QString("locationInfo")]);
    m_location_info_isSet = !json[QString("locationInfo")].isNull() && m_location_info_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_output_ports_isValid = ::OpenAPI::fromJsonValue(m_output_ports, json[QString("outputPorts")]);
    m_output_ports_isSet = !json[QString("outputPorts")].isNull() && m_output_ports_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAssetItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetItem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_input_ports.size() > 0) {
        obj.insert(QString("inputPorts"), ::OpenAPI::toJsonValue(m_input_ports));
    }
    if (m_location_info.isSet()) {
        obj.insert(QString("locationInfo"), ::OpenAPI::toJsonValue(m_location_info));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_output_ports.size() > 0) {
        obj.insert(QString("outputPorts"), ::OpenAPI::toJsonValue(m_output_ports));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAssetItem::getId() const {
    return m_id;
}
void OAIAssetItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssetItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssetItem::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, OAIInputPort> OAIAssetItem::getInputPorts() const {
    return m_input_ports;
}
void OAIAssetItem::setInputPorts(const QMap<QString, OAIInputPort> &input_ports) {
    m_input_ports = input_ports;
    m_input_ports_isSet = true;
}

bool OAIAssetItem::is_input_ports_Set() const{
    return m_input_ports_isSet;
}

bool OAIAssetItem::is_input_ports_Valid() const{
    return m_input_ports_isValid;
}

OAIBlobLocation OAIAssetItem::getLocationInfo() const {
    return m_location_info;
}
void OAIAssetItem::setLocationInfo(const OAIBlobLocation &location_info) {
    m_location_info = location_info;
    m_location_info_isSet = true;
}

bool OAIAssetItem::is_location_info_Set() const{
    return m_location_info_isSet;
}

bool OAIAssetItem::is_location_info_Valid() const{
    return m_location_info_isValid;
}

QMap<QString, QString> OAIAssetItem::getMetadata() const {
    return m_metadata;
}
void OAIAssetItem::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAssetItem::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAssetItem::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAssetItem::getName() const {
    return m_name;
}
void OAIAssetItem::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssetItem::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssetItem::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, OAIOutputPort> OAIAssetItem::getOutputPorts() const {
    return m_output_ports;
}
void OAIAssetItem::setOutputPorts(const QMap<QString, OAIOutputPort> &output_ports) {
    m_output_ports = output_ports;
    m_output_ports_isSet = true;
}

bool OAIAssetItem::is_output_ports_Set() const{
    return m_output_ports_isSet;
}

bool OAIAssetItem::is_output_ports_Valid() const{
    return m_output_ports_isValid;
}

QList<OAIModuleAssetParameter> OAIAssetItem::getParameters() const {
    return m_parameters;
}
void OAIAssetItem::setParameters(const QList<OAIModuleAssetParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIAssetItem::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIAssetItem::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIAssetItem::getType() const {
    return m_type;
}
void OAIAssetItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAssetItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAssetItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAssetItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_info_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
