/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServiceParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServiceParameter::OAIWebServiceParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServiceParameter::OAIWebServiceParameter() {
    this->initializeModel();
}

OAIWebServiceParameter::~OAIWebServiceParameter() {}

void OAIWebServiceParameter::initializeModel() {

    m_certificate_thumbprint_isSet = false;
    m_certificate_thumbprint_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIWebServiceParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServiceParameter::fromJsonObject(QJsonObject json) {

    m_certificate_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_certificate_thumbprint, json[QString("certificateThumbprint")]);
    m_certificate_thumbprint_isSet = !json[QString("certificateThumbprint")].isNull() && m_certificate_thumbprint_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIWebServiceParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServiceParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_thumbprint_isSet) {
        obj.insert(QString("certificateThumbprint"), ::OpenAPI::toJsonValue(m_certificate_thumbprint));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIWebServiceParameter::getCertificateThumbprint() const {
    return m_certificate_thumbprint;
}
void OAIWebServiceParameter::setCertificateThumbprint(const QString &certificate_thumbprint) {
    m_certificate_thumbprint = certificate_thumbprint;
    m_certificate_thumbprint_isSet = true;
}

bool OAIWebServiceParameter::is_certificate_thumbprint_Set() const{
    return m_certificate_thumbprint_isSet;
}

bool OAIWebServiceParameter::is_certificate_thumbprint_Valid() const{
    return m_certificate_thumbprint_isValid;
}

OAIObject OAIWebServiceParameter::getValue() const {
    return m_value;
}
void OAIWebServiceParameter::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIWebServiceParameter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIWebServiceParameter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIWebServiceParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServiceParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
