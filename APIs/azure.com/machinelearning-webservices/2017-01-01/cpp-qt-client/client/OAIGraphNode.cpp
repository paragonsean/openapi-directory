/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGraphNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGraphNode::OAIGraphNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGraphNode::OAIGraphNode() {
    this->initializeModel();
}

OAIGraphNode::~OAIGraphNode() {}

void OAIGraphNode::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_input_id_isSet = false;
    m_input_id_isValid = false;

    m_output_id_isSet = false;
    m_output_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIGraphNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGraphNode::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("assetId")]);
    m_asset_id_isSet = !json[QString("assetId")].isNull() && m_asset_id_isValid;

    m_input_id_isValid = ::OpenAPI::fromJsonValue(m_input_id, json[QString("inputId")]);
    m_input_id_isSet = !json[QString("inputId")].isNull() && m_input_id_isValid;

    m_output_id_isValid = ::OpenAPI::fromJsonValue(m_output_id, json[QString("outputId")]);
    m_output_id_isSet = !json[QString("outputId")].isNull() && m_output_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIGraphNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGraphNode::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("assetId"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_input_id_isSet) {
        obj.insert(QString("inputId"), ::OpenAPI::toJsonValue(m_input_id));
    }
    if (m_output_id_isSet) {
        obj.insert(QString("outputId"), ::OpenAPI::toJsonValue(m_output_id));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIGraphNode::getAssetId() const {
    return m_asset_id;
}
void OAIGraphNode::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIGraphNode::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIGraphNode::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIGraphNode::getInputId() const {
    return m_input_id;
}
void OAIGraphNode::setInputId(const QString &input_id) {
    m_input_id = input_id;
    m_input_id_isSet = true;
}

bool OAIGraphNode::is_input_id_Set() const{
    return m_input_id_isSet;
}

bool OAIGraphNode::is_input_id_Valid() const{
    return m_input_id_isValid;
}

QString OAIGraphNode::getOutputId() const {
    return m_output_id;
}
void OAIGraphNode::setOutputId(const QString &output_id) {
    m_output_id = output_id;
    m_output_id_isSet = true;
}

bool OAIGraphNode::is_output_id_Set() const{
    return m_output_id_isSet;
}

bool OAIGraphNode::is_output_id_Valid() const{
    return m_output_id_isValid;
}

QMap<QString, OAIWebServiceParameter> OAIGraphNode::getParameters() const {
    return m_parameters;
}
void OAIGraphNode::setParameters(const QMap<QString, OAIWebServiceParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIGraphNode::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIGraphNode::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIGraphNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGraphNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
