/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExampleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExampleRequest::OAIExampleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExampleRequest::OAIExampleRequest() {
    this->initializeModel();
}

OAIExampleRequest::~OAIExampleRequest() {}

void OAIExampleRequest::initializeModel() {

    m_global_parameters_isSet = false;
    m_global_parameters_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;
}

void OAIExampleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExampleRequest::fromJsonObject(QJsonObject json) {

    m_global_parameters_isValid = ::OpenAPI::fromJsonValue(m_global_parameters, json[QString("globalParameters")]);
    m_global_parameters_isSet = !json[QString("globalParameters")].isNull() && m_global_parameters_isValid;

    if(json["inputs"].isObject()){
        auto varmap = json["inputs"].toObject().toVariantMap();
        m_inputs_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QList> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_inputs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_inputs_isSet &= !jval.isNull() && m_inputs_isValid;
                m_inputs.insert(m_inputs.end(), val, item);
            }
        }
    }
}

QString OAIExampleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExampleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_global_parameters.size() > 0) {
        obj.insert(QString("globalParameters"), ::OpenAPI::toJsonValue(m_global_parameters));
    }
    if (m_inputs.size() > 0) {
        
        obj.insert(QString("inputs"), toJsonValue(m_inputs));
    }
    return obj;
}

QMap<QString, OAIObject> OAIExampleRequest::getGlobalParameters() const {
    return m_global_parameters;
}
void OAIExampleRequest::setGlobalParameters(const QMap<QString, OAIObject> &global_parameters) {
    m_global_parameters = global_parameters;
    m_global_parameters_isSet = true;
}

bool OAIExampleRequest::is_global_parameters_Set() const{
    return m_global_parameters_isSet;
}

bool OAIExampleRequest::is_global_parameters_Valid() const{
    return m_global_parameters_isValid;
}

QMap<QString, QList<QList<OAIObject>>> OAIExampleRequest::getInputs() const {
    return m_inputs;
}
void OAIExampleRequest::setInputs(const QMap<QString, QList<QList<OAIObject>>> &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIExampleRequest::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIExampleRequest::is_inputs_Valid() const{
    return m_inputs_isValid;
}

bool OAIExampleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_global_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExampleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
