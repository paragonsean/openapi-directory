/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AsyncOperationErrorInfo from './AsyncOperationErrorInfo';

/**
 * The AsyncOperationStatus model module.
 * @module model/AsyncOperationStatus
 * @version 2017-01-01
 */
class AsyncOperationStatus {
    /**
     * Constructs a new <code>AsyncOperationStatus</code>.
     * Azure async operation status.
     * @alias module:model/AsyncOperationStatus
     */
    constructor() { 
        
        AsyncOperationStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AsyncOperationStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AsyncOperationStatus} obj Optional instance to populate.
     * @return {module:model/AsyncOperationStatus} The populated <code>AsyncOperationStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AsyncOperationStatus();

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('errorInfo')) {
                obj['errorInfo'] = AsyncOperationErrorInfo.constructFromObject(data['errorInfo']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('percentComplete')) {
                obj['percentComplete'] = ApiClient.convertToType(data['percentComplete'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AsyncOperationStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AsyncOperationStatus</code>.
     */
    static validateJSON(data) {
        // validate the optional field `errorInfo`
        if (data['errorInfo']) { // data not null
          AsyncOperationErrorInfo.validateJSON(data['errorInfo']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The date time that the async operation finished.
 * @member {Date} endTime
 */
AsyncOperationStatus.prototype['endTime'] = undefined;

/**
 * @member {module:model/AsyncOperationErrorInfo} errorInfo
 */
AsyncOperationStatus.prototype['errorInfo'] = undefined;

/**
 * Async operation id.
 * @member {String} id
 */
AsyncOperationStatus.prototype['id'] = undefined;

/**
 * Async operation name.
 * @member {String} name
 */
AsyncOperationStatus.prototype['name'] = undefined;

/**
 * Async operation progress.
 * @member {Number} percentComplete
 */
AsyncOperationStatus.prototype['percentComplete'] = undefined;

/**
 * Read Only: The provisioning state of the web service. Valid values are Unknown, Provisioning, Succeeded, and Failed.
 * @member {module:model/AsyncOperationStatus.ProvisioningStateEnum} provisioningState
 */
AsyncOperationStatus.prototype['provisioningState'] = undefined;

/**
 * The date time that the async operation started.
 * @member {Date} startTime
 */
AsyncOperationStatus.prototype['startTime'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
AsyncOperationStatus['ProvisioningStateEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Provisioning"
     * @const
     */
    "Provisioning": "Provisioning",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default AsyncOperationStatus;

