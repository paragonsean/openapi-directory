/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2017-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AsyncOperationStatus from '../model/AsyncOperationStatus';
import PaginatedWebServicesList from '../model/PaginatedWebServicesList';
import PatchedWebService from '../model/PatchedWebService';
import WebService from '../model/WebService';
import WebServiceKeys from '../model/WebServiceKeys';

/**
* WebServices service.
* @module api/WebServicesApi
* @version 2017-01-01
*/
export default class WebServicesApi {

    /**
    * Constructs a new WebServicesApi. 
    * @alias module:api/WebServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webServicesCreateOrUpdate operation.
     * @callback module:api/WebServicesApi~webServicesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a web service. This call will overwrite an existing web service. Note that there is no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new web service, call the Get operation first to verify that it does not exist.
     * @param {String} resourceGroupName Name of the resource group in which the web service is located.
     * @param {String} webServiceName The name of the web service.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {module:model/WebService} createOrUpdatePayload The payload that is used to create or update the web service.
     * @param {module:api/WebServicesApi~webServicesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebService}
     */
    webServicesCreateOrUpdate(resourceGroupName, webServiceName, apiVersion, subscriptionId, createOrUpdatePayload, callback) {
      let postBody = createOrUpdatePayload;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webServicesCreateOrUpdate");
      }
      // verify the required parameter 'webServiceName' is set
      if (webServiceName === undefined || webServiceName === null) {
        throw new Error("Missing the required parameter 'webServiceName' when calling webServicesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesCreateOrUpdate");
      }
      // verify the required parameter 'createOrUpdatePayload' is set
      if (createOrUpdatePayload === undefined || createOrUpdatePayload === null) {
        throw new Error("Missing the required parameter 'createOrUpdatePayload' when calling webServicesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'webServiceName': webServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webServicesCreateRegionalProperties operation.
     * @callback module:api/WebServicesApi~webServicesCreateRegionalPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AsyncOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an encrypted credentials parameter blob for the specified region. To get the web service from a region other than the region in which it has been created, you must first call Create Regional Web Services Properties to create a copy of the encrypted credential parameter blob in that region. You only need to do this before the first time that you get the web service in the new region.
     * @param {String} resourceGroupName Name of the resource group in which the web service is located.
     * @param {String} webServiceName The name of the web service.
     * @param {String} region The region for which encrypted credential parameters are created.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {module:api/WebServicesApi~webServicesCreateRegionalPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AsyncOperationStatus}
     */
    webServicesCreateRegionalProperties(resourceGroupName, webServiceName, region, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webServicesCreateRegionalProperties");
      }
      // verify the required parameter 'webServiceName' is set
      if (webServiceName === undefined || webServiceName === null) {
        throw new Error("Missing the required parameter 'webServiceName' when calling webServicesCreateRegionalProperties");
      }
      // verify the required parameter 'region' is set
      if (region === undefined || region === null) {
        throw new Error("Missing the required parameter 'region' when calling webServicesCreateRegionalProperties");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesCreateRegionalProperties");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesCreateRegionalProperties");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'webServiceName': webServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'region': region,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AsyncOperationStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/CreateRegionalBlob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webServicesGet operation.
     * @callback module:api/WebServicesApi~webServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Web Service Definition as specified by a subscription, resource group, and name. Note that the storage credentials and web service keys are not returned by this call. To get the web service access keys, call List Keys.
     * @param {String} resourceGroupName Name of the resource group in which the web service is located.
     * @param {String} webServiceName The name of the web service.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {Object} opts Optional parameters
     * @param {String} [region] The region for which encrypted credential parameters are valid.
     * @param {module:api/WebServicesApi~webServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebService}
     */
    webServicesGet(resourceGroupName, webServiceName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webServicesGet");
      }
      // verify the required parameter 'webServiceName' is set
      if (webServiceName === undefined || webServiceName === null) {
        throw new Error("Missing the required parameter 'webServiceName' when calling webServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'webServiceName': webServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'region': opts['region'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webServicesListByResourceGroup operation.
     * @callback module:api/WebServicesApi~webServicesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWebServicesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web services in the specified resource group.
     * @param {String} resourceGroupName Name of the resource group in which the web service is located.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {Object} opts Optional parameters
     * @param {String} [skiptoken] Continuation token for pagination.
     * @param {module:api/WebServicesApi~webServicesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWebServicesList}
     */
    webServicesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webServicesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$skiptoken': opts['skiptoken'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWebServicesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webServicesListBySubscriptionId operation.
     * @callback module:api/WebServicesApi~webServicesListBySubscriptionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedWebServicesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web services in the specified subscription.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {Object} opts Optional parameters
     * @param {String} [skiptoken] Continuation token for pagination.
     * @param {module:api/WebServicesApi~webServicesListBySubscriptionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedWebServicesList}
     */
    webServicesListBySubscriptionId(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesListBySubscriptionId");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesListBySubscriptionId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$skiptoken': opts['skiptoken'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedWebServicesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MachineLearning/webServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webServicesListKeys operation.
     * @callback module:api/WebServicesApi~webServicesListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the access keys for the specified web service.
     * @param {String} resourceGroupName Name of the resource group in which the web service is located.
     * @param {String} webServiceName The name of the web service.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {module:api/WebServicesApi~webServicesListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceKeys}
     */
    webServicesListKeys(resourceGroupName, webServiceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webServicesListKeys");
      }
      // verify the required parameter 'webServiceName' is set
      if (webServiceName === undefined || webServiceName === null) {
        throw new Error("Missing the required parameter 'webServiceName' when calling webServicesListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesListKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesListKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'webServiceName': webServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebServiceKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}/listKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webServicesPatch operation.
     * @callback module:api/WebServicesApi~webServicesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To determine whether it has completed successfully, you must perform a Get operation.
     * @param {String} resourceGroupName Name of the resource group in which the web service is located.
     * @param {String} webServiceName The name of the web service.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {module:model/PatchedWebService} patchPayload The payload to use to patch the web service.
     * @param {module:api/WebServicesApi~webServicesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebService}
     */
    webServicesPatch(resourceGroupName, webServiceName, apiVersion, subscriptionId, patchPayload, callback) {
      let postBody = patchPayload;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webServicesPatch");
      }
      // verify the required parameter 'webServiceName' is set
      if (webServiceName === undefined || webServiceName === null) {
        throw new Error("Missing the required parameter 'webServiceName' when calling webServicesPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesPatch");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesPatch");
      }
      // verify the required parameter 'patchPayload' is set
      if (patchPayload === undefined || patchPayload === null) {
        throw new Error("Missing the required parameter 'patchPayload' when calling webServicesPatch");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'webServiceName': webServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webServicesRemove operation.
     * @callback module:api/WebServicesApi~webServicesRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified web service.
     * @param {String} resourceGroupName Name of the resource group in which the web service is located.
     * @param {String} webServiceName The name of the web service.
     * @param {String} apiVersion The version of the Microsoft.MachineLearning resource provider API to use.
     * @param {String} subscriptionId The Azure subscription ID.
     * @param {module:api/WebServicesApi~webServicesRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webServicesRemove(resourceGroupName, webServiceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling webServicesRemove");
      }
      // verify the required parameter 'webServiceName' is set
      if (webServiceName === undefined || webServiceName === null) {
        throw new Error("Missing the required parameter 'webServiceName' when calling webServicesRemove");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling webServicesRemove");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling webServicesRemove");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'webServiceName': webServiceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearning/webServices/{webServiceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
