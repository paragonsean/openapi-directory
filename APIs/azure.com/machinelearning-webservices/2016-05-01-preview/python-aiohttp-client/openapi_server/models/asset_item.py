# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_location import AssetLocation
from openapi_server.models.input_port import InputPort
from openapi_server.models.module_asset_parameter import ModuleAssetParameter
from openapi_server.models.output_port import OutputPort
from openapi_server import util


class AssetItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, input_ports: Dict[str, InputPort]=None, location_info: AssetLocation=None, metadata: Dict[str, str]=None, name: str=None, output_ports: Dict[str, OutputPort]=None, parameters: List[ModuleAssetParameter]=None, type: str=None):
        """AssetItem - a model defined in OpenAPI

        :param id: The id of this AssetItem.
        :param input_ports: The input_ports of this AssetItem.
        :param location_info: The location_info of this AssetItem.
        :param metadata: The metadata of this AssetItem.
        :param name: The name of this AssetItem.
        :param output_ports: The output_ports of this AssetItem.
        :param parameters: The parameters of this AssetItem.
        :param type: The type of this AssetItem.
        """
        self.openapi_types = {
            'id': str,
            'input_ports': Dict[str, InputPort],
            'location_info': AssetLocation,
            'metadata': Dict[str, str],
            'name': str,
            'output_ports': Dict[str, OutputPort],
            'parameters': List[ModuleAssetParameter],
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'input_ports': 'inputPorts',
            'location_info': 'locationInfo',
            'metadata': 'metadata',
            'name': 'name',
            'output_ports': 'outputPorts',
            'parameters': 'parameters',
            'type': 'type'
        }

        self._id = id
        self._input_ports = input_ports
        self._location_info = location_info
        self._metadata = metadata
        self._name = name
        self._output_ports = output_ports
        self._parameters = parameters
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetItem of this AssetItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AssetItem.

        Asset's Id.

        :return: The id of this AssetItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetItem.

        Asset's Id.

        :param id: The id of this AssetItem.
        :type id: str
        """

        self._id = id

    @property
    def input_ports(self):
        """Gets the input_ports of this AssetItem.

        Information about the asset's input ports.

        :return: The input_ports of this AssetItem.
        :rtype: Dict[str, InputPort]
        """
        return self._input_ports

    @input_ports.setter
    def input_ports(self, input_ports):
        """Sets the input_ports of this AssetItem.

        Information about the asset's input ports.

        :param input_ports: The input_ports of this AssetItem.
        :type input_ports: Dict[str, InputPort]
        """

        self._input_ports = input_ports

    @property
    def location_info(self):
        """Gets the location_info of this AssetItem.


        :return: The location_info of this AssetItem.
        :rtype: AssetLocation
        """
        return self._location_info

    @location_info.setter
    def location_info(self, location_info):
        """Sets the location_info of this AssetItem.


        :param location_info: The location_info of this AssetItem.
        :type location_info: AssetLocation
        """
        if location_info is None:
            raise ValueError("Invalid value for `location_info`, must not be `None`")

        self._location_info = location_info

    @property
    def metadata(self):
        """Gets the metadata of this AssetItem.

        If the asset is a custom module, this holds the module's metadata.

        :return: The metadata of this AssetItem.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AssetItem.

        If the asset is a custom module, this holds the module's metadata.

        :param metadata: The metadata of this AssetItem.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this AssetItem.

        Asset's friendly name.

        :return: The name of this AssetItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetItem.

        Asset's friendly name.

        :param name: The name of this AssetItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def output_ports(self):
        """Gets the output_ports of this AssetItem.

        Information about the asset's output ports.

        :return: The output_ports of this AssetItem.
        :rtype: Dict[str, OutputPort]
        """
        return self._output_ports

    @output_ports.setter
    def output_ports(self, output_ports):
        """Sets the output_ports of this AssetItem.

        Information about the asset's output ports.

        :param output_ports: The output_ports of this AssetItem.
        :type output_ports: Dict[str, OutputPort]
        """

        self._output_ports = output_ports

    @property
    def parameters(self):
        """Gets the parameters of this AssetItem.

        If the asset is a custom module, this holds the module's parameters.

        :return: The parameters of this AssetItem.
        :rtype: List[ModuleAssetParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AssetItem.

        If the asset is a custom module, this holds the module's parameters.

        :param parameters: The parameters of this AssetItem.
        :type parameters: List[ModuleAssetParameter]
        """

        self._parameters = parameters

    @property
    def type(self):
        """Gets the type of this AssetItem.

        Asset's type.

        :return: The type of this AssetItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssetItem.

        Asset's type.

        :param type: The type of this AssetItem.
        :type type: str
        """
        allowed_values = ["Module", "Resource"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
