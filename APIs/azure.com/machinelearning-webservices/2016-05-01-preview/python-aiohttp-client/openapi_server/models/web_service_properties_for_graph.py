# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_item import AssetItem
from openapi_server.models.commitment_plan import CommitmentPlan
from openapi_server.models.diagnostics_configuration import DiagnosticsConfiguration
from openapi_server.models.example_request import ExampleRequest
from openapi_server.models.graph_package import GraphPackage
from openapi_server.models.machine_learning_workspace import MachineLearningWorkspace
from openapi_server.models.realtime_configuration import RealtimeConfiguration
from openapi_server.models.service_input_output_specification import ServiceInputOutputSpecification
from openapi_server.models.storage_account import StorageAccount
from openapi_server.models.web_service_keys import WebServiceKeys
from openapi_server.models.web_service_properties import WebServiceProperties
from openapi_server import util


class WebServicePropertiesForGraph(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package: GraphPackage=None, assets: Dict[str, AssetItem]=None, commitment_plan: CommitmentPlan=None, created_on: datetime=None, description: str=None, diagnostics: DiagnosticsConfiguration=None, example_request: ExampleRequest=None, expose_sample_data: bool=None, input: ServiceInputOutputSpecification=None, keys: WebServiceKeys=None, machine_learning_workspace: MachineLearningWorkspace=None, modified_on: datetime=None, output: ServiceInputOutputSpecification=None, package_type: str=None, parameters: Dict[str, str]=None, provisioning_state: str=None, read_only: bool=None, realtime_configuration: RealtimeConfiguration=None, storage_account: StorageAccount=None, swagger_location: str=None, title: str=None):
        """WebServicePropertiesForGraph - a model defined in OpenAPI

        :param package: The package of this WebServicePropertiesForGraph.
        :param assets: The assets of this WebServicePropertiesForGraph.
        :param commitment_plan: The commitment_plan of this WebServicePropertiesForGraph.
        :param created_on: The created_on of this WebServicePropertiesForGraph.
        :param description: The description of this WebServicePropertiesForGraph.
        :param diagnostics: The diagnostics of this WebServicePropertiesForGraph.
        :param example_request: The example_request of this WebServicePropertiesForGraph.
        :param expose_sample_data: The expose_sample_data of this WebServicePropertiesForGraph.
        :param input: The input of this WebServicePropertiesForGraph.
        :param keys: The keys of this WebServicePropertiesForGraph.
        :param machine_learning_workspace: The machine_learning_workspace of this WebServicePropertiesForGraph.
        :param modified_on: The modified_on of this WebServicePropertiesForGraph.
        :param output: The output of this WebServicePropertiesForGraph.
        :param package_type: The package_type of this WebServicePropertiesForGraph.
        :param parameters: The parameters of this WebServicePropertiesForGraph.
        :param provisioning_state: The provisioning_state of this WebServicePropertiesForGraph.
        :param read_only: The read_only of this WebServicePropertiesForGraph.
        :param realtime_configuration: The realtime_configuration of this WebServicePropertiesForGraph.
        :param storage_account: The storage_account of this WebServicePropertiesForGraph.
        :param swagger_location: The swagger_location of this WebServicePropertiesForGraph.
        :param title: The title of this WebServicePropertiesForGraph.
        """
        self.openapi_types = {
            'package': GraphPackage,
            'assets': Dict[str, AssetItem],
            'commitment_plan': CommitmentPlan,
            'created_on': datetime,
            'description': str,
            'diagnostics': DiagnosticsConfiguration,
            'example_request': ExampleRequest,
            'expose_sample_data': bool,
            'input': ServiceInputOutputSpecification,
            'keys': WebServiceKeys,
            'machine_learning_workspace': MachineLearningWorkspace,
            'modified_on': datetime,
            'output': ServiceInputOutputSpecification,
            'package_type': str,
            'parameters': Dict[str, str],
            'provisioning_state': str,
            'read_only': bool,
            'realtime_configuration': RealtimeConfiguration,
            'storage_account': StorageAccount,
            'swagger_location': str,
            'title': str
        }

        self.attribute_map = {
            'package': 'package',
            'assets': 'assets',
            'commitment_plan': 'commitmentPlan',
            'created_on': 'createdOn',
            'description': 'description',
            'diagnostics': 'diagnostics',
            'example_request': 'exampleRequest',
            'expose_sample_data': 'exposeSampleData',
            'input': 'input',
            'keys': 'keys',
            'machine_learning_workspace': 'machineLearningWorkspace',
            'modified_on': 'modifiedOn',
            'output': 'output',
            'package_type': 'packageType',
            'parameters': 'parameters',
            'provisioning_state': 'provisioningState',
            'read_only': 'readOnly',
            'realtime_configuration': 'realtimeConfiguration',
            'storage_account': 'storageAccount',
            'swagger_location': 'swaggerLocation',
            'title': 'title'
        }

        self._package = package
        self._assets = assets
        self._commitment_plan = commitment_plan
        self._created_on = created_on
        self._description = description
        self._diagnostics = diagnostics
        self._example_request = example_request
        self._expose_sample_data = expose_sample_data
        self._input = input
        self._keys = keys
        self._machine_learning_workspace = machine_learning_workspace
        self._modified_on = modified_on
        self._output = output
        self._package_type = package_type
        self._parameters = parameters
        self._provisioning_state = provisioning_state
        self._read_only = read_only
        self._realtime_configuration = realtime_configuration
        self._storage_account = storage_account
        self._swagger_location = swagger_location
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebServicePropertiesForGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebServicePropertiesForGraph of this WebServicePropertiesForGraph.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package(self):
        """Gets the package of this WebServicePropertiesForGraph.


        :return: The package of this WebServicePropertiesForGraph.
        :rtype: GraphPackage
        """
        return self._package

    @package.setter
    def package(self, package):
        """Sets the package of this WebServicePropertiesForGraph.


        :param package: The package of this WebServicePropertiesForGraph.
        :type package: GraphPackage
        """

        self._package = package

    @property
    def assets(self):
        """Gets the assets of this WebServicePropertiesForGraph.

        Contains user defined properties describing web service assets. Properties are expressed as Key/Value pairs.

        :return: The assets of this WebServicePropertiesForGraph.
        :rtype: Dict[str, AssetItem]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this WebServicePropertiesForGraph.

        Contains user defined properties describing web service assets. Properties are expressed as Key/Value pairs.

        :param assets: The assets of this WebServicePropertiesForGraph.
        :type assets: Dict[str, AssetItem]
        """

        self._assets = assets

    @property
    def commitment_plan(self):
        """Gets the commitment_plan of this WebServicePropertiesForGraph.


        :return: The commitment_plan of this WebServicePropertiesForGraph.
        :rtype: CommitmentPlan
        """
        return self._commitment_plan

    @commitment_plan.setter
    def commitment_plan(self, commitment_plan):
        """Sets the commitment_plan of this WebServicePropertiesForGraph.


        :param commitment_plan: The commitment_plan of this WebServicePropertiesForGraph.
        :type commitment_plan: CommitmentPlan
        """

        self._commitment_plan = commitment_plan

    @property
    def created_on(self):
        """Gets the created_on of this WebServicePropertiesForGraph.

        Read Only: The date and time when the web service was created.

        :return: The created_on of this WebServicePropertiesForGraph.
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this WebServicePropertiesForGraph.

        Read Only: The date and time when the web service was created.

        :param created_on: The created_on of this WebServicePropertiesForGraph.
        :type created_on: datetime
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this WebServicePropertiesForGraph.

        The description of the web service.

        :return: The description of this WebServicePropertiesForGraph.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebServicePropertiesForGraph.

        The description of the web service.

        :param description: The description of this WebServicePropertiesForGraph.
        :type description: str
        """

        self._description = description

    @property
    def diagnostics(self):
        """Gets the diagnostics of this WebServicePropertiesForGraph.


        :return: The diagnostics of this WebServicePropertiesForGraph.
        :rtype: DiagnosticsConfiguration
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this WebServicePropertiesForGraph.


        :param diagnostics: The diagnostics of this WebServicePropertiesForGraph.
        :type diagnostics: DiagnosticsConfiguration
        """

        self._diagnostics = diagnostics

    @property
    def example_request(self):
        """Gets the example_request of this WebServicePropertiesForGraph.


        :return: The example_request of this WebServicePropertiesForGraph.
        :rtype: ExampleRequest
        """
        return self._example_request

    @example_request.setter
    def example_request(self, example_request):
        """Sets the example_request of this WebServicePropertiesForGraph.


        :param example_request: The example_request of this WebServicePropertiesForGraph.
        :type example_request: ExampleRequest
        """

        self._example_request = example_request

    @property
    def expose_sample_data(self):
        """Gets the expose_sample_data of this WebServicePropertiesForGraph.

        When set to true, sample data is included in the web service's swagger definition. The default value is true.

        :return: The expose_sample_data of this WebServicePropertiesForGraph.
        :rtype: bool
        """
        return self._expose_sample_data

    @expose_sample_data.setter
    def expose_sample_data(self, expose_sample_data):
        """Sets the expose_sample_data of this WebServicePropertiesForGraph.

        When set to true, sample data is included in the web service's swagger definition. The default value is true.

        :param expose_sample_data: The expose_sample_data of this WebServicePropertiesForGraph.
        :type expose_sample_data: bool
        """

        self._expose_sample_data = expose_sample_data

    @property
    def input(self):
        """Gets the input of this WebServicePropertiesForGraph.


        :return: The input of this WebServicePropertiesForGraph.
        :rtype: ServiceInputOutputSpecification
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this WebServicePropertiesForGraph.


        :param input: The input of this WebServicePropertiesForGraph.
        :type input: ServiceInputOutputSpecification
        """

        self._input = input

    @property
    def keys(self):
        """Gets the keys of this WebServicePropertiesForGraph.


        :return: The keys of this WebServicePropertiesForGraph.
        :rtype: WebServiceKeys
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this WebServicePropertiesForGraph.


        :param keys: The keys of this WebServicePropertiesForGraph.
        :type keys: WebServiceKeys
        """

        self._keys = keys

    @property
    def machine_learning_workspace(self):
        """Gets the machine_learning_workspace of this WebServicePropertiesForGraph.


        :return: The machine_learning_workspace of this WebServicePropertiesForGraph.
        :rtype: MachineLearningWorkspace
        """
        return self._machine_learning_workspace

    @machine_learning_workspace.setter
    def machine_learning_workspace(self, machine_learning_workspace):
        """Sets the machine_learning_workspace of this WebServicePropertiesForGraph.


        :param machine_learning_workspace: The machine_learning_workspace of this WebServicePropertiesForGraph.
        :type machine_learning_workspace: MachineLearningWorkspace
        """

        self._machine_learning_workspace = machine_learning_workspace

    @property
    def modified_on(self):
        """Gets the modified_on of this WebServicePropertiesForGraph.

        Read Only: The date and time when the web service was last modified.

        :return: The modified_on of this WebServicePropertiesForGraph.
        :rtype: datetime
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """Sets the modified_on of this WebServicePropertiesForGraph.

        Read Only: The date and time when the web service was last modified.

        :param modified_on: The modified_on of this WebServicePropertiesForGraph.
        :type modified_on: datetime
        """

        self._modified_on = modified_on

    @property
    def output(self):
        """Gets the output of this WebServicePropertiesForGraph.


        :return: The output of this WebServicePropertiesForGraph.
        :rtype: ServiceInputOutputSpecification
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this WebServicePropertiesForGraph.


        :param output: The output of this WebServicePropertiesForGraph.
        :type output: ServiceInputOutputSpecification
        """

        self._output = output

    @property
    def package_type(self):
        """Gets the package_type of this WebServicePropertiesForGraph.

        Specifies the package type. Valid values are Graph (Specifies a web service published through the Machine Learning Studio) and Code (Specifies a web service published using code such as Python). Note: Code is not supported at this time.

        :return: The package_type of this WebServicePropertiesForGraph.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this WebServicePropertiesForGraph.

        Specifies the package type. Valid values are Graph (Specifies a web service published through the Machine Learning Studio) and Code (Specifies a web service published using code such as Python). Note: Code is not supported at this time.

        :param package_type: The package_type of this WebServicePropertiesForGraph.
        :type package_type: str
        """
        allowed_values = ["Graph"]  # noqa: E501
        if package_type not in allowed_values:
            raise ValueError(
                "Invalid value for `package_type` ({0}), must be one of {1}"
                .format(package_type, allowed_values)
            )

        self._package_type = package_type

    @property
    def parameters(self):
        """Gets the parameters of this WebServicePropertiesForGraph.

        The set of global parameters values defined for the web service, given as a global parameter name to default value map. If no default value is specified, the parameter is considered to be required.

        :return: The parameters of this WebServicePropertiesForGraph.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this WebServicePropertiesForGraph.

        The set of global parameters values defined for the web service, given as a global parameter name to default value map. If no default value is specified, the parameter is considered to be required.

        :param parameters: The parameters of this WebServicePropertiesForGraph.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this WebServicePropertiesForGraph.

        Read Only: The provision state of the web service. Valid values are Unknown, Provisioning, Succeeded, and Failed.

        :return: The provisioning_state of this WebServicePropertiesForGraph.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this WebServicePropertiesForGraph.

        Read Only: The provision state of the web service. Valid values are Unknown, Provisioning, Succeeded, and Failed.

        :param provisioning_state: The provisioning_state of this WebServicePropertiesForGraph.
        :type provisioning_state: str
        """
        allowed_values = ["Unknown", "Provisioning", "Succeeded", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def read_only(self):
        """Gets the read_only of this WebServicePropertiesForGraph.

        When set to true, indicates that the web service is read-only and can no longer be updated or patched, only removed. Default, is false. Note: Once set to true, you cannot change its value.

        :return: The read_only of this WebServicePropertiesForGraph.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this WebServicePropertiesForGraph.

        When set to true, indicates that the web service is read-only and can no longer be updated or patched, only removed. Default, is false. Note: Once set to true, you cannot change its value.

        :param read_only: The read_only of this WebServicePropertiesForGraph.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def realtime_configuration(self):
        """Gets the realtime_configuration of this WebServicePropertiesForGraph.


        :return: The realtime_configuration of this WebServicePropertiesForGraph.
        :rtype: RealtimeConfiguration
        """
        return self._realtime_configuration

    @realtime_configuration.setter
    def realtime_configuration(self, realtime_configuration):
        """Sets the realtime_configuration of this WebServicePropertiesForGraph.


        :param realtime_configuration: The realtime_configuration of this WebServicePropertiesForGraph.
        :type realtime_configuration: RealtimeConfiguration
        """

        self._realtime_configuration = realtime_configuration

    @property
    def storage_account(self):
        """Gets the storage_account of this WebServicePropertiesForGraph.


        :return: The storage_account of this WebServicePropertiesForGraph.
        :rtype: StorageAccount
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this WebServicePropertiesForGraph.


        :param storage_account: The storage_account of this WebServicePropertiesForGraph.
        :type storage_account: StorageAccount
        """

        self._storage_account = storage_account

    @property
    def swagger_location(self):
        """Gets the swagger_location of this WebServicePropertiesForGraph.

        Read Only: Contains the URI of the swagger spec associated with this web service.

        :return: The swagger_location of this WebServicePropertiesForGraph.
        :rtype: str
        """
        return self._swagger_location

    @swagger_location.setter
    def swagger_location(self, swagger_location):
        """Sets the swagger_location of this WebServicePropertiesForGraph.

        Read Only: Contains the URI of the swagger spec associated with this web service.

        :param swagger_location: The swagger_location of this WebServicePropertiesForGraph.
        :type swagger_location: str
        """

        self._swagger_location = swagger_location

    @property
    def title(self):
        """Gets the title of this WebServicePropertiesForGraph.

        The title of the web service.

        :return: The title of this WebServicePropertiesForGraph.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this WebServicePropertiesForGraph.

        The title of the web service.

        :param title: The title of this WebServicePropertiesForGraph.
        :type title: str
        """

        self._title = title
