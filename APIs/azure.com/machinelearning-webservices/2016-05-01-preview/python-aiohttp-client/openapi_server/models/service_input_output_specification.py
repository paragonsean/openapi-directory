# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table_specification import TableSpecification
from openapi_server import util


class ServiceInputOutputSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, properties: Dict[str, TableSpecification]=None, title: str=None, type: str='object'):
        """ServiceInputOutputSpecification - a model defined in OpenAPI

        :param description: The description of this ServiceInputOutputSpecification.
        :param properties: The properties of this ServiceInputOutputSpecification.
        :param title: The title of this ServiceInputOutputSpecification.
        :param type: The type of this ServiceInputOutputSpecification.
        """
        self.openapi_types = {
            'description': str,
            'properties': Dict[str, TableSpecification],
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'properties': 'properties',
            'title': 'title',
            'type': 'type'
        }

        self._description = description
        self._properties = properties
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceInputOutputSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceInputOutputSpecification of this ServiceInputOutputSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ServiceInputOutputSpecification.

        The description of the Swagger schema.

        :return: The description of this ServiceInputOutputSpecification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceInputOutputSpecification.

        The description of the Swagger schema.

        :param description: The description of this ServiceInputOutputSpecification.
        :type description: str
        """

        self._description = description

    @property
    def properties(self):
        """Gets the properties of this ServiceInputOutputSpecification.

        Specifies a collection that contains the column schema for each input or output of the web service. For more information, see the Swagger specification.

        :return: The properties of this ServiceInputOutputSpecification.
        :rtype: Dict[str, TableSpecification]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ServiceInputOutputSpecification.

        Specifies a collection that contains the column schema for each input or output of the web service. For more information, see the Swagger specification.

        :param properties: The properties of this ServiceInputOutputSpecification.
        :type properties: Dict[str, TableSpecification]
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")

        self._properties = properties

    @property
    def title(self):
        """Gets the title of this ServiceInputOutputSpecification.

        The title of your Swagger schema.

        :return: The title of this ServiceInputOutputSpecification.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ServiceInputOutputSpecification.

        The title of your Swagger schema.

        :param title: The title of this ServiceInputOutputSpecification.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this ServiceInputOutputSpecification.

        The type of the entity described in swagger. Always 'object'.

        :return: The type of this ServiceInputOutputSpecification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceInputOutputSpecification.

        The type of the entity described in swagger. Always 'object'.

        :param type: The type of this ServiceInputOutputSpecification.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
