# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GraphNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id: str=None, input_id: str=None, output_id: str=None, parameters: Dict[str, str]=None):
        """GraphNode - a model defined in OpenAPI

        :param asset_id: The asset_id of this GraphNode.
        :param input_id: The input_id of this GraphNode.
        :param output_id: The output_id of this GraphNode.
        :param parameters: The parameters of this GraphNode.
        """
        self.openapi_types = {
            'asset_id': str,
            'input_id': str,
            'output_id': str,
            'parameters': Dict[str, str]
        }

        self.attribute_map = {
            'asset_id': 'assetId',
            'input_id': 'inputId',
            'output_id': 'outputId',
            'parameters': 'parameters'
        }

        self._asset_id = asset_id
        self._input_id = input_id
        self._output_id = output_id
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GraphNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GraphNode of this GraphNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this GraphNode.

        The id of the asset represented by this node.

        :return: The asset_id of this GraphNode.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this GraphNode.

        The id of the asset represented by this node.

        :param asset_id: The asset_id of this GraphNode.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def input_id(self):
        """Gets the input_id of this GraphNode.

        The id of the input element represented by this node.

        :return: The input_id of this GraphNode.
        :rtype: str
        """
        return self._input_id

    @input_id.setter
    def input_id(self, input_id):
        """Sets the input_id of this GraphNode.

        The id of the input element represented by this node.

        :param input_id: The input_id of this GraphNode.
        :type input_id: str
        """

        self._input_id = input_id

    @property
    def output_id(self):
        """Gets the output_id of this GraphNode.

        The id of the output element represented by this node.

        :return: The output_id of this GraphNode.
        :rtype: str
        """
        return self._output_id

    @output_id.setter
    def output_id(self, output_id):
        """Sets the output_id of this GraphNode.

        The id of the output element represented by this node.

        :param output_id: The output_id of this GraphNode.
        :type output_id: str
        """

        self._output_id = output_id

    @property
    def parameters(self):
        """Gets the parameters of this GraphNode.

        If applicable, parameters of the node. Global graph parameters map into these, with values set at runtime.

        :return: The parameters of this GraphNode.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GraphNode.

        If applicable, parameters of the node. Global graph parameters map into these, with values set at runtime.

        :param parameters: The parameters of this GraphNode.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters
