# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ColumnSpecification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enum: List[object]=None, format: str=None, type: str=None, x_ms_isnullable: bool=None, x_ms_isordered: bool=None):
        """ColumnSpecification - a model defined in OpenAPI

        :param enum: The enum of this ColumnSpecification.
        :param format: The format of this ColumnSpecification.
        :param type: The type of this ColumnSpecification.
        :param x_ms_isnullable: The x_ms_isnullable of this ColumnSpecification.
        :param x_ms_isordered: The x_ms_isordered of this ColumnSpecification.
        """
        self.openapi_types = {
            'enum': List[object],
            'format': str,
            'type': str,
            'x_ms_isnullable': bool,
            'x_ms_isordered': bool
        }

        self.attribute_map = {
            'enum': 'enum',
            'format': 'format',
            'type': 'type',
            'x_ms_isnullable': 'x-ms-isnullable',
            'x_ms_isordered': 'x-ms-isordered'
        }

        self._enum = enum
        self._format = format
        self._type = type
        self._x_ms_isnullable = x_ms_isnullable
        self._x_ms_isordered = x_ms_isordered

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColumnSpecification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColumnSpecification of this ColumnSpecification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enum(self):
        """Gets the enum of this ColumnSpecification.

        If the data type is categorical, this provides the list of accepted categories.

        :return: The enum of this ColumnSpecification.
        :rtype: List[object]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this ColumnSpecification.

        If the data type is categorical, this provides the list of accepted categories.

        :param enum: The enum of this ColumnSpecification.
        :type enum: List[object]
        """

        self._enum = enum

    @property
    def format(self):
        """Gets the format of this ColumnSpecification.

        Additional format information for the data type.

        :return: The format of this ColumnSpecification.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ColumnSpecification.

        Additional format information for the data type.

        :param format: The format of this ColumnSpecification.
        :type format: str
        """
        allowed_values = ["Byte", "Char", "Complex64", "Complex128", "Date-time", "Date-timeOffset", "Double", "Duration", "Float", "Int8", "Int16", "Int32", "Int64", "Uint8", "Uint16", "Uint32", "Uint64"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def type(self):
        """Gets the type of this ColumnSpecification.

        Data type of the column.

        :return: The type of this ColumnSpecification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ColumnSpecification.

        Data type of the column.

        :param type: The type of this ColumnSpecification.
        :type type: str
        """
        allowed_values = ["Boolean", "Integer", "Number", "String"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def x_ms_isnullable(self):
        """Gets the x_ms_isnullable of this ColumnSpecification.

        Flag indicating if the type supports null values or not.

        :return: The x_ms_isnullable of this ColumnSpecification.
        :rtype: bool
        """
        return self._x_ms_isnullable

    @x_ms_isnullable.setter
    def x_ms_isnullable(self, x_ms_isnullable):
        """Sets the x_ms_isnullable of this ColumnSpecification.

        Flag indicating if the type supports null values or not.

        :param x_ms_isnullable: The x_ms_isnullable of this ColumnSpecification.
        :type x_ms_isnullable: bool
        """

        self._x_ms_isnullable = x_ms_isnullable

    @property
    def x_ms_isordered(self):
        """Gets the x_ms_isordered of this ColumnSpecification.

        Flag indicating whether the categories are treated as an ordered set or not, if this is a categorical column.

        :return: The x_ms_isordered of this ColumnSpecification.
        :rtype: bool
        """
        return self._x_ms_isordered

    @x_ms_isordered.setter
    def x_ms_isordered(self, x_ms_isordered):
        """Sets the x_ms_isordered of this ColumnSpecification.

        Flag indicating whether the categories are treated as an ordered set or not, if this is a categorical column.

        :param x_ms_isordered: The x_ms_isordered of this ColumnSpecification.
        :type x_ms_isordered: bool
        """

        self._x_ms_isordered = x_ms_isordered
