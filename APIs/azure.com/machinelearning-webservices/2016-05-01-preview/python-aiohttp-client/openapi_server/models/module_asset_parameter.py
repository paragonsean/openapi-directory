# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mode_value_info import ModeValueInfo
from openapi_server import util


class ModuleAssetParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode_values_info: Dict[str, ModeValueInfo]=None, name: str=None, parameter_type: str=None):
        """ModuleAssetParameter - a model defined in OpenAPI

        :param mode_values_info: The mode_values_info of this ModuleAssetParameter.
        :param name: The name of this ModuleAssetParameter.
        :param parameter_type: The parameter_type of this ModuleAssetParameter.
        """
        self.openapi_types = {
            'mode_values_info': Dict[str, ModeValueInfo],
            'name': str,
            'parameter_type': str
        }

        self.attribute_map = {
            'mode_values_info': 'modeValuesInfo',
            'name': 'name',
            'parameter_type': 'parameterType'
        }

        self._mode_values_info = mode_values_info
        self._name = name
        self._parameter_type = parameter_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModuleAssetParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModuleAssetParameter of this ModuleAssetParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode_values_info(self):
        """Gets the mode_values_info of this ModuleAssetParameter.

        Definitions for nested interface parameters if this is a complex module parameter.

        :return: The mode_values_info of this ModuleAssetParameter.
        :rtype: Dict[str, ModeValueInfo]
        """
        return self._mode_values_info

    @mode_values_info.setter
    def mode_values_info(self, mode_values_info):
        """Sets the mode_values_info of this ModuleAssetParameter.

        Definitions for nested interface parameters if this is a complex module parameter.

        :param mode_values_info: The mode_values_info of this ModuleAssetParameter.
        :type mode_values_info: Dict[str, ModeValueInfo]
        """

        self._mode_values_info = mode_values_info

    @property
    def name(self):
        """Gets the name of this ModuleAssetParameter.

        Parameter name.

        :return: The name of this ModuleAssetParameter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModuleAssetParameter.

        Parameter name.

        :param name: The name of this ModuleAssetParameter.
        :type name: str
        """

        self._name = name

    @property
    def parameter_type(self):
        """Gets the parameter_type of this ModuleAssetParameter.

        Parameter type.

        :return: The parameter_type of this ModuleAssetParameter.
        :rtype: str
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this ModuleAssetParameter.

        Parameter type.

        :param parameter_type: The parameter_type of this ModuleAssetParameter.
        :type parameter_type: str
        """

        self._parameter_type = parameter_type
