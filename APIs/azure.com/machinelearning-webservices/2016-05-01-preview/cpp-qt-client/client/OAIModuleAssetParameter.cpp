/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModuleAssetParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModuleAssetParameter::OAIModuleAssetParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModuleAssetParameter::OAIModuleAssetParameter() {
    this->initializeModel();
}

OAIModuleAssetParameter::~OAIModuleAssetParameter() {}

void OAIModuleAssetParameter::initializeModel() {

    m_mode_values_info_isSet = false;
    m_mode_values_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameter_type_isSet = false;
    m_parameter_type_isValid = false;
}

void OAIModuleAssetParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModuleAssetParameter::fromJsonObject(QJsonObject json) {

    m_mode_values_info_isValid = ::OpenAPI::fromJsonValue(m_mode_values_info, json[QString("modeValuesInfo")]);
    m_mode_values_info_isSet = !json[QString("modeValuesInfo")].isNull() && m_mode_values_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameter_type_isValid = ::OpenAPI::fromJsonValue(m_parameter_type, json[QString("parameterType")]);
    m_parameter_type_isSet = !json[QString("parameterType")].isNull() && m_parameter_type_isValid;
}

QString OAIModuleAssetParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModuleAssetParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_mode_values_info.size() > 0) {
        obj.insert(QString("modeValuesInfo"), ::OpenAPI::toJsonValue(m_mode_values_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameter_type_isSet) {
        obj.insert(QString("parameterType"), ::OpenAPI::toJsonValue(m_parameter_type));
    }
    return obj;
}

QMap<QString, OAIModeValueInfo> OAIModuleAssetParameter::getModeValuesInfo() const {
    return m_mode_values_info;
}
void OAIModuleAssetParameter::setModeValuesInfo(const QMap<QString, OAIModeValueInfo> &mode_values_info) {
    m_mode_values_info = mode_values_info;
    m_mode_values_info_isSet = true;
}

bool OAIModuleAssetParameter::is_mode_values_info_Set() const{
    return m_mode_values_info_isSet;
}

bool OAIModuleAssetParameter::is_mode_values_info_Valid() const{
    return m_mode_values_info_isValid;
}

QString OAIModuleAssetParameter::getName() const {
    return m_name;
}
void OAIModuleAssetParameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIModuleAssetParameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIModuleAssetParameter::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIModuleAssetParameter::getParameterType() const {
    return m_parameter_type;
}
void OAIModuleAssetParameter::setParameterType(const QString &parameter_type) {
    m_parameter_type = parameter_type;
    m_parameter_type_isSet = true;
}

bool OAIModuleAssetParameter::is_parameter_type_Set() const{
    return m_parameter_type_isSet;
}

bool OAIModuleAssetParameter::is_parameter_type_Valid() const{
    return m_parameter_type_isValid;
}

bool OAIModuleAssetParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mode_values_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModuleAssetParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
