/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGraphParameterLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGraphParameterLink::OAIGraphParameterLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGraphParameterLink::OAIGraphParameterLink() {
    this->initializeModel();
}

OAIGraphParameterLink::~OAIGraphParameterLink() {}

void OAIGraphParameterLink::initializeModel() {

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_parameter_key_isSet = false;
    m_parameter_key_isValid = false;
}

void OAIGraphParameterLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGraphParameterLink::fromJsonObject(QJsonObject json) {

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_parameter_key_isValid = ::OpenAPI::fromJsonValue(m_parameter_key, json[QString("parameterKey")]);
    m_parameter_key_isSet = !json[QString("parameterKey")].isNull() && m_parameter_key_isValid;
}

QString OAIGraphParameterLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGraphParameterLink::asJsonObject() const {
    QJsonObject obj;
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_parameter_key_isSet) {
        obj.insert(QString("parameterKey"), ::OpenAPI::toJsonValue(m_parameter_key));
    }
    return obj;
}

QString OAIGraphParameterLink::getNodeId() const {
    return m_node_id;
}
void OAIGraphParameterLink::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIGraphParameterLink::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIGraphParameterLink::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIGraphParameterLink::getParameterKey() const {
    return m_parameter_key;
}
void OAIGraphParameterLink::setParameterKey(const QString &parameter_key) {
    m_parameter_key = parameter_key;
    m_parameter_key_isSet = true;
}

bool OAIGraphParameterLink::is_parameter_key_Set() const{
    return m_parameter_key_isSet;
}

bool OAIGraphParameterLink::is_parameter_key_Valid() const{
    return m_parameter_key_isValid;
}

bool OAIGraphParameterLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGraphParameterLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_id_isValid && m_parameter_key_isValid && true;
}

} // namespace OpenAPI
