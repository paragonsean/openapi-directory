/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosticsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosticsConfiguration::OAIDiagnosticsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosticsConfiguration::OAIDiagnosticsConfiguration() {
    this->initializeModel();
}

OAIDiagnosticsConfiguration::~OAIDiagnosticsConfiguration() {}

void OAIDiagnosticsConfiguration::initializeModel() {

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;
}

void OAIDiagnosticsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosticsConfiguration::fromJsonObject(QJsonObject json) {

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;
}

QString OAIDiagnosticsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosticsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    return obj;
}

QDateTime OAIDiagnosticsConfiguration::getExpiry() const {
    return m_expiry;
}
void OAIDiagnosticsConfiguration::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIDiagnosticsConfiguration::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIDiagnosticsConfiguration::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAIDiagnosticsConfiguration::getLevel() const {
    return m_level;
}
void OAIDiagnosticsConfiguration::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIDiagnosticsConfiguration::is_level_Set() const{
    return m_level_isSet;
}

bool OAIDiagnosticsConfiguration::is_level_Valid() const{
    return m_level_isValid;
}

bool OAIDiagnosticsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosticsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_level_isValid && true;
}

} // namespace OpenAPI
