/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModeValueInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModeValueInfo::OAIModeValueInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModeValueInfo::OAIModeValueInfo() {
    this->initializeModel();
}

OAIModeValueInfo::~OAIModeValueInfo() {}

void OAIModeValueInfo::initializeModel() {

    m_interface_string_isSet = false;
    m_interface_string_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIModeValueInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModeValueInfo::fromJsonObject(QJsonObject json) {

    m_interface_string_isValid = ::OpenAPI::fromJsonValue(m_interface_string, json[QString("interfaceString")]);
    m_interface_string_isSet = !json[QString("interfaceString")].isNull() && m_interface_string_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIModeValueInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModeValueInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_interface_string_isSet) {
        obj.insert(QString("interfaceString"), ::OpenAPI::toJsonValue(m_interface_string));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIModeValueInfo::getInterfaceString() const {
    return m_interface_string;
}
void OAIModeValueInfo::setInterfaceString(const QString &interface_string) {
    m_interface_string = interface_string;
    m_interface_string_isSet = true;
}

bool OAIModeValueInfo::is_interface_string_Set() const{
    return m_interface_string_isSet;
}

bool OAIModeValueInfo::is_interface_string_Valid() const{
    return m_interface_string_isValid;
}

QList<OAIModuleAssetParameter> OAIModeValueInfo::getParameters() const {
    return m_parameters;
}
void OAIModeValueInfo::setParameters(const QList<OAIModuleAssetParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIModeValueInfo::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIModeValueInfo::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIModeValueInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_interface_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModeValueInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
