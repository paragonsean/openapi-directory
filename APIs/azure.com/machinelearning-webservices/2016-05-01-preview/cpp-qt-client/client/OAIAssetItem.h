/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssetItem.h
 *
 * Information about an asset associated with the web service.
 */

#ifndef OAIAssetItem_H
#define OAIAssetItem_H

#include <QJsonObject>

#include "OAIAssetLocation.h"
#include "OAIInputPort.h"
#include "OAIModuleAssetParameter.h"
#include "OAIOutputPort.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputPort;
class OAIAssetLocation;
class OAIOutputPort;
class OAIModuleAssetParameter;

class OAIAssetItem : public OAIObject {
public:
    OAIAssetItem();
    OAIAssetItem(QString json);
    ~OAIAssetItem() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QMap<QString, OAIInputPort> getInputPorts() const;
    void setInputPorts(const QMap<QString, OAIInputPort> &input_ports);
    bool is_input_ports_Set() const;
    bool is_input_ports_Valid() const;

    OAIAssetLocation getLocationInfo() const;
    void setLocationInfo(const OAIAssetLocation &location_info);
    bool is_location_info_Set() const;
    bool is_location_info_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QMap<QString, OAIOutputPort> getOutputPorts() const;
    void setOutputPorts(const QMap<QString, OAIOutputPort> &output_ports);
    bool is_output_ports_Set() const;
    bool is_output_ports_Valid() const;

    QList<OAIModuleAssetParameter> getParameters() const;
    void setParameters(const QList<OAIModuleAssetParameter> &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QMap<QString, OAIInputPort> m_input_ports;
    bool m_input_ports_isSet;
    bool m_input_ports_isValid;

    OAIAssetLocation m_location_info;
    bool m_location_info_isSet;
    bool m_location_info_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QMap<QString, OAIOutputPort> m_output_ports;
    bool m_output_ports_isSet;
    bool m_output_ports_isValid;

    QList<OAIModuleAssetParameter> m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssetItem)

#endif // OAIAssetItem_H
