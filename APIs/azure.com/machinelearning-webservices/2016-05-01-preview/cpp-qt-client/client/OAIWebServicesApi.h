/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebServicesApi_H
#define OAI_OAIWebServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPaginatedWebServicesList.h"
#include "OAIWebService.h"
#include "OAIWebServiceKeys.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebServicesApi : public QObject {
    Q_OBJECT

public:
    OAIWebServicesApi(const int timeOut = 0);
    ~OAIWebServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  web_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  create_or_update_payload OAIWebService [required]
    */
    virtual void webServicesCreateOrUpdate(const QString &resource_group_name, const QString &web_service_name, const QString &api_version, const QString &subscription_id, const OAIWebService &create_or_update_payload);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  web_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void webServicesGet(const QString &resource_group_name, const QString &web_service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void webServicesList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void webServicesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  web_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void webServicesListKeys(const QString &resource_group_name, const QString &web_service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  web_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  patch_payload OAIWebService [required]
    */
    virtual void webServicesPatch(const QString &resource_group_name, const QString &web_service_name, const QString &api_version, const QString &subscription_id, const OAIWebService &patch_payload);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  web_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void webServicesRemove(const QString &resource_group_name, const QString &web_service_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void webServicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void webServicesGetCallback(OAIHttpRequestWorker *worker);
    void webServicesListCallback(OAIHttpRequestWorker *worker);
    void webServicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void webServicesListKeysCallback(OAIHttpRequestWorker *worker);
    void webServicesPatchCallback(OAIHttpRequestWorker *worker);
    void webServicesRemoveCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void webServicesCreateOrUpdateSignal(OAIWebService summary);
    void webServicesGetSignal(OAIWebService summary);
    void webServicesListSignal(OAIPaginatedWebServicesList summary);
    void webServicesListByResourceGroupSignal(OAIPaginatedWebServicesList summary);
    void webServicesListKeysSignal(OAIWebServiceKeys summary);
    void webServicesPatchSignal(OAIWebService summary);
    void webServicesRemoveSignal();


    void webServicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWebService summary);
    void webServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIWebService summary);
    void webServicesListSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedWebServicesList summary);
    void webServicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedWebServicesList summary);
    void webServicesListKeysSignalFull(OAIHttpRequestWorker *worker, OAIWebServiceKeys summary);
    void webServicesPatchSignalFull(OAIHttpRequestWorker *worker, OAIWebService summary);
    void webServicesRemoveSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use webServicesCreateOrUpdateSignalError() instead")
    void webServicesCreateOrUpdateSignalE(OAIWebService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesCreateOrUpdateSignalError(OAIWebService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesGetSignalError() instead")
    void webServicesGetSignalE(OAIWebService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesGetSignalError(OAIWebService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesListSignalError() instead")
    void webServicesListSignalE(OAIPaginatedWebServicesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesListSignalError(OAIPaginatedWebServicesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesListByResourceGroupSignalError() instead")
    void webServicesListByResourceGroupSignalE(OAIPaginatedWebServicesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesListByResourceGroupSignalError(OAIPaginatedWebServicesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesListKeysSignalError() instead")
    void webServicesListKeysSignalE(OAIWebServiceKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesListKeysSignalError(OAIWebServiceKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesPatchSignalError() instead")
    void webServicesPatchSignalE(OAIWebService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesPatchSignalError(OAIWebService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesRemoveSignalError() instead")
    void webServicesRemoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesRemoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use webServicesCreateOrUpdateSignalErrorFull() instead")
    void webServicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesGetSignalErrorFull() instead")
    void webServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesListSignalErrorFull() instead")
    void webServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesListByResourceGroupSignalErrorFull() instead")
    void webServicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesListKeysSignalErrorFull() instead")
    void webServicesListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesPatchSignalErrorFull() instead")
    void webServicesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webServicesRemoveSignalErrorFull() instead")
    void webServicesRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webServicesRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
