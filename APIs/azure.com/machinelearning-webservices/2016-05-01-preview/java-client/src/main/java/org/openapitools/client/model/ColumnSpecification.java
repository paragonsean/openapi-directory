/*
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Swagger 2.0 schema for a column within the data table representing a web service input or output. See Swagger specification: http://swagger.io/specification/
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:31.595037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ColumnSpecification {
  public static final String SERIALIZED_NAME_ENUM = "enum";
  @SerializedName(SERIALIZED_NAME_ENUM)
  private List<Object> _enum = new ArrayList<>();

  /**
   * Additional format information for the data type.
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    BYTE("Byte"),
    
    CHAR("Char"),
    
    COMPLEX64("Complex64"),
    
    COMPLEX128("Complex128"),
    
    DATE_TIME("Date-time"),
    
    DATE_TIME_OFFSET("Date-timeOffset"),
    
    DOUBLE("Double"),
    
    DURATION("Duration"),
    
    FLOAT("Float"),
    
    INT8("Int8"),
    
    INT16("Int16"),
    
    INT32("Int32"),
    
    INT64("Int64"),
    
    UINT8("Uint8"),
    
    UINT16("Uint16"),
    
    UINT32("Uint32"),
    
    UINT64("Uint64");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  /**
   * Data type of the column.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BOOLEAN("Boolean"),
    
    INTEGER("Integer"),
    
    NUMBER("Number"),
    
    STRING("String");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_X_MS_ISNULLABLE = "x-ms-isnullable";
  @SerializedName(SERIALIZED_NAME_X_MS_ISNULLABLE)
  private Boolean xMsIsnullable;

  public static final String SERIALIZED_NAME_X_MS_ISORDERED = "x-ms-isordered";
  @SerializedName(SERIALIZED_NAME_X_MS_ISORDERED)
  private Boolean xMsIsordered;

  public ColumnSpecification() {
  }

  public ColumnSpecification _enum(List<Object> _enum) {
    this._enum = _enum;
    return this;
  }

  public ColumnSpecification addEnumItem(Object _enumItem) {
    if (this._enum == null) {
      this._enum = new ArrayList<>();
    }
    this._enum.add(_enumItem);
    return this;
  }

  /**
   * If the data type is categorical, this provides the list of accepted categories.
   * @return _enum
   */
  @javax.annotation.Nullable
  public List<Object> getEnum() {
    return _enum;
  }

  public void setEnum(List<Object> _enum) {
    this._enum = _enum;
  }


  public ColumnSpecification format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Additional format information for the data type.
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public ColumnSpecification type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Data type of the column.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ColumnSpecification xMsIsnullable(Boolean xMsIsnullable) {
    this.xMsIsnullable = xMsIsnullable;
    return this;
  }

  /**
   * Flag indicating if the type supports null values or not.
   * @return xMsIsnullable
   */
  @javax.annotation.Nullable
  public Boolean getxMsIsnullable() {
    return xMsIsnullable;
  }

  public void setxMsIsnullable(Boolean xMsIsnullable) {
    this.xMsIsnullable = xMsIsnullable;
  }


  public ColumnSpecification xMsIsordered(Boolean xMsIsordered) {
    this.xMsIsordered = xMsIsordered;
    return this;
  }

  /**
   * Flag indicating whether the categories are treated as an ordered set or not, if this is a categorical column.
   * @return xMsIsordered
   */
  @javax.annotation.Nullable
  public Boolean getxMsIsordered() {
    return xMsIsordered;
  }

  public void setxMsIsordered(Boolean xMsIsordered) {
    this.xMsIsordered = xMsIsordered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnSpecification columnSpecification = (ColumnSpecification) o;
    return Objects.equals(this._enum, columnSpecification._enum) &&
        Objects.equals(this.format, columnSpecification.format) &&
        Objects.equals(this.type, columnSpecification.type) &&
        Objects.equals(this.xMsIsnullable, columnSpecification.xMsIsnullable) &&
        Objects.equals(this.xMsIsordered, columnSpecification.xMsIsordered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_enum, format, type, xMsIsnullable, xMsIsordered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnSpecification {\n");
    sb.append("    _enum: ").append(toIndentedString(_enum)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xMsIsnullable: ").append(toIndentedString(xMsIsnullable)).append("\n");
    sb.append("    xMsIsordered: ").append(toIndentedString(xMsIsordered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enum");
    openapiFields.add("format");
    openapiFields.add("type");
    openapiFields.add("x-ms-isnullable");
    openapiFields.add("x-ms-isordered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColumnSpecification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColumnSpecification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnSpecification is not found in the empty JSON string", ColumnSpecification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColumnSpecification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColumnSpecification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ColumnSpecification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("enum") != null && !jsonObj.get("enum").isJsonNull() && !jsonObj.get("enum").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `enum` to be an array in the JSON string but got `%s`", jsonObj.get("enum").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnSpecification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnSpecification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnSpecification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnSpecification.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnSpecification>() {
           @Override
           public void write(JsonWriter out, ColumnSpecification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnSpecification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColumnSpecification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColumnSpecification
   * @throws IOException if the JSON string is invalid with respect to ColumnSpecification
   */
  public static ColumnSpecification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnSpecification.class);
  }

  /**
   * Convert an instance of ColumnSpecification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

