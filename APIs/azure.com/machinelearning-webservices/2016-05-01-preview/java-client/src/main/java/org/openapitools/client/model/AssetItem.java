/*
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AssetLocation;
import org.openapitools.client.model.InputPort;
import org.openapitools.client.model.ModuleAssetParameter;
import org.openapitools.client.model.OutputPort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an asset associated with the web service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:31.595037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetItem {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INPUT_PORTS = "inputPorts";
  @SerializedName(SERIALIZED_NAME_INPUT_PORTS)
  private Map<String, InputPort> inputPorts = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCATION_INFO = "locationInfo";
  @SerializedName(SERIALIZED_NAME_LOCATION_INFO)
  private AssetLocation locationInfo;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OUTPUT_PORTS = "outputPorts";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PORTS)
  private Map<String, OutputPort> outputPorts = new HashMap<>();

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<ModuleAssetParameter> parameters = new ArrayList<>();

  /**
   * Asset&#39;s type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MODULE("Module"),
    
    RESOURCE("Resource");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public AssetItem() {
  }

  public AssetItem id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Asset&#39;s Id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AssetItem inputPorts(Map<String, InputPort> inputPorts) {
    this.inputPorts = inputPorts;
    return this;
  }

  public AssetItem putInputPortsItem(String key, InputPort inputPortsItem) {
    if (this.inputPorts == null) {
      this.inputPorts = new HashMap<>();
    }
    this.inputPorts.put(key, inputPortsItem);
    return this;
  }

  /**
   * Information about the asset&#39;s input ports.
   * @return inputPorts
   */
  @javax.annotation.Nullable
  public Map<String, InputPort> getInputPorts() {
    return inputPorts;
  }

  public void setInputPorts(Map<String, InputPort> inputPorts) {
    this.inputPorts = inputPorts;
  }


  public AssetItem locationInfo(AssetLocation locationInfo) {
    this.locationInfo = locationInfo;
    return this;
  }

  /**
   * Get locationInfo
   * @return locationInfo
   */
  @javax.annotation.Nonnull
  public AssetLocation getLocationInfo() {
    return locationInfo;
  }

  public void setLocationInfo(AssetLocation locationInfo) {
    this.locationInfo = locationInfo;
  }


  public AssetItem metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public AssetItem putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * If the asset is a custom module, this holds the module&#39;s metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public AssetItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Asset&#39;s friendly name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AssetItem outputPorts(Map<String, OutputPort> outputPorts) {
    this.outputPorts = outputPorts;
    return this;
  }

  public AssetItem putOutputPortsItem(String key, OutputPort outputPortsItem) {
    if (this.outputPorts == null) {
      this.outputPorts = new HashMap<>();
    }
    this.outputPorts.put(key, outputPortsItem);
    return this;
  }

  /**
   * Information about the asset&#39;s output ports.
   * @return outputPorts
   */
  @javax.annotation.Nullable
  public Map<String, OutputPort> getOutputPorts() {
    return outputPorts;
  }

  public void setOutputPorts(Map<String, OutputPort> outputPorts) {
    this.outputPorts = outputPorts;
  }


  public AssetItem parameters(List<ModuleAssetParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public AssetItem addParametersItem(ModuleAssetParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * If the asset is a custom module, this holds the module&#39;s parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public List<ModuleAssetParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<ModuleAssetParameter> parameters) {
    this.parameters = parameters;
  }


  public AssetItem type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Asset&#39;s type.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetItem assetItem = (AssetItem) o;
    return Objects.equals(this.id, assetItem.id) &&
        Objects.equals(this.inputPorts, assetItem.inputPorts) &&
        Objects.equals(this.locationInfo, assetItem.locationInfo) &&
        Objects.equals(this.metadata, assetItem.metadata) &&
        Objects.equals(this.name, assetItem.name) &&
        Objects.equals(this.outputPorts, assetItem.outputPorts) &&
        Objects.equals(this.parameters, assetItem.parameters) &&
        Objects.equals(this.type, assetItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, inputPorts, locationInfo, metadata, name, outputPorts, parameters, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inputPorts: ").append(toIndentedString(inputPorts)).append("\n");
    sb.append("    locationInfo: ").append(toIndentedString(locationInfo)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    outputPorts: ").append(toIndentedString(outputPorts)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("inputPorts");
    openapiFields.add("locationInfo");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("outputPorts");
    openapiFields.add("parameters");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("locationInfo");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetItem is not found in the empty JSON string", AssetItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssetItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `locationInfo`
      AssetLocation.validateJsonElement(jsonObj.get("locationInfo"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            ModuleAssetParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetItem>() {
           @Override
           public void write(JsonWriter out, AssetItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetItem
   * @throws IOException if the JSON string is invalid with respect to AssetItem
   */
  public static AssetItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetItem.class);
  }

  /**
   * Convert an instance of AssetItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

