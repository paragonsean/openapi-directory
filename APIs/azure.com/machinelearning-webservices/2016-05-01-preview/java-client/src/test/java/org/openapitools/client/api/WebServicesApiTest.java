/*
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PaginatedWebServicesList;
import org.openapitools.client.model.WebService;
import org.openapitools.client.model.WebServiceKeys;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebServicesApi
 */
@Disabled
public class WebServicesApiTest {

    private final WebServicesApi api = new WebServicesApi();

    /**
     * Create or update a web service. This call will overwrite an existing web service. Note that there is no warning or confirmation. This is a nonrecoverable operation. If your intent is to create a new web service, call the Get operation first to verify that it does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webServicesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String webServiceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WebService createOrUpdatePayload = null;
        WebService response = api.webServicesCreateOrUpdate(resourceGroupName, webServiceName, apiVersion, subscriptionId, createOrUpdatePayload);
        // TODO: test validations
    }

    /**
     * Gets the Web Service Definition as specified by a subscription, resource group, and name. Note that the storage credentials and web service keys are not returned by this call. To get the web service access keys, call List Keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webServicesGetTest() throws ApiException {
        String resourceGroupName = null;
        String webServiceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WebService response = api.webServicesGet(resourceGroupName, webServiceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the web services in the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webServicesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $skiptoken = null;
        PaginatedWebServicesList response = api.webServicesList(apiVersion, subscriptionId, $skiptoken);
        // TODO: test validations
    }

    /**
     * Gets the web services in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webServicesListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $skiptoken = null;
        PaginatedWebServicesList response = api.webServicesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, $skiptoken);
        // TODO: test validations
    }

    /**
     * Gets the access keys for the specified web service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webServicesListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String webServiceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WebServiceKeys response = api.webServicesListKeys(resourceGroupName, webServiceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Modifies an existing web service resource. The PATCH API call is an asynchronous operation. To determine whether it has completed successfully, you must perform a Get operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webServicesPatchTest() throws ApiException {
        String resourceGroupName = null;
        String webServiceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        WebService patchPayload = null;
        WebService response = api.webServicesPatch(resourceGroupName, webServiceName, apiVersion, subscriptionId, patchPayload);
        // TODO: test validations
    }

    /**
     * Deletes the specified web service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void webServicesRemoveTest() throws ApiException {
        String resourceGroupName = null;
        String webServiceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.webServicesRemove(resourceGroupName, webServiceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
