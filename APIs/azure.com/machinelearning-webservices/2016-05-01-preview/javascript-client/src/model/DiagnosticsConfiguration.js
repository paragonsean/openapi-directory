/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiagnosticsConfiguration model module.
 * @module model/DiagnosticsConfiguration
 * @version 2016-05-01-preview
 */
class DiagnosticsConfiguration {
    /**
     * Constructs a new <code>DiagnosticsConfiguration</code>.
     * Diagnostics settings for an Azure ML web service.
     * @alias module:model/DiagnosticsConfiguration
     * @param level {module:model/DiagnosticsConfiguration.LevelEnum} Specifies the verbosity of the diagnostic output. Valid values are: None - disables tracing; Error - collects only error (stderr) traces; All - collects all traces (stdout and stderr).
     */
    constructor(level) { 
        
        DiagnosticsConfiguration.initialize(this, level);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, level) { 
        obj['level'] = level;
    }

    /**
     * Constructs a <code>DiagnosticsConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosticsConfiguration} obj Optional instance to populate.
     * @return {module:model/DiagnosticsConfiguration} The populated <code>DiagnosticsConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosticsConfiguration();

            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosticsConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosticsConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DiagnosticsConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }

        return true;
    }


}

DiagnosticsConfiguration.RequiredProperties = ["level"];

/**
 * Specifies the date and time when the logging will cease. If null, diagnostic collection is not time limited.
 * @member {Date} expiry
 */
DiagnosticsConfiguration.prototype['expiry'] = undefined;

/**
 * Specifies the verbosity of the diagnostic output. Valid values are: None - disables tracing; Error - collects only error (stderr) traces; All - collects all traces (stdout and stderr).
 * @member {module:model/DiagnosticsConfiguration.LevelEnum} level
 */
DiagnosticsConfiguration.prototype['level'] = undefined;





/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
DiagnosticsConfiguration['LevelEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "All"
     * @const
     */
    "All": "All"
};



export default DiagnosticsConfiguration;

