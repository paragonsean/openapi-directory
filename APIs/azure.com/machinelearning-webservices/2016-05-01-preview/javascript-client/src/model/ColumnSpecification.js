/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ColumnSpecification model module.
 * @module model/ColumnSpecification
 * @version 2016-05-01-preview
 */
class ColumnSpecification {
    /**
     * Constructs a new <code>ColumnSpecification</code>.
     * Swagger 2.0 schema for a column within the data table representing a web service input or output. See Swagger specification: http://swagger.io/specification/
     * @alias module:model/ColumnSpecification
     * @param type {module:model/ColumnSpecification.TypeEnum} Data type of the column.
     */
    constructor(type) { 
        
        ColumnSpecification.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ColumnSpecification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColumnSpecification} obj Optional instance to populate.
     * @return {module:model/ColumnSpecification} The populated <code>ColumnSpecification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnSpecification();

            if (data.hasOwnProperty('enum')) {
                obj['enum'] = ApiClient.convertToType(data['enum'], [Object]);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('x-ms-isnullable')) {
                obj['x-ms-isnullable'] = ApiClient.convertToType(data['x-ms-isnullable'], 'Boolean');
            }
            if (data.hasOwnProperty('x-ms-isordered')) {
                obj['x-ms-isordered'] = ApiClient.convertToType(data['x-ms-isordered'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColumnSpecification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColumnSpecification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ColumnSpecification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['enum'])) {
            throw new Error("Expected the field `enum` to be an array in the JSON data but got " + data['enum']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ColumnSpecification.RequiredProperties = ["type"];

/**
 * If the data type is categorical, this provides the list of accepted categories.
 * @member {Array.<Object>} enum
 */
ColumnSpecification.prototype['enum'] = undefined;

/**
 * Additional format information for the data type.
 * @member {module:model/ColumnSpecification.FormatEnum} format
 */
ColumnSpecification.prototype['format'] = undefined;

/**
 * Data type of the column.
 * @member {module:model/ColumnSpecification.TypeEnum} type
 */
ColumnSpecification.prototype['type'] = undefined;

/**
 * Flag indicating if the type supports null values or not.
 * @member {Boolean} x-ms-isnullable
 */
ColumnSpecification.prototype['x-ms-isnullable'] = undefined;

/**
 * Flag indicating whether the categories are treated as an ordered set or not, if this is a categorical column.
 * @member {Boolean} x-ms-isordered
 */
ColumnSpecification.prototype['x-ms-isordered'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
ColumnSpecification['FormatEnum'] = {

    /**
     * value: "Byte"
     * @const
     */
    "Byte": "Byte",

    /**
     * value: "Char"
     * @const
     */
    "Char": "Char",

    /**
     * value: "Complex64"
     * @const
     */
    "Complex64": "Complex64",

    /**
     * value: "Complex128"
     * @const
     */
    "Complex128": "Complex128",

    /**
     * value: "Date-time"
     * @const
     */
    "Date-time": "Date-time",

    /**
     * value: "Date-timeOffset"
     * @const
     */
    "Date-timeOffset": "Date-timeOffset",

    /**
     * value: "Double"
     * @const
     */
    "Double": "Double",

    /**
     * value: "Duration"
     * @const
     */
    "Duration": "Duration",

    /**
     * value: "Float"
     * @const
     */
    "Float": "Float",

    /**
     * value: "Int8"
     * @const
     */
    "Int8": "Int8",

    /**
     * value: "Int16"
     * @const
     */
    "Int16": "Int16",

    /**
     * value: "Int32"
     * @const
     */
    "Int32": "Int32",

    /**
     * value: "Int64"
     * @const
     */
    "Int64": "Int64",

    /**
     * value: "Uint8"
     * @const
     */
    "Uint8": "Uint8",

    /**
     * value: "Uint16"
     * @const
     */
    "Uint16": "Uint16",

    /**
     * value: "Uint32"
     * @const
     */
    "Uint32": "Uint32",

    /**
     * value: "Uint64"
     * @const
     */
    "Uint64": "Uint64"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ColumnSpecification['TypeEnum'] = {

    /**
     * value: "Boolean"
     * @const
     */
    "Boolean": "Boolean",

    /**
     * value: "Integer"
     * @const
     */
    "Integer": "Integer",

    /**
     * value: "Number"
     * @const
     */
    "Number": "Number",

    /**
     * value: "String"
     * @const
     */
    "String": "String"
};



export default ColumnSpecification;

