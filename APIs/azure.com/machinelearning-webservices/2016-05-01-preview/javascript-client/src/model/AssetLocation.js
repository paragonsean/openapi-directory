/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetLocation model module.
 * @module model/AssetLocation
 * @version 2016-05-01-preview
 */
class AssetLocation {
    /**
     * Constructs a new <code>AssetLocation</code>.
     * Describes the access location for a web service asset.
     * @alias module:model/AssetLocation
     * @param uri {String} The URI where the asset is accessible from, (e.g. aml://abc for system assets or https://xyz for user assets
     */
    constructor(uri) { 
        
        AssetLocation.initialize(this, uri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, uri) { 
        obj['uri'] = uri;
    }

    /**
     * Constructs a <code>AssetLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetLocation} obj Optional instance to populate.
     * @return {module:model/AssetLocation} The populated <code>AssetLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetLocation();

            if (data.hasOwnProperty('credentials')) {
                obj['credentials'] = ApiClient.convertToType(data['credentials'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetLocation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetLocation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['credentials'] && !(typeof data['credentials'] === 'string' || data['credentials'] instanceof String)) {
            throw new Error("Expected the field `credentials` to be a primitive type in the JSON string but got " + data['credentials']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}

AssetLocation.RequiredProperties = ["uri"];

/**
 * Access credentials for the asset, if applicable (e.g. asset specified by storage account connection string + blob URI)
 * @member {String} credentials
 */
AssetLocation.prototype['credentials'] = undefined;

/**
 * The URI where the asset is accessible from, (e.g. aml://abc for system assets or https://xyz for user assets
 * @member {String} uri
 */
AssetLocation.prototype['uri'] = undefined;






export default AssetLocation;

