/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GraphNode model module.
 * @module model/GraphNode
 * @version 2016-05-01-preview
 */
class GraphNode {
    /**
     * Constructs a new <code>GraphNode</code>.
     * Specifies a node in the web service graph. The node can either be an input, output or asset node, so only one of the corresponding id properties is populated at any given time.
     * @alias module:model/GraphNode
     */
    constructor() { 
        
        GraphNode.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GraphNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GraphNode} obj Optional instance to populate.
     * @return {module:model/GraphNode} The populated <code>GraphNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GraphNode();

            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('inputId')) {
                obj['inputId'] = ApiClient.convertToType(data['inputId'], 'String');
            }
            if (data.hasOwnProperty('outputId')) {
                obj['outputId'] = ApiClient.convertToType(data['outputId'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GraphNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GraphNode</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        // ensure the json data is a string
        if (data['inputId'] && !(typeof data['inputId'] === 'string' || data['inputId'] instanceof String)) {
            throw new Error("Expected the field `inputId` to be a primitive type in the JSON string but got " + data['inputId']);
        }
        // ensure the json data is a string
        if (data['outputId'] && !(typeof data['outputId'] === 'string' || data['outputId'] instanceof String)) {
            throw new Error("Expected the field `outputId` to be a primitive type in the JSON string but got " + data['outputId']);
        }

        return true;
    }


}



/**
 * The id of the asset represented by this node.
 * @member {String} assetId
 */
GraphNode.prototype['assetId'] = undefined;

/**
 * The id of the input element represented by this node.
 * @member {String} inputId
 */
GraphNode.prototype['inputId'] = undefined;

/**
 * The id of the output element represented by this node.
 * @member {String} outputId
 */
GraphNode.prototype['outputId'] = undefined;

/**
 * If applicable, parameters of the node. Global graph parameters map into these, with values set at runtime.
 * @member {Object.<String, String>} parameters
 */
GraphNode.prototype['parameters'] = undefined;






export default GraphNode;

