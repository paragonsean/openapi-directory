/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetLocation from './AssetLocation';
import InputPort from './InputPort';
import ModuleAssetParameter from './ModuleAssetParameter';
import OutputPort from './OutputPort';

/**
 * The AssetItem model module.
 * @module model/AssetItem
 * @version 2016-05-01-preview
 */
class AssetItem {
    /**
     * Constructs a new <code>AssetItem</code>.
     * Information about an asset associated with the web service.
     * @alias module:model/AssetItem
     * @param locationInfo {module:model/AssetLocation} 
     * @param name {String} Asset's friendly name.
     * @param type {module:model/AssetItem.TypeEnum} Asset's type.
     */
    constructor(locationInfo, name, type) { 
        
        AssetItem.initialize(this, locationInfo, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, locationInfo, name, type) { 
        obj['locationInfo'] = locationInfo;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AssetItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetItem} obj Optional instance to populate.
     * @return {module:model/AssetItem} The populated <code>AssetItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('inputPorts')) {
                obj['inputPorts'] = ApiClient.convertToType(data['inputPorts'], {'String': InputPort});
            }
            if (data.hasOwnProperty('locationInfo')) {
                obj['locationInfo'] = AssetLocation.constructFromObject(data['locationInfo']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('outputPorts')) {
                obj['outputPorts'] = ApiClient.convertToType(data['outputPorts'], {'String': OutputPort});
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ModuleAssetParameter]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssetItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `locationInfo`
        if (data['locationInfo']) { // data not null
          AssetLocation.validateJSON(data['locationInfo']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ModuleAssetParameter.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AssetItem.RequiredProperties = ["locationInfo", "name", "type"];

/**
 * Asset's Id.
 * @member {String} id
 */
AssetItem.prototype['id'] = undefined;

/**
 * Information about the asset's input ports.
 * @member {Object.<String, module:model/InputPort>} inputPorts
 */
AssetItem.prototype['inputPorts'] = undefined;

/**
 * @member {module:model/AssetLocation} locationInfo
 */
AssetItem.prototype['locationInfo'] = undefined;

/**
 * If the asset is a custom module, this holds the module's metadata.
 * @member {Object.<String, String>} metadata
 */
AssetItem.prototype['metadata'] = undefined;

/**
 * Asset's friendly name.
 * @member {String} name
 */
AssetItem.prototype['name'] = undefined;

/**
 * Information about the asset's output ports.
 * @member {Object.<String, module:model/OutputPort>} outputPorts
 */
AssetItem.prototype['outputPorts'] = undefined;

/**
 * If the asset is a custom module, this holds the module's parameters.
 * @member {Array.<module:model/ModuleAssetParameter>} parameters
 */
AssetItem.prototype['parameters'] = undefined;

/**
 * Asset's type.
 * @member {module:model/AssetItem.TypeEnum} type
 */
AssetItem.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AssetItem['TypeEnum'] = {

    /**
     * value: "Module"
     * @const
     */
    "Module": "Module",

    /**
     * value: "Resource"
     * @const
     */
    "Resource": "Resource"
};



export default AssetItem;

