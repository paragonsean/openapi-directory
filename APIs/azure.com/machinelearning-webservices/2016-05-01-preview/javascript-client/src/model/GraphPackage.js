/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GraphEdge from './GraphEdge';
import GraphNode from './GraphNode';
import GraphParameter from './GraphParameter';

/**
 * The GraphPackage model module.
 * @module model/GraphPackage
 * @version 2016-05-01-preview
 */
class GraphPackage {
    /**
     * Constructs a new <code>GraphPackage</code>.
     * Defines the graph of modules making up the machine learning solution.
     * @alias module:model/GraphPackage
     */
    constructor() { 
        
        GraphPackage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GraphPackage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GraphPackage} obj Optional instance to populate.
     * @return {module:model/GraphPackage} The populated <code>GraphPackage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GraphPackage();

            if (data.hasOwnProperty('edges')) {
                obj['edges'] = ApiClient.convertToType(data['edges'], [GraphEdge]);
            }
            if (data.hasOwnProperty('graphParameters')) {
                obj['graphParameters'] = ApiClient.convertToType(data['graphParameters'], {'String': GraphParameter});
            }
            if (data.hasOwnProperty('nodes')) {
                obj['nodes'] = ApiClient.convertToType(data['nodes'], {'String': GraphNode});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GraphPackage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GraphPackage</code>.
     */
    static validateJSON(data) {
        if (data['edges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['edges'])) {
                throw new Error("Expected the field `edges` to be an array in the JSON data but got " + data['edges']);
            }
            // validate the optional field `edges` (array)
            for (const item of data['edges']) {
                GraphEdge.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of edges making up the graph.
 * @member {Array.<module:model/GraphEdge>} edges
 */
GraphPackage.prototype['edges'] = undefined;

/**
 * The collection of global parameters for the graph, given as a global parameter name to GraphParameter map. Each parameter here has a 1:1 match with the global parameters values map declared at the WebServiceProperties level.
 * @member {Object.<String, module:model/GraphParameter>} graphParameters
 */
GraphPackage.prototype['graphParameters'] = undefined;

/**
 * The set of nodes making up the graph, provided as a nodeId to GraphNode map
 * @member {Object.<String, module:model/GraphNode>} nodes
 */
GraphPackage.prototype['nodes'] = undefined;






export default GraphPackage;

