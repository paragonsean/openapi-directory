/**
 * Azure ML Web Services Management Client
 * These APIs allow end users to operate on Azure Machine Learning Web Services resources. They support the following operations:<ul><li>Create or update a web service</li><li>Get a web service</li><li>Patch a web service</li><li>Delete a web service</li><li>Get All Web Services in a Resource Group </li><li>Get All Web Services in a Subscription</li><li>Get Web Services Keys</li></ul>
 *
 * The version of the OpenAPI document: 2016-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GraphParameterLink from './GraphParameterLink';

/**
 * The GraphParameter model module.
 * @module model/GraphParameter
 * @version 2016-05-01-preview
 */
class GraphParameter {
    /**
     * Constructs a new <code>GraphParameter</code>.
     * Defines a global parameter in the graph.
     * @alias module:model/GraphParameter
     * @param links {Array.<module:model/GraphParameterLink>} Association links for this parameter to nodes in the graph.
     * @param type {module:model/GraphParameter.TypeEnum} Graph parameter's type.
     */
    constructor(links, type) { 
        
        GraphParameter.initialize(this, links, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, links, type) { 
        obj['links'] = links;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>GraphParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GraphParameter} obj Optional instance to populate.
     * @return {module:model/GraphParameter} The populated <code>GraphParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GraphParameter();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [GraphParameterLink]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GraphParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GraphParameter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GraphParameter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                GraphParameterLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

GraphParameter.RequiredProperties = ["links", "type"];

/**
 * Description of this graph parameter.
 * @member {String} description
 */
GraphParameter.prototype['description'] = undefined;

/**
 * Association links for this parameter to nodes in the graph.
 * @member {Array.<module:model/GraphParameterLink>} links
 */
GraphParameter.prototype['links'] = undefined;

/**
 * Graph parameter's type.
 * @member {module:model/GraphParameter.TypeEnum} type
 */
GraphParameter.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GraphParameter['TypeEnum'] = {

    /**
     * value: "String"
     * @const
     */
    "String": "String",

    /**
     * value: "Int"
     * @const
     */
    "Int": "Int",

    /**
     * value: "Float"
     * @const
     */
    "Float": "Float",

    /**
     * value: "Enumerated"
     * @const
     */
    "Enumerated": "Enumerated",

    /**
     * value: "Script"
     * @const
     */
    "Script": "Script",

    /**
     * value: "Mode"
     * @const
     */
    "Mode": "Mode",

    /**
     * value: "Credential"
     * @const
     */
    "Credential": "Credential",

    /**
     * value: "Boolean"
     * @const
     */
    "Boolean": "Boolean",

    /**
     * value: "Double"
     * @const
     */
    "Double": "Double",

    /**
     * value: "ColumnPicker"
     * @const
     */
    "ColumnPicker": "ColumnPicker",

    /**
     * value: "ParameterRange"
     * @const
     */
    "ParameterRange": "ParameterRange",

    /**
     * value: "DataGatewayName"
     * @const
     */
    "DataGatewayName": "DataGatewayName"
};



export default GraphParameter;

