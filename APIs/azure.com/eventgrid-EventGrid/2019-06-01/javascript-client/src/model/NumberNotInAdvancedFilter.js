/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvancedFilter from './AdvancedFilter';

/**
 * The NumberNotInAdvancedFilter model module.
 * @module model/NumberNotInAdvancedFilter
 * @version 2019-06-01
 */
class NumberNotInAdvancedFilter {
    /**
     * Constructs a new <code>NumberNotInAdvancedFilter</code>.
     * NumberNotIn Advanced Filter.
     * @alias module:model/NumberNotInAdvancedFilter
     * @extends module:model/AdvancedFilter
     * @implements module:model/AdvancedFilter
     * @param operatorType {module:model/NumberNotInAdvancedFilter.OperatorTypeEnum} The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
     */
    constructor(operatorType) { 
        AdvancedFilter.initialize(this, operatorType);
        NumberNotInAdvancedFilter.initialize(this, operatorType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operatorType) { 
    }

    /**
     * Constructs a <code>NumberNotInAdvancedFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NumberNotInAdvancedFilter} obj Optional instance to populate.
     * @return {module:model/NumberNotInAdvancedFilter} The populated <code>NumberNotInAdvancedFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NumberNotInAdvancedFilter();
            AdvancedFilter.constructFromObject(data, obj);
            AdvancedFilter.constructFromObject(data, obj);

            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NumberNotInAdvancedFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NumberNotInAdvancedFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NumberNotInAdvancedFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}

NumberNotInAdvancedFilter.RequiredProperties = ["operatorType"];

/**
 * The set of filter values.
 * @member {Array.<Number>} values
 */
NumberNotInAdvancedFilter.prototype['values'] = undefined;


// Implement AdvancedFilter interface:
/**
 * The field/property in the event based on which you want to filter.
 * @member {String} key
 */
AdvancedFilter.prototype['key'] = undefined;
/**
 * The operator type used for filtering, e.g., NumberIn, StringContains, BoolEquals and others.
 * @member {module:model/AdvancedFilter.OperatorTypeEnum} operatorType
 */
AdvancedFilter.prototype['operatorType'] = undefined;




export default NumberNotInAdvancedFilter;

