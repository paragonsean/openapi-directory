/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventTypeProperties model module.
 * @module model/EventTypeProperties
 * @version 2019-06-01
 */
class EventTypeProperties {
    /**
     * Constructs a new <code>EventTypeProperties</code>.
     * Properties of the event type
     * @alias module:model/EventTypeProperties
     */
    constructor() { 
        
        EventTypeProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventTypeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventTypeProperties} obj Optional instance to populate.
     * @return {module:model/EventTypeProperties} The populated <code>EventTypeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventTypeProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('isInDefaultSet')) {
                obj['isInDefaultSet'] = ApiClient.convertToType(data['isInDefaultSet'], 'Boolean');
            }
            if (data.hasOwnProperty('schemaUrl')) {
                obj['schemaUrl'] = ApiClient.convertToType(data['schemaUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventTypeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventTypeProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['schemaUrl'] && !(typeof data['schemaUrl'] === 'string' || data['schemaUrl'] instanceof String)) {
            throw new Error("Expected the field `schemaUrl` to be a primitive type in the JSON string but got " + data['schemaUrl']);
        }

        return true;
    }


}



/**
 * Description of the event type.
 * @member {String} description
 */
EventTypeProperties.prototype['description'] = undefined;

/**
 * Display name of the event type.
 * @member {String} displayName
 */
EventTypeProperties.prototype['displayName'] = undefined;

/**
 * IsInDefaultSet flag of the event type.
 * @member {Boolean} isInDefaultSet
 */
EventTypeProperties.prototype['isInDefaultSet'] = undefined;

/**
 * Url of the schema for this event type.
 * @member {String} schemaUrl
 */
EventTypeProperties.prototype['schemaUrl'] = undefined;






export default EventTypeProperties;

