/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EventTypesListResult;
import org.openapitools.client.model.Topic;
import org.openapitools.client.model.TopicRegenerateKeyRequest;
import org.openapitools.client.model.TopicSharedAccessKeys;
import org.openapitools.client.model.TopicUpdateParameters;
import org.openapitools.client.model.TopicsListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TopicsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for topicsCreateOrUpdate
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicInfo Topic information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, Topic topicInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicInfo;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, Topic topicInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'topicInfo' is set
        if (topicInfo == null) {
            throw new ApiException("Missing the required parameter 'topicInfo' when calling topicsCreateOrUpdate(Async)");
        }

        return topicsCreateOrUpdateCall(subscriptionId, resourceGroupName, topicName, apiVersion, topicInfo, _callback);

    }

    /**
     * Create a topic.
     * Asynchronously creates a new topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicInfo Topic information. (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Topic topicsCreateOrUpdate(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, Topic topicInfo) throws ApiException {
        ApiResponse<Topic> localVarResp = topicsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, topicName, apiVersion, topicInfo);
        return localVarResp.getData();
    }

    /**
     * Create a topic.
     * Asynchronously creates a new topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicInfo Topic information. (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Topic> topicsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, Topic topicInfo) throws ApiException {
        okhttp3.Call localVarCall = topicsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, topicInfo, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a topic. (asynchronously)
     * Asynchronously creates a new topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicInfo Topic information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, Topic topicInfo, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, topicInfo, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsDelete
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsDeleteCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsDelete(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsDelete(Async)");
        }

        return topicsDeleteCall(subscriptionId, resourceGroupName, topicName, apiVersion, _callback);

    }

    /**
     * Delete a topic.
     * Delete existing topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void topicsDelete(String subscriptionId, String resourceGroupName, String topicName, String apiVersion) throws ApiException {
        topicsDeleteWithHttpInfo(subscriptionId, resourceGroupName, topicName, apiVersion);
    }

    /**
     * Delete a topic.
     * Delete existing topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> topicsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String topicName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = topicsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a topic. (asynchronously)
     * Delete existing topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsDeleteAsync(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsGet
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsGetCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsGet(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsGet(Async)");
        }

        return topicsGetCall(subscriptionId, resourceGroupName, topicName, apiVersion, _callback);

    }

    /**
     * Get a topic.
     * Get properties of a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Topic topicsGet(String subscriptionId, String resourceGroupName, String topicName, String apiVersion) throws ApiException {
        ApiResponse<Topic> localVarResp = topicsGetWithHttpInfo(subscriptionId, resourceGroupName, topicName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a topic.
     * Get properties of a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Topic> topicsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String topicName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = topicsGetValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a topic. (asynchronously)
     * Get properties of a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsGetAsync(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsGetValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsListByResourceGroup
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsListByResourceGroup(Async)");
        }

        return topicsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, _callback);

    }

    /**
     * List topics under a resource group.
     * List all the topics under a resource group.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return TopicsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public TopicsListResult topicsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top) throws ApiException {
        ApiResponse<TopicsListResult> localVarResp = topicsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter, $top);
        return localVarResp.getData();
    }

    /**
     * List topics under a resource group.
     * List all the topics under a resource group.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return ApiResponse&lt;TopicsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicsListResult> topicsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = topicsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, null);
        Type localVarReturnType = new TypeToken<TopicsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List topics under a resource group. (asynchronously)
     * List all the topics under a resource group.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, final ApiCallback<TopicsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, _callback);
        Type localVarReturnType = new TypeToken<TopicsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsListBySubscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListBySubscriptionCall(String subscriptionId, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsListBySubscription(Async)");
        }

        return topicsListBySubscriptionCall(subscriptionId, apiVersion, $filter, $top, _callback);

    }

    /**
     * List topics under an Azure subscription.
     * List all the topics under an Azure subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return TopicsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public TopicsListResult topicsListBySubscription(String subscriptionId, String apiVersion, String $filter, Integer $top) throws ApiException {
        ApiResponse<TopicsListResult> localVarResp = topicsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, $filter, $top);
        return localVarResp.getData();
    }

    /**
     * List topics under an Azure subscription.
     * List all the topics under an Azure subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return ApiResponse&lt;TopicsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicsListResult> topicsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, String $filter, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = topicsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, null);
        Type localVarReturnType = new TypeToken<TopicsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List topics under an Azure subscription. (asynchronously)
     * List all the topics under an Azure subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListBySubscriptionAsync(String subscriptionId, String apiVersion, String $filter, Integer $top, final ApiCallback<TopicsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, _callback);
        Type localVarReturnType = new TypeToken<TopicsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsListEventTypes
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic. (required)
     * @param resourceTypeName Name of the topic type. (required)
     * @param resourceName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListEventTypesCall(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventTypes"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "providerNamespace" + "}", localVarApiClient.escapeString(providerNamespace.toString()))
            .replace("{" + "resourceTypeName" + "}", localVarApiClient.escapeString(resourceTypeName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsListEventTypesValidateBeforeCall(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsListEventTypes(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsListEventTypes(Async)");
        }

        // verify the required parameter 'providerNamespace' is set
        if (providerNamespace == null) {
            throw new ApiException("Missing the required parameter 'providerNamespace' when calling topicsListEventTypes(Async)");
        }

        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling topicsListEventTypes(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling topicsListEventTypes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsListEventTypes(Async)");
        }

        return topicsListEventTypesCall(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion, _callback);

    }

    /**
     * List topic event types.
     * List event types for a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic. (required)
     * @param resourceTypeName Name of the topic type. (required)
     * @param resourceName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventTypesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventTypesListResult topicsListEventTypes(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion) throws ApiException {
        ApiResponse<EventTypesListResult> localVarResp = topicsListEventTypesWithHttpInfo(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List topic event types.
     * List event types for a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic. (required)
     * @param resourceTypeName Name of the topic type. (required)
     * @param resourceName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventTypesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypesListResult> topicsListEventTypesWithHttpInfo(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = topicsListEventTypesValidateBeforeCall(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventTypesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List topic event types. (asynchronously)
     * List event types for a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic. (required)
     * @param resourceTypeName Name of the topic type. (required)
     * @param resourceName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListEventTypesAsync(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion, final ApiCallback<EventTypesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsListEventTypesValidateBeforeCall(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventTypesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsListSharedAccessKeys
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListSharedAccessKeysCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsListSharedAccessKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsListSharedAccessKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsListSharedAccessKeys(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsListSharedAccessKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsListSharedAccessKeys(Async)");
        }

        return topicsListSharedAccessKeysCall(subscriptionId, resourceGroupName, topicName, apiVersion, _callback);

    }

    /**
     * List keys for a topic.
     * List the two keys used to publish to a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return TopicSharedAccessKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public TopicSharedAccessKeys topicsListSharedAccessKeys(String subscriptionId, String resourceGroupName, String topicName, String apiVersion) throws ApiException {
        ApiResponse<TopicSharedAccessKeys> localVarResp = topicsListSharedAccessKeysWithHttpInfo(subscriptionId, resourceGroupName, topicName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List keys for a topic.
     * List the two keys used to publish to a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;TopicSharedAccessKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicSharedAccessKeys> topicsListSharedAccessKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String topicName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = topicsListSharedAccessKeysValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TopicSharedAccessKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List keys for a topic. (asynchronously)
     * List the two keys used to publish to a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsListSharedAccessKeysAsync(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, final ApiCallback<TopicSharedAccessKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsListSharedAccessKeysValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TopicSharedAccessKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsRegenerateKey
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsRegenerateKeyCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicRegenerateKeyRequest regenerateKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regenerateKeyRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}/regenerateKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsRegenerateKeyValidateBeforeCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicRegenerateKeyRequest regenerateKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsRegenerateKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsRegenerateKey(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsRegenerateKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsRegenerateKey(Async)");
        }

        // verify the required parameter 'regenerateKeyRequest' is set
        if (regenerateKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'regenerateKeyRequest' when calling topicsRegenerateKey(Async)");
        }

        return topicsRegenerateKeyCall(subscriptionId, resourceGroupName, topicName, apiVersion, regenerateKeyRequest, _callback);

    }

    /**
     * Regenerate key for a topic.
     * Regenerate a shared access key for a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @return TopicSharedAccessKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public TopicSharedAccessKeys topicsRegenerateKey(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicRegenerateKeyRequest regenerateKeyRequest) throws ApiException {
        ApiResponse<TopicSharedAccessKeys> localVarResp = topicsRegenerateKeyWithHttpInfo(subscriptionId, resourceGroupName, topicName, apiVersion, regenerateKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Regenerate key for a topic.
     * Regenerate a shared access key for a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @return ApiResponse&lt;TopicSharedAccessKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicSharedAccessKeys> topicsRegenerateKeyWithHttpInfo(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicRegenerateKeyRequest regenerateKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = topicsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, regenerateKeyRequest, null);
        Type localVarReturnType = new TypeToken<TopicSharedAccessKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate key for a topic. (asynchronously)
     * Regenerate a shared access key for a topic.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsRegenerateKeyAsync(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicRegenerateKeyRequest regenerateKeyRequest, final ApiCallback<TopicSharedAccessKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, regenerateKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicSharedAccessKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicsUpdate
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicUpdateParameters Topic update information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsUpdateCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicUpdateParameters topicUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "topicName" + "}", localVarApiClient.escapeString(topicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicUpdateParameters topicUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling topicsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling topicsUpdate(Async)");
        }

        // verify the required parameter 'topicName' is set
        if (topicName == null) {
            throw new ApiException("Missing the required parameter 'topicName' when calling topicsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicsUpdate(Async)");
        }

        // verify the required parameter 'topicUpdateParameters' is set
        if (topicUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'topicUpdateParameters' when calling topicsUpdate(Async)");
        }

        return topicsUpdateCall(subscriptionId, resourceGroupName, topicName, apiVersion, topicUpdateParameters, _callback);

    }

    /**
     * Update a topic.
     * Asynchronously updates a topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicUpdateParameters Topic update information. (required)
     * @return Topic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Topic topicsUpdate(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicUpdateParameters topicUpdateParameters) throws ApiException {
        ApiResponse<Topic> localVarResp = topicsUpdateWithHttpInfo(subscriptionId, resourceGroupName, topicName, apiVersion, topicUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update a topic.
     * Asynchronously updates a topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicUpdateParameters Topic update information. (required)
     * @return ApiResponse&lt;Topic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Topic> topicsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicUpdateParameters topicUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = topicsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, topicUpdateParameters, null);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a topic. (asynchronously)
     * Asynchronously updates a topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicName Name of the topic. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param topicUpdateParameters Topic update information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Topic update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicsUpdateAsync(String subscriptionId, String resourceGroupName, String topicName, String apiVersion, TopicUpdateParameters topicUpdateParameters, final ApiCallback<Topic> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, topicName, apiVersion, topicUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<Topic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
