/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryPolicy::OAIRetryPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryPolicy::OAIRetryPolicy() {
    this->initializeModel();
}

OAIRetryPolicy::~OAIRetryPolicy() {}

void OAIRetryPolicy::initializeModel() {

    m_event_time_to_live_in_minutes_isSet = false;
    m_event_time_to_live_in_minutes_isValid = false;

    m_max_delivery_attempts_isSet = false;
    m_max_delivery_attempts_isValid = false;
}

void OAIRetryPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryPolicy::fromJsonObject(QJsonObject json) {

    m_event_time_to_live_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_event_time_to_live_in_minutes, json[QString("eventTimeToLiveInMinutes")]);
    m_event_time_to_live_in_minutes_isSet = !json[QString("eventTimeToLiveInMinutes")].isNull() && m_event_time_to_live_in_minutes_isValid;

    m_max_delivery_attempts_isValid = ::OpenAPI::fromJsonValue(m_max_delivery_attempts, json[QString("maxDeliveryAttempts")]);
    m_max_delivery_attempts_isSet = !json[QString("maxDeliveryAttempts")].isNull() && m_max_delivery_attempts_isValid;
}

QString OAIRetryPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_event_time_to_live_in_minutes_isSet) {
        obj.insert(QString("eventTimeToLiveInMinutes"), ::OpenAPI::toJsonValue(m_event_time_to_live_in_minutes));
    }
    if (m_max_delivery_attempts_isSet) {
        obj.insert(QString("maxDeliveryAttempts"), ::OpenAPI::toJsonValue(m_max_delivery_attempts));
    }
    return obj;
}

qint32 OAIRetryPolicy::getEventTimeToLiveInMinutes() const {
    return m_event_time_to_live_in_minutes;
}
void OAIRetryPolicy::setEventTimeToLiveInMinutes(const qint32 &event_time_to_live_in_minutes) {
    m_event_time_to_live_in_minutes = event_time_to_live_in_minutes;
    m_event_time_to_live_in_minutes_isSet = true;
}

bool OAIRetryPolicy::is_event_time_to_live_in_minutes_Set() const{
    return m_event_time_to_live_in_minutes_isSet;
}

bool OAIRetryPolicy::is_event_time_to_live_in_minutes_Valid() const{
    return m_event_time_to_live_in_minutes_isValid;
}

qint32 OAIRetryPolicy::getMaxDeliveryAttempts() const {
    return m_max_delivery_attempts;
}
void OAIRetryPolicy::setMaxDeliveryAttempts(const qint32 &max_delivery_attempts) {
    m_max_delivery_attempts = max_delivery_attempts;
    m_max_delivery_attempts_isSet = true;
}

bool OAIRetryPolicy::is_max_delivery_attempts_Set() const{
    return m_max_delivery_attempts_isSet;
}

bool OAIRetryPolicy::is_max_delivery_attempts_Valid() const{
    return m_max_delivery_attempts_isValid;
}

bool OAIRetryPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_time_to_live_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_delivery_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
