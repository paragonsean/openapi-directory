/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscriptionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscriptionProperties::OAIEventSubscriptionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscriptionProperties::OAIEventSubscriptionProperties() {
    this->initializeModel();
}

OAIEventSubscriptionProperties::~OAIEventSubscriptionProperties() {}

void OAIEventSubscriptionProperties::initializeModel() {

    m_dead_letter_destination_isSet = false;
    m_dead_letter_destination_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_expiration_time_utc_isSet = false;
    m_expiration_time_utc_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIEventSubscriptionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscriptionProperties::fromJsonObject(QJsonObject json) {

    m_dead_letter_destination_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_destination, json[QString("deadLetterDestination")]);
    m_dead_letter_destination_isSet = !json[QString("deadLetterDestination")].isNull() && m_dead_letter_destination_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_expiration_time_utc_isValid = ::OpenAPI::fromJsonValue(m_expiration_time_utc, json[QString("expirationTimeUtc")]);
    m_expiration_time_utc_isSet = !json[QString("expirationTimeUtc")].isNull() && m_expiration_time_utc_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("retryPolicy")]);
    m_retry_policy_isSet = !json[QString("retryPolicy")].isNull() && m_retry_policy_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIEventSubscriptionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscriptionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_dead_letter_destination.isSet()) {
        obj.insert(QString("deadLetterDestination"), ::OpenAPI::toJsonValue(m_dead_letter_destination));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_expiration_time_utc_isSet) {
        obj.insert(QString("expirationTimeUtc"), ::OpenAPI::toJsonValue(m_expiration_time_utc));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("retryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

OAIDeadLetterDestination OAIEventSubscriptionProperties::getDeadLetterDestination() const {
    return m_dead_letter_destination;
}
void OAIEventSubscriptionProperties::setDeadLetterDestination(const OAIDeadLetterDestination &dead_letter_destination) {
    m_dead_letter_destination = dead_letter_destination;
    m_dead_letter_destination_isSet = true;
}

bool OAIEventSubscriptionProperties::is_dead_letter_destination_Set() const{
    return m_dead_letter_destination_isSet;
}

bool OAIEventSubscriptionProperties::is_dead_letter_destination_Valid() const{
    return m_dead_letter_destination_isValid;
}

OAIEventSubscriptionDestination OAIEventSubscriptionProperties::getDestination() const {
    return m_destination;
}
void OAIEventSubscriptionProperties::setDestination(const OAIEventSubscriptionDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIEventSubscriptionProperties::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIEventSubscriptionProperties::is_destination_Valid() const{
    return m_destination_isValid;
}

QDateTime OAIEventSubscriptionProperties::getExpirationTimeUtc() const {
    return m_expiration_time_utc;
}
void OAIEventSubscriptionProperties::setExpirationTimeUtc(const QDateTime &expiration_time_utc) {
    m_expiration_time_utc = expiration_time_utc;
    m_expiration_time_utc_isSet = true;
}

bool OAIEventSubscriptionProperties::is_expiration_time_utc_Set() const{
    return m_expiration_time_utc_isSet;
}

bool OAIEventSubscriptionProperties::is_expiration_time_utc_Valid() const{
    return m_expiration_time_utc_isValid;
}

OAIEventSubscriptionFilter OAIEventSubscriptionProperties::getFilter() const {
    return m_filter;
}
void OAIEventSubscriptionProperties::setFilter(const OAIEventSubscriptionFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIEventSubscriptionProperties::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIEventSubscriptionProperties::is_filter_Valid() const{
    return m_filter_isValid;
}

QList<QString> OAIEventSubscriptionProperties::getLabels() const {
    return m_labels;
}
void OAIEventSubscriptionProperties::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIEventSubscriptionProperties::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIEventSubscriptionProperties::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIEventSubscriptionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIEventSubscriptionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIEventSubscriptionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIEventSubscriptionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIRetryPolicy OAIEventSubscriptionProperties::getRetryPolicy() const {
    return m_retry_policy;
}
void OAIEventSubscriptionProperties::setRetryPolicy(const OAIRetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAIEventSubscriptionProperties::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAIEventSubscriptionProperties::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

QString OAIEventSubscriptionProperties::getTopic() const {
    return m_topic;
}
void OAIEventSubscriptionProperties::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIEventSubscriptionProperties::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIEventSubscriptionProperties::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIEventSubscriptionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dead_letter_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscriptionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
