/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainTopicsApi_H
#define OAI_OAIDomainTopicsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDomainTopic.h"
#include "OAIDomainTopicsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainTopicsApi : public QObject {
    Q_OBJECT

public:
    OAIDomainTopicsApi(const int timeOut = 0);
    ~OAIDomainTopicsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  domain_topic_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainTopicsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &domain_topic_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  domain_topic_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainTopicsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &domain_topic_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  domain_topic_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainTopicsGet(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &domain_topic_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void domainTopicsListByDomain(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void domainTopicsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void domainTopicsDeleteCallback(OAIHttpRequestWorker *worker);
    void domainTopicsGetCallback(OAIHttpRequestWorker *worker);
    void domainTopicsListByDomainCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void domainTopicsCreateOrUpdateSignal(OAIDomainTopic summary);
    void domainTopicsDeleteSignal();
    void domainTopicsGetSignal(OAIDomainTopic summary);
    void domainTopicsListByDomainSignal(OAIDomainTopicsListResult summary);


    void domainTopicsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDomainTopic summary);
    void domainTopicsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void domainTopicsGetSignalFull(OAIHttpRequestWorker *worker, OAIDomainTopic summary);
    void domainTopicsListByDomainSignalFull(OAIHttpRequestWorker *worker, OAIDomainTopicsListResult summary);

    Q_DECL_DEPRECATED_X("Use domainTopicsCreateOrUpdateSignalError() instead")
    void domainTopicsCreateOrUpdateSignalE(OAIDomainTopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsCreateOrUpdateSignalError(OAIDomainTopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainTopicsDeleteSignalError() instead")
    void domainTopicsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainTopicsGetSignalError() instead")
    void domainTopicsGetSignalE(OAIDomainTopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsGetSignalError(OAIDomainTopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainTopicsListByDomainSignalError() instead")
    void domainTopicsListByDomainSignalE(OAIDomainTopicsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsListByDomainSignalError(OAIDomainTopicsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use domainTopicsCreateOrUpdateSignalErrorFull() instead")
    void domainTopicsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainTopicsDeleteSignalErrorFull() instead")
    void domainTopicsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainTopicsGetSignalErrorFull() instead")
    void domainTopicsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainTopicsListByDomainSignalErrorFull() instead")
    void domainTopicsListByDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainTopicsListByDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
