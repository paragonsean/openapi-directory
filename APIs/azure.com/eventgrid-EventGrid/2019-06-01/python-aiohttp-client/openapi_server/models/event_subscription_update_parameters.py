# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dead_letter_destination import DeadLetterDestination
from openapi_server.models.event_subscription_destination import EventSubscriptionDestination
from openapi_server.models.event_subscription_filter import EventSubscriptionFilter
from openapi_server.models.retry_policy import RetryPolicy
from openapi_server import util


class EventSubscriptionUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dead_letter_destination: DeadLetterDestination=None, destination: EventSubscriptionDestination=None, expiration_time_utc: datetime=None, filter: EventSubscriptionFilter=None, labels: List[str]=None, retry_policy: RetryPolicy=None):
        """EventSubscriptionUpdateParameters - a model defined in OpenAPI

        :param dead_letter_destination: The dead_letter_destination of this EventSubscriptionUpdateParameters.
        :param destination: The destination of this EventSubscriptionUpdateParameters.
        :param expiration_time_utc: The expiration_time_utc of this EventSubscriptionUpdateParameters.
        :param filter: The filter of this EventSubscriptionUpdateParameters.
        :param labels: The labels of this EventSubscriptionUpdateParameters.
        :param retry_policy: The retry_policy of this EventSubscriptionUpdateParameters.
        """
        self.openapi_types = {
            'dead_letter_destination': DeadLetterDestination,
            'destination': EventSubscriptionDestination,
            'expiration_time_utc': datetime,
            'filter': EventSubscriptionFilter,
            'labels': List[str],
            'retry_policy': RetryPolicy
        }

        self.attribute_map = {
            'dead_letter_destination': 'deadLetterDestination',
            'destination': 'destination',
            'expiration_time_utc': 'expirationTimeUtc',
            'filter': 'filter',
            'labels': 'labels',
            'retry_policy': 'retryPolicy'
        }

        self._dead_letter_destination = dead_letter_destination
        self._destination = destination
        self._expiration_time_utc = expiration_time_utc
        self._filter = filter
        self._labels = labels
        self._retry_policy = retry_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscriptionUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscriptionUpdateParameters of this EventSubscriptionUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dead_letter_destination(self):
        """Gets the dead_letter_destination of this EventSubscriptionUpdateParameters.


        :return: The dead_letter_destination of this EventSubscriptionUpdateParameters.
        :rtype: DeadLetterDestination
        """
        return self._dead_letter_destination

    @dead_letter_destination.setter
    def dead_letter_destination(self, dead_letter_destination):
        """Sets the dead_letter_destination of this EventSubscriptionUpdateParameters.


        :param dead_letter_destination: The dead_letter_destination of this EventSubscriptionUpdateParameters.
        :type dead_letter_destination: DeadLetterDestination
        """

        self._dead_letter_destination = dead_letter_destination

    @property
    def destination(self):
        """Gets the destination of this EventSubscriptionUpdateParameters.


        :return: The destination of this EventSubscriptionUpdateParameters.
        :rtype: EventSubscriptionDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this EventSubscriptionUpdateParameters.


        :param destination: The destination of this EventSubscriptionUpdateParameters.
        :type destination: EventSubscriptionDestination
        """

        self._destination = destination

    @property
    def expiration_time_utc(self):
        """Gets the expiration_time_utc of this EventSubscriptionUpdateParameters.

        Information about the expiration time for the event subscription.

        :return: The expiration_time_utc of this EventSubscriptionUpdateParameters.
        :rtype: datetime
        """
        return self._expiration_time_utc

    @expiration_time_utc.setter
    def expiration_time_utc(self, expiration_time_utc):
        """Sets the expiration_time_utc of this EventSubscriptionUpdateParameters.

        Information about the expiration time for the event subscription.

        :param expiration_time_utc: The expiration_time_utc of this EventSubscriptionUpdateParameters.
        :type expiration_time_utc: datetime
        """

        self._expiration_time_utc = expiration_time_utc

    @property
    def filter(self):
        """Gets the filter of this EventSubscriptionUpdateParameters.


        :return: The filter of this EventSubscriptionUpdateParameters.
        :rtype: EventSubscriptionFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this EventSubscriptionUpdateParameters.


        :param filter: The filter of this EventSubscriptionUpdateParameters.
        :type filter: EventSubscriptionFilter
        """

        self._filter = filter

    @property
    def labels(self):
        """Gets the labels of this EventSubscriptionUpdateParameters.

        List of user defined labels.

        :return: The labels of this EventSubscriptionUpdateParameters.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EventSubscriptionUpdateParameters.

        List of user defined labels.

        :param labels: The labels of this EventSubscriptionUpdateParameters.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def retry_policy(self):
        """Gets the retry_policy of this EventSubscriptionUpdateParameters.


        :return: The retry_policy of this EventSubscriptionUpdateParameters.
        :rtype: RetryPolicy
        """
        return self._retry_policy

    @retry_policy.setter
    def retry_policy(self, retry_policy):
        """Sets the retry_policy of this EventSubscriptionUpdateParameters.


        :param retry_policy: The retry_policy of this EventSubscriptionUpdateParameters.
        :type retry_policy: RetryPolicy
        """

        self._retry_policy = retry_policy
