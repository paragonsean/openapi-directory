/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-09-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JsonField;
import org.openapitools.client.model.JsonFieldWithDefault;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:33.528203-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JsonInputSchemaMappingProperties {
  public static final String SERIALIZED_NAME_DATA_VERSION = "dataVersion";
  @SerializedName(SERIALIZED_NAME_DATA_VERSION)
  private JsonFieldWithDefault dataVersion;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private JsonField eventTime;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private JsonFieldWithDefault eventType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private JsonField id;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private JsonFieldWithDefault subject;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private JsonField topic;

  public JsonInputSchemaMappingProperties() {
  }

  public JsonInputSchemaMappingProperties dataVersion(JsonFieldWithDefault dataVersion) {
    this.dataVersion = dataVersion;
    return this;
  }

  /**
   * Get dataVersion
   * @return dataVersion
   */
  @javax.annotation.Nullable
  public JsonFieldWithDefault getDataVersion() {
    return dataVersion;
  }

  public void setDataVersion(JsonFieldWithDefault dataVersion) {
    this.dataVersion = dataVersion;
  }


  public JsonInputSchemaMappingProperties eventTime(JsonField eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * Get eventTime
   * @return eventTime
   */
  @javax.annotation.Nullable
  public JsonField getEventTime() {
    return eventTime;
  }

  public void setEventTime(JsonField eventTime) {
    this.eventTime = eventTime;
  }


  public JsonInputSchemaMappingProperties eventType(JsonFieldWithDefault eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public JsonFieldWithDefault getEventType() {
    return eventType;
  }

  public void setEventType(JsonFieldWithDefault eventType) {
    this.eventType = eventType;
  }


  public JsonInputSchemaMappingProperties id(JsonField id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public JsonField getId() {
    return id;
  }

  public void setId(JsonField id) {
    this.id = id;
  }


  public JsonInputSchemaMappingProperties subject(JsonFieldWithDefault subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public JsonFieldWithDefault getSubject() {
    return subject;
  }

  public void setSubject(JsonFieldWithDefault subject) {
    this.subject = subject;
  }


  public JsonInputSchemaMappingProperties topic(JsonField topic) {
    this.topic = topic;
    return this;
  }

  /**
   * Get topic
   * @return topic
   */
  @javax.annotation.Nullable
  public JsonField getTopic() {
    return topic;
  }

  public void setTopic(JsonField topic) {
    this.topic = topic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonInputSchemaMappingProperties jsonInputSchemaMappingProperties = (JsonInputSchemaMappingProperties) o;
    return Objects.equals(this.dataVersion, jsonInputSchemaMappingProperties.dataVersion) &&
        Objects.equals(this.eventTime, jsonInputSchemaMappingProperties.eventTime) &&
        Objects.equals(this.eventType, jsonInputSchemaMappingProperties.eventType) &&
        Objects.equals(this.id, jsonInputSchemaMappingProperties.id) &&
        Objects.equals(this.subject, jsonInputSchemaMappingProperties.subject) &&
        Objects.equals(this.topic, jsonInputSchemaMappingProperties.topic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataVersion, eventTime, eventType, id, subject, topic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonInputSchemaMappingProperties {\n");
    sb.append("    dataVersion: ").append(toIndentedString(dataVersion)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataVersion");
    openapiFields.add("eventTime");
    openapiFields.add("eventType");
    openapiFields.add("id");
    openapiFields.add("subject");
    openapiFields.add("topic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JsonInputSchemaMappingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JsonInputSchemaMappingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JsonInputSchemaMappingProperties is not found in the empty JSON string", JsonInputSchemaMappingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JsonInputSchemaMappingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JsonInputSchemaMappingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataVersion`
      if (jsonObj.get("dataVersion") != null && !jsonObj.get("dataVersion").isJsonNull()) {
        JsonFieldWithDefault.validateJsonElement(jsonObj.get("dataVersion"));
      }
      // validate the optional field `eventTime`
      if (jsonObj.get("eventTime") != null && !jsonObj.get("eventTime").isJsonNull()) {
        JsonField.validateJsonElement(jsonObj.get("eventTime"));
      }
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        JsonFieldWithDefault.validateJsonElement(jsonObj.get("eventType"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        JsonField.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `subject`
      if (jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) {
        JsonFieldWithDefault.validateJsonElement(jsonObj.get("subject"));
      }
      // validate the optional field `topic`
      if (jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) {
        JsonField.validateJsonElement(jsonObj.get("topic"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JsonInputSchemaMappingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JsonInputSchemaMappingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JsonInputSchemaMappingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JsonInputSchemaMappingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JsonInputSchemaMappingProperties>() {
           @Override
           public void write(JsonWriter out, JsonInputSchemaMappingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JsonInputSchemaMappingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JsonInputSchemaMappingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JsonInputSchemaMappingProperties
   * @throws IOException if the JSON string is invalid with respect to JsonInputSchemaMappingProperties
   */
  public static JsonInputSchemaMappingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JsonInputSchemaMappingProperties.class);
  }

  /**
   * Convert an instance of JsonInputSchemaMappingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

