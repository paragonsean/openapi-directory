/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-09-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an advanced filter that can be used to filter events based on various event envelope/data fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:33.528203-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdvancedFilter {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  /**
   * Represents the filter operator
   */
  @JsonAdapter(OperatorTypeEnum.Adapter.class)
  public enum OperatorTypeEnum {
    NUMBER_IN("NumberIn"),
    
    NUMBER_NOT_IN("NumberNotIn"),
    
    NUMBER_LESS_THAN("NumberLessThan"),
    
    NUMBER_GREATER_THAN("NumberGreaterThan"),
    
    NUMBER_LESS_THAN_OR_EQUALS("NumberLessThanOrEquals"),
    
    NUMBER_GREATER_THAN_OR_EQUALS("NumberGreaterThanOrEquals"),
    
    BOOL_EQUALS("BoolEquals"),
    
    STRING_IN("StringIn"),
    
    STRING_NOT_IN("StringNotIn"),
    
    STRING_BEGINS_WITH("StringBeginsWith"),
    
    STRING_ENDS_WITH("StringEndsWith"),
    
    STRING_CONTAINS("StringContains");

    private String value;

    OperatorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatorTypeEnum fromValue(String value) {
      for (OperatorTypeEnum b : OperatorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATOR_TYPE = "operatorType";
  @SerializedName(SERIALIZED_NAME_OPERATOR_TYPE)
  protected OperatorTypeEnum operatorType;

  public AdvancedFilter() {
  }

  public AdvancedFilter key(String key) {
    this.key = key;
    return this;
  }

  /**
   * The filter key. Represents an event property with up to two levels of nesting.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public AdvancedFilter operatorType(OperatorTypeEnum operatorType) {
    this.operatorType = operatorType;
    return this;
  }

  /**
   * Represents the filter operator
   * @return operatorType
   */
  @javax.annotation.Nonnull
  public OperatorTypeEnum getOperatorType() {
    return operatorType;
  }

  public void setOperatorType(OperatorTypeEnum operatorType) {
    this.operatorType = operatorType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdvancedFilter advancedFilter = (AdvancedFilter) o;
    return Objects.equals(this.key, advancedFilter.key) &&
        Objects.equals(this.operatorType, advancedFilter.operatorType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, operatorType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdvancedFilter {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    operatorType: ").append(toIndentedString(operatorType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key");
    openapiFields.add("operatorType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operatorType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdvancedFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdvancedFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdvancedFilter is not found in the empty JSON string", AdvancedFilter.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("operatorType").getAsString();
      switch (discriminatorValue) {
        case "BoolEqualsAdvancedFilter":
          BoolEqualsAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "NumberGreaterThanAdvancedFilter":
          NumberGreaterThanAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "NumberGreaterThanOrEqualsAdvancedFilter":
          NumberGreaterThanOrEqualsAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "NumberInAdvancedFilter":
          NumberInAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "NumberLessThanAdvancedFilter":
          NumberLessThanAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "NumberLessThanOrEqualsAdvancedFilter":
          NumberLessThanOrEqualsAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "NumberNotInAdvancedFilter":
          NumberNotInAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "StringBeginsWithAdvancedFilter":
          StringBeginsWithAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "StringContainsAdvancedFilter":
          StringContainsAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "StringEndsWithAdvancedFilter":
          StringEndsWithAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "StringInAdvancedFilter":
          StringInAdvancedFilter.validateJsonElement(jsonElement);
          break;
        case "StringNotInAdvancedFilter":
          StringNotInAdvancedFilter.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `operatorType` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of AdvancedFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdvancedFilter
   * @throws IOException if the JSON string is invalid with respect to AdvancedFilter
   */
  public static AdvancedFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdvancedFilter.class);
  }

  /**
   * Convert an instance of AdvancedFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

