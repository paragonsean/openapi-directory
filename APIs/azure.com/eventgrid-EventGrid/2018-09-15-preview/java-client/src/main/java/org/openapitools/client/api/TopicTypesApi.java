/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-09-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EventTypesListResult;
import org.openapitools.client.model.TopicTypeInfo;
import org.openapitools.client.model.TopicTypesListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicTypesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TopicTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for topicTypesGet
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicTypesGetCall(String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}"
            .replace("{" + "topicTypeName" + "}", localVarApiClient.escapeString(topicTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicTypesGetValidateBeforeCall(String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicTypeName' is set
        if (topicTypeName == null) {
            throw new ApiException("Missing the required parameter 'topicTypeName' when calling topicTypesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicTypesGet(Async)");
        }

        return topicTypesGetCall(topicTypeName, apiVersion, _callback);

    }

    /**
     * Get a topic type
     * Get information about a topic type
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return TopicTypeInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public TopicTypeInfo topicTypesGet(String topicTypeName, String apiVersion) throws ApiException {
        ApiResponse<TopicTypeInfo> localVarResp = topicTypesGetWithHttpInfo(topicTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a topic type
     * Get information about a topic type
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;TopicTypeInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicTypeInfo> topicTypesGetWithHttpInfo(String topicTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = topicTypesGetValidateBeforeCall(topicTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TopicTypeInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a topic type (asynchronously)
     * Get information about a topic type
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicTypesGetAsync(String topicTypeName, String apiVersion, final ApiCallback<TopicTypeInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicTypesGetValidateBeforeCall(topicTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TopicTypeInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicTypesList
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicTypesListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.EventGrid/topicTypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicTypesListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicTypesList(Async)");
        }

        return topicTypesListCall(apiVersion, _callback);

    }

    /**
     * List topic types
     * List all registered topic types
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return TopicTypesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public TopicTypesListResult topicTypesList(String apiVersion) throws ApiException {
        ApiResponse<TopicTypesListResult> localVarResp = topicTypesListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * List topic types
     * List all registered topic types
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;TopicTypesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicTypesListResult> topicTypesListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = topicTypesListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<TopicTypesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List topic types (asynchronously)
     * List all registered topic types
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicTypesListAsync(String apiVersion, final ApiCallback<TopicTypesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicTypesListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TopicTypesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicTypesListEventTypes
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicTypesListEventTypesCall(String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes"
            .replace("{" + "topicTypeName" + "}", localVarApiClient.escapeString(topicTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicTypesListEventTypesValidateBeforeCall(String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicTypeName' is set
        if (topicTypeName == null) {
            throw new ApiException("Missing the required parameter 'topicTypeName' when calling topicTypesListEventTypes(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling topicTypesListEventTypes(Async)");
        }

        return topicTypesListEventTypesCall(topicTypeName, apiVersion, _callback);

    }

    /**
     * List event types
     * List event types for a topic type
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventTypesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventTypesListResult topicTypesListEventTypes(String topicTypeName, String apiVersion) throws ApiException {
        ApiResponse<EventTypesListResult> localVarResp = topicTypesListEventTypesWithHttpInfo(topicTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List event types
     * List event types for a topic type
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventTypesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypesListResult> topicTypesListEventTypesWithHttpInfo(String topicTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = topicTypesListEventTypesValidateBeforeCall(topicTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventTypesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List event types (asynchronously)
     * List event types for a topic type
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicTypesListEventTypesAsync(String topicTypeName, String apiVersion, final ApiCallback<EventTypesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicTypesListEventTypesValidateBeforeCall(topicTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventTypesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
