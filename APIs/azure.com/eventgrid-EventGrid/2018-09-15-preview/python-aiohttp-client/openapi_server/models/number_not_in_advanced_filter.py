# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_filter import AdvancedFilter
from openapi_server import util


class NumberNotInAdvancedFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, values: List[float]=None, key: str=None, operator_type: str=None):
        """NumberNotInAdvancedFilter - a model defined in OpenAPI

        :param values: The values of this NumberNotInAdvancedFilter.
        :param key: The key of this NumberNotInAdvancedFilter.
        :param operator_type: The operator_type of this NumberNotInAdvancedFilter.
        """
        self.openapi_types = {
            'values': List[float],
            'key': str,
            'operator_type': str
        }

        self.attribute_map = {
            'values': 'values',
            'key': 'key',
            'operator_type': 'operatorType'
        }

        self._values = values
        self._key = key
        self._operator_type = operator_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NumberNotInAdvancedFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NumberNotInAdvancedFilter of this NumberNotInAdvancedFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def values(self):
        """Gets the values of this NumberNotInAdvancedFilter.

        The set of filter values

        :return: The values of this NumberNotInAdvancedFilter.
        :rtype: List[float]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this NumberNotInAdvancedFilter.

        The set of filter values

        :param values: The values of this NumberNotInAdvancedFilter.
        :type values: List[float]
        """

        self._values = values

    @property
    def key(self):
        """Gets the key of this NumberNotInAdvancedFilter.

        The filter key. Represents an event property with up to two levels of nesting.

        :return: The key of this NumberNotInAdvancedFilter.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NumberNotInAdvancedFilter.

        The filter key. Represents an event property with up to two levels of nesting.

        :param key: The key of this NumberNotInAdvancedFilter.
        :type key: str
        """

        self._key = key

    @property
    def operator_type(self):
        """Gets the operator_type of this NumberNotInAdvancedFilter.

        Represents the filter operator

        :return: The operator_type of this NumberNotInAdvancedFilter.
        :rtype: str
        """
        return self._operator_type

    @operator_type.setter
    def operator_type(self, operator_type):
        """Sets the operator_type of this NumberNotInAdvancedFilter.

        Represents the filter operator

        :param operator_type: The operator_type of this NumberNotInAdvancedFilter.
        :type operator_type: str
        """
        allowed_values = ["NumberIn", "NumberNotIn", "NumberLessThan", "NumberGreaterThan", "NumberLessThanOrEquals", "NumberGreaterThanOrEquals", "BoolEquals", "StringIn", "StringNotIn", "StringBeginsWith", "StringEndsWith", "StringContains"]  # noqa: E501
        if operator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operator_type` ({0}), must be one of {1}"
                .format(operator_type, allowed_values)
            )

        self._operator_type = operator_type
