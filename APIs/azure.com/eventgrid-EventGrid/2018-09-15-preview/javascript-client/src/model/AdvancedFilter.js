/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-09-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdvancedFilter model module.
 * @module model/AdvancedFilter
 * @version 2018-09-15-preview
 */
class AdvancedFilter {
    /**
     * Constructs a new <code>AdvancedFilter</code>.
     * Represents an advanced filter that can be used to filter events based on various event envelope/data fields.
     * @alias module:model/AdvancedFilter
     * @param operatorType {module:model/AdvancedFilter.OperatorTypeEnum} Represents the filter operator
     */
    constructor(operatorType) { 
        
        AdvancedFilter.initialize(this, operatorType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, operatorType) { 
        obj['operatorType'] = operatorType;
    }

    /**
     * Constructs a <code>AdvancedFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdvancedFilter} obj Optional instance to populate.
     * @return {module:model/AdvancedFilter} The populated <code>AdvancedFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdvancedFilter();

            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('operatorType')) {
                obj['operatorType'] = ApiClient.convertToType(data['operatorType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdvancedFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdvancedFilter</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdvancedFilter.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['operatorType'] && !(typeof data['operatorType'] === 'string' || data['operatorType'] instanceof String)) {
            throw new Error("Expected the field `operatorType` to be a primitive type in the JSON string but got " + data['operatorType']);
        }

        return true;
    }


}

AdvancedFilter.RequiredProperties = ["operatorType"];

/**
 * The filter key. Represents an event property with up to two levels of nesting.
 * @member {String} key
 */
AdvancedFilter.prototype['key'] = undefined;

/**
 * Represents the filter operator
 * @member {module:model/AdvancedFilter.OperatorTypeEnum} operatorType
 */
AdvancedFilter.prototype['operatorType'] = undefined;





/**
 * Allowed values for the <code>operatorType</code> property.
 * @enum {String}
 * @readonly
 */
AdvancedFilter['OperatorTypeEnum'] = {

    /**
     * value: "NumberIn"
     * @const
     */
    "NumberIn": "NumberIn",

    /**
     * value: "NumberNotIn"
     * @const
     */
    "NumberNotIn": "NumberNotIn",

    /**
     * value: "NumberLessThan"
     * @const
     */
    "NumberLessThan": "NumberLessThan",

    /**
     * value: "NumberGreaterThan"
     * @const
     */
    "NumberGreaterThan": "NumberGreaterThan",

    /**
     * value: "NumberLessThanOrEquals"
     * @const
     */
    "NumberLessThanOrEquals": "NumberLessThanOrEquals",

    /**
     * value: "NumberGreaterThanOrEquals"
     * @const
     */
    "NumberGreaterThanOrEquals": "NumberGreaterThanOrEquals",

    /**
     * value: "BoolEquals"
     * @const
     */
    "BoolEquals": "BoolEquals",

    /**
     * value: "StringIn"
     * @const
     */
    "StringIn": "StringIn",

    /**
     * value: "StringNotIn"
     * @const
     */
    "StringNotIn": "StringNotIn",

    /**
     * value: "StringBeginsWith"
     * @const
     */
    "StringBeginsWith": "StringBeginsWith",

    /**
     * value: "StringEndsWith"
     * @const
     */
    "StringEndsWith": "StringEndsWith",

    /**
     * value: "StringContains"
     * @const
     */
    "StringContains": "StringContains"
};



export default AdvancedFilter;

