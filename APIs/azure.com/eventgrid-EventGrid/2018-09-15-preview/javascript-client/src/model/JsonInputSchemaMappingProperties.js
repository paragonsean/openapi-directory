/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-09-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonField from './JsonField';
import JsonFieldWithDefault from './JsonFieldWithDefault';

/**
 * The JsonInputSchemaMappingProperties model module.
 * @module model/JsonInputSchemaMappingProperties
 * @version 2018-09-15-preview
 */
class JsonInputSchemaMappingProperties {
    /**
     * Constructs a new <code>JsonInputSchemaMappingProperties</code>.
     * This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
     * @alias module:model/JsonInputSchemaMappingProperties
     */
    constructor() { 
        
        JsonInputSchemaMappingProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonInputSchemaMappingProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonInputSchemaMappingProperties} obj Optional instance to populate.
     * @return {module:model/JsonInputSchemaMappingProperties} The populated <code>JsonInputSchemaMappingProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonInputSchemaMappingProperties();

            if (data.hasOwnProperty('dataVersion')) {
                obj['dataVersion'] = JsonFieldWithDefault.constructFromObject(data['dataVersion']);
            }
            if (data.hasOwnProperty('eventTime')) {
                obj['eventTime'] = JsonField.constructFromObject(data['eventTime']);
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = JsonFieldWithDefault.constructFromObject(data['eventType']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = JsonField.constructFromObject(data['id']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = JsonFieldWithDefault.constructFromObject(data['subject']);
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = JsonField.constructFromObject(data['topic']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonInputSchemaMappingProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonInputSchemaMappingProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataVersion`
        if (data['dataVersion']) { // data not null
          JsonFieldWithDefault.validateJSON(data['dataVersion']);
        }
        // validate the optional field `eventTime`
        if (data['eventTime']) { // data not null
          JsonField.validateJSON(data['eventTime']);
        }
        // validate the optional field `eventType`
        if (data['eventType']) { // data not null
          JsonFieldWithDefault.validateJSON(data['eventType']);
        }
        // validate the optional field `id`
        if (data['id']) { // data not null
          JsonField.validateJSON(data['id']);
        }
        // validate the optional field `subject`
        if (data['subject']) { // data not null
          JsonFieldWithDefault.validateJSON(data['subject']);
        }
        // validate the optional field `topic`
        if (data['topic']) { // data not null
          JsonField.validateJSON(data['topic']);
        }

        return true;
    }


}



/**
 * @member {module:model/JsonFieldWithDefault} dataVersion
 */
JsonInputSchemaMappingProperties.prototype['dataVersion'] = undefined;

/**
 * @member {module:model/JsonField} eventTime
 */
JsonInputSchemaMappingProperties.prototype['eventTime'] = undefined;

/**
 * @member {module:model/JsonFieldWithDefault} eventType
 */
JsonInputSchemaMappingProperties.prototype['eventType'] = undefined;

/**
 * @member {module:model/JsonField} id
 */
JsonInputSchemaMappingProperties.prototype['id'] = undefined;

/**
 * @member {module:model/JsonFieldWithDefault} subject
 */
JsonInputSchemaMappingProperties.prototype['subject'] = undefined;

/**
 * @member {module:model/JsonField} topic
 */
JsonInputSchemaMappingProperties.prototype['topic'] = undefined;






export default JsonInputSchemaMappingProperties;

