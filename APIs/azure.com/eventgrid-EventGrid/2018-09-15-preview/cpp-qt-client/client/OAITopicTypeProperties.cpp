/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-09-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicTypeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicTypeProperties::OAITopicTypeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicTypeProperties::OAITopicTypeProperties() {
    this->initializeModel();
}

OAITopicTypeProperties::~OAITopicTypeProperties() {}

void OAITopicTypeProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_region_type_isSet = false;
    m_resource_region_type_isValid = false;

    m_supported_locations_isSet = false;
    m_supported_locations_isValid = false;
}

void OAITopicTypeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicTypeProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_region_type_isValid = ::OpenAPI::fromJsonValue(m_resource_region_type, json[QString("resourceRegionType")]);
    m_resource_region_type_isSet = !json[QString("resourceRegionType")].isNull() && m_resource_region_type_isValid;

    m_supported_locations_isValid = ::OpenAPI::fromJsonValue(m_supported_locations, json[QString("supportedLocations")]);
    m_supported_locations_isSet = !json[QString("supportedLocations")].isNull() && m_supported_locations_isValid;
}

QString OAITopicTypeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicTypeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_region_type_isSet) {
        obj.insert(QString("resourceRegionType"), ::OpenAPI::toJsonValue(m_resource_region_type));
    }
    if (m_supported_locations.size() > 0) {
        obj.insert(QString("supportedLocations"), ::OpenAPI::toJsonValue(m_supported_locations));
    }
    return obj;
}

QString OAITopicTypeProperties::getDescription() const {
    return m_description;
}
void OAITopicTypeProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITopicTypeProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAITopicTypeProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITopicTypeProperties::getDisplayName() const {
    return m_display_name;
}
void OAITopicTypeProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITopicTypeProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITopicTypeProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITopicTypeProperties::getProvider() const {
    return m_provider;
}
void OAITopicTypeProperties::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAITopicTypeProperties::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAITopicTypeProperties::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAITopicTypeProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAITopicTypeProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAITopicTypeProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAITopicTypeProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAITopicTypeProperties::getResourceRegionType() const {
    return m_resource_region_type;
}
void OAITopicTypeProperties::setResourceRegionType(const QString &resource_region_type) {
    m_resource_region_type = resource_region_type;
    m_resource_region_type_isSet = true;
}

bool OAITopicTypeProperties::is_resource_region_type_Set() const{
    return m_resource_region_type_isSet;
}

bool OAITopicTypeProperties::is_resource_region_type_Valid() const{
    return m_resource_region_type_isValid;
}

QList<QString> OAITopicTypeProperties::getSupportedLocations() const {
    return m_supported_locations;
}
void OAITopicTypeProperties::setSupportedLocations(const QList<QString> &supported_locations) {
    m_supported_locations = supported_locations;
    m_supported_locations_isSet = true;
}

bool OAITopicTypeProperties::is_supported_locations_Set() const{
    return m_supported_locations_isSet;
}

bool OAITopicTypeProperties::is_supported_locations_Valid() const{
    return m_supported_locations_isValid;
}

bool OAITopicTypeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_region_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicTypeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
