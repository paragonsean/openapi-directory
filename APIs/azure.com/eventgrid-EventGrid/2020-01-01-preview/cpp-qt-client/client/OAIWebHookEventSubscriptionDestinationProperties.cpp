/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebHookEventSubscriptionDestinationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebHookEventSubscriptionDestinationProperties::OAIWebHookEventSubscriptionDestinationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebHookEventSubscriptionDestinationProperties::OAIWebHookEventSubscriptionDestinationProperties() {
    this->initializeModel();
}

OAIWebHookEventSubscriptionDestinationProperties::~OAIWebHookEventSubscriptionDestinationProperties() {}

void OAIWebHookEventSubscriptionDestinationProperties::initializeModel() {

    m_azure_active_directory_application_id_or_uri_isSet = false;
    m_azure_active_directory_application_id_or_uri_isValid = false;

    m_azure_active_directory_tenant_id_isSet = false;
    m_azure_active_directory_tenant_id_isValid = false;

    m_endpoint_base_url_isSet = false;
    m_endpoint_base_url_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_max_events_per_batch_isSet = false;
    m_max_events_per_batch_isValid = false;

    m_preferred_batch_size_in_kilobytes_isSet = false;
    m_preferred_batch_size_in_kilobytes_isValid = false;
}

void OAIWebHookEventSubscriptionDestinationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebHookEventSubscriptionDestinationProperties::fromJsonObject(QJsonObject json) {

    m_azure_active_directory_application_id_or_uri_isValid = ::OpenAPI::fromJsonValue(m_azure_active_directory_application_id_or_uri, json[QString("azureActiveDirectoryApplicationIdOrUri")]);
    m_azure_active_directory_application_id_or_uri_isSet = !json[QString("azureActiveDirectoryApplicationIdOrUri")].isNull() && m_azure_active_directory_application_id_or_uri_isValid;

    m_azure_active_directory_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_azure_active_directory_tenant_id, json[QString("azureActiveDirectoryTenantId")]);
    m_azure_active_directory_tenant_id_isSet = !json[QString("azureActiveDirectoryTenantId")].isNull() && m_azure_active_directory_tenant_id_isValid;

    m_endpoint_base_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_base_url, json[QString("endpointBaseUrl")]);
    m_endpoint_base_url_isSet = !json[QString("endpointBaseUrl")].isNull() && m_endpoint_base_url_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_max_events_per_batch_isValid = ::OpenAPI::fromJsonValue(m_max_events_per_batch, json[QString("maxEventsPerBatch")]);
    m_max_events_per_batch_isSet = !json[QString("maxEventsPerBatch")].isNull() && m_max_events_per_batch_isValid;

    m_preferred_batch_size_in_kilobytes_isValid = ::OpenAPI::fromJsonValue(m_preferred_batch_size_in_kilobytes, json[QString("preferredBatchSizeInKilobytes")]);
    m_preferred_batch_size_in_kilobytes_isSet = !json[QString("preferredBatchSizeInKilobytes")].isNull() && m_preferred_batch_size_in_kilobytes_isValid;
}

QString OAIWebHookEventSubscriptionDestinationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebHookEventSubscriptionDestinationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_active_directory_application_id_or_uri_isSet) {
        obj.insert(QString("azureActiveDirectoryApplicationIdOrUri"), ::OpenAPI::toJsonValue(m_azure_active_directory_application_id_or_uri));
    }
    if (m_azure_active_directory_tenant_id_isSet) {
        obj.insert(QString("azureActiveDirectoryTenantId"), ::OpenAPI::toJsonValue(m_azure_active_directory_tenant_id));
    }
    if (m_endpoint_base_url_isSet) {
        obj.insert(QString("endpointBaseUrl"), ::OpenAPI::toJsonValue(m_endpoint_base_url));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_max_events_per_batch_isSet) {
        obj.insert(QString("maxEventsPerBatch"), ::OpenAPI::toJsonValue(m_max_events_per_batch));
    }
    if (m_preferred_batch_size_in_kilobytes_isSet) {
        obj.insert(QString("preferredBatchSizeInKilobytes"), ::OpenAPI::toJsonValue(m_preferred_batch_size_in_kilobytes));
    }
    return obj;
}

QString OAIWebHookEventSubscriptionDestinationProperties::getAzureActiveDirectoryApplicationIdOrUri() const {
    return m_azure_active_directory_application_id_or_uri;
}
void OAIWebHookEventSubscriptionDestinationProperties::setAzureActiveDirectoryApplicationIdOrUri(const QString &azure_active_directory_application_id_or_uri) {
    m_azure_active_directory_application_id_or_uri = azure_active_directory_application_id_or_uri;
    m_azure_active_directory_application_id_or_uri_isSet = true;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_azure_active_directory_application_id_or_uri_Set() const{
    return m_azure_active_directory_application_id_or_uri_isSet;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_azure_active_directory_application_id_or_uri_Valid() const{
    return m_azure_active_directory_application_id_or_uri_isValid;
}

QString OAIWebHookEventSubscriptionDestinationProperties::getAzureActiveDirectoryTenantId() const {
    return m_azure_active_directory_tenant_id;
}
void OAIWebHookEventSubscriptionDestinationProperties::setAzureActiveDirectoryTenantId(const QString &azure_active_directory_tenant_id) {
    m_azure_active_directory_tenant_id = azure_active_directory_tenant_id;
    m_azure_active_directory_tenant_id_isSet = true;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_azure_active_directory_tenant_id_Set() const{
    return m_azure_active_directory_tenant_id_isSet;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_azure_active_directory_tenant_id_Valid() const{
    return m_azure_active_directory_tenant_id_isValid;
}

QString OAIWebHookEventSubscriptionDestinationProperties::getEndpointBaseUrl() const {
    return m_endpoint_base_url;
}
void OAIWebHookEventSubscriptionDestinationProperties::setEndpointBaseUrl(const QString &endpoint_base_url) {
    m_endpoint_base_url = endpoint_base_url;
    m_endpoint_base_url_isSet = true;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_endpoint_base_url_Set() const{
    return m_endpoint_base_url_isSet;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_endpoint_base_url_Valid() const{
    return m_endpoint_base_url_isValid;
}

QString OAIWebHookEventSubscriptionDestinationProperties::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIWebHookEventSubscriptionDestinationProperties::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

qint32 OAIWebHookEventSubscriptionDestinationProperties::getMaxEventsPerBatch() const {
    return m_max_events_per_batch;
}
void OAIWebHookEventSubscriptionDestinationProperties::setMaxEventsPerBatch(const qint32 &max_events_per_batch) {
    m_max_events_per_batch = max_events_per_batch;
    m_max_events_per_batch_isSet = true;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_max_events_per_batch_Set() const{
    return m_max_events_per_batch_isSet;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_max_events_per_batch_Valid() const{
    return m_max_events_per_batch_isValid;
}

qint32 OAIWebHookEventSubscriptionDestinationProperties::getPreferredBatchSizeInKilobytes() const {
    return m_preferred_batch_size_in_kilobytes;
}
void OAIWebHookEventSubscriptionDestinationProperties::setPreferredBatchSizeInKilobytes(const qint32 &preferred_batch_size_in_kilobytes) {
    m_preferred_batch_size_in_kilobytes = preferred_batch_size_in_kilobytes;
    m_preferred_batch_size_in_kilobytes_isSet = true;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_preferred_batch_size_in_kilobytes_Set() const{
    return m_preferred_batch_size_in_kilobytes_isSet;
}

bool OAIWebHookEventSubscriptionDestinationProperties::is_preferred_batch_size_in_kilobytes_Valid() const{
    return m_preferred_batch_size_in_kilobytes_isValid;
}

bool OAIWebHookEventSubscriptionDestinationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_active_directory_application_id_or_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_active_directory_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_events_per_batch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_batch_size_in_kilobytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebHookEventSubscriptionDestinationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
