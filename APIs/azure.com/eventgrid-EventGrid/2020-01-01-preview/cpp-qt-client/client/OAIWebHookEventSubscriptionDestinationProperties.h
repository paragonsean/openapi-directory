/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebHookEventSubscriptionDestinationProperties.h
 *
 * Information about the webhook destination properties for an event subscription.
 */

#ifndef OAIWebHookEventSubscriptionDestinationProperties_H
#define OAIWebHookEventSubscriptionDestinationProperties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIWebHookEventSubscriptionDestinationProperties : public OAIObject {
public:
    OAIWebHookEventSubscriptionDestinationProperties();
    OAIWebHookEventSubscriptionDestinationProperties(QString json);
    ~OAIWebHookEventSubscriptionDestinationProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAzureActiveDirectoryApplicationIdOrUri() const;
    void setAzureActiveDirectoryApplicationIdOrUri(const QString &azure_active_directory_application_id_or_uri);
    bool is_azure_active_directory_application_id_or_uri_Set() const;
    bool is_azure_active_directory_application_id_or_uri_Valid() const;

    QString getAzureActiveDirectoryTenantId() const;
    void setAzureActiveDirectoryTenantId(const QString &azure_active_directory_tenant_id);
    bool is_azure_active_directory_tenant_id_Set() const;
    bool is_azure_active_directory_tenant_id_Valid() const;

    QString getEndpointBaseUrl() const;
    void setEndpointBaseUrl(const QString &endpoint_base_url);
    bool is_endpoint_base_url_Set() const;
    bool is_endpoint_base_url_Valid() const;

    QString getEndpointUrl() const;
    void setEndpointUrl(const QString &endpoint_url);
    bool is_endpoint_url_Set() const;
    bool is_endpoint_url_Valid() const;

    qint32 getMaxEventsPerBatch() const;
    void setMaxEventsPerBatch(const qint32 &max_events_per_batch);
    bool is_max_events_per_batch_Set() const;
    bool is_max_events_per_batch_Valid() const;

    qint32 getPreferredBatchSizeInKilobytes() const;
    void setPreferredBatchSizeInKilobytes(const qint32 &preferred_batch_size_in_kilobytes);
    bool is_preferred_batch_size_in_kilobytes_Set() const;
    bool is_preferred_batch_size_in_kilobytes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_azure_active_directory_application_id_or_uri;
    bool m_azure_active_directory_application_id_or_uri_isSet;
    bool m_azure_active_directory_application_id_or_uri_isValid;

    QString m_azure_active_directory_tenant_id;
    bool m_azure_active_directory_tenant_id_isSet;
    bool m_azure_active_directory_tenant_id_isValid;

    QString m_endpoint_base_url;
    bool m_endpoint_base_url_isSet;
    bool m_endpoint_base_url_isValid;

    QString m_endpoint_url;
    bool m_endpoint_url_isSet;
    bool m_endpoint_url_isValid;

    qint32 m_max_events_per_batch;
    bool m_max_events_per_batch_isSet;
    bool m_max_events_per_batch_isValid;

    qint32 m_preferred_batch_size_in_kilobytes;
    bool m_preferred_batch_size_in_kilobytes_isSet;
    bool m_preferred_batch_size_in_kilobytes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebHookEventSubscriptionDestinationProperties)

#endif // OAIWebHookEventSubscriptionDestinationProperties_H
