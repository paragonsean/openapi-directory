/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeadLetterDestination from './DeadLetterDestination';
import EventSubscriptionDestination from './EventSubscriptionDestination';
import EventSubscriptionFilter from './EventSubscriptionFilter';
import RetryPolicy from './RetryPolicy';

/**
 * The EventSubscriptionProperties model module.
 * @module model/EventSubscriptionProperties
 * @version 2020-01-01-preview
 */
class EventSubscriptionProperties {
    /**
     * Constructs a new <code>EventSubscriptionProperties</code>.
     * Properties of the Event Subscription
     * @alias module:model/EventSubscriptionProperties
     */
    constructor() { 
        
        EventSubscriptionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventSubscriptionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSubscriptionProperties} obj Optional instance to populate.
     * @return {module:model/EventSubscriptionProperties} The populated <code>EventSubscriptionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSubscriptionProperties();

            if (data.hasOwnProperty('deadLetterDestination')) {
                obj['deadLetterDestination'] = DeadLetterDestination.constructFromObject(data['deadLetterDestination']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = EventSubscriptionDestination.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('eventDeliverySchema')) {
                obj['eventDeliverySchema'] = ApiClient.convertToType(data['eventDeliverySchema'], 'String');
            }
            if (data.hasOwnProperty('expirationTimeUtc')) {
                obj['expirationTimeUtc'] = ApiClient.convertToType(data['expirationTimeUtc'], 'Date');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = EventSubscriptionFilter.constructFromObject(data['filter']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('retryPolicy')) {
                obj['retryPolicy'] = RetryPolicy.constructFromObject(data['retryPolicy']);
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSubscriptionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSubscriptionProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deadLetterDestination`
        if (data['deadLetterDestination']) { // data not null
          DeadLetterDestination.validateJSON(data['deadLetterDestination']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          EventSubscriptionDestination.validateJSON(data['destination']);
        }
        // ensure the json data is a string
        if (data['eventDeliverySchema'] && !(typeof data['eventDeliverySchema'] === 'string' || data['eventDeliverySchema'] instanceof String)) {
            throw new Error("Expected the field `eventDeliverySchema` to be a primitive type in the JSON string but got " + data['eventDeliverySchema']);
        }
        // validate the optional field `filter`
        if (data['filter']) { // data not null
          EventSubscriptionFilter.validateJSON(data['filter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `retryPolicy`
        if (data['retryPolicy']) { // data not null
          RetryPolicy.validateJSON(data['retryPolicy']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}



/**
 * @member {module:model/DeadLetterDestination} deadLetterDestination
 */
EventSubscriptionProperties.prototype['deadLetterDestination'] = undefined;

/**
 * @member {module:model/EventSubscriptionDestination} destination
 */
EventSubscriptionProperties.prototype['destination'] = undefined;

/**
 * The event delivery schema for the event subscription.
 * @member {module:model/EventSubscriptionProperties.EventDeliverySchemaEnum} eventDeliverySchema
 */
EventSubscriptionProperties.prototype['eventDeliverySchema'] = undefined;

/**
 * Expiration time of the event subscription.
 * @member {Date} expirationTimeUtc
 */
EventSubscriptionProperties.prototype['expirationTimeUtc'] = undefined;

/**
 * @member {module:model/EventSubscriptionFilter} filter
 */
EventSubscriptionProperties.prototype['filter'] = undefined;

/**
 * List of user defined labels.
 * @member {Array.<String>} labels
 */
EventSubscriptionProperties.prototype['labels'] = undefined;

/**
 * Provisioning state of the event subscription.
 * @member {module:model/EventSubscriptionProperties.ProvisioningStateEnum} provisioningState
 */
EventSubscriptionProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/RetryPolicy} retryPolicy
 */
EventSubscriptionProperties.prototype['retryPolicy'] = undefined;

/**
 * Name of the topic of the event subscription.
 * @member {String} topic
 */
EventSubscriptionProperties.prototype['topic'] = undefined;





/**
 * Allowed values for the <code>eventDeliverySchema</code> property.
 * @enum {String}
 * @readonly
 */
EventSubscriptionProperties['EventDeliverySchemaEnum'] = {

    /**
     * value: "EventGridSchema"
     * @const
     */
    "EventGridSchema": "EventGridSchema",

    /**
     * value: "CustomInputSchema"
     * @const
     */
    "CustomInputSchema": "CustomInputSchema",

    /**
     * value: "CloudEventSchemaV1_0"
     * @const
     */
    "CloudEventSchemaV1_0": "CloudEventSchemaV1_0"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
EventSubscriptionProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "AwaitingManualAction"
     * @const
     */
    "AwaitingManualAction": "AwaitingManualAction"
};



export default EventSubscriptionProperties;

