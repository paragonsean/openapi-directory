/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputSchemaMapping from './InputSchemaMapping';

/**
 * The DomainProperties model module.
 * @module model/DomainProperties
 * @version 2020-01-01-preview
 */
class DomainProperties {
    /**
     * Constructs a new <code>DomainProperties</code>.
     * Properties of the Domain
     * @alias module:model/DomainProperties
     */
    constructor() { 
        
        DomainProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['inputSchema'] = 'EventGridSchema';
    }

    /**
     * Constructs a <code>DomainProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainProperties} obj Optional instance to populate.
     * @return {module:model/DomainProperties} The populated <code>DomainProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainProperties();

            if (data.hasOwnProperty('endpoint')) {
                obj['endpoint'] = ApiClient.convertToType(data['endpoint'], 'String');
            }
            if (data.hasOwnProperty('inputSchema')) {
                obj['inputSchema'] = ApiClient.convertToType(data['inputSchema'], 'String');
            }
            if (data.hasOwnProperty('inputSchemaMapping')) {
                obj['inputSchemaMapping'] = InputSchemaMapping.constructFromObject(data['inputSchemaMapping']);
            }
            if (data.hasOwnProperty('metricResourceId')) {
                obj['metricResourceId'] = ApiClient.convertToType(data['metricResourceId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['endpoint'] && !(typeof data['endpoint'] === 'string' || data['endpoint'] instanceof String)) {
            throw new Error("Expected the field `endpoint` to be a primitive type in the JSON string but got " + data['endpoint']);
        }
        // ensure the json data is a string
        if (data['inputSchema'] && !(typeof data['inputSchema'] === 'string' || data['inputSchema'] instanceof String)) {
            throw new Error("Expected the field `inputSchema` to be a primitive type in the JSON string but got " + data['inputSchema']);
        }
        // validate the optional field `inputSchemaMapping`
        if (data['inputSchemaMapping']) { // data not null
          InputSchemaMapping.validateJSON(data['inputSchemaMapping']);
        }
        // ensure the json data is a string
        if (data['metricResourceId'] && !(typeof data['metricResourceId'] === 'string' || data['metricResourceId'] instanceof String)) {
            throw new Error("Expected the field `metricResourceId` to be a primitive type in the JSON string but got " + data['metricResourceId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * Endpoint for the domain.
 * @member {String} endpoint
 */
DomainProperties.prototype['endpoint'] = undefined;

/**
 * This determines the format that Event Grid should expect for incoming events published to the domain.
 * @member {module:model/DomainProperties.InputSchemaEnum} inputSchema
 * @default 'EventGridSchema'
 */
DomainProperties.prototype['inputSchema'] = 'EventGridSchema';

/**
 * @member {module:model/InputSchemaMapping} inputSchemaMapping
 */
DomainProperties.prototype['inputSchemaMapping'] = undefined;

/**
 * Metric resource id for the domain.
 * @member {String} metricResourceId
 */
DomainProperties.prototype['metricResourceId'] = undefined;

/**
 * Provisioning state of the domain.
 * @member {module:model/DomainProperties.ProvisioningStateEnum} provisioningState
 */
DomainProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>inputSchema</code> property.
 * @enum {String}
 * @readonly
 */
DomainProperties['InputSchemaEnum'] = {

    /**
     * value: "EventGridSchema"
     * @const
     */
    "EventGridSchema": "EventGridSchema",

    /**
     * value: "CustomEventSchema"
     * @const
     */
    "CustomEventSchema": "CustomEventSchema",

    /**
     * value: "CloudEventSchemaV1_0"
     * @const
     */
    "CloudEventSchemaV1_0": "CloudEventSchemaV1_0"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
DomainProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default DomainProperties;

