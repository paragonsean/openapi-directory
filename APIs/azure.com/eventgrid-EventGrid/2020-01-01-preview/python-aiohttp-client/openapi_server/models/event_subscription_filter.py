# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advanced_filter import AdvancedFilter
from openapi_server import util


class EventSubscriptionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_filters: List[AdvancedFilter]=None, included_event_types: List[str]=None, is_subject_case_sensitive: bool=False, subject_begins_with: str=None, subject_ends_with: str=None):
        """EventSubscriptionFilter - a model defined in OpenAPI

        :param advanced_filters: The advanced_filters of this EventSubscriptionFilter.
        :param included_event_types: The included_event_types of this EventSubscriptionFilter.
        :param is_subject_case_sensitive: The is_subject_case_sensitive of this EventSubscriptionFilter.
        :param subject_begins_with: The subject_begins_with of this EventSubscriptionFilter.
        :param subject_ends_with: The subject_ends_with of this EventSubscriptionFilter.
        """
        self.openapi_types = {
            'advanced_filters': List[AdvancedFilter],
            'included_event_types': List[str],
            'is_subject_case_sensitive': bool,
            'subject_begins_with': str,
            'subject_ends_with': str
        }

        self.attribute_map = {
            'advanced_filters': 'advancedFilters',
            'included_event_types': 'includedEventTypes',
            'is_subject_case_sensitive': 'isSubjectCaseSensitive',
            'subject_begins_with': 'subjectBeginsWith',
            'subject_ends_with': 'subjectEndsWith'
        }

        self._advanced_filters = advanced_filters
        self._included_event_types = included_event_types
        self._is_subject_case_sensitive = is_subject_case_sensitive
        self._subject_begins_with = subject_begins_with
        self._subject_ends_with = subject_ends_with

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscriptionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscriptionFilter of this EventSubscriptionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_filters(self):
        """Gets the advanced_filters of this EventSubscriptionFilter.

        An array of advanced filters that are used for filtering event subscriptions.

        :return: The advanced_filters of this EventSubscriptionFilter.
        :rtype: List[AdvancedFilter]
        """
        return self._advanced_filters

    @advanced_filters.setter
    def advanced_filters(self, advanced_filters):
        """Sets the advanced_filters of this EventSubscriptionFilter.

        An array of advanced filters that are used for filtering event subscriptions.

        :param advanced_filters: The advanced_filters of this EventSubscriptionFilter.
        :type advanced_filters: List[AdvancedFilter]
        """

        self._advanced_filters = advanced_filters

    @property
    def included_event_types(self):
        """Gets the included_event_types of this EventSubscriptionFilter.

        A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.

        :return: The included_event_types of this EventSubscriptionFilter.
        :rtype: List[str]
        """
        return self._included_event_types

    @included_event_types.setter
    def included_event_types(self, included_event_types):
        """Sets the included_event_types of this EventSubscriptionFilter.

        A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.

        :param included_event_types: The included_event_types of this EventSubscriptionFilter.
        :type included_event_types: List[str]
        """

        self._included_event_types = included_event_types

    @property
    def is_subject_case_sensitive(self):
        """Gets the is_subject_case_sensitive of this EventSubscriptionFilter.

        Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter   should be compared in a case sensitive manner.

        :return: The is_subject_case_sensitive of this EventSubscriptionFilter.
        :rtype: bool
        """
        return self._is_subject_case_sensitive

    @is_subject_case_sensitive.setter
    def is_subject_case_sensitive(self, is_subject_case_sensitive):
        """Sets the is_subject_case_sensitive of this EventSubscriptionFilter.

        Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter   should be compared in a case sensitive manner.

        :param is_subject_case_sensitive: The is_subject_case_sensitive of this EventSubscriptionFilter.
        :type is_subject_case_sensitive: bool
        """

        self._is_subject_case_sensitive = is_subject_case_sensitive

    @property
    def subject_begins_with(self):
        """Gets the subject_begins_with of this EventSubscriptionFilter.

        An optional string to filter events for an event subscription based on a resource path prefix.  The format of this depends on the publisher of the events.   Wildcard characters are not supported in this path.

        :return: The subject_begins_with of this EventSubscriptionFilter.
        :rtype: str
        """
        return self._subject_begins_with

    @subject_begins_with.setter
    def subject_begins_with(self, subject_begins_with):
        """Sets the subject_begins_with of this EventSubscriptionFilter.

        An optional string to filter events for an event subscription based on a resource path prefix.  The format of this depends on the publisher of the events.   Wildcard characters are not supported in this path.

        :param subject_begins_with: The subject_begins_with of this EventSubscriptionFilter.
        :type subject_begins_with: str
        """

        self._subject_begins_with = subject_begins_with

    @property
    def subject_ends_with(self):
        """Gets the subject_ends_with of this EventSubscriptionFilter.

        An optional string to filter events for an event subscription based on a resource path suffix.  Wildcard characters are not supported in this path.

        :return: The subject_ends_with of this EventSubscriptionFilter.
        :rtype: str
        """
        return self._subject_ends_with

    @subject_ends_with.setter
    def subject_ends_with(self, subject_ends_with):
        """Sets the subject_ends_with of this EventSubscriptionFilter.

        An optional string to filter events for an event subscription based on a resource path suffix.  Wildcard characters are not supported in this path.

        :param subject_ends_with: The subject_ends_with of this EventSubscriptionFilter.
        :type subject_ends_with: str
        """

        self._subject_ends_with = subject_ends_with
