/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the webhook destination properties for an event subscription.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:32.213480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebHookEventSubscriptionDestinationProperties {
  public static final String SERIALIZED_NAME_AZURE_ACTIVE_DIRECTORY_APPLICATION_ID_OR_URI = "azureActiveDirectoryApplicationIdOrUri";
  @SerializedName(SERIALIZED_NAME_AZURE_ACTIVE_DIRECTORY_APPLICATION_ID_OR_URI)
  private String azureActiveDirectoryApplicationIdOrUri;

  public static final String SERIALIZED_NAME_AZURE_ACTIVE_DIRECTORY_TENANT_ID = "azureActiveDirectoryTenantId";
  @SerializedName(SERIALIZED_NAME_AZURE_ACTIVE_DIRECTORY_TENANT_ID)
  private String azureActiveDirectoryTenantId;

  public static final String SERIALIZED_NAME_ENDPOINT_BASE_URL = "endpointBaseUrl";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_BASE_URL)
  private String endpointBaseUrl;

  public static final String SERIALIZED_NAME_ENDPOINT_URL = "endpointUrl";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_URL)
  private String endpointUrl;

  public static final String SERIALIZED_NAME_MAX_EVENTS_PER_BATCH = "maxEventsPerBatch";
  @SerializedName(SERIALIZED_NAME_MAX_EVENTS_PER_BATCH)
  private Integer maxEventsPerBatch;

  public static final String SERIALIZED_NAME_PREFERRED_BATCH_SIZE_IN_KILOBYTES = "preferredBatchSizeInKilobytes";
  @SerializedName(SERIALIZED_NAME_PREFERRED_BATCH_SIZE_IN_KILOBYTES)
  private Integer preferredBatchSizeInKilobytes;

  public WebHookEventSubscriptionDestinationProperties() {
  }

  public WebHookEventSubscriptionDestinationProperties(
     String endpointBaseUrl
  ) {
    this();
    this.endpointBaseUrl = endpointBaseUrl;
  }

  public WebHookEventSubscriptionDestinationProperties azureActiveDirectoryApplicationIdOrUri(String azureActiveDirectoryApplicationIdOrUri) {
    this.azureActiveDirectoryApplicationIdOrUri = azureActiveDirectoryApplicationIdOrUri;
    return this;
  }

  /**
   * The Azure Active Directory Application ID or URI to get the access token that will be included as the bearer token in delivery requests.
   * @return azureActiveDirectoryApplicationIdOrUri
   */
  @javax.annotation.Nullable
  public String getAzureActiveDirectoryApplicationIdOrUri() {
    return azureActiveDirectoryApplicationIdOrUri;
  }

  public void setAzureActiveDirectoryApplicationIdOrUri(String azureActiveDirectoryApplicationIdOrUri) {
    this.azureActiveDirectoryApplicationIdOrUri = azureActiveDirectoryApplicationIdOrUri;
  }


  public WebHookEventSubscriptionDestinationProperties azureActiveDirectoryTenantId(String azureActiveDirectoryTenantId) {
    this.azureActiveDirectoryTenantId = azureActiveDirectoryTenantId;
    return this;
  }

  /**
   * The Azure Active Directory Tenant ID to get the access token that will be included as the bearer token in delivery requests.
   * @return azureActiveDirectoryTenantId
   */
  @javax.annotation.Nullable
  public String getAzureActiveDirectoryTenantId() {
    return azureActiveDirectoryTenantId;
  }

  public void setAzureActiveDirectoryTenantId(String azureActiveDirectoryTenantId) {
    this.azureActiveDirectoryTenantId = azureActiveDirectoryTenantId;
  }


  /**
   * The base URL that represents the endpoint of the destination of an event subscription.
   * @return endpointBaseUrl
   */
  @javax.annotation.Nullable
  public String getEndpointBaseUrl() {
    return endpointBaseUrl;
  }



  public WebHookEventSubscriptionDestinationProperties endpointUrl(String endpointUrl) {
    this.endpointUrl = endpointUrl;
    return this;
  }

  /**
   * The URL that represents the endpoint of the destination of an event subscription.
   * @return endpointUrl
   */
  @javax.annotation.Nullable
  public String getEndpointUrl() {
    return endpointUrl;
  }

  public void setEndpointUrl(String endpointUrl) {
    this.endpointUrl = endpointUrl;
  }


  public WebHookEventSubscriptionDestinationProperties maxEventsPerBatch(Integer maxEventsPerBatch) {
    this.maxEventsPerBatch = maxEventsPerBatch;
    return this;
  }

  /**
   * Maximum number of events per batch.
   * @return maxEventsPerBatch
   */
  @javax.annotation.Nullable
  public Integer getMaxEventsPerBatch() {
    return maxEventsPerBatch;
  }

  public void setMaxEventsPerBatch(Integer maxEventsPerBatch) {
    this.maxEventsPerBatch = maxEventsPerBatch;
  }


  public WebHookEventSubscriptionDestinationProperties preferredBatchSizeInKilobytes(Integer preferredBatchSizeInKilobytes) {
    this.preferredBatchSizeInKilobytes = preferredBatchSizeInKilobytes;
    return this;
  }

  /**
   * Preferred batch size in Kilobytes.
   * @return preferredBatchSizeInKilobytes
   */
  @javax.annotation.Nullable
  public Integer getPreferredBatchSizeInKilobytes() {
    return preferredBatchSizeInKilobytes;
  }

  public void setPreferredBatchSizeInKilobytes(Integer preferredBatchSizeInKilobytes) {
    this.preferredBatchSizeInKilobytes = preferredBatchSizeInKilobytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebHookEventSubscriptionDestinationProperties webHookEventSubscriptionDestinationProperties = (WebHookEventSubscriptionDestinationProperties) o;
    return Objects.equals(this.azureActiveDirectoryApplicationIdOrUri, webHookEventSubscriptionDestinationProperties.azureActiveDirectoryApplicationIdOrUri) &&
        Objects.equals(this.azureActiveDirectoryTenantId, webHookEventSubscriptionDestinationProperties.azureActiveDirectoryTenantId) &&
        Objects.equals(this.endpointBaseUrl, webHookEventSubscriptionDestinationProperties.endpointBaseUrl) &&
        Objects.equals(this.endpointUrl, webHookEventSubscriptionDestinationProperties.endpointUrl) &&
        Objects.equals(this.maxEventsPerBatch, webHookEventSubscriptionDestinationProperties.maxEventsPerBatch) &&
        Objects.equals(this.preferredBatchSizeInKilobytes, webHookEventSubscriptionDestinationProperties.preferredBatchSizeInKilobytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureActiveDirectoryApplicationIdOrUri, azureActiveDirectoryTenantId, endpointBaseUrl, endpointUrl, maxEventsPerBatch, preferredBatchSizeInKilobytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebHookEventSubscriptionDestinationProperties {\n");
    sb.append("    azureActiveDirectoryApplicationIdOrUri: ").append(toIndentedString(azureActiveDirectoryApplicationIdOrUri)).append("\n");
    sb.append("    azureActiveDirectoryTenantId: ").append(toIndentedString(azureActiveDirectoryTenantId)).append("\n");
    sb.append("    endpointBaseUrl: ").append(toIndentedString(endpointBaseUrl)).append("\n");
    sb.append("    endpointUrl: ").append(toIndentedString(endpointUrl)).append("\n");
    sb.append("    maxEventsPerBatch: ").append(toIndentedString(maxEventsPerBatch)).append("\n");
    sb.append("    preferredBatchSizeInKilobytes: ").append(toIndentedString(preferredBatchSizeInKilobytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureActiveDirectoryApplicationIdOrUri");
    openapiFields.add("azureActiveDirectoryTenantId");
    openapiFields.add("endpointBaseUrl");
    openapiFields.add("endpointUrl");
    openapiFields.add("maxEventsPerBatch");
    openapiFields.add("preferredBatchSizeInKilobytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebHookEventSubscriptionDestinationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebHookEventSubscriptionDestinationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebHookEventSubscriptionDestinationProperties is not found in the empty JSON string", WebHookEventSubscriptionDestinationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebHookEventSubscriptionDestinationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebHookEventSubscriptionDestinationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("azureActiveDirectoryApplicationIdOrUri") != null && !jsonObj.get("azureActiveDirectoryApplicationIdOrUri").isJsonNull()) && !jsonObj.get("azureActiveDirectoryApplicationIdOrUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureActiveDirectoryApplicationIdOrUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureActiveDirectoryApplicationIdOrUri").toString()));
      }
      if ((jsonObj.get("azureActiveDirectoryTenantId") != null && !jsonObj.get("azureActiveDirectoryTenantId").isJsonNull()) && !jsonObj.get("azureActiveDirectoryTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureActiveDirectoryTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureActiveDirectoryTenantId").toString()));
      }
      if ((jsonObj.get("endpointBaseUrl") != null && !jsonObj.get("endpointBaseUrl").isJsonNull()) && !jsonObj.get("endpointBaseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointBaseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointBaseUrl").toString()));
      }
      if ((jsonObj.get("endpointUrl") != null && !jsonObj.get("endpointUrl").isJsonNull()) && !jsonObj.get("endpointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpointUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebHookEventSubscriptionDestinationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebHookEventSubscriptionDestinationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebHookEventSubscriptionDestinationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebHookEventSubscriptionDestinationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WebHookEventSubscriptionDestinationProperties>() {
           @Override
           public void write(JsonWriter out, WebHookEventSubscriptionDestinationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebHookEventSubscriptionDestinationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebHookEventSubscriptionDestinationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebHookEventSubscriptionDestinationProperties
   * @throws IOException if the JSON string is invalid with respect to WebHookEventSubscriptionDestinationProperties
   */
  public static WebHookEventSubscriptionDestinationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebHookEventSubscriptionDestinationProperties.class);
  }

  /**
   * Convert an instance of WebHookEventSubscriptionDestinationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

