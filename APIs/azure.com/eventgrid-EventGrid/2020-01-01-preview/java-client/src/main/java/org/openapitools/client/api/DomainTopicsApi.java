/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DomainTopic;
import org.openapitools.client.model.DomainTopicsListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainTopicsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainTopicsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainTopicsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainTopicsCreateOrUpdate
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "domainTopicName" + "}", localVarApiClient.escapeString(domainTopicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainTopicsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainTopicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainTopicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainTopicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'domainTopicName' is set
        if (domainTopicName == null) {
            throw new ApiException("Missing the required parameter 'domainTopicName' when calling domainTopicsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainTopicsCreateOrUpdate(Async)");
        }

        return domainTopicsCreateOrUpdateCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, _callback);

    }

    /**
     * Create or update a domain topic
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return DomainTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public DomainTopic domainTopicsCreateOrUpdate(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion) throws ApiException {
        ApiResponse<DomainTopic> localVarResp = domainTopicsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Create or update a domain topic
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;DomainTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainTopic> domainTopicsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainTopicsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DomainTopic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a domain topic (asynchronously)
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback<DomainTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainTopicsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DomainTopic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainTopicsDelete
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsDeleteCall(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "domainTopicName" + "}", localVarApiClient.escapeString(domainTopicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainTopicsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainTopicsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainTopicsDelete(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainTopicsDelete(Async)");
        }

        // verify the required parameter 'domainTopicName' is set
        if (domainTopicName == null) {
            throw new ApiException("Missing the required parameter 'domainTopicName' when calling domainTopicsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainTopicsDelete(Async)");
        }

        return domainTopicsDeleteCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, _callback);

    }

    /**
     * Delete a domain topic
     * Delete existing domain topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void domainTopicsDelete(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion) throws ApiException {
        domainTopicsDeleteWithHttpInfo(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion);
    }

    /**
     * Delete a domain topic
     * Delete existing domain topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> domainTopicsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainTopicsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a domain topic (asynchronously)
     * Delete existing domain topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the domain topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsDeleteAsync(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainTopicsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainTopicsGet
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsGetCall(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "domainTopicName" + "}", localVarApiClient.escapeString(domainTopicName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainTopicsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainTopicsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainTopicsGet(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainTopicsGet(Async)");
        }

        // verify the required parameter 'domainTopicName' is set
        if (domainTopicName == null) {
            throw new ApiException("Missing the required parameter 'domainTopicName' when calling domainTopicsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainTopicsGet(Async)");
        }

        return domainTopicsGetCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, _callback);

    }

    /**
     * Get a domain topic
     * Get properties of a domain topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return DomainTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public DomainTopic domainTopicsGet(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion) throws ApiException {
        ApiResponse<DomainTopic> localVarResp = domainTopicsGetWithHttpInfo(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a domain topic
     * Get properties of a domain topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;DomainTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainTopic> domainTopicsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainTopicsGetValidateBeforeCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DomainTopic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a domain topic (asynchronously)
     * Get properties of a domain topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain (required)
     * @param domainTopicName Name of the topic (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsGetAsync(String subscriptionId, String resourceGroupName, String domainName, String domainTopicName, String apiVersion, final ApiCallback<DomainTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainTopicsGetValidateBeforeCall(subscriptionId, resourceGroupName, domainName, domainTopicName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DomainTopic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainTopicsListByDomain
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Domain name. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsListByDomainCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainTopicsListByDomainValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainTopicsListByDomain(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainTopicsListByDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainTopicsListByDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainTopicsListByDomain(Async)");
        }

        return domainTopicsListByDomainCall(subscriptionId, resourceGroupName, domainName, apiVersion, $filter, $top, _callback);

    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Domain name. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return DomainTopicsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public DomainTopicsListResult domainTopicsListByDomain(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, String $filter, Integer $top) throws ApiException {
        ApiResponse<DomainTopicsListResult> localVarResp = domainTopicsListByDomainWithHttpInfo(subscriptionId, resourceGroupName, domainName, apiVersion, $filter, $top);
        return localVarResp.getData();
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Domain name. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return ApiResponse&lt;DomainTopicsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainTopicsListResult> domainTopicsListByDomainWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, String $filter, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = domainTopicsListByDomainValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, $filter, $top, null);
        Type localVarReturnType = new TypeToken<DomainTopicsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List domain topics. (asynchronously)
     * List all the topics in a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Domain name. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainTopicsListByDomainAsync(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, String $filter, Integer $top, final ApiCallback<DomainTopicsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainTopicsListByDomainValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, $filter, $top, _callback);
        Type localVarReturnType = new TypeToken<DomainTopicsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
