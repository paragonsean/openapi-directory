# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_info import OperationInfo
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display: OperationInfo=None, name: str=None, origin: str=None, properties: object=None):
        """Operation - a model defined in OpenAPI

        :param display: The display of this Operation.
        :param name: The name of this Operation.
        :param origin: The origin of this Operation.
        :param properties: The properties of this Operation.
        """
        self.openapi_types = {
            'display': OperationInfo,
            'name': str,
            'origin': str,
            'properties': object
        }

        self.attribute_map = {
            'display': 'display',
            'name': 'name',
            'origin': 'origin',
            'properties': 'properties'
        }

        self._display = display
        self._name = name
        self._origin = origin
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display(self):
        """Gets the display of this Operation.


        :return: The display of this Operation.
        :rtype: OperationInfo
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this Operation.


        :param display: The display of this Operation.
        :type display: OperationInfo
        """

        self._display = display

    @property
    def name(self):
        """Gets the name of this Operation.

        Name of the operation

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operation.

        Name of the operation

        :param name: The name of this Operation.
        :type name: str
        """

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this Operation.

        Origin of the operation

        :return: The origin of this Operation.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this Operation.

        Origin of the operation

        :param origin: The origin of this Operation.
        :type origin: str
        """
        allowed_values = ["User", "System", "UserAndSystem"]  # noqa: E501
        if origin not in allowed_values:
            raise ValueError(
                "Invalid value for `origin` ({0}), must be one of {1}"
                .format(origin, allowed_values)
            )

        self._origin = origin

    @property
    def properties(self):
        """Gets the properties of this Operation.

        Properties of the operation

        :return: The properties of this Operation.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Operation.

        Properties of the operation

        :param properties: The properties of this Operation.
        :type properties: object
        """

        self._properties = properties
