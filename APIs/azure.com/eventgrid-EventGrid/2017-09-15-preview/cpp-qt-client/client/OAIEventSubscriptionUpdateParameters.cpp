/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2017-09-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscriptionUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscriptionUpdateParameters::OAIEventSubscriptionUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscriptionUpdateParameters::OAIEventSubscriptionUpdateParameters() {
    this->initializeModel();
}

OAIEventSubscriptionUpdateParameters::~OAIEventSubscriptionUpdateParameters() {}

void OAIEventSubscriptionUpdateParameters::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;
}

void OAIEventSubscriptionUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscriptionUpdateParameters::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;
}

QString OAIEventSubscriptionUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscriptionUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    return obj;
}

OAIEventSubscriptionDestination OAIEventSubscriptionUpdateParameters::getDestination() const {
    return m_destination;
}
void OAIEventSubscriptionUpdateParameters::setDestination(const OAIEventSubscriptionDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIEventSubscriptionUpdateParameters::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIEventSubscriptionUpdateParameters::is_destination_Valid() const{
    return m_destination_isValid;
}

OAIEventSubscriptionFilter OAIEventSubscriptionUpdateParameters::getFilter() const {
    return m_filter;
}
void OAIEventSubscriptionUpdateParameters::setFilter(const OAIEventSubscriptionFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIEventSubscriptionUpdateParameters::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIEventSubscriptionUpdateParameters::is_filter_Valid() const{
    return m_filter_isValid;
}

QList<QString> OAIEventSubscriptionUpdateParameters::getLabels() const {
    return m_labels;
}
void OAIEventSubscriptionUpdateParameters::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIEventSubscriptionUpdateParameters::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIEventSubscriptionUpdateParameters::is_labels_Valid() const{
    return m_labels_isValid;
}

bool OAIEventSubscriptionUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscriptionUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
