/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventSubscription from '../model/EventSubscription';
import EventSubscriptionFullUrl from '../model/EventSubscriptionFullUrl';
import EventSubscriptionUpdateParameters from '../model/EventSubscriptionUpdateParameters';
import EventSubscriptionsListResult from '../model/EventSubscriptionsListResult';

/**
* EventSubscriptions service.
* @module api/EventSubscriptionsApi
* @version 2018-05-01-preview
*/
export default class EventSubscriptionsApi {

    /**
    * Constructs a new EventSubscriptionsApi. 
    * @alias module:api/EventSubscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the eventSubscriptionsCreateOrUpdate operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an event subscription
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     * @param {String} scope The identifier of the resource to which the event subscription needs to be created or updated. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param {String} eventSubscriptionName Name of the event subscription. Event subscription names must be between 3 and 64 characters in length and should use alphanumeric letters only.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/EventSubscription} eventSubscriptionInfo Event subscription properties containing the destination and filter information
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscription}
     */
    eventSubscriptionsCreateOrUpdate(scope, eventSubscriptionName, apiVersion, eventSubscriptionInfo, callback) {
      let postBody = eventSubscriptionInfo;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling eventSubscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'eventSubscriptionName' is set
      if (eventSubscriptionName === undefined || eventSubscriptionName === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsCreateOrUpdate");
      }
      // verify the required parameter 'eventSubscriptionInfo' is set
      if (eventSubscriptionInfo === undefined || eventSubscriptionInfo === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionInfo' when calling eventSubscriptionsCreateOrUpdate");
      }

      let pathParams = {
        'scope': scope,
        'eventSubscriptionName': eventSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSubscription;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsDelete operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an event subscription
     * Delete an existing event subscription
     * @param {String} scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param {String} eventSubscriptionName Name of the event subscription
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    eventSubscriptionsDelete(scope, eventSubscriptionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling eventSubscriptionsDelete");
      }
      // verify the required parameter 'eventSubscriptionName' is set
      if (eventSubscriptionName === undefined || eventSubscriptionName === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsDelete");
      }

      let pathParams = {
        'scope': scope,
        'eventSubscriptionName': eventSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsGet operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an event subscription
     * Get properties of an event subscription
     * @param {String} scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param {String} eventSubscriptionName Name of the event subscription
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscription}
     */
    eventSubscriptionsGet(scope, eventSubscriptionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling eventSubscriptionsGet");
      }
      // verify the required parameter 'eventSubscriptionName' is set
      if (eventSubscriptionName === undefined || eventSubscriptionName === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsGet");
      }

      let pathParams = {
        'scope': scope,
        'eventSubscriptionName': eventSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscription;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsGetFullUrl operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsGetFullUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionFullUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get full URL of an event subscription
     * Get the full endpoint URL for an event subscription
     * @param {String} scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param {String} eventSubscriptionName Name of the event subscription
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsGetFullUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionFullUrl}
     */
    eventSubscriptionsGetFullUrl(scope, eventSubscriptionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling eventSubscriptionsGetFullUrl");
      }
      // verify the required parameter 'eventSubscriptionName' is set
      if (eventSubscriptionName === undefined || eventSubscriptionName === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsGetFullUrl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsGetFullUrl");
      }

      let pathParams = {
        'scope': scope,
        'eventSubscriptionName': eventSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionFullUrl;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListByResource operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListByResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all event subscriptions for a specific topic
     * List all event subscriptions that have been created for a specific topic
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription.
     * @param {String} providerNamespace Namespace of the provider of the topic
     * @param {String} resourceTypeName Name of the resource type
     * @param {String} resourceName Name of the resource
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListByResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListByResource(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListByResource");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListByResource");
      }
      // verify the required parameter 'providerNamespace' is set
      if (providerNamespace === undefined || providerNamespace === null) {
        throw new Error("Missing the required parameter 'providerNamespace' when calling eventSubscriptionsListByResource");
      }
      // verify the required parameter 'resourceTypeName' is set
      if (resourceTypeName === undefined || resourceTypeName === null) {
        throw new Error("Missing the required parameter 'resourceTypeName' when calling eventSubscriptionsListByResource");
      }
      // verify the required parameter 'resourceName' is set
      if (resourceName === undefined || resourceName === null) {
        throw new Error("Missing the required parameter 'resourceName' when calling eventSubscriptionsListByResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListByResource");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'providerNamespace': providerNamespace,
        'resourceTypeName': resourceTypeName,
        'resourceName': resourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListGlobalByResourceGroup operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all global event subscriptions under an Azure subscription and resource group
     * List all global event subscriptions under a specific Azure subscription and resource group
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListGlobalByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListGlobalByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListGlobalByResourceGroupForTopicType operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalByResourceGroupForTopicTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all global event subscriptions under a resource group for a topic type
     * List all global event subscriptions under a resource group for a specific topic type.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription.
     * @param {String} topicTypeName Name of the topic type
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalByResourceGroupForTopicTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListGlobalByResourceGroupForTopicType(subscriptionId, resourceGroupName, topicTypeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType");
      }
      // verify the required parameter 'topicTypeName' is set
      if (topicTypeName === undefined || topicTypeName === null) {
        throw new Error("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'topicTypeName': topicTypeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListGlobalBySubscription operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription
     * List all aggregated global event subscriptions under a specific Azure subscription
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListGlobalBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListGlobalBySubscriptionForTopicType operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalBySubscriptionForTopicTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all global event subscriptions for a topic type
     * List all global event subscriptions under an Azure subscription for a topic type.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} topicTypeName Name of the topic type
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListGlobalBySubscriptionForTopicTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListGlobalBySubscriptionForTopicType(subscriptionId, topicTypeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalBySubscriptionForTopicType");
      }
      // verify the required parameter 'topicTypeName' is set
      if (topicTypeName === undefined || topicTypeName === null) {
        throw new Error("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListGlobalBySubscriptionForTopicType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalBySubscriptionForTopicType");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'topicTypeName': topicTypeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListRegionalByResourceGroup operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all regional event subscriptions under an Azure subscription and resource group
     * List all event subscriptions from the given location under a specific Azure subscription and resource group
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription.
     * @param {String} location Name of the location
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListRegionalByResourceGroup(subscriptionId, resourceGroupName, location, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListRegionalByResourceGroup");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListRegionalByResourceGroupForTopicType operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalByResourceGroupForTopicTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group within the user's subscription.
     * @param {String} location Name of the location
     * @param {String} topicTypeName Name of the topic type
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalByResourceGroupForTopicTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListRegionalByResourceGroupForTopicType(subscriptionId, resourceGroupName, location, topicTypeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType");
      }
      // verify the required parameter 'topicTypeName' is set
      if (topicTypeName === undefined || topicTypeName === null) {
        throw new Error("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'topicTypeName': topicTypeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListRegionalBySubscription operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all regional event subscriptions under an Azure subscription
     * List all event subscriptions from the given location under a specific Azure subscription
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} location Name of the location
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListRegionalBySubscription(subscriptionId, location, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalBySubscription");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsListRegionalBySubscriptionForTopicType operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalBySubscriptionForTopicTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscriptionsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     * @param {String} subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} location Name of the location
     * @param {String} topicTypeName Name of the topic type
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsListRegionalBySubscriptionForTopicTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscriptionsListResult}
     */
    eventSubscriptionsListRegionalBySubscriptionForTopicType(subscriptionId, location, topicTypeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType");
      }
      // verify the required parameter 'topicTypeName' is set
      if (topicTypeName === undefined || topicTypeName === null) {
        throw new Error("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location,
        'topicTypeName': topicTypeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventSubscriptionsListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventSubscriptionsUpdate operation.
     * @callback module:api/EventSubscriptionsApi~eventSubscriptionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an event subscription
     * Asynchronously updates an existing event subscription.
     * @param {String} scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
     * @param {String} eventSubscriptionName Name of the event subscription to be updated
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/EventSubscriptionUpdateParameters} eventSubscriptionUpdateParameters Updated event subscription information
     * @param {module:api/EventSubscriptionsApi~eventSubscriptionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventSubscription}
     */
    eventSubscriptionsUpdate(scope, eventSubscriptionName, apiVersion, eventSubscriptionUpdateParameters, callback) {
      let postBody = eventSubscriptionUpdateParameters;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling eventSubscriptionsUpdate");
      }
      // verify the required parameter 'eventSubscriptionName' is set
      if (eventSubscriptionName === undefined || eventSubscriptionName === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling eventSubscriptionsUpdate");
      }
      // verify the required parameter 'eventSubscriptionUpdateParameters' is set
      if (eventSubscriptionUpdateParameters === undefined || eventSubscriptionUpdateParameters === null) {
        throw new Error("Missing the required parameter 'eventSubscriptionUpdateParameters' when calling eventSubscriptionsUpdate");
      }

      let pathParams = {
        'scope': scope,
        'eventSubscriptionName': eventSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventSubscription;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
