/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventTypeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventTypeProperties::OAIEventTypeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventTypeProperties::OAIEventTypeProperties() {
    this->initializeModel();
}

OAIEventTypeProperties::~OAIEventTypeProperties() {}

void OAIEventTypeProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_schema_url_isSet = false;
    m_schema_url_isValid = false;
}

void OAIEventTypeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventTypeProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_schema_url_isValid = ::OpenAPI::fromJsonValue(m_schema_url, json[QString("schemaUrl")]);
    m_schema_url_isSet = !json[QString("schemaUrl")].isNull() && m_schema_url_isValid;
}

QString OAIEventTypeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventTypeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_schema_url_isSet) {
        obj.insert(QString("schemaUrl"), ::OpenAPI::toJsonValue(m_schema_url));
    }
    return obj;
}

QString OAIEventTypeProperties::getDescription() const {
    return m_description;
}
void OAIEventTypeProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventTypeProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventTypeProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEventTypeProperties::getDisplayName() const {
    return m_display_name;
}
void OAIEventTypeProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIEventTypeProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIEventTypeProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIEventTypeProperties::getSchemaUrl() const {
    return m_schema_url;
}
void OAIEventTypeProperties::setSchemaUrl(const QString &schema_url) {
    m_schema_url = schema_url;
    m_schema_url_isSet = true;
}

bool OAIEventTypeProperties::is_schema_url_Set() const{
    return m_schema_url_isSet;
}

bool OAIEventTypeProperties::is_schema_url_Valid() const{
    return m_schema_url_isValid;
}

bool OAIEventTypeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventTypeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
