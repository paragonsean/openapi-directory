/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJsonInputSchemaMappingProperties.h
 *
 * This can be used to map properties of a source schema (or default values, for certain supported properties) to properties of the EventGridEvent schema.
 */

#ifndef OAIJsonInputSchemaMappingProperties_H
#define OAIJsonInputSchemaMappingProperties_H

#include <QJsonObject>

#include "OAIJsonField.h"
#include "OAIJsonFieldWithDefault.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJsonFieldWithDefault;
class OAIJsonField;

class OAIJsonInputSchemaMappingProperties : public OAIObject {
public:
    OAIJsonInputSchemaMappingProperties();
    OAIJsonInputSchemaMappingProperties(QString json);
    ~OAIJsonInputSchemaMappingProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIJsonFieldWithDefault getDataVersion() const;
    void setDataVersion(const OAIJsonFieldWithDefault &data_version);
    bool is_data_version_Set() const;
    bool is_data_version_Valid() const;

    OAIJsonField getEventTime() const;
    void setEventTime(const OAIJsonField &event_time);
    bool is_event_time_Set() const;
    bool is_event_time_Valid() const;

    OAIJsonFieldWithDefault getEventType() const;
    void setEventType(const OAIJsonFieldWithDefault &event_type);
    bool is_event_type_Set() const;
    bool is_event_type_Valid() const;

    OAIJsonField getId() const;
    void setId(const OAIJsonField &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIJsonFieldWithDefault getSubject() const;
    void setSubject(const OAIJsonFieldWithDefault &subject);
    bool is_subject_Set() const;
    bool is_subject_Valid() const;

    OAIJsonField getTopic() const;
    void setTopic(const OAIJsonField &topic);
    bool is_topic_Set() const;
    bool is_topic_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIJsonFieldWithDefault m_data_version;
    bool m_data_version_isSet;
    bool m_data_version_isValid;

    OAIJsonField m_event_time;
    bool m_event_time_isSet;
    bool m_event_time_isValid;

    OAIJsonFieldWithDefault m_event_type;
    bool m_event_type_isSet;
    bool m_event_type_isValid;

    OAIJsonField m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIJsonFieldWithDefault m_subject;
    bool m_subject_isSet;
    bool m_subject_isValid;

    OAIJsonField m_topic;
    bool m_topic_isSet;
    bool m_topic_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJsonInputSchemaMappingProperties)

#endif // OAIJsonInputSchemaMappingProperties_H
