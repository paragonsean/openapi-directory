/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputSchemaMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputSchemaMapping::OAIInputSchemaMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputSchemaMapping::OAIInputSchemaMapping() {
    this->initializeModel();
}

OAIInputSchemaMapping::~OAIInputSchemaMapping() {}

void OAIInputSchemaMapping::initializeModel() {

    m_input_schema_mapping_type_isSet = false;
    m_input_schema_mapping_type_isValid = false;
}

void OAIInputSchemaMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputSchemaMapping::fromJsonObject(QJsonObject json) {

    m_input_schema_mapping_type_isValid = ::OpenAPI::fromJsonValue(m_input_schema_mapping_type, json[QString("inputSchemaMappingType")]);
    m_input_schema_mapping_type_isSet = !json[QString("inputSchemaMappingType")].isNull() && m_input_schema_mapping_type_isValid;
}

QString OAIInputSchemaMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputSchemaMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_input_schema_mapping_type_isSet) {
        obj.insert(QString("inputSchemaMappingType"), ::OpenAPI::toJsonValue(m_input_schema_mapping_type));
    }
    return obj;
}

QString OAIInputSchemaMapping::getInputSchemaMappingType() const {
    return m_input_schema_mapping_type;
}
void OAIInputSchemaMapping::setInputSchemaMappingType(const QString &input_schema_mapping_type) {
    m_input_schema_mapping_type = input_schema_mapping_type;
    m_input_schema_mapping_type_isSet = true;
}

bool OAIInputSchemaMapping::is_input_schema_mapping_type_Set() const{
    return m_input_schema_mapping_type_isSet;
}

bool OAIInputSchemaMapping::is_input_schema_mapping_type_Valid() const{
    return m_input_schema_mapping_type_isValid;
}

bool OAIInputSchemaMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_schema_mapping_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputSchemaMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
