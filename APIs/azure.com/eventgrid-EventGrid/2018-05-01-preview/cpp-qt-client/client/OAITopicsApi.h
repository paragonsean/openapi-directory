/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2018-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITopicsApi_H
#define OAI_OAITopicsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEventTypesListResult.h"
#include "OAITopic.h"
#include "OAITopicRegenerateKeyRequest.h"
#include "OAITopicSharedAccessKeys.h"
#include "OAITopicUpdateParameters.h"
#include "OAITopicsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITopicsApi : public QObject {
    Q_OBJECT

public:
    OAITopicsApi(const int timeOut = 0);
    ~OAITopicsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  topic_info OAITopic [required]
    */
    virtual void topicsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &topic_name, const QString &api_version, const OAITopic &topic_info);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topicsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &topic_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topicsGet(const QString &subscription_id, const QString &resource_group_name, const QString &topic_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topicsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topicsListBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  provider_namespace QString [required]
    * @param[in]  resource_type_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topicsListEventTypes(const QString &subscription_id, const QString &resource_group_name, const QString &provider_namespace, const QString &resource_type_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topicsListSharedAccessKeys(const QString &subscription_id, const QString &resource_group_name, const QString &topic_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  regenerate_key_request OAITopicRegenerateKeyRequest [required]
    */
    virtual void topicsRegenerateKey(const QString &subscription_id, const QString &resource_group_name, const QString &topic_name, const QString &api_version, const OAITopicRegenerateKeyRequest &regenerate_key_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  topic_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  topic_update_parameters OAITopicUpdateParameters [required]
    */
    virtual void topicsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &topic_name, const QString &api_version, const OAITopicUpdateParameters &topic_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void topicsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void topicsDeleteCallback(OAIHttpRequestWorker *worker);
    void topicsGetCallback(OAIHttpRequestWorker *worker);
    void topicsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void topicsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void topicsListEventTypesCallback(OAIHttpRequestWorker *worker);
    void topicsListSharedAccessKeysCallback(OAIHttpRequestWorker *worker);
    void topicsRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void topicsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void topicsCreateOrUpdateSignal(OAITopic summary);
    void topicsDeleteSignal();
    void topicsGetSignal(OAITopic summary);
    void topicsListByResourceGroupSignal(OAITopicsListResult summary);
    void topicsListBySubscriptionSignal(OAITopicsListResult summary);
    void topicsListEventTypesSignal(OAIEventTypesListResult summary);
    void topicsListSharedAccessKeysSignal(OAITopicSharedAccessKeys summary);
    void topicsRegenerateKeySignal(OAITopicSharedAccessKeys summary);
    void topicsUpdateSignal(OAITopic summary);


    void topicsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAITopic summary);
    void topicsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void topicsGetSignalFull(OAIHttpRequestWorker *worker, OAITopic summary);
    void topicsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAITopicsListResult summary);
    void topicsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAITopicsListResult summary);
    void topicsListEventTypesSignalFull(OAIHttpRequestWorker *worker, OAIEventTypesListResult summary);
    void topicsListSharedAccessKeysSignalFull(OAIHttpRequestWorker *worker, OAITopicSharedAccessKeys summary);
    void topicsRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAITopicSharedAccessKeys summary);
    void topicsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITopic summary);

    Q_DECL_DEPRECATED_X("Use topicsCreateOrUpdateSignalError() instead")
    void topicsCreateOrUpdateSignalE(OAITopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsCreateOrUpdateSignalError(OAITopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsDeleteSignalError() instead")
    void topicsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void topicsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsGetSignalError() instead")
    void topicsGetSignalE(OAITopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsGetSignalError(OAITopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListByResourceGroupSignalError() instead")
    void topicsListByResourceGroupSignalE(OAITopicsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListByResourceGroupSignalError(OAITopicsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListBySubscriptionSignalError() instead")
    void topicsListBySubscriptionSignalE(OAITopicsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListBySubscriptionSignalError(OAITopicsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListEventTypesSignalError() instead")
    void topicsListEventTypesSignalE(OAIEventTypesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListEventTypesSignalError(OAIEventTypesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListSharedAccessKeysSignalError() instead")
    void topicsListSharedAccessKeysSignalE(OAITopicSharedAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListSharedAccessKeysSignalError(OAITopicSharedAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsRegenerateKeySignalError() instead")
    void topicsRegenerateKeySignalE(OAITopicSharedAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsRegenerateKeySignalError(OAITopicSharedAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsUpdateSignalError() instead")
    void topicsUpdateSignalE(OAITopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsUpdateSignalError(OAITopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use topicsCreateOrUpdateSignalErrorFull() instead")
    void topicsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsDeleteSignalErrorFull() instead")
    void topicsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsGetSignalErrorFull() instead")
    void topicsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListByResourceGroupSignalErrorFull() instead")
    void topicsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListBySubscriptionSignalErrorFull() instead")
    void topicsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListEventTypesSignalErrorFull() instead")
    void topicsListEventTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListEventTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsListSharedAccessKeysSignalErrorFull() instead")
    void topicsListSharedAccessKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsListSharedAccessKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsRegenerateKeySignalErrorFull() instead")
    void topicsRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicsUpdateSignalErrorFull() instead")
    void topicsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
