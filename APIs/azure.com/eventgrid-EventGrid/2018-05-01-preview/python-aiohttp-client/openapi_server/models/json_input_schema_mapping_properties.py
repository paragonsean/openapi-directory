# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_field import JsonField
from openapi_server.models.json_field_with_default import JsonFieldWithDefault
from openapi_server import util


class JsonInputSchemaMappingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_version: JsonFieldWithDefault=None, event_time: JsonField=None, event_type: JsonFieldWithDefault=None, id: JsonField=None, subject: JsonFieldWithDefault=None, topic: JsonField=None):
        """JsonInputSchemaMappingProperties - a model defined in OpenAPI

        :param data_version: The data_version of this JsonInputSchemaMappingProperties.
        :param event_time: The event_time of this JsonInputSchemaMappingProperties.
        :param event_type: The event_type of this JsonInputSchemaMappingProperties.
        :param id: The id of this JsonInputSchemaMappingProperties.
        :param subject: The subject of this JsonInputSchemaMappingProperties.
        :param topic: The topic of this JsonInputSchemaMappingProperties.
        """
        self.openapi_types = {
            'data_version': JsonFieldWithDefault,
            'event_time': JsonField,
            'event_type': JsonFieldWithDefault,
            'id': JsonField,
            'subject': JsonFieldWithDefault,
            'topic': JsonField
        }

        self.attribute_map = {
            'data_version': 'dataVersion',
            'event_time': 'eventTime',
            'event_type': 'eventType',
            'id': 'id',
            'subject': 'subject',
            'topic': 'topic'
        }

        self._data_version = data_version
        self._event_time = event_time
        self._event_type = event_type
        self._id = id
        self._subject = subject
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JsonInputSchemaMappingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JsonInputSchemaMappingProperties of this JsonInputSchemaMappingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_version(self):
        """Gets the data_version of this JsonInputSchemaMappingProperties.


        :return: The data_version of this JsonInputSchemaMappingProperties.
        :rtype: JsonFieldWithDefault
        """
        return self._data_version

    @data_version.setter
    def data_version(self, data_version):
        """Sets the data_version of this JsonInputSchemaMappingProperties.


        :param data_version: The data_version of this JsonInputSchemaMappingProperties.
        :type data_version: JsonFieldWithDefault
        """

        self._data_version = data_version

    @property
    def event_time(self):
        """Gets the event_time of this JsonInputSchemaMappingProperties.


        :return: The event_time of this JsonInputSchemaMappingProperties.
        :rtype: JsonField
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this JsonInputSchemaMappingProperties.


        :param event_time: The event_time of this JsonInputSchemaMappingProperties.
        :type event_time: JsonField
        """

        self._event_time = event_time

    @property
    def event_type(self):
        """Gets the event_type of this JsonInputSchemaMappingProperties.


        :return: The event_type of this JsonInputSchemaMappingProperties.
        :rtype: JsonFieldWithDefault
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this JsonInputSchemaMappingProperties.


        :param event_type: The event_type of this JsonInputSchemaMappingProperties.
        :type event_type: JsonFieldWithDefault
        """

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this JsonInputSchemaMappingProperties.


        :return: The id of this JsonInputSchemaMappingProperties.
        :rtype: JsonField
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JsonInputSchemaMappingProperties.


        :param id: The id of this JsonInputSchemaMappingProperties.
        :type id: JsonField
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this JsonInputSchemaMappingProperties.


        :return: The subject of this JsonInputSchemaMappingProperties.
        :rtype: JsonFieldWithDefault
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this JsonInputSchemaMappingProperties.


        :param subject: The subject of this JsonInputSchemaMappingProperties.
        :type subject: JsonFieldWithDefault
        """

        self._subject = subject

    @property
    def topic(self):
        """Gets the topic of this JsonInputSchemaMappingProperties.


        :return: The topic of this JsonInputSchemaMappingProperties.
        :rtype: JsonField
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this JsonInputSchemaMappingProperties.


        :param topic: The topic of this JsonInputSchemaMappingProperties.
        :type topic: JsonField
        """

        self._topic = topic
