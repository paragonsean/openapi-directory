/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a topic type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:42.819878-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TopicTypeProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  /**
   * Provisioning state of the topic type
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    CANCELED("Canceled"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  /**
   * Region type of the resource.
   */
  @JsonAdapter(ResourceRegionTypeEnum.Adapter.class)
  public enum ResourceRegionTypeEnum {
    REGIONAL_RESOURCE("RegionalResource"),
    
    GLOBAL_RESOURCE("GlobalResource");

    private String value;

    ResourceRegionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceRegionTypeEnum fromValue(String value) {
      for (ResourceRegionTypeEnum b : ResourceRegionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceRegionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceRegionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceRegionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceRegionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceRegionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_REGION_TYPE = "resourceRegionType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_REGION_TYPE)
  private ResourceRegionTypeEnum resourceRegionType;

  public static final String SERIALIZED_NAME_SUPPORTED_LOCATIONS = "supportedLocations";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_LOCATIONS)
  private List<String> supportedLocations = new ArrayList<>();

  public TopicTypeProperties() {
  }

  public TopicTypeProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the topic type.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TopicTypeProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display Name for the topic type.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public TopicTypeProperties provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Namespace of the provider of the topic type.
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public TopicTypeProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the topic type
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public TopicTypeProperties resourceRegionType(ResourceRegionTypeEnum resourceRegionType) {
    this.resourceRegionType = resourceRegionType;
    return this;
  }

  /**
   * Region type of the resource.
   * @return resourceRegionType
   */
  @javax.annotation.Nullable
  public ResourceRegionTypeEnum getResourceRegionType() {
    return resourceRegionType;
  }

  public void setResourceRegionType(ResourceRegionTypeEnum resourceRegionType) {
    this.resourceRegionType = resourceRegionType;
  }


  public TopicTypeProperties supportedLocations(List<String> supportedLocations) {
    this.supportedLocations = supportedLocations;
    return this;
  }

  public TopicTypeProperties addSupportedLocationsItem(String supportedLocationsItem) {
    if (this.supportedLocations == null) {
      this.supportedLocations = new ArrayList<>();
    }
    this.supportedLocations.add(supportedLocationsItem);
    return this;
  }

  /**
   * List of locations supported by this topic type.
   * @return supportedLocations
   */
  @javax.annotation.Nullable
  public List<String> getSupportedLocations() {
    return supportedLocations;
  }

  public void setSupportedLocations(List<String> supportedLocations) {
    this.supportedLocations = supportedLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopicTypeProperties topicTypeProperties = (TopicTypeProperties) o;
    return Objects.equals(this.description, topicTypeProperties.description) &&
        Objects.equals(this.displayName, topicTypeProperties.displayName) &&
        Objects.equals(this.provider, topicTypeProperties.provider) &&
        Objects.equals(this.provisioningState, topicTypeProperties.provisioningState) &&
        Objects.equals(this.resourceRegionType, topicTypeProperties.resourceRegionType) &&
        Objects.equals(this.supportedLocations, topicTypeProperties.supportedLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, provider, provisioningState, resourceRegionType, supportedLocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopicTypeProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceRegionType: ").append(toIndentedString(resourceRegionType)).append("\n");
    sb.append("    supportedLocations: ").append(toIndentedString(supportedLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("provider");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceRegionType");
    openapiFields.add("supportedLocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TopicTypeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopicTypeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopicTypeProperties is not found in the empty JSON string", TopicTypeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopicTypeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopicTypeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("resourceRegionType") != null && !jsonObj.get("resourceRegionType").isJsonNull()) && !jsonObj.get("resourceRegionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceRegionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceRegionType").toString()));
      }
      // validate the optional field `resourceRegionType`
      if (jsonObj.get("resourceRegionType") != null && !jsonObj.get("resourceRegionType").isJsonNull()) {
        ResourceRegionTypeEnum.validateJsonElement(jsonObj.get("resourceRegionType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedLocations") != null && !jsonObj.get("supportedLocations").isJsonNull() && !jsonObj.get("supportedLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedLocations` to be an array in the JSON string but got `%s`", jsonObj.get("supportedLocations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopicTypeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopicTypeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopicTypeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopicTypeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<TopicTypeProperties>() {
           @Override
           public void write(JsonWriter out, TopicTypeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopicTypeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TopicTypeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TopicTypeProperties
   * @throws IOException if the JSON string is invalid with respect to TopicTypeProperties
   */
  public static TopicTypeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopicTypeProperties.class);
  }

  /**
   * Convert an instance of TopicTypeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

