/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdvancedFilter from './AdvancedFilter';

/**
 * The EventSubscriptionFilter model module.
 * @module model/EventSubscriptionFilter
 * @version 2019-02-01-preview
 */
class EventSubscriptionFilter {
    /**
     * Constructs a new <code>EventSubscriptionFilter</code>.
     * Filter for the Event Subscription
     * @alias module:model/EventSubscriptionFilter
     */
    constructor() { 
        
        EventSubscriptionFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['isSubjectCaseSensitive'] = false;
    }

    /**
     * Constructs a <code>EventSubscriptionFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventSubscriptionFilter} obj Optional instance to populate.
     * @return {module:model/EventSubscriptionFilter} The populated <code>EventSubscriptionFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventSubscriptionFilter();

            if (data.hasOwnProperty('advancedFilters')) {
                obj['advancedFilters'] = ApiClient.convertToType(data['advancedFilters'], [AdvancedFilter]);
            }
            if (data.hasOwnProperty('includedEventTypes')) {
                obj['includedEventTypes'] = ApiClient.convertToType(data['includedEventTypes'], ['String']);
            }
            if (data.hasOwnProperty('isSubjectCaseSensitive')) {
                obj['isSubjectCaseSensitive'] = ApiClient.convertToType(data['isSubjectCaseSensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('subjectBeginsWith')) {
                obj['subjectBeginsWith'] = ApiClient.convertToType(data['subjectBeginsWith'], 'String');
            }
            if (data.hasOwnProperty('subjectEndsWith')) {
                obj['subjectEndsWith'] = ApiClient.convertToType(data['subjectEndsWith'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventSubscriptionFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventSubscriptionFilter</code>.
     */
    static validateJSON(data) {
        if (data['advancedFilters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['advancedFilters'])) {
                throw new Error("Expected the field `advancedFilters` to be an array in the JSON data but got " + data['advancedFilters']);
            }
            // validate the optional field `advancedFilters` (array)
            for (const item of data['advancedFilters']) {
                AdvancedFilter.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedEventTypes'])) {
            throw new Error("Expected the field `includedEventTypes` to be an array in the JSON data but got " + data['includedEventTypes']);
        }
        // ensure the json data is a string
        if (data['subjectBeginsWith'] && !(typeof data['subjectBeginsWith'] === 'string' || data['subjectBeginsWith'] instanceof String)) {
            throw new Error("Expected the field `subjectBeginsWith` to be a primitive type in the JSON string but got " + data['subjectBeginsWith']);
        }
        // ensure the json data is a string
        if (data['subjectEndsWith'] && !(typeof data['subjectEndsWith'] === 'string' || data['subjectEndsWith'] instanceof String)) {
            throw new Error("Expected the field `subjectEndsWith` to be a primitive type in the JSON string but got " + data['subjectEndsWith']);
        }

        return true;
    }


}



/**
 * An array of advanced filters that are used for filtering event subscriptions.
 * @member {Array.<module:model/AdvancedFilter>} advancedFilters
 */
EventSubscriptionFilter.prototype['advancedFilters'] = undefined;

/**
 * A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.
 * @member {Array.<String>} includedEventTypes
 */
EventSubscriptionFilter.prototype['includedEventTypes'] = undefined;

/**
 * Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter   should be compared in a case sensitive manner.
 * @member {Boolean} isSubjectCaseSensitive
 * @default false
 */
EventSubscriptionFilter.prototype['isSubjectCaseSensitive'] = false;

/**
 * An optional string to filter events for an event subscription based on a resource path prefix.  The format of this depends on the publisher of the events.   Wildcard characters are not supported in this path.
 * @member {String} subjectBeginsWith
 */
EventSubscriptionFilter.prototype['subjectBeginsWith'] = undefined;

/**
 * An optional string to filter events for an event subscription based on a resource path suffix.  Wildcard characters are not supported in this path.
 * @member {String} subjectEndsWith
 */
EventSubscriptionFilter.prototype['subjectEndsWith'] = undefined;






export default EventSubscriptionFilter;

