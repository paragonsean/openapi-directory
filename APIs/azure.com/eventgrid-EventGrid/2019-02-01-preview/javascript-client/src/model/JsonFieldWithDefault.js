/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The JsonFieldWithDefault model module.
 * @module model/JsonFieldWithDefault
 * @version 2019-02-01-preview
 */
class JsonFieldWithDefault {
    /**
     * Constructs a new <code>JsonFieldWithDefault</code>.
     * This is used to express the source of an input schema mapping for a single target field  in the Event Grid Event schema. This is currently used in the mappings for the &#39;subject&#39;,  &#39;eventtype&#39; and &#39;dataversion&#39; properties. This represents a field in the input event schema  along with a default value to be used, and at least one of these two properties should be provided.
     * @alias module:model/JsonFieldWithDefault
     */
    constructor() { 
        
        JsonFieldWithDefault.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonFieldWithDefault</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonFieldWithDefault} obj Optional instance to populate.
     * @return {module:model/JsonFieldWithDefault} The populated <code>JsonFieldWithDefault</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonFieldWithDefault();

            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], 'String');
            }
            if (data.hasOwnProperty('sourceField')) {
                obj['sourceField'] = ApiClient.convertToType(data['sourceField'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonFieldWithDefault</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonFieldWithDefault</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['defaultValue'] && !(typeof data['defaultValue'] === 'string' || data['defaultValue'] instanceof String)) {
            throw new Error("Expected the field `defaultValue` to be a primitive type in the JSON string but got " + data['defaultValue']);
        }
        // ensure the json data is a string
        if (data['sourceField'] && !(typeof data['sourceField'] === 'string' || data['sourceField'] instanceof String)) {
            throw new Error("Expected the field `sourceField` to be a primitive type in the JSON string but got " + data['sourceField']);
        }

        return true;
    }


}



/**
 * The default value to be used for mapping when a SourceField is not provided or if there's no property with the specified name in the published JSON event payload.
 * @member {String} defaultValue
 */
JsonFieldWithDefault.prototype['defaultValue'] = undefined;

/**
 * Name of a field in the input event schema that's to be used as the source of a mapping.
 * @member {String} sourceField
 */
JsonFieldWithDefault.prototype['sourceField'] = undefined;






export default JsonFieldWithDefault;

