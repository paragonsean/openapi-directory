/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputSchemaMapping from './InputSchemaMapping';
import JsonInputSchemaMappingProperties from './JsonInputSchemaMappingProperties';

/**
 * The JsonInputSchemaMapping model module.
 * @module model/JsonInputSchemaMapping
 * @version 2019-02-01-preview
 */
class JsonInputSchemaMapping {
    /**
     * Constructs a new <code>JsonInputSchemaMapping</code>.
     * This enables publishing to Event Grid using a custom input schema. This can be used to map properties from a custom input JSON schema to the Event Grid event schema.
     * @alias module:model/JsonInputSchemaMapping
     * @extends module:model/InputSchemaMapping
     * @implements module:model/InputSchemaMapping
     */
    constructor() { 
        InputSchemaMapping.initialize(this);
        JsonInputSchemaMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>JsonInputSchemaMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JsonInputSchemaMapping} obj Optional instance to populate.
     * @return {module:model/JsonInputSchemaMapping} The populated <code>JsonInputSchemaMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JsonInputSchemaMapping();
            InputSchemaMapping.constructFromObject(data, obj);
            InputSchemaMapping.constructFromObject(data, obj);

            if (data.hasOwnProperty('properties')) {
                obj['properties'] = JsonInputSchemaMappingProperties.constructFromObject(data['properties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JsonInputSchemaMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JsonInputSchemaMapping</code>.
     */
    static validateJSON(data) {
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          JsonInputSchemaMappingProperties.validateJSON(data['properties']);
        }

        return true;
    }


}



/**
 * @member {module:model/JsonInputSchemaMappingProperties} properties
 */
JsonInputSchemaMapping.prototype['properties'] = undefined;


// Implement InputSchemaMapping interface:
/**
 * Type of the custom mapping
 * @member {module:model/InputSchemaMapping.InputSchemaMappingTypeEnum} inputSchemaMappingType
 */
InputSchemaMapping.prototype['inputSchemaMappingType'] = undefined;




export default JsonInputSchemaMapping;

