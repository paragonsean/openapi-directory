/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDomainsApi_H
#define OAI_OAIDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDomain.h"
#include "OAIDomainRegenerateKeyRequest.h"
#include "OAIDomainSharedAccessKeys.h"
#include "OAIDomainUpdateParameters.h"
#include "OAIDomainsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDomainsApi : public QObject {
    Q_OBJECT

public:
    OAIDomainsApi(const int timeOut = 0);
    ~OAIDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_info OAIDomain [required]
    */
    virtual void domainsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &api_version, const OAIDomain &domain_info);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsGet(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void domainsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    */
    virtual void domainsListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void domainsListSharedAccessKeys(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  regenerate_key_request OAIDomainRegenerateKeyRequest [required]
    */
    virtual void domainsRegenerateKey(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &api_version, const OAIDomainRegenerateKeyRequest &regenerate_key_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  domain_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_update_parameters OAIDomainUpdateParameters [required]
    */
    virtual void domainsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &domain_name, const QString &api_version, const OAIDomainUpdateParameters &domain_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void domainsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void domainsDeleteCallback(OAIHttpRequestWorker *worker);
    void domainsGetCallback(OAIHttpRequestWorker *worker);
    void domainsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void domainsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void domainsListSharedAccessKeysCallback(OAIHttpRequestWorker *worker);
    void domainsRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void domainsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void domainsCreateOrUpdateSignal(OAIDomain summary);
    void domainsDeleteSignal();
    void domainsGetSignal(OAIDomain summary);
    void domainsListByResourceGroupSignal(OAIDomainsListResult summary);
    void domainsListBySubscriptionSignal(OAIDomainsListResult summary);
    void domainsListSharedAccessKeysSignal(OAIDomainSharedAccessKeys summary);
    void domainsRegenerateKeySignal(OAIDomainSharedAccessKeys summary);
    void domainsUpdateSignal(OAIDomain summary);


    void domainsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDomain summary);
    void domainsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void domainsGetSignalFull(OAIHttpRequestWorker *worker, OAIDomain summary);
    void domainsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDomainsListResult summary);
    void domainsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDomainsListResult summary);
    void domainsListSharedAccessKeysSignalFull(OAIHttpRequestWorker *worker, OAIDomainSharedAccessKeys summary);
    void domainsRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAIDomainSharedAccessKeys summary);
    void domainsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDomain summary);

    Q_DECL_DEPRECATED_X("Use domainsCreateOrUpdateSignalError() instead")
    void domainsCreateOrUpdateSignalE(OAIDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCreateOrUpdateSignalError(OAIDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteSignalError() instead")
    void domainsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetSignalError() instead")
    void domainsGetSignalE(OAIDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetSignalError(OAIDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListByResourceGroupSignalError() instead")
    void domainsListByResourceGroupSignalE(OAIDomainsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListByResourceGroupSignalError(OAIDomainsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListBySubscriptionSignalError() instead")
    void domainsListBySubscriptionSignalE(OAIDomainsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListBySubscriptionSignalError(OAIDomainsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListSharedAccessKeysSignalError() instead")
    void domainsListSharedAccessKeysSignalE(OAIDomainSharedAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListSharedAccessKeysSignalError(OAIDomainSharedAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsRegenerateKeySignalError() instead")
    void domainsRegenerateKeySignalE(OAIDomainSharedAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsRegenerateKeySignalError(OAIDomainSharedAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateSignalError() instead")
    void domainsUpdateSignalE(OAIDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateSignalError(OAIDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use domainsCreateOrUpdateSignalErrorFull() instead")
    void domainsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsDeleteSignalErrorFull() instead")
    void domainsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsGetSignalErrorFull() instead")
    void domainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListByResourceGroupSignalErrorFull() instead")
    void domainsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListBySubscriptionSignalErrorFull() instead")
    void domainsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsListSharedAccessKeysSignalErrorFull() instead")
    void domainsListSharedAccessKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsListSharedAccessKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsRegenerateKeySignalErrorFull() instead")
    void domainsRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use domainsUpdateSignalErrorFull() instead")
    void domainsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void domainsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
