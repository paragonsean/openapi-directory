/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeadLetterDestination;
import org.openapitools.client.model.EventSubscriptionDestination;
import org.openapitools.client.model.EventSubscriptionFilter;
import org.openapitools.client.model.RetryPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the Event Subscription update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:24.288487-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventSubscriptionUpdateParameters {
  public static final String SERIALIZED_NAME_DEAD_LETTER_DESTINATION = "deadLetterDestination";
  @SerializedName(SERIALIZED_NAME_DEAD_LETTER_DESTINATION)
  private DeadLetterDestination deadLetterDestination;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private EventSubscriptionDestination destination;

  /**
   * The event delivery schema for the event subscription.
   */
  @JsonAdapter(EventDeliverySchemaEnum.Adapter.class)
  public enum EventDeliverySchemaEnum {
    EVENT_GRID_SCHEMA("EventGridSchema"),
    
    CUSTOM_INPUT_SCHEMA("CustomInputSchema"),
    
    CLOUD_EVENT_SCHEMA_V1_0("CloudEventSchemaV1_0");

    private String value;

    EventDeliverySchemaEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventDeliverySchemaEnum fromValue(String value) {
      for (EventDeliverySchemaEnum b : EventDeliverySchemaEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventDeliverySchemaEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventDeliverySchemaEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventDeliverySchemaEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventDeliverySchemaEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EventDeliverySchemaEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_DELIVERY_SCHEMA = "eventDeliverySchema";
  @SerializedName(SERIALIZED_NAME_EVENT_DELIVERY_SCHEMA)
  private EventDeliverySchemaEnum eventDeliverySchema;

  public static final String SERIALIZED_NAME_EXPIRATION_TIME_UTC = "expirationTimeUtc";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME_UTC)
  private OffsetDateTime expirationTimeUtc;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private EventSubscriptionFilter filter;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETRY_POLICY = "retryPolicy";
  @SerializedName(SERIALIZED_NAME_RETRY_POLICY)
  private RetryPolicy retryPolicy;

  public EventSubscriptionUpdateParameters() {
  }

  public EventSubscriptionUpdateParameters deadLetterDestination(DeadLetterDestination deadLetterDestination) {
    this.deadLetterDestination = deadLetterDestination;
    return this;
  }

  /**
   * Get deadLetterDestination
   * @return deadLetterDestination
   */
  @javax.annotation.Nullable
  public DeadLetterDestination getDeadLetterDestination() {
    return deadLetterDestination;
  }

  public void setDeadLetterDestination(DeadLetterDestination deadLetterDestination) {
    this.deadLetterDestination = deadLetterDestination;
  }


  public EventSubscriptionUpdateParameters destination(EventSubscriptionDestination destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nullable
  public EventSubscriptionDestination getDestination() {
    return destination;
  }

  public void setDestination(EventSubscriptionDestination destination) {
    this.destination = destination;
  }


  public EventSubscriptionUpdateParameters eventDeliverySchema(EventDeliverySchemaEnum eventDeliverySchema) {
    this.eventDeliverySchema = eventDeliverySchema;
    return this;
  }

  /**
   * The event delivery schema for the event subscription.
   * @return eventDeliverySchema
   */
  @javax.annotation.Nullable
  public EventDeliverySchemaEnum getEventDeliverySchema() {
    return eventDeliverySchema;
  }

  public void setEventDeliverySchema(EventDeliverySchemaEnum eventDeliverySchema) {
    this.eventDeliverySchema = eventDeliverySchema;
  }


  public EventSubscriptionUpdateParameters expirationTimeUtc(OffsetDateTime expirationTimeUtc) {
    this.expirationTimeUtc = expirationTimeUtc;
    return this;
  }

  /**
   * Information about the expiration time for the event subscription.
   * @return expirationTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationTimeUtc() {
    return expirationTimeUtc;
  }

  public void setExpirationTimeUtc(OffsetDateTime expirationTimeUtc) {
    this.expirationTimeUtc = expirationTimeUtc;
  }


  public EventSubscriptionUpdateParameters filter(EventSubscriptionFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public EventSubscriptionFilter getFilter() {
    return filter;
  }

  public void setFilter(EventSubscriptionFilter filter) {
    this.filter = filter;
  }


  public EventSubscriptionUpdateParameters labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public EventSubscriptionUpdateParameters addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * List of user defined labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public EventSubscriptionUpdateParameters retryPolicy(RetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
    return this;
  }

  /**
   * Get retryPolicy
   * @return retryPolicy
   */
  @javax.annotation.Nullable
  public RetryPolicy getRetryPolicy() {
    return retryPolicy;
  }

  public void setRetryPolicy(RetryPolicy retryPolicy) {
    this.retryPolicy = retryPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters = (EventSubscriptionUpdateParameters) o;
    return Objects.equals(this.deadLetterDestination, eventSubscriptionUpdateParameters.deadLetterDestination) &&
        Objects.equals(this.destination, eventSubscriptionUpdateParameters.destination) &&
        Objects.equals(this.eventDeliverySchema, eventSubscriptionUpdateParameters.eventDeliverySchema) &&
        Objects.equals(this.expirationTimeUtc, eventSubscriptionUpdateParameters.expirationTimeUtc) &&
        Objects.equals(this.filter, eventSubscriptionUpdateParameters.filter) &&
        Objects.equals(this.labels, eventSubscriptionUpdateParameters.labels) &&
        Objects.equals(this.retryPolicy, eventSubscriptionUpdateParameters.retryPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deadLetterDestination, destination, eventDeliverySchema, expirationTimeUtc, filter, labels, retryPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventSubscriptionUpdateParameters {\n");
    sb.append("    deadLetterDestination: ").append(toIndentedString(deadLetterDestination)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    eventDeliverySchema: ").append(toIndentedString(eventDeliverySchema)).append("\n");
    sb.append("    expirationTimeUtc: ").append(toIndentedString(expirationTimeUtc)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    retryPolicy: ").append(toIndentedString(retryPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deadLetterDestination");
    openapiFields.add("destination");
    openapiFields.add("eventDeliverySchema");
    openapiFields.add("expirationTimeUtc");
    openapiFields.add("filter");
    openapiFields.add("labels");
    openapiFields.add("retryPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventSubscriptionUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventSubscriptionUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventSubscriptionUpdateParameters is not found in the empty JSON string", EventSubscriptionUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventSubscriptionUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventSubscriptionUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deadLetterDestination`
      if (jsonObj.get("deadLetterDestination") != null && !jsonObj.get("deadLetterDestination").isJsonNull()) {
        DeadLetterDestination.validateJsonElement(jsonObj.get("deadLetterDestination"));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        EventSubscriptionDestination.validateJsonElement(jsonObj.get("destination"));
      }
      if ((jsonObj.get("eventDeliverySchema") != null && !jsonObj.get("eventDeliverySchema").isJsonNull()) && !jsonObj.get("eventDeliverySchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventDeliverySchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventDeliverySchema").toString()));
      }
      // validate the optional field `eventDeliverySchema`
      if (jsonObj.get("eventDeliverySchema") != null && !jsonObj.get("eventDeliverySchema").isJsonNull()) {
        EventDeliverySchemaEnum.validateJsonElement(jsonObj.get("eventDeliverySchema"));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        EventSubscriptionFilter.validateJsonElement(jsonObj.get("filter"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // validate the optional field `retryPolicy`
      if (jsonObj.get("retryPolicy") != null && !jsonObj.get("retryPolicy").isJsonNull()) {
        RetryPolicy.validateJsonElement(jsonObj.get("retryPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventSubscriptionUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventSubscriptionUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventSubscriptionUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventSubscriptionUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<EventSubscriptionUpdateParameters>() {
           @Override
           public void write(JsonWriter out, EventSubscriptionUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventSubscriptionUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventSubscriptionUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventSubscriptionUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to EventSubscriptionUpdateParameters
   */
  public static EventSubscriptionUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventSubscriptionUpdateParameters.class);
  }

  /**
   * Convert an instance of EventSubscriptionUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

