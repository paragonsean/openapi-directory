/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Domain;
import org.openapitools.client.model.DomainRegenerateKeyRequest;
import org.openapitools.client.model.DomainSharedAccessKeys;
import org.openapitools.client.model.DomainUpdateParameters;
import org.openapitools.client.model.DomainsListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainsCreateOrUpdate
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainInfo Domain information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, Domain domainInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainInfo;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, Domain domainInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'domainInfo' is set
        if (domainInfo == null) {
            throw new ApiException("Missing the required parameter 'domainInfo' when calling domainsCreateOrUpdate(Async)");
        }

        return domainsCreateOrUpdateCall(subscriptionId, resourceGroupName, domainName, apiVersion, domainInfo, _callback);

    }

    /**
     * Create or update a domain.
     * Asynchronously creates or updates a new domain with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainInfo Domain information. (required)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Domain domainsCreateOrUpdate(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, Domain domainInfo) throws ApiException {
        ApiResponse<Domain> localVarResp = domainsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, domainName, apiVersion, domainInfo);
        return localVarResp.getData();
    }

    /**
     * Create or update a domain.
     * Asynchronously creates or updates a new domain with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainInfo Domain information. (required)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Domain> domainsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, Domain domainInfo) throws ApiException {
        okhttp3.Call localVarCall = domainsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, domainInfo, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a domain. (asynchronously)
     * Asynchronously creates or updates a new domain with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainInfo Domain information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, Domain domainInfo, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, domainInfo, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsDelete
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsDeleteCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsDelete(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsDelete(Async)");
        }

        return domainsDeleteCall(subscriptionId, resourceGroupName, domainName, apiVersion, _callback);

    }

    /**
     * Delete a domain.
     * Delete existing domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void domainsDelete(String subscriptionId, String resourceGroupName, String domainName, String apiVersion) throws ApiException {
        domainsDeleteWithHttpInfo(subscriptionId, resourceGroupName, domainName, apiVersion);
    }

    /**
     * Delete a domain.
     * Delete existing domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> domainsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a domain. (asynchronously)
     * Delete existing domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsDeleteAsync(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsGet
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsGet(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsGet(Async)");
        }

        return domainsGetCall(subscriptionId, resourceGroupName, domainName, apiVersion, _callback);

    }

    /**
     * Get a domain.
     * Get properties of a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Domain domainsGet(String subscriptionId, String resourceGroupName, String domainName, String apiVersion) throws ApiException {
        ApiResponse<Domain> localVarResp = domainsGetWithHttpInfo(subscriptionId, resourceGroupName, domainName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a domain.
     * Get properties of a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Domain> domainsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainsGetValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a domain. (asynchronously)
     * Get properties of a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetAsync(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsGetValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsListByResourceGroup
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsListByResourceGroup(Async)");
        }

        return domainsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, _callback);

    }

    /**
     * List domains under a resource group.
     * List all the domains under a resource group.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return DomainsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public DomainsListResult domainsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top) throws ApiException {
        ApiResponse<DomainsListResult> localVarResp = domainsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter, $top);
        return localVarResp.getData();
    }

    /**
     * List domains under a resource group.
     * List all the domains under a resource group.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return ApiResponse&lt;DomainsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainsListResult> domainsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = domainsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, null);
        Type localVarReturnType = new TypeToken<DomainsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List domains under a resource group. (asynchronously)
     * List all the domains under a resource group.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, final ApiCallback<DomainsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, _callback);
        Type localVarReturnType = new TypeToken<DomainsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsListBySubscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsListBySubscriptionCall(String subscriptionId, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/domains"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, String $filter, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsListBySubscription(Async)");
        }

        return domainsListBySubscriptionCall(subscriptionId, apiVersion, $filter, $top, _callback);

    }

    /**
     * List domains under an Azure subscription.
     * List all the domains under an Azure subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return DomainsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public DomainsListResult domainsListBySubscription(String subscriptionId, String apiVersion, String $filter, Integer $top) throws ApiException {
        ApiResponse<DomainsListResult> localVarResp = domainsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, $filter, $top);
        return localVarResp.getData();
    }

    /**
     * List domains under an Azure subscription.
     * List all the domains under an Azure subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @return ApiResponse&lt;DomainsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainsListResult> domainsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, String $filter, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = domainsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, null);
        Type localVarReturnType = new TypeToken<DomainsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List domains under an Azure subscription. (asynchronously)
     * List all the domains under an Azure subscription.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param $filter The query used to filter the search results using OData syntax. Filtering is permitted on the &#39;name&#39; property only and with limited number of OData operations. These operations are: the &#39;contains&#39; function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter&#x3D;contains(namE, &#39;PATTERN&#39;) and name ne &#39;PATTERN-1&#39;. The following is not a valid filter example: $filter&#x3D;location eq &#39;westus&#39;. (optional)
     * @param $top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsListBySubscriptionAsync(String subscriptionId, String apiVersion, String $filter, Integer $top, final ApiCallback<DomainsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, _callback);
        Type localVarReturnType = new TypeToken<DomainsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsListSharedAccessKeys
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsListSharedAccessKeysCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsListSharedAccessKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsListSharedAccessKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsListSharedAccessKeys(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsListSharedAccessKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsListSharedAccessKeys(Async)");
        }

        return domainsListSharedAccessKeysCall(subscriptionId, resourceGroupName, domainName, apiVersion, _callback);

    }

    /**
     * List keys for a domain.
     * List the two keys used to publish to a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return DomainSharedAccessKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public DomainSharedAccessKeys domainsListSharedAccessKeys(String subscriptionId, String resourceGroupName, String domainName, String apiVersion) throws ApiException {
        ApiResponse<DomainSharedAccessKeys> localVarResp = domainsListSharedAccessKeysWithHttpInfo(subscriptionId, resourceGroupName, domainName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List keys for a domain.
     * List the two keys used to publish to a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;DomainSharedAccessKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainSharedAccessKeys> domainsListSharedAccessKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainsListSharedAccessKeysValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DomainSharedAccessKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List keys for a domain. (asynchronously)
     * List the two keys used to publish to a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsListSharedAccessKeysAsync(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, final ApiCallback<DomainSharedAccessKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsListSharedAccessKeysValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DomainSharedAccessKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsRegenerateKey
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsRegenerateKeyCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainRegenerateKeyRequest regenerateKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = regenerateKeyRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/regenerateKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsRegenerateKeyValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainRegenerateKeyRequest regenerateKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsRegenerateKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsRegenerateKey(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsRegenerateKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsRegenerateKey(Async)");
        }

        // verify the required parameter 'regenerateKeyRequest' is set
        if (regenerateKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'regenerateKeyRequest' when calling domainsRegenerateKey(Async)");
        }

        return domainsRegenerateKeyCall(subscriptionId, resourceGroupName, domainName, apiVersion, regenerateKeyRequest, _callback);

    }

    /**
     * Regenerate key for a domain.
     * Regenerate a shared access key for a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @return DomainSharedAccessKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public DomainSharedAccessKeys domainsRegenerateKey(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainRegenerateKeyRequest regenerateKeyRequest) throws ApiException {
        ApiResponse<DomainSharedAccessKeys> localVarResp = domainsRegenerateKeyWithHttpInfo(subscriptionId, resourceGroupName, domainName, apiVersion, regenerateKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Regenerate key for a domain.
     * Regenerate a shared access key for a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @return ApiResponse&lt;DomainSharedAccessKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainSharedAccessKeys> domainsRegenerateKeyWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainRegenerateKeyRequest regenerateKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = domainsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, regenerateKeyRequest, null);
        Type localVarReturnType = new TypeToken<DomainSharedAccessKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate key for a domain. (asynchronously)
     * Regenerate a shared access key for a domain.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param regenerateKeyRequest Request body to regenerate key. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsRegenerateKeyAsync(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainRegenerateKeyRequest regenerateKeyRequest, final ApiCallback<DomainSharedAccessKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsRegenerateKeyValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, regenerateKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<DomainSharedAccessKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsUpdate
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainUpdateParameters Domain update information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Domain update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdateCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainUpdateParameters domainUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainUpdateParameters domainUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsUpdate(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsUpdate(Async)");
        }

        // verify the required parameter 'domainUpdateParameters' is set
        if (domainUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'domainUpdateParameters' when calling domainsUpdate(Async)");
        }

        return domainsUpdateCall(subscriptionId, resourceGroupName, domainName, apiVersion, domainUpdateParameters, _callback);

    }

    /**
     * Update a domain.
     * Asynchronously updates a domain with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainUpdateParameters Domain update information. (required)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Domain update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public Domain domainsUpdate(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainUpdateParameters domainUpdateParameters) throws ApiException {
        ApiResponse<Domain> localVarResp = domainsUpdateWithHttpInfo(subscriptionId, resourceGroupName, domainName, apiVersion, domainUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update a domain.
     * Asynchronously updates a domain with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainUpdateParameters Domain update information. (required)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Domain update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Domain> domainsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainUpdateParameters domainUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = domainsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, domainUpdateParameters, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a domain. (asynchronously)
     * Asynchronously updates a domain with the specified parameters.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param domainName Name of the domain. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param domainUpdateParameters Domain update information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Domain update request accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdateAsync(String subscriptionId, String resourceGroupName, String domainName, String apiVersion, DomainUpdateParameters domainUpdateParameters, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, domainName, apiVersion, domainUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
