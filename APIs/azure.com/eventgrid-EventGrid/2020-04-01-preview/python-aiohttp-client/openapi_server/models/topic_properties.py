# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbound_ip_rule import InboundIpRule
from openapi_server.models.input_schema_mapping import InputSchemaMapping
from openapi_server import util


class TopicProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_traffic_from_all_ips: bool=None, endpoint: str=None, inbound_ip_rules: List[InboundIpRule]=None, input_schema: str='EventGridSchema', input_schema_mapping: InputSchemaMapping=None, metric_resource_id: str=None, provisioning_state: str=None):
        """TopicProperties - a model defined in OpenAPI

        :param allow_traffic_from_all_ips: The allow_traffic_from_all_ips of this TopicProperties.
        :param endpoint: The endpoint of this TopicProperties.
        :param inbound_ip_rules: The inbound_ip_rules of this TopicProperties.
        :param input_schema: The input_schema of this TopicProperties.
        :param input_schema_mapping: The input_schema_mapping of this TopicProperties.
        :param metric_resource_id: The metric_resource_id of this TopicProperties.
        :param provisioning_state: The provisioning_state of this TopicProperties.
        """
        self.openapi_types = {
            'allow_traffic_from_all_ips': bool,
            'endpoint': str,
            'inbound_ip_rules': List[InboundIpRule],
            'input_schema': str,
            'input_schema_mapping': InputSchemaMapping,
            'metric_resource_id': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'allow_traffic_from_all_ips': 'allowTrafficFromAllIPs',
            'endpoint': 'endpoint',
            'inbound_ip_rules': 'inboundIpRules',
            'input_schema': 'inputSchema',
            'input_schema_mapping': 'inputSchemaMapping',
            'metric_resource_id': 'metricResourceId',
            'provisioning_state': 'provisioningState'
        }

        self._allow_traffic_from_all_ips = allow_traffic_from_all_ips
        self._endpoint = endpoint
        self._inbound_ip_rules = inbound_ip_rules
        self._input_schema = input_schema
        self._input_schema_mapping = input_schema_mapping
        self._metric_resource_id = metric_resource_id
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopicProperties of this TopicProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_traffic_from_all_ips(self):
        """Gets the allow_traffic_from_all_ips of this TopicProperties.

        This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.

        :return: The allow_traffic_from_all_ips of this TopicProperties.
        :rtype: bool
        """
        return self._allow_traffic_from_all_ips

    @allow_traffic_from_all_ips.setter
    def allow_traffic_from_all_ips(self, allow_traffic_from_all_ips):
        """Sets the allow_traffic_from_all_ips of this TopicProperties.

        This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.

        :param allow_traffic_from_all_ips: The allow_traffic_from_all_ips of this TopicProperties.
        :type allow_traffic_from_all_ips: bool
        """

        self._allow_traffic_from_all_ips = allow_traffic_from_all_ips

    @property
    def endpoint(self):
        """Gets the endpoint of this TopicProperties.

        Endpoint for the topic.

        :return: The endpoint of this TopicProperties.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this TopicProperties.

        Endpoint for the topic.

        :param endpoint: The endpoint of this TopicProperties.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def inbound_ip_rules(self):
        """Gets the inbound_ip_rules of this TopicProperties.

        This determines the IP filtering rules that ought to be applied when events are received on this topic.

        :return: The inbound_ip_rules of this TopicProperties.
        :rtype: List[InboundIpRule]
        """
        return self._inbound_ip_rules

    @inbound_ip_rules.setter
    def inbound_ip_rules(self, inbound_ip_rules):
        """Sets the inbound_ip_rules of this TopicProperties.

        This determines the IP filtering rules that ought to be applied when events are received on this topic.

        :param inbound_ip_rules: The inbound_ip_rules of this TopicProperties.
        :type inbound_ip_rules: List[InboundIpRule]
        """

        self._inbound_ip_rules = inbound_ip_rules

    @property
    def input_schema(self):
        """Gets the input_schema of this TopicProperties.

        This determines the format that Event Grid should expect for incoming events published to the topic.

        :return: The input_schema of this TopicProperties.
        :rtype: str
        """
        return self._input_schema

    @input_schema.setter
    def input_schema(self, input_schema):
        """Sets the input_schema of this TopicProperties.

        This determines the format that Event Grid should expect for incoming events published to the topic.

        :param input_schema: The input_schema of this TopicProperties.
        :type input_schema: str
        """
        allowed_values = ["EventGridSchema", "CustomEventSchema", "CloudEventSchemaV1_0"]  # noqa: E501
        if input_schema not in allowed_values:
            raise ValueError(
                "Invalid value for `input_schema` ({0}), must be one of {1}"
                .format(input_schema, allowed_values)
            )

        self._input_schema = input_schema

    @property
    def input_schema_mapping(self):
        """Gets the input_schema_mapping of this TopicProperties.


        :return: The input_schema_mapping of this TopicProperties.
        :rtype: InputSchemaMapping
        """
        return self._input_schema_mapping

    @input_schema_mapping.setter
    def input_schema_mapping(self, input_schema_mapping):
        """Sets the input_schema_mapping of this TopicProperties.


        :param input_schema_mapping: The input_schema_mapping of this TopicProperties.
        :type input_schema_mapping: InputSchemaMapping
        """

        self._input_schema_mapping = input_schema_mapping

    @property
    def metric_resource_id(self):
        """Gets the metric_resource_id of this TopicProperties.

        Metric resource id for the topic.

        :return: The metric_resource_id of this TopicProperties.
        :rtype: str
        """
        return self._metric_resource_id

    @metric_resource_id.setter
    def metric_resource_id(self, metric_resource_id):
        """Sets the metric_resource_id of this TopicProperties.

        Metric resource id for the topic.

        :param metric_resource_id: The metric_resource_id of this TopicProperties.
        :type metric_resource_id: str
        """

        self._metric_resource_id = metric_resource_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this TopicProperties.

        Provisioning state of the topic.

        :return: The provisioning_state of this TopicProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this TopicProperties.

        Provisioning state of the topic.

        :param provisioning_state: The provisioning_state of this TopicProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Canceled", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
