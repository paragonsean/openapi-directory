# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DomainRegenerateKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_name: str=None):
        """DomainRegenerateKeyRequest - a model defined in OpenAPI

        :param key_name: The key_name of this DomainRegenerateKeyRequest.
        """
        self.openapi_types = {
            'key_name': str
        }

        self.attribute_map = {
            'key_name': 'keyName'
        }

        self._key_name = key_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainRegenerateKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainRegenerateKeyRequest of this DomainRegenerateKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_name(self):
        """Gets the key_name of this DomainRegenerateKeyRequest.

        Key name to regenerate key1 or key2.

        :return: The key_name of this DomainRegenerateKeyRequest.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this DomainRegenerateKeyRequest.

        Key name to regenerate key1 or key2.

        :param key_name: The key_name of this DomainRegenerateKeyRequest.
        :type key_name: str
        """
        if key_name is None:
            raise ValueError("Invalid value for `key_name`, must not be `None`")

        self._key_name = key_name
