# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbound_ip_rule import InboundIpRule
from openapi_server import util


class TopicUpdateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_traffic_from_all_ips: bool=None, inbound_ip_rules: List[InboundIpRule]=None, tags: Dict[str, str]=None):
        """TopicUpdateParameters - a model defined in OpenAPI

        :param allow_traffic_from_all_ips: The allow_traffic_from_all_ips of this TopicUpdateParameters.
        :param inbound_ip_rules: The inbound_ip_rules of this TopicUpdateParameters.
        :param tags: The tags of this TopicUpdateParameters.
        """
        self.openapi_types = {
            'allow_traffic_from_all_ips': bool,
            'inbound_ip_rules': List[InboundIpRule],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'allow_traffic_from_all_ips': 'allowTrafficFromAllIPs',
            'inbound_ip_rules': 'inboundIpRules',
            'tags': 'tags'
        }

        self._allow_traffic_from_all_ips = allow_traffic_from_all_ips
        self._inbound_ip_rules = inbound_ip_rules
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicUpdateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopicUpdateParameters of this TopicUpdateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_traffic_from_all_ips(self):
        """Gets the allow_traffic_from_all_ips of this TopicUpdateParameters.

        This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.

        :return: The allow_traffic_from_all_ips of this TopicUpdateParameters.
        :rtype: bool
        """
        return self._allow_traffic_from_all_ips

    @allow_traffic_from_all_ips.setter
    def allow_traffic_from_all_ips(self, allow_traffic_from_all_ips):
        """Sets the allow_traffic_from_all_ips of this TopicUpdateParameters.

        This determines if IP filtering rules ought to be evaluated or not. By default it will not evaluate and will allow traffic from all IPs.

        :param allow_traffic_from_all_ips: The allow_traffic_from_all_ips of this TopicUpdateParameters.
        :type allow_traffic_from_all_ips: bool
        """

        self._allow_traffic_from_all_ips = allow_traffic_from_all_ips

    @property
    def inbound_ip_rules(self):
        """Gets the inbound_ip_rules of this TopicUpdateParameters.

        This determines the IP filtering rules that ought be applied when events are received on this domain.

        :return: The inbound_ip_rules of this TopicUpdateParameters.
        :rtype: List[InboundIpRule]
        """
        return self._inbound_ip_rules

    @inbound_ip_rules.setter
    def inbound_ip_rules(self, inbound_ip_rules):
        """Sets the inbound_ip_rules of this TopicUpdateParameters.

        This determines the IP filtering rules that ought be applied when events are received on this domain.

        :param inbound_ip_rules: The inbound_ip_rules of this TopicUpdateParameters.
        :type inbound_ip_rules: List[InboundIpRule]
        """

        self._inbound_ip_rules = inbound_ip_rules

    @property
    def tags(self):
        """Gets the tags of this TopicUpdateParameters.

        Tags of the resource.

        :return: The tags of this TopicUpdateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TopicUpdateParameters.

        Tags of the resource.

        :param tags: The tags of this TopicUpdateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags
