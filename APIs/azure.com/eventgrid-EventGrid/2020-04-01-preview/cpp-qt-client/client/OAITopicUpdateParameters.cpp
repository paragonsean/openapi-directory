/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicUpdateParameters::OAITopicUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicUpdateParameters::OAITopicUpdateParameters() {
    this->initializeModel();
}

OAITopicUpdateParameters::~OAITopicUpdateParameters() {}

void OAITopicUpdateParameters::initializeModel() {

    m_allow_traffic_from_all_ips_isSet = false;
    m_allow_traffic_from_all_ips_isValid = false;

    m_inbound_ip_rules_isSet = false;
    m_inbound_ip_rules_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAITopicUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicUpdateParameters::fromJsonObject(QJsonObject json) {

    m_allow_traffic_from_all_ips_isValid = ::OpenAPI::fromJsonValue(m_allow_traffic_from_all_ips, json[QString("allowTrafficFromAllIPs")]);
    m_allow_traffic_from_all_ips_isSet = !json[QString("allowTrafficFromAllIPs")].isNull() && m_allow_traffic_from_all_ips_isValid;

    m_inbound_ip_rules_isValid = ::OpenAPI::fromJsonValue(m_inbound_ip_rules, json[QString("inboundIpRules")]);
    m_inbound_ip_rules_isSet = !json[QString("inboundIpRules")].isNull() && m_inbound_ip_rules_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAITopicUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_traffic_from_all_ips_isSet) {
        obj.insert(QString("allowTrafficFromAllIPs"), ::OpenAPI::toJsonValue(m_allow_traffic_from_all_ips));
    }
    if (m_inbound_ip_rules.size() > 0) {
        obj.insert(QString("inboundIpRules"), ::OpenAPI::toJsonValue(m_inbound_ip_rules));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAITopicUpdateParameters::isAllowTrafficFromAllIps() const {
    return m_allow_traffic_from_all_ips;
}
void OAITopicUpdateParameters::setAllowTrafficFromAllIps(const bool &allow_traffic_from_all_ips) {
    m_allow_traffic_from_all_ips = allow_traffic_from_all_ips;
    m_allow_traffic_from_all_ips_isSet = true;
}

bool OAITopicUpdateParameters::is_allow_traffic_from_all_ips_Set() const{
    return m_allow_traffic_from_all_ips_isSet;
}

bool OAITopicUpdateParameters::is_allow_traffic_from_all_ips_Valid() const{
    return m_allow_traffic_from_all_ips_isValid;
}

QList<OAIInboundIpRule> OAITopicUpdateParameters::getInboundIpRules() const {
    return m_inbound_ip_rules;
}
void OAITopicUpdateParameters::setInboundIpRules(const QList<OAIInboundIpRule> &inbound_ip_rules) {
    m_inbound_ip_rules = inbound_ip_rules;
    m_inbound_ip_rules_isSet = true;
}

bool OAITopicUpdateParameters::is_inbound_ip_rules_Set() const{
    return m_inbound_ip_rules_isSet;
}

bool OAITopicUpdateParameters::is_inbound_ip_rules_Valid() const{
    return m_inbound_ip_rules_isValid;
}

QMap<QString, QString> OAITopicUpdateParameters::getTags() const {
    return m_tags;
}
void OAITopicUpdateParameters::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITopicUpdateParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITopicUpdateParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAITopicUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_traffic_from_all_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_ip_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
