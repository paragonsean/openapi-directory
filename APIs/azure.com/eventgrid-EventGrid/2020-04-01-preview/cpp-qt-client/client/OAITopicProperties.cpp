/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITopicProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITopicProperties::OAITopicProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITopicProperties::OAITopicProperties() {
    this->initializeModel();
}

OAITopicProperties::~OAITopicProperties() {}

void OAITopicProperties::initializeModel() {

    m_allow_traffic_from_all_ips_isSet = false;
    m_allow_traffic_from_all_ips_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_inbound_ip_rules_isSet = false;
    m_inbound_ip_rules_isValid = false;

    m_input_schema_isSet = false;
    m_input_schema_isValid = false;

    m_input_schema_mapping_isSet = false;
    m_input_schema_mapping_isValid = false;

    m_metric_resource_id_isSet = false;
    m_metric_resource_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAITopicProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITopicProperties::fromJsonObject(QJsonObject json) {

    m_allow_traffic_from_all_ips_isValid = ::OpenAPI::fromJsonValue(m_allow_traffic_from_all_ips, json[QString("allowTrafficFromAllIPs")]);
    m_allow_traffic_from_all_ips_isSet = !json[QString("allowTrafficFromAllIPs")].isNull() && m_allow_traffic_from_all_ips_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_inbound_ip_rules_isValid = ::OpenAPI::fromJsonValue(m_inbound_ip_rules, json[QString("inboundIpRules")]);
    m_inbound_ip_rules_isSet = !json[QString("inboundIpRules")].isNull() && m_inbound_ip_rules_isValid;

    m_input_schema_isValid = ::OpenAPI::fromJsonValue(m_input_schema, json[QString("inputSchema")]);
    m_input_schema_isSet = !json[QString("inputSchema")].isNull() && m_input_schema_isValid;

    m_input_schema_mapping_isValid = ::OpenAPI::fromJsonValue(m_input_schema_mapping, json[QString("inputSchemaMapping")]);
    m_input_schema_mapping_isSet = !json[QString("inputSchemaMapping")].isNull() && m_input_schema_mapping_isValid;

    m_metric_resource_id_isValid = ::OpenAPI::fromJsonValue(m_metric_resource_id, json[QString("metricResourceId")]);
    m_metric_resource_id_isSet = !json[QString("metricResourceId")].isNull() && m_metric_resource_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAITopicProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITopicProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_traffic_from_all_ips_isSet) {
        obj.insert(QString("allowTrafficFromAllIPs"), ::OpenAPI::toJsonValue(m_allow_traffic_from_all_ips));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_inbound_ip_rules.size() > 0) {
        obj.insert(QString("inboundIpRules"), ::OpenAPI::toJsonValue(m_inbound_ip_rules));
    }
    if (m_input_schema_isSet) {
        obj.insert(QString("inputSchema"), ::OpenAPI::toJsonValue(m_input_schema));
    }
    if (m_input_schema_mapping.isSet()) {
        obj.insert(QString("inputSchemaMapping"), ::OpenAPI::toJsonValue(m_input_schema_mapping));
    }
    if (m_metric_resource_id_isSet) {
        obj.insert(QString("metricResourceId"), ::OpenAPI::toJsonValue(m_metric_resource_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

bool OAITopicProperties::isAllowTrafficFromAllIps() const {
    return m_allow_traffic_from_all_ips;
}
void OAITopicProperties::setAllowTrafficFromAllIps(const bool &allow_traffic_from_all_ips) {
    m_allow_traffic_from_all_ips = allow_traffic_from_all_ips;
    m_allow_traffic_from_all_ips_isSet = true;
}

bool OAITopicProperties::is_allow_traffic_from_all_ips_Set() const{
    return m_allow_traffic_from_all_ips_isSet;
}

bool OAITopicProperties::is_allow_traffic_from_all_ips_Valid() const{
    return m_allow_traffic_from_all_ips_isValid;
}

QString OAITopicProperties::getEndpoint() const {
    return m_endpoint;
}
void OAITopicProperties::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAITopicProperties::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAITopicProperties::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QList<OAIInboundIpRule> OAITopicProperties::getInboundIpRules() const {
    return m_inbound_ip_rules;
}
void OAITopicProperties::setInboundIpRules(const QList<OAIInboundIpRule> &inbound_ip_rules) {
    m_inbound_ip_rules = inbound_ip_rules;
    m_inbound_ip_rules_isSet = true;
}

bool OAITopicProperties::is_inbound_ip_rules_Set() const{
    return m_inbound_ip_rules_isSet;
}

bool OAITopicProperties::is_inbound_ip_rules_Valid() const{
    return m_inbound_ip_rules_isValid;
}

QString OAITopicProperties::getInputSchema() const {
    return m_input_schema;
}
void OAITopicProperties::setInputSchema(const QString &input_schema) {
    m_input_schema = input_schema;
    m_input_schema_isSet = true;
}

bool OAITopicProperties::is_input_schema_Set() const{
    return m_input_schema_isSet;
}

bool OAITopicProperties::is_input_schema_Valid() const{
    return m_input_schema_isValid;
}

OAIInputSchemaMapping OAITopicProperties::getInputSchemaMapping() const {
    return m_input_schema_mapping;
}
void OAITopicProperties::setInputSchemaMapping(const OAIInputSchemaMapping &input_schema_mapping) {
    m_input_schema_mapping = input_schema_mapping;
    m_input_schema_mapping_isSet = true;
}

bool OAITopicProperties::is_input_schema_mapping_Set() const{
    return m_input_schema_mapping_isSet;
}

bool OAITopicProperties::is_input_schema_mapping_Valid() const{
    return m_input_schema_mapping_isValid;
}

QString OAITopicProperties::getMetricResourceId() const {
    return m_metric_resource_id;
}
void OAITopicProperties::setMetricResourceId(const QString &metric_resource_id) {
    m_metric_resource_id = metric_resource_id;
    m_metric_resource_id_isSet = true;
}

bool OAITopicProperties::is_metric_resource_id_Set() const{
    return m_metric_resource_id_isSet;
}

bool OAITopicProperties::is_metric_resource_id_Valid() const{
    return m_metric_resource_id_isValid;
}

QString OAITopicProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAITopicProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAITopicProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAITopicProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAITopicProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_traffic_from_all_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_ip_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_schema_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_schema_mapping.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITopicProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
