/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventSubscriptionFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventSubscriptionFilter::OAIEventSubscriptionFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventSubscriptionFilter::OAIEventSubscriptionFilter() {
    this->initializeModel();
}

OAIEventSubscriptionFilter::~OAIEventSubscriptionFilter() {}

void OAIEventSubscriptionFilter::initializeModel() {

    m_advanced_filters_isSet = false;
    m_advanced_filters_isValid = false;

    m_included_event_types_isSet = false;
    m_included_event_types_isValid = false;

    m_is_subject_case_sensitive_isSet = false;
    m_is_subject_case_sensitive_isValid = false;

    m_subject_begins_with_isSet = false;
    m_subject_begins_with_isValid = false;

    m_subject_ends_with_isSet = false;
    m_subject_ends_with_isValid = false;
}

void OAIEventSubscriptionFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventSubscriptionFilter::fromJsonObject(QJsonObject json) {

    m_advanced_filters_isValid = ::OpenAPI::fromJsonValue(m_advanced_filters, json[QString("advancedFilters")]);
    m_advanced_filters_isSet = !json[QString("advancedFilters")].isNull() && m_advanced_filters_isValid;

    m_included_event_types_isValid = ::OpenAPI::fromJsonValue(m_included_event_types, json[QString("includedEventTypes")]);
    m_included_event_types_isSet = !json[QString("includedEventTypes")].isNull() && m_included_event_types_isValid;

    m_is_subject_case_sensitive_isValid = ::OpenAPI::fromJsonValue(m_is_subject_case_sensitive, json[QString("isSubjectCaseSensitive")]);
    m_is_subject_case_sensitive_isSet = !json[QString("isSubjectCaseSensitive")].isNull() && m_is_subject_case_sensitive_isValid;

    m_subject_begins_with_isValid = ::OpenAPI::fromJsonValue(m_subject_begins_with, json[QString("subjectBeginsWith")]);
    m_subject_begins_with_isSet = !json[QString("subjectBeginsWith")].isNull() && m_subject_begins_with_isValid;

    m_subject_ends_with_isValid = ::OpenAPI::fromJsonValue(m_subject_ends_with, json[QString("subjectEndsWith")]);
    m_subject_ends_with_isSet = !json[QString("subjectEndsWith")].isNull() && m_subject_ends_with_isValid;
}

QString OAIEventSubscriptionFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventSubscriptionFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_filters.size() > 0) {
        obj.insert(QString("advancedFilters"), ::OpenAPI::toJsonValue(m_advanced_filters));
    }
    if (m_included_event_types.size() > 0) {
        obj.insert(QString("includedEventTypes"), ::OpenAPI::toJsonValue(m_included_event_types));
    }
    if (m_is_subject_case_sensitive_isSet) {
        obj.insert(QString("isSubjectCaseSensitive"), ::OpenAPI::toJsonValue(m_is_subject_case_sensitive));
    }
    if (m_subject_begins_with_isSet) {
        obj.insert(QString("subjectBeginsWith"), ::OpenAPI::toJsonValue(m_subject_begins_with));
    }
    if (m_subject_ends_with_isSet) {
        obj.insert(QString("subjectEndsWith"), ::OpenAPI::toJsonValue(m_subject_ends_with));
    }
    return obj;
}

QList<OAIAdvancedFilter> OAIEventSubscriptionFilter::getAdvancedFilters() const {
    return m_advanced_filters;
}
void OAIEventSubscriptionFilter::setAdvancedFilters(const QList<OAIAdvancedFilter> &advanced_filters) {
    m_advanced_filters = advanced_filters;
    m_advanced_filters_isSet = true;
}

bool OAIEventSubscriptionFilter::is_advanced_filters_Set() const{
    return m_advanced_filters_isSet;
}

bool OAIEventSubscriptionFilter::is_advanced_filters_Valid() const{
    return m_advanced_filters_isValid;
}

QList<QString> OAIEventSubscriptionFilter::getIncludedEventTypes() const {
    return m_included_event_types;
}
void OAIEventSubscriptionFilter::setIncludedEventTypes(const QList<QString> &included_event_types) {
    m_included_event_types = included_event_types;
    m_included_event_types_isSet = true;
}

bool OAIEventSubscriptionFilter::is_included_event_types_Set() const{
    return m_included_event_types_isSet;
}

bool OAIEventSubscriptionFilter::is_included_event_types_Valid() const{
    return m_included_event_types_isValid;
}

bool OAIEventSubscriptionFilter::isIsSubjectCaseSensitive() const {
    return m_is_subject_case_sensitive;
}
void OAIEventSubscriptionFilter::setIsSubjectCaseSensitive(const bool &is_subject_case_sensitive) {
    m_is_subject_case_sensitive = is_subject_case_sensitive;
    m_is_subject_case_sensitive_isSet = true;
}

bool OAIEventSubscriptionFilter::is_is_subject_case_sensitive_Set() const{
    return m_is_subject_case_sensitive_isSet;
}

bool OAIEventSubscriptionFilter::is_is_subject_case_sensitive_Valid() const{
    return m_is_subject_case_sensitive_isValid;
}

QString OAIEventSubscriptionFilter::getSubjectBeginsWith() const {
    return m_subject_begins_with;
}
void OAIEventSubscriptionFilter::setSubjectBeginsWith(const QString &subject_begins_with) {
    m_subject_begins_with = subject_begins_with;
    m_subject_begins_with_isSet = true;
}

bool OAIEventSubscriptionFilter::is_subject_begins_with_Set() const{
    return m_subject_begins_with_isSet;
}

bool OAIEventSubscriptionFilter::is_subject_begins_with_Valid() const{
    return m_subject_begins_with_isValid;
}

QString OAIEventSubscriptionFilter::getSubjectEndsWith() const {
    return m_subject_ends_with;
}
void OAIEventSubscriptionFilter::setSubjectEndsWith(const QString &subject_ends_with) {
    m_subject_ends_with = subject_ends_with;
    m_subject_ends_with_isSet = true;
}

bool OAIEventSubscriptionFilter::is_subject_ends_with_Set() const{
    return m_subject_ends_with_isSet;
}

bool OAIEventSubscriptionFilter::is_subject_ends_with_Valid() const{
    return m_subject_ends_with_isValid;
}

bool OAIEventSubscriptionFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_event_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_subject_case_sensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_begins_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_ends_with_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventSubscriptionFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
