/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumberInAdvancedFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumberInAdvancedFilter::OAINumberInAdvancedFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumberInAdvancedFilter::OAINumberInAdvancedFilter() {
    this->initializeModel();
}

OAINumberInAdvancedFilter::~OAINumberInAdvancedFilter() {}

void OAINumberInAdvancedFilter::initializeModel() {

    m_values_isSet = false;
    m_values_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_operator_type_isSet = false;
    m_operator_type_isValid = false;
}

void OAINumberInAdvancedFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumberInAdvancedFilter::fromJsonObject(QJsonObject json) {

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_operator_type_isValid = ::OpenAPI::fromJsonValue(m_operator_type, json[QString("operatorType")]);
    m_operator_type_isSet = !json[QString("operatorType")].isNull() && m_operator_type_isValid;
}

QString OAINumberInAdvancedFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumberInAdvancedFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_operator_type_isSet) {
        obj.insert(QString("operatorType"), ::OpenAPI::toJsonValue(m_operator_type));
    }
    return obj;
}

QList<double> OAINumberInAdvancedFilter::getValues() const {
    return m_values;
}
void OAINumberInAdvancedFilter::setValues(const QList<double> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAINumberInAdvancedFilter::is_values_Set() const{
    return m_values_isSet;
}

bool OAINumberInAdvancedFilter::is_values_Valid() const{
    return m_values_isValid;
}

QString OAINumberInAdvancedFilter::getKey() const {
    return m_key;
}
void OAINumberInAdvancedFilter::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAINumberInAdvancedFilter::is_key_Set() const{
    return m_key_isSet;
}

bool OAINumberInAdvancedFilter::is_key_Valid() const{
    return m_key_isValid;
}

QString OAINumberInAdvancedFilter::getOperatorType() const {
    return m_operator_type;
}
void OAINumberInAdvancedFilter::setOperatorType(const QString &operator_type) {
    m_operator_type = operator_type;
    m_operator_type_isSet = true;
}

bool OAINumberInAdvancedFilter::is_operator_type_Set() const{
    return m_operator_type_isSet;
}

bool OAINumberInAdvancedFilter::is_operator_type_Valid() const{
    return m_operator_type_isValid;
}

bool OAINumberInAdvancedFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumberInAdvancedFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operator_type_isValid && true;
}

} // namespace OpenAPI
