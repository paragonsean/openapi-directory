/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2020-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TopicTypeProperties model module.
 * @module model/TopicTypeProperties
 * @version 2020-04-01-preview
 */
class TopicTypeProperties {
    /**
     * Constructs a new <code>TopicTypeProperties</code>.
     * Properties of a topic type.
     * @alias module:model/TopicTypeProperties
     */
    constructor() { 
        
        TopicTypeProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TopicTypeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TopicTypeProperties} obj Optional instance to populate.
     * @return {module:model/TopicTypeProperties} The populated <code>TopicTypeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TopicTypeProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceRegionType')) {
                obj['resourceRegionType'] = ApiClient.convertToType(data['resourceRegionType'], 'String');
            }
            if (data.hasOwnProperty('sourceResourceFormat')) {
                obj['sourceResourceFormat'] = ApiClient.convertToType(data['sourceResourceFormat'], 'String');
            }
            if (data.hasOwnProperty('supportedLocations')) {
                obj['supportedLocations'] = ApiClient.convertToType(data['supportedLocations'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TopicTypeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TopicTypeProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceRegionType'] && !(typeof data['resourceRegionType'] === 'string' || data['resourceRegionType'] instanceof String)) {
            throw new Error("Expected the field `resourceRegionType` to be a primitive type in the JSON string but got " + data['resourceRegionType']);
        }
        // ensure the json data is a string
        if (data['sourceResourceFormat'] && !(typeof data['sourceResourceFormat'] === 'string' || data['sourceResourceFormat'] instanceof String)) {
            throw new Error("Expected the field `sourceResourceFormat` to be a primitive type in the JSON string but got " + data['sourceResourceFormat']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedLocations'])) {
            throw new Error("Expected the field `supportedLocations` to be an array in the JSON data but got " + data['supportedLocations']);
        }

        return true;
    }


}



/**
 * Description of the topic type.
 * @member {String} description
 */
TopicTypeProperties.prototype['description'] = undefined;

/**
 * Display Name for the topic type.
 * @member {String} displayName
 */
TopicTypeProperties.prototype['displayName'] = undefined;

/**
 * Namespace of the provider of the topic type.
 * @member {String} provider
 */
TopicTypeProperties.prototype['provider'] = undefined;

/**
 * Provisioning state of the topic type
 * @member {module:model/TopicTypeProperties.ProvisioningStateEnum} provisioningState
 */
TopicTypeProperties.prototype['provisioningState'] = undefined;

/**
 * Region type of the resource.
 * @member {module:model/TopicTypeProperties.ResourceRegionTypeEnum} resourceRegionType
 */
TopicTypeProperties.prototype['resourceRegionType'] = undefined;

/**
 * Source resource format.
 * @member {String} sourceResourceFormat
 */
TopicTypeProperties.prototype['sourceResourceFormat'] = undefined;

/**
 * List of locations supported by this topic type.
 * @member {Array.<String>} supportedLocations
 */
TopicTypeProperties.prototype['supportedLocations'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
TopicTypeProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>resourceRegionType</code> property.
 * @enum {String}
 * @readonly
 */
TopicTypeProperties['ResourceRegionTypeEnum'] = {

    /**
     * value: "RegionalResource"
     * @const
     */
    "RegionalResource": "RegionalResource",

    /**
     * value: "GlobalResource"
     * @const
     */
    "GlobalResource": "GlobalResource"
};



export default TopicTypeProperties;

