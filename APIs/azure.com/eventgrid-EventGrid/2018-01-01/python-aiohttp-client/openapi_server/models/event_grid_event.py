# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventGridEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, data_version: str=None, event_time: datetime=None, event_type: str=None, id: str=None, metadata_version: str=None, subject: str=None, topic: str=None):
        """EventGridEvent - a model defined in OpenAPI

        :param data: The data of this EventGridEvent.
        :param data_version: The data_version of this EventGridEvent.
        :param event_time: The event_time of this EventGridEvent.
        :param event_type: The event_type of this EventGridEvent.
        :param id: The id of this EventGridEvent.
        :param metadata_version: The metadata_version of this EventGridEvent.
        :param subject: The subject of this EventGridEvent.
        :param topic: The topic of this EventGridEvent.
        """
        self.openapi_types = {
            'data': object,
            'data_version': str,
            'event_time': datetime,
            'event_type': str,
            'id': str,
            'metadata_version': str,
            'subject': str,
            'topic': str
        }

        self.attribute_map = {
            'data': 'data',
            'data_version': 'dataVersion',
            'event_time': 'eventTime',
            'event_type': 'eventType',
            'id': 'id',
            'metadata_version': 'metadataVersion',
            'subject': 'subject',
            'topic': 'topic'
        }

        self._data = data
        self._data_version = data_version
        self._event_time = event_time
        self._event_type = event_type
        self._id = id
        self._metadata_version = metadata_version
        self._subject = subject
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventGridEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventGridEvent of this EventGridEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this EventGridEvent.

        Event data specific to the event type.

        :return: The data of this EventGridEvent.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EventGridEvent.

        Event data specific to the event type.

        :param data: The data of this EventGridEvent.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def data_version(self):
        """Gets the data_version of this EventGridEvent.

        The schema version of the data object.

        :return: The data_version of this EventGridEvent.
        :rtype: str
        """
        return self._data_version

    @data_version.setter
    def data_version(self, data_version):
        """Sets the data_version of this EventGridEvent.

        The schema version of the data object.

        :param data_version: The data_version of this EventGridEvent.
        :type data_version: str
        """
        if data_version is None:
            raise ValueError("Invalid value for `data_version`, must not be `None`")

        self._data_version = data_version

    @property
    def event_time(self):
        """Gets the event_time of this EventGridEvent.

        The time (in UTC) the event was generated.

        :return: The event_time of this EventGridEvent.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this EventGridEvent.

        The time (in UTC) the event was generated.

        :param event_time: The event_time of this EventGridEvent.
        :type event_time: datetime
        """
        if event_time is None:
            raise ValueError("Invalid value for `event_time`, must not be `None`")

        self._event_time = event_time

    @property
    def event_type(self):
        """Gets the event_type of this EventGridEvent.

        The type of the event that occurred.

        :return: The event_type of this EventGridEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventGridEvent.

        The type of the event that occurred.

        :param event_type: The event_type of this EventGridEvent.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this EventGridEvent.

        An unique identifier for the event.

        :return: The id of this EventGridEvent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventGridEvent.

        An unique identifier for the event.

        :param id: The id of this EventGridEvent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metadata_version(self):
        """Gets the metadata_version of this EventGridEvent.

        The schema version of the event metadata.

        :return: The metadata_version of this EventGridEvent.
        :rtype: str
        """
        return self._metadata_version

    @metadata_version.setter
    def metadata_version(self, metadata_version):
        """Sets the metadata_version of this EventGridEvent.

        The schema version of the event metadata.

        :param metadata_version: The metadata_version of this EventGridEvent.
        :type metadata_version: str
        """

        self._metadata_version = metadata_version

    @property
    def subject(self):
        """Gets the subject of this EventGridEvent.

        A resource path relative to the topic path.

        :return: The subject of this EventGridEvent.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EventGridEvent.

        A resource path relative to the topic path.

        :param subject: The subject of this EventGridEvent.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def topic(self):
        """Gets the topic of this EventGridEvent.

        The resource path of the event source.

        :return: The topic of this EventGridEvent.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this EventGridEvent.

        The resource path of the event source.

        :param topic: The topic of this EventGridEvent.
        :type topic: str
        """

        self._topic = topic
