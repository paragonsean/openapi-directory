/**
 * EventGridClient
 * Azure EventGrid Client
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventGridEvent model module.
 * @module model/EventGridEvent
 * @version 2018-01-01
 */
class EventGridEvent {
    /**
     * Constructs a new <code>EventGridEvent</code>.
     * Properties of an event published to an Event Grid topic.
     * @alias module:model/EventGridEvent
     * @param data {Object} Event data specific to the event type.
     * @param dataVersion {String} The schema version of the data object.
     * @param eventTime {Date} The time (in UTC) the event was generated.
     * @param eventType {String} The type of the event that occurred.
     * @param id {String} An unique identifier for the event.
     * @param subject {String} A resource path relative to the topic path.
     */
    constructor(data, dataVersion, eventTime, eventType, id, subject) { 
        
        EventGridEvent.initialize(this, data, dataVersion, eventTime, eventType, id, subject);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, dataVersion, eventTime, eventType, id, subject) { 
        obj['data'] = data;
        obj['dataVersion'] = dataVersion;
        obj['eventTime'] = eventTime;
        obj['eventType'] = eventType;
        obj['id'] = id;
        obj['subject'] = subject;
    }

    /**
     * Constructs a <code>EventGridEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventGridEvent} obj Optional instance to populate.
     * @return {module:model/EventGridEvent} The populated <code>EventGridEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventGridEvent();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('dataVersion')) {
                obj['dataVersion'] = ApiClient.convertToType(data['dataVersion'], 'String');
            }
            if (data.hasOwnProperty('eventTime')) {
                obj['eventTime'] = ApiClient.convertToType(data['eventTime'], 'Date');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadataVersion')) {
                obj['metadataVersion'] = ApiClient.convertToType(data['metadataVersion'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventGridEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventGridEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventGridEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataVersion'] && !(typeof data['dataVersion'] === 'string' || data['dataVersion'] instanceof String)) {
            throw new Error("Expected the field `dataVersion` to be a primitive type in the JSON string but got " + data['dataVersion']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['metadataVersion'] && !(typeof data['metadataVersion'] === 'string' || data['metadataVersion'] instanceof String)) {
            throw new Error("Expected the field `metadataVersion` to be a primitive type in the JSON string but got " + data['metadataVersion']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}

EventGridEvent.RequiredProperties = ["data", "dataVersion", "eventTime", "eventType", "id", "subject"];

/**
 * Event data specific to the event type.
 * @member {Object} data
 */
EventGridEvent.prototype['data'] = undefined;

/**
 * The schema version of the data object.
 * @member {String} dataVersion
 */
EventGridEvent.prototype['dataVersion'] = undefined;

/**
 * The time (in UTC) the event was generated.
 * @member {Date} eventTime
 */
EventGridEvent.prototype['eventTime'] = undefined;

/**
 * The type of the event that occurred.
 * @member {String} eventType
 */
EventGridEvent.prototype['eventType'] = undefined;

/**
 * An unique identifier for the event.
 * @member {String} id
 */
EventGridEvent.prototype['id'] = undefined;

/**
 * The schema version of the event metadata.
 * @member {String} metadataVersion
 */
EventGridEvent.prototype['metadataVersion'] = undefined;

/**
 * A resource path relative to the topic path.
 * @member {String} subject
 */
EventGridEvent.prototype['subject'] = undefined;

/**
 * The resource path of the event source.
 * @member {String} topic
 */
EventGridEvent.prototype['topic'] = undefined;






export default EventGridEvent;

