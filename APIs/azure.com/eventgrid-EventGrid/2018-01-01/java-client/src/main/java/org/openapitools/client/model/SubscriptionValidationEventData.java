/*
 * EventGridClient
 * Azure EventGrid Client
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.EventGrid.SubscriptionValidationEvent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:37.890784-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubscriptionValidationEventData {
  public static final String SERIALIZED_NAME_VALIDATION_CODE = "validationCode";
  @SerializedName(SERIALIZED_NAME_VALIDATION_CODE)
  private String validationCode;

  public static final String SERIALIZED_NAME_VALIDATION_URL = "validationUrl";
  @SerializedName(SERIALIZED_NAME_VALIDATION_URL)
  private String validationUrl;

  public SubscriptionValidationEventData() {
  }

  public SubscriptionValidationEventData(
     String validationCode, 
     String validationUrl
  ) {
    this();
    this.validationCode = validationCode;
    this.validationUrl = validationUrl;
  }

  /**
   * The validation code sent by Azure Event Grid to validate an event subscription. To complete the validation handshake, the subscriber must either respond with this validation code as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
   * @return validationCode
   */
  @javax.annotation.Nullable
  public String getValidationCode() {
    return validationCode;
  }



  /**
   * The validation URL sent by Azure Event Grid (available starting version 2018-05-01-preview). To complete the validation handshake, the subscriber must either respond with the validationCode as part of the validation response, or perform a GET request on the validationUrl (available starting version 2018-05-01-preview).
   * @return validationUrl
   */
  @javax.annotation.Nullable
  public String getValidationUrl() {
    return validationUrl;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionValidationEventData subscriptionValidationEventData = (SubscriptionValidationEventData) o;
    return Objects.equals(this.validationCode, subscriptionValidationEventData.validationCode) &&
        Objects.equals(this.validationUrl, subscriptionValidationEventData.validationUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validationCode, validationUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionValidationEventData {\n");
    sb.append("    validationCode: ").append(toIndentedString(validationCode)).append("\n");
    sb.append("    validationUrl: ").append(toIndentedString(validationUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validationCode");
    openapiFields.add("validationUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubscriptionValidationEventData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubscriptionValidationEventData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubscriptionValidationEventData is not found in the empty JSON string", SubscriptionValidationEventData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubscriptionValidationEventData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubscriptionValidationEventData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("validationCode") != null && !jsonObj.get("validationCode").isJsonNull()) && !jsonObj.get("validationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationCode").toString()));
      }
      if ((jsonObj.get("validationUrl") != null && !jsonObj.get("validationUrl").isJsonNull()) && !jsonObj.get("validationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validationUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubscriptionValidationEventData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubscriptionValidationEventData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubscriptionValidationEventData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubscriptionValidationEventData.class));

       return (TypeAdapter<T>) new TypeAdapter<SubscriptionValidationEventData>() {
           @Override
           public void write(JsonWriter out, SubscriptionValidationEventData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubscriptionValidationEventData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubscriptionValidationEventData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubscriptionValidationEventData
   * @throws IOException if the JSON string is invalid with respect to SubscriptionValidationEventData
   */
  public static SubscriptionValidationEventData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubscriptionValidationEventData.class);
  }

  /**
   * Convert an instance of SubscriptionValidationEventData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

