/*
 * EventGridClient
 * Azure EventGrid Client
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an event published to an Event Grid topic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:37.890784-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventGridEvent {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_DATA_VERSION = "dataVersion";
  @SerializedName(SERIALIZED_NAME_DATA_VERSION)
  private String dataVersion;

  public static final String SERIALIZED_NAME_EVENT_TIME = "eventTime";
  @SerializedName(SERIALIZED_NAME_EVENT_TIME)
  private OffsetDateTime eventTime;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private String eventType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METADATA_VERSION = "metadataVersion";
  @SerializedName(SERIALIZED_NAME_METADATA_VERSION)
  private String metadataVersion;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public EventGridEvent() {
  }

  public EventGridEvent(
     String metadataVersion
  ) {
    this();
    this.metadataVersion = metadataVersion;
  }

  public EventGridEvent data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Event data specific to the event type.
   * @return data
   */
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public EventGridEvent dataVersion(String dataVersion) {
    this.dataVersion = dataVersion;
    return this;
  }

  /**
   * The schema version of the data object.
   * @return dataVersion
   */
  @javax.annotation.Nonnull
  public String getDataVersion() {
    return dataVersion;
  }

  public void setDataVersion(String dataVersion) {
    this.dataVersion = dataVersion;
  }


  public EventGridEvent eventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    return this;
  }

  /**
   * The time (in UTC) the event was generated.
   * @return eventTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEventTime() {
    return eventTime;
  }

  public void setEventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
  }


  public EventGridEvent eventType(String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * The type of the event that occurred.
   * @return eventType
   */
  @javax.annotation.Nonnull
  public String getEventType() {
    return eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public EventGridEvent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An unique identifier for the event.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * The schema version of the event metadata.
   * @return metadataVersion
   */
  @javax.annotation.Nullable
  public String getMetadataVersion() {
    return metadataVersion;
  }



  public EventGridEvent subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * A resource path relative to the topic path.
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public EventGridEvent topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * The resource path of the event source.
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventGridEvent eventGridEvent = (EventGridEvent) o;
    return Objects.equals(this.data, eventGridEvent.data) &&
        Objects.equals(this.dataVersion, eventGridEvent.dataVersion) &&
        Objects.equals(this.eventTime, eventGridEvent.eventTime) &&
        Objects.equals(this.eventType, eventGridEvent.eventType) &&
        Objects.equals(this.id, eventGridEvent.id) &&
        Objects.equals(this.metadataVersion, eventGridEvent.metadataVersion) &&
        Objects.equals(this.subject, eventGridEvent.subject) &&
        Objects.equals(this.topic, eventGridEvent.topic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, dataVersion, eventTime, eventType, id, metadataVersion, subject, topic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventGridEvent {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    dataVersion: ").append(toIndentedString(dataVersion)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadataVersion: ").append(toIndentedString(metadataVersion)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("dataVersion");
    openapiFields.add("eventTime");
    openapiFields.add("eventType");
    openapiFields.add("id");
    openapiFields.add("metadataVersion");
    openapiFields.add("subject");
    openapiFields.add("topic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("dataVersion");
    openapiRequiredFields.add("eventTime");
    openapiRequiredFields.add("eventType");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("subject");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventGridEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventGridEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventGridEvent is not found in the empty JSON string", EventGridEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventGridEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventGridEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventGridEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataVersion").toString()));
      }
      if (!jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("metadataVersion") != null && !jsonObj.get("metadataVersion").isJsonNull()) && !jsonObj.get("metadataVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataVersion").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventGridEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventGridEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventGridEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventGridEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<EventGridEvent>() {
           @Override
           public void write(JsonWriter out, EventGridEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventGridEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventGridEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventGridEvent
   * @throws IOException if the JSON string is invalid with respect to EventGridEvent
   */
  public static EventGridEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventGridEvent.class);
  }

  /**
   * Convert an instance of EventGridEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

