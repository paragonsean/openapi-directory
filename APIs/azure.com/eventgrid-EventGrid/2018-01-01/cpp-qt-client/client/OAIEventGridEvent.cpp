/**
 * EventGridClient
 * Azure EventGrid Client
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventGridEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventGridEvent::OAIEventGridEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventGridEvent::OAIEventGridEvent() {
    this->initializeModel();
}

OAIEventGridEvent::~OAIEventGridEvent() {}

void OAIEventGridEvent::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_data_version_isSet = false;
    m_data_version_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_version_isSet = false;
    m_metadata_version_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIEventGridEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventGridEvent::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_data_version_isValid = ::OpenAPI::fromJsonValue(m_data_version, json[QString("dataVersion")]);
    m_data_version_isSet = !json[QString("dataVersion")].isNull() && m_data_version_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_version_isValid = ::OpenAPI::fromJsonValue(m_metadata_version, json[QString("metadataVersion")]);
    m_metadata_version_isSet = !json[QString("metadataVersion")].isNull() && m_metadata_version_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIEventGridEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventGridEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_data_version_isSet) {
        obj.insert(QString("dataVersion"), ::OpenAPI::toJsonValue(m_data_version));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_version_isSet) {
        obj.insert(QString("metadataVersion"), ::OpenAPI::toJsonValue(m_metadata_version));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

OAIObject OAIEventGridEvent::getData() const {
    return m_data;
}
void OAIEventGridEvent::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIEventGridEvent::is_data_Set() const{
    return m_data_isSet;
}

bool OAIEventGridEvent::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIEventGridEvent::getDataVersion() const {
    return m_data_version;
}
void OAIEventGridEvent::setDataVersion(const QString &data_version) {
    m_data_version = data_version;
    m_data_version_isSet = true;
}

bool OAIEventGridEvent::is_data_version_Set() const{
    return m_data_version_isSet;
}

bool OAIEventGridEvent::is_data_version_Valid() const{
    return m_data_version_isValid;
}

QDateTime OAIEventGridEvent::getEventTime() const {
    return m_event_time;
}
void OAIEventGridEvent::setEventTime(const QDateTime &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIEventGridEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIEventGridEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIEventGridEvent::getEventType() const {
    return m_event_type;
}
void OAIEventGridEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventGridEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventGridEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEventGridEvent::getId() const {
    return m_id;
}
void OAIEventGridEvent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventGridEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventGridEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventGridEvent::getMetadataVersion() const {
    return m_metadata_version;
}
void OAIEventGridEvent::setMetadataVersion(const QString &metadata_version) {
    m_metadata_version = metadata_version;
    m_metadata_version_isSet = true;
}

bool OAIEventGridEvent::is_metadata_version_Set() const{
    return m_metadata_version_isSet;
}

bool OAIEventGridEvent::is_metadata_version_Valid() const{
    return m_metadata_version_isValid;
}

QString OAIEventGridEvent::getSubject() const {
    return m_subject;
}
void OAIEventGridEvent::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIEventGridEvent::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIEventGridEvent::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAIEventGridEvent::getTopic() const {
    return m_topic;
}
void OAIEventGridEvent::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIEventGridEvent::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIEventGridEvent::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIEventGridEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventGridEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_data_version_isValid && m_event_time_isValid && m_event_type_isValid && m_id_isValid && m_subject_isValid && true;
}

} // namespace OpenAPI
