/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2017-06-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EventSubscription;
import org.openapitools.client.model.EventSubscriptionFullUrl;
import org.openapitools.client.model.EventSubscriptionUpdateParameters;
import org.openapitools.client.model.EventSubscriptionsListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventSubscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventSubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventSubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventSubscriptionsCreate
     * @param scope The scope of the resource to which the event subscription needs to be created. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names must be between 3 and 64 characters in length and use alphanumeric letters only. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsCreateCall(String scope, String eventSubscriptionName, String apiVersion, EventSubscription eventSubscriptionInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventSubscriptionInfo;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "eventSubscriptionName" + "}", localVarApiClient.escapeString(eventSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsCreateValidateBeforeCall(String scope, String eventSubscriptionName, String apiVersion, EventSubscription eventSubscriptionInfo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling eventSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'eventSubscriptionName' is set
        if (eventSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'eventSubscriptionInfo' is set
        if (eventSubscriptionInfo == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionInfo' when calling eventSubscriptionsCreate(Async)");
        }

        return eventSubscriptionsCreateCall(scope, eventSubscriptionName, apiVersion, eventSubscriptionInfo, _callback);

    }

    /**
     * Create an event subscription
     * Asynchronously creates a new event subscription to the specified scope. Existing event subscriptions cannot be updated with this API and should instead use the Update event subscription API.
     * @param scope The scope of the resource to which the event subscription needs to be created. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names must be between 3 and 64 characters in length and use alphanumeric letters only. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscription eventSubscriptionsCreate(String scope, String eventSubscriptionName, String apiVersion, EventSubscription eventSubscriptionInfo) throws ApiException {
        ApiResponse<EventSubscription> localVarResp = eventSubscriptionsCreateWithHttpInfo(scope, eventSubscriptionName, apiVersion, eventSubscriptionInfo);
        return localVarResp.getData();
    }

    /**
     * Create an event subscription
     * Asynchronously creates a new event subscription to the specified scope. Existing event subscriptions cannot be updated with this API and should instead use the Update event subscription API.
     * @param scope The scope of the resource to which the event subscription needs to be created. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names must be between 3 and 64 characters in length and use alphanumeric letters only. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscription> eventSubscriptionsCreateWithHttpInfo(String scope, String eventSubscriptionName, String apiVersion, EventSubscription eventSubscriptionInfo) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsCreateValidateBeforeCall(scope, eventSubscriptionName, apiVersion, eventSubscriptionInfo, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create an event subscription (asynchronously)
     * Asynchronously creates a new event subscription to the specified scope. Existing event subscriptions cannot be updated with this API and should instead use the Update event subscription API.
     * @param scope The scope of the resource to which the event subscription needs to be created. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created. Event subscription names must be between 3 and 64 characters in length and use alphanumeric letters only. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionInfo Event subscription properties containing the destination and filter information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsCreateAsync(String scope, String eventSubscriptionName, String apiVersion, EventSubscription eventSubscriptionInfo, final ApiCallback<EventSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsCreateValidateBeforeCall(scope, eventSubscriptionName, apiVersion, eventSubscriptionInfo, _callback);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsDelete
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsDeleteCall(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "eventSubscriptionName" + "}", localVarApiClient.escapeString(eventSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsDeleteValidateBeforeCall(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling eventSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'eventSubscriptionName' is set
        if (eventSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsDelete(Async)");
        }

        return eventSubscriptionsDeleteCall(scope, eventSubscriptionName, apiVersion, _callback);

    }

    /**
     * Delete an event subscription
     * Delete an existing event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public void eventSubscriptionsDelete(String scope, String eventSubscriptionName, String apiVersion) throws ApiException {
        eventSubscriptionsDeleteWithHttpInfo(scope, eventSubscriptionName, apiVersion);
    }

    /**
     * Delete an event subscription
     * Delete an existing event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> eventSubscriptionsDeleteWithHttpInfo(String scope, String eventSubscriptionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsDeleteValidateBeforeCall(scope, eventSubscriptionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an event subscription (asynchronously)
     * Delete an existing event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 404 Not Found.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsDeleteAsync(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsDeleteValidateBeforeCall(scope, eventSubscriptionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsGet
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsGetCall(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "eventSubscriptionName" + "}", localVarApiClient.escapeString(eventSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsGetValidateBeforeCall(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling eventSubscriptionsGet(Async)");
        }

        // verify the required parameter 'eventSubscriptionName' is set
        if (eventSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsGet(Async)");
        }

        return eventSubscriptionsGetCall(scope, eventSubscriptionName, apiVersion, _callback);

    }

    /**
     * Get an event subscription
     * Get properties of an event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscription eventSubscriptionsGet(String scope, String eventSubscriptionName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscription> localVarResp = eventSubscriptionsGetWithHttpInfo(scope, eventSubscriptionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get an event subscription
     * Get properties of an event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscription> eventSubscriptionsGetWithHttpInfo(String scope, String eventSubscriptionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsGetValidateBeforeCall(scope, eventSubscriptionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an event subscription (asynchronously)
     * Get properties of an event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsGetAsync(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback<EventSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsGetValidateBeforeCall(scope, eventSubscriptionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsGetFullUrl
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsGetFullUrlCall(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}/getFullUrl"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "eventSubscriptionName" + "}", localVarApiClient.escapeString(eventSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsGetFullUrlValidateBeforeCall(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling eventSubscriptionsGetFullUrl(Async)");
        }

        // verify the required parameter 'eventSubscriptionName' is set
        if (eventSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsGetFullUrl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsGetFullUrl(Async)");
        }

        return eventSubscriptionsGetFullUrlCall(scope, eventSubscriptionName, apiVersion, _callback);

    }

    /**
     * Get full URL of an event subscription
     * Get the full endpoint URL for an event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionFullUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionFullUrl eventSubscriptionsGetFullUrl(String scope, String eventSubscriptionName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionFullUrl> localVarResp = eventSubscriptionsGetFullUrlWithHttpInfo(scope, eventSubscriptionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get full URL of an event subscription
     * Get the full endpoint URL for an event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionFullUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionFullUrl> eventSubscriptionsGetFullUrlWithHttpInfo(String scope, String eventSubscriptionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsGetFullUrlValidateBeforeCall(scope, eventSubscriptionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionFullUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get full URL of an event subscription (asynchronously)
     * Get the full endpoint URL for an event subscription
     * @param scope The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsGetFullUrlAsync(String scope, String eventSubscriptionName, String apiVersion, final ApiCallback<EventSubscriptionFullUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsGetFullUrlValidateBeforeCall(scope, eventSubscriptionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionFullUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListByResource
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic (required)
     * @param resourceTypeName Name of the resource type (required)
     * @param resourceName Name of the resource (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListByResourceCall(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceTypeName}/{resourceName}/providers/Microsoft.EventGrid/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "providerNamespace" + "}", localVarApiClient.escapeString(providerNamespace.toString()))
            .replace("{" + "resourceTypeName" + "}", localVarApiClient.escapeString(resourceTypeName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListByResourceValidateBeforeCall(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListByResource(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListByResource(Async)");
        }

        // verify the required parameter 'providerNamespace' is set
        if (providerNamespace == null) {
            throw new ApiException("Missing the required parameter 'providerNamespace' when calling eventSubscriptionsListByResource(Async)");
        }

        // verify the required parameter 'resourceTypeName' is set
        if (resourceTypeName == null) {
            throw new ApiException("Missing the required parameter 'resourceTypeName' when calling eventSubscriptionsListByResource(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling eventSubscriptionsListByResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListByResource(Async)");
        }

        return eventSubscriptionsListByResourceCall(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion, _callback);

    }

    /**
     * List all event subscriptions for a specific topic
     * List all event subscriptions that have been created for a specific topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic (required)
     * @param resourceTypeName Name of the resource type (required)
     * @param resourceName Name of the resource (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListByResource(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListByResourceWithHttpInfo(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all event subscriptions for a specific topic
     * List all event subscriptions that have been created for a specific topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic (required)
     * @param resourceTypeName Name of the resource type (required)
     * @param resourceName Name of the resource (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListByResourceWithHttpInfo(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListByResourceValidateBeforeCall(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all event subscriptions for a specific topic (asynchronously)
     * List all event subscriptions that have been created for a specific topic
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param providerNamespace Namespace of the provider of the topic (required)
     * @param resourceTypeName Name of the resource type (required)
     * @param resourceName Name of the resource (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListByResourceAsync(String subscriptionId, String resourceGroupName, String providerNamespace, String resourceTypeName, String resourceName, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListByResourceValidateBeforeCall(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListGlobalByResourceGroup
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListGlobalByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListGlobalByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalByResourceGroup(Async)");
        }

        return eventSubscriptionsListGlobalByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group
     * List all global event subscriptions under a specific Azure subscription and resource group
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListGlobalByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListGlobalByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group
     * List all global event subscriptions under a specific Azure subscription and resource group
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListGlobalByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListGlobalByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group (asynchronously)
     * List all global event subscriptions under a specific Azure subscription and resource group
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListGlobalByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListGlobalByResourceGroupForTopicType
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalByResourceGroupForTopicTypeCall(String subscriptionId, String resourceGroupName, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "topicTypeName" + "}", localVarApiClient.escapeString(topicTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListGlobalByResourceGroupForTopicTypeValidateBeforeCall(String subscriptionId, String resourceGroupName, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType(Async)");
        }

        // verify the required parameter 'topicTypeName' is set
        if (topicTypeName == null) {
            throw new ApiException("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalByResourceGroupForTopicType(Async)");
        }

        return eventSubscriptionsListGlobalByResourceGroupForTopicTypeCall(subscriptionId, resourceGroupName, topicTypeName, apiVersion, _callback);

    }

    /**
     * List all global event subscriptions under a resource group for a topic type
     * List all global event subscriptions under a resource group for a specific topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListGlobalByResourceGroupForTopicType(String subscriptionId, String resourceGroupName, String topicTypeName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListGlobalByResourceGroupForTopicTypeWithHttpInfo(subscriptionId, resourceGroupName, topicTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all global event subscriptions under a resource group for a topic type
     * List all global event subscriptions under a resource group for a specific topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListGlobalByResourceGroupForTopicTypeWithHttpInfo(String subscriptionId, String resourceGroupName, String topicTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListGlobalByResourceGroupForTopicTypeValidateBeforeCall(subscriptionId, resourceGroupName, topicTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all global event subscriptions under a resource group for a topic type (asynchronously)
     * List all global event subscriptions under a resource group for a specific topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalByResourceGroupForTopicTypeAsync(String subscriptionId, String resourceGroupName, String topicTypeName, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListGlobalByResourceGroupForTopicTypeValidateBeforeCall(subscriptionId, resourceGroupName, topicTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListGlobalBySubscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListGlobalBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalBySubscription(Async)");
        }

        return eventSubscriptionsListGlobalBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription
     * List all aggregated global event subscriptions under a specific Azure subscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListGlobalBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListGlobalBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription
     * List all aggregated global event subscriptions under a specific Azure subscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListGlobalBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListGlobalBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription (asynchronously)
     * List all aggregated global event subscriptions under a specific Azure subscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListGlobalBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListGlobalBySubscriptionForTopicType
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalBySubscriptionForTopicTypeCall(String subscriptionId, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "topicTypeName" + "}", localVarApiClient.escapeString(topicTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListGlobalBySubscriptionForTopicTypeValidateBeforeCall(String subscriptionId, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListGlobalBySubscriptionForTopicType(Async)");
        }

        // verify the required parameter 'topicTypeName' is set
        if (topicTypeName == null) {
            throw new ApiException("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListGlobalBySubscriptionForTopicType(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListGlobalBySubscriptionForTopicType(Async)");
        }

        return eventSubscriptionsListGlobalBySubscriptionForTopicTypeCall(subscriptionId, topicTypeName, apiVersion, _callback);

    }

    /**
     * List all global event subscriptions for a topic type
     * List all global event subscriptions under an Azure subscription for a topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListGlobalBySubscriptionForTopicType(String subscriptionId, String topicTypeName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListGlobalBySubscriptionForTopicTypeWithHttpInfo(subscriptionId, topicTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all global event subscriptions for a topic type
     * List all global event subscriptions under an Azure subscription for a topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListGlobalBySubscriptionForTopicTypeWithHttpInfo(String subscriptionId, String topicTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListGlobalBySubscriptionForTopicTypeValidateBeforeCall(subscriptionId, topicTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all global event subscriptions for a topic type (asynchronously)
     * List all global event subscriptions under an Azure subscription for a topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListGlobalBySubscriptionForTopicTypeAsync(String subscriptionId, String topicTypeName, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListGlobalBySubscriptionForTopicTypeValidateBeforeCall(subscriptionId, topicTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListRegionalByResourceGroup
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalByResourceGroupCall(String subscriptionId, String resourceGroupName, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListRegionalByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListRegionalByResourceGroup(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalByResourceGroup(Async)");
        }

        return eventSubscriptionsListRegionalByResourceGroupCall(subscriptionId, resourceGroupName, location, apiVersion, _callback);

    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group
     * List all event subscriptions from the given location under a specific Azure subscription and resource group
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListRegionalByResourceGroup(String subscriptionId, String resourceGroupName, String location, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListRegionalByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, location, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group
     * List all event subscriptions from the given location under a specific Azure subscription and resource group
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListRegionalByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListRegionalByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, location, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group (asynchronously)
     * List all event subscriptions from the given location under a specific Azure subscription and resource group
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalByResourceGroupAsync(String subscriptionId, String resourceGroupName, String location, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListRegionalByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, location, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListRegionalByResourceGroupForTopicType
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalByResourceGroupForTopicTypeCall(String subscriptionId, String resourceGroupName, String location, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "topicTypeName" + "}", localVarApiClient.escapeString(topicTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListRegionalByResourceGroupForTopicTypeValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType(Async)");
        }

        // verify the required parameter 'topicTypeName' is set
        if (topicTypeName == null) {
            throw new ApiException("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalByResourceGroupForTopicType(Async)");
        }

        return eventSubscriptionsListRegionalByResourceGroupForTopicTypeCall(subscriptionId, resourceGroupName, location, topicTypeName, apiVersion, _callback);

    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListRegionalByResourceGroupForTopicType(String subscriptionId, String resourceGroupName, String location, String topicTypeName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListRegionalByResourceGroupForTopicTypeWithHttpInfo(subscriptionId, resourceGroupName, location, topicTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListRegionalByResourceGroupForTopicTypeWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String topicTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListRegionalByResourceGroupForTopicTypeValidateBeforeCall(subscriptionId, resourceGroupName, location, topicTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type (asynchronously)
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalByResourceGroupForTopicTypeAsync(String subscriptionId, String resourceGroupName, String location, String topicTypeName, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListRegionalByResourceGroupForTopicTypeValidateBeforeCall(subscriptionId, resourceGroupName, location, topicTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListRegionalBySubscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalBySubscriptionCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListRegionalBySubscriptionValidateBeforeCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalBySubscription(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalBySubscription(Async)");
        }

        return eventSubscriptionsListRegionalBySubscriptionCall(subscriptionId, location, apiVersion, _callback);

    }

    /**
     * List all regional event subscriptions under an Azure subscription
     * List all event subscriptions from the given location under a specific Azure subscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListRegionalBySubscription(String subscriptionId, String location, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListRegionalBySubscriptionWithHttpInfo(subscriptionId, location, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all regional event subscriptions under an Azure subscription
     * List all event subscriptions from the given location under a specific Azure subscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListRegionalBySubscriptionWithHttpInfo(String subscriptionId, String location, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListRegionalBySubscriptionValidateBeforeCall(subscriptionId, location, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all regional event subscriptions under an Azure subscription (asynchronously)
     * List all event subscriptions from the given location under a specific Azure subscription
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalBySubscriptionAsync(String subscriptionId, String location, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListRegionalBySubscriptionValidateBeforeCall(subscriptionId, location, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsListRegionalBySubscriptionForTopicType
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalBySubscriptionForTopicTypeCall(String subscriptionId, String location, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/locations/{location}/topicTypes/{topicTypeName}/eventSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "topicTypeName" + "}", localVarApiClient.escapeString(topicTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsListRegionalBySubscriptionForTopicTypeValidateBeforeCall(String subscriptionId, String location, String topicTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType(Async)");
        }

        // verify the required parameter 'topicTypeName' is set
        if (topicTypeName == null) {
            throw new ApiException("Missing the required parameter 'topicTypeName' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsListRegionalBySubscriptionForTopicType(Async)");
        }

        return eventSubscriptionsListRegionalBySubscriptionForTopicTypeCall(subscriptionId, location, topicTypeName, apiVersion, _callback);

    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return EventSubscriptionsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscriptionsListResult eventSubscriptionsListRegionalBySubscriptionForTopicType(String subscriptionId, String location, String topicTypeName, String apiVersion) throws ApiException {
        ApiResponse<EventSubscriptionsListResult> localVarResp = eventSubscriptionsListRegionalBySubscriptionForTopicTypeWithHttpInfo(subscriptionId, location, topicTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;EventSubscriptionsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscriptionsListResult> eventSubscriptionsListRegionalBySubscriptionForTopicTypeWithHttpInfo(String subscriptionId, String location, String topicTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsListRegionalBySubscriptionForTopicTypeValidateBeforeCall(subscriptionId, location, topicTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type (asynchronously)
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     * @param subscriptionId Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location Name of the location (required)
     * @param topicTypeName Name of the topic type (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsListRegionalBySubscriptionForTopicTypeAsync(String subscriptionId, String location, String topicTypeName, String apiVersion, final ApiCallback<EventSubscriptionsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsListRegionalBySubscriptionForTopicTypeValidateBeforeCall(subscriptionId, location, topicTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<EventSubscriptionsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventSubscriptionsUpdate
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionUpdateParameters Updated event subscription information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsUpdateCall(String scope, String eventSubscriptionName, String apiVersion, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventSubscriptionUpdateParameters;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.EventGrid/eventSubscriptions/{eventSubscriptionName}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "eventSubscriptionName" + "}", localVarApiClient.escapeString(eventSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventSubscriptionsUpdateValidateBeforeCall(String scope, String eventSubscriptionName, String apiVersion, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling eventSubscriptionsUpdate(Async)");
        }

        // verify the required parameter 'eventSubscriptionName' is set
        if (eventSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionName' when calling eventSubscriptionsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventSubscriptionsUpdate(Async)");
        }

        // verify the required parameter 'eventSubscriptionUpdateParameters' is set
        if (eventSubscriptionUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'eventSubscriptionUpdateParameters' when calling eventSubscriptionsUpdate(Async)");
        }

        return eventSubscriptionsUpdateCall(scope, eventSubscriptionName, apiVersion, eventSubscriptionUpdateParameters, _callback);

    }

    /**
     * Update an event subscription
     * Asynchronously updates an existing event subscription.
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionUpdateParameters Updated event subscription information (required)
     * @return EventSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public EventSubscription eventSubscriptionsUpdate(String scope, String eventSubscriptionName, String apiVersion, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) throws ApiException {
        ApiResponse<EventSubscription> localVarResp = eventSubscriptionsUpdateWithHttpInfo(scope, eventSubscriptionName, apiVersion, eventSubscriptionUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * Update an event subscription
     * Asynchronously updates an existing event subscription.
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionUpdateParameters Updated event subscription information (required)
     * @return ApiResponse&lt;EventSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventSubscription> eventSubscriptionsUpdateWithHttpInfo(String scope, String eventSubscriptionName, String apiVersion, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = eventSubscriptionsUpdateValidateBeforeCall(scope, eventSubscriptionName, apiVersion, eventSubscriptionUpdateParameters, null);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an event subscription (asynchronously)
     * Asynchronously updates an existing event subscription.
     * @param scope The scope of existing event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use &#39;/subscriptions/{subscriptionId}/&#39; for a subscription, &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39; for a resource group, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}&#39; for a resource, and &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}&#39; for an EventGrid topic. (required)
     * @param eventSubscriptionName Name of the event subscription to be created (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param eventSubscriptionUpdateParameters Updated event subscription information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> *** Error Responses: ***   * 400 Bad Request.   * 500 Internal Server Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventSubscriptionsUpdateAsync(String scope, String eventSubscriptionName, String apiVersion, EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters, final ApiCallback<EventSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventSubscriptionsUpdateValidateBeforeCall(scope, eventSubscriptionName, apiVersion, eventSubscriptionUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<EventSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
