# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TopicTypeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, provider: str=None, provisioning_state: str=None, resource_region_type: str=None):
        """TopicTypeProperties - a model defined in OpenAPI

        :param description: The description of this TopicTypeProperties.
        :param display_name: The display_name of this TopicTypeProperties.
        :param provider: The provider of this TopicTypeProperties.
        :param provisioning_state: The provisioning_state of this TopicTypeProperties.
        :param resource_region_type: The resource_region_type of this TopicTypeProperties.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'provider': str,
            'provisioning_state': str,
            'resource_region_type': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'provider': 'provider',
            'provisioning_state': 'provisioningState',
            'resource_region_type': 'resourceRegionType'
        }

        self._description = description
        self._display_name = display_name
        self._provider = provider
        self._provisioning_state = provisioning_state
        self._resource_region_type = resource_region_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicTypeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopicTypeProperties of this TopicTypeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TopicTypeProperties.

        Description of the topic type.

        :return: The description of this TopicTypeProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TopicTypeProperties.

        Description of the topic type.

        :param description: The description of this TopicTypeProperties.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this TopicTypeProperties.

        Display Name for the topic type.

        :return: The display_name of this TopicTypeProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TopicTypeProperties.

        Display Name for the topic type.

        :param display_name: The display_name of this TopicTypeProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def provider(self):
        """Gets the provider of this TopicTypeProperties.

        Namespace of the provider of the topic type.

        :return: The provider of this TopicTypeProperties.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this TopicTypeProperties.

        Namespace of the provider of the topic type.

        :param provider: The provider of this TopicTypeProperties.
        :type provider: str
        """

        self._provider = provider

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this TopicTypeProperties.

        Provisioning state of the topic type

        :return: The provisioning_state of this TopicTypeProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this TopicTypeProperties.

        Provisioning state of the topic type

        :param provisioning_state: The provisioning_state of this TopicTypeProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Canceled", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def resource_region_type(self):
        """Gets the resource_region_type of this TopicTypeProperties.

        Region type of the resource.

        :return: The resource_region_type of this TopicTypeProperties.
        :rtype: str
        """
        return self._resource_region_type

    @resource_region_type.setter
    def resource_region_type(self, resource_region_type):
        """Sets the resource_region_type of this TopicTypeProperties.

        Region type of the resource.

        :param resource_region_type: The resource_region_type of this TopicTypeProperties.
        :type resource_region_type: str
        """
        allowed_values = ["RegionalResource", "GlobalResource"]  # noqa: E501
        if resource_region_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_region_type` ({0}), must be one of {1}"
                .format(resource_region_type, allowed_values)
            )

        self._resource_region_type = resource_region_type
