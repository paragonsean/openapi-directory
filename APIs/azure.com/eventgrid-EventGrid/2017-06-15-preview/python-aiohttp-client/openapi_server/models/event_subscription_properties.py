# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_subscription_destination import EventSubscriptionDestination
from openapi_server.models.event_subscription_filter import EventSubscriptionFilter
from openapi_server import util


class EventSubscriptionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination: EventSubscriptionDestination=None, filter: EventSubscriptionFilter=None, labels: List[str]=None, provisioning_state: str=None, topic: str=None):
        """EventSubscriptionProperties - a model defined in OpenAPI

        :param destination: The destination of this EventSubscriptionProperties.
        :param filter: The filter of this EventSubscriptionProperties.
        :param labels: The labels of this EventSubscriptionProperties.
        :param provisioning_state: The provisioning_state of this EventSubscriptionProperties.
        :param topic: The topic of this EventSubscriptionProperties.
        """
        self.openapi_types = {
            'destination': EventSubscriptionDestination,
            'filter': EventSubscriptionFilter,
            'labels': List[str],
            'provisioning_state': str,
            'topic': str
        }

        self.attribute_map = {
            'destination': 'destination',
            'filter': 'filter',
            'labels': 'labels',
            'provisioning_state': 'provisioningState',
            'topic': 'topic'
        }

        self._destination = destination
        self._filter = filter
        self._labels = labels
        self._provisioning_state = provisioning_state
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventSubscriptionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventSubscriptionProperties of this EventSubscriptionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self):
        """Gets the destination of this EventSubscriptionProperties.


        :return: The destination of this EventSubscriptionProperties.
        :rtype: EventSubscriptionDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this EventSubscriptionProperties.


        :param destination: The destination of this EventSubscriptionProperties.
        :type destination: EventSubscriptionDestination
        """

        self._destination = destination

    @property
    def filter(self):
        """Gets the filter of this EventSubscriptionProperties.


        :return: The filter of this EventSubscriptionProperties.
        :rtype: EventSubscriptionFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this EventSubscriptionProperties.


        :param filter: The filter of this EventSubscriptionProperties.
        :type filter: EventSubscriptionFilter
        """

        self._filter = filter

    @property
    def labels(self):
        """Gets the labels of this EventSubscriptionProperties.

        List of user defined labels.

        :return: The labels of this EventSubscriptionProperties.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this EventSubscriptionProperties.

        List of user defined labels.

        :param labels: The labels of this EventSubscriptionProperties.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this EventSubscriptionProperties.

        Provisioning state of the event subscription.

        :return: The provisioning_state of this EventSubscriptionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this EventSubscriptionProperties.

        Provisioning state of the event subscription.

        :param provisioning_state: The provisioning_state of this EventSubscriptionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Canceled", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def topic(self):
        """Gets the topic of this EventSubscriptionProperties.

        Name of the topic of the event subscription.

        :return: The topic of this EventSubscriptionProperties.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this EventSubscriptionProperties.

        Name of the topic of the event subscription.

        :param topic: The topic of this EventSubscriptionProperties.
        :type topic: str
        """

        self._topic = topic
