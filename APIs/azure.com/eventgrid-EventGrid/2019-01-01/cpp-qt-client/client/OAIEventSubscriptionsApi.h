/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEventSubscriptionsApi_H
#define OAI_OAIEventSubscriptionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEventSubscription.h"
#include "OAIEventSubscriptionFullUrl.h"
#include "OAIEventSubscriptionUpdateParameters.h"
#include "OAIEventSubscriptionsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEventSubscriptionsApi : public QObject {
    Q_OBJECT

public:
    OAIEventSubscriptionsApi(const int timeOut = 0);
    ~OAIEventSubscriptionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  event_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  event_subscription_info OAIEventSubscription [required]
    */
    virtual void eventSubscriptionsCreateOrUpdate(const QString &scope, const QString &event_subscription_name, const QString &api_version, const OAIEventSubscription &event_subscription_info);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  event_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsDelete(const QString &scope, const QString &event_subscription_name, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  event_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsGet(const QString &scope, const QString &event_subscription_name, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  event_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsGetFullUrl(const QString &scope, const QString &event_subscription_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  provider_namespace QString [required]
    * @param[in]  resource_type_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListByResource(const QString &subscription_id, const QString &resource_group_name, const QString &provider_namespace, const QString &resource_type_name, const QString &resource_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListGlobalByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  topic_type_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListGlobalByResourceGroupForTopicType(const QString &subscription_id, const QString &resource_group_name, const QString &topic_type_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListGlobalBySubscription(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  topic_type_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListGlobalBySubscriptionForTopicType(const QString &subscription_id, const QString &topic_type_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListRegionalByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  topic_type_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListRegionalByResourceGroupForTopicType(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &topic_type_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListRegionalBySubscription(const QString &subscription_id, const QString &location, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  topic_type_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventSubscriptionsListRegionalBySubscriptionForTopicType(const QString &subscription_id, const QString &location, const QString &topic_type_name, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  event_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  event_subscription_update_parameters OAIEventSubscriptionUpdateParameters [required]
    */
    virtual void eventSubscriptionsUpdate(const QString &scope, const QString &event_subscription_name, const QString &api_version, const OAIEventSubscriptionUpdateParameters &event_subscription_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventSubscriptionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsGetFullUrlCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListByResourceCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListGlobalByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListGlobalByResourceGroupForTopicTypeCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListGlobalBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListGlobalBySubscriptionForTopicTypeCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListRegionalByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListRegionalByResourceGroupForTopicTypeCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListRegionalBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsListRegionalBySubscriptionForTopicTypeCallback(OAIHttpRequestWorker *worker);
    void eventSubscriptionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventSubscriptionsCreateOrUpdateSignal(OAIEventSubscription summary);
    void eventSubscriptionsDeleteSignal();
    void eventSubscriptionsGetSignal(OAIEventSubscription summary);
    void eventSubscriptionsGetFullUrlSignal(OAIEventSubscriptionFullUrl summary);
    void eventSubscriptionsListByResourceSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalByResourceGroupSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalBySubscriptionSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalByResourceGroupSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalBySubscriptionSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignal(OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsUpdateSignal(OAIEventSubscription summary);


    void eventSubscriptionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscription summary);
    void eventSubscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void eventSubscriptionsGetSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscription summary);
    void eventSubscriptionsGetFullUrlSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionFullUrl summary);
    void eventSubscriptionsListByResourceSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscriptionsListResult summary);
    void eventSubscriptionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEventSubscription summary);

    Q_DECL_DEPRECATED_X("Use eventSubscriptionsCreateOrUpdateSignalError() instead")
    void eventSubscriptionsCreateOrUpdateSignalE(OAIEventSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsCreateOrUpdateSignalError(OAIEventSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsDeleteSignalError() instead")
    void eventSubscriptionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsGetSignalError() instead")
    void eventSubscriptionsGetSignalE(OAIEventSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsGetSignalError(OAIEventSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsGetFullUrlSignalError() instead")
    void eventSubscriptionsGetFullUrlSignalE(OAIEventSubscriptionFullUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsGetFullUrlSignalError(OAIEventSubscriptionFullUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListByResourceSignalError() instead")
    void eventSubscriptionsListByResourceSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListByResourceSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalByResourceGroupSignalError() instead")
    void eventSubscriptionsListGlobalByResourceGroupSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalByResourceGroupSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignalError() instead")
    void eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalBySubscriptionSignalError() instead")
    void eventSubscriptionsListGlobalBySubscriptionSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalBySubscriptionSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignalError() instead")
    void eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalByResourceGroupSignalError() instead")
    void eventSubscriptionsListRegionalByResourceGroupSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalByResourceGroupSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignalError() instead")
    void eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalBySubscriptionSignalError() instead")
    void eventSubscriptionsListRegionalBySubscriptionSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalBySubscriptionSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignalError() instead")
    void eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignalE(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignalError(OAIEventSubscriptionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsUpdateSignalError() instead")
    void eventSubscriptionsUpdateSignalE(OAIEventSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsUpdateSignalError(OAIEventSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventSubscriptionsCreateOrUpdateSignalErrorFull() instead")
    void eventSubscriptionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsDeleteSignalErrorFull() instead")
    void eventSubscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsGetSignalErrorFull() instead")
    void eventSubscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsGetFullUrlSignalErrorFull() instead")
    void eventSubscriptionsGetFullUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsGetFullUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListByResourceSignalErrorFull() instead")
    void eventSubscriptionsListByResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListByResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalByResourceGroupSignalErrorFull() instead")
    void eventSubscriptionsListGlobalByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignalErrorFull() instead")
    void eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalByResourceGroupForTopicTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalBySubscriptionSignalErrorFull() instead")
    void eventSubscriptionsListGlobalBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignalErrorFull() instead")
    void eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListGlobalBySubscriptionForTopicTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalByResourceGroupSignalErrorFull() instead")
    void eventSubscriptionsListRegionalByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignalErrorFull() instead")
    void eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalByResourceGroupForTopicTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalBySubscriptionSignalErrorFull() instead")
    void eventSubscriptionsListRegionalBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignalErrorFull() instead")
    void eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsListRegionalBySubscriptionForTopicTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventSubscriptionsUpdateSignalErrorFull() instead")
    void eventSubscriptionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventSubscriptionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
