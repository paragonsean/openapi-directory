/**
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EventTypesListResult from '../model/EventTypesListResult';
import TopicTypeInfo from '../model/TopicTypeInfo';
import TopicTypesListResult from '../model/TopicTypesListResult';

/**
* TopicTypes service.
* @module api/TopicTypesApi
* @version 2019-01-01
*/
export default class TopicTypesApi {

    /**
    * Constructs a new TopicTypesApi. 
    * @alias module:api/TopicTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the topicTypesGet operation.
     * @callback module:api/TopicTypesApi~topicTypesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicTypeInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a topic type
     * Get information about a topic type
     * @param {String} topicTypeName Name of the topic type
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/TopicTypesApi~topicTypesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicTypeInfo}
     */
    topicTypesGet(topicTypeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'topicTypeName' is set
      if (topicTypeName === undefined || topicTypeName === null) {
        throw new Error("Missing the required parameter 'topicTypeName' when calling topicTypesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicTypesGet");
      }

      let pathParams = {
        'topicTypeName': topicTypeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopicTypeInfo;
      return this.apiClient.callApi(
        '/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicTypesList operation.
     * @callback module:api/TopicTypesApi~topicTypesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicTypesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List topic types
     * List all registered topic types
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/TopicTypesApi~topicTypesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicTypesListResult}
     */
    topicTypesList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicTypesList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopicTypesListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.EventGrid/topicTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicTypesListEventTypes operation.
     * @callback module:api/TopicTypesApi~topicTypesListEventTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTypesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List event types
     * List event types for a topic type
     * @param {String} topicTypeName Name of the topic type
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/TopicTypesApi~topicTypesListEventTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTypesListResult}
     */
    topicTypesListEventTypes(topicTypeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'topicTypeName' is set
      if (topicTypeName === undefined || topicTypeName === null) {
        throw new Error("Missing the required parameter 'topicTypeName' when calling topicTypesListEventTypes");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling topicTypesListEventTypes");
      }

      let pathParams = {
        'topicTypeName': topicTypeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTypesListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.EventGrid/topicTypes/{topicTypeName}/eventTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
