/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EventSubscription;
import org.openapitools.client.model.EventSubscriptionFullUrl;
import org.openapitools.client.model.EventSubscriptionUpdateParameters;
import org.openapitools.client.model.EventSubscriptionsListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventSubscriptionsApi
 */
@Disabled
public class EventSubscriptionsApiTest {

    private final EventSubscriptionsApi api = new EventSubscriptionsApi();

    /**
     * Create or update an event subscription
     *
     * Asynchronously creates a new event subscription or updates an existing event subscription based on the specified scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsCreateOrUpdateTest() throws ApiException {
        String scope = null;
        String eventSubscriptionName = null;
        String apiVersion = null;
        EventSubscription eventSubscriptionInfo = null;
        EventSubscription response = api.eventSubscriptionsCreateOrUpdate(scope, eventSubscriptionName, apiVersion, eventSubscriptionInfo);
        // TODO: test validations
    }

    /**
     * Delete an event subscription
     *
     * Delete an existing event subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsDeleteTest() throws ApiException {
        String scope = null;
        String eventSubscriptionName = null;
        String apiVersion = null;
        api.eventSubscriptionsDelete(scope, eventSubscriptionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get an event subscription
     *
     * Get properties of an event subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsGetTest() throws ApiException {
        String scope = null;
        String eventSubscriptionName = null;
        String apiVersion = null;
        EventSubscription response = api.eventSubscriptionsGet(scope, eventSubscriptionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get full URL of an event subscription
     *
     * Get the full endpoint URL for an event subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsGetFullUrlTest() throws ApiException {
        String scope = null;
        String eventSubscriptionName = null;
        String apiVersion = null;
        EventSubscriptionFullUrl response = api.eventSubscriptionsGetFullUrl(scope, eventSubscriptionName, apiVersion);
        // TODO: test validations
    }

    /**
     * List all event subscriptions for a specific topic
     *
     * List all event subscriptions that have been created for a specific topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListByResourceTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String providerNamespace = null;
        String resourceTypeName = null;
        String resourceName = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListByResource(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion);
        // TODO: test validations
    }

    /**
     * List all global event subscriptions under an Azure subscription and resource group
     *
     * List all global event subscriptions under a specific Azure subscription and resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListGlobalByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListGlobalByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * List all global event subscriptions under a resource group for a topic type
     *
     * List all global event subscriptions under a resource group for a specific topic type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListGlobalByResourceGroupForTopicTypeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String topicTypeName = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListGlobalByResourceGroupForTopicType(subscriptionId, resourceGroupName, topicTypeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get an aggregated list of all global event subscriptions under an Azure subscription
     *
     * List all aggregated global event subscriptions under a specific Azure subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListGlobalBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListGlobalBySubscription(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all global event subscriptions for a topic type
     *
     * List all global event subscriptions under an Azure subscription for a topic type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListGlobalBySubscriptionForTopicTypeTest() throws ApiException {
        String subscriptionId = null;
        String topicTypeName = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListGlobalBySubscriptionForTopicType(subscriptionId, topicTypeName, apiVersion);
        // TODO: test validations
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group
     *
     * List all event subscriptions from the given location under a specific Azure subscription and resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListRegionalByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String location = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListRegionalByResourceGroup(subscriptionId, resourceGroupName, location, apiVersion);
        // TODO: test validations
    }

    /**
     * List all regional event subscriptions under an Azure subscription and resource group for a topic type
     *
     * List all event subscriptions from the given location under a specific Azure subscription and resource group and topic type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListRegionalByResourceGroupForTopicTypeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String location = null;
        String topicTypeName = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListRegionalByResourceGroupForTopicType(subscriptionId, resourceGroupName, location, topicTypeName, apiVersion);
        // TODO: test validations
    }

    /**
     * List all regional event subscriptions under an Azure subscription
     *
     * List all event subscriptions from the given location under a specific Azure subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListRegionalBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String location = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListRegionalBySubscription(subscriptionId, location, apiVersion);
        // TODO: test validations
    }

    /**
     * List all regional event subscriptions under an Azure subscription for a topic type
     *
     * List all event subscriptions from the given location under a specific Azure subscription and topic type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsListRegionalBySubscriptionForTopicTypeTest() throws ApiException {
        String subscriptionId = null;
        String location = null;
        String topicTypeName = null;
        String apiVersion = null;
        EventSubscriptionsListResult response = api.eventSubscriptionsListRegionalBySubscriptionForTopicType(subscriptionId, location, topicTypeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update an event subscription
     *
     * Asynchronously updates an existing event subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventSubscriptionsUpdateTest() throws ApiException {
        String scope = null;
        String eventSubscriptionName = null;
        String apiVersion = null;
        EventSubscriptionUpdateParameters eventSubscriptionUpdateParameters = null;
        EventSubscription response = api.eventSubscriptionsUpdate(scope, eventSubscriptionName, apiVersion, eventSubscriptionUpdateParameters);
        // TODO: test validations
    }

}
