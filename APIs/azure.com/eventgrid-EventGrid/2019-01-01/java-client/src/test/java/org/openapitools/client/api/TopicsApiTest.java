/*
 * EventGridManagementClient
 * Azure EventGrid Management Client
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EventTypesListResult;
import org.openapitools.client.model.Topic;
import org.openapitools.client.model.TopicRegenerateKeyRequest;
import org.openapitools.client.model.TopicSharedAccessKeys;
import org.openapitools.client.model.TopicUpdateParameters;
import org.openapitools.client.model.TopicsListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TopicsApi
 */
@Disabled
public class TopicsApiTest {

    private final TopicsApi api = new TopicsApi();

    /**
     * Create a topic
     *
     * Asynchronously creates a new topic with the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String topicName = null;
        String apiVersion = null;
        Topic topicInfo = null;
        Topic response = api.topicsCreateOrUpdate(subscriptionId, resourceGroupName, topicName, apiVersion, topicInfo);
        // TODO: test validations
    }

    /**
     * Delete a topic
     *
     * Delete existing topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String topicName = null;
        String apiVersion = null;
        api.topicsDelete(subscriptionId, resourceGroupName, topicName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a topic
     *
     * Get properties of a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String topicName = null;
        String apiVersion = null;
        Topic response = api.topicsGet(subscriptionId, resourceGroupName, topicName, apiVersion);
        // TODO: test validations
    }

    /**
     * List topics under a resource group
     *
     * List all the topics under a resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        TopicsListResult response = api.topicsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * List topics under an Azure subscription
     *
     * List all the topics under an Azure subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        TopicsListResult response = api.topicsListBySubscription(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List topic event types
     *
     * List event types for a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsListEventTypesTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String providerNamespace = null;
        String resourceTypeName = null;
        String resourceName = null;
        String apiVersion = null;
        EventTypesListResult response = api.topicsListEventTypes(subscriptionId, resourceGroupName, providerNamespace, resourceTypeName, resourceName, apiVersion);
        // TODO: test validations
    }

    /**
     * List keys for a topic
     *
     * List the two keys used to publish to a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsListSharedAccessKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String topicName = null;
        String apiVersion = null;
        TopicSharedAccessKeys response = api.topicsListSharedAccessKeys(subscriptionId, resourceGroupName, topicName, apiVersion);
        // TODO: test validations
    }

    /**
     * Regenerate key for a topic
     *
     * Regenerate a shared access key for a topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsRegenerateKeyTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String topicName = null;
        String apiVersion = null;
        TopicRegenerateKeyRequest regenerateKeyRequest = null;
        TopicSharedAccessKeys response = api.topicsRegenerateKey(subscriptionId, resourceGroupName, topicName, apiVersion, regenerateKeyRequest);
        // TODO: test validations
    }

    /**
     * Update a topic
     *
     * Asynchronously updates a topic with the specified parameters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String topicName = null;
        String apiVersion = null;
        TopicUpdateParameters topicUpdateParameters = null;
        Topic response = api.topicsUpdate(subscriptionId, resourceGroupName, topicName, apiVersion, topicUpdateParameters);
        // TODO: test validations
    }

}
