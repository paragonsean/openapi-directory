# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerCertificateCommonName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_common_name: str=None, certificate_issuer_thumbprint: str=None):
        """ServerCertificateCommonName - a model defined in OpenAPI

        :param certificate_common_name: The certificate_common_name of this ServerCertificateCommonName.
        :param certificate_issuer_thumbprint: The certificate_issuer_thumbprint of this ServerCertificateCommonName.
        """
        self.openapi_types = {
            'certificate_common_name': str,
            'certificate_issuer_thumbprint': str
        }

        self.attribute_map = {
            'certificate_common_name': 'certificateCommonName',
            'certificate_issuer_thumbprint': 'certificateIssuerThumbprint'
        }

        self._certificate_common_name = certificate_common_name
        self._certificate_issuer_thumbprint = certificate_issuer_thumbprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerCertificateCommonName':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerCertificateCommonName of this ServerCertificateCommonName.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_common_name(self):
        """Gets the certificate_common_name of this ServerCertificateCommonName.

        The common name of the server certificate.

        :return: The certificate_common_name of this ServerCertificateCommonName.
        :rtype: str
        """
        return self._certificate_common_name

    @certificate_common_name.setter
    def certificate_common_name(self, certificate_common_name):
        """Sets the certificate_common_name of this ServerCertificateCommonName.

        The common name of the server certificate.

        :param certificate_common_name: The certificate_common_name of this ServerCertificateCommonName.
        :type certificate_common_name: str
        """
        if certificate_common_name is None:
            raise ValueError("Invalid value for `certificate_common_name`, must not be `None`")

        self._certificate_common_name = certificate_common_name

    @property
    def certificate_issuer_thumbprint(self):
        """Gets the certificate_issuer_thumbprint of this ServerCertificateCommonName.

        The issuer thumbprint of the server certificate.

        :return: The certificate_issuer_thumbprint of this ServerCertificateCommonName.
        :rtype: str
        """
        return self._certificate_issuer_thumbprint

    @certificate_issuer_thumbprint.setter
    def certificate_issuer_thumbprint(self, certificate_issuer_thumbprint):
        """Sets the certificate_issuer_thumbprint of this ServerCertificateCommonName.

        The issuer thumbprint of the server certificate.

        :param certificate_issuer_thumbprint: The certificate_issuer_thumbprint of this ServerCertificateCommonName.
        :type certificate_issuer_thumbprint: str
        """
        if certificate_issuer_thumbprint is None:
            raise ValueError("Invalid value for `certificate_issuer_thumbprint`, must not be `None`")

        self._certificate_issuer_thumbprint = certificate_issuer_thumbprint
