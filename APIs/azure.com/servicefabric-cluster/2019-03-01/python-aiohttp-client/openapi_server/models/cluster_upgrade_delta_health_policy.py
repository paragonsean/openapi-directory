# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_delta_health_policy import ApplicationDeltaHealthPolicy
from openapi_server import util


class ClusterUpgradeDeltaHealthPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_delta_health_policies: Dict[str, ApplicationDeltaHealthPolicy]=None, max_percent_delta_unhealthy_applications: int=None, max_percent_delta_unhealthy_nodes: int=None, max_percent_upgrade_domain_delta_unhealthy_nodes: int=None):
        """ClusterUpgradeDeltaHealthPolicy - a model defined in OpenAPI

        :param application_delta_health_policies: The application_delta_health_policies of this ClusterUpgradeDeltaHealthPolicy.
        :param max_percent_delta_unhealthy_applications: The max_percent_delta_unhealthy_applications of this ClusterUpgradeDeltaHealthPolicy.
        :param max_percent_delta_unhealthy_nodes: The max_percent_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.
        :param max_percent_upgrade_domain_delta_unhealthy_nodes: The max_percent_upgrade_domain_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.
        """
        self.openapi_types = {
            'application_delta_health_policies': Dict[str, ApplicationDeltaHealthPolicy],
            'max_percent_delta_unhealthy_applications': int,
            'max_percent_delta_unhealthy_nodes': int,
            'max_percent_upgrade_domain_delta_unhealthy_nodes': int
        }

        self.attribute_map = {
            'application_delta_health_policies': 'applicationDeltaHealthPolicies',
            'max_percent_delta_unhealthy_applications': 'maxPercentDeltaUnhealthyApplications',
            'max_percent_delta_unhealthy_nodes': 'maxPercentDeltaUnhealthyNodes',
            'max_percent_upgrade_domain_delta_unhealthy_nodes': 'maxPercentUpgradeDomainDeltaUnhealthyNodes'
        }

        self._application_delta_health_policies = application_delta_health_policies
        self._max_percent_delta_unhealthy_applications = max_percent_delta_unhealthy_applications
        self._max_percent_delta_unhealthy_nodes = max_percent_delta_unhealthy_nodes
        self._max_percent_upgrade_domain_delta_unhealthy_nodes = max_percent_upgrade_domain_delta_unhealthy_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeDeltaHealthPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeDeltaHealthPolicy of this ClusterUpgradeDeltaHealthPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_delta_health_policies(self):
        """Gets the application_delta_health_policies of this ClusterUpgradeDeltaHealthPolicy.

        Defines a map that contains specific application delta health policies for different applications. Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster. The application name should include the 'fabric:' URI scheme. The map is empty by default. 

        :return: The application_delta_health_policies of this ClusterUpgradeDeltaHealthPolicy.
        :rtype: Dict[str, ApplicationDeltaHealthPolicy]
        """
        return self._application_delta_health_policies

    @application_delta_health_policies.setter
    def application_delta_health_policies(self, application_delta_health_policies):
        """Sets the application_delta_health_policies of this ClusterUpgradeDeltaHealthPolicy.

        Defines a map that contains specific application delta health policies for different applications. Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster. The application name should include the 'fabric:' URI scheme. The map is empty by default. 

        :param application_delta_health_policies: The application_delta_health_policies of this ClusterUpgradeDeltaHealthPolicy.
        :type application_delta_health_policies: Dict[str, ApplicationDeltaHealthPolicy]
        """

        self._application_delta_health_policies = application_delta_health_policies

    @property
    def max_percent_delta_unhealthy_applications(self):
        """Gets the max_percent_delta_unhealthy_applications of this ClusterUpgradeDeltaHealthPolicy.

        The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this. 

        :return: The max_percent_delta_unhealthy_applications of this ClusterUpgradeDeltaHealthPolicy.
        :rtype: int
        """
        return self._max_percent_delta_unhealthy_applications

    @max_percent_delta_unhealthy_applications.setter
    def max_percent_delta_unhealthy_applications(self, max_percent_delta_unhealthy_applications):
        """Sets the max_percent_delta_unhealthy_applications of this ClusterUpgradeDeltaHealthPolicy.

        The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this. 

        :param max_percent_delta_unhealthy_applications: The max_percent_delta_unhealthy_applications of this ClusterUpgradeDeltaHealthPolicy.
        :type max_percent_delta_unhealthy_applications: int
        """
        if max_percent_delta_unhealthy_applications is None:
            raise ValueError("Invalid value for `max_percent_delta_unhealthy_applications`, must not be `None`")
        if max_percent_delta_unhealthy_applications is not None and max_percent_delta_unhealthy_applications > 100:
            raise ValueError("Invalid value for `max_percent_delta_unhealthy_applications`, must be a value less than or equal to `100`")
        if max_percent_delta_unhealthy_applications is not None and max_percent_delta_unhealthy_applications < 0:
            raise ValueError("Invalid value for `max_percent_delta_unhealthy_applications`, must be a value greater than or equal to `0`")

        self._max_percent_delta_unhealthy_applications = max_percent_delta_unhealthy_applications

    @property
    def max_percent_delta_unhealthy_nodes(self):
        """Gets the max_percent_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.

        The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. 

        :return: The max_percent_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.
        :rtype: int
        """
        return self._max_percent_delta_unhealthy_nodes

    @max_percent_delta_unhealthy_nodes.setter
    def max_percent_delta_unhealthy_nodes(self, max_percent_delta_unhealthy_nodes):
        """Sets the max_percent_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.

        The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. 

        :param max_percent_delta_unhealthy_nodes: The max_percent_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.
        :type max_percent_delta_unhealthy_nodes: int
        """
        if max_percent_delta_unhealthy_nodes is None:
            raise ValueError("Invalid value for `max_percent_delta_unhealthy_nodes`, must not be `None`")
        if max_percent_delta_unhealthy_nodes is not None and max_percent_delta_unhealthy_nodes > 100:
            raise ValueError("Invalid value for `max_percent_delta_unhealthy_nodes`, must be a value less than or equal to `100`")
        if max_percent_delta_unhealthy_nodes is not None and max_percent_delta_unhealthy_nodes < 0:
            raise ValueError("Invalid value for `max_percent_delta_unhealthy_nodes`, must be a value greater than or equal to `0`")

        self._max_percent_delta_unhealthy_nodes = max_percent_delta_unhealthy_nodes

    @property
    def max_percent_upgrade_domain_delta_unhealthy_nodes(self):
        """Gets the max_percent_upgrade_domain_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.

        The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. 

        :return: The max_percent_upgrade_domain_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.
        :rtype: int
        """
        return self._max_percent_upgrade_domain_delta_unhealthy_nodes

    @max_percent_upgrade_domain_delta_unhealthy_nodes.setter
    def max_percent_upgrade_domain_delta_unhealthy_nodes(self, max_percent_upgrade_domain_delta_unhealthy_nodes):
        """Sets the max_percent_upgrade_domain_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.

        The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. 

        :param max_percent_upgrade_domain_delta_unhealthy_nodes: The max_percent_upgrade_domain_delta_unhealthy_nodes of this ClusterUpgradeDeltaHealthPolicy.
        :type max_percent_upgrade_domain_delta_unhealthy_nodes: int
        """
        if max_percent_upgrade_domain_delta_unhealthy_nodes is None:
            raise ValueError("Invalid value for `max_percent_upgrade_domain_delta_unhealthy_nodes`, must not be `None`")
        if max_percent_upgrade_domain_delta_unhealthy_nodes is not None and max_percent_upgrade_domain_delta_unhealthy_nodes > 100:
            raise ValueError("Invalid value for `max_percent_upgrade_domain_delta_unhealthy_nodes`, must be a value less than or equal to `100`")
        if max_percent_upgrade_domain_delta_unhealthy_nodes is not None and max_percent_upgrade_domain_delta_unhealthy_nodes < 0:
            raise ValueError("Invalid value for `max_percent_upgrade_domain_delta_unhealthy_nodes`, must be a value greater than or equal to `0`")

        self._max_percent_upgrade_domain_delta_unhealthy_nodes = max_percent_upgrade_domain_delta_unhealthy_nodes
