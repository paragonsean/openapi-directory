/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpgradePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpgradePolicy::OAIClusterUpgradePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpgradePolicy::OAIClusterUpgradePolicy() {
    this->initializeModel();
}

OAIClusterUpgradePolicy::~OAIClusterUpgradePolicy() {}

void OAIClusterUpgradePolicy::initializeModel() {

    m_delta_health_policy_isSet = false;
    m_delta_health_policy_isValid = false;

    m_force_restart_isSet = false;
    m_force_restart_isValid = false;

    m_health_check_retry_timeout_isSet = false;
    m_health_check_retry_timeout_isValid = false;

    m_health_check_stable_duration_isSet = false;
    m_health_check_stable_duration_isValid = false;

    m_health_check_wait_duration_isSet = false;
    m_health_check_wait_duration_isValid = false;

    m_health_policy_isSet = false;
    m_health_policy_isValid = false;

    m_upgrade_domain_timeout_isSet = false;
    m_upgrade_domain_timeout_isValid = false;

    m_upgrade_replica_set_check_timeout_isSet = false;
    m_upgrade_replica_set_check_timeout_isValid = false;

    m_upgrade_timeout_isSet = false;
    m_upgrade_timeout_isValid = false;
}

void OAIClusterUpgradePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpgradePolicy::fromJsonObject(QJsonObject json) {

    m_delta_health_policy_isValid = ::OpenAPI::fromJsonValue(m_delta_health_policy, json[QString("deltaHealthPolicy")]);
    m_delta_health_policy_isSet = !json[QString("deltaHealthPolicy")].isNull() && m_delta_health_policy_isValid;

    m_force_restart_isValid = ::OpenAPI::fromJsonValue(m_force_restart, json[QString("forceRestart")]);
    m_force_restart_isSet = !json[QString("forceRestart")].isNull() && m_force_restart_isValid;

    m_health_check_retry_timeout_isValid = ::OpenAPI::fromJsonValue(m_health_check_retry_timeout, json[QString("healthCheckRetryTimeout")]);
    m_health_check_retry_timeout_isSet = !json[QString("healthCheckRetryTimeout")].isNull() && m_health_check_retry_timeout_isValid;

    m_health_check_stable_duration_isValid = ::OpenAPI::fromJsonValue(m_health_check_stable_duration, json[QString("healthCheckStableDuration")]);
    m_health_check_stable_duration_isSet = !json[QString("healthCheckStableDuration")].isNull() && m_health_check_stable_duration_isValid;

    m_health_check_wait_duration_isValid = ::OpenAPI::fromJsonValue(m_health_check_wait_duration, json[QString("healthCheckWaitDuration")]);
    m_health_check_wait_duration_isSet = !json[QString("healthCheckWaitDuration")].isNull() && m_health_check_wait_duration_isValid;

    m_health_policy_isValid = ::OpenAPI::fromJsonValue(m_health_policy, json[QString("healthPolicy")]);
    m_health_policy_isSet = !json[QString("healthPolicy")].isNull() && m_health_policy_isValid;

    m_upgrade_domain_timeout_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain_timeout, json[QString("upgradeDomainTimeout")]);
    m_upgrade_domain_timeout_isSet = !json[QString("upgradeDomainTimeout")].isNull() && m_upgrade_domain_timeout_isValid;

    m_upgrade_replica_set_check_timeout_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout, json[QString("upgradeReplicaSetCheckTimeout")]);
    m_upgrade_replica_set_check_timeout_isSet = !json[QString("upgradeReplicaSetCheckTimeout")].isNull() && m_upgrade_replica_set_check_timeout_isValid;

    m_upgrade_timeout_isValid = ::OpenAPI::fromJsonValue(m_upgrade_timeout, json[QString("upgradeTimeout")]);
    m_upgrade_timeout_isSet = !json[QString("upgradeTimeout")].isNull() && m_upgrade_timeout_isValid;
}

QString OAIClusterUpgradePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpgradePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_delta_health_policy.isSet()) {
        obj.insert(QString("deltaHealthPolicy"), ::OpenAPI::toJsonValue(m_delta_health_policy));
    }
    if (m_force_restart_isSet) {
        obj.insert(QString("forceRestart"), ::OpenAPI::toJsonValue(m_force_restart));
    }
    if (m_health_check_retry_timeout_isSet) {
        obj.insert(QString("healthCheckRetryTimeout"), ::OpenAPI::toJsonValue(m_health_check_retry_timeout));
    }
    if (m_health_check_stable_duration_isSet) {
        obj.insert(QString("healthCheckStableDuration"), ::OpenAPI::toJsonValue(m_health_check_stable_duration));
    }
    if (m_health_check_wait_duration_isSet) {
        obj.insert(QString("healthCheckWaitDuration"), ::OpenAPI::toJsonValue(m_health_check_wait_duration));
    }
    if (m_health_policy.isSet()) {
        obj.insert(QString("healthPolicy"), ::OpenAPI::toJsonValue(m_health_policy));
    }
    if (m_upgrade_domain_timeout_isSet) {
        obj.insert(QString("upgradeDomainTimeout"), ::OpenAPI::toJsonValue(m_upgrade_domain_timeout));
    }
    if (m_upgrade_replica_set_check_timeout_isSet) {
        obj.insert(QString("upgradeReplicaSetCheckTimeout"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout));
    }
    if (m_upgrade_timeout_isSet) {
        obj.insert(QString("upgradeTimeout"), ::OpenAPI::toJsonValue(m_upgrade_timeout));
    }
    return obj;
}

OAIClusterUpgradeDeltaHealthPolicy OAIClusterUpgradePolicy::getDeltaHealthPolicy() const {
    return m_delta_health_policy;
}
void OAIClusterUpgradePolicy::setDeltaHealthPolicy(const OAIClusterUpgradeDeltaHealthPolicy &delta_health_policy) {
    m_delta_health_policy = delta_health_policy;
    m_delta_health_policy_isSet = true;
}

bool OAIClusterUpgradePolicy::is_delta_health_policy_Set() const{
    return m_delta_health_policy_isSet;
}

bool OAIClusterUpgradePolicy::is_delta_health_policy_Valid() const{
    return m_delta_health_policy_isValid;
}

bool OAIClusterUpgradePolicy::isForceRestart() const {
    return m_force_restart;
}
void OAIClusterUpgradePolicy::setForceRestart(const bool &force_restart) {
    m_force_restart = force_restart;
    m_force_restart_isSet = true;
}

bool OAIClusterUpgradePolicy::is_force_restart_Set() const{
    return m_force_restart_isSet;
}

bool OAIClusterUpgradePolicy::is_force_restart_Valid() const{
    return m_force_restart_isValid;
}

QString OAIClusterUpgradePolicy::getHealthCheckRetryTimeout() const {
    return m_health_check_retry_timeout;
}
void OAIClusterUpgradePolicy::setHealthCheckRetryTimeout(const QString &health_check_retry_timeout) {
    m_health_check_retry_timeout = health_check_retry_timeout;
    m_health_check_retry_timeout_isSet = true;
}

bool OAIClusterUpgradePolicy::is_health_check_retry_timeout_Set() const{
    return m_health_check_retry_timeout_isSet;
}

bool OAIClusterUpgradePolicy::is_health_check_retry_timeout_Valid() const{
    return m_health_check_retry_timeout_isValid;
}

QString OAIClusterUpgradePolicy::getHealthCheckStableDuration() const {
    return m_health_check_stable_duration;
}
void OAIClusterUpgradePolicy::setHealthCheckStableDuration(const QString &health_check_stable_duration) {
    m_health_check_stable_duration = health_check_stable_duration;
    m_health_check_stable_duration_isSet = true;
}

bool OAIClusterUpgradePolicy::is_health_check_stable_duration_Set() const{
    return m_health_check_stable_duration_isSet;
}

bool OAIClusterUpgradePolicy::is_health_check_stable_duration_Valid() const{
    return m_health_check_stable_duration_isValid;
}

QString OAIClusterUpgradePolicy::getHealthCheckWaitDuration() const {
    return m_health_check_wait_duration;
}
void OAIClusterUpgradePolicy::setHealthCheckWaitDuration(const QString &health_check_wait_duration) {
    m_health_check_wait_duration = health_check_wait_duration;
    m_health_check_wait_duration_isSet = true;
}

bool OAIClusterUpgradePolicy::is_health_check_wait_duration_Set() const{
    return m_health_check_wait_duration_isSet;
}

bool OAIClusterUpgradePolicy::is_health_check_wait_duration_Valid() const{
    return m_health_check_wait_duration_isValid;
}

OAIClusterHealthPolicy OAIClusterUpgradePolicy::getHealthPolicy() const {
    return m_health_policy;
}
void OAIClusterUpgradePolicy::setHealthPolicy(const OAIClusterHealthPolicy &health_policy) {
    m_health_policy = health_policy;
    m_health_policy_isSet = true;
}

bool OAIClusterUpgradePolicy::is_health_policy_Set() const{
    return m_health_policy_isSet;
}

bool OAIClusterUpgradePolicy::is_health_policy_Valid() const{
    return m_health_policy_isValid;
}

QString OAIClusterUpgradePolicy::getUpgradeDomainTimeout() const {
    return m_upgrade_domain_timeout;
}
void OAIClusterUpgradePolicy::setUpgradeDomainTimeout(const QString &upgrade_domain_timeout) {
    m_upgrade_domain_timeout = upgrade_domain_timeout;
    m_upgrade_domain_timeout_isSet = true;
}

bool OAIClusterUpgradePolicy::is_upgrade_domain_timeout_Set() const{
    return m_upgrade_domain_timeout_isSet;
}

bool OAIClusterUpgradePolicy::is_upgrade_domain_timeout_Valid() const{
    return m_upgrade_domain_timeout_isValid;
}

QString OAIClusterUpgradePolicy::getUpgradeReplicaSetCheckTimeout() const {
    return m_upgrade_replica_set_check_timeout;
}
void OAIClusterUpgradePolicy::setUpgradeReplicaSetCheckTimeout(const QString &upgrade_replica_set_check_timeout) {
    m_upgrade_replica_set_check_timeout = upgrade_replica_set_check_timeout;
    m_upgrade_replica_set_check_timeout_isSet = true;
}

bool OAIClusterUpgradePolicy::is_upgrade_replica_set_check_timeout_Set() const{
    return m_upgrade_replica_set_check_timeout_isSet;
}

bool OAIClusterUpgradePolicy::is_upgrade_replica_set_check_timeout_Valid() const{
    return m_upgrade_replica_set_check_timeout_isValid;
}

QString OAIClusterUpgradePolicy::getUpgradeTimeout() const {
    return m_upgrade_timeout;
}
void OAIClusterUpgradePolicy::setUpgradeTimeout(const QString &upgrade_timeout) {
    m_upgrade_timeout = upgrade_timeout;
    m_upgrade_timeout_isSet = true;
}

bool OAIClusterUpgradePolicy::is_upgrade_timeout_Set() const{
    return m_upgrade_timeout_isSet;
}

bool OAIClusterUpgradePolicy::is_upgrade_timeout_Valid() const{
    return m_upgrade_timeout_isValid;
}

bool OAIClusterUpgradePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delta_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_retry_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_stable_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_wait_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpgradePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_health_check_retry_timeout_isValid && m_health_check_stable_duration_isValid && m_health_check_wait_duration_isValid && m_health_policy_isValid && m_upgrade_domain_timeout_isValid && m_upgrade_replica_set_check_timeout_isValid && m_upgrade_timeout_isValid && true;
}

} // namespace OpenAPI
