/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClusterPropertiesUpdateParameters.h
 *
 * Describes the cluster resource properties that can be updated during PATCH operation.
 */

#ifndef OAIClusterPropertiesUpdateParameters_H
#define OAIClusterPropertiesUpdateParameters_H

#include <QJsonObject>

#include "OAIAddOnFeatures.h"
#include "OAICertificateDescription.h"
#include "OAIClientCertificateCommonName.h"
#include "OAIClientCertificateThumbprint.h"
#include "OAIClusterUpgradePolicy.h"
#include "OAINodeTypeDescription.h"
#include "OAIReliabilityLevel.h"
#include "OAIServerCertificateCommonNames.h"
#include "OAISettingsSectionDescription.h"
#include "OAIUpgradeMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICertificateDescription;
class OAIServerCertificateCommonNames;
class OAIClientCertificateCommonName;
class OAIClientCertificateThumbprint;
class OAISettingsSectionDescription;
class OAINodeTypeDescription;
class OAIClusterUpgradePolicy;

class OAIClusterPropertiesUpdateParameters : public OAIObject {
public:
    OAIClusterPropertiesUpdateParameters();
    OAIClusterPropertiesUpdateParameters(QString json);
    ~OAIClusterPropertiesUpdateParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAddOnFeatures> getAddOnFeatures() const;
    void setAddOnFeatures(const QList<OAIAddOnFeatures> &add_on_features);
    bool is_add_on_features_Set() const;
    bool is_add_on_features_Valid() const;

    OAICertificateDescription getCertificate() const;
    void setCertificate(const OAICertificateDescription &certificate);
    bool is_certificate_Set() const;
    bool is_certificate_Valid() const;

    OAIServerCertificateCommonNames getCertificateCommonNames() const;
    void setCertificateCommonNames(const OAIServerCertificateCommonNames &certificate_common_names);
    bool is_certificate_common_names_Set() const;
    bool is_certificate_common_names_Valid() const;

    QList<OAIClientCertificateCommonName> getClientCertificateCommonNames() const;
    void setClientCertificateCommonNames(const QList<OAIClientCertificateCommonName> &client_certificate_common_names);
    bool is_client_certificate_common_names_Set() const;
    bool is_client_certificate_common_names_Valid() const;

    QList<OAIClientCertificateThumbprint> getClientCertificateThumbprints() const;
    void setClientCertificateThumbprints(const QList<OAIClientCertificateThumbprint> &client_certificate_thumbprints);
    bool is_client_certificate_thumbprints_Set() const;
    bool is_client_certificate_thumbprints_Valid() const;

    QString getClusterCodeVersion() const;
    void setClusterCodeVersion(const QString &cluster_code_version);
    bool is_cluster_code_version_Set() const;
    bool is_cluster_code_version_Valid() const;

    bool isEventStoreServiceEnabled() const;
    void setEventStoreServiceEnabled(const bool &event_store_service_enabled);
    bool is_event_store_service_enabled_Set() const;
    bool is_event_store_service_enabled_Valid() const;

    QList<OAISettingsSectionDescription> getFabricSettings() const;
    void setFabricSettings(const QList<OAISettingsSectionDescription> &fabric_settings);
    bool is_fabric_settings_Set() const;
    bool is_fabric_settings_Valid() const;

    QList<OAINodeTypeDescription> getNodeTypes() const;
    void setNodeTypes(const QList<OAINodeTypeDescription> &node_types);
    bool is_node_types_Set() const;
    bool is_node_types_Valid() const;

    OAIReliabilityLevel getReliabilityLevel() const;
    void setReliabilityLevel(const OAIReliabilityLevel &reliability_level);
    bool is_reliability_level_Set() const;
    bool is_reliability_level_Valid() const;

    OAICertificateDescription getReverseProxyCertificate() const;
    void setReverseProxyCertificate(const OAICertificateDescription &reverse_proxy_certificate);
    bool is_reverse_proxy_certificate_Set() const;
    bool is_reverse_proxy_certificate_Valid() const;

    OAIClusterUpgradePolicy getUpgradeDescription() const;
    void setUpgradeDescription(const OAIClusterUpgradePolicy &upgrade_description);
    bool is_upgrade_description_Set() const;
    bool is_upgrade_description_Valid() const;

    OAIUpgradeMode getUpgradeMode() const;
    void setUpgradeMode(const OAIUpgradeMode &upgrade_mode);
    bool is_upgrade_mode_Set() const;
    bool is_upgrade_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAddOnFeatures> m_add_on_features;
    bool m_add_on_features_isSet;
    bool m_add_on_features_isValid;

    OAICertificateDescription m_certificate;
    bool m_certificate_isSet;
    bool m_certificate_isValid;

    OAIServerCertificateCommonNames m_certificate_common_names;
    bool m_certificate_common_names_isSet;
    bool m_certificate_common_names_isValid;

    QList<OAIClientCertificateCommonName> m_client_certificate_common_names;
    bool m_client_certificate_common_names_isSet;
    bool m_client_certificate_common_names_isValid;

    QList<OAIClientCertificateThumbprint> m_client_certificate_thumbprints;
    bool m_client_certificate_thumbprints_isSet;
    bool m_client_certificate_thumbprints_isValid;

    QString m_cluster_code_version;
    bool m_cluster_code_version_isSet;
    bool m_cluster_code_version_isValid;

    bool m_event_store_service_enabled;
    bool m_event_store_service_enabled_isSet;
    bool m_event_store_service_enabled_isValid;

    QList<OAISettingsSectionDescription> m_fabric_settings;
    bool m_fabric_settings_isSet;
    bool m_fabric_settings_isValid;

    QList<OAINodeTypeDescription> m_node_types;
    bool m_node_types_isSet;
    bool m_node_types_isValid;

    OAIReliabilityLevel m_reliability_level;
    bool m_reliability_level_isSet;
    bool m_reliability_level_isValid;

    OAICertificateDescription m_reverse_proxy_certificate;
    bool m_reverse_proxy_certificate_isSet;
    bool m_reverse_proxy_certificate_isValid;

    OAIClusterUpgradePolicy m_upgrade_description;
    bool m_upgrade_description_isSet;
    bool m_upgrade_description_isValid;

    OAIUpgradeMode m_upgrade_mode;
    bool m_upgrade_mode_isSet;
    bool m_upgrade_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClusterPropertiesUpdateParameters)

#endif // OAIClusterPropertiesUpdateParameters_H
