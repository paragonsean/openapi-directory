/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeTypeDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeTypeDescription::OAINodeTypeDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeTypeDescription::OAINodeTypeDescription() {
    this->initializeModel();
}

OAINodeTypeDescription::~OAINodeTypeDescription() {}

void OAINodeTypeDescription::initializeModel() {

    m_application_ports_isSet = false;
    m_application_ports_isValid = false;

    m_capacities_isSet = false;
    m_capacities_isValid = false;

    m_client_connection_endpoint_port_isSet = false;
    m_client_connection_endpoint_port_isValid = false;

    m_durability_level_isSet = false;
    m_durability_level_isValid = false;

    m_ephemeral_ports_isSet = false;
    m_ephemeral_ports_isValid = false;

    m_http_gateway_endpoint_port_isSet = false;
    m_http_gateway_endpoint_port_isValid = false;

    m_is_primary_isSet = false;
    m_is_primary_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_placement_properties_isSet = false;
    m_placement_properties_isValid = false;

    m_reverse_proxy_endpoint_port_isSet = false;
    m_reverse_proxy_endpoint_port_isValid = false;

    m_vm_instance_count_isSet = false;
    m_vm_instance_count_isValid = false;
}

void OAINodeTypeDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeTypeDescription::fromJsonObject(QJsonObject json) {

    m_application_ports_isValid = ::OpenAPI::fromJsonValue(m_application_ports, json[QString("applicationPorts")]);
    m_application_ports_isSet = !json[QString("applicationPorts")].isNull() && m_application_ports_isValid;

    m_capacities_isValid = ::OpenAPI::fromJsonValue(m_capacities, json[QString("capacities")]);
    m_capacities_isSet = !json[QString("capacities")].isNull() && m_capacities_isValid;

    m_client_connection_endpoint_port_isValid = ::OpenAPI::fromJsonValue(m_client_connection_endpoint_port, json[QString("clientConnectionEndpointPort")]);
    m_client_connection_endpoint_port_isSet = !json[QString("clientConnectionEndpointPort")].isNull() && m_client_connection_endpoint_port_isValid;

    m_durability_level_isValid = ::OpenAPI::fromJsonValue(m_durability_level, json[QString("durabilityLevel")]);
    m_durability_level_isSet = !json[QString("durabilityLevel")].isNull() && m_durability_level_isValid;

    m_ephemeral_ports_isValid = ::OpenAPI::fromJsonValue(m_ephemeral_ports, json[QString("ephemeralPorts")]);
    m_ephemeral_ports_isSet = !json[QString("ephemeralPorts")].isNull() && m_ephemeral_ports_isValid;

    m_http_gateway_endpoint_port_isValid = ::OpenAPI::fromJsonValue(m_http_gateway_endpoint_port, json[QString("httpGatewayEndpointPort")]);
    m_http_gateway_endpoint_port_isSet = !json[QString("httpGatewayEndpointPort")].isNull() && m_http_gateway_endpoint_port_isValid;

    m_is_primary_isValid = ::OpenAPI::fromJsonValue(m_is_primary, json[QString("isPrimary")]);
    m_is_primary_isSet = !json[QString("isPrimary")].isNull() && m_is_primary_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_placement_properties_isValid = ::OpenAPI::fromJsonValue(m_placement_properties, json[QString("placementProperties")]);
    m_placement_properties_isSet = !json[QString("placementProperties")].isNull() && m_placement_properties_isValid;

    m_reverse_proxy_endpoint_port_isValid = ::OpenAPI::fromJsonValue(m_reverse_proxy_endpoint_port, json[QString("reverseProxyEndpointPort")]);
    m_reverse_proxy_endpoint_port_isSet = !json[QString("reverseProxyEndpointPort")].isNull() && m_reverse_proxy_endpoint_port_isValid;

    m_vm_instance_count_isValid = ::OpenAPI::fromJsonValue(m_vm_instance_count, json[QString("vmInstanceCount")]);
    m_vm_instance_count_isSet = !json[QString("vmInstanceCount")].isNull() && m_vm_instance_count_isValid;
}

QString OAINodeTypeDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeTypeDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_application_ports.isSet()) {
        obj.insert(QString("applicationPorts"), ::OpenAPI::toJsonValue(m_application_ports));
    }
    if (m_capacities.size() > 0) {
        obj.insert(QString("capacities"), ::OpenAPI::toJsonValue(m_capacities));
    }
    if (m_client_connection_endpoint_port_isSet) {
        obj.insert(QString("clientConnectionEndpointPort"), ::OpenAPI::toJsonValue(m_client_connection_endpoint_port));
    }
    if (m_durability_level.isSet()) {
        obj.insert(QString("durabilityLevel"), ::OpenAPI::toJsonValue(m_durability_level));
    }
    if (m_ephemeral_ports.isSet()) {
        obj.insert(QString("ephemeralPorts"), ::OpenAPI::toJsonValue(m_ephemeral_ports));
    }
    if (m_http_gateway_endpoint_port_isSet) {
        obj.insert(QString("httpGatewayEndpointPort"), ::OpenAPI::toJsonValue(m_http_gateway_endpoint_port));
    }
    if (m_is_primary_isSet) {
        obj.insert(QString("isPrimary"), ::OpenAPI::toJsonValue(m_is_primary));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_placement_properties.size() > 0) {
        obj.insert(QString("placementProperties"), ::OpenAPI::toJsonValue(m_placement_properties));
    }
    if (m_reverse_proxy_endpoint_port_isSet) {
        obj.insert(QString("reverseProxyEndpointPort"), ::OpenAPI::toJsonValue(m_reverse_proxy_endpoint_port));
    }
    if (m_vm_instance_count_isSet) {
        obj.insert(QString("vmInstanceCount"), ::OpenAPI::toJsonValue(m_vm_instance_count));
    }
    return obj;
}

OAIEndpointRangeDescription OAINodeTypeDescription::getApplicationPorts() const {
    return m_application_ports;
}
void OAINodeTypeDescription::setApplicationPorts(const OAIEndpointRangeDescription &application_ports) {
    m_application_ports = application_ports;
    m_application_ports_isSet = true;
}

bool OAINodeTypeDescription::is_application_ports_Set() const{
    return m_application_ports_isSet;
}

bool OAINodeTypeDescription::is_application_ports_Valid() const{
    return m_application_ports_isValid;
}

QMap<QString, QString> OAINodeTypeDescription::getCapacities() const {
    return m_capacities;
}
void OAINodeTypeDescription::setCapacities(const QMap<QString, QString> &capacities) {
    m_capacities = capacities;
    m_capacities_isSet = true;
}

bool OAINodeTypeDescription::is_capacities_Set() const{
    return m_capacities_isSet;
}

bool OAINodeTypeDescription::is_capacities_Valid() const{
    return m_capacities_isValid;
}

qint32 OAINodeTypeDescription::getClientConnectionEndpointPort() const {
    return m_client_connection_endpoint_port;
}
void OAINodeTypeDescription::setClientConnectionEndpointPort(const qint32 &client_connection_endpoint_port) {
    m_client_connection_endpoint_port = client_connection_endpoint_port;
    m_client_connection_endpoint_port_isSet = true;
}

bool OAINodeTypeDescription::is_client_connection_endpoint_port_Set() const{
    return m_client_connection_endpoint_port_isSet;
}

bool OAINodeTypeDescription::is_client_connection_endpoint_port_Valid() const{
    return m_client_connection_endpoint_port_isValid;
}

OAIDurabilityLevel OAINodeTypeDescription::getDurabilityLevel() const {
    return m_durability_level;
}
void OAINodeTypeDescription::setDurabilityLevel(const OAIDurabilityLevel &durability_level) {
    m_durability_level = durability_level;
    m_durability_level_isSet = true;
}

bool OAINodeTypeDescription::is_durability_level_Set() const{
    return m_durability_level_isSet;
}

bool OAINodeTypeDescription::is_durability_level_Valid() const{
    return m_durability_level_isValid;
}

OAIEndpointRangeDescription OAINodeTypeDescription::getEphemeralPorts() const {
    return m_ephemeral_ports;
}
void OAINodeTypeDescription::setEphemeralPorts(const OAIEndpointRangeDescription &ephemeral_ports) {
    m_ephemeral_ports = ephemeral_ports;
    m_ephemeral_ports_isSet = true;
}

bool OAINodeTypeDescription::is_ephemeral_ports_Set() const{
    return m_ephemeral_ports_isSet;
}

bool OAINodeTypeDescription::is_ephemeral_ports_Valid() const{
    return m_ephemeral_ports_isValid;
}

qint32 OAINodeTypeDescription::getHttpGatewayEndpointPort() const {
    return m_http_gateway_endpoint_port;
}
void OAINodeTypeDescription::setHttpGatewayEndpointPort(const qint32 &http_gateway_endpoint_port) {
    m_http_gateway_endpoint_port = http_gateway_endpoint_port;
    m_http_gateway_endpoint_port_isSet = true;
}

bool OAINodeTypeDescription::is_http_gateway_endpoint_port_Set() const{
    return m_http_gateway_endpoint_port_isSet;
}

bool OAINodeTypeDescription::is_http_gateway_endpoint_port_Valid() const{
    return m_http_gateway_endpoint_port_isValid;
}

bool OAINodeTypeDescription::isIsPrimary() const {
    return m_is_primary;
}
void OAINodeTypeDescription::setIsPrimary(const bool &is_primary) {
    m_is_primary = is_primary;
    m_is_primary_isSet = true;
}

bool OAINodeTypeDescription::is_is_primary_Set() const{
    return m_is_primary_isSet;
}

bool OAINodeTypeDescription::is_is_primary_Valid() const{
    return m_is_primary_isValid;
}

QString OAINodeTypeDescription::getName() const {
    return m_name;
}
void OAINodeTypeDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINodeTypeDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAINodeTypeDescription::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAINodeTypeDescription::getPlacementProperties() const {
    return m_placement_properties;
}
void OAINodeTypeDescription::setPlacementProperties(const QMap<QString, QString> &placement_properties) {
    m_placement_properties = placement_properties;
    m_placement_properties_isSet = true;
}

bool OAINodeTypeDescription::is_placement_properties_Set() const{
    return m_placement_properties_isSet;
}

bool OAINodeTypeDescription::is_placement_properties_Valid() const{
    return m_placement_properties_isValid;
}

qint32 OAINodeTypeDescription::getReverseProxyEndpointPort() const {
    return m_reverse_proxy_endpoint_port;
}
void OAINodeTypeDescription::setReverseProxyEndpointPort(const qint32 &reverse_proxy_endpoint_port) {
    m_reverse_proxy_endpoint_port = reverse_proxy_endpoint_port;
    m_reverse_proxy_endpoint_port_isSet = true;
}

bool OAINodeTypeDescription::is_reverse_proxy_endpoint_port_Set() const{
    return m_reverse_proxy_endpoint_port_isSet;
}

bool OAINodeTypeDescription::is_reverse_proxy_endpoint_port_Valid() const{
    return m_reverse_proxy_endpoint_port_isValid;
}

qint32 OAINodeTypeDescription::getVmInstanceCount() const {
    return m_vm_instance_count;
}
void OAINodeTypeDescription::setVmInstanceCount(const qint32 &vm_instance_count) {
    m_vm_instance_count = vm_instance_count;
    m_vm_instance_count_isSet = true;
}

bool OAINodeTypeDescription::is_vm_instance_count_Set() const{
    return m_vm_instance_count_isSet;
}

bool OAINodeTypeDescription::is_vm_instance_count_Valid() const{
    return m_vm_instance_count_isValid;
}

bool OAINodeTypeDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_ports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_connection_endpoint_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_durability_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ephemeral_ports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_gateway_endpoint_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_proxy_endpoint_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeTypeDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_connection_endpoint_port_isValid && m_http_gateway_endpoint_port_isValid && m_is_primary_isValid && m_name_isValid && m_vm_instance_count_isValid && true;
}

} // namespace OpenAPI
