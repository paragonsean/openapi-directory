/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DurabilityLevel from './DurabilityLevel';
import EndpointRangeDescription from './EndpointRangeDescription';

/**
 * The NodeTypeDescription model module.
 * @module model/NodeTypeDescription
 * @version 2019-03-01
 */
class NodeTypeDescription {
    /**
     * Constructs a new <code>NodeTypeDescription</code>.
     * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
     * @alias module:model/NodeTypeDescription
     * @param clientConnectionEndpointPort {Number} The TCP cluster management endpoint port.
     * @param httpGatewayEndpointPort {Number} The HTTP cluster management endpoint port.
     * @param isPrimary {Boolean} The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
     * @param name {String} The name of the node type.
     * @param vmInstanceCount {Number} The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
     */
    constructor(clientConnectionEndpointPort, httpGatewayEndpointPort, isPrimary, name, vmInstanceCount) { 
        
        NodeTypeDescription.initialize(this, clientConnectionEndpointPort, httpGatewayEndpointPort, isPrimary, name, vmInstanceCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientConnectionEndpointPort, httpGatewayEndpointPort, isPrimary, name, vmInstanceCount) { 
        obj['clientConnectionEndpointPort'] = clientConnectionEndpointPort;
        obj['httpGatewayEndpointPort'] = httpGatewayEndpointPort;
        obj['isPrimary'] = isPrimary;
        obj['name'] = name;
        obj['vmInstanceCount'] = vmInstanceCount;
    }

    /**
     * Constructs a <code>NodeTypeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeTypeDescription} obj Optional instance to populate.
     * @return {module:model/NodeTypeDescription} The populated <code>NodeTypeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeTypeDescription();

            if (data.hasOwnProperty('applicationPorts')) {
                obj['applicationPorts'] = EndpointRangeDescription.constructFromObject(data['applicationPorts']);
            }
            if (data.hasOwnProperty('capacities')) {
                obj['capacities'] = ApiClient.convertToType(data['capacities'], {'String': 'String'});
            }
            if (data.hasOwnProperty('clientConnectionEndpointPort')) {
                obj['clientConnectionEndpointPort'] = ApiClient.convertToType(data['clientConnectionEndpointPort'], 'Number');
            }
            if (data.hasOwnProperty('durabilityLevel')) {
                obj['durabilityLevel'] = DurabilityLevel.constructFromObject(data['durabilityLevel']);
            }
            if (data.hasOwnProperty('ephemeralPorts')) {
                obj['ephemeralPorts'] = EndpointRangeDescription.constructFromObject(data['ephemeralPorts']);
            }
            if (data.hasOwnProperty('httpGatewayEndpointPort')) {
                obj['httpGatewayEndpointPort'] = ApiClient.convertToType(data['httpGatewayEndpointPort'], 'Number');
            }
            if (data.hasOwnProperty('isPrimary')) {
                obj['isPrimary'] = ApiClient.convertToType(data['isPrimary'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('placementProperties')) {
                obj['placementProperties'] = ApiClient.convertToType(data['placementProperties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('reverseProxyEndpointPort')) {
                obj['reverseProxyEndpointPort'] = ApiClient.convertToType(data['reverseProxyEndpointPort'], 'Number');
            }
            if (data.hasOwnProperty('vmInstanceCount')) {
                obj['vmInstanceCount'] = ApiClient.convertToType(data['vmInstanceCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeTypeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeTypeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodeTypeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `applicationPorts`
        if (data['applicationPorts']) { // data not null
          EndpointRangeDescription.validateJSON(data['applicationPorts']);
        }
        // validate the optional field `ephemeralPorts`
        if (data['ephemeralPorts']) { // data not null
          EndpointRangeDescription.validateJSON(data['ephemeralPorts']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

NodeTypeDescription.RequiredProperties = ["clientConnectionEndpointPort", "httpGatewayEndpointPort", "isPrimary", "name", "vmInstanceCount"];

/**
 * @member {module:model/EndpointRangeDescription} applicationPorts
 */
NodeTypeDescription.prototype['applicationPorts'] = undefined;

/**
 * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
 * @member {Object.<String, String>} capacities
 */
NodeTypeDescription.prototype['capacities'] = undefined;

/**
 * The TCP cluster management endpoint port.
 * @member {Number} clientConnectionEndpointPort
 */
NodeTypeDescription.prototype['clientConnectionEndpointPort'] = undefined;

/**
 * @member {module:model/DurabilityLevel} durabilityLevel
 */
NodeTypeDescription.prototype['durabilityLevel'] = undefined;

/**
 * @member {module:model/EndpointRangeDescription} ephemeralPorts
 */
NodeTypeDescription.prototype['ephemeralPorts'] = undefined;

/**
 * The HTTP cluster management endpoint port.
 * @member {Number} httpGatewayEndpointPort
 */
NodeTypeDescription.prototype['httpGatewayEndpointPort'] = undefined;

/**
 * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
 * @member {Boolean} isPrimary
 */
NodeTypeDescription.prototype['isPrimary'] = undefined;

/**
 * The name of the node type.
 * @member {String} name
 */
NodeTypeDescription.prototype['name'] = undefined;

/**
 * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
 * @member {Object.<String, String>} placementProperties
 */
NodeTypeDescription.prototype['placementProperties'] = undefined;

/**
 * The endpoint used by reverse proxy.
 * @member {Number} reverseProxyEndpointPort
 */
NodeTypeDescription.prototype['reverseProxyEndpointPort'] = undefined;

/**
 * The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
 * @member {Number} vmInstanceCount
 */
NodeTypeDescription.prototype['vmInstanceCount'] = undefined;






export default NodeTypeDescription;

