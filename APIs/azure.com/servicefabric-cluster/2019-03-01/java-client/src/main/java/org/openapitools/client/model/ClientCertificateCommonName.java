/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the client certificate details using common name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:50.766027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClientCertificateCommonName {
  public static final String SERIALIZED_NAME_CERTIFICATE_COMMON_NAME = "certificateCommonName";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_COMMON_NAME)
  private String certificateCommonName;

  public static final String SERIALIZED_NAME_CERTIFICATE_ISSUER_THUMBPRINT = "certificateIssuerThumbprint";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ISSUER_THUMBPRINT)
  private String certificateIssuerThumbprint;

  public static final String SERIALIZED_NAME_IS_ADMIN = "isAdmin";
  @SerializedName(SERIALIZED_NAME_IS_ADMIN)
  private Boolean isAdmin;

  public ClientCertificateCommonName() {
  }

  public ClientCertificateCommonName certificateCommonName(String certificateCommonName) {
    this.certificateCommonName = certificateCommonName;
    return this;
  }

  /**
   * The common name of the client certificate.
   * @return certificateCommonName
   */
  @javax.annotation.Nonnull
  public String getCertificateCommonName() {
    return certificateCommonName;
  }

  public void setCertificateCommonName(String certificateCommonName) {
    this.certificateCommonName = certificateCommonName;
  }


  public ClientCertificateCommonName certificateIssuerThumbprint(String certificateIssuerThumbprint) {
    this.certificateIssuerThumbprint = certificateIssuerThumbprint;
    return this;
  }

  /**
   * The issuer thumbprint of the client certificate.
   * @return certificateIssuerThumbprint
   */
  @javax.annotation.Nonnull
  public String getCertificateIssuerThumbprint() {
    return certificateIssuerThumbprint;
  }

  public void setCertificateIssuerThumbprint(String certificateIssuerThumbprint) {
    this.certificateIssuerThumbprint = certificateIssuerThumbprint;
  }


  public ClientCertificateCommonName isAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
    return this;
  }

  /**
   * Indicates if the client certificate has admin access to the cluster. Non admin clients can perform only read only operations on the cluster.
   * @return isAdmin
   */
  @javax.annotation.Nonnull
  public Boolean getIsAdmin() {
    return isAdmin;
  }

  public void setIsAdmin(Boolean isAdmin) {
    this.isAdmin = isAdmin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClientCertificateCommonName clientCertificateCommonName = (ClientCertificateCommonName) o;
    return Objects.equals(this.certificateCommonName, clientCertificateCommonName.certificateCommonName) &&
        Objects.equals(this.certificateIssuerThumbprint, clientCertificateCommonName.certificateIssuerThumbprint) &&
        Objects.equals(this.isAdmin, clientCertificateCommonName.isAdmin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateCommonName, certificateIssuerThumbprint, isAdmin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClientCertificateCommonName {\n");
    sb.append("    certificateCommonName: ").append(toIndentedString(certificateCommonName)).append("\n");
    sb.append("    certificateIssuerThumbprint: ").append(toIndentedString(certificateIssuerThumbprint)).append("\n");
    sb.append("    isAdmin: ").append(toIndentedString(isAdmin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateCommonName");
    openapiFields.add("certificateIssuerThumbprint");
    openapiFields.add("isAdmin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("certificateCommonName");
    openapiRequiredFields.add("certificateIssuerThumbprint");
    openapiRequiredFields.add("isAdmin");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClientCertificateCommonName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClientCertificateCommonName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClientCertificateCommonName is not found in the empty JSON string", ClientCertificateCommonName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClientCertificateCommonName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClientCertificateCommonName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClientCertificateCommonName.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("certificateCommonName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateCommonName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateCommonName").toString()));
      }
      if (!jsonObj.get("certificateIssuerThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateIssuerThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateIssuerThumbprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClientCertificateCommonName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClientCertificateCommonName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClientCertificateCommonName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClientCertificateCommonName.class));

       return (TypeAdapter<T>) new TypeAdapter<ClientCertificateCommonName>() {
           @Override
           public void write(JsonWriter out, ClientCertificateCommonName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClientCertificateCommonName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClientCertificateCommonName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClientCertificateCommonName
   * @throws IOException if the JSON string is invalid with respect to ClientCertificateCommonName
   */
  public static ClientCertificateCommonName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClientCertificateCommonName.class);
  }

  /**
   * Convert an instance of ClientCertificateCommonName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

