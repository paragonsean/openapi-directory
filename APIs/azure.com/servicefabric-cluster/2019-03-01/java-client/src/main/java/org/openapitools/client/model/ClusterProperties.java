/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddOnFeatures;
import org.openapitools.client.model.AzureActiveDirectory;
import org.openapitools.client.model.CertificateDescription;
import org.openapitools.client.model.ClientCertificateCommonName;
import org.openapitools.client.model.ClientCertificateThumbprint;
import org.openapitools.client.model.ClusterState;
import org.openapitools.client.model.ClusterUpgradePolicy;
import org.openapitools.client.model.ClusterVersionDetails;
import org.openapitools.client.model.DiagnosticsStorageAccountConfig;
import org.openapitools.client.model.NodeTypeDescription;
import org.openapitools.client.model.ReliabilityLevel;
import org.openapitools.client.model.ServerCertificateCommonNames;
import org.openapitools.client.model.SettingsSectionDescription;
import org.openapitools.client.model.UpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the cluster resource properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:50.766027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterProperties {
  public static final String SERIALIZED_NAME_ADD_ON_FEATURES = "addOnFeatures";
  @SerializedName(SERIALIZED_NAME_ADD_ON_FEATURES)
  private List<AddOnFeatures> addOnFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_CLUSTER_VERSIONS = "availableClusterVersions";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_CLUSTER_VERSIONS)
  private List<ClusterVersionDetails> availableClusterVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_AZURE_ACTIVE_DIRECTORY = "azureActiveDirectory";
  @SerializedName(SERIALIZED_NAME_AZURE_ACTIVE_DIRECTORY)
  private AzureActiveDirectory azureActiveDirectory;

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private CertificateDescription certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_COMMON_NAMES = "certificateCommonNames";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_COMMON_NAMES)
  private ServerCertificateCommonNames certificateCommonNames;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_COMMON_NAMES = "clientCertificateCommonNames";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_COMMON_NAMES)
  private List<ClientCertificateCommonName> clientCertificateCommonNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_THUMBPRINTS = "clientCertificateThumbprints";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_THUMBPRINTS)
  private List<ClientCertificateThumbprint> clientCertificateThumbprints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_CODE_VERSION = "clusterCodeVersion";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CODE_VERSION)
  private String clusterCodeVersion;

  public static final String SERIALIZED_NAME_CLUSTER_ENDPOINT = "clusterEndpoint";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ENDPOINT)
  private String clusterEndpoint;

  public static final String SERIALIZED_NAME_CLUSTER_ID = "clusterId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_CLUSTER_STATE = "clusterState";
  @SerializedName(SERIALIZED_NAME_CLUSTER_STATE)
  private ClusterState clusterState;

  public static final String SERIALIZED_NAME_DIAGNOSTICS_STORAGE_ACCOUNT_CONFIG = "diagnosticsStorageAccountConfig";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS_STORAGE_ACCOUNT_CONFIG)
  private DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig;

  public static final String SERIALIZED_NAME_EVENT_STORE_SERVICE_ENABLED = "eventStoreServiceEnabled";
  @SerializedName(SERIALIZED_NAME_EVENT_STORE_SERVICE_ENABLED)
  private Boolean eventStoreServiceEnabled;

  public static final String SERIALIZED_NAME_FABRIC_SETTINGS = "fabricSettings";
  @SerializedName(SERIALIZED_NAME_FABRIC_SETTINGS)
  private List<SettingsSectionDescription> fabricSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGEMENT_ENDPOINT = "managementEndpoint";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_ENDPOINT)
  private String managementEndpoint;

  public static final String SERIALIZED_NAME_NODE_TYPES = "nodeTypes";
  @SerializedName(SERIALIZED_NAME_NODE_TYPES)
  private List<NodeTypeDescription> nodeTypes = new ArrayList<>();

  /**
   * The provisioning state of the cluster resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    UPDATING("Updating"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RELIABILITY_LEVEL = "reliabilityLevel";
  @SerializedName(SERIALIZED_NAME_RELIABILITY_LEVEL)
  private ReliabilityLevel reliabilityLevel;

  public static final String SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE = "reverseProxyCertificate";
  @SerializedName(SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE)
  private CertificateDescription reverseProxyCertificate;

  public static final String SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE_COMMON_NAMES = "reverseProxyCertificateCommonNames";
  @SerializedName(SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE_COMMON_NAMES)
  private ServerCertificateCommonNames reverseProxyCertificateCommonNames;

  public static final String SERIALIZED_NAME_UPGRADE_DESCRIPTION = "upgradeDescription";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DESCRIPTION)
  private ClusterUpgradePolicy upgradeDescription;

  public static final String SERIALIZED_NAME_UPGRADE_MODE = "upgradeMode";
  @SerializedName(SERIALIZED_NAME_UPGRADE_MODE)
  private UpgradeMode upgradeMode;

  public static final String SERIALIZED_NAME_VM_IMAGE = "vmImage";
  @SerializedName(SERIALIZED_NAME_VM_IMAGE)
  private String vmImage;

  public ClusterProperties() {
  }

  public ClusterProperties(
     List<ClusterVersionDetails> availableClusterVersions, 
     String clusterEndpoint, 
     String clusterId, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.availableClusterVersions = availableClusterVersions;
    this.clusterEndpoint = clusterEndpoint;
    this.clusterId = clusterId;
    this.provisioningState = provisioningState;
  }

  public ClusterProperties addOnFeatures(List<AddOnFeatures> addOnFeatures) {
    this.addOnFeatures = addOnFeatures;
    return this;
  }

  public ClusterProperties addAddOnFeaturesItem(AddOnFeatures addOnFeaturesItem) {
    if (this.addOnFeatures == null) {
      this.addOnFeatures = new ArrayList<>();
    }
    this.addOnFeatures.add(addOnFeaturesItem);
    return this;
  }

  /**
   * The list of add-on features to enable in the cluster.
   * @return addOnFeatures
   */
  @javax.annotation.Nullable
  public List<AddOnFeatures> getAddOnFeatures() {
    return addOnFeatures;
  }

  public void setAddOnFeatures(List<AddOnFeatures> addOnFeatures) {
    this.addOnFeatures = addOnFeatures;
  }


  /**
   * The Service Fabric runtime versions available for this cluster.
   * @return availableClusterVersions
   */
  @javax.annotation.Nullable
  public List<ClusterVersionDetails> getAvailableClusterVersions() {
    return availableClusterVersions;
  }



  public ClusterProperties azureActiveDirectory(AzureActiveDirectory azureActiveDirectory) {
    this.azureActiveDirectory = azureActiveDirectory;
    return this;
  }

  /**
   * Get azureActiveDirectory
   * @return azureActiveDirectory
   */
  @javax.annotation.Nullable
  public AzureActiveDirectory getAzureActiveDirectory() {
    return azureActiveDirectory;
  }

  public void setAzureActiveDirectory(AzureActiveDirectory azureActiveDirectory) {
    this.azureActiveDirectory = azureActiveDirectory;
  }


  public ClusterProperties certificate(CertificateDescription certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public CertificateDescription getCertificate() {
    return certificate;
  }

  public void setCertificate(CertificateDescription certificate) {
    this.certificate = certificate;
  }


  public ClusterProperties certificateCommonNames(ServerCertificateCommonNames certificateCommonNames) {
    this.certificateCommonNames = certificateCommonNames;
    return this;
  }

  /**
   * Get certificateCommonNames
   * @return certificateCommonNames
   */
  @javax.annotation.Nullable
  public ServerCertificateCommonNames getCertificateCommonNames() {
    return certificateCommonNames;
  }

  public void setCertificateCommonNames(ServerCertificateCommonNames certificateCommonNames) {
    this.certificateCommonNames = certificateCommonNames;
  }


  public ClusterProperties clientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames) {
    this.clientCertificateCommonNames = clientCertificateCommonNames;
    return this;
  }

  public ClusterProperties addClientCertificateCommonNamesItem(ClientCertificateCommonName clientCertificateCommonNamesItem) {
    if (this.clientCertificateCommonNames == null) {
      this.clientCertificateCommonNames = new ArrayList<>();
    }
    this.clientCertificateCommonNames.add(clientCertificateCommonNamesItem);
    return this;
  }

  /**
   * The list of client certificates referenced by common name that are allowed to manage the cluster.
   * @return clientCertificateCommonNames
   */
  @javax.annotation.Nullable
  public List<ClientCertificateCommonName> getClientCertificateCommonNames() {
    return clientCertificateCommonNames;
  }

  public void setClientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames) {
    this.clientCertificateCommonNames = clientCertificateCommonNames;
  }


  public ClusterProperties clientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints) {
    this.clientCertificateThumbprints = clientCertificateThumbprints;
    return this;
  }

  public ClusterProperties addClientCertificateThumbprintsItem(ClientCertificateThumbprint clientCertificateThumbprintsItem) {
    if (this.clientCertificateThumbprints == null) {
      this.clientCertificateThumbprints = new ArrayList<>();
    }
    this.clientCertificateThumbprints.add(clientCertificateThumbprintsItem);
    return this;
  }

  /**
   * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
   * @return clientCertificateThumbprints
   */
  @javax.annotation.Nullable
  public List<ClientCertificateThumbprint> getClientCertificateThumbprints() {
    return clientCertificateThumbprints;
  }

  public void setClientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints) {
    this.clientCertificateThumbprints = clientCertificateThumbprints;
  }


  public ClusterProperties clusterCodeVersion(String clusterCodeVersion) {
    this.clusterCodeVersion = clusterCodeVersion;
    return this;
  }

  /**
   * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
   * @return clusterCodeVersion
   */
  @javax.annotation.Nullable
  public String getClusterCodeVersion() {
    return clusterCodeVersion;
  }

  public void setClusterCodeVersion(String clusterCodeVersion) {
    this.clusterCodeVersion = clusterCodeVersion;
  }


  /**
   * The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
   * @return clusterEndpoint
   */
  @javax.annotation.Nullable
  public String getClusterEndpoint() {
    return clusterEndpoint;
  }



  /**
   * A service generated unique identifier for the cluster resource.
   * @return clusterId
   */
  @javax.annotation.Nullable
  public String getClusterId() {
    return clusterId;
  }



  public ClusterProperties clusterState(ClusterState clusterState) {
    this.clusterState = clusterState;
    return this;
  }

  /**
   * Get clusterState
   * @return clusterState
   */
  @javax.annotation.Nullable
  public ClusterState getClusterState() {
    return clusterState;
  }

  public void setClusterState(ClusterState clusterState) {
    this.clusterState = clusterState;
  }


  public ClusterProperties diagnosticsStorageAccountConfig(DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig) {
    this.diagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
    return this;
  }

  /**
   * Get diagnosticsStorageAccountConfig
   * @return diagnosticsStorageAccountConfig
   */
  @javax.annotation.Nullable
  public DiagnosticsStorageAccountConfig getDiagnosticsStorageAccountConfig() {
    return diagnosticsStorageAccountConfig;
  }

  public void setDiagnosticsStorageAccountConfig(DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig) {
    this.diagnosticsStorageAccountConfig = diagnosticsStorageAccountConfig;
  }


  public ClusterProperties eventStoreServiceEnabled(Boolean eventStoreServiceEnabled) {
    this.eventStoreServiceEnabled = eventStoreServiceEnabled;
    return this;
  }

  /**
   * Indicates if the event store service is enabled.
   * @return eventStoreServiceEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEventStoreServiceEnabled() {
    return eventStoreServiceEnabled;
  }

  public void setEventStoreServiceEnabled(Boolean eventStoreServiceEnabled) {
    this.eventStoreServiceEnabled = eventStoreServiceEnabled;
  }


  public ClusterProperties fabricSettings(List<SettingsSectionDescription> fabricSettings) {
    this.fabricSettings = fabricSettings;
    return this;
  }

  public ClusterProperties addFabricSettingsItem(SettingsSectionDescription fabricSettingsItem) {
    if (this.fabricSettings == null) {
      this.fabricSettings = new ArrayList<>();
    }
    this.fabricSettings.add(fabricSettingsItem);
    return this;
  }

  /**
   * The list of custom fabric settings to configure the cluster.
   * @return fabricSettings
   */
  @javax.annotation.Nullable
  public List<SettingsSectionDescription> getFabricSettings() {
    return fabricSettings;
  }

  public void setFabricSettings(List<SettingsSectionDescription> fabricSettings) {
    this.fabricSettings = fabricSettings;
  }


  public ClusterProperties managementEndpoint(String managementEndpoint) {
    this.managementEndpoint = managementEndpoint;
    return this;
  }

  /**
   * The http management endpoint of the cluster.
   * @return managementEndpoint
   */
  @javax.annotation.Nonnull
  public String getManagementEndpoint() {
    return managementEndpoint;
  }

  public void setManagementEndpoint(String managementEndpoint) {
    this.managementEndpoint = managementEndpoint;
  }


  public ClusterProperties nodeTypes(List<NodeTypeDescription> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public ClusterProperties addNodeTypesItem(NodeTypeDescription nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

  /**
   * The list of node types in the cluster.
   * @return nodeTypes
   */
  @javax.annotation.Nonnull
  public List<NodeTypeDescription> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<NodeTypeDescription> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }


  /**
   * The provisioning state of the cluster resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ClusterProperties reliabilityLevel(ReliabilityLevel reliabilityLevel) {
    this.reliabilityLevel = reliabilityLevel;
    return this;
  }

  /**
   * Get reliabilityLevel
   * @return reliabilityLevel
   */
  @javax.annotation.Nullable
  public ReliabilityLevel getReliabilityLevel() {
    return reliabilityLevel;
  }

  public void setReliabilityLevel(ReliabilityLevel reliabilityLevel) {
    this.reliabilityLevel = reliabilityLevel;
  }


  public ClusterProperties reverseProxyCertificate(CertificateDescription reverseProxyCertificate) {
    this.reverseProxyCertificate = reverseProxyCertificate;
    return this;
  }

  /**
   * Get reverseProxyCertificate
   * @return reverseProxyCertificate
   */
  @javax.annotation.Nullable
  public CertificateDescription getReverseProxyCertificate() {
    return reverseProxyCertificate;
  }

  public void setReverseProxyCertificate(CertificateDescription reverseProxyCertificate) {
    this.reverseProxyCertificate = reverseProxyCertificate;
  }


  public ClusterProperties reverseProxyCertificateCommonNames(ServerCertificateCommonNames reverseProxyCertificateCommonNames) {
    this.reverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
    return this;
  }

  /**
   * Get reverseProxyCertificateCommonNames
   * @return reverseProxyCertificateCommonNames
   */
  @javax.annotation.Nullable
  public ServerCertificateCommonNames getReverseProxyCertificateCommonNames() {
    return reverseProxyCertificateCommonNames;
  }

  public void setReverseProxyCertificateCommonNames(ServerCertificateCommonNames reverseProxyCertificateCommonNames) {
    this.reverseProxyCertificateCommonNames = reverseProxyCertificateCommonNames;
  }


  public ClusterProperties upgradeDescription(ClusterUpgradePolicy upgradeDescription) {
    this.upgradeDescription = upgradeDescription;
    return this;
  }

  /**
   * Get upgradeDescription
   * @return upgradeDescription
   */
  @javax.annotation.Nullable
  public ClusterUpgradePolicy getUpgradeDescription() {
    return upgradeDescription;
  }

  public void setUpgradeDescription(ClusterUpgradePolicy upgradeDescription) {
    this.upgradeDescription = upgradeDescription;
  }


  public ClusterProperties upgradeMode(UpgradeMode upgradeMode) {
    this.upgradeMode = upgradeMode;
    return this;
  }

  /**
   * Get upgradeMode
   * @return upgradeMode
   */
  @javax.annotation.Nullable
  public UpgradeMode getUpgradeMode() {
    return upgradeMode;
  }

  public void setUpgradeMode(UpgradeMode upgradeMode) {
    this.upgradeMode = upgradeMode;
  }


  public ClusterProperties vmImage(String vmImage) {
    this.vmImage = vmImage;
    return this;
  }

  /**
   * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
   * @return vmImage
   */
  @javax.annotation.Nullable
  public String getVmImage() {
    return vmImage;
  }

  public void setVmImage(String vmImage) {
    this.vmImage = vmImage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterProperties clusterProperties = (ClusterProperties) o;
    return Objects.equals(this.addOnFeatures, clusterProperties.addOnFeatures) &&
        Objects.equals(this.availableClusterVersions, clusterProperties.availableClusterVersions) &&
        Objects.equals(this.azureActiveDirectory, clusterProperties.azureActiveDirectory) &&
        Objects.equals(this.certificate, clusterProperties.certificate) &&
        Objects.equals(this.certificateCommonNames, clusterProperties.certificateCommonNames) &&
        Objects.equals(this.clientCertificateCommonNames, clusterProperties.clientCertificateCommonNames) &&
        Objects.equals(this.clientCertificateThumbprints, clusterProperties.clientCertificateThumbprints) &&
        Objects.equals(this.clusterCodeVersion, clusterProperties.clusterCodeVersion) &&
        Objects.equals(this.clusterEndpoint, clusterProperties.clusterEndpoint) &&
        Objects.equals(this.clusterId, clusterProperties.clusterId) &&
        Objects.equals(this.clusterState, clusterProperties.clusterState) &&
        Objects.equals(this.diagnosticsStorageAccountConfig, clusterProperties.diagnosticsStorageAccountConfig) &&
        Objects.equals(this.eventStoreServiceEnabled, clusterProperties.eventStoreServiceEnabled) &&
        Objects.equals(this.fabricSettings, clusterProperties.fabricSettings) &&
        Objects.equals(this.managementEndpoint, clusterProperties.managementEndpoint) &&
        Objects.equals(this.nodeTypes, clusterProperties.nodeTypes) &&
        Objects.equals(this.provisioningState, clusterProperties.provisioningState) &&
        Objects.equals(this.reliabilityLevel, clusterProperties.reliabilityLevel) &&
        Objects.equals(this.reverseProxyCertificate, clusterProperties.reverseProxyCertificate) &&
        Objects.equals(this.reverseProxyCertificateCommonNames, clusterProperties.reverseProxyCertificateCommonNames) &&
        Objects.equals(this.upgradeDescription, clusterProperties.upgradeDescription) &&
        Objects.equals(this.upgradeMode, clusterProperties.upgradeMode) &&
        Objects.equals(this.vmImage, clusterProperties.vmImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addOnFeatures, availableClusterVersions, azureActiveDirectory, certificate, certificateCommonNames, clientCertificateCommonNames, clientCertificateThumbprints, clusterCodeVersion, clusterEndpoint, clusterId, clusterState, diagnosticsStorageAccountConfig, eventStoreServiceEnabled, fabricSettings, managementEndpoint, nodeTypes, provisioningState, reliabilityLevel, reverseProxyCertificate, reverseProxyCertificateCommonNames, upgradeDescription, upgradeMode, vmImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterProperties {\n");
    sb.append("    addOnFeatures: ").append(toIndentedString(addOnFeatures)).append("\n");
    sb.append("    availableClusterVersions: ").append(toIndentedString(availableClusterVersions)).append("\n");
    sb.append("    azureActiveDirectory: ").append(toIndentedString(azureActiveDirectory)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateCommonNames: ").append(toIndentedString(certificateCommonNames)).append("\n");
    sb.append("    clientCertificateCommonNames: ").append(toIndentedString(clientCertificateCommonNames)).append("\n");
    sb.append("    clientCertificateThumbprints: ").append(toIndentedString(clientCertificateThumbprints)).append("\n");
    sb.append("    clusterCodeVersion: ").append(toIndentedString(clusterCodeVersion)).append("\n");
    sb.append("    clusterEndpoint: ").append(toIndentedString(clusterEndpoint)).append("\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    clusterState: ").append(toIndentedString(clusterState)).append("\n");
    sb.append("    diagnosticsStorageAccountConfig: ").append(toIndentedString(diagnosticsStorageAccountConfig)).append("\n");
    sb.append("    eventStoreServiceEnabled: ").append(toIndentedString(eventStoreServiceEnabled)).append("\n");
    sb.append("    fabricSettings: ").append(toIndentedString(fabricSettings)).append("\n");
    sb.append("    managementEndpoint: ").append(toIndentedString(managementEndpoint)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    reliabilityLevel: ").append(toIndentedString(reliabilityLevel)).append("\n");
    sb.append("    reverseProxyCertificate: ").append(toIndentedString(reverseProxyCertificate)).append("\n");
    sb.append("    reverseProxyCertificateCommonNames: ").append(toIndentedString(reverseProxyCertificateCommonNames)).append("\n");
    sb.append("    upgradeDescription: ").append(toIndentedString(upgradeDescription)).append("\n");
    sb.append("    upgradeMode: ").append(toIndentedString(upgradeMode)).append("\n");
    sb.append("    vmImage: ").append(toIndentedString(vmImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addOnFeatures");
    openapiFields.add("availableClusterVersions");
    openapiFields.add("azureActiveDirectory");
    openapiFields.add("certificate");
    openapiFields.add("certificateCommonNames");
    openapiFields.add("clientCertificateCommonNames");
    openapiFields.add("clientCertificateThumbprints");
    openapiFields.add("clusterCodeVersion");
    openapiFields.add("clusterEndpoint");
    openapiFields.add("clusterId");
    openapiFields.add("clusterState");
    openapiFields.add("diagnosticsStorageAccountConfig");
    openapiFields.add("eventStoreServiceEnabled");
    openapiFields.add("fabricSettings");
    openapiFields.add("managementEndpoint");
    openapiFields.add("nodeTypes");
    openapiFields.add("provisioningState");
    openapiFields.add("reliabilityLevel");
    openapiFields.add("reverseProxyCertificate");
    openapiFields.add("reverseProxyCertificateCommonNames");
    openapiFields.add("upgradeDescription");
    openapiFields.add("upgradeMode");
    openapiFields.add("vmImage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("managementEndpoint");
    openapiRequiredFields.add("nodeTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterProperties is not found in the empty JSON string", ClusterProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClusterProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addOnFeatures") != null && !jsonObj.get("addOnFeatures").isJsonNull() && !jsonObj.get("addOnFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addOnFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("addOnFeatures").toString()));
      }
      if (jsonObj.get("availableClusterVersions") != null && !jsonObj.get("availableClusterVersions").isJsonNull()) {
        JsonArray jsonArrayavailableClusterVersions = jsonObj.getAsJsonArray("availableClusterVersions");
        if (jsonArrayavailableClusterVersions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableClusterVersions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableClusterVersions` to be an array in the JSON string but got `%s`", jsonObj.get("availableClusterVersions").toString()));
          }

          // validate the optional field `availableClusterVersions` (array)
          for (int i = 0; i < jsonArrayavailableClusterVersions.size(); i++) {
            ClusterVersionDetails.validateJsonElement(jsonArrayavailableClusterVersions.get(i));
          };
        }
      }
      // validate the optional field `azureActiveDirectory`
      if (jsonObj.get("azureActiveDirectory") != null && !jsonObj.get("azureActiveDirectory").isJsonNull()) {
        AzureActiveDirectory.validateJsonElement(jsonObj.get("azureActiveDirectory"));
      }
      // validate the optional field `certificate`
      if (jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) {
        CertificateDescription.validateJsonElement(jsonObj.get("certificate"));
      }
      // validate the optional field `certificateCommonNames`
      if (jsonObj.get("certificateCommonNames") != null && !jsonObj.get("certificateCommonNames").isJsonNull()) {
        ServerCertificateCommonNames.validateJsonElement(jsonObj.get("certificateCommonNames"));
      }
      if (jsonObj.get("clientCertificateCommonNames") != null && !jsonObj.get("clientCertificateCommonNames").isJsonNull()) {
        JsonArray jsonArrayclientCertificateCommonNames = jsonObj.getAsJsonArray("clientCertificateCommonNames");
        if (jsonArrayclientCertificateCommonNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientCertificateCommonNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientCertificateCommonNames` to be an array in the JSON string but got `%s`", jsonObj.get("clientCertificateCommonNames").toString()));
          }

          // validate the optional field `clientCertificateCommonNames` (array)
          for (int i = 0; i < jsonArrayclientCertificateCommonNames.size(); i++) {
            ClientCertificateCommonName.validateJsonElement(jsonArrayclientCertificateCommonNames.get(i));
          };
        }
      }
      if (jsonObj.get("clientCertificateThumbprints") != null && !jsonObj.get("clientCertificateThumbprints").isJsonNull()) {
        JsonArray jsonArrayclientCertificateThumbprints = jsonObj.getAsJsonArray("clientCertificateThumbprints");
        if (jsonArrayclientCertificateThumbprints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientCertificateThumbprints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientCertificateThumbprints` to be an array in the JSON string but got `%s`", jsonObj.get("clientCertificateThumbprints").toString()));
          }

          // validate the optional field `clientCertificateThumbprints` (array)
          for (int i = 0; i < jsonArrayclientCertificateThumbprints.size(); i++) {
            ClientCertificateThumbprint.validateJsonElement(jsonArrayclientCertificateThumbprints.get(i));
          };
        }
      }
      if ((jsonObj.get("clusterCodeVersion") != null && !jsonObj.get("clusterCodeVersion").isJsonNull()) && !jsonObj.get("clusterCodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterCodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterCodeVersion").toString()));
      }
      if ((jsonObj.get("clusterEndpoint") != null && !jsonObj.get("clusterEndpoint").isJsonNull()) && !jsonObj.get("clusterEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterEndpoint").toString()));
      }
      if ((jsonObj.get("clusterId") != null && !jsonObj.get("clusterId").isJsonNull()) && !jsonObj.get("clusterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterId").toString()));
      }
      // validate the optional field `clusterState`
      if (jsonObj.get("clusterState") != null && !jsonObj.get("clusterState").isJsonNull()) {
        ClusterState.validateJsonElement(jsonObj.get("clusterState"));
      }
      // validate the optional field `diagnosticsStorageAccountConfig`
      if (jsonObj.get("diagnosticsStorageAccountConfig") != null && !jsonObj.get("diagnosticsStorageAccountConfig").isJsonNull()) {
        DiagnosticsStorageAccountConfig.validateJsonElement(jsonObj.get("diagnosticsStorageAccountConfig"));
      }
      if (jsonObj.get("fabricSettings") != null && !jsonObj.get("fabricSettings").isJsonNull()) {
        JsonArray jsonArrayfabricSettings = jsonObj.getAsJsonArray("fabricSettings");
        if (jsonArrayfabricSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fabricSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fabricSettings` to be an array in the JSON string but got `%s`", jsonObj.get("fabricSettings").toString()));
          }

          // validate the optional field `fabricSettings` (array)
          for (int i = 0; i < jsonArrayfabricSettings.size(); i++) {
            SettingsSectionDescription.validateJsonElement(jsonArrayfabricSettings.get(i));
          };
        }
      }
      if (!jsonObj.get("managementEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementEndpoint").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("nodeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("nodeTypes").toString()));
      }

      JsonArray jsonArraynodeTypes = jsonObj.getAsJsonArray("nodeTypes");
      // validate the required field `nodeTypes` (array)
      for (int i = 0; i < jsonArraynodeTypes.size(); i++) {
        NodeTypeDescription.validateJsonElement(jsonArraynodeTypes.get(i));
      };
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `reliabilityLevel`
      if (jsonObj.get("reliabilityLevel") != null && !jsonObj.get("reliabilityLevel").isJsonNull()) {
        ReliabilityLevel.validateJsonElement(jsonObj.get("reliabilityLevel"));
      }
      // validate the optional field `reverseProxyCertificate`
      if (jsonObj.get("reverseProxyCertificate") != null && !jsonObj.get("reverseProxyCertificate").isJsonNull()) {
        CertificateDescription.validateJsonElement(jsonObj.get("reverseProxyCertificate"));
      }
      // validate the optional field `reverseProxyCertificateCommonNames`
      if (jsonObj.get("reverseProxyCertificateCommonNames") != null && !jsonObj.get("reverseProxyCertificateCommonNames").isJsonNull()) {
        ServerCertificateCommonNames.validateJsonElement(jsonObj.get("reverseProxyCertificateCommonNames"));
      }
      // validate the optional field `upgradeDescription`
      if (jsonObj.get("upgradeDescription") != null && !jsonObj.get("upgradeDescription").isJsonNull()) {
        ClusterUpgradePolicy.validateJsonElement(jsonObj.get("upgradeDescription"));
      }
      // validate the optional field `upgradeMode`
      if (jsonObj.get("upgradeMode") != null && !jsonObj.get("upgradeMode").isJsonNull()) {
        UpgradeMode.validateJsonElement(jsonObj.get("upgradeMode"));
      }
      if ((jsonObj.get("vmImage") != null && !jsonObj.get("vmImage").isJsonNull()) && !jsonObj.get("vmImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmImage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterProperties>() {
           @Override
           public void write(JsonWriter out, ClusterProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterProperties
   * @throws IOException if the JSON string is invalid with respect to ClusterProperties
   */
  public static ClusterProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterProperties.class);
  }

  /**
   * Convert an instance of ClusterProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

