/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the delta health policy used to evaluate the health of services belonging to a service type when upgrading the cluster. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:50.766027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceTypeDeltaHealthPolicy {
  public static final String SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_SERVICES = "maxPercentDeltaUnhealthyServices";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_SERVICES)
  private Integer maxPercentDeltaUnhealthyServices;

  public ServiceTypeDeltaHealthPolicy() {
  }

  public ServiceTypeDeltaHealthPolicy maxPercentDeltaUnhealthyServices(Integer maxPercentDeltaUnhealthyServices) {
    this.maxPercentDeltaUnhealthyServices = maxPercentDeltaUnhealthyServices;
    return this;
  }

  /**
   * The maximum allowed percentage of services health degradation allowed during cluster upgrades. The delta is measured between the state of the services at the beginning of upgrade and the state of the services at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. 
   * minimum: 0
   * maximum: 100
   * @return maxPercentDeltaUnhealthyServices
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentDeltaUnhealthyServices() {
    return maxPercentDeltaUnhealthyServices;
  }

  public void setMaxPercentDeltaUnhealthyServices(Integer maxPercentDeltaUnhealthyServices) {
    this.maxPercentDeltaUnhealthyServices = maxPercentDeltaUnhealthyServices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceTypeDeltaHealthPolicy serviceTypeDeltaHealthPolicy = (ServiceTypeDeltaHealthPolicy) o;
    return Objects.equals(this.maxPercentDeltaUnhealthyServices, serviceTypeDeltaHealthPolicy.maxPercentDeltaUnhealthyServices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPercentDeltaUnhealthyServices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceTypeDeltaHealthPolicy {\n");
    sb.append("    maxPercentDeltaUnhealthyServices: ").append(toIndentedString(maxPercentDeltaUnhealthyServices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxPercentDeltaUnhealthyServices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceTypeDeltaHealthPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceTypeDeltaHealthPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceTypeDeltaHealthPolicy is not found in the empty JSON string", ServiceTypeDeltaHealthPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceTypeDeltaHealthPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceTypeDeltaHealthPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceTypeDeltaHealthPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceTypeDeltaHealthPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceTypeDeltaHealthPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceTypeDeltaHealthPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceTypeDeltaHealthPolicy>() {
           @Override
           public void write(JsonWriter out, ServiceTypeDeltaHealthPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceTypeDeltaHealthPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceTypeDeltaHealthPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceTypeDeltaHealthPolicy
   * @throws IOException if the JSON string is invalid with respect to ServiceTypeDeltaHealthPolicy
   */
  public static ServiceTypeDeltaHealthPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceTypeDeltaHealthPolicy.class);
  }

  /**
   * Convert an instance of ServiceTypeDeltaHealthPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

