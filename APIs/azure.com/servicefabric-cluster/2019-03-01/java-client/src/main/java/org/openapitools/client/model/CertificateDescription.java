/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StoreName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the certificate details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:50.766027-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CertificateDescription {
  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_THUMBPRINT_SECONDARY = "thumbprintSecondary";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT_SECONDARY)
  private String thumbprintSecondary;

  public static final String SERIALIZED_NAME_X509_STORE_NAME = "x509StoreName";
  @SerializedName(SERIALIZED_NAME_X509_STORE_NAME)
  private StoreName x509StoreName;

  public CertificateDescription() {
  }

  public CertificateDescription thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * Thumbprint of the primary certificate.
   * @return thumbprint
   */
  @javax.annotation.Nonnull
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public CertificateDescription thumbprintSecondary(String thumbprintSecondary) {
    this.thumbprintSecondary = thumbprintSecondary;
    return this;
  }

  /**
   * Thumbprint of the secondary certificate.
   * @return thumbprintSecondary
   */
  @javax.annotation.Nullable
  public String getThumbprintSecondary() {
    return thumbprintSecondary;
  }

  public void setThumbprintSecondary(String thumbprintSecondary) {
    this.thumbprintSecondary = thumbprintSecondary;
  }


  public CertificateDescription x509StoreName(StoreName x509StoreName) {
    this.x509StoreName = x509StoreName;
    return this;
  }

  /**
   * Get x509StoreName
   * @return x509StoreName
   */
  @javax.annotation.Nullable
  public StoreName getX509StoreName() {
    return x509StoreName;
  }

  public void setX509StoreName(StoreName x509StoreName) {
    this.x509StoreName = x509StoreName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateDescription certificateDescription = (CertificateDescription) o;
    return Objects.equals(this.thumbprint, certificateDescription.thumbprint) &&
        Objects.equals(this.thumbprintSecondary, certificateDescription.thumbprintSecondary) &&
        Objects.equals(this.x509StoreName, certificateDescription.x509StoreName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(thumbprint, thumbprintSecondary, x509StoreName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateDescription {\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    thumbprintSecondary: ").append(toIndentedString(thumbprintSecondary)).append("\n");
    sb.append("    x509StoreName: ").append(toIndentedString(x509StoreName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("thumbprint");
    openapiFields.add("thumbprintSecondary");
    openapiFields.add("x509StoreName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("thumbprint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateDescription is not found in the empty JSON string", CertificateDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CertificateDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if ((jsonObj.get("thumbprintSecondary") != null && !jsonObj.get("thumbprintSecondary").isJsonNull()) && !jsonObj.get("thumbprintSecondary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprintSecondary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprintSecondary").toString()));
      }
      // validate the optional field `x509StoreName`
      if (jsonObj.get("x509StoreName") != null && !jsonObj.get("x509StoreName").isJsonNull()) {
        StoreName.validateJsonElement(jsonObj.get("x509StoreName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateDescription>() {
           @Override
           public void write(JsonWriter out, CertificateDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateDescription
   * @throws IOException if the JSON string is invalid with respect to CertificateDescription
   */
  public static CertificateDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateDescription.class);
  }

  /**
   * Convert an instance of CertificateDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

