/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The reliability level sets the replica set size of system services. Learn about [ReliabilityLevel](https://docs.microsoft.com/azure/service-fabric/service-fabric-cluster-capacity).    - None - Run the System services with a target replica set count of 1. This should only be used for test clusters.   - Bronze - Run the System services with a target replica set count of 3. This should only be used for test clusters.   - Silver - Run the System services with a target replica set count of 5.   - Gold - Run the System services with a target replica set count of 7.   - Platinum - Run the System services with a target replica set count of 9. 
 */
@JsonAdapter(ReliabilityLevel.Adapter.class)
public enum ReliabilityLevel {
  
  NONE("None"),
  
  BRONZE("Bronze"),
  
  SILVER("Silver"),
  
  GOLD("Gold"),
  
  PLATINUM("Platinum");

  private String value;

  ReliabilityLevel(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ReliabilityLevel fromValue(String value) {
    for (ReliabilityLevel b : ReliabilityLevel.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ReliabilityLevel> {
    @Override
    public void write(final JsonWriter jsonWriter, final ReliabilityLevel enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ReliabilityLevel read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ReliabilityLevel.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ReliabilityLevel.fromValue(value);
  }
}

