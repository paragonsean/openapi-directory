/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.DurabilityLevel;
import org.openapitools.client.model.EndpointRangeDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:48.352415-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeTypeDescription {
  public static final String SERIALIZED_NAME_APPLICATION_PORTS = "applicationPorts";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PORTS)
  private EndpointRangeDescription applicationPorts;

  public static final String SERIALIZED_NAME_CAPACITIES = "capacities";
  @SerializedName(SERIALIZED_NAME_CAPACITIES)
  private Map<String, String> capacities = new HashMap<>();

  public static final String SERIALIZED_NAME_CLIENT_CONNECTION_ENDPOINT_PORT = "clientConnectionEndpointPort";
  @SerializedName(SERIALIZED_NAME_CLIENT_CONNECTION_ENDPOINT_PORT)
  private Integer clientConnectionEndpointPort;

  public static final String SERIALIZED_NAME_DURABILITY_LEVEL = "durabilityLevel";
  @SerializedName(SERIALIZED_NAME_DURABILITY_LEVEL)
  private DurabilityLevel durabilityLevel;

  public static final String SERIALIZED_NAME_EPHEMERAL_PORTS = "ephemeralPorts";
  @SerializedName(SERIALIZED_NAME_EPHEMERAL_PORTS)
  private EndpointRangeDescription ephemeralPorts;

  public static final String SERIALIZED_NAME_HTTP_GATEWAY_ENDPOINT_PORT = "httpGatewayEndpointPort";
  @SerializedName(SERIALIZED_NAME_HTTP_GATEWAY_ENDPOINT_PORT)
  private Integer httpGatewayEndpointPort;

  public static final String SERIALIZED_NAME_IS_PRIMARY = "isPrimary";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY)
  private Boolean isPrimary;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLACEMENT_PROPERTIES = "placementProperties";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_PROPERTIES)
  private Map<String, String> placementProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_REVERSE_PROXY_ENDPOINT_PORT = "reverseProxyEndpointPort";
  @SerializedName(SERIALIZED_NAME_REVERSE_PROXY_ENDPOINT_PORT)
  private Integer reverseProxyEndpointPort;

  public static final String SERIALIZED_NAME_VM_INSTANCE_COUNT = "vmInstanceCount";
  @SerializedName(SERIALIZED_NAME_VM_INSTANCE_COUNT)
  private Integer vmInstanceCount;

  public NodeTypeDescription() {
  }

  public NodeTypeDescription applicationPorts(EndpointRangeDescription applicationPorts) {
    this.applicationPorts = applicationPorts;
    return this;
  }

  /**
   * Get applicationPorts
   * @return applicationPorts
   */
  @javax.annotation.Nullable
  public EndpointRangeDescription getApplicationPorts() {
    return applicationPorts;
  }

  public void setApplicationPorts(EndpointRangeDescription applicationPorts) {
    this.applicationPorts = applicationPorts;
  }


  public NodeTypeDescription capacities(Map<String, String> capacities) {
    this.capacities = capacities;
    return this;
  }

  public NodeTypeDescription putCapacitiesItem(String key, String capacitiesItem) {
    if (this.capacities == null) {
      this.capacities = new HashMap<>();
    }
    this.capacities.put(key, capacitiesItem);
    return this;
  }

  /**
   * The capacity tags applied to the nodes in the node type, the cluster resource manager uses these tags to understand how much resource a node has.
   * @return capacities
   */
  @javax.annotation.Nullable
  public Map<String, String> getCapacities() {
    return capacities;
  }

  public void setCapacities(Map<String, String> capacities) {
    this.capacities = capacities;
  }


  public NodeTypeDescription clientConnectionEndpointPort(Integer clientConnectionEndpointPort) {
    this.clientConnectionEndpointPort = clientConnectionEndpointPort;
    return this;
  }

  /**
   * The TCP cluster management endpoint port.
   * @return clientConnectionEndpointPort
   */
  @javax.annotation.Nonnull
  public Integer getClientConnectionEndpointPort() {
    return clientConnectionEndpointPort;
  }

  public void setClientConnectionEndpointPort(Integer clientConnectionEndpointPort) {
    this.clientConnectionEndpointPort = clientConnectionEndpointPort;
  }


  public NodeTypeDescription durabilityLevel(DurabilityLevel durabilityLevel) {
    this.durabilityLevel = durabilityLevel;
    return this;
  }

  /**
   * Get durabilityLevel
   * @return durabilityLevel
   */
  @javax.annotation.Nullable
  public DurabilityLevel getDurabilityLevel() {
    return durabilityLevel;
  }

  public void setDurabilityLevel(DurabilityLevel durabilityLevel) {
    this.durabilityLevel = durabilityLevel;
  }


  public NodeTypeDescription ephemeralPorts(EndpointRangeDescription ephemeralPorts) {
    this.ephemeralPorts = ephemeralPorts;
    return this;
  }

  /**
   * Get ephemeralPorts
   * @return ephemeralPorts
   */
  @javax.annotation.Nullable
  public EndpointRangeDescription getEphemeralPorts() {
    return ephemeralPorts;
  }

  public void setEphemeralPorts(EndpointRangeDescription ephemeralPorts) {
    this.ephemeralPorts = ephemeralPorts;
  }


  public NodeTypeDescription httpGatewayEndpointPort(Integer httpGatewayEndpointPort) {
    this.httpGatewayEndpointPort = httpGatewayEndpointPort;
    return this;
  }

  /**
   * The HTTP cluster management endpoint port.
   * @return httpGatewayEndpointPort
   */
  @javax.annotation.Nonnull
  public Integer getHttpGatewayEndpointPort() {
    return httpGatewayEndpointPort;
  }

  public void setHttpGatewayEndpointPort(Integer httpGatewayEndpointPort) {
    this.httpGatewayEndpointPort = httpGatewayEndpointPort;
  }


  public NodeTypeDescription isPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
    return this;
  }

  /**
   * The node type on which system services will run. Only one node type should be marked as primary. Primary node type cannot be deleted or changed for existing clusters.
   * @return isPrimary
   */
  @javax.annotation.Nonnull
  public Boolean getIsPrimary() {
    return isPrimary;
  }

  public void setIsPrimary(Boolean isPrimary) {
    this.isPrimary = isPrimary;
  }


  public NodeTypeDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the node type.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NodeTypeDescription placementProperties(Map<String, String> placementProperties) {
    this.placementProperties = placementProperties;
    return this;
  }

  public NodeTypeDescription putPlacementPropertiesItem(String key, String placementPropertiesItem) {
    if (this.placementProperties == null) {
      this.placementProperties = new HashMap<>();
    }
    this.placementProperties.put(key, placementPropertiesItem);
    return this;
  }

  /**
   * The placement tags applied to nodes in the node type, which can be used to indicate where certain services (workload) should run.
   * @return placementProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getPlacementProperties() {
    return placementProperties;
  }

  public void setPlacementProperties(Map<String, String> placementProperties) {
    this.placementProperties = placementProperties;
  }


  public NodeTypeDescription reverseProxyEndpointPort(Integer reverseProxyEndpointPort) {
    this.reverseProxyEndpointPort = reverseProxyEndpointPort;
    return this;
  }

  /**
   * The endpoint used by reverse proxy.
   * @return reverseProxyEndpointPort
   */
  @javax.annotation.Nullable
  public Integer getReverseProxyEndpointPort() {
    return reverseProxyEndpointPort;
  }

  public void setReverseProxyEndpointPort(Integer reverseProxyEndpointPort) {
    this.reverseProxyEndpointPort = reverseProxyEndpointPort;
  }


  public NodeTypeDescription vmInstanceCount(Integer vmInstanceCount) {
    this.vmInstanceCount = vmInstanceCount;
    return this;
  }

  /**
   * The number of nodes in the node type. This count should match the capacity property in the corresponding VirtualMachineScaleSet resource.
   * minimum: 1
   * maximum: 2147483647
   * @return vmInstanceCount
   */
  @javax.annotation.Nonnull
  public Integer getVmInstanceCount() {
    return vmInstanceCount;
  }

  public void setVmInstanceCount(Integer vmInstanceCount) {
    this.vmInstanceCount = vmInstanceCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeTypeDescription nodeTypeDescription = (NodeTypeDescription) o;
    return Objects.equals(this.applicationPorts, nodeTypeDescription.applicationPorts) &&
        Objects.equals(this.capacities, nodeTypeDescription.capacities) &&
        Objects.equals(this.clientConnectionEndpointPort, nodeTypeDescription.clientConnectionEndpointPort) &&
        Objects.equals(this.durabilityLevel, nodeTypeDescription.durabilityLevel) &&
        Objects.equals(this.ephemeralPorts, nodeTypeDescription.ephemeralPorts) &&
        Objects.equals(this.httpGatewayEndpointPort, nodeTypeDescription.httpGatewayEndpointPort) &&
        Objects.equals(this.isPrimary, nodeTypeDescription.isPrimary) &&
        Objects.equals(this.name, nodeTypeDescription.name) &&
        Objects.equals(this.placementProperties, nodeTypeDescription.placementProperties) &&
        Objects.equals(this.reverseProxyEndpointPort, nodeTypeDescription.reverseProxyEndpointPort) &&
        Objects.equals(this.vmInstanceCount, nodeTypeDescription.vmInstanceCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationPorts, capacities, clientConnectionEndpointPort, durabilityLevel, ephemeralPorts, httpGatewayEndpointPort, isPrimary, name, placementProperties, reverseProxyEndpointPort, vmInstanceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeTypeDescription {\n");
    sb.append("    applicationPorts: ").append(toIndentedString(applicationPorts)).append("\n");
    sb.append("    capacities: ").append(toIndentedString(capacities)).append("\n");
    sb.append("    clientConnectionEndpointPort: ").append(toIndentedString(clientConnectionEndpointPort)).append("\n");
    sb.append("    durabilityLevel: ").append(toIndentedString(durabilityLevel)).append("\n");
    sb.append("    ephemeralPorts: ").append(toIndentedString(ephemeralPorts)).append("\n");
    sb.append("    httpGatewayEndpointPort: ").append(toIndentedString(httpGatewayEndpointPort)).append("\n");
    sb.append("    isPrimary: ").append(toIndentedString(isPrimary)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    placementProperties: ").append(toIndentedString(placementProperties)).append("\n");
    sb.append("    reverseProxyEndpointPort: ").append(toIndentedString(reverseProxyEndpointPort)).append("\n");
    sb.append("    vmInstanceCount: ").append(toIndentedString(vmInstanceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationPorts");
    openapiFields.add("capacities");
    openapiFields.add("clientConnectionEndpointPort");
    openapiFields.add("durabilityLevel");
    openapiFields.add("ephemeralPorts");
    openapiFields.add("httpGatewayEndpointPort");
    openapiFields.add("isPrimary");
    openapiFields.add("name");
    openapiFields.add("placementProperties");
    openapiFields.add("reverseProxyEndpointPort");
    openapiFields.add("vmInstanceCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientConnectionEndpointPort");
    openapiRequiredFields.add("httpGatewayEndpointPort");
    openapiRequiredFields.add("isPrimary");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("vmInstanceCount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeTypeDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeTypeDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeTypeDescription is not found in the empty JSON string", NodeTypeDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeTypeDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeTypeDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeTypeDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicationPorts`
      if (jsonObj.get("applicationPorts") != null && !jsonObj.get("applicationPorts").isJsonNull()) {
        EndpointRangeDescription.validateJsonElement(jsonObj.get("applicationPorts"));
      }
      // validate the optional field `durabilityLevel`
      if (jsonObj.get("durabilityLevel") != null && !jsonObj.get("durabilityLevel").isJsonNull()) {
        DurabilityLevel.validateJsonElement(jsonObj.get("durabilityLevel"));
      }
      // validate the optional field `ephemeralPorts`
      if (jsonObj.get("ephemeralPorts") != null && !jsonObj.get("ephemeralPorts").isJsonNull()) {
        EndpointRangeDescription.validateJsonElement(jsonObj.get("ephemeralPorts"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeTypeDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeTypeDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeTypeDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeTypeDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeTypeDescription>() {
           @Override
           public void write(JsonWriter out, NodeTypeDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeTypeDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeTypeDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeTypeDescription
   * @throws IOException if the JSON string is invalid with respect to NodeTypeDescription
   */
  public static NodeTypeDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeTypeDescription.class);
  }

  /**
   * Convert an instance of NodeTypeDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

