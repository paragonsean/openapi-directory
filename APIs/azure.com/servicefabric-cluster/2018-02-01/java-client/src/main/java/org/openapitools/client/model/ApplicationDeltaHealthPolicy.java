/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ServiceTypeDeltaHealthPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a delta health policy used to evaluate the health of an application or one of its child entities when upgrading the cluster. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:48.352415-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationDeltaHealthPolicy {
  public static final String SERIALIZED_NAME_DEFAULT_SERVICE_TYPE_DELTA_HEALTH_POLICY = "defaultServiceTypeDeltaHealthPolicy";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SERVICE_TYPE_DELTA_HEALTH_POLICY)
  private ServiceTypeDeltaHealthPolicy defaultServiceTypeDeltaHealthPolicy;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_DELTA_HEALTH_POLICIES = "serviceTypeDeltaHealthPolicies";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_DELTA_HEALTH_POLICIES)
  private Map<String, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies = new HashMap<>();

  public ApplicationDeltaHealthPolicy() {
  }

  public ApplicationDeltaHealthPolicy defaultServiceTypeDeltaHealthPolicy(ServiceTypeDeltaHealthPolicy defaultServiceTypeDeltaHealthPolicy) {
    this.defaultServiceTypeDeltaHealthPolicy = defaultServiceTypeDeltaHealthPolicy;
    return this;
  }

  /**
   * Get defaultServiceTypeDeltaHealthPolicy
   * @return defaultServiceTypeDeltaHealthPolicy
   */
  @javax.annotation.Nullable
  public ServiceTypeDeltaHealthPolicy getDefaultServiceTypeDeltaHealthPolicy() {
    return defaultServiceTypeDeltaHealthPolicy;
  }

  public void setDefaultServiceTypeDeltaHealthPolicy(ServiceTypeDeltaHealthPolicy defaultServiceTypeDeltaHealthPolicy) {
    this.defaultServiceTypeDeltaHealthPolicy = defaultServiceTypeDeltaHealthPolicy;
  }


  public ApplicationDeltaHealthPolicy serviceTypeDeltaHealthPolicies(Map<String, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies) {
    this.serviceTypeDeltaHealthPolicies = serviceTypeDeltaHealthPolicies;
    return this;
  }

  public ApplicationDeltaHealthPolicy putServiceTypeDeltaHealthPoliciesItem(String key, ServiceTypeDeltaHealthPolicy serviceTypeDeltaHealthPoliciesItem) {
    if (this.serviceTypeDeltaHealthPolicies == null) {
      this.serviceTypeDeltaHealthPolicies = new HashMap<>();
    }
    this.serviceTypeDeltaHealthPolicies.put(key, serviceTypeDeltaHealthPoliciesItem);
    return this;
  }

  /**
   * Defines a map that contains specific delta health policies for different service types. Each entry specifies as key the service type name and as value a ServiceTypeDeltaHealthPolicy used to evaluate the service health when upgrading the cluster. The map is empty by default. 
   * @return serviceTypeDeltaHealthPolicies
   */
  @javax.annotation.Nullable
  public Map<String, ServiceTypeDeltaHealthPolicy> getServiceTypeDeltaHealthPolicies() {
    return serviceTypeDeltaHealthPolicies;
  }

  public void setServiceTypeDeltaHealthPolicies(Map<String, ServiceTypeDeltaHealthPolicy> serviceTypeDeltaHealthPolicies) {
    this.serviceTypeDeltaHealthPolicies = serviceTypeDeltaHealthPolicies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationDeltaHealthPolicy applicationDeltaHealthPolicy = (ApplicationDeltaHealthPolicy) o;
    return Objects.equals(this.defaultServiceTypeDeltaHealthPolicy, applicationDeltaHealthPolicy.defaultServiceTypeDeltaHealthPolicy) &&
        Objects.equals(this.serviceTypeDeltaHealthPolicies, applicationDeltaHealthPolicy.serviceTypeDeltaHealthPolicies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultServiceTypeDeltaHealthPolicy, serviceTypeDeltaHealthPolicies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationDeltaHealthPolicy {\n");
    sb.append("    defaultServiceTypeDeltaHealthPolicy: ").append(toIndentedString(defaultServiceTypeDeltaHealthPolicy)).append("\n");
    sb.append("    serviceTypeDeltaHealthPolicies: ").append(toIndentedString(serviceTypeDeltaHealthPolicies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultServiceTypeDeltaHealthPolicy");
    openapiFields.add("serviceTypeDeltaHealthPolicies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationDeltaHealthPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationDeltaHealthPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationDeltaHealthPolicy is not found in the empty JSON string", ApplicationDeltaHealthPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationDeltaHealthPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationDeltaHealthPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultServiceTypeDeltaHealthPolicy`
      if (jsonObj.get("defaultServiceTypeDeltaHealthPolicy") != null && !jsonObj.get("defaultServiceTypeDeltaHealthPolicy").isJsonNull()) {
        ServiceTypeDeltaHealthPolicy.validateJsonElement(jsonObj.get("defaultServiceTypeDeltaHealthPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationDeltaHealthPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationDeltaHealthPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationDeltaHealthPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationDeltaHealthPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationDeltaHealthPolicy>() {
           @Override
           public void write(JsonWriter out, ApplicationDeltaHealthPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationDeltaHealthPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationDeltaHealthPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationDeltaHealthPolicy
   * @throws IOException if the JSON string is invalid with respect to ApplicationDeltaHealthPolicy
   */
  public static ApplicationDeltaHealthPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationDeltaHealthPolicy.class);
  }

  /**
   * Convert an instance of ApplicationDeltaHealthPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

