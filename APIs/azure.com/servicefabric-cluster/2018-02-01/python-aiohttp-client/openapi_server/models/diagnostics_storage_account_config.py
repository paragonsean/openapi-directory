# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DiagnosticsStorageAccountConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_endpoint: str=None, protected_account_key_name: str=None, queue_endpoint: str=None, storage_account_name: str=None, table_endpoint: str=None):
        """DiagnosticsStorageAccountConfig - a model defined in OpenAPI

        :param blob_endpoint: The blob_endpoint of this DiagnosticsStorageAccountConfig.
        :param protected_account_key_name: The protected_account_key_name of this DiagnosticsStorageAccountConfig.
        :param queue_endpoint: The queue_endpoint of this DiagnosticsStorageAccountConfig.
        :param storage_account_name: The storage_account_name of this DiagnosticsStorageAccountConfig.
        :param table_endpoint: The table_endpoint of this DiagnosticsStorageAccountConfig.
        """
        self.openapi_types = {
            'blob_endpoint': str,
            'protected_account_key_name': str,
            'queue_endpoint': str,
            'storage_account_name': str,
            'table_endpoint': str
        }

        self.attribute_map = {
            'blob_endpoint': 'blobEndpoint',
            'protected_account_key_name': 'protectedAccountKeyName',
            'queue_endpoint': 'queueEndpoint',
            'storage_account_name': 'storageAccountName',
            'table_endpoint': 'tableEndpoint'
        }

        self._blob_endpoint = blob_endpoint
        self._protected_account_key_name = protected_account_key_name
        self._queue_endpoint = queue_endpoint
        self._storage_account_name = storage_account_name
        self._table_endpoint = table_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosticsStorageAccountConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosticsStorageAccountConfig of this DiagnosticsStorageAccountConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_endpoint(self):
        """Gets the blob_endpoint of this DiagnosticsStorageAccountConfig.

        The blob endpoint of the azure storage account.

        :return: The blob_endpoint of this DiagnosticsStorageAccountConfig.
        :rtype: str
        """
        return self._blob_endpoint

    @blob_endpoint.setter
    def blob_endpoint(self, blob_endpoint):
        """Sets the blob_endpoint of this DiagnosticsStorageAccountConfig.

        The blob endpoint of the azure storage account.

        :param blob_endpoint: The blob_endpoint of this DiagnosticsStorageAccountConfig.
        :type blob_endpoint: str
        """
        if blob_endpoint is None:
            raise ValueError("Invalid value for `blob_endpoint`, must not be `None`")

        self._blob_endpoint = blob_endpoint

    @property
    def protected_account_key_name(self):
        """Gets the protected_account_key_name of this DiagnosticsStorageAccountConfig.

        The protected diagnostics storage key name.

        :return: The protected_account_key_name of this DiagnosticsStorageAccountConfig.
        :rtype: str
        """
        return self._protected_account_key_name

    @protected_account_key_name.setter
    def protected_account_key_name(self, protected_account_key_name):
        """Sets the protected_account_key_name of this DiagnosticsStorageAccountConfig.

        The protected diagnostics storage key name.

        :param protected_account_key_name: The protected_account_key_name of this DiagnosticsStorageAccountConfig.
        :type protected_account_key_name: str
        """
        if protected_account_key_name is None:
            raise ValueError("Invalid value for `protected_account_key_name`, must not be `None`")

        self._protected_account_key_name = protected_account_key_name

    @property
    def queue_endpoint(self):
        """Gets the queue_endpoint of this DiagnosticsStorageAccountConfig.

        The queue endpoint of the azure storage account.

        :return: The queue_endpoint of this DiagnosticsStorageAccountConfig.
        :rtype: str
        """
        return self._queue_endpoint

    @queue_endpoint.setter
    def queue_endpoint(self, queue_endpoint):
        """Sets the queue_endpoint of this DiagnosticsStorageAccountConfig.

        The queue endpoint of the azure storage account.

        :param queue_endpoint: The queue_endpoint of this DiagnosticsStorageAccountConfig.
        :type queue_endpoint: str
        """
        if queue_endpoint is None:
            raise ValueError("Invalid value for `queue_endpoint`, must not be `None`")

        self._queue_endpoint = queue_endpoint

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this DiagnosticsStorageAccountConfig.

        The Azure storage account name.

        :return: The storage_account_name of this DiagnosticsStorageAccountConfig.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this DiagnosticsStorageAccountConfig.

        The Azure storage account name.

        :param storage_account_name: The storage_account_name of this DiagnosticsStorageAccountConfig.
        :type storage_account_name: str
        """
        if storage_account_name is None:
            raise ValueError("Invalid value for `storage_account_name`, must not be `None`")

        self._storage_account_name = storage_account_name

    @property
    def table_endpoint(self):
        """Gets the table_endpoint of this DiagnosticsStorageAccountConfig.

        The table endpoint of the azure storage account.

        :return: The table_endpoint of this DiagnosticsStorageAccountConfig.
        :rtype: str
        """
        return self._table_endpoint

    @table_endpoint.setter
    def table_endpoint(self, table_endpoint):
        """Sets the table_endpoint of this DiagnosticsStorageAccountConfig.

        The table endpoint of the azure storage account.

        :param table_endpoint: The table_endpoint of this DiagnosticsStorageAccountConfig.
        :type table_endpoint: str
        """
        if table_endpoint is None:
            raise ValueError("Invalid value for `table_endpoint`, must not be `None`")

        self._table_endpoint = table_endpoint
