# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.settings_parameter_description import SettingsParameterDescription
from openapi_server import util


class SettingsSectionDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, parameters: List[SettingsParameterDescription]=None):
        """SettingsSectionDescription - a model defined in OpenAPI

        :param name: The name of this SettingsSectionDescription.
        :param parameters: The parameters of this SettingsSectionDescription.
        """
        self.openapi_types = {
            'name': str,
            'parameters': List[SettingsParameterDescription]
        }

        self.attribute_map = {
            'name': 'name',
            'parameters': 'parameters'
        }

        self._name = name
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SettingsSectionDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SettingsSectionDescription of this SettingsSectionDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this SettingsSectionDescription.

        The section name of the fabric settings.

        :return: The name of this SettingsSectionDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SettingsSectionDescription.

        The section name of the fabric settings.

        :param name: The name of this SettingsSectionDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this SettingsSectionDescription.

        The collection of parameters in the section.

        :return: The parameters of this SettingsSectionDescription.
        :rtype: List[SettingsParameterDescription]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SettingsSectionDescription.

        The collection of parameters in the section.

        :param parameters: The parameters of this SettingsSectionDescription.
        :type parameters: List[SettingsParameterDescription]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
