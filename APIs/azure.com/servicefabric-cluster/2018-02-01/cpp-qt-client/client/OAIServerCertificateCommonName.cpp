/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerCertificateCommonName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerCertificateCommonName::OAIServerCertificateCommonName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerCertificateCommonName::OAIServerCertificateCommonName() {
    this->initializeModel();
}

OAIServerCertificateCommonName::~OAIServerCertificateCommonName() {}

void OAIServerCertificateCommonName::initializeModel() {

    m_certificate_common_name_isSet = false;
    m_certificate_common_name_isValid = false;

    m_certificate_issuer_thumbprint_isSet = false;
    m_certificate_issuer_thumbprint_isValid = false;
}

void OAIServerCertificateCommonName::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerCertificateCommonName::fromJsonObject(QJsonObject json) {

    m_certificate_common_name_isValid = ::OpenAPI::fromJsonValue(m_certificate_common_name, json[QString("certificateCommonName")]);
    m_certificate_common_name_isSet = !json[QString("certificateCommonName")].isNull() && m_certificate_common_name_isValid;

    m_certificate_issuer_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_certificate_issuer_thumbprint, json[QString("certificateIssuerThumbprint")]);
    m_certificate_issuer_thumbprint_isSet = !json[QString("certificateIssuerThumbprint")].isNull() && m_certificate_issuer_thumbprint_isValid;
}

QString OAIServerCertificateCommonName::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerCertificateCommonName::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_common_name_isSet) {
        obj.insert(QString("certificateCommonName"), ::OpenAPI::toJsonValue(m_certificate_common_name));
    }
    if (m_certificate_issuer_thumbprint_isSet) {
        obj.insert(QString("certificateIssuerThumbprint"), ::OpenAPI::toJsonValue(m_certificate_issuer_thumbprint));
    }
    return obj;
}

QString OAIServerCertificateCommonName::getCertificateCommonName() const {
    return m_certificate_common_name;
}
void OAIServerCertificateCommonName::setCertificateCommonName(const QString &certificate_common_name) {
    m_certificate_common_name = certificate_common_name;
    m_certificate_common_name_isSet = true;
}

bool OAIServerCertificateCommonName::is_certificate_common_name_Set() const{
    return m_certificate_common_name_isSet;
}

bool OAIServerCertificateCommonName::is_certificate_common_name_Valid() const{
    return m_certificate_common_name_isValid;
}

QString OAIServerCertificateCommonName::getCertificateIssuerThumbprint() const {
    return m_certificate_issuer_thumbprint;
}
void OAIServerCertificateCommonName::setCertificateIssuerThumbprint(const QString &certificate_issuer_thumbprint) {
    m_certificate_issuer_thumbprint = certificate_issuer_thumbprint;
    m_certificate_issuer_thumbprint_isSet = true;
}

bool OAIServerCertificateCommonName::is_certificate_issuer_thumbprint_Set() const{
    return m_certificate_issuer_thumbprint_isSet;
}

bool OAIServerCertificateCommonName::is_certificate_issuer_thumbprint_Valid() const{
    return m_certificate_issuer_thumbprint_isValid;
}

bool OAIServerCertificateCommonName::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_issuer_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerCertificateCommonName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_common_name_isValid && m_certificate_issuer_thumbprint_isValid && true;
}

} // namespace OpenAPI
