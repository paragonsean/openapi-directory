/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureActiveDirectory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureActiveDirectory::OAIAzureActiveDirectory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureActiveDirectory::OAIAzureActiveDirectory() {
    this->initializeModel();
}

OAIAzureActiveDirectory::~OAIAzureActiveDirectory() {}

void OAIAzureActiveDirectory::initializeModel() {

    m_client_application_isSet = false;
    m_client_application_isValid = false;

    m_cluster_application_isSet = false;
    m_cluster_application_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIAzureActiveDirectory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureActiveDirectory::fromJsonObject(QJsonObject json) {

    m_client_application_isValid = ::OpenAPI::fromJsonValue(m_client_application, json[QString("clientApplication")]);
    m_client_application_isSet = !json[QString("clientApplication")].isNull() && m_client_application_isValid;

    m_cluster_application_isValid = ::OpenAPI::fromJsonValue(m_cluster_application, json[QString("clusterApplication")]);
    m_cluster_application_isSet = !json[QString("clusterApplication")].isNull() && m_cluster_application_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIAzureActiveDirectory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureActiveDirectory::asJsonObject() const {
    QJsonObject obj;
    if (m_client_application_isSet) {
        obj.insert(QString("clientApplication"), ::OpenAPI::toJsonValue(m_client_application));
    }
    if (m_cluster_application_isSet) {
        obj.insert(QString("clusterApplication"), ::OpenAPI::toJsonValue(m_cluster_application));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIAzureActiveDirectory::getClientApplication() const {
    return m_client_application;
}
void OAIAzureActiveDirectory::setClientApplication(const QString &client_application) {
    m_client_application = client_application;
    m_client_application_isSet = true;
}

bool OAIAzureActiveDirectory::is_client_application_Set() const{
    return m_client_application_isSet;
}

bool OAIAzureActiveDirectory::is_client_application_Valid() const{
    return m_client_application_isValid;
}

QString OAIAzureActiveDirectory::getClusterApplication() const {
    return m_cluster_application;
}
void OAIAzureActiveDirectory::setClusterApplication(const QString &cluster_application) {
    m_cluster_application = cluster_application;
    m_cluster_application_isSet = true;
}

bool OAIAzureActiveDirectory::is_cluster_application_Set() const{
    return m_cluster_application_isSet;
}

bool OAIAzureActiveDirectory::is_cluster_application_Valid() const{
    return m_cluster_application_isValid;
}

QString OAIAzureActiveDirectory::getTenantId() const {
    return m_tenant_id;
}
void OAIAzureActiveDirectory::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIAzureActiveDirectory::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIAzureActiveDirectory::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIAzureActiveDirectory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureActiveDirectory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
