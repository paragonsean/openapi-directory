/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2018-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterProperties::OAIClusterProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterProperties::OAIClusterProperties() {
    this->initializeModel();
}

OAIClusterProperties::~OAIClusterProperties() {}

void OAIClusterProperties::initializeModel() {

    m_add_on_features_isSet = false;
    m_add_on_features_isValid = false;

    m_available_cluster_versions_isSet = false;
    m_available_cluster_versions_isValid = false;

    m_azure_active_directory_isSet = false;
    m_azure_active_directory_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;

    m_certificate_common_names_isSet = false;
    m_certificate_common_names_isValid = false;

    m_client_certificate_common_names_isSet = false;
    m_client_certificate_common_names_isValid = false;

    m_client_certificate_thumbprints_isSet = false;
    m_client_certificate_thumbprints_isValid = false;

    m_cluster_code_version_isSet = false;
    m_cluster_code_version_isValid = false;

    m_cluster_endpoint_isSet = false;
    m_cluster_endpoint_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_cluster_state_isSet = false;
    m_cluster_state_isValid = false;

    m_diagnostics_storage_account_config_isSet = false;
    m_diagnostics_storage_account_config_isValid = false;

    m_fabric_settings_isSet = false;
    m_fabric_settings_isValid = false;

    m_management_endpoint_isSet = false;
    m_management_endpoint_isValid = false;

    m_node_types_isSet = false;
    m_node_types_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_reliability_level_isSet = false;
    m_reliability_level_isValid = false;

    m_reverse_proxy_certificate_isSet = false;
    m_reverse_proxy_certificate_isValid = false;

    m_reverse_proxy_certificate_common_names_isSet = false;
    m_reverse_proxy_certificate_common_names_isValid = false;

    m_upgrade_description_isSet = false;
    m_upgrade_description_isValid = false;

    m_upgrade_mode_isSet = false;
    m_upgrade_mode_isValid = false;

    m_vm_image_isSet = false;
    m_vm_image_isValid = false;
}

void OAIClusterProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterProperties::fromJsonObject(QJsonObject json) {

    m_add_on_features_isValid = ::OpenAPI::fromJsonValue(m_add_on_features, json[QString("addOnFeatures")]);
    m_add_on_features_isSet = !json[QString("addOnFeatures")].isNull() && m_add_on_features_isValid;

    m_available_cluster_versions_isValid = ::OpenAPI::fromJsonValue(m_available_cluster_versions, json[QString("availableClusterVersions")]);
    m_available_cluster_versions_isSet = !json[QString("availableClusterVersions")].isNull() && m_available_cluster_versions_isValid;

    m_azure_active_directory_isValid = ::OpenAPI::fromJsonValue(m_azure_active_directory, json[QString("azureActiveDirectory")]);
    m_azure_active_directory_isSet = !json[QString("azureActiveDirectory")].isNull() && m_azure_active_directory_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;

    m_certificate_common_names_isValid = ::OpenAPI::fromJsonValue(m_certificate_common_names, json[QString("certificateCommonNames")]);
    m_certificate_common_names_isSet = !json[QString("certificateCommonNames")].isNull() && m_certificate_common_names_isValid;

    m_client_certificate_common_names_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_common_names, json[QString("clientCertificateCommonNames")]);
    m_client_certificate_common_names_isSet = !json[QString("clientCertificateCommonNames")].isNull() && m_client_certificate_common_names_isValid;

    m_client_certificate_thumbprints_isValid = ::OpenAPI::fromJsonValue(m_client_certificate_thumbprints, json[QString("clientCertificateThumbprints")]);
    m_client_certificate_thumbprints_isSet = !json[QString("clientCertificateThumbprints")].isNull() && m_client_certificate_thumbprints_isValid;

    m_cluster_code_version_isValid = ::OpenAPI::fromJsonValue(m_cluster_code_version, json[QString("clusterCodeVersion")]);
    m_cluster_code_version_isSet = !json[QString("clusterCodeVersion")].isNull() && m_cluster_code_version_isValid;

    m_cluster_endpoint_isValid = ::OpenAPI::fromJsonValue(m_cluster_endpoint, json[QString("clusterEndpoint")]);
    m_cluster_endpoint_isSet = !json[QString("clusterEndpoint")].isNull() && m_cluster_endpoint_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("clusterId")]);
    m_cluster_id_isSet = !json[QString("clusterId")].isNull() && m_cluster_id_isValid;

    m_cluster_state_isValid = ::OpenAPI::fromJsonValue(m_cluster_state, json[QString("clusterState")]);
    m_cluster_state_isSet = !json[QString("clusterState")].isNull() && m_cluster_state_isValid;

    m_diagnostics_storage_account_config_isValid = ::OpenAPI::fromJsonValue(m_diagnostics_storage_account_config, json[QString("diagnosticsStorageAccountConfig")]);
    m_diagnostics_storage_account_config_isSet = !json[QString("diagnosticsStorageAccountConfig")].isNull() && m_diagnostics_storage_account_config_isValid;

    m_fabric_settings_isValid = ::OpenAPI::fromJsonValue(m_fabric_settings, json[QString("fabricSettings")]);
    m_fabric_settings_isSet = !json[QString("fabricSettings")].isNull() && m_fabric_settings_isValid;

    m_management_endpoint_isValid = ::OpenAPI::fromJsonValue(m_management_endpoint, json[QString("managementEndpoint")]);
    m_management_endpoint_isSet = !json[QString("managementEndpoint")].isNull() && m_management_endpoint_isValid;

    m_node_types_isValid = ::OpenAPI::fromJsonValue(m_node_types, json[QString("nodeTypes")]);
    m_node_types_isSet = !json[QString("nodeTypes")].isNull() && m_node_types_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_reliability_level_isValid = ::OpenAPI::fromJsonValue(m_reliability_level, json[QString("reliabilityLevel")]);
    m_reliability_level_isSet = !json[QString("reliabilityLevel")].isNull() && m_reliability_level_isValid;

    m_reverse_proxy_certificate_isValid = ::OpenAPI::fromJsonValue(m_reverse_proxy_certificate, json[QString("reverseProxyCertificate")]);
    m_reverse_proxy_certificate_isSet = !json[QString("reverseProxyCertificate")].isNull() && m_reverse_proxy_certificate_isValid;

    m_reverse_proxy_certificate_common_names_isValid = ::OpenAPI::fromJsonValue(m_reverse_proxy_certificate_common_names, json[QString("reverseProxyCertificateCommonNames")]);
    m_reverse_proxy_certificate_common_names_isSet = !json[QString("reverseProxyCertificateCommonNames")].isNull() && m_reverse_proxy_certificate_common_names_isValid;

    m_upgrade_description_isValid = ::OpenAPI::fromJsonValue(m_upgrade_description, json[QString("upgradeDescription")]);
    m_upgrade_description_isSet = !json[QString("upgradeDescription")].isNull() && m_upgrade_description_isValid;

    m_upgrade_mode_isValid = ::OpenAPI::fromJsonValue(m_upgrade_mode, json[QString("upgradeMode")]);
    m_upgrade_mode_isSet = !json[QString("upgradeMode")].isNull() && m_upgrade_mode_isValid;

    m_vm_image_isValid = ::OpenAPI::fromJsonValue(m_vm_image, json[QString("vmImage")]);
    m_vm_image_isSet = !json[QString("vmImage")].isNull() && m_vm_image_isValid;
}

QString OAIClusterProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_add_on_features.size() > 0) {
        obj.insert(QString("addOnFeatures"), ::OpenAPI::toJsonValue(m_add_on_features));
    }
    if (m_available_cluster_versions.size() > 0) {
        obj.insert(QString("availableClusterVersions"), ::OpenAPI::toJsonValue(m_available_cluster_versions));
    }
    if (m_azure_active_directory.isSet()) {
        obj.insert(QString("azureActiveDirectory"), ::OpenAPI::toJsonValue(m_azure_active_directory));
    }
    if (m_certificate.isSet()) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    if (m_certificate_common_names.isSet()) {
        obj.insert(QString("certificateCommonNames"), ::OpenAPI::toJsonValue(m_certificate_common_names));
    }
    if (m_client_certificate_common_names.size() > 0) {
        obj.insert(QString("clientCertificateCommonNames"), ::OpenAPI::toJsonValue(m_client_certificate_common_names));
    }
    if (m_client_certificate_thumbprints.size() > 0) {
        obj.insert(QString("clientCertificateThumbprints"), ::OpenAPI::toJsonValue(m_client_certificate_thumbprints));
    }
    if (m_cluster_code_version_isSet) {
        obj.insert(QString("clusterCodeVersion"), ::OpenAPI::toJsonValue(m_cluster_code_version));
    }
    if (m_cluster_endpoint_isSet) {
        obj.insert(QString("clusterEndpoint"), ::OpenAPI::toJsonValue(m_cluster_endpoint));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("clusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_cluster_state.isSet()) {
        obj.insert(QString("clusterState"), ::OpenAPI::toJsonValue(m_cluster_state));
    }
    if (m_diagnostics_storage_account_config.isSet()) {
        obj.insert(QString("diagnosticsStorageAccountConfig"), ::OpenAPI::toJsonValue(m_diagnostics_storage_account_config));
    }
    if (m_fabric_settings.size() > 0) {
        obj.insert(QString("fabricSettings"), ::OpenAPI::toJsonValue(m_fabric_settings));
    }
    if (m_management_endpoint_isSet) {
        obj.insert(QString("managementEndpoint"), ::OpenAPI::toJsonValue(m_management_endpoint));
    }
    if (m_node_types.size() > 0) {
        obj.insert(QString("nodeTypes"), ::OpenAPI::toJsonValue(m_node_types));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_reliability_level.isSet()) {
        obj.insert(QString("reliabilityLevel"), ::OpenAPI::toJsonValue(m_reliability_level));
    }
    if (m_reverse_proxy_certificate.isSet()) {
        obj.insert(QString("reverseProxyCertificate"), ::OpenAPI::toJsonValue(m_reverse_proxy_certificate));
    }
    if (m_reverse_proxy_certificate_common_names.isSet()) {
        obj.insert(QString("reverseProxyCertificateCommonNames"), ::OpenAPI::toJsonValue(m_reverse_proxy_certificate_common_names));
    }
    if (m_upgrade_description.isSet()) {
        obj.insert(QString("upgradeDescription"), ::OpenAPI::toJsonValue(m_upgrade_description));
    }
    if (m_upgrade_mode.isSet()) {
        obj.insert(QString("upgradeMode"), ::OpenAPI::toJsonValue(m_upgrade_mode));
    }
    if (m_vm_image_isSet) {
        obj.insert(QString("vmImage"), ::OpenAPI::toJsonValue(m_vm_image));
    }
    return obj;
}

QList<OAIAddOnFeatures> OAIClusterProperties::getAddOnFeatures() const {
    return m_add_on_features;
}
void OAIClusterProperties::setAddOnFeatures(const QList<OAIAddOnFeatures> &add_on_features) {
    m_add_on_features = add_on_features;
    m_add_on_features_isSet = true;
}

bool OAIClusterProperties::is_add_on_features_Set() const{
    return m_add_on_features_isSet;
}

bool OAIClusterProperties::is_add_on_features_Valid() const{
    return m_add_on_features_isValid;
}

QList<OAIClusterVersionDetails> OAIClusterProperties::getAvailableClusterVersions() const {
    return m_available_cluster_versions;
}
void OAIClusterProperties::setAvailableClusterVersions(const QList<OAIClusterVersionDetails> &available_cluster_versions) {
    m_available_cluster_versions = available_cluster_versions;
    m_available_cluster_versions_isSet = true;
}

bool OAIClusterProperties::is_available_cluster_versions_Set() const{
    return m_available_cluster_versions_isSet;
}

bool OAIClusterProperties::is_available_cluster_versions_Valid() const{
    return m_available_cluster_versions_isValid;
}

OAIAzureActiveDirectory OAIClusterProperties::getAzureActiveDirectory() const {
    return m_azure_active_directory;
}
void OAIClusterProperties::setAzureActiveDirectory(const OAIAzureActiveDirectory &azure_active_directory) {
    m_azure_active_directory = azure_active_directory;
    m_azure_active_directory_isSet = true;
}

bool OAIClusterProperties::is_azure_active_directory_Set() const{
    return m_azure_active_directory_isSet;
}

bool OAIClusterProperties::is_azure_active_directory_Valid() const{
    return m_azure_active_directory_isValid;
}

OAICertificateDescription OAIClusterProperties::getCertificate() const {
    return m_certificate;
}
void OAIClusterProperties::setCertificate(const OAICertificateDescription &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIClusterProperties::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIClusterProperties::is_certificate_Valid() const{
    return m_certificate_isValid;
}

OAIServerCertificateCommonNames OAIClusterProperties::getCertificateCommonNames() const {
    return m_certificate_common_names;
}
void OAIClusterProperties::setCertificateCommonNames(const OAIServerCertificateCommonNames &certificate_common_names) {
    m_certificate_common_names = certificate_common_names;
    m_certificate_common_names_isSet = true;
}

bool OAIClusterProperties::is_certificate_common_names_Set() const{
    return m_certificate_common_names_isSet;
}

bool OAIClusterProperties::is_certificate_common_names_Valid() const{
    return m_certificate_common_names_isValid;
}

QList<OAIClientCertificateCommonName> OAIClusterProperties::getClientCertificateCommonNames() const {
    return m_client_certificate_common_names;
}
void OAIClusterProperties::setClientCertificateCommonNames(const QList<OAIClientCertificateCommonName> &client_certificate_common_names) {
    m_client_certificate_common_names = client_certificate_common_names;
    m_client_certificate_common_names_isSet = true;
}

bool OAIClusterProperties::is_client_certificate_common_names_Set() const{
    return m_client_certificate_common_names_isSet;
}

bool OAIClusterProperties::is_client_certificate_common_names_Valid() const{
    return m_client_certificate_common_names_isValid;
}

QList<OAIClientCertificateThumbprint> OAIClusterProperties::getClientCertificateThumbprints() const {
    return m_client_certificate_thumbprints;
}
void OAIClusterProperties::setClientCertificateThumbprints(const QList<OAIClientCertificateThumbprint> &client_certificate_thumbprints) {
    m_client_certificate_thumbprints = client_certificate_thumbprints;
    m_client_certificate_thumbprints_isSet = true;
}

bool OAIClusterProperties::is_client_certificate_thumbprints_Set() const{
    return m_client_certificate_thumbprints_isSet;
}

bool OAIClusterProperties::is_client_certificate_thumbprints_Valid() const{
    return m_client_certificate_thumbprints_isValid;
}

QString OAIClusterProperties::getClusterCodeVersion() const {
    return m_cluster_code_version;
}
void OAIClusterProperties::setClusterCodeVersion(const QString &cluster_code_version) {
    m_cluster_code_version = cluster_code_version;
    m_cluster_code_version_isSet = true;
}

bool OAIClusterProperties::is_cluster_code_version_Set() const{
    return m_cluster_code_version_isSet;
}

bool OAIClusterProperties::is_cluster_code_version_Valid() const{
    return m_cluster_code_version_isValid;
}

QString OAIClusterProperties::getClusterEndpoint() const {
    return m_cluster_endpoint;
}
void OAIClusterProperties::setClusterEndpoint(const QString &cluster_endpoint) {
    m_cluster_endpoint = cluster_endpoint;
    m_cluster_endpoint_isSet = true;
}

bool OAIClusterProperties::is_cluster_endpoint_Set() const{
    return m_cluster_endpoint_isSet;
}

bool OAIClusterProperties::is_cluster_endpoint_Valid() const{
    return m_cluster_endpoint_isValid;
}

QString OAIClusterProperties::getClusterId() const {
    return m_cluster_id;
}
void OAIClusterProperties::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIClusterProperties::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIClusterProperties::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

OAIClusterState OAIClusterProperties::getClusterState() const {
    return m_cluster_state;
}
void OAIClusterProperties::setClusterState(const OAIClusterState &cluster_state) {
    m_cluster_state = cluster_state;
    m_cluster_state_isSet = true;
}

bool OAIClusterProperties::is_cluster_state_Set() const{
    return m_cluster_state_isSet;
}

bool OAIClusterProperties::is_cluster_state_Valid() const{
    return m_cluster_state_isValid;
}

OAIDiagnosticsStorageAccountConfig OAIClusterProperties::getDiagnosticsStorageAccountConfig() const {
    return m_diagnostics_storage_account_config;
}
void OAIClusterProperties::setDiagnosticsStorageAccountConfig(const OAIDiagnosticsStorageAccountConfig &diagnostics_storage_account_config) {
    m_diagnostics_storage_account_config = diagnostics_storage_account_config;
    m_diagnostics_storage_account_config_isSet = true;
}

bool OAIClusterProperties::is_diagnostics_storage_account_config_Set() const{
    return m_diagnostics_storage_account_config_isSet;
}

bool OAIClusterProperties::is_diagnostics_storage_account_config_Valid() const{
    return m_diagnostics_storage_account_config_isValid;
}

QList<OAISettingsSectionDescription> OAIClusterProperties::getFabricSettings() const {
    return m_fabric_settings;
}
void OAIClusterProperties::setFabricSettings(const QList<OAISettingsSectionDescription> &fabric_settings) {
    m_fabric_settings = fabric_settings;
    m_fabric_settings_isSet = true;
}

bool OAIClusterProperties::is_fabric_settings_Set() const{
    return m_fabric_settings_isSet;
}

bool OAIClusterProperties::is_fabric_settings_Valid() const{
    return m_fabric_settings_isValid;
}

QString OAIClusterProperties::getManagementEndpoint() const {
    return m_management_endpoint;
}
void OAIClusterProperties::setManagementEndpoint(const QString &management_endpoint) {
    m_management_endpoint = management_endpoint;
    m_management_endpoint_isSet = true;
}

bool OAIClusterProperties::is_management_endpoint_Set() const{
    return m_management_endpoint_isSet;
}

bool OAIClusterProperties::is_management_endpoint_Valid() const{
    return m_management_endpoint_isValid;
}

QList<OAINodeTypeDescription> OAIClusterProperties::getNodeTypes() const {
    return m_node_types;
}
void OAIClusterProperties::setNodeTypes(const QList<OAINodeTypeDescription> &node_types) {
    m_node_types = node_types;
    m_node_types_isSet = true;
}

bool OAIClusterProperties::is_node_types_Set() const{
    return m_node_types_isSet;
}

bool OAIClusterProperties::is_node_types_Valid() const{
    return m_node_types_isValid;
}

QString OAIClusterProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIClusterProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIClusterProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIClusterProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIReliabilityLevel OAIClusterProperties::getReliabilityLevel() const {
    return m_reliability_level;
}
void OAIClusterProperties::setReliabilityLevel(const OAIReliabilityLevel &reliability_level) {
    m_reliability_level = reliability_level;
    m_reliability_level_isSet = true;
}

bool OAIClusterProperties::is_reliability_level_Set() const{
    return m_reliability_level_isSet;
}

bool OAIClusterProperties::is_reliability_level_Valid() const{
    return m_reliability_level_isValid;
}

OAICertificateDescription OAIClusterProperties::getReverseProxyCertificate() const {
    return m_reverse_proxy_certificate;
}
void OAIClusterProperties::setReverseProxyCertificate(const OAICertificateDescription &reverse_proxy_certificate) {
    m_reverse_proxy_certificate = reverse_proxy_certificate;
    m_reverse_proxy_certificate_isSet = true;
}

bool OAIClusterProperties::is_reverse_proxy_certificate_Set() const{
    return m_reverse_proxy_certificate_isSet;
}

bool OAIClusterProperties::is_reverse_proxy_certificate_Valid() const{
    return m_reverse_proxy_certificate_isValid;
}

OAIServerCertificateCommonNames OAIClusterProperties::getReverseProxyCertificateCommonNames() const {
    return m_reverse_proxy_certificate_common_names;
}
void OAIClusterProperties::setReverseProxyCertificateCommonNames(const OAIServerCertificateCommonNames &reverse_proxy_certificate_common_names) {
    m_reverse_proxy_certificate_common_names = reverse_proxy_certificate_common_names;
    m_reverse_proxy_certificate_common_names_isSet = true;
}

bool OAIClusterProperties::is_reverse_proxy_certificate_common_names_Set() const{
    return m_reverse_proxy_certificate_common_names_isSet;
}

bool OAIClusterProperties::is_reverse_proxy_certificate_common_names_Valid() const{
    return m_reverse_proxy_certificate_common_names_isValid;
}

OAIClusterUpgradePolicy OAIClusterProperties::getUpgradeDescription() const {
    return m_upgrade_description;
}
void OAIClusterProperties::setUpgradeDescription(const OAIClusterUpgradePolicy &upgrade_description) {
    m_upgrade_description = upgrade_description;
    m_upgrade_description_isSet = true;
}

bool OAIClusterProperties::is_upgrade_description_Set() const{
    return m_upgrade_description_isSet;
}

bool OAIClusterProperties::is_upgrade_description_Valid() const{
    return m_upgrade_description_isValid;
}

OAIUpgradeMode OAIClusterProperties::getUpgradeMode() const {
    return m_upgrade_mode;
}
void OAIClusterProperties::setUpgradeMode(const OAIUpgradeMode &upgrade_mode) {
    m_upgrade_mode = upgrade_mode;
    m_upgrade_mode_isSet = true;
}

bool OAIClusterProperties::is_upgrade_mode_Set() const{
    return m_upgrade_mode_isSet;
}

bool OAIClusterProperties::is_upgrade_mode_Valid() const{
    return m_upgrade_mode_isValid;
}

QString OAIClusterProperties::getVmImage() const {
    return m_vm_image;
}
void OAIClusterProperties::setVmImage(const QString &vm_image) {
    m_vm_image = vm_image;
    m_vm_image_isSet = true;
}

bool OAIClusterProperties::is_vm_image_Set() const{
    return m_vm_image_isSet;
}

bool OAIClusterProperties::is_vm_image_Valid() const{
    return m_vm_image_isValid;
}

bool OAIClusterProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_on_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_cluster_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_active_directory.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_common_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_common_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_thumbprints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_code_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics_storage_account_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fabric_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reliability_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_proxy_certificate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reverse_proxy_certificate_common_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_management_endpoint_isValid && m_node_types_isValid && true;
}

} // namespace OpenAPI
