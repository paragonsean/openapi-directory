/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SettingsParameterDescription from './SettingsParameterDescription';

/**
 * The SettingsSectionDescription model module.
 * @module model/SettingsSectionDescription
 * @version 2018-02-01
 */
class SettingsSectionDescription {
    /**
     * Constructs a new <code>SettingsSectionDescription</code>.
     * Describes a section in the fabric settings of the cluster.
     * @alias module:model/SettingsSectionDescription
     * @param name {String} The section name of the fabric settings.
     * @param parameters {Array.<module:model/SettingsParameterDescription>} The collection of parameters in the section.
     */
    constructor(name, parameters) { 
        
        SettingsSectionDescription.initialize(this, name, parameters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, parameters) { 
        obj['name'] = name;
        obj['parameters'] = parameters;
    }

    /**
     * Constructs a <code>SettingsSectionDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SettingsSectionDescription} obj Optional instance to populate.
     * @return {module:model/SettingsSectionDescription} The populated <code>SettingsSectionDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SettingsSectionDescription();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [SettingsParameterDescription]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SettingsSectionDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SettingsSectionDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SettingsSectionDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                SettingsParameterDescription.validateJSON(item);
            };
        }

        return true;
    }


}

SettingsSectionDescription.RequiredProperties = ["name", "parameters"];

/**
 * The section name of the fabric settings.
 * @member {String} name
 */
SettingsSectionDescription.prototype['name'] = undefined;

/**
 * The collection of parameters in the section.
 * @member {Array.<module:model/SettingsParameterDescription>} parameters
 */
SettingsSectionDescription.prototype['parameters'] = undefined;






export default SettingsSectionDescription;

