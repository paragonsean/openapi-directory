/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2018-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationDeltaHealthPolicy from './ApplicationDeltaHealthPolicy';

/**
 * The ClusterUpgradeDeltaHealthPolicy model module.
 * @module model/ClusterUpgradeDeltaHealthPolicy
 * @version 2018-02-01
 */
class ClusterUpgradeDeltaHealthPolicy {
    /**
     * Constructs a new <code>ClusterUpgradeDeltaHealthPolicy</code>.
     * Describes the delta health policies for the cluster upgrade.
     * @alias module:model/ClusterUpgradeDeltaHealthPolicy
     * @param maxPercentDeltaUnhealthyApplications {Number} The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this. 
     * @param maxPercentDeltaUnhealthyNodes {Number} The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. 
     * @param maxPercentUpgradeDomainDeltaUnhealthyNodes {Number} The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. 
     */
    constructor(maxPercentDeltaUnhealthyApplications, maxPercentDeltaUnhealthyNodes, maxPercentUpgradeDomainDeltaUnhealthyNodes) { 
        
        ClusterUpgradeDeltaHealthPolicy.initialize(this, maxPercentDeltaUnhealthyApplications, maxPercentDeltaUnhealthyNodes, maxPercentUpgradeDomainDeltaUnhealthyNodes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, maxPercentDeltaUnhealthyApplications, maxPercentDeltaUnhealthyNodes, maxPercentUpgradeDomainDeltaUnhealthyNodes) { 
        obj['maxPercentDeltaUnhealthyApplications'] = maxPercentDeltaUnhealthyApplications;
        obj['maxPercentDeltaUnhealthyNodes'] = maxPercentDeltaUnhealthyNodes;
        obj['maxPercentUpgradeDomainDeltaUnhealthyNodes'] = maxPercentUpgradeDomainDeltaUnhealthyNodes;
    }

    /**
     * Constructs a <code>ClusterUpgradeDeltaHealthPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterUpgradeDeltaHealthPolicy} obj Optional instance to populate.
     * @return {module:model/ClusterUpgradeDeltaHealthPolicy} The populated <code>ClusterUpgradeDeltaHealthPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterUpgradeDeltaHealthPolicy();

            if (data.hasOwnProperty('applicationDeltaHealthPolicies')) {
                obj['applicationDeltaHealthPolicies'] = ApiClient.convertToType(data['applicationDeltaHealthPolicies'], {'String': ApplicationDeltaHealthPolicy});
            }
            if (data.hasOwnProperty('maxPercentDeltaUnhealthyApplications')) {
                obj['maxPercentDeltaUnhealthyApplications'] = ApiClient.convertToType(data['maxPercentDeltaUnhealthyApplications'], 'Number');
            }
            if (data.hasOwnProperty('maxPercentDeltaUnhealthyNodes')) {
                obj['maxPercentDeltaUnhealthyNodes'] = ApiClient.convertToType(data['maxPercentDeltaUnhealthyNodes'], 'Number');
            }
            if (data.hasOwnProperty('maxPercentUpgradeDomainDeltaUnhealthyNodes')) {
                obj['maxPercentUpgradeDomainDeltaUnhealthyNodes'] = ApiClient.convertToType(data['maxPercentUpgradeDomainDeltaUnhealthyNodes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterUpgradeDeltaHealthPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterUpgradeDeltaHealthPolicy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClusterUpgradeDeltaHealthPolicy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

ClusterUpgradeDeltaHealthPolicy.RequiredProperties = ["maxPercentDeltaUnhealthyApplications", "maxPercentDeltaUnhealthyNodes", "maxPercentUpgradeDomainDeltaUnhealthyNodes"];

/**
 * Defines a map that contains specific application delta health policies for different applications. Each entry specifies as key the application name and as value an ApplicationDeltaHealthPolicy used to evaluate the application health when upgrading the cluster. The application name should include the 'fabric:' URI scheme. The map is empty by default. 
 * @member {Object.<String, module:model/ApplicationDeltaHealthPolicy>} applicationDeltaHealthPolicies
 */
ClusterUpgradeDeltaHealthPolicy.prototype['applicationDeltaHealthPolicies'] = undefined;

/**
 * The maximum allowed percentage of applications health degradation allowed during cluster upgrades. The delta is measured between the state of the applications at the beginning of upgrade and the state of the applications at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. System services are not included in this. 
 * @member {Number} maxPercentDeltaUnhealthyApplications
 */
ClusterUpgradeDeltaHealthPolicy.prototype['maxPercentDeltaUnhealthyApplications'] = undefined;

/**
 * The maximum allowed percentage of nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the nodes at the beginning of upgrade and the state of the nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion to make sure the global state of the cluster is within tolerated limits. 
 * @member {Number} maxPercentDeltaUnhealthyNodes
 */
ClusterUpgradeDeltaHealthPolicy.prototype['maxPercentDeltaUnhealthyNodes'] = undefined;

/**
 * The maximum allowed percentage of upgrade domain nodes health degradation allowed during cluster upgrades. The delta is measured between the state of the upgrade domain nodes at the beginning of upgrade and the state of the upgrade domain nodes at the time of the health evaluation. The check is performed after every upgrade domain upgrade completion for all completed upgrade domains to make sure the state of the upgrade domains is within tolerated limits. 
 * @member {Number} maxPercentUpgradeDomainDeltaUnhealthyNodes
 */
ClusterUpgradeDeltaHealthPolicy.prototype['maxPercentUpgradeDomainDeltaUnhealthyNodes'] = undefined;






export default ClusterUpgradeDeltaHealthPolicy;

