/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClusterVersionApi_H
#define OAI_OAIClusterVersionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClusterCodeVersionsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClusterVersionApi : public QObject {
    Q_OBJECT

public:
    OAIClusterVersionApi(const int timeOut = 0);
    ~OAIClusterVersionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cluster_version QString [required]
    */
    virtual void clusterVersionsGet(const QString &location, const QString &api_version, const QString &subscription_id, const QString &cluster_version);

    /**
    * @param[in]  location QString [required]
    * @param[in]  environment QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cluster_version QString [required]
    */
    virtual void clusterVersionsGetByEnvironment(const QString &location, const QString &environment, const QString &api_version, const QString &subscription_id, const QString &cluster_version);

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void clusterVersionsList(const QString &location, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  location QString [required]
    * @param[in]  environment QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void clusterVersionsListByEnvironment(const QString &location, const QString &environment, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void clusterVersionsGetCallback(OAIHttpRequestWorker *worker);
    void clusterVersionsGetByEnvironmentCallback(OAIHttpRequestWorker *worker);
    void clusterVersionsListCallback(OAIHttpRequestWorker *worker);
    void clusterVersionsListByEnvironmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void clusterVersionsGetSignal(OAIClusterCodeVersionsListResult summary);
    void clusterVersionsGetByEnvironmentSignal(OAIClusterCodeVersionsListResult summary);
    void clusterVersionsListSignal(OAIClusterCodeVersionsListResult summary);
    void clusterVersionsListByEnvironmentSignal(OAIClusterCodeVersionsListResult summary);


    void clusterVersionsGetSignalFull(OAIHttpRequestWorker *worker, OAIClusterCodeVersionsListResult summary);
    void clusterVersionsGetByEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIClusterCodeVersionsListResult summary);
    void clusterVersionsListSignalFull(OAIHttpRequestWorker *worker, OAIClusterCodeVersionsListResult summary);
    void clusterVersionsListByEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIClusterCodeVersionsListResult summary);

    Q_DECL_DEPRECATED_X("Use clusterVersionsGetSignalError() instead")
    void clusterVersionsGetSignalE(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsGetSignalError(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterVersionsGetByEnvironmentSignalError() instead")
    void clusterVersionsGetByEnvironmentSignalE(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsGetByEnvironmentSignalError(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterVersionsListSignalError() instead")
    void clusterVersionsListSignalE(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsListSignalError(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterVersionsListByEnvironmentSignalError() instead")
    void clusterVersionsListByEnvironmentSignalE(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsListByEnvironmentSignalError(OAIClusterCodeVersionsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use clusterVersionsGetSignalErrorFull() instead")
    void clusterVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterVersionsGetByEnvironmentSignalErrorFull() instead")
    void clusterVersionsGetByEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsGetByEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterVersionsListSignalErrorFull() instead")
    void clusterVersionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use clusterVersionsListByEnvironmentSignalErrorFull() instead")
    void clusterVersionsListByEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void clusterVersionsListByEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
