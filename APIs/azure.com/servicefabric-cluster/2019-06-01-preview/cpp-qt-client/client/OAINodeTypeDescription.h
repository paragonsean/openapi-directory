/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeTypeDescription.h
 *
 * Describes a node type in the cluster, each node type represents sub set of nodes in the cluster.
 */

#ifndef OAINodeTypeDescription_H
#define OAINodeTypeDescription_H

#include <QJsonObject>

#include "OAIDurabilityLevel.h"
#include "OAIEndpointRangeDescription.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEndpointRangeDescription;

class OAINodeTypeDescription : public OAIObject {
public:
    OAINodeTypeDescription();
    OAINodeTypeDescription(QString json);
    ~OAINodeTypeDescription() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEndpointRangeDescription getApplicationPorts() const;
    void setApplicationPorts(const OAIEndpointRangeDescription &application_ports);
    bool is_application_ports_Set() const;
    bool is_application_ports_Valid() const;

    QMap<QString, QString> getCapacities() const;
    void setCapacities(const QMap<QString, QString> &capacities);
    bool is_capacities_Set() const;
    bool is_capacities_Valid() const;

    qint32 getClientConnectionEndpointPort() const;
    void setClientConnectionEndpointPort(const qint32 &client_connection_endpoint_port);
    bool is_client_connection_endpoint_port_Set() const;
    bool is_client_connection_endpoint_port_Valid() const;

    OAIDurabilityLevel getDurabilityLevel() const;
    void setDurabilityLevel(const OAIDurabilityLevel &durability_level);
    bool is_durability_level_Set() const;
    bool is_durability_level_Valid() const;

    OAIEndpointRangeDescription getEphemeralPorts() const;
    void setEphemeralPorts(const OAIEndpointRangeDescription &ephemeral_ports);
    bool is_ephemeral_ports_Set() const;
    bool is_ephemeral_ports_Valid() const;

    qint32 getHttpGatewayEndpointPort() const;
    void setHttpGatewayEndpointPort(const qint32 &http_gateway_endpoint_port);
    bool is_http_gateway_endpoint_port_Set() const;
    bool is_http_gateway_endpoint_port_Valid() const;

    bool isIsPrimary() const;
    void setIsPrimary(const bool &is_primary);
    bool is_is_primary_Set() const;
    bool is_is_primary_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QMap<QString, QString> getPlacementProperties() const;
    void setPlacementProperties(const QMap<QString, QString> &placement_properties);
    bool is_placement_properties_Set() const;
    bool is_placement_properties_Valid() const;

    qint32 getReverseProxyEndpointPort() const;
    void setReverseProxyEndpointPort(const qint32 &reverse_proxy_endpoint_port);
    bool is_reverse_proxy_endpoint_port_Set() const;
    bool is_reverse_proxy_endpoint_port_Valid() const;

    qint32 getVmInstanceCount() const;
    void setVmInstanceCount(const qint32 &vm_instance_count);
    bool is_vm_instance_count_Set() const;
    bool is_vm_instance_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEndpointRangeDescription m_application_ports;
    bool m_application_ports_isSet;
    bool m_application_ports_isValid;

    QMap<QString, QString> m_capacities;
    bool m_capacities_isSet;
    bool m_capacities_isValid;

    qint32 m_client_connection_endpoint_port;
    bool m_client_connection_endpoint_port_isSet;
    bool m_client_connection_endpoint_port_isValid;

    OAIDurabilityLevel m_durability_level;
    bool m_durability_level_isSet;
    bool m_durability_level_isValid;

    OAIEndpointRangeDescription m_ephemeral_ports;
    bool m_ephemeral_ports_isSet;
    bool m_ephemeral_ports_isValid;

    qint32 m_http_gateway_endpoint_port;
    bool m_http_gateway_endpoint_port_isSet;
    bool m_http_gateway_endpoint_port_isValid;

    bool m_is_primary;
    bool m_is_primary_isSet;
    bool m_is_primary_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QMap<QString, QString> m_placement_properties;
    bool m_placement_properties_isSet;
    bool m_placement_properties_isValid;

    qint32 m_reverse_proxy_endpoint_port;
    bool m_reverse_proxy_endpoint_port_isSet;
    bool m_reverse_proxy_endpoint_port_isValid;

    qint32 m_vm_instance_count;
    bool m_vm_instance_count_isSet;
    bool m_vm_instance_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeTypeDescription)

#endif // OAINodeTypeDescription_H
