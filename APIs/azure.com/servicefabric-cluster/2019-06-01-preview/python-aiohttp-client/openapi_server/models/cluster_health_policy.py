# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy import ApplicationHealthPolicy
from openapi_server import util


class ClusterHealthPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policies: Dict[str, ApplicationHealthPolicy]=None, max_percent_unhealthy_applications: int=None, max_percent_unhealthy_nodes: int=None):
        """ClusterHealthPolicy - a model defined in OpenAPI

        :param application_health_policies: The application_health_policies of this ClusterHealthPolicy.
        :param max_percent_unhealthy_applications: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :param max_percent_unhealthy_nodes: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        """
        self.openapi_types = {
            'application_health_policies': Dict[str, ApplicationHealthPolicy],
            'max_percent_unhealthy_applications': int,
            'max_percent_unhealthy_nodes': int
        }

        self.attribute_map = {
            'application_health_policies': 'applicationHealthPolicies',
            'max_percent_unhealthy_applications': 'maxPercentUnhealthyApplications',
            'max_percent_unhealthy_nodes': 'maxPercentUnhealthyNodes'
        }

        self._application_health_policies = application_health_policies
        self._max_percent_unhealthy_applications = max_percent_unhealthy_applications
        self._max_percent_unhealthy_nodes = max_percent_unhealthy_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterHealthPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterHealthPolicy of this ClusterHealthPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policies(self):
        """Gets the application_health_policies of this ClusterHealthPolicy.

        Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. The application name should include the 'fabric:' URI scheme. The map is empty by default. 

        :return: The application_health_policies of this ClusterHealthPolicy.
        :rtype: Dict[str, ApplicationHealthPolicy]
        """
        return self._application_health_policies

    @application_health_policies.setter
    def application_health_policies(self, application_health_policies):
        """Sets the application_health_policies of this ClusterHealthPolicy.

        Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. The application name should include the 'fabric:' URI scheme. The map is empty by default. 

        :param application_health_policies: The application_health_policies of this ClusterHealthPolicy.
        :type application_health_policies: Dict[str, ApplicationHealthPolicy]
        """

        self._application_health_policies = application_health_policies

    @property
    def max_percent_unhealthy_applications(self):
        """Gets the max_percent_unhealthy_applications of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap. The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero. 

        :return: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_applications

    @max_percent_unhealthy_applications.setter
    def max_percent_unhealthy_applications(self, max_percent_unhealthy_applications):
        """Sets the max_percent_unhealthy_applications of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap. The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero. 

        :param max_percent_unhealthy_applications: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :type max_percent_unhealthy_applications: int
        """
        if max_percent_unhealthy_applications is not None and max_percent_unhealthy_applications > 100:
            raise ValueError("Invalid value for `max_percent_unhealthy_applications`, must be a value less than or equal to `100`")
        if max_percent_unhealthy_applications is not None and max_percent_unhealthy_applications < 0:
            raise ValueError("Invalid value for `max_percent_unhealthy_applications`, must be a value greater than or equal to `0`")

        self._max_percent_unhealthy_applications = max_percent_unhealthy_applications

    @property
    def max_percent_unhealthy_nodes(self):
        """Gets the max_percent_unhealthy_nodes of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.  In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that. 

        :return: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_nodes

    @max_percent_unhealthy_nodes.setter
    def max_percent_unhealthy_nodes(self, max_percent_unhealthy_nodes):
        """Sets the max_percent_unhealthy_nodes of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.  In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that. 

        :param max_percent_unhealthy_nodes: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        :type max_percent_unhealthy_nodes: int
        """
        if max_percent_unhealthy_nodes is not None and max_percent_unhealthy_nodes > 100:
            raise ValueError("Invalid value for `max_percent_unhealthy_nodes`, must be a value less than or equal to `100`")
        if max_percent_unhealthy_nodes is not None and max_percent_unhealthy_nodes < 0:
            raise ValueError("Invalid value for `max_percent_unhealthy_nodes`, must be a value greater than or equal to `0`")

        self._max_percent_unhealthy_nodes = max_percent_unhealthy_nodes
