# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_name import StoreName
from openapi_server import util


class CertificateDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, thumbprint: str=None, thumbprint_secondary: str=None, x509_store_name: StoreName=None):
        """CertificateDescription - a model defined in OpenAPI

        :param thumbprint: The thumbprint of this CertificateDescription.
        :param thumbprint_secondary: The thumbprint_secondary of this CertificateDescription.
        :param x509_store_name: The x509_store_name of this CertificateDescription.
        """
        self.openapi_types = {
            'thumbprint': str,
            'thumbprint_secondary': str,
            'x509_store_name': StoreName
        }

        self.attribute_map = {
            'thumbprint': 'thumbprint',
            'thumbprint_secondary': 'thumbprintSecondary',
            'x509_store_name': 'x509StoreName'
        }

        self._thumbprint = thumbprint
        self._thumbprint_secondary = thumbprint_secondary
        self._x509_store_name = x509_store_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CertificateDescription of this CertificateDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateDescription.

        Thumbprint of the primary certificate.

        :return: The thumbprint of this CertificateDescription.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateDescription.

        Thumbprint of the primary certificate.

        :param thumbprint: The thumbprint of this CertificateDescription.
        :type thumbprint: str
        """
        if thumbprint is None:
            raise ValueError("Invalid value for `thumbprint`, must not be `None`")

        self._thumbprint = thumbprint

    @property
    def thumbprint_secondary(self):
        """Gets the thumbprint_secondary of this CertificateDescription.

        Thumbprint of the secondary certificate.

        :return: The thumbprint_secondary of this CertificateDescription.
        :rtype: str
        """
        return self._thumbprint_secondary

    @thumbprint_secondary.setter
    def thumbprint_secondary(self, thumbprint_secondary):
        """Sets the thumbprint_secondary of this CertificateDescription.

        Thumbprint of the secondary certificate.

        :param thumbprint_secondary: The thumbprint_secondary of this CertificateDescription.
        :type thumbprint_secondary: str
        """

        self._thumbprint_secondary = thumbprint_secondary

    @property
    def x509_store_name(self):
        """Gets the x509_store_name of this CertificateDescription.


        :return: The x509_store_name of this CertificateDescription.
        :rtype: StoreName
        """
        return self._x509_store_name

    @x509_store_name.setter
    def x509_store_name(self, x509_store_name):
        """Sets the x509_store_name of this CertificateDescription.


        :param x509_store_name: The x509_store_name of this CertificateDescription.
        :type x509_store_name: StoreName
        """

        self._x509_store_name = x509_store_name
