/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddOnFeatures from './AddOnFeatures';
import AzureActiveDirectory from './AzureActiveDirectory';
import CertificateDescription from './CertificateDescription';
import ClientCertificateCommonName from './ClientCertificateCommonName';
import ClientCertificateThumbprint from './ClientCertificateThumbprint';
import ClusterState from './ClusterState';
import ClusterUpgradePolicy from './ClusterUpgradePolicy';
import ClusterVersionDetails from './ClusterVersionDetails';
import DiagnosticsStorageAccountConfig from './DiagnosticsStorageAccountConfig';
import NodeTypeDescription from './NodeTypeDescription';
import ReliabilityLevel from './ReliabilityLevel';
import ServerCertificateCommonNames from './ServerCertificateCommonNames';
import SettingsSectionDescription from './SettingsSectionDescription';
import UpgradeMode from './UpgradeMode';

/**
 * The ClusterProperties model module.
 * @module model/ClusterProperties
 * @version 2019-06-01-preview
 */
class ClusterProperties {
    /**
     * Constructs a new <code>ClusterProperties</code>.
     * Describes the cluster resource properties.
     * @alias module:model/ClusterProperties
     * @param managementEndpoint {String} The http management endpoint of the cluster.
     * @param nodeTypes {Array.<module:model/NodeTypeDescription>} The list of node types in the cluster.
     */
    constructor(managementEndpoint, nodeTypes) { 
        
        ClusterProperties.initialize(this, managementEndpoint, nodeTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, managementEndpoint, nodeTypes) { 
        obj['managementEndpoint'] = managementEndpoint;
        obj['nodeTypes'] = nodeTypes;
    }

    /**
     * Constructs a <code>ClusterProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterProperties} obj Optional instance to populate.
     * @return {module:model/ClusterProperties} The populated <code>ClusterProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterProperties();

            if (data.hasOwnProperty('addOnFeatures')) {
                obj['addOnFeatures'] = ApiClient.convertToType(data['addOnFeatures'], [AddOnFeatures]);
            }
            if (data.hasOwnProperty('availableClusterVersions')) {
                obj['availableClusterVersions'] = ApiClient.convertToType(data['availableClusterVersions'], [ClusterVersionDetails]);
            }
            if (data.hasOwnProperty('azureActiveDirectory')) {
                obj['azureActiveDirectory'] = AzureActiveDirectory.constructFromObject(data['azureActiveDirectory']);
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = CertificateDescription.constructFromObject(data['certificate']);
            }
            if (data.hasOwnProperty('certificateCommonNames')) {
                obj['certificateCommonNames'] = ServerCertificateCommonNames.constructFromObject(data['certificateCommonNames']);
            }
            if (data.hasOwnProperty('clientCertificateCommonNames')) {
                obj['clientCertificateCommonNames'] = ApiClient.convertToType(data['clientCertificateCommonNames'], [ClientCertificateCommonName]);
            }
            if (data.hasOwnProperty('clientCertificateThumbprints')) {
                obj['clientCertificateThumbprints'] = ApiClient.convertToType(data['clientCertificateThumbprints'], [ClientCertificateThumbprint]);
            }
            if (data.hasOwnProperty('clusterCodeVersion')) {
                obj['clusterCodeVersion'] = ApiClient.convertToType(data['clusterCodeVersion'], 'String');
            }
            if (data.hasOwnProperty('clusterEndpoint')) {
                obj['clusterEndpoint'] = ApiClient.convertToType(data['clusterEndpoint'], 'String');
            }
            if (data.hasOwnProperty('clusterId')) {
                obj['clusterId'] = ApiClient.convertToType(data['clusterId'], 'String');
            }
            if (data.hasOwnProperty('clusterState')) {
                obj['clusterState'] = ClusterState.constructFromObject(data['clusterState']);
            }
            if (data.hasOwnProperty('diagnosticsStorageAccountConfig')) {
                obj['diagnosticsStorageAccountConfig'] = DiagnosticsStorageAccountConfig.constructFromObject(data['diagnosticsStorageAccountConfig']);
            }
            if (data.hasOwnProperty('eventStoreServiceEnabled')) {
                obj['eventStoreServiceEnabled'] = ApiClient.convertToType(data['eventStoreServiceEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('fabricSettings')) {
                obj['fabricSettings'] = ApiClient.convertToType(data['fabricSettings'], [SettingsSectionDescription]);
            }
            if (data.hasOwnProperty('managementEndpoint')) {
                obj['managementEndpoint'] = ApiClient.convertToType(data['managementEndpoint'], 'String');
            }
            if (data.hasOwnProperty('nodeTypes')) {
                obj['nodeTypes'] = ApiClient.convertToType(data['nodeTypes'], [NodeTypeDescription]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('reliabilityLevel')) {
                obj['reliabilityLevel'] = ReliabilityLevel.constructFromObject(data['reliabilityLevel']);
            }
            if (data.hasOwnProperty('reverseProxyCertificate')) {
                obj['reverseProxyCertificate'] = CertificateDescription.constructFromObject(data['reverseProxyCertificate']);
            }
            if (data.hasOwnProperty('reverseProxyCertificateCommonNames')) {
                obj['reverseProxyCertificateCommonNames'] = ServerCertificateCommonNames.constructFromObject(data['reverseProxyCertificateCommonNames']);
            }
            if (data.hasOwnProperty('upgradeDescription')) {
                obj['upgradeDescription'] = ClusterUpgradePolicy.constructFromObject(data['upgradeDescription']);
            }
            if (data.hasOwnProperty('upgradeMode')) {
                obj['upgradeMode'] = UpgradeMode.constructFromObject(data['upgradeMode']);
            }
            if (data.hasOwnProperty('vmImage')) {
                obj['vmImage'] = ApiClient.convertToType(data['vmImage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClusterProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['addOnFeatures'])) {
            throw new Error("Expected the field `addOnFeatures` to be an array in the JSON data but got " + data['addOnFeatures']);
        }
        if (data['availableClusterVersions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['availableClusterVersions'])) {
                throw new Error("Expected the field `availableClusterVersions` to be an array in the JSON data but got " + data['availableClusterVersions']);
            }
            // validate the optional field `availableClusterVersions` (array)
            for (const item of data['availableClusterVersions']) {
                ClusterVersionDetails.validateJSON(item);
            };
        }
        // validate the optional field `azureActiveDirectory`
        if (data['azureActiveDirectory']) { // data not null
          AzureActiveDirectory.validateJSON(data['azureActiveDirectory']);
        }
        // validate the optional field `certificate`
        if (data['certificate']) { // data not null
          CertificateDescription.validateJSON(data['certificate']);
        }
        // validate the optional field `certificateCommonNames`
        if (data['certificateCommonNames']) { // data not null
          ServerCertificateCommonNames.validateJSON(data['certificateCommonNames']);
        }
        if (data['clientCertificateCommonNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientCertificateCommonNames'])) {
                throw new Error("Expected the field `clientCertificateCommonNames` to be an array in the JSON data but got " + data['clientCertificateCommonNames']);
            }
            // validate the optional field `clientCertificateCommonNames` (array)
            for (const item of data['clientCertificateCommonNames']) {
                ClientCertificateCommonName.validateJSON(item);
            };
        }
        if (data['clientCertificateThumbprints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientCertificateThumbprints'])) {
                throw new Error("Expected the field `clientCertificateThumbprints` to be an array in the JSON data but got " + data['clientCertificateThumbprints']);
            }
            // validate the optional field `clientCertificateThumbprints` (array)
            for (const item of data['clientCertificateThumbprints']) {
                ClientCertificateThumbprint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['clusterCodeVersion'] && !(typeof data['clusterCodeVersion'] === 'string' || data['clusterCodeVersion'] instanceof String)) {
            throw new Error("Expected the field `clusterCodeVersion` to be a primitive type in the JSON string but got " + data['clusterCodeVersion']);
        }
        // ensure the json data is a string
        if (data['clusterEndpoint'] && !(typeof data['clusterEndpoint'] === 'string' || data['clusterEndpoint'] instanceof String)) {
            throw new Error("Expected the field `clusterEndpoint` to be a primitive type in the JSON string but got " + data['clusterEndpoint']);
        }
        // ensure the json data is a string
        if (data['clusterId'] && !(typeof data['clusterId'] === 'string' || data['clusterId'] instanceof String)) {
            throw new Error("Expected the field `clusterId` to be a primitive type in the JSON string but got " + data['clusterId']);
        }
        // validate the optional field `diagnosticsStorageAccountConfig`
        if (data['diagnosticsStorageAccountConfig']) { // data not null
          DiagnosticsStorageAccountConfig.validateJSON(data['diagnosticsStorageAccountConfig']);
        }
        if (data['fabricSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fabricSettings'])) {
                throw new Error("Expected the field `fabricSettings` to be an array in the JSON data but got " + data['fabricSettings']);
            }
            // validate the optional field `fabricSettings` (array)
            for (const item of data['fabricSettings']) {
                SettingsSectionDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['managementEndpoint'] && !(typeof data['managementEndpoint'] === 'string' || data['managementEndpoint'] instanceof String)) {
            throw new Error("Expected the field `managementEndpoint` to be a primitive type in the JSON string but got " + data['managementEndpoint']);
        }
        if (data['nodeTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeTypes'])) {
                throw new Error("Expected the field `nodeTypes` to be an array in the JSON data but got " + data['nodeTypes']);
            }
            // validate the optional field `nodeTypes` (array)
            for (const item of data['nodeTypes']) {
                NodeTypeDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `reverseProxyCertificate`
        if (data['reverseProxyCertificate']) { // data not null
          CertificateDescription.validateJSON(data['reverseProxyCertificate']);
        }
        // validate the optional field `reverseProxyCertificateCommonNames`
        if (data['reverseProxyCertificateCommonNames']) { // data not null
          ServerCertificateCommonNames.validateJSON(data['reverseProxyCertificateCommonNames']);
        }
        // validate the optional field `upgradeDescription`
        if (data['upgradeDescription']) { // data not null
          ClusterUpgradePolicy.validateJSON(data['upgradeDescription']);
        }
        // ensure the json data is a string
        if (data['vmImage'] && !(typeof data['vmImage'] === 'string' || data['vmImage'] instanceof String)) {
            throw new Error("Expected the field `vmImage` to be a primitive type in the JSON string but got " + data['vmImage']);
        }

        return true;
    }


}

ClusterProperties.RequiredProperties = ["managementEndpoint", "nodeTypes"];

/**
 * The list of add-on features to enable in the cluster.
 * @member {Array.<module:model/AddOnFeatures>} addOnFeatures
 */
ClusterProperties.prototype['addOnFeatures'] = undefined;

/**
 * The Service Fabric runtime versions available for this cluster.
 * @member {Array.<module:model/ClusterVersionDetails>} availableClusterVersions
 */
ClusterProperties.prototype['availableClusterVersions'] = undefined;

/**
 * @member {module:model/AzureActiveDirectory} azureActiveDirectory
 */
ClusterProperties.prototype['azureActiveDirectory'] = undefined;

/**
 * @member {module:model/CertificateDescription} certificate
 */
ClusterProperties.prototype['certificate'] = undefined;

/**
 * @member {module:model/ServerCertificateCommonNames} certificateCommonNames
 */
ClusterProperties.prototype['certificateCommonNames'] = undefined;

/**
 * The list of client certificates referenced by common name that are allowed to manage the cluster.
 * @member {Array.<module:model/ClientCertificateCommonName>} clientCertificateCommonNames
 */
ClusterProperties.prototype['clientCertificateCommonNames'] = undefined;

/**
 * The list of client certificates referenced by thumbprint that are allowed to manage the cluster.
 * @member {Array.<module:model/ClientCertificateThumbprint>} clientCertificateThumbprints
 */
ClusterProperties.prototype['clientCertificateThumbprints'] = undefined;

/**
 * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
 * @member {String} clusterCodeVersion
 */
ClusterProperties.prototype['clusterCodeVersion'] = undefined;

/**
 * The Azure Resource Provider endpoint. A system service in the cluster connects to this  endpoint.
 * @member {String} clusterEndpoint
 */
ClusterProperties.prototype['clusterEndpoint'] = undefined;

/**
 * A service generated unique identifier for the cluster resource.
 * @member {String} clusterId
 */
ClusterProperties.prototype['clusterId'] = undefined;

/**
 * @member {module:model/ClusterState} clusterState
 */
ClusterProperties.prototype['clusterState'] = undefined;

/**
 * @member {module:model/DiagnosticsStorageAccountConfig} diagnosticsStorageAccountConfig
 */
ClusterProperties.prototype['diagnosticsStorageAccountConfig'] = undefined;

/**
 * Indicates if the event store service is enabled.
 * @member {Boolean} eventStoreServiceEnabled
 */
ClusterProperties.prototype['eventStoreServiceEnabled'] = undefined;

/**
 * The list of custom fabric settings to configure the cluster.
 * @member {Array.<module:model/SettingsSectionDescription>} fabricSettings
 */
ClusterProperties.prototype['fabricSettings'] = undefined;

/**
 * The http management endpoint of the cluster.
 * @member {String} managementEndpoint
 */
ClusterProperties.prototype['managementEndpoint'] = undefined;

/**
 * The list of node types in the cluster.
 * @member {Array.<module:model/NodeTypeDescription>} nodeTypes
 */
ClusterProperties.prototype['nodeTypes'] = undefined;

/**
 * The provisioning state of the cluster resource.
 * @member {module:model/ClusterProperties.ProvisioningStateEnum} provisioningState
 */
ClusterProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ReliabilityLevel} reliabilityLevel
 */
ClusterProperties.prototype['reliabilityLevel'] = undefined;

/**
 * @member {module:model/CertificateDescription} reverseProxyCertificate
 */
ClusterProperties.prototype['reverseProxyCertificate'] = undefined;

/**
 * @member {module:model/ServerCertificateCommonNames} reverseProxyCertificateCommonNames
 */
ClusterProperties.prototype['reverseProxyCertificateCommonNames'] = undefined;

/**
 * @member {module:model/ClusterUpgradePolicy} upgradeDescription
 */
ClusterProperties.prototype['upgradeDescription'] = undefined;

/**
 * @member {module:model/UpgradeMode} upgradeMode
 */
ClusterProperties.prototype['upgradeMode'] = undefined;

/**
 * The VM image VMSS has been configured with. Generic names such as Windows or Linux can be used.
 * @member {String} vmImage
 */
ClusterProperties.prototype['vmImage'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ClusterProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};



export default ClusterProperties;

