/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddOnFeatures;
import org.openapitools.client.model.CertificateDescription;
import org.openapitools.client.model.ClientCertificateCommonName;
import org.openapitools.client.model.ClientCertificateThumbprint;
import org.openapitools.client.model.ClusterUpgradePolicy;
import org.openapitools.client.model.NodeTypeDescription;
import org.openapitools.client.model.ReliabilityLevel;
import org.openapitools.client.model.ServerCertificateCommonNames;
import org.openapitools.client.model.SettingsSectionDescription;
import org.openapitools.client.model.UpgradeMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the cluster resource properties that can be updated during PATCH operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:53.739890-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterPropertiesUpdateParameters {
  public static final String SERIALIZED_NAME_ADD_ON_FEATURES = "addOnFeatures";
  @SerializedName(SERIALIZED_NAME_ADD_ON_FEATURES)
  private List<AddOnFeatures> addOnFeatures = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATE = "certificate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE)
  private CertificateDescription certificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_COMMON_NAMES = "certificateCommonNames";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_COMMON_NAMES)
  private ServerCertificateCommonNames certificateCommonNames;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_COMMON_NAMES = "clientCertificateCommonNames";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_COMMON_NAMES)
  private List<ClientCertificateCommonName> clientCertificateCommonNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE_THUMBPRINTS = "clientCertificateThumbprints";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE_THUMBPRINTS)
  private List<ClientCertificateThumbprint> clientCertificateThumbprints = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLUSTER_CODE_VERSION = "clusterCodeVersion";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CODE_VERSION)
  private String clusterCodeVersion;

  public static final String SERIALIZED_NAME_EVENT_STORE_SERVICE_ENABLED = "eventStoreServiceEnabled";
  @SerializedName(SERIALIZED_NAME_EVENT_STORE_SERVICE_ENABLED)
  private Boolean eventStoreServiceEnabled;

  public static final String SERIALIZED_NAME_FABRIC_SETTINGS = "fabricSettings";
  @SerializedName(SERIALIZED_NAME_FABRIC_SETTINGS)
  private List<SettingsSectionDescription> fabricSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODE_TYPES = "nodeTypes";
  @SerializedName(SERIALIZED_NAME_NODE_TYPES)
  private List<NodeTypeDescription> nodeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELIABILITY_LEVEL = "reliabilityLevel";
  @SerializedName(SERIALIZED_NAME_RELIABILITY_LEVEL)
  private ReliabilityLevel reliabilityLevel;

  public static final String SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE = "reverseProxyCertificate";
  @SerializedName(SERIALIZED_NAME_REVERSE_PROXY_CERTIFICATE)
  private CertificateDescription reverseProxyCertificate;

  public static final String SERIALIZED_NAME_UPGRADE_DESCRIPTION = "upgradeDescription";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DESCRIPTION)
  private ClusterUpgradePolicy upgradeDescription;

  public static final String SERIALIZED_NAME_UPGRADE_MODE = "upgradeMode";
  @SerializedName(SERIALIZED_NAME_UPGRADE_MODE)
  private UpgradeMode upgradeMode;

  public ClusterPropertiesUpdateParameters() {
  }

  public ClusterPropertiesUpdateParameters addOnFeatures(List<AddOnFeatures> addOnFeatures) {
    this.addOnFeatures = addOnFeatures;
    return this;
  }

  public ClusterPropertiesUpdateParameters addAddOnFeaturesItem(AddOnFeatures addOnFeaturesItem) {
    if (this.addOnFeatures == null) {
      this.addOnFeatures = new ArrayList<>();
    }
    this.addOnFeatures.add(addOnFeaturesItem);
    return this;
  }

  /**
   * The list of add-on features to enable in the cluster.
   * @return addOnFeatures
   */
  @javax.annotation.Nullable
  public List<AddOnFeatures> getAddOnFeatures() {
    return addOnFeatures;
  }

  public void setAddOnFeatures(List<AddOnFeatures> addOnFeatures) {
    this.addOnFeatures = addOnFeatures;
  }


  public ClusterPropertiesUpdateParameters certificate(CertificateDescription certificate) {
    this.certificate = certificate;
    return this;
  }

  /**
   * Get certificate
   * @return certificate
   */
  @javax.annotation.Nullable
  public CertificateDescription getCertificate() {
    return certificate;
  }

  public void setCertificate(CertificateDescription certificate) {
    this.certificate = certificate;
  }


  public ClusterPropertiesUpdateParameters certificateCommonNames(ServerCertificateCommonNames certificateCommonNames) {
    this.certificateCommonNames = certificateCommonNames;
    return this;
  }

  /**
   * Get certificateCommonNames
   * @return certificateCommonNames
   */
  @javax.annotation.Nullable
  public ServerCertificateCommonNames getCertificateCommonNames() {
    return certificateCommonNames;
  }

  public void setCertificateCommonNames(ServerCertificateCommonNames certificateCommonNames) {
    this.certificateCommonNames = certificateCommonNames;
  }


  public ClusterPropertiesUpdateParameters clientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames) {
    this.clientCertificateCommonNames = clientCertificateCommonNames;
    return this;
  }

  public ClusterPropertiesUpdateParameters addClientCertificateCommonNamesItem(ClientCertificateCommonName clientCertificateCommonNamesItem) {
    if (this.clientCertificateCommonNames == null) {
      this.clientCertificateCommonNames = new ArrayList<>();
    }
    this.clientCertificateCommonNames.add(clientCertificateCommonNamesItem);
    return this;
  }

  /**
   * The list of client certificates referenced by common name that are allowed to manage the cluster. This will overwrite the existing list.
   * @return clientCertificateCommonNames
   */
  @javax.annotation.Nullable
  public List<ClientCertificateCommonName> getClientCertificateCommonNames() {
    return clientCertificateCommonNames;
  }

  public void setClientCertificateCommonNames(List<ClientCertificateCommonName> clientCertificateCommonNames) {
    this.clientCertificateCommonNames = clientCertificateCommonNames;
  }


  public ClusterPropertiesUpdateParameters clientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints) {
    this.clientCertificateThumbprints = clientCertificateThumbprints;
    return this;
  }

  public ClusterPropertiesUpdateParameters addClientCertificateThumbprintsItem(ClientCertificateThumbprint clientCertificateThumbprintsItem) {
    if (this.clientCertificateThumbprints == null) {
      this.clientCertificateThumbprints = new ArrayList<>();
    }
    this.clientCertificateThumbprints.add(clientCertificateThumbprintsItem);
    return this;
  }

  /**
   * The list of client certificates referenced by thumbprint that are allowed to manage the cluster. This will overwrite the existing list.
   * @return clientCertificateThumbprints
   */
  @javax.annotation.Nullable
  public List<ClientCertificateThumbprint> getClientCertificateThumbprints() {
    return clientCertificateThumbprints;
  }

  public void setClientCertificateThumbprints(List<ClientCertificateThumbprint> clientCertificateThumbprints) {
    this.clientCertificateThumbprints = clientCertificateThumbprints;
  }


  public ClusterPropertiesUpdateParameters clusterCodeVersion(String clusterCodeVersion) {
    this.clusterCodeVersion = clusterCodeVersion;
    return this;
  }

  /**
   * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to &#39;Manual&#39;. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
   * @return clusterCodeVersion
   */
  @javax.annotation.Nullable
  public String getClusterCodeVersion() {
    return clusterCodeVersion;
  }

  public void setClusterCodeVersion(String clusterCodeVersion) {
    this.clusterCodeVersion = clusterCodeVersion;
  }


  public ClusterPropertiesUpdateParameters eventStoreServiceEnabled(Boolean eventStoreServiceEnabled) {
    this.eventStoreServiceEnabled = eventStoreServiceEnabled;
    return this;
  }

  /**
   * Indicates if the event store service is enabled.
   * @return eventStoreServiceEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEventStoreServiceEnabled() {
    return eventStoreServiceEnabled;
  }

  public void setEventStoreServiceEnabled(Boolean eventStoreServiceEnabled) {
    this.eventStoreServiceEnabled = eventStoreServiceEnabled;
  }


  public ClusterPropertiesUpdateParameters fabricSettings(List<SettingsSectionDescription> fabricSettings) {
    this.fabricSettings = fabricSettings;
    return this;
  }

  public ClusterPropertiesUpdateParameters addFabricSettingsItem(SettingsSectionDescription fabricSettingsItem) {
    if (this.fabricSettings == null) {
      this.fabricSettings = new ArrayList<>();
    }
    this.fabricSettings.add(fabricSettingsItem);
    return this;
  }

  /**
   * The list of custom fabric settings to configure the cluster. This will overwrite the existing list.
   * @return fabricSettings
   */
  @javax.annotation.Nullable
  public List<SettingsSectionDescription> getFabricSettings() {
    return fabricSettings;
  }

  public void setFabricSettings(List<SettingsSectionDescription> fabricSettings) {
    this.fabricSettings = fabricSettings;
  }


  public ClusterPropertiesUpdateParameters nodeTypes(List<NodeTypeDescription> nodeTypes) {
    this.nodeTypes = nodeTypes;
    return this;
  }

  public ClusterPropertiesUpdateParameters addNodeTypesItem(NodeTypeDescription nodeTypesItem) {
    if (this.nodeTypes == null) {
      this.nodeTypes = new ArrayList<>();
    }
    this.nodeTypes.add(nodeTypesItem);
    return this;
  }

  /**
   * The list of node types in the cluster. This will overwrite the existing list.
   * @return nodeTypes
   */
  @javax.annotation.Nullable
  public List<NodeTypeDescription> getNodeTypes() {
    return nodeTypes;
  }

  public void setNodeTypes(List<NodeTypeDescription> nodeTypes) {
    this.nodeTypes = nodeTypes;
  }


  public ClusterPropertiesUpdateParameters reliabilityLevel(ReliabilityLevel reliabilityLevel) {
    this.reliabilityLevel = reliabilityLevel;
    return this;
  }

  /**
   * Get reliabilityLevel
   * @return reliabilityLevel
   */
  @javax.annotation.Nullable
  public ReliabilityLevel getReliabilityLevel() {
    return reliabilityLevel;
  }

  public void setReliabilityLevel(ReliabilityLevel reliabilityLevel) {
    this.reliabilityLevel = reliabilityLevel;
  }


  public ClusterPropertiesUpdateParameters reverseProxyCertificate(CertificateDescription reverseProxyCertificate) {
    this.reverseProxyCertificate = reverseProxyCertificate;
    return this;
  }

  /**
   * Get reverseProxyCertificate
   * @return reverseProxyCertificate
   */
  @javax.annotation.Nullable
  public CertificateDescription getReverseProxyCertificate() {
    return reverseProxyCertificate;
  }

  public void setReverseProxyCertificate(CertificateDescription reverseProxyCertificate) {
    this.reverseProxyCertificate = reverseProxyCertificate;
  }


  public ClusterPropertiesUpdateParameters upgradeDescription(ClusterUpgradePolicy upgradeDescription) {
    this.upgradeDescription = upgradeDescription;
    return this;
  }

  /**
   * Get upgradeDescription
   * @return upgradeDescription
   */
  @javax.annotation.Nullable
  public ClusterUpgradePolicy getUpgradeDescription() {
    return upgradeDescription;
  }

  public void setUpgradeDescription(ClusterUpgradePolicy upgradeDescription) {
    this.upgradeDescription = upgradeDescription;
  }


  public ClusterPropertiesUpdateParameters upgradeMode(UpgradeMode upgradeMode) {
    this.upgradeMode = upgradeMode;
    return this;
  }

  /**
   * Get upgradeMode
   * @return upgradeMode
   */
  @javax.annotation.Nullable
  public UpgradeMode getUpgradeMode() {
    return upgradeMode;
  }

  public void setUpgradeMode(UpgradeMode upgradeMode) {
    this.upgradeMode = upgradeMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterPropertiesUpdateParameters clusterPropertiesUpdateParameters = (ClusterPropertiesUpdateParameters) o;
    return Objects.equals(this.addOnFeatures, clusterPropertiesUpdateParameters.addOnFeatures) &&
        Objects.equals(this.certificate, clusterPropertiesUpdateParameters.certificate) &&
        Objects.equals(this.certificateCommonNames, clusterPropertiesUpdateParameters.certificateCommonNames) &&
        Objects.equals(this.clientCertificateCommonNames, clusterPropertiesUpdateParameters.clientCertificateCommonNames) &&
        Objects.equals(this.clientCertificateThumbprints, clusterPropertiesUpdateParameters.clientCertificateThumbprints) &&
        Objects.equals(this.clusterCodeVersion, clusterPropertiesUpdateParameters.clusterCodeVersion) &&
        Objects.equals(this.eventStoreServiceEnabled, clusterPropertiesUpdateParameters.eventStoreServiceEnabled) &&
        Objects.equals(this.fabricSettings, clusterPropertiesUpdateParameters.fabricSettings) &&
        Objects.equals(this.nodeTypes, clusterPropertiesUpdateParameters.nodeTypes) &&
        Objects.equals(this.reliabilityLevel, clusterPropertiesUpdateParameters.reliabilityLevel) &&
        Objects.equals(this.reverseProxyCertificate, clusterPropertiesUpdateParameters.reverseProxyCertificate) &&
        Objects.equals(this.upgradeDescription, clusterPropertiesUpdateParameters.upgradeDescription) &&
        Objects.equals(this.upgradeMode, clusterPropertiesUpdateParameters.upgradeMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addOnFeatures, certificate, certificateCommonNames, clientCertificateCommonNames, clientCertificateThumbprints, clusterCodeVersion, eventStoreServiceEnabled, fabricSettings, nodeTypes, reliabilityLevel, reverseProxyCertificate, upgradeDescription, upgradeMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterPropertiesUpdateParameters {\n");
    sb.append("    addOnFeatures: ").append(toIndentedString(addOnFeatures)).append("\n");
    sb.append("    certificate: ").append(toIndentedString(certificate)).append("\n");
    sb.append("    certificateCommonNames: ").append(toIndentedString(certificateCommonNames)).append("\n");
    sb.append("    clientCertificateCommonNames: ").append(toIndentedString(clientCertificateCommonNames)).append("\n");
    sb.append("    clientCertificateThumbprints: ").append(toIndentedString(clientCertificateThumbprints)).append("\n");
    sb.append("    clusterCodeVersion: ").append(toIndentedString(clusterCodeVersion)).append("\n");
    sb.append("    eventStoreServiceEnabled: ").append(toIndentedString(eventStoreServiceEnabled)).append("\n");
    sb.append("    fabricSettings: ").append(toIndentedString(fabricSettings)).append("\n");
    sb.append("    nodeTypes: ").append(toIndentedString(nodeTypes)).append("\n");
    sb.append("    reliabilityLevel: ").append(toIndentedString(reliabilityLevel)).append("\n");
    sb.append("    reverseProxyCertificate: ").append(toIndentedString(reverseProxyCertificate)).append("\n");
    sb.append("    upgradeDescription: ").append(toIndentedString(upgradeDescription)).append("\n");
    sb.append("    upgradeMode: ").append(toIndentedString(upgradeMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addOnFeatures");
    openapiFields.add("certificate");
    openapiFields.add("certificateCommonNames");
    openapiFields.add("clientCertificateCommonNames");
    openapiFields.add("clientCertificateThumbprints");
    openapiFields.add("clusterCodeVersion");
    openapiFields.add("eventStoreServiceEnabled");
    openapiFields.add("fabricSettings");
    openapiFields.add("nodeTypes");
    openapiFields.add("reliabilityLevel");
    openapiFields.add("reverseProxyCertificate");
    openapiFields.add("upgradeDescription");
    openapiFields.add("upgradeMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterPropertiesUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterPropertiesUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterPropertiesUpdateParameters is not found in the empty JSON string", ClusterPropertiesUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterPropertiesUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterPropertiesUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("addOnFeatures") != null && !jsonObj.get("addOnFeatures").isJsonNull() && !jsonObj.get("addOnFeatures").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `addOnFeatures` to be an array in the JSON string but got `%s`", jsonObj.get("addOnFeatures").toString()));
      }
      // validate the optional field `certificate`
      if (jsonObj.get("certificate") != null && !jsonObj.get("certificate").isJsonNull()) {
        CertificateDescription.validateJsonElement(jsonObj.get("certificate"));
      }
      // validate the optional field `certificateCommonNames`
      if (jsonObj.get("certificateCommonNames") != null && !jsonObj.get("certificateCommonNames").isJsonNull()) {
        ServerCertificateCommonNames.validateJsonElement(jsonObj.get("certificateCommonNames"));
      }
      if (jsonObj.get("clientCertificateCommonNames") != null && !jsonObj.get("clientCertificateCommonNames").isJsonNull()) {
        JsonArray jsonArrayclientCertificateCommonNames = jsonObj.getAsJsonArray("clientCertificateCommonNames");
        if (jsonArrayclientCertificateCommonNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientCertificateCommonNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientCertificateCommonNames` to be an array in the JSON string but got `%s`", jsonObj.get("clientCertificateCommonNames").toString()));
          }

          // validate the optional field `clientCertificateCommonNames` (array)
          for (int i = 0; i < jsonArrayclientCertificateCommonNames.size(); i++) {
            ClientCertificateCommonName.validateJsonElement(jsonArrayclientCertificateCommonNames.get(i));
          };
        }
      }
      if (jsonObj.get("clientCertificateThumbprints") != null && !jsonObj.get("clientCertificateThumbprints").isJsonNull()) {
        JsonArray jsonArrayclientCertificateThumbprints = jsonObj.getAsJsonArray("clientCertificateThumbprints");
        if (jsonArrayclientCertificateThumbprints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientCertificateThumbprints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientCertificateThumbprints` to be an array in the JSON string but got `%s`", jsonObj.get("clientCertificateThumbprints").toString()));
          }

          // validate the optional field `clientCertificateThumbprints` (array)
          for (int i = 0; i < jsonArrayclientCertificateThumbprints.size(); i++) {
            ClientCertificateThumbprint.validateJsonElement(jsonArrayclientCertificateThumbprints.get(i));
          };
        }
      }
      if ((jsonObj.get("clusterCodeVersion") != null && !jsonObj.get("clusterCodeVersion").isJsonNull()) && !jsonObj.get("clusterCodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterCodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterCodeVersion").toString()));
      }
      if (jsonObj.get("fabricSettings") != null && !jsonObj.get("fabricSettings").isJsonNull()) {
        JsonArray jsonArrayfabricSettings = jsonObj.getAsJsonArray("fabricSettings");
        if (jsonArrayfabricSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fabricSettings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fabricSettings` to be an array in the JSON string but got `%s`", jsonObj.get("fabricSettings").toString()));
          }

          // validate the optional field `fabricSettings` (array)
          for (int i = 0; i < jsonArrayfabricSettings.size(); i++) {
            SettingsSectionDescription.validateJsonElement(jsonArrayfabricSettings.get(i));
          };
        }
      }
      if (jsonObj.get("nodeTypes") != null && !jsonObj.get("nodeTypes").isJsonNull()) {
        JsonArray jsonArraynodeTypes = jsonObj.getAsJsonArray("nodeTypes");
        if (jsonArraynodeTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodeTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("nodeTypes").toString()));
          }

          // validate the optional field `nodeTypes` (array)
          for (int i = 0; i < jsonArraynodeTypes.size(); i++) {
            NodeTypeDescription.validateJsonElement(jsonArraynodeTypes.get(i));
          };
        }
      }
      // validate the optional field `reliabilityLevel`
      if (jsonObj.get("reliabilityLevel") != null && !jsonObj.get("reliabilityLevel").isJsonNull()) {
        ReliabilityLevel.validateJsonElement(jsonObj.get("reliabilityLevel"));
      }
      // validate the optional field `reverseProxyCertificate`
      if (jsonObj.get("reverseProxyCertificate") != null && !jsonObj.get("reverseProxyCertificate").isJsonNull()) {
        CertificateDescription.validateJsonElement(jsonObj.get("reverseProxyCertificate"));
      }
      // validate the optional field `upgradeDescription`
      if (jsonObj.get("upgradeDescription") != null && !jsonObj.get("upgradeDescription").isJsonNull()) {
        ClusterUpgradePolicy.validateJsonElement(jsonObj.get("upgradeDescription"));
      }
      // validate the optional field `upgradeMode`
      if (jsonObj.get("upgradeMode") != null && !jsonObj.get("upgradeMode").isJsonNull()) {
        UpgradeMode.validateJsonElement(jsonObj.get("upgradeMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterPropertiesUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterPropertiesUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterPropertiesUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterPropertiesUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterPropertiesUpdateParameters>() {
           @Override
           public void write(JsonWriter out, ClusterPropertiesUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterPropertiesUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterPropertiesUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterPropertiesUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to ClusterPropertiesUpdateParameters
   */
  public static ClusterPropertiesUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterPropertiesUpdateParameters.class);
  }

  /**
   * Convert an instance of ClusterPropertiesUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

