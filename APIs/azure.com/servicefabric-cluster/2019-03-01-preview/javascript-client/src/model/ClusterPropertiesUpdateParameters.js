/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddOnFeatures from './AddOnFeatures';
import CertificateDescription from './CertificateDescription';
import ClientCertificateCommonName from './ClientCertificateCommonName';
import ClientCertificateThumbprint from './ClientCertificateThumbprint';
import ClusterUpgradePolicy from './ClusterUpgradePolicy';
import NodeTypeDescription from './NodeTypeDescription';
import ReliabilityLevel from './ReliabilityLevel';
import ServerCertificateCommonNames from './ServerCertificateCommonNames';
import SettingsSectionDescription from './SettingsSectionDescription';
import UpgradeMode from './UpgradeMode';

/**
 * The ClusterPropertiesUpdateParameters model module.
 * @module model/ClusterPropertiesUpdateParameters
 * @version 2019-03-01-preview
 */
class ClusterPropertiesUpdateParameters {
    /**
     * Constructs a new <code>ClusterPropertiesUpdateParameters</code>.
     * Describes the cluster resource properties that can be updated during PATCH operation.
     * @alias module:model/ClusterPropertiesUpdateParameters
     */
    constructor() { 
        
        ClusterPropertiesUpdateParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterPropertiesUpdateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterPropertiesUpdateParameters} obj Optional instance to populate.
     * @return {module:model/ClusterPropertiesUpdateParameters} The populated <code>ClusterPropertiesUpdateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterPropertiesUpdateParameters();

            if (data.hasOwnProperty('addOnFeatures')) {
                obj['addOnFeatures'] = ApiClient.convertToType(data['addOnFeatures'], [AddOnFeatures]);
            }
            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = CertificateDescription.constructFromObject(data['certificate']);
            }
            if (data.hasOwnProperty('certificateCommonNames')) {
                obj['certificateCommonNames'] = ServerCertificateCommonNames.constructFromObject(data['certificateCommonNames']);
            }
            if (data.hasOwnProperty('clientCertificateCommonNames')) {
                obj['clientCertificateCommonNames'] = ApiClient.convertToType(data['clientCertificateCommonNames'], [ClientCertificateCommonName]);
            }
            if (data.hasOwnProperty('clientCertificateThumbprints')) {
                obj['clientCertificateThumbprints'] = ApiClient.convertToType(data['clientCertificateThumbprints'], [ClientCertificateThumbprint]);
            }
            if (data.hasOwnProperty('clusterCodeVersion')) {
                obj['clusterCodeVersion'] = ApiClient.convertToType(data['clusterCodeVersion'], 'String');
            }
            if (data.hasOwnProperty('eventStoreServiceEnabled')) {
                obj['eventStoreServiceEnabled'] = ApiClient.convertToType(data['eventStoreServiceEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('fabricSettings')) {
                obj['fabricSettings'] = ApiClient.convertToType(data['fabricSettings'], [SettingsSectionDescription]);
            }
            if (data.hasOwnProperty('nodeTypes')) {
                obj['nodeTypes'] = ApiClient.convertToType(data['nodeTypes'], [NodeTypeDescription]);
            }
            if (data.hasOwnProperty('reliabilityLevel')) {
                obj['reliabilityLevel'] = ReliabilityLevel.constructFromObject(data['reliabilityLevel']);
            }
            if (data.hasOwnProperty('reverseProxyCertificate')) {
                obj['reverseProxyCertificate'] = CertificateDescription.constructFromObject(data['reverseProxyCertificate']);
            }
            if (data.hasOwnProperty('upgradeDescription')) {
                obj['upgradeDescription'] = ClusterUpgradePolicy.constructFromObject(data['upgradeDescription']);
            }
            if (data.hasOwnProperty('upgradeMode')) {
                obj['upgradeMode'] = UpgradeMode.constructFromObject(data['upgradeMode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterPropertiesUpdateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterPropertiesUpdateParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['addOnFeatures'])) {
            throw new Error("Expected the field `addOnFeatures` to be an array in the JSON data but got " + data['addOnFeatures']);
        }
        // validate the optional field `certificate`
        if (data['certificate']) { // data not null
          CertificateDescription.validateJSON(data['certificate']);
        }
        // validate the optional field `certificateCommonNames`
        if (data['certificateCommonNames']) { // data not null
          ServerCertificateCommonNames.validateJSON(data['certificateCommonNames']);
        }
        if (data['clientCertificateCommonNames']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientCertificateCommonNames'])) {
                throw new Error("Expected the field `clientCertificateCommonNames` to be an array in the JSON data but got " + data['clientCertificateCommonNames']);
            }
            // validate the optional field `clientCertificateCommonNames` (array)
            for (const item of data['clientCertificateCommonNames']) {
                ClientCertificateCommonName.validateJSON(item);
            };
        }
        if (data['clientCertificateThumbprints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientCertificateThumbprints'])) {
                throw new Error("Expected the field `clientCertificateThumbprints` to be an array in the JSON data but got " + data['clientCertificateThumbprints']);
            }
            // validate the optional field `clientCertificateThumbprints` (array)
            for (const item of data['clientCertificateThumbprints']) {
                ClientCertificateThumbprint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['clusterCodeVersion'] && !(typeof data['clusterCodeVersion'] === 'string' || data['clusterCodeVersion'] instanceof String)) {
            throw new Error("Expected the field `clusterCodeVersion` to be a primitive type in the JSON string but got " + data['clusterCodeVersion']);
        }
        if (data['fabricSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fabricSettings'])) {
                throw new Error("Expected the field `fabricSettings` to be an array in the JSON data but got " + data['fabricSettings']);
            }
            // validate the optional field `fabricSettings` (array)
            for (const item of data['fabricSettings']) {
                SettingsSectionDescription.validateJSON(item);
            };
        }
        if (data['nodeTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nodeTypes'])) {
                throw new Error("Expected the field `nodeTypes` to be an array in the JSON data but got " + data['nodeTypes']);
            }
            // validate the optional field `nodeTypes` (array)
            for (const item of data['nodeTypes']) {
                NodeTypeDescription.validateJSON(item);
            };
        }
        // validate the optional field `reverseProxyCertificate`
        if (data['reverseProxyCertificate']) { // data not null
          CertificateDescription.validateJSON(data['reverseProxyCertificate']);
        }
        // validate the optional field `upgradeDescription`
        if (data['upgradeDescription']) { // data not null
          ClusterUpgradePolicy.validateJSON(data['upgradeDescription']);
        }

        return true;
    }


}



/**
 * The list of add-on features to enable in the cluster.
 * @member {Array.<module:model/AddOnFeatures>} addOnFeatures
 */
ClusterPropertiesUpdateParameters.prototype['addOnFeatures'] = undefined;

/**
 * @member {module:model/CertificateDescription} certificate
 */
ClusterPropertiesUpdateParameters.prototype['certificate'] = undefined;

/**
 * @member {module:model/ServerCertificateCommonNames} certificateCommonNames
 */
ClusterPropertiesUpdateParameters.prototype['certificateCommonNames'] = undefined;

/**
 * The list of client certificates referenced by common name that are allowed to manage the cluster. This will overwrite the existing list.
 * @member {Array.<module:model/ClientCertificateCommonName>} clientCertificateCommonNames
 */
ClusterPropertiesUpdateParameters.prototype['clientCertificateCommonNames'] = undefined;

/**
 * The list of client certificates referenced by thumbprint that are allowed to manage the cluster. This will overwrite the existing list.
 * @member {Array.<module:model/ClientCertificateThumbprint>} clientCertificateThumbprints
 */
ClusterPropertiesUpdateParameters.prototype['clientCertificateThumbprints'] = undefined;

/**
 * The Service Fabric runtime version of the cluster. This property can only by set the user when **upgradeMode** is set to 'Manual'. To get list of available Service Fabric versions for new clusters use [ClusterVersion API](./ClusterVersion.md). To get the list of available version for existing clusters use **availableClusterVersions**.
 * @member {String} clusterCodeVersion
 */
ClusterPropertiesUpdateParameters.prototype['clusterCodeVersion'] = undefined;

/**
 * Indicates if the event store service is enabled.
 * @member {Boolean} eventStoreServiceEnabled
 */
ClusterPropertiesUpdateParameters.prototype['eventStoreServiceEnabled'] = undefined;

/**
 * The list of custom fabric settings to configure the cluster. This will overwrite the existing list.
 * @member {Array.<module:model/SettingsSectionDescription>} fabricSettings
 */
ClusterPropertiesUpdateParameters.prototype['fabricSettings'] = undefined;

/**
 * The list of node types in the cluster. This will overwrite the existing list.
 * @member {Array.<module:model/NodeTypeDescription>} nodeTypes
 */
ClusterPropertiesUpdateParameters.prototype['nodeTypes'] = undefined;

/**
 * @member {module:model/ReliabilityLevel} reliabilityLevel
 */
ClusterPropertiesUpdateParameters.prototype['reliabilityLevel'] = undefined;

/**
 * @member {module:model/CertificateDescription} reverseProxyCertificate
 */
ClusterPropertiesUpdateParameters.prototype['reverseProxyCertificate'] = undefined;

/**
 * @member {module:model/ClusterUpgradePolicy} upgradeDescription
 */
ClusterPropertiesUpdateParameters.prototype['upgradeDescription'] = undefined;

/**
 * @member {module:model/UpgradeMode} upgradeMode
 */
ClusterPropertiesUpdateParameters.prototype['upgradeMode'] = undefined;






export default ClusterPropertiesUpdateParameters;

