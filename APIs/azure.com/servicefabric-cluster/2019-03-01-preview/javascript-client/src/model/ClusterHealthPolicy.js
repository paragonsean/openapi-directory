/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationHealthPolicy from './ApplicationHealthPolicy';

/**
 * The ClusterHealthPolicy model module.
 * @module model/ClusterHealthPolicy
 * @version 2019-03-01-preview
 */
class ClusterHealthPolicy {
    /**
     * Constructs a new <code>ClusterHealthPolicy</code>.
     * Defines a health policy used to evaluate the health of the cluster or of a cluster node. 
     * @alias module:model/ClusterHealthPolicy
     */
    constructor() { 
        
        ClusterHealthPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterHealthPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterHealthPolicy} obj Optional instance to populate.
     * @return {module:model/ClusterHealthPolicy} The populated <code>ClusterHealthPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterHealthPolicy();

            if (data.hasOwnProperty('applicationHealthPolicies')) {
                obj['applicationHealthPolicies'] = ApiClient.convertToType(data['applicationHealthPolicies'], {'String': ApplicationHealthPolicy});
            }
            if (data.hasOwnProperty('maxPercentUnhealthyApplications')) {
                obj['maxPercentUnhealthyApplications'] = ApiClient.convertToType(data['maxPercentUnhealthyApplications'], 'Number');
            }
            if (data.hasOwnProperty('maxPercentUnhealthyNodes')) {
                obj['maxPercentUnhealthyNodes'] = ApiClient.convertToType(data['maxPercentUnhealthyNodes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterHealthPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterHealthPolicy</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Defines a map that contains specific application health policies for different applications. Each entry specifies as key the application name and as value an ApplicationHealthPolicy used to evaluate the application health. The application name should include the 'fabric:' URI scheme. The map is empty by default. 
 * @member {Object.<String, module:model/ApplicationHealthPolicy>} applicationHealthPolicies
 */
ClusterHealthPolicy.prototype['applicationHealthPolicies'] = undefined;

/**
 * The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of applications that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application, the health is evaluated as Warning. This is calculated by dividing the number of unhealthy applications over the total number of application instances in the cluster, excluding applications of application types that are included in the ApplicationTypeHealthPolicyMap. The computation rounds up to tolerate one failure on small numbers of applications. Default percentage is zero. 
 * @member {Number} maxPercentUnhealthyApplications
 */
ClusterHealthPolicy.prototype['maxPercentUnhealthyApplications'] = undefined;

/**
 * The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10.  The percentage represents the maximum tolerated percentage of nodes that can be unhealthy before the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node, the health is evaluated as Warning. The percentage is calculated by dividing the number of unhealthy nodes over the total number of nodes in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero.  In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that. 
 * @member {Number} maxPercentUnhealthyNodes
 */
ClusterHealthPolicy.prototype['maxPercentUnhealthyNodes'] = undefined;






export default ClusterHealthPolicy;

