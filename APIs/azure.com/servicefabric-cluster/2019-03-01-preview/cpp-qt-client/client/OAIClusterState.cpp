/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterState::OAIClusterState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterState::OAIClusterState() {
    this->initializeModel();
}

OAIClusterState::~OAIClusterState() {}

void OAIClusterState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIClusterState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIClusterState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("WaitingForNodes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::WAITINGFORNODES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deploying", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::DEPLOYING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BaselineUpgrade", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::BASELINEUPGRADE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdatingUserConfiguration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::UPDATINGUSERCONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdatingUserCertificate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::UPDATINGUSERCERTIFICATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdatingInfrastructure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::UPDATINGINFRASTRUCTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnforcingClusterVersion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::ENFORCINGCLUSTERVERSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpgradeServiceUnreachable", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::UPGRADESERVICEUNREACHABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AutoScale", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::AUTOSCALE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::READY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIClusterState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIClusterState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIClusterState::WAITINGFORNODES:
            val = "WaitingForNodes";
            break;
        case eOAIClusterState::DEPLOYING:
            val = "Deploying";
            break;
        case eOAIClusterState::BASELINEUPGRADE:
            val = "BaselineUpgrade";
            break;
        case eOAIClusterState::UPDATINGUSERCONFIGURATION:
            val = "UpdatingUserConfiguration";
            break;
        case eOAIClusterState::UPDATINGUSERCERTIFICATE:
            val = "UpdatingUserCertificate";
            break;
        case eOAIClusterState::UPDATINGINFRASTRUCTURE:
            val = "UpdatingInfrastructure";
            break;
        case eOAIClusterState::ENFORCINGCLUSTERVERSION:
            val = "EnforcingClusterVersion";
            break;
        case eOAIClusterState::UPGRADESERVICEUNREACHABLE:
            val = "UpgradeServiceUnreachable";
            break;
        case eOAIClusterState::AUTOSCALE:
            val = "AutoScale";
            break;
        case eOAIClusterState::READY:
            val = "Ready";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIClusterState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIClusterState::eOAIClusterState OAIClusterState::getValue() const {
    return m_value;
}

void OAIClusterState::setValue(const OAIClusterState::eOAIClusterState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIClusterState::isSet() const {
    
    return m_value_isSet;
}

bool OAIClusterState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
