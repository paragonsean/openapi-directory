/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClusterHealthPolicy;
import org.openapitools.client.model.ClusterUpgradeDeltaHealthPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the policy used when upgrading the cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:03:56.637978-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterUpgradePolicy {
  public static final String SERIALIZED_NAME_DELTA_HEALTH_POLICY = "deltaHealthPolicy";
  @SerializedName(SERIALIZED_NAME_DELTA_HEALTH_POLICY)
  private ClusterUpgradeDeltaHealthPolicy deltaHealthPolicy;

  public static final String SERIALIZED_NAME_FORCE_RESTART = "forceRestart";
  @SerializedName(SERIALIZED_NAME_FORCE_RESTART)
  private Boolean forceRestart;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT = "healthCheckRetryTimeout";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT)
  private String healthCheckRetryTimeout;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION = "healthCheckStableDuration";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION)
  private String healthCheckStableDuration;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION = "healthCheckWaitDuration";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION)
  private String healthCheckWaitDuration;

  public static final String SERIALIZED_NAME_HEALTH_POLICY = "healthPolicy";
  @SerializedName(SERIALIZED_NAME_HEALTH_POLICY)
  private ClusterHealthPolicy healthPolicy;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT = "upgradeDomainTimeout";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT)
  private String upgradeDomainTimeout;

  public static final String SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT = "upgradeReplicaSetCheckTimeout";
  @SerializedName(SERIALIZED_NAME_UPGRADE_REPLICA_SET_CHECK_TIMEOUT)
  private String upgradeReplicaSetCheckTimeout;

  public static final String SERIALIZED_NAME_UPGRADE_TIMEOUT = "upgradeTimeout";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TIMEOUT)
  private String upgradeTimeout;

  public ClusterUpgradePolicy() {
  }

  public ClusterUpgradePolicy deltaHealthPolicy(ClusterUpgradeDeltaHealthPolicy deltaHealthPolicy) {
    this.deltaHealthPolicy = deltaHealthPolicy;
    return this;
  }

  /**
   * Get deltaHealthPolicy
   * @return deltaHealthPolicy
   */
  @javax.annotation.Nullable
  public ClusterUpgradeDeltaHealthPolicy getDeltaHealthPolicy() {
    return deltaHealthPolicy;
  }

  public void setDeltaHealthPolicy(ClusterUpgradeDeltaHealthPolicy deltaHealthPolicy) {
    this.deltaHealthPolicy = deltaHealthPolicy;
  }


  public ClusterUpgradePolicy forceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
    return this;
  }

  /**
   * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
   * @return forceRestart
   */
  @javax.annotation.Nullable
  public Boolean getForceRestart() {
    return forceRestart;
  }

  public void setForceRestart(Boolean forceRestart) {
    this.forceRestart = forceRestart;
  }


  public ClusterUpgradePolicy healthCheckRetryTimeout(String healthCheckRetryTimeout) {
    this.healthCheckRetryTimeout = healthCheckRetryTimeout;
    return this;
  }

  /**
   * The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @return healthCheckRetryTimeout
   */
  @javax.annotation.Nonnull
  public String getHealthCheckRetryTimeout() {
    return healthCheckRetryTimeout;
  }

  public void setHealthCheckRetryTimeout(String healthCheckRetryTimeout) {
    this.healthCheckRetryTimeout = healthCheckRetryTimeout;
  }


  public ClusterUpgradePolicy healthCheckStableDuration(String healthCheckStableDuration) {
    this.healthCheckStableDuration = healthCheckStableDuration;
    return this;
  }

  /**
   * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @return healthCheckStableDuration
   */
  @javax.annotation.Nonnull
  public String getHealthCheckStableDuration() {
    return healthCheckStableDuration;
  }

  public void setHealthCheckStableDuration(String healthCheckStableDuration) {
    this.healthCheckStableDuration = healthCheckStableDuration;
  }


  public ClusterUpgradePolicy healthCheckWaitDuration(String healthCheckWaitDuration) {
    this.healthCheckWaitDuration = healthCheckWaitDuration;
    return this;
  }

  /**
   * The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @return healthCheckWaitDuration
   */
  @javax.annotation.Nonnull
  public String getHealthCheckWaitDuration() {
    return healthCheckWaitDuration;
  }

  public void setHealthCheckWaitDuration(String healthCheckWaitDuration) {
    this.healthCheckWaitDuration = healthCheckWaitDuration;
  }


  public ClusterUpgradePolicy healthPolicy(ClusterHealthPolicy healthPolicy) {
    this.healthPolicy = healthPolicy;
    return this;
  }

  /**
   * Get healthPolicy
   * @return healthPolicy
   */
  @javax.annotation.Nonnull
  public ClusterHealthPolicy getHealthPolicy() {
    return healthPolicy;
  }

  public void setHealthPolicy(ClusterHealthPolicy healthPolicy) {
    this.healthPolicy = healthPolicy;
  }


  public ClusterUpgradePolicy upgradeDomainTimeout(String upgradeDomainTimeout) {
    this.upgradeDomainTimeout = upgradeDomainTimeout;
    return this;
  }

  /**
   * The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @return upgradeDomainTimeout
   */
  @javax.annotation.Nonnull
  public String getUpgradeDomainTimeout() {
    return upgradeDomainTimeout;
  }

  public void setUpgradeDomainTimeout(String upgradeDomainTimeout) {
    this.upgradeDomainTimeout = upgradeDomainTimeout;
  }


  public ClusterUpgradePolicy upgradeReplicaSetCheckTimeout(String upgradeReplicaSetCheckTimeout) {
    this.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
    return this;
  }

  /**
   * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @return upgradeReplicaSetCheckTimeout
   */
  @javax.annotation.Nonnull
  public String getUpgradeReplicaSetCheckTimeout() {
    return upgradeReplicaSetCheckTimeout;
  }

  public void setUpgradeReplicaSetCheckTimeout(String upgradeReplicaSetCheckTimeout) {
    this.upgradeReplicaSetCheckTimeout = upgradeReplicaSetCheckTimeout;
  }


  public ClusterUpgradePolicy upgradeTimeout(String upgradeTimeout) {
    this.upgradeTimeout = upgradeTimeout;
    return this;
  }

  /**
   * The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
   * @return upgradeTimeout
   */
  @javax.annotation.Nonnull
  public String getUpgradeTimeout() {
    return upgradeTimeout;
  }

  public void setUpgradeTimeout(String upgradeTimeout) {
    this.upgradeTimeout = upgradeTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterUpgradePolicy clusterUpgradePolicy = (ClusterUpgradePolicy) o;
    return Objects.equals(this.deltaHealthPolicy, clusterUpgradePolicy.deltaHealthPolicy) &&
        Objects.equals(this.forceRestart, clusterUpgradePolicy.forceRestart) &&
        Objects.equals(this.healthCheckRetryTimeout, clusterUpgradePolicy.healthCheckRetryTimeout) &&
        Objects.equals(this.healthCheckStableDuration, clusterUpgradePolicy.healthCheckStableDuration) &&
        Objects.equals(this.healthCheckWaitDuration, clusterUpgradePolicy.healthCheckWaitDuration) &&
        Objects.equals(this.healthPolicy, clusterUpgradePolicy.healthPolicy) &&
        Objects.equals(this.upgradeDomainTimeout, clusterUpgradePolicy.upgradeDomainTimeout) &&
        Objects.equals(this.upgradeReplicaSetCheckTimeout, clusterUpgradePolicy.upgradeReplicaSetCheckTimeout) &&
        Objects.equals(this.upgradeTimeout, clusterUpgradePolicy.upgradeTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deltaHealthPolicy, forceRestart, healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, healthPolicy, upgradeDomainTimeout, upgradeReplicaSetCheckTimeout, upgradeTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterUpgradePolicy {\n");
    sb.append("    deltaHealthPolicy: ").append(toIndentedString(deltaHealthPolicy)).append("\n");
    sb.append("    forceRestart: ").append(toIndentedString(forceRestart)).append("\n");
    sb.append("    healthCheckRetryTimeout: ").append(toIndentedString(healthCheckRetryTimeout)).append("\n");
    sb.append("    healthCheckStableDuration: ").append(toIndentedString(healthCheckStableDuration)).append("\n");
    sb.append("    healthCheckWaitDuration: ").append(toIndentedString(healthCheckWaitDuration)).append("\n");
    sb.append("    healthPolicy: ").append(toIndentedString(healthPolicy)).append("\n");
    sb.append("    upgradeDomainTimeout: ").append(toIndentedString(upgradeDomainTimeout)).append("\n");
    sb.append("    upgradeReplicaSetCheckTimeout: ").append(toIndentedString(upgradeReplicaSetCheckTimeout)).append("\n");
    sb.append("    upgradeTimeout: ").append(toIndentedString(upgradeTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deltaHealthPolicy");
    openapiFields.add("forceRestart");
    openapiFields.add("healthCheckRetryTimeout");
    openapiFields.add("healthCheckStableDuration");
    openapiFields.add("healthCheckWaitDuration");
    openapiFields.add("healthPolicy");
    openapiFields.add("upgradeDomainTimeout");
    openapiFields.add("upgradeReplicaSetCheckTimeout");
    openapiFields.add("upgradeTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("healthCheckRetryTimeout");
    openapiRequiredFields.add("healthCheckStableDuration");
    openapiRequiredFields.add("healthCheckWaitDuration");
    openapiRequiredFields.add("healthPolicy");
    openapiRequiredFields.add("upgradeDomainTimeout");
    openapiRequiredFields.add("upgradeReplicaSetCheckTimeout");
    openapiRequiredFields.add("upgradeTimeout");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterUpgradePolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterUpgradePolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterUpgradePolicy is not found in the empty JSON string", ClusterUpgradePolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterUpgradePolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterUpgradePolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClusterUpgradePolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deltaHealthPolicy`
      if (jsonObj.get("deltaHealthPolicy") != null && !jsonObj.get("deltaHealthPolicy").isJsonNull()) {
        ClusterUpgradeDeltaHealthPolicy.validateJsonElement(jsonObj.get("deltaHealthPolicy"));
      }
      if (!jsonObj.get("healthCheckRetryTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckRetryTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckRetryTimeout").toString()));
      }
      if (!jsonObj.get("healthCheckStableDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckStableDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckStableDuration").toString()));
      }
      if (!jsonObj.get("healthCheckWaitDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckWaitDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckWaitDuration").toString()));
      }
      // validate the required field `healthPolicy`
      ClusterHealthPolicy.validateJsonElement(jsonObj.get("healthPolicy"));
      if (!jsonObj.get("upgradeDomainTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeDomainTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeDomainTimeout").toString()));
      }
      if (!jsonObj.get("upgradeReplicaSetCheckTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeReplicaSetCheckTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeReplicaSetCheckTimeout").toString()));
      }
      if (!jsonObj.get("upgradeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeTimeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterUpgradePolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterUpgradePolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterUpgradePolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterUpgradePolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterUpgradePolicy>() {
           @Override
           public void write(JsonWriter out, ClusterUpgradePolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterUpgradePolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterUpgradePolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterUpgradePolicy
   * @throws IOException if the JSON string is invalid with respect to ClusterUpgradePolicy
   */
  public static ClusterUpgradePolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterUpgradePolicy.class);
  }

  /**
   * Convert an instance of ClusterUpgradePolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

