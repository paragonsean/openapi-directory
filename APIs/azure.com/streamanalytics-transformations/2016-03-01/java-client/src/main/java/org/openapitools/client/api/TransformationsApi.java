/*
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Transformation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransformationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransformationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransformationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transformationsCreateOrReplace
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation The definition of the transformation that will be used to create a new transformation or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new transformation to be created, but to prevent updating an existing transformation. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transformationsCreateOrReplaceCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transformation;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "transformationName" + "}", localVarApiClient.escapeString(transformationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformationsCreateOrReplaceValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformationsCreateOrReplace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformationsCreateOrReplace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformationsCreateOrReplace(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling transformationsCreateOrReplace(Async)");
        }

        // verify the required parameter 'transformationName' is set
        if (transformationName == null) {
            throw new ApiException("Missing the required parameter 'transformationName' when calling transformationsCreateOrReplace(Async)");
        }

        // verify the required parameter 'transformation' is set
        if (transformation == null) {
            throw new ApiException("Missing the required parameter 'transformation' when calling transformationsCreateOrReplace(Async)");
        }

        return transformationsCreateOrReplaceCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * Creates a transformation or replaces an already existing transformation under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation The definition of the transformation that will be used to create a new transformation or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new transformation to be created, but to prevent updating an existing transformation. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @return Transformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Transformation transformationsCreateOrReplace(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<Transformation> localVarResp = transformationsCreateOrReplaceWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a transformation or replaces an already existing transformation under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation The definition of the transformation that will be used to create a new transformation or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new transformation to be created, but to prevent updating an existing transformation. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @return ApiResponse&lt;Transformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transformation> transformationsCreateOrReplaceWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = transformationsCreateOrReplaceValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<Transformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a transformation or replaces an already existing transformation under an existing streaming job.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation The definition of the transformation that will be used to create a new transformation or replace the existing one under the streaming job. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new transformation to be created, but to prevent updating an existing transformation. Other values will result in a 412 Pre-condition Failed response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
        <tr><td> 201 </td><td> The transformation was successfully created or replaced. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transformationsCreateOrReplaceAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, String ifNoneMatch, final ApiCallback<Transformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformationsCreateOrReplaceValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<Transformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformationsGet
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified transformation. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transformationsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "transformationName" + "}", localVarApiClient.escapeString(transformationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformationsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformationsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformationsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformationsGet(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling transformationsGet(Async)");
        }

        // verify the required parameter 'transformationName' is set
        if (transformationName == null) {
            throw new ApiException("Missing the required parameter 'transformationName' when calling transformationsGet(Async)");
        }

        return transformationsGetCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, _callback);

    }

    /**
     * 
     * Gets details about the specified transformation.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @return Transformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified transformation. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Transformation transformationsGet(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName) throws ApiException {
        ApiResponse<Transformation> localVarResp = transformationsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details about the specified transformation.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @return ApiResponse&lt;Transformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified transformation. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transformation> transformationsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName) throws ApiException {
        okhttp3.Call localVarCall = transformationsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, null);
        Type localVarReturnType = new TypeToken<Transformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details about the specified transformation.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved the specified transformation. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transformationsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, final ApiCallback<Transformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformationsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, _callback);
        Type localVarReturnType = new TypeToken<Transformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transformationsUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation A Transformation object. The properties specified here will overwrite the corresponding properties in the existing transformation (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing transformation will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully updated. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transformationsUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transformation;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "transformationName" + "}", localVarApiClient.escapeString(transformationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transformationsUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling transformationsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling transformationsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling transformationsUpdate(Async)");
        }

        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling transformationsUpdate(Async)");
        }

        // verify the required parameter 'transformationName' is set
        if (transformationName == null) {
            throw new ApiException("Missing the required parameter 'transformationName' when calling transformationsUpdate(Async)");
        }

        // verify the required parameter 'transformation' is set
        if (transformation == null) {
            throw new ApiException("Missing the required parameter 'transformation' when calling transformationsUpdate(Async)");
        }

        return transformationsUpdateCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch, _callback);

    }

    /**
     * 
     * Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation A Transformation object. The properties specified here will overwrite the corresponding properties in the existing transformation (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing transformation will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @return Transformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully updated. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public Transformation transformationsUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch) throws ApiException {
        ApiResponse<Transformation> localVarResp = transformationsUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation A Transformation object. The properties specified here will overwrite the corresponding properties in the existing transformation (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing transformation will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @return ApiResponse&lt;Transformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully updated. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public ApiResponse<Transformation> transformationsUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = transformationsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch, null);
        Type localVarReturnType = new TypeToken<Transformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal. (required)
     * @param jobName The name of the streaming job. (required)
     * @param transformationName The name of the transformation. (required)
     * @param transformation A Transformation object. The properties specified here will overwrite the corresponding properties in the existing transformation (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing transformation will remain the same and not change as a result of this PATCH operation. (required)
     * @param ifMatch The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transformation was successfully updated. </td><td>  * ETag - The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call transformationsUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String jobName, String transformationName, Transformation transformation, String ifMatch, final ApiCallback<Transformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = transformationsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<Transformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
