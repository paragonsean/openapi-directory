/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Transformation from '../model/Transformation';

/**
* Transformations service.
* @module api/TransformationsApi
* @version 2016-03-01
*/
export default class TransformationsApi {

    /**
    * Constructs a new TransformationsApi. 
    * @alias module:api/TransformationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the transformationsCreateOrReplace operation.
     * @callback module:api/TransformationsApi~transformationsCreateOrReplaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a transformation or replaces an already existing transformation under an existing streaming job.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} transformationName The name of the transformation.
     * @param {module:model/Transformation} transformation The definition of the transformation that will be used to create a new transformation or replace the existing one under the streaming job.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param {String} [ifNoneMatch] Set to '*' to allow a new transformation to be created, but to prevent updating an existing transformation. Other values will result in a 412 Pre-condition Failed response.
     * @param {module:api/TransformationsApi~transformationsCreateOrReplaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transformation}
     */
    transformationsCreateOrReplace(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, opts, callback) {
      opts = opts || {};
      let postBody = transformation;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transformationsCreateOrReplace");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transformationsCreateOrReplace");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transformationsCreateOrReplace");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling transformationsCreateOrReplace");
      }
      // verify the required parameter 'transformationName' is set
      if (transformationName === undefined || transformationName === null) {
        throw new Error("Missing the required parameter 'transformationName' when calling transformationsCreateOrReplace");
      }
      // verify the required parameter 'transformation' is set
      if (transformation === undefined || transformation === null) {
        throw new Error("Missing the required parameter 'transformation' when calling transformationsCreateOrReplace");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'transformationName': transformationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transformation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformationsGet operation.
     * @callback module:api/TransformationsApi~transformationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about the specified transformation.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} transformationName The name of the transformation.
     * @param {module:api/TransformationsApi~transformationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transformation}
     */
    transformationsGet(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transformationsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transformationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transformationsGet");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling transformationsGet");
      }
      // verify the required parameter 'transformationName' is set
      if (transformationName === undefined || transformationName === null) {
        throw new Error("Missing the required parameter 'transformationName' when calling transformationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'transformationName': transformationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Transformation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transformationsUpdate operation.
     * @callback module:api/TransformationsApi~transformationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Transformation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing transformation under an existing streaming job. This can be used to partially update (ie. update one or two properties) a transformation without affecting the rest the job or transformation definition.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId GUID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} jobName The name of the streaming job.
     * @param {String} transformationName The name of the transformation.
     * @param {module:model/Transformation} transformation A Transformation object. The properties specified here will overwrite the corresponding properties in the existing transformation (ie. Those properties will be updated). Any properties that are set to null here will mean that the corresponding property in the existing transformation will remain the same and not change as a result of this PATCH operation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The ETag of the transformation. Omit this value to always overwrite the current transformation. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.
     * @param {module:api/TransformationsApi~transformationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Transformation}
     */
    transformationsUpdate(apiVersion, subscriptionId, resourceGroupName, jobName, transformationName, transformation, opts, callback) {
      opts = opts || {};
      let postBody = transformation;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling transformationsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling transformationsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling transformationsUpdate");
      }
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling transformationsUpdate");
      }
      // verify the required parameter 'transformationName' is set
      if (transformationName === undefined || transformationName === null) {
        throw new Error("Missing the required parameter 'transformationName' when calling transformationsUpdate");
      }
      // verify the required parameter 'transformation' is set
      if (transformation === undefined || transformation === null) {
        throw new Error("Missing the required parameter 'transformation' when calling transformationsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'jobName': jobName,
        'transformationName': transformationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Transformation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/transformations/{transformationName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
