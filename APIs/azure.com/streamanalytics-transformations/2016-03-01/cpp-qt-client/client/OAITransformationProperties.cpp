/**
 * StreamAnalyticsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransformationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransformationProperties::OAITransformationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransformationProperties::OAITransformationProperties() {
    this->initializeModel();
}

OAITransformationProperties::~OAITransformationProperties() {}

void OAITransformationProperties::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_streaming_units_isSet = false;
    m_streaming_units_isValid = false;
}

void OAITransformationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransformationProperties::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_streaming_units_isValid = ::OpenAPI::fromJsonValue(m_streaming_units, json[QString("streamingUnits")]);
    m_streaming_units_isSet = !json[QString("streamingUnits")].isNull() && m_streaming_units_isValid;
}

QString OAITransformationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransformationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_streaming_units_isSet) {
        obj.insert(QString("streamingUnits"), ::OpenAPI::toJsonValue(m_streaming_units));
    }
    return obj;
}

QString OAITransformationProperties::getEtag() const {
    return m_etag;
}
void OAITransformationProperties::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAITransformationProperties::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAITransformationProperties::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAITransformationProperties::getQuery() const {
    return m_query;
}
void OAITransformationProperties::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITransformationProperties::is_query_Set() const{
    return m_query_isSet;
}

bool OAITransformationProperties::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAITransformationProperties::getStreamingUnits() const {
    return m_streaming_units;
}
void OAITransformationProperties::setStreamingUnits(const qint32 &streaming_units) {
    m_streaming_units = streaming_units;
    m_streaming_units_isSet = true;
}

bool OAITransformationProperties::is_streaming_units_Set() const{
    return m_streaming_units_isSet;
}

bool OAITransformationProperties::is_streaming_units_Valid() const{
    return m_streaming_units_isValid;
}

bool OAITransformationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_streaming_units_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransformationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
