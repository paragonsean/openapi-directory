# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransformationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, query: str=None, streaming_units: int=None):
        """TransformationProperties - a model defined in OpenAPI

        :param etag: The etag of this TransformationProperties.
        :param query: The query of this TransformationProperties.
        :param streaming_units: The streaming_units of this TransformationProperties.
        """
        self.openapi_types = {
            'etag': str,
            'query': str,
            'streaming_units': int
        }

        self.attribute_map = {
            'etag': 'etag',
            'query': 'query',
            'streaming_units': 'streamingUnits'
        }

        self._etag = etag
        self._query = query
        self._streaming_units = streaming_units

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformationProperties of this TransformationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this TransformationProperties.

        The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.

        :return: The etag of this TransformationProperties.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TransformationProperties.

        The current entity tag for the transformation. This is an opaque string. You can use it to detect whether the resource has changed between requests. You can also use it in the If-Match or If-None-Match headers for write operations for optimistic concurrency.

        :param etag: The etag of this TransformationProperties.
        :type etag: str
        """

        self._etag = etag

    @property
    def query(self):
        """Gets the query of this TransformationProperties.

        Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.

        :return: The query of this TransformationProperties.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this TransformationProperties.

        Specifies the query that will be run in the streaming job. You can learn more about the Stream Analytics Query Language (SAQL) here: https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT (CreateOrReplace) requests.

        :param query: The query of this TransformationProperties.
        :type query: str
        """

        self._query = query

    @property
    def streaming_units(self):
        """Gets the streaming_units of this TransformationProperties.

        Specifies the number of streaming units that the streaming job uses.

        :return: The streaming_units of this TransformationProperties.
        :rtype: int
        """
        return self._streaming_units

    @streaming_units.setter
    def streaming_units(self, streaming_units):
        """Sets the streaming_units of this TransformationProperties.

        Specifies the number of streaming units that the streaming job uses.

        :param streaming_units: The streaming_units of this TransformationProperties.
        :type streaming_units: int
        """

        self._streaming_units = streaming_units
