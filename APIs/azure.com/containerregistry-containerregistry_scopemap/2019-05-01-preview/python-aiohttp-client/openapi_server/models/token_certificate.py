# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TokenCertificate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoded_pem_certificate: str=None, expiry: datetime=None, name: str=None, thumbprint: str=None):
        """TokenCertificate - a model defined in OpenAPI

        :param encoded_pem_certificate: The encoded_pem_certificate of this TokenCertificate.
        :param expiry: The expiry of this TokenCertificate.
        :param name: The name of this TokenCertificate.
        :param thumbprint: The thumbprint of this TokenCertificate.
        """
        self.openapi_types = {
            'encoded_pem_certificate': str,
            'expiry': datetime,
            'name': str,
            'thumbprint': str
        }

        self.attribute_map = {
            'encoded_pem_certificate': 'encodedPemCertificate',
            'expiry': 'expiry',
            'name': 'name',
            'thumbprint': 'thumbprint'
        }

        self._encoded_pem_certificate = encoded_pem_certificate
        self._expiry = expiry
        self._name = name
        self._thumbprint = thumbprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenCertificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenCertificate of this TokenCertificate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded_pem_certificate(self):
        """Gets the encoded_pem_certificate of this TokenCertificate.

        Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.

        :return: The encoded_pem_certificate of this TokenCertificate.
        :rtype: str
        """
        return self._encoded_pem_certificate

    @encoded_pem_certificate.setter
    def encoded_pem_certificate(self, encoded_pem_certificate):
        """Sets the encoded_pem_certificate of this TokenCertificate.

        Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token.

        :param encoded_pem_certificate: The encoded_pem_certificate of this TokenCertificate.
        :type encoded_pem_certificate: str
        """

        self._encoded_pem_certificate = encoded_pem_certificate

    @property
    def expiry(self):
        """Gets the expiry of this TokenCertificate.

        The expiry datetime of the certificate.

        :return: The expiry of this TokenCertificate.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this TokenCertificate.

        The expiry datetime of the certificate.

        :param expiry: The expiry of this TokenCertificate.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def name(self):
        """Gets the name of this TokenCertificate.


        :return: The name of this TokenCertificate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TokenCertificate.


        :param name: The name of this TokenCertificate.
        :type name: str
        """
        allowed_values = ["certificate1", "certificate2"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def thumbprint(self):
        """Gets the thumbprint of this TokenCertificate.

        The thumbprint of the certificate.

        :return: The thumbprint of this TokenCertificate.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this TokenCertificate.

        The thumbprint of the certificate.

        :param thumbprint: The thumbprint of this TokenCertificate.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint
