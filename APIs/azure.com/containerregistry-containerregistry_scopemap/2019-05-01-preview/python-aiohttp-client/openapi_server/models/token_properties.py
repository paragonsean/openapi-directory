# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.token_credentials_properties import TokenCredentialsProperties
from openapi_server import util


class TokenProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, credentials: TokenCredentialsProperties=None, object_id: str=None, provisioning_state: str=None, scope_map_id: str=None, status: str=None):
        """TokenProperties - a model defined in OpenAPI

        :param creation_date: The creation_date of this TokenProperties.
        :param credentials: The credentials of this TokenProperties.
        :param object_id: The object_id of this TokenProperties.
        :param provisioning_state: The provisioning_state of this TokenProperties.
        :param scope_map_id: The scope_map_id of this TokenProperties.
        :param status: The status of this TokenProperties.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'credentials': TokenCredentialsProperties,
            'object_id': str,
            'provisioning_state': str,
            'scope_map_id': str,
            'status': str
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'credentials': 'credentials',
            'object_id': 'objectId',
            'provisioning_state': 'provisioningState',
            'scope_map_id': 'scopeMapId',
            'status': 'status'
        }

        self._creation_date = creation_date
        self._credentials = credentials
        self._object_id = object_id
        self._provisioning_state = provisioning_state
        self._scope_map_id = scope_map_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenProperties of this TokenProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this TokenProperties.

        The creation date of scope map.

        :return: The creation_date of this TokenProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TokenProperties.

        The creation date of scope map.

        :param creation_date: The creation_date of this TokenProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def credentials(self):
        """Gets the credentials of this TokenProperties.


        :return: The credentials of this TokenProperties.
        :rtype: TokenCredentialsProperties
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this TokenProperties.


        :param credentials: The credentials of this TokenProperties.
        :type credentials: TokenCredentialsProperties
        """

        self._credentials = credentials

    @property
    def object_id(self):
        """Gets the object_id of this TokenProperties.

        The user/group/application object ID for which the token has to be created.

        :return: The object_id of this TokenProperties.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this TokenProperties.

        The user/group/application object ID for which the token has to be created.

        :param object_id: The object_id of this TokenProperties.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this TokenProperties.

        Provisioning state of the resource.

        :return: The provisioning_state of this TokenProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this TokenProperties.

        Provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this TokenProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def scope_map_id(self):
        """Gets the scope_map_id of this TokenProperties.

        The resource ID of the scope map to which the token will be associated with.

        :return: The scope_map_id of this TokenProperties.
        :rtype: str
        """
        return self._scope_map_id

    @scope_map_id.setter
    def scope_map_id(self, scope_map_id):
        """Sets the scope_map_id of this TokenProperties.

        The resource ID of the scope map to which the token will be associated with.

        :param scope_map_id: The scope_map_id of this TokenProperties.
        :type scope_map_id: str
        """

        self._scope_map_id = scope_map_id

    @property
    def status(self):
        """Gets the status of this TokenProperties.

        The status of the token example enabled or disabled.

        :return: The status of this TokenProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TokenProperties.

        The status of the token example enabled or disabled.

        :param status: The status of this TokenProperties.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
