# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.token_certificate import TokenCertificate
from openapi_server.models.token_password import TokenPassword
from openapi_server import util


class TokenCredentialsProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificates: List[TokenCertificate]=None, passwords: List[TokenPassword]=None):
        """TokenCredentialsProperties - a model defined in OpenAPI

        :param certificates: The certificates of this TokenCredentialsProperties.
        :param passwords: The passwords of this TokenCredentialsProperties.
        """
        self.openapi_types = {
            'certificates': List[TokenCertificate],
            'passwords': List[TokenPassword]
        }

        self.attribute_map = {
            'certificates': 'certificates',
            'passwords': 'passwords'
        }

        self._certificates = certificates
        self._passwords = passwords

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenCredentialsProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenCredentialsProperties of this TokenCredentialsProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificates(self):
        """Gets the certificates of this TokenCredentialsProperties.


        :return: The certificates of this TokenCredentialsProperties.
        :rtype: List[TokenCertificate]
        """
        return self._certificates

    @certificates.setter
    def certificates(self, certificates):
        """Sets the certificates of this TokenCredentialsProperties.


        :param certificates: The certificates of this TokenCredentialsProperties.
        :type certificates: List[TokenCertificate]
        """

        self._certificates = certificates

    @property
    def passwords(self):
        """Gets the passwords of this TokenCredentialsProperties.


        :return: The passwords of this TokenCredentialsProperties.
        :rtype: List[TokenPassword]
        """
        return self._passwords

    @passwords.setter
    def passwords(self, passwords):
        """Sets the passwords of this TokenCredentialsProperties.


        :param passwords: The passwords of this TokenCredentialsProperties.
        :type passwords: List[TokenPassword]
        """

        self._passwords = passwords
