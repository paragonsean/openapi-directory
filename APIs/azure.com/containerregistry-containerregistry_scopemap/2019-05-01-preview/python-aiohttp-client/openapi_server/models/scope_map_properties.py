# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScopeMapProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[str]=None, creation_date: datetime=None, description: str=None, provisioning_state: str=None, type: str=None):
        """ScopeMapProperties - a model defined in OpenAPI

        :param actions: The actions of this ScopeMapProperties.
        :param creation_date: The creation_date of this ScopeMapProperties.
        :param description: The description of this ScopeMapProperties.
        :param provisioning_state: The provisioning_state of this ScopeMapProperties.
        :param type: The type of this ScopeMapProperties.
        """
        self.openapi_types = {
            'actions': List[str],
            'creation_date': datetime,
            'description': str,
            'provisioning_state': str,
            'type': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'creation_date': 'creationDate',
            'description': 'description',
            'provisioning_state': 'provisioningState',
            'type': 'type'
        }

        self._actions = actions
        self._creation_date = creation_date
        self._description = description
        self._provisioning_state = provisioning_state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScopeMapProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScopeMapProperties of this ScopeMapProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this ScopeMapProperties.

        The list of scoped permissions for registry artifacts.  E.g. repositories/repository-name/content/read,  repositories/repository-name/metadata/write

        :return: The actions of this ScopeMapProperties.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ScopeMapProperties.

        The list of scoped permissions for registry artifacts.  E.g. repositories/repository-name/content/read,  repositories/repository-name/metadata/write

        :param actions: The actions of this ScopeMapProperties.
        :type actions: List[str]
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def creation_date(self):
        """Gets the creation_date of this ScopeMapProperties.

        The creation date of scope map.

        :return: The creation_date of this ScopeMapProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ScopeMapProperties.

        The creation date of scope map.

        :param creation_date: The creation_date of this ScopeMapProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this ScopeMapProperties.

        The user friendly description of the scope map.

        :return: The description of this ScopeMapProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScopeMapProperties.

        The user friendly description of the scope map.

        :param description: The description of this ScopeMapProperties.
        :type description: str
        """

        self._description = description

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ScopeMapProperties.

        Provisioning state of the resource.

        :return: The provisioning_state of this ScopeMapProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ScopeMapProperties.

        Provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this ScopeMapProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def type(self):
        """Gets the type of this ScopeMapProperties.

        The type of the scope map. E.g. BuildIn scope map.

        :return: The type of this ScopeMapProperties.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScopeMapProperties.

        The type of the scope map. E.g. BuildIn scope map.

        :param type: The type of this ScopeMapProperties.
        :type type: str
        """

        self._type = type
