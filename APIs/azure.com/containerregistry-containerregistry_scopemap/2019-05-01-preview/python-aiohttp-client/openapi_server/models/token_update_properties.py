# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.token_credentials_properties import TokenCredentialsProperties
from openapi_server import util


class TokenUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: TokenCredentialsProperties=None, scope_map_id: str=None, status: str=None):
        """TokenUpdateProperties - a model defined in OpenAPI

        :param credentials: The credentials of this TokenUpdateProperties.
        :param scope_map_id: The scope_map_id of this TokenUpdateProperties.
        :param status: The status of this TokenUpdateProperties.
        """
        self.openapi_types = {
            'credentials': TokenCredentialsProperties,
            'scope_map_id': str,
            'status': str
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'scope_map_id': 'scopeMapId',
            'status': 'status'
        }

        self._credentials = credentials
        self._scope_map_id = scope_map_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TokenUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TokenUpdateProperties of this TokenUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this TokenUpdateProperties.


        :return: The credentials of this TokenUpdateProperties.
        :rtype: TokenCredentialsProperties
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this TokenUpdateProperties.


        :param credentials: The credentials of this TokenUpdateProperties.
        :type credentials: TokenCredentialsProperties
        """

        self._credentials = credentials

    @property
    def scope_map_id(self):
        """Gets the scope_map_id of this TokenUpdateProperties.

        The resource ID of the scope map to which the token will be associated with.

        :return: The scope_map_id of this TokenUpdateProperties.
        :rtype: str
        """
        return self._scope_map_id

    @scope_map_id.setter
    def scope_map_id(self, scope_map_id):
        """Sets the scope_map_id of this TokenUpdateProperties.

        The resource ID of the scope map to which the token will be associated with.

        :param scope_map_id: The scope_map_id of this TokenUpdateProperties.
        :type scope_map_id: str
        """

        self._scope_map_id = scope_map_id

    @property
    def status(self):
        """Gets the status of this TokenUpdateProperties.

        The status of the token example enabled or disabled.

        :return: The status of this TokenUpdateProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TokenUpdateProperties.

        The status of the token example enabled or disabled.

        :param status: The status of this TokenUpdateProperties.
        :type status: str
        """
        allowed_values = ["enabled", "disabled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
