# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateCredentialsParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry: datetime=None, name: str=None, token_id: str=None):
        """GenerateCredentialsParameters - a model defined in OpenAPI

        :param expiry: The expiry of this GenerateCredentialsParameters.
        :param name: The name of this GenerateCredentialsParameters.
        :param token_id: The token_id of this GenerateCredentialsParameters.
        """
        self.openapi_types = {
            'expiry': datetime,
            'name': str,
            'token_id': str
        }

        self.attribute_map = {
            'expiry': 'expiry',
            'name': 'name',
            'token_id': 'tokenId'
        }

        self._expiry = expiry
        self._name = name
        self._token_id = token_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateCredentialsParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateCredentialsParameters of this GenerateCredentialsParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry(self):
        """Gets the expiry of this GenerateCredentialsParameters.

        The expiry date of the generated credentials after which the credentials become invalid.

        :return: The expiry of this GenerateCredentialsParameters.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this GenerateCredentialsParameters.

        The expiry date of the generated credentials after which the credentials become invalid.

        :param expiry: The expiry of this GenerateCredentialsParameters.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def name(self):
        """Gets the name of this GenerateCredentialsParameters.

        Specifies name of the password which should be regenerated if any -- password1 or password2.

        :return: The name of this GenerateCredentialsParameters.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GenerateCredentialsParameters.

        Specifies name of the password which should be regenerated if any -- password1 or password2.

        :param name: The name of this GenerateCredentialsParameters.
        :type name: str
        """
        allowed_values = ["password1", "password2"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def token_id(self):
        """Gets the token_id of this GenerateCredentialsParameters.

        The resource ID of the token for which credentials have to be generated.

        :return: The token_id of this GenerateCredentialsParameters.
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this GenerateCredentialsParameters.

        The resource ID of the token for which credentials have to be generated.

        :param token_id: The token_id of this GenerateCredentialsParameters.
        :type token_id: str
        """

        self._token_id = token_id
