/*
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ScopeMap;
import org.openapitools.client.model.ScopeMapListResult;
import org.openapitools.client.model.ScopeMapUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScopeMapsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScopeMapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScopeMapsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for scopeMapsCreate
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapCreateParameters The parameters for creating a scope map. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsCreateCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMap scopeMapCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeMapCreateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "scopeMapName" + "}", localVarApiClient.escapeString(scopeMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scopeMapsCreateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMap scopeMapCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scopeMapsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scopeMapsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scopeMapsCreate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling scopeMapsCreate(Async)");
        }

        // verify the required parameter 'scopeMapName' is set
        if (scopeMapName == null) {
            throw new ApiException("Missing the required parameter 'scopeMapName' when calling scopeMapsCreate(Async)");
        }

        // verify the required parameter 'scopeMapCreateParameters' is set
        if (scopeMapCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'scopeMapCreateParameters' when calling scopeMapsCreate(Async)");
        }

        return scopeMapsCreateCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapCreateParameters, _callback);

    }

    /**
     * 
     * Creates a scope map for a container registry with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapCreateParameters The parameters for creating a scope map. (required)
     * @return ScopeMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMap scopeMapsCreate(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMap scopeMapCreateParameters) throws ApiException {
        ApiResponse<ScopeMap> localVarResp = scopeMapsCreateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a scope map for a container registry with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapCreateParameters The parameters for creating a scope map. (required)
     * @return ApiResponse&lt;ScopeMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMap> scopeMapsCreateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMap scopeMapCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = scopeMapsCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapCreateParameters, null);
        Type localVarReturnType = new TypeToken<ScopeMap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a scope map for a container registry with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapCreateParameters The parameters for creating a scope map. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsCreateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMap scopeMapCreateParameters, final ApiCallback<ScopeMap> _callback) throws ApiException {

        okhttp3.Call localVarCall = scopeMapsCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<ScopeMap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scopeMapsDelete
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The scopemap does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "scopeMapName" + "}", localVarApiClient.escapeString(scopeMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scopeMapsDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scopeMapsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scopeMapsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scopeMapsDelete(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling scopeMapsDelete(Async)");
        }

        // verify the required parameter 'scopeMapName' is set
        if (scopeMapName == null) {
            throw new ApiException("Missing the required parameter 'scopeMapName' when calling scopeMapsDelete(Async)");
        }

        return scopeMapsDeleteCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, _callback);

    }

    /**
     * 
     * Deletes a scope map from a container registry.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The scopemap does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public void scopeMapsDelete(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName) throws ApiException {
        scopeMapsDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName);
    }

    /**
     * 
     * Deletes a scope map from a container registry.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The scopemap does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> scopeMapsDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName) throws ApiException {
        okhttp3.Call localVarCall = scopeMapsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a scope map from a container registry.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The scopemap does not exist in the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = scopeMapsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for scopeMapsGet
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "scopeMapName" + "}", localVarApiClient.escapeString(scopeMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scopeMapsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scopeMapsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scopeMapsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scopeMapsGet(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling scopeMapsGet(Async)");
        }

        // verify the required parameter 'scopeMapName' is set
        if (scopeMapName == null) {
            throw new ApiException("Missing the required parameter 'scopeMapName' when calling scopeMapsGet(Async)");
        }

        return scopeMapsGetCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, _callback);

    }

    /**
     * 
     * Gets the properties of the specified scope map.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @return ScopeMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMap scopeMapsGet(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName) throws ApiException {
        ApiResponse<ScopeMap> localVarResp = scopeMapsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the properties of the specified scope map.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @return ApiResponse&lt;ScopeMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMap> scopeMapsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName) throws ApiException {
        okhttp3.Call localVarCall = scopeMapsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, null);
        Type localVarReturnType = new TypeToken<ScopeMap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the properties of the specified scope map.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, final ApiCallback<ScopeMap> _callback) throws ApiException {

        okhttp3.Call localVarCall = scopeMapsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, _callback);
        Type localVarReturnType = new TypeToken<ScopeMap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scopeMapsList
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsListCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scopeMapsListValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scopeMapsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scopeMapsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scopeMapsList(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling scopeMapsList(Async)");
        }

        return scopeMapsListCall(apiVersion, subscriptionId, resourceGroupName, registryName, _callback);

    }

    /**
     * 
     * Lists all the scope maps for the specified container registry.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @return ScopeMapListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMapListResult scopeMapsList(String apiVersion, String subscriptionId, String resourceGroupName, String registryName) throws ApiException {
        ApiResponse<ScopeMapListResult> localVarResp = scopeMapsListWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, registryName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the scope maps for the specified container registry.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @return ApiResponse&lt;ScopeMapListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMapListResult> scopeMapsListWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String registryName) throws ApiException {
        okhttp3.Call localVarCall = scopeMapsListValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, null);
        Type localVarReturnType = new TypeToken<ScopeMapListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the scope maps for the specified container registry.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsListAsync(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, final ApiCallback<ScopeMapListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = scopeMapsListValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, _callback);
        Type localVarReturnType = new TypeToken<ScopeMapListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for scopeMapsUpdate
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapUpdateParameters The parameters for updating a scope map. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMapUpdateParameters scopeMapUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = scopeMapUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scopeMaps/{scopeMapName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "registryName" + "}", localVarApiClient.escapeString(registryName.toString()))
            .replace("{" + "scopeMapName" + "}", localVarApiClient.escapeString(scopeMapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call scopeMapsUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMapUpdateParameters scopeMapUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling scopeMapsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling scopeMapsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling scopeMapsUpdate(Async)");
        }

        // verify the required parameter 'registryName' is set
        if (registryName == null) {
            throw new ApiException("Missing the required parameter 'registryName' when calling scopeMapsUpdate(Async)");
        }

        // verify the required parameter 'scopeMapName' is set
        if (scopeMapName == null) {
            throw new ApiException("Missing the required parameter 'scopeMapName' when calling scopeMapsUpdate(Async)");
        }

        // verify the required parameter 'scopeMapUpdateParameters' is set
        if (scopeMapUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'scopeMapUpdateParameters' when calling scopeMapsUpdate(Async)");
        }

        return scopeMapsUpdateCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapUpdateParameters, _callback);

    }

    /**
     * 
     * Updates a scope map with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapUpdateParameters The parameters for updating a scope map. (required)
     * @return ScopeMap
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ScopeMap scopeMapsUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMapUpdateParameters scopeMapUpdateParameters) throws ApiException {
        ApiResponse<ScopeMap> localVarResp = scopeMapsUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a scope map with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapUpdateParameters The parameters for updating a scope map. (required)
     * @return ApiResponse&lt;ScopeMap&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopeMap> scopeMapsUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMapUpdateParameters scopeMapUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = scopeMapsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapUpdateParameters, null);
        Type localVarReturnType = new TypeToken<ScopeMap>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a scope map with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param registryName The name of the container registry. (required)
     * @param scopeMapName The name of the scope map. (required)
     * @param scopeMapUpdateParameters The parameters for updating a scope map. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call scopeMapsUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String registryName, String scopeMapName, ScopeMapUpdateParameters scopeMapUpdateParameters, final ApiCallback<ScopeMap> _callback) throws ApiException {

        okhttp3.Call localVarCall = scopeMapsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, registryName, scopeMapName, scopeMapUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<ScopeMap>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
