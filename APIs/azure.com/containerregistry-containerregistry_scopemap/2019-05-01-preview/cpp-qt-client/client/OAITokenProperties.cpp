/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenProperties::OAITokenProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenProperties::OAITokenProperties() {
    this->initializeModel();
}

OAITokenProperties::~OAITokenProperties() {}

void OAITokenProperties::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_scope_map_id_isSet = false;
    m_scope_map_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITokenProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenProperties::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(m_credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_scope_map_id_isValid = ::OpenAPI::fromJsonValue(m_scope_map_id, json[QString("scopeMapId")]);
    m_scope_map_id_isSet = !json[QString("scopeMapId")].isNull() && m_scope_map_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITokenProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(m_credentials));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_scope_map_id_isSet) {
        obj.insert(QString("scopeMapId"), ::OpenAPI::toJsonValue(m_scope_map_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDateTime OAITokenProperties::getCreationDate() const {
    return m_creation_date;
}
void OAITokenProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITokenProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITokenProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAITokenCredentialsProperties OAITokenProperties::getCredentials() const {
    return m_credentials;
}
void OAITokenProperties::setCredentials(const OAITokenCredentialsProperties &credentials) {
    m_credentials = credentials;
    m_credentials_isSet = true;
}

bool OAITokenProperties::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAITokenProperties::is_credentials_Valid() const{
    return m_credentials_isValid;
}

QString OAITokenProperties::getObjectId() const {
    return m_object_id;
}
void OAITokenProperties::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAITokenProperties::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAITokenProperties::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAITokenProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAITokenProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAITokenProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAITokenProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAITokenProperties::getScopeMapId() const {
    return m_scope_map_id;
}
void OAITokenProperties::setScopeMapId(const QString &scope_map_id) {
    m_scope_map_id = scope_map_id;
    m_scope_map_id_isSet = true;
}

bool OAITokenProperties::is_scope_map_id_Set() const{
    return m_scope_map_id_isSet;
}

bool OAITokenProperties::is_scope_map_id_Valid() const{
    return m_scope_map_id_isValid;
}

QString OAITokenProperties::getStatus() const {
    return m_status;
}
void OAITokenProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITokenProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAITokenProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITokenProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_map_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
