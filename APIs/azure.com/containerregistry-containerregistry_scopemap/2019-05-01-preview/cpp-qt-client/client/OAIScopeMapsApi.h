/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIScopeMapsApi_H
#define OAI_OAIScopeMapsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScopeMap.h"
#include "OAIScopeMapListResult.h"
#include "OAIScopeMapUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIScopeMapsApi : public QObject {
    Q_OBJECT

public:
    OAIScopeMapsApi(const int timeOut = 0);
    ~OAIScopeMapsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  scope_map_name QString [required]
    * @param[in]  scope_map_create_parameters OAIScopeMap [required]
    */
    virtual void scopeMapsCreate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &scope_map_name, const OAIScopeMap &scope_map_create_parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  scope_map_name QString [required]
    */
    virtual void scopeMapsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &scope_map_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  scope_map_name QString [required]
    */
    virtual void scopeMapsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &scope_map_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    */
    virtual void scopeMapsList(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  scope_map_name QString [required]
    * @param[in]  scope_map_update_parameters OAIScopeMapUpdateParameters [required]
    */
    virtual void scopeMapsUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &scope_map_name, const OAIScopeMapUpdateParameters &scope_map_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void scopeMapsCreateCallback(OAIHttpRequestWorker *worker);
    void scopeMapsDeleteCallback(OAIHttpRequestWorker *worker);
    void scopeMapsGetCallback(OAIHttpRequestWorker *worker);
    void scopeMapsListCallback(OAIHttpRequestWorker *worker);
    void scopeMapsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void scopeMapsCreateSignal(OAIScopeMap summary);
    void scopeMapsDeleteSignal();
    void scopeMapsGetSignal(OAIScopeMap summary);
    void scopeMapsListSignal(OAIScopeMapListResult summary);
    void scopeMapsUpdateSignal(OAIScopeMap summary);


    void scopeMapsCreateSignalFull(OAIHttpRequestWorker *worker, OAIScopeMap summary);
    void scopeMapsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void scopeMapsGetSignalFull(OAIHttpRequestWorker *worker, OAIScopeMap summary);
    void scopeMapsListSignalFull(OAIHttpRequestWorker *worker, OAIScopeMapListResult summary);
    void scopeMapsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIScopeMap summary);

    Q_DECL_DEPRECATED_X("Use scopeMapsCreateSignalError() instead")
    void scopeMapsCreateSignalE(OAIScopeMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsCreateSignalError(OAIScopeMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsDeleteSignalError() instead")
    void scopeMapsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsGetSignalError() instead")
    void scopeMapsGetSignalE(OAIScopeMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsGetSignalError(OAIScopeMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsListSignalError() instead")
    void scopeMapsListSignalE(OAIScopeMapListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsListSignalError(OAIScopeMapListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsUpdateSignalError() instead")
    void scopeMapsUpdateSignalE(OAIScopeMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsUpdateSignalError(OAIScopeMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use scopeMapsCreateSignalErrorFull() instead")
    void scopeMapsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsDeleteSignalErrorFull() instead")
    void scopeMapsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsGetSignalErrorFull() instead")
    void scopeMapsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsListSignalErrorFull() instead")
    void scopeMapsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scopeMapsUpdateSignalErrorFull() instead")
    void scopeMapsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scopeMapsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
