/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenCertificate::OAITokenCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenCertificate::OAITokenCertificate() {
    this->initializeModel();
}

OAITokenCertificate::~OAITokenCertificate() {}

void OAITokenCertificate::initializeModel() {

    m_encoded_pem_certificate_isSet = false;
    m_encoded_pem_certificate_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;
}

void OAITokenCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenCertificate::fromJsonObject(QJsonObject json) {

    m_encoded_pem_certificate_isValid = ::OpenAPI::fromJsonValue(m_encoded_pem_certificate, json[QString("encodedPemCertificate")]);
    m_encoded_pem_certificate_isSet = !json[QString("encodedPemCertificate")].isNull() && m_encoded_pem_certificate_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;
}

QString OAITokenCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_encoded_pem_certificate_isSet) {
        obj.insert(QString("encodedPemCertificate"), ::OpenAPI::toJsonValue(m_encoded_pem_certificate));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    return obj;
}

QString OAITokenCertificate::getEncodedPemCertificate() const {
    return m_encoded_pem_certificate;
}
void OAITokenCertificate::setEncodedPemCertificate(const QString &encoded_pem_certificate) {
    m_encoded_pem_certificate = encoded_pem_certificate;
    m_encoded_pem_certificate_isSet = true;
}

bool OAITokenCertificate::is_encoded_pem_certificate_Set() const{
    return m_encoded_pem_certificate_isSet;
}

bool OAITokenCertificate::is_encoded_pem_certificate_Valid() const{
    return m_encoded_pem_certificate_isValid;
}

QDateTime OAITokenCertificate::getExpiry() const {
    return m_expiry;
}
void OAITokenCertificate::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAITokenCertificate::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAITokenCertificate::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QString OAITokenCertificate::getName() const {
    return m_name;
}
void OAITokenCertificate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITokenCertificate::is_name_Set() const{
    return m_name_isSet;
}

bool OAITokenCertificate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITokenCertificate::getThumbprint() const {
    return m_thumbprint;
}
void OAITokenCertificate::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAITokenCertificate::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAITokenCertificate::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

bool OAITokenCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoded_pem_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
