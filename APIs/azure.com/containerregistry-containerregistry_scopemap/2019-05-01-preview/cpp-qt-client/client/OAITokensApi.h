/**
 * ContainerRegistryManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITokensApi_H
#define OAI_OAITokensApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIToken.h"
#include "OAITokenListResult.h"
#include "OAITokenUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITokensApi : public QObject {
    Q_OBJECT

public:
    OAITokensApi(const int timeOut = 0);
    ~OAITokensApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  token_name QString [required]
    * @param[in]  token_create_parameters OAIToken [required]
    */
    virtual void tokensCreate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &token_name, const OAIToken &token_create_parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  token_name QString [required]
    */
    virtual void tokensDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &token_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  token_name QString [required]
    */
    virtual void tokensGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &token_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    */
    virtual void tokensList(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  registry_name QString [required]
    * @param[in]  token_name QString [required]
    * @param[in]  token_update_parameters OAITokenUpdateParameters [required]
    */
    virtual void tokensUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &registry_name, const QString &token_name, const OAITokenUpdateParameters &token_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tokensCreateCallback(OAIHttpRequestWorker *worker);
    void tokensDeleteCallback(OAIHttpRequestWorker *worker);
    void tokensGetCallback(OAIHttpRequestWorker *worker);
    void tokensListCallback(OAIHttpRequestWorker *worker);
    void tokensUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tokensCreateSignal(OAIToken summary);
    void tokensDeleteSignal();
    void tokensGetSignal(OAIToken summary);
    void tokensListSignal(OAITokenListResult summary);
    void tokensUpdateSignal(OAIToken summary);


    void tokensCreateSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void tokensDeleteSignalFull(OAIHttpRequestWorker *worker);
    void tokensGetSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void tokensListSignalFull(OAIHttpRequestWorker *worker, OAITokenListResult summary);
    void tokensUpdateSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);

    Q_DECL_DEPRECATED_X("Use tokensCreateSignalError() instead")
    void tokensCreateSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensCreateSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensDeleteSignalError() instead")
    void tokensDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tokensDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensGetSignalError() instead")
    void tokensGetSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensGetSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensListSignalError() instead")
    void tokensListSignalE(OAITokenListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensListSignalError(OAITokenListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensUpdateSignalError() instead")
    void tokensUpdateSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensUpdateSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tokensCreateSignalErrorFull() instead")
    void tokensCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensDeleteSignalErrorFull() instead")
    void tokensDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensGetSignalErrorFull() instead")
    void tokensGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensListSignalErrorFull() instead")
    void tokensListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tokensUpdateSignalErrorFull() instead")
    void tokensUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tokensUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
