/*
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignmentDeploymentJobResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents individual job in given blueprint assignment operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:22:58.403164-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssignmentDeploymentJob {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<AssignmentDeploymentJobResult> history = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_STATE = "jobState";
  @SerializedName(SERIALIZED_NAME_JOB_STATE)
  private String jobState;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_REQUEST_URI = "requestUri";
  @SerializedName(SERIALIZED_NAME_REQUEST_URI)
  private String requestUri;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private AssignmentDeploymentJobResult result;

  public AssignmentDeploymentJob() {
  }

  public AssignmentDeploymentJob action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Name of the action performed in this job.
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public AssignmentDeploymentJob history(List<AssignmentDeploymentJobResult> history) {
    this.history = history;
    return this;
  }

  public AssignmentDeploymentJob addHistoryItem(AssignmentDeploymentJobResult historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

  /**
   * Result of this deployment job for each retry.
   * @return history
   */
  @javax.annotation.Nullable
  public List<AssignmentDeploymentJobResult> getHistory() {
    return history;
  }

  public void setHistory(List<AssignmentDeploymentJobResult> history) {
    this.history = history;
  }


  public AssignmentDeploymentJob jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Id of this job.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public AssignmentDeploymentJob jobState(String jobState) {
    this.jobState = jobState;
    return this;
  }

  /**
   * State of this job.
   * @return jobState
   */
  @javax.annotation.Nullable
  public String getJobState() {
    return jobState;
  }

  public void setJobState(String jobState) {
    this.jobState = jobState;
  }


  public AssignmentDeploymentJob kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Kind of job.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public AssignmentDeploymentJob requestUri(String requestUri) {
    this.requestUri = requestUri;
    return this;
  }

  /**
   * Reference to deployment job resource id.
   * @return requestUri
   */
  @javax.annotation.Nullable
  public String getRequestUri() {
    return requestUri;
  }

  public void setRequestUri(String requestUri) {
    this.requestUri = requestUri;
  }


  public AssignmentDeploymentJob result(AssignmentDeploymentJobResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public AssignmentDeploymentJobResult getResult() {
    return result;
  }

  public void setResult(AssignmentDeploymentJobResult result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssignmentDeploymentJob assignmentDeploymentJob = (AssignmentDeploymentJob) o;
    return Objects.equals(this.action, assignmentDeploymentJob.action) &&
        Objects.equals(this.history, assignmentDeploymentJob.history) &&
        Objects.equals(this.jobId, assignmentDeploymentJob.jobId) &&
        Objects.equals(this.jobState, assignmentDeploymentJob.jobState) &&
        Objects.equals(this.kind, assignmentDeploymentJob.kind) &&
        Objects.equals(this.requestUri, assignmentDeploymentJob.requestUri) &&
        Objects.equals(this.result, assignmentDeploymentJob.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, history, jobId, jobState, kind, requestUri, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssignmentDeploymentJob {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobState: ").append(toIndentedString(jobState)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    requestUri: ").append(toIndentedString(requestUri)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("history");
    openapiFields.add("jobId");
    openapiFields.add("jobState");
    openapiFields.add("kind");
    openapiFields.add("requestUri");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssignmentDeploymentJob
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssignmentDeploymentJob.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssignmentDeploymentJob is not found in the empty JSON string", AssignmentDeploymentJob.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssignmentDeploymentJob.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssignmentDeploymentJob` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull()) {
        JsonArray jsonArrayhistory = jsonObj.getAsJsonArray("history");
        if (jsonArrayhistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
          }

          // validate the optional field `history` (array)
          for (int i = 0; i < jsonArrayhistory.size(); i++) {
            AssignmentDeploymentJobResult.validateJsonElement(jsonArrayhistory.get(i));
          };
        }
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("jobState") != null && !jsonObj.get("jobState").isJsonNull()) && !jsonObj.get("jobState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobState").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("requestUri") != null && !jsonObj.get("requestUri").isJsonNull()) && !jsonObj.get("requestUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestUri").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        AssignmentDeploymentJobResult.validateJsonElement(jsonObj.get("result"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssignmentDeploymentJob.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssignmentDeploymentJob' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssignmentDeploymentJob> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssignmentDeploymentJob.class));

       return (TypeAdapter<T>) new TypeAdapter<AssignmentDeploymentJob>() {
           @Override
           public void write(JsonWriter out, AssignmentDeploymentJob value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssignmentDeploymentJob read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssignmentDeploymentJob given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssignmentDeploymentJob
   * @throws IOException if the JSON string is invalid with respect to AssignmentDeploymentJob
   */
  public static AssignmentDeploymentJob fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssignmentDeploymentJob.class);
  }

  /**
   * Convert an instance of AssignmentDeploymentJob to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

