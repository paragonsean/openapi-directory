/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentOperationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentOperationProperties::OAIAssignmentOperationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentOperationProperties::OAIAssignmentOperationProperties() {
    this->initializeModel();
}

OAIAssignmentOperationProperties::~OAIAssignmentOperationProperties() {}

void OAIAssignmentOperationProperties::initializeModel() {

    m_assignment_state_isSet = false;
    m_assignment_state_isValid = false;

    m_blueprint_version_isSet = false;
    m_blueprint_version_isValid = false;

    m_deployments_isSet = false;
    m_deployments_isValid = false;

    m_time_created_isSet = false;
    m_time_created_isValid = false;

    m_time_finished_isSet = false;
    m_time_finished_isValid = false;

    m_time_started_isSet = false;
    m_time_started_isValid = false;
}

void OAIAssignmentOperationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentOperationProperties::fromJsonObject(QJsonObject json) {

    m_assignment_state_isValid = ::OpenAPI::fromJsonValue(m_assignment_state, json[QString("assignmentState")]);
    m_assignment_state_isSet = !json[QString("assignmentState")].isNull() && m_assignment_state_isValid;

    m_blueprint_version_isValid = ::OpenAPI::fromJsonValue(m_blueprint_version, json[QString("blueprintVersion")]);
    m_blueprint_version_isSet = !json[QString("blueprintVersion")].isNull() && m_blueprint_version_isValid;

    m_deployments_isValid = ::OpenAPI::fromJsonValue(m_deployments, json[QString("deployments")]);
    m_deployments_isSet = !json[QString("deployments")].isNull() && m_deployments_isValid;

    m_time_created_isValid = ::OpenAPI::fromJsonValue(m_time_created, json[QString("timeCreated")]);
    m_time_created_isSet = !json[QString("timeCreated")].isNull() && m_time_created_isValid;

    m_time_finished_isValid = ::OpenAPI::fromJsonValue(m_time_finished, json[QString("timeFinished")]);
    m_time_finished_isSet = !json[QString("timeFinished")].isNull() && m_time_finished_isValid;

    m_time_started_isValid = ::OpenAPI::fromJsonValue(m_time_started, json[QString("timeStarted")]);
    m_time_started_isSet = !json[QString("timeStarted")].isNull() && m_time_started_isValid;
}

QString OAIAssignmentOperationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentOperationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment_state_isSet) {
        obj.insert(QString("assignmentState"), ::OpenAPI::toJsonValue(m_assignment_state));
    }
    if (m_blueprint_version_isSet) {
        obj.insert(QString("blueprintVersion"), ::OpenAPI::toJsonValue(m_blueprint_version));
    }
    if (m_deployments.size() > 0) {
        obj.insert(QString("deployments"), ::OpenAPI::toJsonValue(m_deployments));
    }
    if (m_time_created_isSet) {
        obj.insert(QString("timeCreated"), ::OpenAPI::toJsonValue(m_time_created));
    }
    if (m_time_finished_isSet) {
        obj.insert(QString("timeFinished"), ::OpenAPI::toJsonValue(m_time_finished));
    }
    if (m_time_started_isSet) {
        obj.insert(QString("timeStarted"), ::OpenAPI::toJsonValue(m_time_started));
    }
    return obj;
}

QString OAIAssignmentOperationProperties::getAssignmentState() const {
    return m_assignment_state;
}
void OAIAssignmentOperationProperties::setAssignmentState(const QString &assignment_state) {
    m_assignment_state = assignment_state;
    m_assignment_state_isSet = true;
}

bool OAIAssignmentOperationProperties::is_assignment_state_Set() const{
    return m_assignment_state_isSet;
}

bool OAIAssignmentOperationProperties::is_assignment_state_Valid() const{
    return m_assignment_state_isValid;
}

QString OAIAssignmentOperationProperties::getBlueprintVersion() const {
    return m_blueprint_version;
}
void OAIAssignmentOperationProperties::setBlueprintVersion(const QString &blueprint_version) {
    m_blueprint_version = blueprint_version;
    m_blueprint_version_isSet = true;
}

bool OAIAssignmentOperationProperties::is_blueprint_version_Set() const{
    return m_blueprint_version_isSet;
}

bool OAIAssignmentOperationProperties::is_blueprint_version_Valid() const{
    return m_blueprint_version_isValid;
}

QList<OAIAssignmentDeploymentJob> OAIAssignmentOperationProperties::getDeployments() const {
    return m_deployments;
}
void OAIAssignmentOperationProperties::setDeployments(const QList<OAIAssignmentDeploymentJob> &deployments) {
    m_deployments = deployments;
    m_deployments_isSet = true;
}

bool OAIAssignmentOperationProperties::is_deployments_Set() const{
    return m_deployments_isSet;
}

bool OAIAssignmentOperationProperties::is_deployments_Valid() const{
    return m_deployments_isValid;
}

QString OAIAssignmentOperationProperties::getTimeCreated() const {
    return m_time_created;
}
void OAIAssignmentOperationProperties::setTimeCreated(const QString &time_created) {
    m_time_created = time_created;
    m_time_created_isSet = true;
}

bool OAIAssignmentOperationProperties::is_time_created_Set() const{
    return m_time_created_isSet;
}

bool OAIAssignmentOperationProperties::is_time_created_Valid() const{
    return m_time_created_isValid;
}

QString OAIAssignmentOperationProperties::getTimeFinished() const {
    return m_time_finished;
}
void OAIAssignmentOperationProperties::setTimeFinished(const QString &time_finished) {
    m_time_finished = time_finished;
    m_time_finished_isSet = true;
}

bool OAIAssignmentOperationProperties::is_time_finished_Set() const{
    return m_time_finished_isSet;
}

bool OAIAssignmentOperationProperties::is_time_finished_Valid() const{
    return m_time_finished_isValid;
}

QString OAIAssignmentOperationProperties::getTimeStarted() const {
    return m_time_started;
}
void OAIAssignmentOperationProperties::setTimeStarted(const QString &time_started) {
    m_time_started = time_started;
    m_time_started_isSet = true;
}

bool OAIAssignmentOperationProperties::is_time_started_Set() const{
    return m_time_started_isSet;
}

bool OAIAssignmentOperationProperties::is_time_started_Valid() const{
    return m_time_started_isValid;
}

bool OAIAssignmentOperationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blueprint_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_finished_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_started_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentOperationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
