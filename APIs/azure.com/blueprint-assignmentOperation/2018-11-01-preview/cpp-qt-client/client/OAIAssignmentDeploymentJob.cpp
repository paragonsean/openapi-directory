/**
 * BlueprintClient
 * Azure Blueprints Client provides access to blueprint definitions, assignments, and artifacts, and related blueprint operations.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssignmentDeploymentJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssignmentDeploymentJob::OAIAssignmentDeploymentJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssignmentDeploymentJob::OAIAssignmentDeploymentJob() {
    this->initializeModel();
}

OAIAssignmentDeploymentJob::~OAIAssignmentDeploymentJob() {}

void OAIAssignmentDeploymentJob::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_state_isSet = false;
    m_job_state_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_request_uri_isSet = false;
    m_request_uri_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIAssignmentDeploymentJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssignmentDeploymentJob::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("history")]);
    m_history_isSet = !json[QString("history")].isNull() && m_history_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_job_state_isValid = ::OpenAPI::fromJsonValue(m_job_state, json[QString("jobState")]);
    m_job_state_isSet = !json[QString("jobState")].isNull() && m_job_state_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_request_uri_isValid = ::OpenAPI::fromJsonValue(m_request_uri, json[QString("requestUri")]);
    m_request_uri_isSet = !json[QString("requestUri")].isNull() && m_request_uri_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;
}

QString OAIAssignmentDeploymentJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssignmentDeploymentJob::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_history.size() > 0) {
        obj.insert(QString("history"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_state_isSet) {
        obj.insert(QString("jobState"), ::OpenAPI::toJsonValue(m_job_state));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_request_uri_isSet) {
        obj.insert(QString("requestUri"), ::OpenAPI::toJsonValue(m_request_uri));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAIAssignmentDeploymentJob::getAction() const {
    return m_action;
}
void OAIAssignmentDeploymentJob::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAssignmentDeploymentJob::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAssignmentDeploymentJob::is_action_Valid() const{
    return m_action_isValid;
}

QList<OAIAssignmentDeploymentJobResult> OAIAssignmentDeploymentJob::getHistory() const {
    return m_history;
}
void OAIAssignmentDeploymentJob::setHistory(const QList<OAIAssignmentDeploymentJobResult> &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIAssignmentDeploymentJob::is_history_Set() const{
    return m_history_isSet;
}

bool OAIAssignmentDeploymentJob::is_history_Valid() const{
    return m_history_isValid;
}

QString OAIAssignmentDeploymentJob::getJobId() const {
    return m_job_id;
}
void OAIAssignmentDeploymentJob::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIAssignmentDeploymentJob::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIAssignmentDeploymentJob::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIAssignmentDeploymentJob::getJobState() const {
    return m_job_state;
}
void OAIAssignmentDeploymentJob::setJobState(const QString &job_state) {
    m_job_state = job_state;
    m_job_state_isSet = true;
}

bool OAIAssignmentDeploymentJob::is_job_state_Set() const{
    return m_job_state_isSet;
}

bool OAIAssignmentDeploymentJob::is_job_state_Valid() const{
    return m_job_state_isValid;
}

QString OAIAssignmentDeploymentJob::getKind() const {
    return m_kind;
}
void OAIAssignmentDeploymentJob::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIAssignmentDeploymentJob::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIAssignmentDeploymentJob::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIAssignmentDeploymentJob::getRequestUri() const {
    return m_request_uri;
}
void OAIAssignmentDeploymentJob::setRequestUri(const QString &request_uri) {
    m_request_uri = request_uri;
    m_request_uri_isSet = true;
}

bool OAIAssignmentDeploymentJob::is_request_uri_Set() const{
    return m_request_uri_isSet;
}

bool OAIAssignmentDeploymentJob::is_request_uri_Valid() const{
    return m_request_uri_isValid;
}

OAIAssignmentDeploymentJobResult OAIAssignmentDeploymentJob::getResult() const {
    return m_result;
}
void OAIAssignmentDeploymentJob::setResult(const OAIAssignmentDeploymentJobResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIAssignmentDeploymentJob::is_result_Set() const{
    return m_result_isSet;
}

bool OAIAssignmentDeploymentJob::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIAssignmentDeploymentJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssignmentDeploymentJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
