/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HybridRunbookWorker;
import org.openapitools.client.model.RunAsCredentialAssociationProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of hybrid runbook worker group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:02:01.680699-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HybridRunbookWorkerGroup {
  public static final String SERIALIZED_NAME_CREDENTIAL = "credential";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL)
  private RunAsCredentialAssociationProperty credential;

  /**
   * Type of the HybridWorkerGroup.
   */
  @JsonAdapter(GroupTypeEnum.Adapter.class)
  public enum GroupTypeEnum {
    USER("User"),
    
    SYSTEM("System");

    private String value;

    GroupTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupTypeEnum fromValue(String value) {
      for (GroupTypeEnum b : GroupTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_TYPE = "groupType";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE)
  private GroupTypeEnum groupType;

  public static final String SERIALIZED_NAME_HYBRID_RUNBOOK_WORKERS = "hybridRunbookWorkers";
  @SerializedName(SERIALIZED_NAME_HYBRID_RUNBOOK_WORKERS)
  private List<HybridRunbookWorker> hybridRunbookWorkers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public HybridRunbookWorkerGroup() {
  }

  public HybridRunbookWorkerGroup credential(RunAsCredentialAssociationProperty credential) {
    this.credential = credential;
    return this;
  }

  /**
   * Get credential
   * @return credential
   */
  @javax.annotation.Nullable
  public RunAsCredentialAssociationProperty getCredential() {
    return credential;
  }

  public void setCredential(RunAsCredentialAssociationProperty credential) {
    this.credential = credential;
  }


  public HybridRunbookWorkerGroup groupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
    return this;
  }

  /**
   * Type of the HybridWorkerGroup.
   * @return groupType
   */
  @javax.annotation.Nullable
  public GroupTypeEnum getGroupType() {
    return groupType;
  }

  public void setGroupType(GroupTypeEnum groupType) {
    this.groupType = groupType;
  }


  public HybridRunbookWorkerGroup hybridRunbookWorkers(List<HybridRunbookWorker> hybridRunbookWorkers) {
    this.hybridRunbookWorkers = hybridRunbookWorkers;
    return this;
  }

  public HybridRunbookWorkerGroup addHybridRunbookWorkersItem(HybridRunbookWorker hybridRunbookWorkersItem) {
    if (this.hybridRunbookWorkers == null) {
      this.hybridRunbookWorkers = new ArrayList<>();
    }
    this.hybridRunbookWorkers.add(hybridRunbookWorkersItem);
    return this;
  }

  /**
   * Gets or sets the list of hybrid runbook workers.
   * @return hybridRunbookWorkers
   */
  @javax.annotation.Nullable
  public List<HybridRunbookWorker> getHybridRunbookWorkers() {
    return hybridRunbookWorkers;
  }

  public void setHybridRunbookWorkers(List<HybridRunbookWorker> hybridRunbookWorkers) {
    this.hybridRunbookWorkers = hybridRunbookWorkers;
  }


  public HybridRunbookWorkerGroup id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Gets or sets the id of the resource.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public HybridRunbookWorkerGroup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Gets or sets the name of the group.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HybridRunbookWorkerGroup hybridRunbookWorkerGroup = (HybridRunbookWorkerGroup) o;
    return Objects.equals(this.credential, hybridRunbookWorkerGroup.credential) &&
        Objects.equals(this.groupType, hybridRunbookWorkerGroup.groupType) &&
        Objects.equals(this.hybridRunbookWorkers, hybridRunbookWorkerGroup.hybridRunbookWorkers) &&
        Objects.equals(this.id, hybridRunbookWorkerGroup.id) &&
        Objects.equals(this.name, hybridRunbookWorkerGroup.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credential, groupType, hybridRunbookWorkers, id, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HybridRunbookWorkerGroup {\n");
    sb.append("    credential: ").append(toIndentedString(credential)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    hybridRunbookWorkers: ").append(toIndentedString(hybridRunbookWorkers)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("credential");
    openapiFields.add("groupType");
    openapiFields.add("hybridRunbookWorkers");
    openapiFields.add("id");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HybridRunbookWorkerGroup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HybridRunbookWorkerGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HybridRunbookWorkerGroup is not found in the empty JSON string", HybridRunbookWorkerGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HybridRunbookWorkerGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HybridRunbookWorkerGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `credential`
      if (jsonObj.get("credential") != null && !jsonObj.get("credential").isJsonNull()) {
        RunAsCredentialAssociationProperty.validateJsonElement(jsonObj.get("credential"));
      }
      if ((jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) && !jsonObj.get("groupType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupType").toString()));
      }
      // validate the optional field `groupType`
      if (jsonObj.get("groupType") != null && !jsonObj.get("groupType").isJsonNull()) {
        GroupTypeEnum.validateJsonElement(jsonObj.get("groupType"));
      }
      if (jsonObj.get("hybridRunbookWorkers") != null && !jsonObj.get("hybridRunbookWorkers").isJsonNull()) {
        JsonArray jsonArrayhybridRunbookWorkers = jsonObj.getAsJsonArray("hybridRunbookWorkers");
        if (jsonArrayhybridRunbookWorkers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hybridRunbookWorkers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hybridRunbookWorkers` to be an array in the JSON string but got `%s`", jsonObj.get("hybridRunbookWorkers").toString()));
          }

          // validate the optional field `hybridRunbookWorkers` (array)
          for (int i = 0; i < jsonArrayhybridRunbookWorkers.size(); i++) {
            HybridRunbookWorker.validateJsonElement(jsonArrayhybridRunbookWorkers.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HybridRunbookWorkerGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HybridRunbookWorkerGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HybridRunbookWorkerGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HybridRunbookWorkerGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<HybridRunbookWorkerGroup>() {
           @Override
           public void write(JsonWriter out, HybridRunbookWorkerGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HybridRunbookWorkerGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HybridRunbookWorkerGroup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HybridRunbookWorkerGroup
   * @throws IOException if the JSON string is invalid with respect to HybridRunbookWorkerGroup
   */
  public static HybridRunbookWorkerGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HybridRunbookWorkerGroup.class);
  }

  /**
   * Convert an instance of HybridRunbookWorkerGroup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

