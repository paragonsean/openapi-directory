/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHybridRunbookWorkerGroupApi_H
#define OAI_OAIHybridRunbookWorkerGroupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHybridRunbookWorkerGroup.h"
#include "OAIHybridRunbookWorkerGroupUpdateParameters.h"
#include "OAIHybridRunbookWorkerGroup_ListByAutomationAccount_default_response.h"
#include "OAIHybridRunbookWorkerGroupsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHybridRunbookWorkerGroupApi : public QObject {
    Q_OBJECT

public:
    OAIHybridRunbookWorkerGroupApi(const int timeOut = 0);
    ~OAIHybridRunbookWorkerGroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  hybrid_runbook_worker_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hybridRunbookWorkerGroupDelete(const QString &resource_group_name, const QString &automation_account_name, const QString &hybrid_runbook_worker_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  hybrid_runbook_worker_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hybridRunbookWorkerGroupGet(const QString &resource_group_name, const QString &automation_account_name, const QString &hybrid_runbook_worker_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void hybridRunbookWorkerGroupListByAutomationAccount(const QString &resource_group_name, const QString &automation_account_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  automation_account_name QString [required]
    * @param[in]  hybrid_runbook_worker_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIHybridRunbookWorkerGroupUpdateParameters [required]
    */
    virtual void hybridRunbookWorkerGroupUpdate(const QString &resource_group_name, const QString &automation_account_name, const QString &hybrid_runbook_worker_group_name, const QString &subscription_id, const QString &api_version, const OAIHybridRunbookWorkerGroupUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hybridRunbookWorkerGroupDeleteCallback(OAIHttpRequestWorker *worker);
    void hybridRunbookWorkerGroupGetCallback(OAIHttpRequestWorker *worker);
    void hybridRunbookWorkerGroupListByAutomationAccountCallback(OAIHttpRequestWorker *worker);
    void hybridRunbookWorkerGroupUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hybridRunbookWorkerGroupDeleteSignal();
    void hybridRunbookWorkerGroupGetSignal(OAIHybridRunbookWorkerGroup summary);
    void hybridRunbookWorkerGroupListByAutomationAccountSignal(OAIHybridRunbookWorkerGroupsListResult summary);
    void hybridRunbookWorkerGroupUpdateSignal(OAIHybridRunbookWorkerGroup summary);


    void hybridRunbookWorkerGroupDeleteSignalFull(OAIHttpRequestWorker *worker);
    void hybridRunbookWorkerGroupGetSignalFull(OAIHttpRequestWorker *worker, OAIHybridRunbookWorkerGroup summary);
    void hybridRunbookWorkerGroupListByAutomationAccountSignalFull(OAIHttpRequestWorker *worker, OAIHybridRunbookWorkerGroupsListResult summary);
    void hybridRunbookWorkerGroupUpdateSignalFull(OAIHttpRequestWorker *worker, OAIHybridRunbookWorkerGroup summary);

    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupDeleteSignalError() instead")
    void hybridRunbookWorkerGroupDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupGetSignalError() instead")
    void hybridRunbookWorkerGroupGetSignalE(OAIHybridRunbookWorkerGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupGetSignalError(OAIHybridRunbookWorkerGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupListByAutomationAccountSignalError() instead")
    void hybridRunbookWorkerGroupListByAutomationAccountSignalE(OAIHybridRunbookWorkerGroupsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupListByAutomationAccountSignalError(OAIHybridRunbookWorkerGroupsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupUpdateSignalError() instead")
    void hybridRunbookWorkerGroupUpdateSignalE(OAIHybridRunbookWorkerGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupUpdateSignalError(OAIHybridRunbookWorkerGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupDeleteSignalErrorFull() instead")
    void hybridRunbookWorkerGroupDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupGetSignalErrorFull() instead")
    void hybridRunbookWorkerGroupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupListByAutomationAccountSignalErrorFull() instead")
    void hybridRunbookWorkerGroupListByAutomationAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupListByAutomationAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hybridRunbookWorkerGroupUpdateSignalErrorFull() instead")
    void hybridRunbookWorkerGroupUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hybridRunbookWorkerGroupUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
