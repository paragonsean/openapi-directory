/**
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-10-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHybridRunbookWorker.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHybridRunbookWorker::OAIHybridRunbookWorker(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHybridRunbookWorker::OAIHybridRunbookWorker() {
    this->initializeModel();
}

OAIHybridRunbookWorker::~OAIHybridRunbookWorker() {}

void OAIHybridRunbookWorker::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_last_seen_date_time_isSet = false;
    m_last_seen_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registration_time_isSet = false;
    m_registration_time_isValid = false;
}

void OAIHybridRunbookWorker::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHybridRunbookWorker::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_last_seen_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_seen_date_time, json[QString("lastSeenDateTime")]);
    m_last_seen_date_time_isSet = !json[QString("lastSeenDateTime")].isNull() && m_last_seen_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registration_time_isValid = ::OpenAPI::fromJsonValue(m_registration_time, json[QString("registrationTime")]);
    m_registration_time_isSet = !json[QString("registrationTime")].isNull() && m_registration_time_isValid;
}

QString OAIHybridRunbookWorker::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHybridRunbookWorker::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_last_seen_date_time_isSet) {
        obj.insert(QString("lastSeenDateTime"), ::OpenAPI::toJsonValue(m_last_seen_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registration_time_isSet) {
        obj.insert(QString("registrationTime"), ::OpenAPI::toJsonValue(m_registration_time));
    }
    return obj;
}

QString OAIHybridRunbookWorker::getIp() const {
    return m_ip;
}
void OAIHybridRunbookWorker::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIHybridRunbookWorker::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIHybridRunbookWorker::is_ip_Valid() const{
    return m_ip_isValid;
}

QDateTime OAIHybridRunbookWorker::getLastSeenDateTime() const {
    return m_last_seen_date_time;
}
void OAIHybridRunbookWorker::setLastSeenDateTime(const QDateTime &last_seen_date_time) {
    m_last_seen_date_time = last_seen_date_time;
    m_last_seen_date_time_isSet = true;
}

bool OAIHybridRunbookWorker::is_last_seen_date_time_Set() const{
    return m_last_seen_date_time_isSet;
}

bool OAIHybridRunbookWorker::is_last_seen_date_time_Valid() const{
    return m_last_seen_date_time_isValid;
}

QString OAIHybridRunbookWorker::getName() const {
    return m_name;
}
void OAIHybridRunbookWorker::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHybridRunbookWorker::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHybridRunbookWorker::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIHybridRunbookWorker::getRegistrationTime() const {
    return m_registration_time;
}
void OAIHybridRunbookWorker::setRegistrationTime(const QDateTime &registration_time) {
    m_registration_time = registration_time;
    m_registration_time_isSet = true;
}

bool OAIHybridRunbookWorker::is_registration_time_Set() const{
    return m_registration_time_isSet;
}

bool OAIHybridRunbookWorker::is_registration_time_Valid() const{
    return m_registration_time_isValid;
}

bool OAIHybridRunbookWorker::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHybridRunbookWorker::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
