# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hybrid_runbook_worker import HybridRunbookWorker
from openapi_server.models.run_as_credential_association_property import RunAsCredentialAssociationProperty
from openapi_server import util


class HybridRunbookWorkerGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credential: RunAsCredentialAssociationProperty=None, group_type: str=None, hybrid_runbook_workers: List[HybridRunbookWorker]=None, id: str=None, name: str=None):
        """HybridRunbookWorkerGroup - a model defined in OpenAPI

        :param credential: The credential of this HybridRunbookWorkerGroup.
        :param group_type: The group_type of this HybridRunbookWorkerGroup.
        :param hybrid_runbook_workers: The hybrid_runbook_workers of this HybridRunbookWorkerGroup.
        :param id: The id of this HybridRunbookWorkerGroup.
        :param name: The name of this HybridRunbookWorkerGroup.
        """
        self.openapi_types = {
            'credential': RunAsCredentialAssociationProperty,
            'group_type': str,
            'hybrid_runbook_workers': List[HybridRunbookWorker],
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'credential': 'credential',
            'group_type': 'groupType',
            'hybrid_runbook_workers': 'hybridRunbookWorkers',
            'id': 'id',
            'name': 'name'
        }

        self._credential = credential
        self._group_type = group_type
        self._hybrid_runbook_workers = hybrid_runbook_workers
        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HybridRunbookWorkerGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HybridRunbookWorkerGroup of this HybridRunbookWorkerGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credential(self):
        """Gets the credential of this HybridRunbookWorkerGroup.


        :return: The credential of this HybridRunbookWorkerGroup.
        :rtype: RunAsCredentialAssociationProperty
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this HybridRunbookWorkerGroup.


        :param credential: The credential of this HybridRunbookWorkerGroup.
        :type credential: RunAsCredentialAssociationProperty
        """

        self._credential = credential

    @property
    def group_type(self):
        """Gets the group_type of this HybridRunbookWorkerGroup.

        Type of the HybridWorkerGroup.

        :return: The group_type of this HybridRunbookWorkerGroup.
        :rtype: str
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this HybridRunbookWorkerGroup.

        Type of the HybridWorkerGroup.

        :param group_type: The group_type of this HybridRunbookWorkerGroup.
        :type group_type: str
        """
        allowed_values = ["User", "System"]  # noqa: E501
        if group_type not in allowed_values:
            raise ValueError(
                "Invalid value for `group_type` ({0}), must be one of {1}"
                .format(group_type, allowed_values)
            )

        self._group_type = group_type

    @property
    def hybrid_runbook_workers(self):
        """Gets the hybrid_runbook_workers of this HybridRunbookWorkerGroup.

        Gets or sets the list of hybrid runbook workers.

        :return: The hybrid_runbook_workers of this HybridRunbookWorkerGroup.
        :rtype: List[HybridRunbookWorker]
        """
        return self._hybrid_runbook_workers

    @hybrid_runbook_workers.setter
    def hybrid_runbook_workers(self, hybrid_runbook_workers):
        """Sets the hybrid_runbook_workers of this HybridRunbookWorkerGroup.

        Gets or sets the list of hybrid runbook workers.

        :param hybrid_runbook_workers: The hybrid_runbook_workers of this HybridRunbookWorkerGroup.
        :type hybrid_runbook_workers: List[HybridRunbookWorker]
        """

        self._hybrid_runbook_workers = hybrid_runbook_workers

    @property
    def id(self):
        """Gets the id of this HybridRunbookWorkerGroup.

        Gets or sets the id of the resource.

        :return: The id of this HybridRunbookWorkerGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HybridRunbookWorkerGroup.

        Gets or sets the id of the resource.

        :param id: The id of this HybridRunbookWorkerGroup.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this HybridRunbookWorkerGroup.

        Gets or sets the name of the group.

        :return: The name of this HybridRunbookWorkerGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HybridRunbookWorkerGroup.

        Gets or sets the name of the group.

        :param name: The name of this HybridRunbookWorkerGroup.
        :type name: str
        """

        self._name = name
