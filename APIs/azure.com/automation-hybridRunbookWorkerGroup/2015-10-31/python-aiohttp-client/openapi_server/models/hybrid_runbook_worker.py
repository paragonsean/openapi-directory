# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HybridRunbookWorker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, last_seen_date_time: datetime=None, name: str=None, registration_time: datetime=None):
        """HybridRunbookWorker - a model defined in OpenAPI

        :param ip: The ip of this HybridRunbookWorker.
        :param last_seen_date_time: The last_seen_date_time of this HybridRunbookWorker.
        :param name: The name of this HybridRunbookWorker.
        :param registration_time: The registration_time of this HybridRunbookWorker.
        """
        self.openapi_types = {
            'ip': str,
            'last_seen_date_time': datetime,
            'name': str,
            'registration_time': datetime
        }

        self.attribute_map = {
            'ip': 'ip',
            'last_seen_date_time': 'lastSeenDateTime',
            'name': 'name',
            'registration_time': 'registrationTime'
        }

        self._ip = ip
        self._last_seen_date_time = last_seen_date_time
        self._name = name
        self._registration_time = registration_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HybridRunbookWorker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HybridRunbookWorker of this HybridRunbookWorker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this HybridRunbookWorker.

        Gets or sets the assigned machine IP address.

        :return: The ip of this HybridRunbookWorker.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this HybridRunbookWorker.

        Gets or sets the assigned machine IP address.

        :param ip: The ip of this HybridRunbookWorker.
        :type ip: str
        """

        self._ip = ip

    @property
    def last_seen_date_time(self):
        """Gets the last_seen_date_time of this HybridRunbookWorker.

        Last Heartbeat from the Worker

        :return: The last_seen_date_time of this HybridRunbookWorker.
        :rtype: datetime
        """
        return self._last_seen_date_time

    @last_seen_date_time.setter
    def last_seen_date_time(self, last_seen_date_time):
        """Sets the last_seen_date_time of this HybridRunbookWorker.

        Last Heartbeat from the Worker

        :param last_seen_date_time: The last_seen_date_time of this HybridRunbookWorker.
        :type last_seen_date_time: datetime
        """

        self._last_seen_date_time = last_seen_date_time

    @property
    def name(self):
        """Gets the name of this HybridRunbookWorker.

        Gets or sets the worker machine name.

        :return: The name of this HybridRunbookWorker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HybridRunbookWorker.

        Gets or sets the worker machine name.

        :param name: The name of this HybridRunbookWorker.
        :type name: str
        """

        self._name = name

    @property
    def registration_time(self):
        """Gets the registration_time of this HybridRunbookWorker.

        Gets or sets the registration time of the worker machine.

        :return: The registration_time of this HybridRunbookWorker.
        :rtype: datetime
        """
        return self._registration_time

    @registration_time.setter
    def registration_time(self, registration_time):
        """Sets the registration_time of this HybridRunbookWorker.

        Gets or sets the registration time of the worker machine.

        :param registration_time: The registration_time of this HybridRunbookWorker.
        :type registration_time: datetime
        """

        self._registration_time = registration_time
