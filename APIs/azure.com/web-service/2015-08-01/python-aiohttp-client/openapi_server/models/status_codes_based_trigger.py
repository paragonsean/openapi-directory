# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StatusCodesBasedTrigger(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, status: int=None, sub_status: int=None, time_interval: str=None, win32_status: int=None):
        """StatusCodesBasedTrigger - a model defined in OpenAPI

        :param count: The count of this StatusCodesBasedTrigger.
        :param status: The status of this StatusCodesBasedTrigger.
        :param sub_status: The sub_status of this StatusCodesBasedTrigger.
        :param time_interval: The time_interval of this StatusCodesBasedTrigger.
        :param win32_status: The win32_status of this StatusCodesBasedTrigger.
        """
        self.openapi_types = {
            'count': int,
            'status': int,
            'sub_status': int,
            'time_interval': str,
            'win32_status': int
        }

        self.attribute_map = {
            'count': 'count',
            'status': 'status',
            'sub_status': 'subStatus',
            'time_interval': 'timeInterval',
            'win32_status': 'win32Status'
        }

        self._count = count
        self._status = status
        self._sub_status = sub_status
        self._time_interval = time_interval
        self._win32_status = win32_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatusCodesBasedTrigger':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatusCodesBasedTrigger of this StatusCodesBasedTrigger.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this StatusCodesBasedTrigger.

        Count

        :return: The count of this StatusCodesBasedTrigger.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this StatusCodesBasedTrigger.

        Count

        :param count: The count of this StatusCodesBasedTrigger.
        :type count: int
        """

        self._count = count

    @property
    def status(self):
        """Gets the status of this StatusCodesBasedTrigger.

        HTTP status code

        :return: The status of this StatusCodesBasedTrigger.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StatusCodesBasedTrigger.

        HTTP status code

        :param status: The status of this StatusCodesBasedTrigger.
        :type status: int
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this StatusCodesBasedTrigger.

        SubStatus

        :return: The sub_status of this StatusCodesBasedTrigger.
        :rtype: int
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this StatusCodesBasedTrigger.

        SubStatus

        :param sub_status: The sub_status of this StatusCodesBasedTrigger.
        :type sub_status: int
        """

        self._sub_status = sub_status

    @property
    def time_interval(self):
        """Gets the time_interval of this StatusCodesBasedTrigger.

        TimeInterval

        :return: The time_interval of this StatusCodesBasedTrigger.
        :rtype: str
        """
        return self._time_interval

    @time_interval.setter
    def time_interval(self, time_interval):
        """Sets the time_interval of this StatusCodesBasedTrigger.

        TimeInterval

        :param time_interval: The time_interval of this StatusCodesBasedTrigger.
        :type time_interval: str
        """

        self._time_interval = time_interval

    @property
    def win32_status(self):
        """Gets the win32_status of this StatusCodesBasedTrigger.

        Win32 error code

        :return: The win32_status of this StatusCodesBasedTrigger.
        :rtype: int
        """
        return self._win32_status

    @win32_status.setter
    def win32_status(self, win32_status):
        """Sets the win32_status of this StatusCodesBasedTrigger.

        Win32 error code

        :param win32_status: The win32_status of this StatusCodesBasedTrigger.
        :type win32_status: int
        """

        self._win32_status = win32_status
