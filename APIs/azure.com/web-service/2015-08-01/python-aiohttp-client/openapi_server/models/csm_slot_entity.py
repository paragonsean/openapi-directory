# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CsmSlotEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, preserve_vnet: bool=None, target_slot: str=None):
        """CsmSlotEntity - a model defined in OpenAPI

        :param preserve_vnet: The preserve_vnet of this CsmSlotEntity.
        :param target_slot: The target_slot of this CsmSlotEntity.
        """
        self.openapi_types = {
            'preserve_vnet': bool,
            'target_slot': str
        }

        self.attribute_map = {
            'preserve_vnet': 'preserveVnet',
            'target_slot': 'targetSlot'
        }

        self._preserve_vnet = preserve_vnet
        self._target_slot = target_slot

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CsmSlotEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CsmSlotEntity of this CsmSlotEntity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def preserve_vnet(self):
        """Gets the preserve_vnet of this CsmSlotEntity.

        Get or set the flag indicating it should preserve VNet to the slot during swap

        :return: The preserve_vnet of this CsmSlotEntity.
        :rtype: bool
        """
        return self._preserve_vnet

    @preserve_vnet.setter
    def preserve_vnet(self, preserve_vnet):
        """Sets the preserve_vnet of this CsmSlotEntity.

        Get or set the flag indicating it should preserve VNet to the slot during swap

        :param preserve_vnet: The preserve_vnet of this CsmSlotEntity.
        :type preserve_vnet: bool
        """

        self._preserve_vnet = preserve_vnet

    @property
    def target_slot(self):
        """Gets the target_slot of this CsmSlotEntity.

        Set the destination deployment slot during swap operation

        :return: The target_slot of this CsmSlotEntity.
        :rtype: str
        """
        return self._target_slot

    @target_slot.setter
    def target_slot(self, target_slot):
        """Sets the target_slot of this CsmSlotEntity.

        Set the destination deployment slot during swap operation

        :param target_slot: The target_slot of this CsmSlotEntity.
        :type target_slot: str
        """

        self._target_slot = target_slot
