# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceNameAvailability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, name_available: bool=None, reason: str=None):
        """ResourceNameAvailability - a model defined in OpenAPI

        :param message: The message of this ResourceNameAvailability.
        :param name_available: The name_available of this ResourceNameAvailability.
        :param reason: The reason of this ResourceNameAvailability.
        """
        self.openapi_types = {
            'message': str,
            'name_available': bool,
            'reason': str
        }

        self.attribute_map = {
            'message': 'message',
            'name_available': 'nameAvailable',
            'reason': 'reason'
        }

        self._message = message
        self._name_available = name_available
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceNameAvailability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceNameAvailability of this ResourceNameAvailability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ResourceNameAvailability.


        :return: The message of this ResourceNameAvailability.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResourceNameAvailability.


        :param message: The message of this ResourceNameAvailability.
        :type message: str
        """

        self._message = message

    @property
    def name_available(self):
        """Gets the name_available of this ResourceNameAvailability.

        True indicates name is valid and available.  False indicates the name is invalid, unavailable, or both.

        :return: The name_available of this ResourceNameAvailability.
        :rtype: bool
        """
        return self._name_available

    @name_available.setter
    def name_available(self, name_available):
        """Sets the name_available of this ResourceNameAvailability.

        True indicates name is valid and available.  False indicates the name is invalid, unavailable, or both.

        :param name_available: The name_available of this ResourceNameAvailability.
        :type name_available: bool
        """

        self._name_available = name_available

    @property
    def reason(self):
        """Gets the reason of this ResourceNameAvailability.

        Required if nameAvailable is false. 'Invalid' indicates the name provided does not match Azure WebApp service’s naming requirements. 'AlreadyExists' indicates that the name is already in use and is therefore unavailable.

        :return: The reason of this ResourceNameAvailability.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ResourceNameAvailability.

        Required if nameAvailable is false. 'Invalid' indicates the name provided does not match Azure WebApp service’s naming requirements. 'AlreadyExists' indicates that the name is already in use and is therefore unavailable.

        :param reason: The reason of this ResourceNameAvailability.
        :type reason: str
        """

        self._reason = reason
