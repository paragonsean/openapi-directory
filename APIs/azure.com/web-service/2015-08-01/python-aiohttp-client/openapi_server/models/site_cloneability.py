# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.site_cloneability_criterion import SiteCloneabilityCriterion
from openapi_server import util


class SiteCloneability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocking_characteristics: List[SiteCloneabilityCriterion]=None, blocking_features: List[SiteCloneabilityCriterion]=None, result: str=None, unsupported_features: List[SiteCloneabilityCriterion]=None):
        """SiteCloneability - a model defined in OpenAPI

        :param blocking_characteristics: The blocking_characteristics of this SiteCloneability.
        :param blocking_features: The blocking_features of this SiteCloneability.
        :param result: The result of this SiteCloneability.
        :param unsupported_features: The unsupported_features of this SiteCloneability.
        """
        self.openapi_types = {
            'blocking_characteristics': List[SiteCloneabilityCriterion],
            'blocking_features': List[SiteCloneabilityCriterion],
            'result': str,
            'unsupported_features': List[SiteCloneabilityCriterion]
        }

        self.attribute_map = {
            'blocking_characteristics': 'blockingCharacteristics',
            'blocking_features': 'blockingFeatures',
            'result': 'result',
            'unsupported_features': 'unsupportedFeatures'
        }

        self._blocking_characteristics = blocking_characteristics
        self._blocking_features = blocking_features
        self._result = result
        self._unsupported_features = unsupported_features

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteCloneability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteCloneability of this SiteCloneability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocking_characteristics(self):
        """Gets the blocking_characteristics of this SiteCloneability.

        List of blocking application characteristics

        :return: The blocking_characteristics of this SiteCloneability.
        :rtype: List[SiteCloneabilityCriterion]
        """
        return self._blocking_characteristics

    @blocking_characteristics.setter
    def blocking_characteristics(self, blocking_characteristics):
        """Sets the blocking_characteristics of this SiteCloneability.

        List of blocking application characteristics

        :param blocking_characteristics: The blocking_characteristics of this SiteCloneability.
        :type blocking_characteristics: List[SiteCloneabilityCriterion]
        """

        self._blocking_characteristics = blocking_characteristics

    @property
    def blocking_features(self):
        """Gets the blocking_features of this SiteCloneability.

        List of features enabled on web app that prevent cloning

        :return: The blocking_features of this SiteCloneability.
        :rtype: List[SiteCloneabilityCriterion]
        """
        return self._blocking_features

    @blocking_features.setter
    def blocking_features(self, blocking_features):
        """Sets the blocking_features of this SiteCloneability.

        List of features enabled on web app that prevent cloning

        :param blocking_features: The blocking_features of this SiteCloneability.
        :type blocking_features: List[SiteCloneabilityCriterion]
        """

        self._blocking_features = blocking_features

    @property
    def result(self):
        """Gets the result of this SiteCloneability.

        Name of web app

        :return: The result of this SiteCloneability.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this SiteCloneability.

        Name of web app

        :param result: The result of this SiteCloneability.
        :type result: str
        """
        allowed_values = ["Cloneable", "PartiallyCloneable", "NotCloneable"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def unsupported_features(self):
        """Gets the unsupported_features of this SiteCloneability.

        List of features enabled on web app that are non-blocking but cannot be cloned. The web app can still be cloned              but the features in this list will not be set up on cloned web app.

        :return: The unsupported_features of this SiteCloneability.
        :rtype: List[SiteCloneabilityCriterion]
        """
        return self._unsupported_features

    @unsupported_features.setter
    def unsupported_features(self, unsupported_features):
        """Sets the unsupported_features of this SiteCloneability.

        List of features enabled on web app that are non-blocking but cannot be cloned. The web app can still be cloned              but the features in this list will not be set up on cloned web app.

        :param unsupported_features: The unsupported_features of this SiteCloneability.
        :type unsupported_features: List[SiteCloneabilityCriterion]
        """

        self._unsupported_features = unsupported_features
