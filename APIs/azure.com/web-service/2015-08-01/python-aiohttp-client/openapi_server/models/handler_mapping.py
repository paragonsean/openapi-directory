# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HandlerMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: str=None, extension: str=None, script_processor: str=None):
        """HandlerMapping - a model defined in OpenAPI

        :param arguments: The arguments of this HandlerMapping.
        :param extension: The extension of this HandlerMapping.
        :param script_processor: The script_processor of this HandlerMapping.
        """
        self.openapi_types = {
            'arguments': str,
            'extension': str,
            'script_processor': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'extension': 'extension',
            'script_processor': 'scriptProcessor'
        }

        self._arguments = arguments
        self._extension = extension
        self._script_processor = script_processor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HandlerMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HandlerMapping of this HandlerMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this HandlerMapping.

        Command-line arguments to be passed to the script processor.

        :return: The arguments of this HandlerMapping.
        :rtype: str
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this HandlerMapping.

        Command-line arguments to be passed to the script processor.

        :param arguments: The arguments of this HandlerMapping.
        :type arguments: str
        """

        self._arguments = arguments

    @property
    def extension(self):
        """Gets the extension of this HandlerMapping.

        Requests with this extension will be handled using the specified FastCGI application.

        :return: The extension of this HandlerMapping.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this HandlerMapping.

        Requests with this extension will be handled using the specified FastCGI application.

        :param extension: The extension of this HandlerMapping.
        :type extension: str
        """

        self._extension = extension

    @property
    def script_processor(self):
        """Gets the script_processor of this HandlerMapping.

        The absolute path to the FastCGI application.

        :return: The script_processor of this HandlerMapping.
        :rtype: str
        """
        return self._script_processor

    @script_processor.setter
    def script_processor(self, script_processor):
        """Sets the script_processor of this HandlerMapping.

        The absolute path to the FastCGI application.

        :param script_processor: The script_processor of this HandlerMapping.
        :type script_processor: str
        """

        self._script_processor = script_processor
