# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DomainAvailablilityCheckResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, domain_type: str=None, name: str=None):
        """DomainAvailablilityCheckResult - a model defined in OpenAPI

        :param available: The available of this DomainAvailablilityCheckResult.
        :param domain_type: The domain_type of this DomainAvailablilityCheckResult.
        :param name: The name of this DomainAvailablilityCheckResult.
        """
        self.openapi_types = {
            'available': bool,
            'domain_type': str,
            'name': str
        }

        self.attribute_map = {
            'available': 'available',
            'domain_type': 'domainType',
            'name': 'name'
        }

        self._available = available
        self._domain_type = domain_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainAvailablilityCheckResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainAvailablilityCheckResult of this DomainAvailablilityCheckResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this DomainAvailablilityCheckResult.

        If true then domain can be purchased using CreateDomain Api

        :return: The available of this DomainAvailablilityCheckResult.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this DomainAvailablilityCheckResult.

        If true then domain can be purchased using CreateDomain Api

        :param available: The available of this DomainAvailablilityCheckResult.
        :type available: bool
        """

        self._available = available

    @property
    def domain_type(self):
        """Gets the domain_type of this DomainAvailablilityCheckResult.

        Domain type

        :return: The domain_type of this DomainAvailablilityCheckResult.
        :rtype: str
        """
        return self._domain_type

    @domain_type.setter
    def domain_type(self, domain_type):
        """Sets the domain_type of this DomainAvailablilityCheckResult.

        Domain type

        :param domain_type: The domain_type of this DomainAvailablilityCheckResult.
        :type domain_type: str
        """
        allowed_values = ["Regular", "SoftDeleted"]  # noqa: E501
        if domain_type not in allowed_values:
            raise ValueError(
                "Invalid value for `domain_type` ({0}), must be one of {1}"
                .format(domain_type, allowed_values)
            )

        self._domain_type = domain_type

    @property
    def name(self):
        """Gets the name of this DomainAvailablilityCheckResult.

        Name of the domain

        :return: The name of this DomainAvailablilityCheckResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DomainAvailablilityCheckResult.

        Name of the domain

        :param name: The name of this DomainAvailablilityCheckResult.
        :type name: str
        """

        self._name = name
