# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StampCapacity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_capacity: int=None, compute_mode: str=None, exclude_from_capacity_allocation: bool=None, is_applicable_for_all_compute_modes: bool=None, name: str=None, site_mode: str=None, total_capacity: int=None, unit: str=None, worker_size: str=None, worker_size_id: int=None):
        """StampCapacity - a model defined in OpenAPI

        :param available_capacity: The available_capacity of this StampCapacity.
        :param compute_mode: The compute_mode of this StampCapacity.
        :param exclude_from_capacity_allocation: The exclude_from_capacity_allocation of this StampCapacity.
        :param is_applicable_for_all_compute_modes: The is_applicable_for_all_compute_modes of this StampCapacity.
        :param name: The name of this StampCapacity.
        :param site_mode: The site_mode of this StampCapacity.
        :param total_capacity: The total_capacity of this StampCapacity.
        :param unit: The unit of this StampCapacity.
        :param worker_size: The worker_size of this StampCapacity.
        :param worker_size_id: The worker_size_id of this StampCapacity.
        """
        self.openapi_types = {
            'available_capacity': int,
            'compute_mode': str,
            'exclude_from_capacity_allocation': bool,
            'is_applicable_for_all_compute_modes': bool,
            'name': str,
            'site_mode': str,
            'total_capacity': int,
            'unit': str,
            'worker_size': str,
            'worker_size_id': int
        }

        self.attribute_map = {
            'available_capacity': 'availableCapacity',
            'compute_mode': 'computeMode',
            'exclude_from_capacity_allocation': 'excludeFromCapacityAllocation',
            'is_applicable_for_all_compute_modes': 'isApplicableForAllComputeModes',
            'name': 'name',
            'site_mode': 'siteMode',
            'total_capacity': 'totalCapacity',
            'unit': 'unit',
            'worker_size': 'workerSize',
            'worker_size_id': 'workerSizeId'
        }

        self._available_capacity = available_capacity
        self._compute_mode = compute_mode
        self._exclude_from_capacity_allocation = exclude_from_capacity_allocation
        self._is_applicable_for_all_compute_modes = is_applicable_for_all_compute_modes
        self._name = name
        self._site_mode = site_mode
        self._total_capacity = total_capacity
        self._unit = unit
        self._worker_size = worker_size
        self._worker_size_id = worker_size_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StampCapacity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StampCapacity of this StampCapacity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_capacity(self):
        """Gets the available_capacity of this StampCapacity.

        Available capacity (# of machines, bytes of storage etc...)

        :return: The available_capacity of this StampCapacity.
        :rtype: int
        """
        return self._available_capacity

    @available_capacity.setter
    def available_capacity(self, available_capacity):
        """Sets the available_capacity of this StampCapacity.

        Available capacity (# of machines, bytes of storage etc...)

        :param available_capacity: The available_capacity of this StampCapacity.
        :type available_capacity: int
        """

        self._available_capacity = available_capacity

    @property
    def compute_mode(self):
        """Gets the compute_mode of this StampCapacity.

        Shared/Dedicated workers

        :return: The compute_mode of this StampCapacity.
        :rtype: str
        """
        return self._compute_mode

    @compute_mode.setter
    def compute_mode(self, compute_mode):
        """Sets the compute_mode of this StampCapacity.

        Shared/Dedicated workers

        :param compute_mode: The compute_mode of this StampCapacity.
        :type compute_mode: str
        """
        allowed_values = ["Shared", "Dedicated", "Dynamic"]  # noqa: E501
        if compute_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `compute_mode` ({0}), must be one of {1}"
                .format(compute_mode, allowed_values)
            )

        self._compute_mode = compute_mode

    @property
    def exclude_from_capacity_allocation(self):
        """Gets the exclude_from_capacity_allocation of this StampCapacity.

        If true it includes basic sites              Basic sites are not used for capacity allocation.

        :return: The exclude_from_capacity_allocation of this StampCapacity.
        :rtype: bool
        """
        return self._exclude_from_capacity_allocation

    @exclude_from_capacity_allocation.setter
    def exclude_from_capacity_allocation(self, exclude_from_capacity_allocation):
        """Sets the exclude_from_capacity_allocation of this StampCapacity.

        If true it includes basic sites              Basic sites are not used for capacity allocation.

        :param exclude_from_capacity_allocation: The exclude_from_capacity_allocation of this StampCapacity.
        :type exclude_from_capacity_allocation: bool
        """

        self._exclude_from_capacity_allocation = exclude_from_capacity_allocation

    @property
    def is_applicable_for_all_compute_modes(self):
        """Gets the is_applicable_for_all_compute_modes of this StampCapacity.

        Is capacity applicable for all sites?

        :return: The is_applicable_for_all_compute_modes of this StampCapacity.
        :rtype: bool
        """
        return self._is_applicable_for_all_compute_modes

    @is_applicable_for_all_compute_modes.setter
    def is_applicable_for_all_compute_modes(self, is_applicable_for_all_compute_modes):
        """Sets the is_applicable_for_all_compute_modes of this StampCapacity.

        Is capacity applicable for all sites?

        :param is_applicable_for_all_compute_modes: The is_applicable_for_all_compute_modes of this StampCapacity.
        :type is_applicable_for_all_compute_modes: bool
        """

        self._is_applicable_for_all_compute_modes = is_applicable_for_all_compute_modes

    @property
    def name(self):
        """Gets the name of this StampCapacity.

        Name of the stamp

        :return: The name of this StampCapacity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StampCapacity.

        Name of the stamp

        :param name: The name of this StampCapacity.
        :type name: str
        """

        self._name = name

    @property
    def site_mode(self):
        """Gets the site_mode of this StampCapacity.

        Shared or Dedicated

        :return: The site_mode of this StampCapacity.
        :rtype: str
        """
        return self._site_mode

    @site_mode.setter
    def site_mode(self, site_mode):
        """Sets the site_mode of this StampCapacity.

        Shared or Dedicated

        :param site_mode: The site_mode of this StampCapacity.
        :type site_mode: str
        """

        self._site_mode = site_mode

    @property
    def total_capacity(self):
        """Gets the total_capacity of this StampCapacity.

        Total capacity (# of machines, bytes of storage etc...)

        :return: The total_capacity of this StampCapacity.
        :rtype: int
        """
        return self._total_capacity

    @total_capacity.setter
    def total_capacity(self, total_capacity):
        """Sets the total_capacity of this StampCapacity.

        Total capacity (# of machines, bytes of storage etc...)

        :param total_capacity: The total_capacity of this StampCapacity.
        :type total_capacity: int
        """

        self._total_capacity = total_capacity

    @property
    def unit(self):
        """Gets the unit of this StampCapacity.

        Name of the unit

        :return: The unit of this StampCapacity.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this StampCapacity.

        Name of the unit

        :param unit: The unit of this StampCapacity.
        :type unit: str
        """

        self._unit = unit

    @property
    def worker_size(self):
        """Gets the worker_size of this StampCapacity.

        Size of the machines

        :return: The worker_size of this StampCapacity.
        :rtype: str
        """
        return self._worker_size

    @worker_size.setter
    def worker_size(self, worker_size):
        """Sets the worker_size of this StampCapacity.

        Size of the machines

        :param worker_size: The worker_size of this StampCapacity.
        :type worker_size: str
        """
        allowed_values = ["Default", "Small", "Medium", "Large"]  # noqa: E501
        if worker_size not in allowed_values:
            raise ValueError(
                "Invalid value for `worker_size` ({0}), must be one of {1}"
                .format(worker_size, allowed_values)
            )

        self._worker_size = worker_size

    @property
    def worker_size_id(self):
        """Gets the worker_size_id of this StampCapacity.

        Size Id of machines:               0 - Small              1 - Medium              2 - Large

        :return: The worker_size_id of this StampCapacity.
        :rtype: int
        """
        return self._worker_size_id

    @worker_size_id.setter
    def worker_size_id(self, worker_size_id):
        """Sets the worker_size_id of this StampCapacity.

        Size Id of machines:               0 - Small              1 - Medium              2 - Large

        :param worker_size_id: The worker_size_id of this StampCapacity.
        :type worker_size_id: int
        """

        self._worker_size_id = worker_size_id
