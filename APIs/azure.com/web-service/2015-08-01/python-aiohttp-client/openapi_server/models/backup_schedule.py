# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency_interval: int=None, frequency_unit: str=None, keep_at_least_one_backup: bool=None, last_execution_time: datetime=None, retention_period_in_days: int=None, start_time: datetime=None):
        """BackupSchedule - a model defined in OpenAPI

        :param frequency_interval: The frequency_interval of this BackupSchedule.
        :param frequency_unit: The frequency_unit of this BackupSchedule.
        :param keep_at_least_one_backup: The keep_at_least_one_backup of this BackupSchedule.
        :param last_execution_time: The last_execution_time of this BackupSchedule.
        :param retention_period_in_days: The retention_period_in_days of this BackupSchedule.
        :param start_time: The start_time of this BackupSchedule.
        """
        self.openapi_types = {
            'frequency_interval': int,
            'frequency_unit': str,
            'keep_at_least_one_backup': bool,
            'last_execution_time': datetime,
            'retention_period_in_days': int,
            'start_time': datetime
        }

        self.attribute_map = {
            'frequency_interval': 'frequencyInterval',
            'frequency_unit': 'frequencyUnit',
            'keep_at_least_one_backup': 'keepAtLeastOneBackup',
            'last_execution_time': 'lastExecutionTime',
            'retention_period_in_days': 'retentionPeriodInDays',
            'start_time': 'startTime'
        }

        self._frequency_interval = frequency_interval
        self._frequency_unit = frequency_unit
        self._keep_at_least_one_backup = keep_at_least_one_backup
        self._last_execution_time = last_execution_time
        self._retention_period_in_days = retention_period_in_days
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupSchedule of this BackupSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency_interval(self):
        """Gets the frequency_interval of this BackupSchedule.

        How often should be the backup executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)

        :return: The frequency_interval of this BackupSchedule.
        :rtype: int
        """
        return self._frequency_interval

    @frequency_interval.setter
    def frequency_interval(self, frequency_interval):
        """Sets the frequency_interval of this BackupSchedule.

        How often should be the backup executed (e.g. for weekly backup, this should be set to 7 and FrequencyUnit should be set to Day)

        :param frequency_interval: The frequency_interval of this BackupSchedule.
        :type frequency_interval: int
        """

        self._frequency_interval = frequency_interval

    @property
    def frequency_unit(self):
        """Gets the frequency_unit of this BackupSchedule.

        How often should be the backup executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)

        :return: The frequency_unit of this BackupSchedule.
        :rtype: str
        """
        return self._frequency_unit

    @frequency_unit.setter
    def frequency_unit(self, frequency_unit):
        """Sets the frequency_unit of this BackupSchedule.

        How often should be the backup executed (e.g. for weekly backup, this should be set to Day and FrequencyInterval should be set to 7)

        :param frequency_unit: The frequency_unit of this BackupSchedule.
        :type frequency_unit: str
        """
        allowed_values = ["Day", "Hour"]  # noqa: E501
        if frequency_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency_unit` ({0}), must be one of {1}"
                .format(frequency_unit, allowed_values)
            )

        self._frequency_unit = frequency_unit

    @property
    def keep_at_least_one_backup(self):
        """Gets the keep_at_least_one_backup of this BackupSchedule.

        True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.

        :return: The keep_at_least_one_backup of this BackupSchedule.
        :rtype: bool
        """
        return self._keep_at_least_one_backup

    @keep_at_least_one_backup.setter
    def keep_at_least_one_backup(self, keep_at_least_one_backup):
        """Sets the keep_at_least_one_backup of this BackupSchedule.

        True if the retention policy should always keep at least one backup in the storage account, regardless how old it is; false otherwise.

        :param keep_at_least_one_backup: The keep_at_least_one_backup of this BackupSchedule.
        :type keep_at_least_one_backup: bool
        """

        self._keep_at_least_one_backup = keep_at_least_one_backup

    @property
    def last_execution_time(self):
        """Gets the last_execution_time of this BackupSchedule.

        The last time when this schedule was triggered

        :return: The last_execution_time of this BackupSchedule.
        :rtype: datetime
        """
        return self._last_execution_time

    @last_execution_time.setter
    def last_execution_time(self, last_execution_time):
        """Sets the last_execution_time of this BackupSchedule.

        The last time when this schedule was triggered

        :param last_execution_time: The last_execution_time of this BackupSchedule.
        :type last_execution_time: datetime
        """

        self._last_execution_time = last_execution_time

    @property
    def retention_period_in_days(self):
        """Gets the retention_period_in_days of this BackupSchedule.

        After how many days backups should be deleted

        :return: The retention_period_in_days of this BackupSchedule.
        :rtype: int
        """
        return self._retention_period_in_days

    @retention_period_in_days.setter
    def retention_period_in_days(self, retention_period_in_days):
        """Sets the retention_period_in_days of this BackupSchedule.

        After how many days backups should be deleted

        :param retention_period_in_days: The retention_period_in_days of this BackupSchedule.
        :type retention_period_in_days: int
        """

        self._retention_period_in_days = retention_period_in_days

    @property
    def start_time(self):
        """Gets the start_time of this BackupSchedule.

        When the schedule should start working

        :return: The start_time of this BackupSchedule.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BackupSchedule.

        When the schedule should start working

        :param start_time: The start_time of this BackupSchedule.
        :type start_time: datetime
        """

        self._start_time = start_time
