# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecommendationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_name: str=None, channels: str=None, description: str=None, display_name: str=None, enabled: int=None, level: str=None, message: str=None, name: str=None, recommendation_id: str=None, tags: List[str]=None):
        """RecommendationRule - a model defined in OpenAPI

        :param action_name: The action_name of this RecommendationRule.
        :param channels: The channels of this RecommendationRule.
        :param description: The description of this RecommendationRule.
        :param display_name: The display_name of this RecommendationRule.
        :param enabled: The enabled of this RecommendationRule.
        :param level: The level of this RecommendationRule.
        :param message: The message of this RecommendationRule.
        :param name: The name of this RecommendationRule.
        :param recommendation_id: The recommendation_id of this RecommendationRule.
        :param tags: The tags of this RecommendationRule.
        """
        self.openapi_types = {
            'action_name': str,
            'channels': str,
            'description': str,
            'display_name': str,
            'enabled': int,
            'level': str,
            'message': str,
            'name': str,
            'recommendation_id': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'action_name': 'actionName',
            'channels': 'channels',
            'description': 'description',
            'display_name': 'displayName',
            'enabled': 'enabled',
            'level': 'level',
            'message': 'message',
            'name': 'name',
            'recommendation_id': 'recommendationId',
            'tags': 'tags'
        }

        self._action_name = action_name
        self._channels = channels
        self._description = description
        self._display_name = display_name
        self._enabled = enabled
        self._level = level
        self._message = message
        self._name = name
        self._recommendation_id = recommendation_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecommendationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecommendationRule of this RecommendationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_name(self):
        """Gets the action_name of this RecommendationRule.

        Name of action that is recommended by this rule in string

        :return: The action_name of this RecommendationRule.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this RecommendationRule.

        Name of action that is recommended by this rule in string

        :param action_name: The action_name of this RecommendationRule.
        :type action_name: str
        """

        self._action_name = action_name

    @property
    def channels(self):
        """Gets the channels of this RecommendationRule.

        List of available channels that this rule applies.

        :return: The channels of this RecommendationRule.
        :rtype: str
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this RecommendationRule.

        List of available channels that this rule applies.

        :param channels: The channels of this RecommendationRule.
        :type channels: str
        """
        allowed_values = ["Notification", "Api", "Email", "All"]  # noqa: E501
        if channels not in allowed_values:
            raise ValueError(
                "Invalid value for `channels` ({0}), must be one of {1}"
                .format(channels, allowed_values)
            )

        self._channels = channels

    @property
    def description(self):
        """Gets the description of this RecommendationRule.

        Localized detailed description of the rule

        :return: The description of this RecommendationRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RecommendationRule.

        Localized detailed description of the rule

        :param description: The description of this RecommendationRule.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this RecommendationRule.

        UI friendly name of the rule

        :return: The display_name of this RecommendationRule.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RecommendationRule.

        UI friendly name of the rule

        :param display_name: The display_name of this RecommendationRule.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this RecommendationRule.

        On/off flag indicating the rule is currently enabled or disabled.

        :return: The enabled of this RecommendationRule.
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RecommendationRule.

        On/off flag indicating the rule is currently enabled or disabled.

        :param enabled: The enabled of this RecommendationRule.
        :type enabled: int
        """

        self._enabled = enabled

    @property
    def level(self):
        """Gets the level of this RecommendationRule.

        Level of impact indicating how critical this rule is.

        :return: The level of this RecommendationRule.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this RecommendationRule.

        Level of impact indicating how critical this rule is.

        :param level: The level of this RecommendationRule.
        :type level: str
        """
        allowed_values = ["Critical", "Warning", "Information", "NonUrgentSuggestion"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def message(self):
        """Gets the message of this RecommendationRule.

        Localized name of the rule (Good for UI)

        :return: The message of this RecommendationRule.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RecommendationRule.

        Localized name of the rule (Good for UI)

        :param message: The message of this RecommendationRule.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this RecommendationRule.

        Unique name of the rule

        :return: The name of this RecommendationRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecommendationRule.

        Unique name of the rule

        :param name: The name of this RecommendationRule.
        :type name: str
        """

        self._name = name

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this RecommendationRule.

        Recommendation ID of an associated recommendation object tied to the rule, if exists.              If such an object doesn't exist, it is set to null.

        :return: The recommendation_id of this RecommendationRule.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this RecommendationRule.

        Recommendation ID of an associated recommendation object tied to the rule, if exists.              If such an object doesn't exist, it is set to null.

        :param recommendation_id: The recommendation_id of this RecommendationRule.
        :type recommendation_id: str
        """

        self._recommendation_id = recommendation_id

    @property
    def tags(self):
        """Gets the tags of this RecommendationRule.

        An array of category tags that the rule contains.

        :return: The tags of this RecommendationRule.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RecommendationRule.

        An array of category tags that the rule contains.

        :param tags: The tags of this RecommendationRule.
        :type tags: List[str]
        """

        self._tags = tags
