# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HostNameSslState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, ssl_state: str=None, thumbprint: str=None, to_update: bool=None, virtual_ip: str=None):
        """HostNameSslState - a model defined in OpenAPI

        :param name: The name of this HostNameSslState.
        :param ssl_state: The ssl_state of this HostNameSslState.
        :param thumbprint: The thumbprint of this HostNameSslState.
        :param to_update: The to_update of this HostNameSslState.
        :param virtual_ip: The virtual_ip of this HostNameSslState.
        """
        self.openapi_types = {
            'name': str,
            'ssl_state': str,
            'thumbprint': str,
            'to_update': bool,
            'virtual_ip': str
        }

        self.attribute_map = {
            'name': 'name',
            'ssl_state': 'sslState',
            'thumbprint': 'thumbprint',
            'to_update': 'toUpdate',
            'virtual_ip': 'virtualIP'
        }

        self._name = name
        self._ssl_state = ssl_state
        self._thumbprint = thumbprint
        self._to_update = to_update
        self._virtual_ip = virtual_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostNameSslState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostNameSslState of this HostNameSslState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this HostNameSslState.

        Host name

        :return: The name of this HostNameSslState.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HostNameSslState.

        Host name

        :param name: The name of this HostNameSslState.
        :type name: str
        """

        self._name = name

    @property
    def ssl_state(self):
        """Gets the ssl_state of this HostNameSslState.

        SSL type

        :return: The ssl_state of this HostNameSslState.
        :rtype: str
        """
        return self._ssl_state

    @ssl_state.setter
    def ssl_state(self, ssl_state):
        """Sets the ssl_state of this HostNameSslState.

        SSL type

        :param ssl_state: The ssl_state of this HostNameSslState.
        :type ssl_state: str
        """
        allowed_values = ["Disabled", "SniEnabled", "IpBasedEnabled"]  # noqa: E501
        if ssl_state not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_state` ({0}), must be one of {1}"
                .format(ssl_state, allowed_values)
            )

        self._ssl_state = ssl_state

    @property
    def thumbprint(self):
        """Gets the thumbprint of this HostNameSslState.

        SSL cert thumbprint

        :return: The thumbprint of this HostNameSslState.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this HostNameSslState.

        SSL cert thumbprint

        :param thumbprint: The thumbprint of this HostNameSslState.
        :type thumbprint: str
        """

        self._thumbprint = thumbprint

    @property
    def to_update(self):
        """Gets the to_update of this HostNameSslState.

        Set this flag to update existing host name

        :return: The to_update of this HostNameSslState.
        :rtype: bool
        """
        return self._to_update

    @to_update.setter
    def to_update(self, to_update):
        """Sets the to_update of this HostNameSslState.

        Set this flag to update existing host name

        :param to_update: The to_update of this HostNameSslState.
        :type to_update: bool
        """

        self._to_update = to_update

    @property
    def virtual_ip(self):
        """Gets the virtual_ip of this HostNameSslState.

        Virtual IP address assigned to the host name if IP based SSL is enabled

        :return: The virtual_ip of this HostNameSslState.
        :rtype: str
        """
        return self._virtual_ip

    @virtual_ip.setter
    def virtual_ip(self, virtual_ip):
        """Sets the virtual_ip of this HostNameSslState.

        Virtual IP address assigned to the host name if IP based SSL is enabled

        :param virtual_ip: The virtual_ip of this HostNameSslState.
        :type virtual_ip: str
        """

        self._virtual_ip = virtual_ip
