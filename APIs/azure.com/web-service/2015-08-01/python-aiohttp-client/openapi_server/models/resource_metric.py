# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_value_pair_string_string import KeyValuePairStringString
from openapi_server.models.resource_metric_name import ResourceMetricName
from openapi_server.models.resource_metric_value import ResourceMetricValue
from openapi_server import util


class ResourceMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: datetime=None, metric_values: List[ResourceMetricValue]=None, name: ResourceMetricName=None, properties: List[KeyValuePairStringString]=None, resource_id: str=None, start_time: datetime=None, time_grain: str=None, unit: str=None):
        """ResourceMetric - a model defined in OpenAPI

        :param end_time: The end_time of this ResourceMetric.
        :param metric_values: The metric_values of this ResourceMetric.
        :param name: The name of this ResourceMetric.
        :param properties: The properties of this ResourceMetric.
        :param resource_id: The resource_id of this ResourceMetric.
        :param start_time: The start_time of this ResourceMetric.
        :param time_grain: The time_grain of this ResourceMetric.
        :param unit: The unit of this ResourceMetric.
        """
        self.openapi_types = {
            'end_time': datetime,
            'metric_values': List[ResourceMetricValue],
            'name': ResourceMetricName,
            'properties': List[KeyValuePairStringString],
            'resource_id': str,
            'start_time': datetime,
            'time_grain': str,
            'unit': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'metric_values': 'metricValues',
            'name': 'name',
            'properties': 'properties',
            'resource_id': 'resourceId',
            'start_time': 'startTime',
            'time_grain': 'timeGrain',
            'unit': 'unit'
        }

        self._end_time = end_time
        self._metric_values = metric_values
        self._name = name
        self._properties = properties
        self._resource_id = resource_id
        self._start_time = start_time
        self._time_grain = time_grain
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceMetric of this ResourceMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this ResourceMetric.

        Metric end time

        :return: The end_time of this ResourceMetric.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ResourceMetric.

        Metric end time

        :param end_time: The end_time of this ResourceMetric.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def metric_values(self):
        """Gets the metric_values of this ResourceMetric.

        Metric values

        :return: The metric_values of this ResourceMetric.
        :rtype: List[ResourceMetricValue]
        """
        return self._metric_values

    @metric_values.setter
    def metric_values(self, metric_values):
        """Sets the metric_values of this ResourceMetric.

        Metric values

        :param metric_values: The metric_values of this ResourceMetric.
        :type metric_values: List[ResourceMetricValue]
        """

        self._metric_values = metric_values

    @property
    def name(self):
        """Gets the name of this ResourceMetric.


        :return: The name of this ResourceMetric.
        :rtype: ResourceMetricName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResourceMetric.


        :param name: The name of this ResourceMetric.
        :type name: ResourceMetricName
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this ResourceMetric.

        Properties

        :return: The properties of this ResourceMetric.
        :rtype: List[KeyValuePairStringString]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ResourceMetric.

        Properties

        :param properties: The properties of this ResourceMetric.
        :type properties: List[KeyValuePairStringString]
        """

        self._properties = properties

    @property
    def resource_id(self):
        """Gets the resource_id of this ResourceMetric.

        Metric resource Id

        :return: The resource_id of this ResourceMetric.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ResourceMetric.

        Metric resource Id

        :param resource_id: The resource_id of this ResourceMetric.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def start_time(self):
        """Gets the start_time of this ResourceMetric.

        Metric start time

        :return: The start_time of this ResourceMetric.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ResourceMetric.

        Metric start time

        :param start_time: The start_time of this ResourceMetric.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def time_grain(self):
        """Gets the time_grain of this ResourceMetric.

        Metric granularity. E.g PT1H, PT5M, P1D

        :return: The time_grain of this ResourceMetric.
        :rtype: str
        """
        return self._time_grain

    @time_grain.setter
    def time_grain(self, time_grain):
        """Sets the time_grain of this ResourceMetric.

        Metric granularity. E.g PT1H, PT5M, P1D

        :param time_grain: The time_grain of this ResourceMetric.
        :type time_grain: str
        """

        self._time_grain = time_grain

    @property
    def unit(self):
        """Gets the unit of this ResourceMetric.

        Metric unit

        :return: The unit of this ResourceMetric.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ResourceMetric.

        Metric unit

        :param unit: The unit of this ResourceMetric.
        :type unit: str
        """

        self._unit = unit
