# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloningInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_settings_overrides: Dict[str, str]=None, clone_custom_host_names: bool=None, clone_source_control: bool=None, configure_load_balancing: bool=None, correlation_id: str=None, hosting_environment: str=None, overwrite: bool=None, source_web_app_id: str=None, traffic_manager_profile_id: str=None, traffic_manager_profile_name: str=None):
        """CloningInfo - a model defined in OpenAPI

        :param app_settings_overrides: The app_settings_overrides of this CloningInfo.
        :param clone_custom_host_names: The clone_custom_host_names of this CloningInfo.
        :param clone_source_control: The clone_source_control of this CloningInfo.
        :param configure_load_balancing: The configure_load_balancing of this CloningInfo.
        :param correlation_id: The correlation_id of this CloningInfo.
        :param hosting_environment: The hosting_environment of this CloningInfo.
        :param overwrite: The overwrite of this CloningInfo.
        :param source_web_app_id: The source_web_app_id of this CloningInfo.
        :param traffic_manager_profile_id: The traffic_manager_profile_id of this CloningInfo.
        :param traffic_manager_profile_name: The traffic_manager_profile_name of this CloningInfo.
        """
        self.openapi_types = {
            'app_settings_overrides': Dict[str, str],
            'clone_custom_host_names': bool,
            'clone_source_control': bool,
            'configure_load_balancing': bool,
            'correlation_id': str,
            'hosting_environment': str,
            'overwrite': bool,
            'source_web_app_id': str,
            'traffic_manager_profile_id': str,
            'traffic_manager_profile_name': str
        }

        self.attribute_map = {
            'app_settings_overrides': 'appSettingsOverrides',
            'clone_custom_host_names': 'cloneCustomHostNames',
            'clone_source_control': 'cloneSourceControl',
            'configure_load_balancing': 'configureLoadBalancing',
            'correlation_id': 'correlationId',
            'hosting_environment': 'hostingEnvironment',
            'overwrite': 'overwrite',
            'source_web_app_id': 'sourceWebAppId',
            'traffic_manager_profile_id': 'trafficManagerProfileId',
            'traffic_manager_profile_name': 'trafficManagerProfileName'
        }

        self._app_settings_overrides = app_settings_overrides
        self._clone_custom_host_names = clone_custom_host_names
        self._clone_source_control = clone_source_control
        self._configure_load_balancing = configure_load_balancing
        self._correlation_id = correlation_id
        self._hosting_environment = hosting_environment
        self._overwrite = overwrite
        self._source_web_app_id = source_web_app_id
        self._traffic_manager_profile_id = traffic_manager_profile_id
        self._traffic_manager_profile_name = traffic_manager_profile_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloningInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloningInfo of this CloningInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_settings_overrides(self):
        """Gets the app_settings_overrides of this CloningInfo.

        Application settings overrides for cloned web app. If specified these settings will override the settings cloned               from source web app. If not specified, application settings from source web app are retained.

        :return: The app_settings_overrides of this CloningInfo.
        :rtype: Dict[str, str]
        """
        return self._app_settings_overrides

    @app_settings_overrides.setter
    def app_settings_overrides(self, app_settings_overrides):
        """Sets the app_settings_overrides of this CloningInfo.

        Application settings overrides for cloned web app. If specified these settings will override the settings cloned               from source web app. If not specified, application settings from source web app are retained.

        :param app_settings_overrides: The app_settings_overrides of this CloningInfo.
        :type app_settings_overrides: Dict[str, str]
        """

        self._app_settings_overrides = app_settings_overrides

    @property
    def clone_custom_host_names(self):
        """Gets the clone_custom_host_names of this CloningInfo.

        If true, clone custom hostnames from source web app

        :return: The clone_custom_host_names of this CloningInfo.
        :rtype: bool
        """
        return self._clone_custom_host_names

    @clone_custom_host_names.setter
    def clone_custom_host_names(self, clone_custom_host_names):
        """Sets the clone_custom_host_names of this CloningInfo.

        If true, clone custom hostnames from source web app

        :param clone_custom_host_names: The clone_custom_host_names of this CloningInfo.
        :type clone_custom_host_names: bool
        """

        self._clone_custom_host_names = clone_custom_host_names

    @property
    def clone_source_control(self):
        """Gets the clone_source_control of this CloningInfo.

        Clone source control from source web app

        :return: The clone_source_control of this CloningInfo.
        :rtype: bool
        """
        return self._clone_source_control

    @clone_source_control.setter
    def clone_source_control(self, clone_source_control):
        """Sets the clone_source_control of this CloningInfo.

        Clone source control from source web app

        :param clone_source_control: The clone_source_control of this CloningInfo.
        :type clone_source_control: bool
        """

        self._clone_source_control = clone_source_control

    @property
    def configure_load_balancing(self):
        """Gets the configure_load_balancing of this CloningInfo.

        If specified configure load balancing for source and clone site

        :return: The configure_load_balancing of this CloningInfo.
        :rtype: bool
        """
        return self._configure_load_balancing

    @configure_load_balancing.setter
    def configure_load_balancing(self, configure_load_balancing):
        """Sets the configure_load_balancing of this CloningInfo.

        If specified configure load balancing for source and clone site

        :param configure_load_balancing: The configure_load_balancing of this CloningInfo.
        :type configure_load_balancing: bool
        """

        self._configure_load_balancing = configure_load_balancing

    @property
    def correlation_id(self):
        """Gets the correlation_id of this CloningInfo.

        Correlation Id of cloning operation. This id ties multiple cloning operations              together to use the same snapshot

        :return: The correlation_id of this CloningInfo.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this CloningInfo.

        Correlation Id of cloning operation. This id ties multiple cloning operations              together to use the same snapshot

        :param correlation_id: The correlation_id of this CloningInfo.
        :type correlation_id: str
        """

        self._correlation_id = correlation_id

    @property
    def hosting_environment(self):
        """Gets the hosting_environment of this CloningInfo.

        Hosting environment

        :return: The hosting_environment of this CloningInfo.
        :rtype: str
        """
        return self._hosting_environment

    @hosting_environment.setter
    def hosting_environment(self, hosting_environment):
        """Sets the hosting_environment of this CloningInfo.

        Hosting environment

        :param hosting_environment: The hosting_environment of this CloningInfo.
        :type hosting_environment: str
        """

        self._hosting_environment = hosting_environment

    @property
    def overwrite(self):
        """Gets the overwrite of this CloningInfo.

        Overwrite destination web app

        :return: The overwrite of this CloningInfo.
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """Sets the overwrite of this CloningInfo.

        Overwrite destination web app

        :param overwrite: The overwrite of this CloningInfo.
        :type overwrite: bool
        """

        self._overwrite = overwrite

    @property
    def source_web_app_id(self):
        """Gets the source_web_app_id of this CloningInfo.

        ARM resource id of the source web app. Web app resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots

        :return: The source_web_app_id of this CloningInfo.
        :rtype: str
        """
        return self._source_web_app_id

    @source_web_app_id.setter
    def source_web_app_id(self, source_web_app_id):
        """Sets the source_web_app_id of this CloningInfo.

        ARM resource id of the source web app. Web app resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots

        :param source_web_app_id: The source_web_app_id of this CloningInfo.
        :type source_web_app_id: str
        """

        self._source_web_app_id = source_web_app_id

    @property
    def traffic_manager_profile_id(self):
        """Gets the traffic_manager_profile_id of this CloningInfo.

        ARM resource id of the traffic manager profile to use if it exists. Traffic manager resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}

        :return: The traffic_manager_profile_id of this CloningInfo.
        :rtype: str
        """
        return self._traffic_manager_profile_id

    @traffic_manager_profile_id.setter
    def traffic_manager_profile_id(self, traffic_manager_profile_id):
        """Sets the traffic_manager_profile_id of this CloningInfo.

        ARM resource id of the traffic manager profile to use if it exists. Traffic manager resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}

        :param traffic_manager_profile_id: The traffic_manager_profile_id of this CloningInfo.
        :type traffic_manager_profile_id: str
        """

        self._traffic_manager_profile_id = traffic_manager_profile_id

    @property
    def traffic_manager_profile_name(self):
        """Gets the traffic_manager_profile_name of this CloningInfo.

        Name of traffic manager profile to create. This is only needed if traffic manager profile does not already exist

        :return: The traffic_manager_profile_name of this CloningInfo.
        :rtype: str
        """
        return self._traffic_manager_profile_name

    @traffic_manager_profile_name.setter
    def traffic_manager_profile_name(self, traffic_manager_profile_name):
        """Sets the traffic_manager_profile_name of this CloningInfo.

        Name of traffic manager profile to create. This is only needed if traffic manager profile does not already exist

        :param traffic_manager_profile_name: The traffic_manager_profile_name of this CloningInfo.
        :type traffic_manager_profile_name: str
        """

        self._traffic_manager_profile_name = traffic_manager_profile_name
