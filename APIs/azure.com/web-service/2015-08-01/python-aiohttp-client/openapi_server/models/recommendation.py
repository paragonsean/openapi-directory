# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_name: str=None, channels: str=None, creation_time: datetime=None, display_name: str=None, enabled: int=None, end_time: datetime=None, level: str=None, message: str=None, next_notification_time: datetime=None, notification_expiration_time: datetime=None, notified_time: datetime=None, recommendation_id: str=None, resource_id: str=None, resource_scope: str=None, rule_name: str=None, score: float=None, start_time: datetime=None, tags: List[str]=None):
        """Recommendation - a model defined in OpenAPI

        :param action_name: The action_name of this Recommendation.
        :param channels: The channels of this Recommendation.
        :param creation_time: The creation_time of this Recommendation.
        :param display_name: The display_name of this Recommendation.
        :param enabled: The enabled of this Recommendation.
        :param end_time: The end_time of this Recommendation.
        :param level: The level of this Recommendation.
        :param message: The message of this Recommendation.
        :param next_notification_time: The next_notification_time of this Recommendation.
        :param notification_expiration_time: The notification_expiration_time of this Recommendation.
        :param notified_time: The notified_time of this Recommendation.
        :param recommendation_id: The recommendation_id of this Recommendation.
        :param resource_id: The resource_id of this Recommendation.
        :param resource_scope: The resource_scope of this Recommendation.
        :param rule_name: The rule_name of this Recommendation.
        :param score: The score of this Recommendation.
        :param start_time: The start_time of this Recommendation.
        :param tags: The tags of this Recommendation.
        """
        self.openapi_types = {
            'action_name': str,
            'channels': str,
            'creation_time': datetime,
            'display_name': str,
            'enabled': int,
            'end_time': datetime,
            'level': str,
            'message': str,
            'next_notification_time': datetime,
            'notification_expiration_time': datetime,
            'notified_time': datetime,
            'recommendation_id': str,
            'resource_id': str,
            'resource_scope': str,
            'rule_name': str,
            'score': float,
            'start_time': datetime,
            'tags': List[str]
        }

        self.attribute_map = {
            'action_name': 'actionName',
            'channels': 'channels',
            'creation_time': 'creationTime',
            'display_name': 'displayName',
            'enabled': 'enabled',
            'end_time': 'endTime',
            'level': 'level',
            'message': 'message',
            'next_notification_time': 'nextNotificationTime',
            'notification_expiration_time': 'notificationExpirationTime',
            'notified_time': 'notifiedTime',
            'recommendation_id': 'recommendationId',
            'resource_id': 'resourceId',
            'resource_scope': 'resourceScope',
            'rule_name': 'ruleName',
            'score': 'score',
            'start_time': 'startTime',
            'tags': 'tags'
        }

        self._action_name = action_name
        self._channels = channels
        self._creation_time = creation_time
        self._display_name = display_name
        self._enabled = enabled
        self._end_time = end_time
        self._level = level
        self._message = message
        self._next_notification_time = next_notification_time
        self._notification_expiration_time = notification_expiration_time
        self._notified_time = notified_time
        self._recommendation_id = recommendation_id
        self._resource_id = resource_id
        self._resource_scope = resource_scope
        self._rule_name = rule_name
        self._score = score
        self._start_time = start_time
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation of this Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_name(self):
        """Gets the action_name of this Recommendation.

        Name of action recommended by this object.

        :return: The action_name of this Recommendation.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this Recommendation.

        Name of action recommended by this object.

        :param action_name: The action_name of this Recommendation.
        :type action_name: str
        """

        self._action_name = action_name

    @property
    def channels(self):
        """Gets the channels of this Recommendation.

        List of channels that this recommendation can apply.

        :return: The channels of this Recommendation.
        :rtype: str
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Recommendation.

        List of channels that this recommendation can apply.

        :param channels: The channels of this Recommendation.
        :type channels: str
        """
        allowed_values = ["Notification", "Api", "Email", "All"]  # noqa: E501
        if channels not in allowed_values:
            raise ValueError(
                "Invalid value for `channels` ({0}), must be one of {1}"
                .format(channels, allowed_values)
            )

        self._channels = channels

    @property
    def creation_time(self):
        """Gets the creation_time of this Recommendation.

        Timestamp when this instance was created.

        :return: The creation_time of this Recommendation.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Recommendation.

        Timestamp when this instance was created.

        :param creation_time: The creation_time of this Recommendation.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def display_name(self):
        """Gets the display_name of this Recommendation.

        UI friendly name of the rule (may not be unique)

        :return: The display_name of this Recommendation.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Recommendation.

        UI friendly name of the rule (may not be unique)

        :param display_name: The display_name of this Recommendation.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def enabled(self):
        """Gets the enabled of this Recommendation.

        On/off flag indicating the rule is currently enabled or disabled.

        :return: The enabled of this Recommendation.
        :rtype: int
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Recommendation.

        On/off flag indicating the rule is currently enabled or disabled.

        :param enabled: The enabled of this Recommendation.
        :type enabled: int
        """

        self._enabled = enabled

    @property
    def end_time(self):
        """Gets the end_time of this Recommendation.

        The end time of a range that the recommendation refers to.

        :return: The end_time of this Recommendation.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Recommendation.

        The end time of a range that the recommendation refers to.

        :param end_time: The end_time of this Recommendation.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def level(self):
        """Gets the level of this Recommendation.

        Level indicating how critical this recommendation can impact.

        :return: The level of this Recommendation.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Recommendation.

        Level indicating how critical this recommendation can impact.

        :param level: The level of this Recommendation.
        :type level: str
        """
        allowed_values = ["Critical", "Warning", "Information", "NonUrgentSuggestion"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def message(self):
        """Gets the message of this Recommendation.

        Localized text of recommendation, good for UI.

        :return: The message of this Recommendation.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Recommendation.

        Localized text of recommendation, good for UI.

        :param message: The message of this Recommendation.
        :type message: str
        """

        self._message = message

    @property
    def next_notification_time(self):
        """Gets the next_notification_time of this Recommendation.

        When to notify this recommendation next. Null means that this will never be notified anymore.

        :return: The next_notification_time of this Recommendation.
        :rtype: datetime
        """
        return self._next_notification_time

    @next_notification_time.setter
    def next_notification_time(self, next_notification_time):
        """Sets the next_notification_time of this Recommendation.

        When to notify this recommendation next. Null means that this will never be notified anymore.

        :param next_notification_time: The next_notification_time of this Recommendation.
        :type next_notification_time: datetime
        """

        self._next_notification_time = next_notification_time

    @property
    def notification_expiration_time(self):
        """Gets the notification_expiration_time of this Recommendation.

        Date and time when this notification expires.

        :return: The notification_expiration_time of this Recommendation.
        :rtype: datetime
        """
        return self._notification_expiration_time

    @notification_expiration_time.setter
    def notification_expiration_time(self, notification_expiration_time):
        """Sets the notification_expiration_time of this Recommendation.

        Date and time when this notification expires.

        :param notification_expiration_time: The notification_expiration_time of this Recommendation.
        :type notification_expiration_time: datetime
        """

        self._notification_expiration_time = notification_expiration_time

    @property
    def notified_time(self):
        """Gets the notified_time of this Recommendation.

        Last timestamp this instance was actually notified. Null means that this recommendation hasn't been notified yet.

        :return: The notified_time of this Recommendation.
        :rtype: datetime
        """
        return self._notified_time

    @notified_time.setter
    def notified_time(self, notified_time):
        """Sets the notified_time of this Recommendation.

        Last timestamp this instance was actually notified. Null means that this recommendation hasn't been notified yet.

        :param notified_time: The notified_time of this Recommendation.
        :type notified_time: datetime
        """

        self._notified_time = notified_time

    @property
    def recommendation_id(self):
        """Gets the recommendation_id of this Recommendation.

        A GUID value that each recommendation object is associated with.

        :return: The recommendation_id of this Recommendation.
        :rtype: str
        """
        return self._recommendation_id

    @recommendation_id.setter
    def recommendation_id(self, recommendation_id):
        """Sets the recommendation_id of this Recommendation.

        A GUID value that each recommendation object is associated with.

        :param recommendation_id: The recommendation_id of this Recommendation.
        :type recommendation_id: str
        """

        self._recommendation_id = recommendation_id

    @property
    def resource_id(self):
        """Gets the resource_id of this Recommendation.

        Full ARM resource ID string that this recommendation object is associated with.

        :return: The resource_id of this Recommendation.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this Recommendation.

        Full ARM resource ID string that this recommendation object is associated with.

        :param resource_id: The resource_id of this Recommendation.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_scope(self):
        """Gets the resource_scope of this Recommendation.

        Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.

        :return: The resource_scope of this Recommendation.
        :rtype: str
        """
        return self._resource_scope

    @resource_scope.setter
    def resource_scope(self, resource_scope):
        """Sets the resource_scope of this Recommendation.

        Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.

        :param resource_scope: The resource_scope of this Recommendation.
        :type resource_scope: str
        """

        self._resource_scope = resource_scope

    @property
    def rule_name(self):
        """Gets the rule_name of this Recommendation.

        Unique name of the rule

        :return: The rule_name of this Recommendation.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this Recommendation.

        Unique name of the rule

        :param rule_name: The rule_name of this Recommendation.
        :type rule_name: str
        """

        self._rule_name = rule_name

    @property
    def score(self):
        """Gets the score of this Recommendation.

        A metric value measured by the rule.

        :return: The score of this Recommendation.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Recommendation.

        A metric value measured by the rule.

        :param score: The score of this Recommendation.
        :type score: float
        """

        self._score = score

    @property
    def start_time(self):
        """Gets the start_time of this Recommendation.

        The beginning time of a range that the recommendation refers to.

        :return: The start_time of this Recommendation.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Recommendation.

        The beginning time of a range that the recommendation refers to.

        :param start_time: The start_time of this Recommendation.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def tags(self):
        """Gets the tags of this Recommendation.

        The list of category tags that this recommendation belongs to.

        :return: The tags of this Recommendation.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Recommendation.

        The list of category tags that this recommendation belongs to.

        :param tags: The tags of this Recommendation.
        :type tags: List[str]
        """

        self._tags = tags
