# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CorsSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_origins: List[str]=None):
        """CorsSettings - a model defined in OpenAPI

        :param allowed_origins: The allowed_origins of this CorsSettings.
        """
        self.openapi_types = {
            'allowed_origins': List[str]
        }

        self.attribute_map = {
            'allowed_origins': 'allowedOrigins'
        }

        self._allowed_origins = allowed_origins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CorsSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CorsSettings of this CorsSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this CorsSettings.

        Gets or sets the list of origins that should be allowed to make cross-origin              calls (for example: http://example.com:12345). Use \"*\" to allow all.

        :return: The allowed_origins of this CorsSettings.
        :rtype: List[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this CorsSettings.

        Gets or sets the list of origins that should be allowed to make cross-origin              calls (for example: http://example.com:12345). Use \"*\" to allow all.

        :param allowed_origins: The allowed_origins of this CorsSettings.
        :type allowed_origins: List[str]
        """

        self._allowed_origins = allowed_origins
