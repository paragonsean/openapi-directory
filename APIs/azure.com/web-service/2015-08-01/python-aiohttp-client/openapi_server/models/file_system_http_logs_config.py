# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileSystemHttpLogsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, retention_in_days: int=None, retention_in_mb: int=None):
        """FileSystemHttpLogsConfig - a model defined in OpenAPI

        :param enabled: The enabled of this FileSystemHttpLogsConfig.
        :param retention_in_days: The retention_in_days of this FileSystemHttpLogsConfig.
        :param retention_in_mb: The retention_in_mb of this FileSystemHttpLogsConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'retention_in_days': int,
            'retention_in_mb': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'retention_in_days': 'retentionInDays',
            'retention_in_mb': 'retentionInMb'
        }

        self._enabled = enabled
        self._retention_in_days = retention_in_days
        self._retention_in_mb = retention_in_mb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileSystemHttpLogsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileSystemHttpLogsConfig of this FileSystemHttpLogsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this FileSystemHttpLogsConfig.

        Enabled

        :return: The enabled of this FileSystemHttpLogsConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FileSystemHttpLogsConfig.

        Enabled

        :param enabled: The enabled of this FileSystemHttpLogsConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def retention_in_days(self):
        """Gets the retention_in_days of this FileSystemHttpLogsConfig.

        Retention in days.              Remove files older than X days.              0 or lower means no retention.

        :return: The retention_in_days of this FileSystemHttpLogsConfig.
        :rtype: int
        """
        return self._retention_in_days

    @retention_in_days.setter
    def retention_in_days(self, retention_in_days):
        """Sets the retention_in_days of this FileSystemHttpLogsConfig.

        Retention in days.              Remove files older than X days.              0 or lower means no retention.

        :param retention_in_days: The retention_in_days of this FileSystemHttpLogsConfig.
        :type retention_in_days: int
        """

        self._retention_in_days = retention_in_days

    @property
    def retention_in_mb(self):
        """Gets the retention_in_mb of this FileSystemHttpLogsConfig.

        Maximum size in megabytes that http log files can use.              When reached old log files will be removed to make space for new ones.              Value can range between 25 and 100.

        :return: The retention_in_mb of this FileSystemHttpLogsConfig.
        :rtype: int
        """
        return self._retention_in_mb

    @retention_in_mb.setter
    def retention_in_mb(self, retention_in_mb):
        """Sets the retention_in_mb of this FileSystemHttpLogsConfig.

        Maximum size in megabytes that http log files can use.              When reached old log files will be removed to make space for new ones.              Value can range between 25 and 100.

        :param retention_in_mb: The retention_in_mb of this FileSystemHttpLogsConfig.
        :type retention_in_mb: int
        """

        self._retention_in_mb = retention_in_mb
