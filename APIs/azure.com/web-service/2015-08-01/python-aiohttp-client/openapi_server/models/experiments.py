# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ramp_up_rule import RampUpRule
from openapi_server import util


class Experiments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ramp_up_rules: List[RampUpRule]=None):
        """Experiments - a model defined in OpenAPI

        :param ramp_up_rules: The ramp_up_rules of this Experiments.
        """
        self.openapi_types = {
            'ramp_up_rules': List[RampUpRule]
        }

        self.attribute_map = {
            'ramp_up_rules': 'rampUpRules'
        }

        self._ramp_up_rules = ramp_up_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Experiments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Experiments of this Experiments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ramp_up_rules(self):
        """Gets the ramp_up_rules of this Experiments.

        List of {Microsoft.Web.Hosting.Administration.RampUpRule} objects.

        :return: The ramp_up_rules of this Experiments.
        :rtype: List[RampUpRule]
        """
        return self._ramp_up_rules

    @ramp_up_rules.setter
    def ramp_up_rules(self, ramp_up_rules):
        """Sets the ramp_up_rules of this Experiments.

        List of {Microsoft.Web.Hosting.Administration.RampUpRule} objects.

        :param ramp_up_rules: The ramp_up_rules of this Experiments.
        :type ramp_up_rules: List[RampUpRule]
        """

        self._ramp_up_rules = ramp_up_rules
