# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SiteAuthSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aad_client_id: str=None, additional_login_params: List[str]=None, allowed_audiences: List[str]=None, allowed_external_redirect_urls: List[str]=None, client_id: str=None, client_secret: str=None, default_provider: str=None, enabled: bool=None, facebook_app_id: str=None, facebook_app_secret: str=None, facebook_o_auth_scopes: List[str]=None, google_client_id: str=None, google_client_secret: str=None, google_o_auth_scopes: List[str]=None, http_api_prefix_path: str=None, issuer: str=None, microsoft_account_client_id: str=None, microsoft_account_client_secret: str=None, microsoft_account_o_auth_scopes: List[str]=None, open_id_issuer: str=None, token_refresh_extension_hours: float=None, token_store_enabled: bool=None, twitter_consumer_key: str=None, twitter_consumer_secret: str=None, unauthenticated_client_action: str=None):
        """SiteAuthSettings - a model defined in OpenAPI

        :param aad_client_id: The aad_client_id of this SiteAuthSettings.
        :param additional_login_params: The additional_login_params of this SiteAuthSettings.
        :param allowed_audiences: The allowed_audiences of this SiteAuthSettings.
        :param allowed_external_redirect_urls: The allowed_external_redirect_urls of this SiteAuthSettings.
        :param client_id: The client_id of this SiteAuthSettings.
        :param client_secret: The client_secret of this SiteAuthSettings.
        :param default_provider: The default_provider of this SiteAuthSettings.
        :param enabled: The enabled of this SiteAuthSettings.
        :param facebook_app_id: The facebook_app_id of this SiteAuthSettings.
        :param facebook_app_secret: The facebook_app_secret of this SiteAuthSettings.
        :param facebook_o_auth_scopes: The facebook_o_auth_scopes of this SiteAuthSettings.
        :param google_client_id: The google_client_id of this SiteAuthSettings.
        :param google_client_secret: The google_client_secret of this SiteAuthSettings.
        :param google_o_auth_scopes: The google_o_auth_scopes of this SiteAuthSettings.
        :param http_api_prefix_path: The http_api_prefix_path of this SiteAuthSettings.
        :param issuer: The issuer of this SiteAuthSettings.
        :param microsoft_account_client_id: The microsoft_account_client_id of this SiteAuthSettings.
        :param microsoft_account_client_secret: The microsoft_account_client_secret of this SiteAuthSettings.
        :param microsoft_account_o_auth_scopes: The microsoft_account_o_auth_scopes of this SiteAuthSettings.
        :param open_id_issuer: The open_id_issuer of this SiteAuthSettings.
        :param token_refresh_extension_hours: The token_refresh_extension_hours of this SiteAuthSettings.
        :param token_store_enabled: The token_store_enabled of this SiteAuthSettings.
        :param twitter_consumer_key: The twitter_consumer_key of this SiteAuthSettings.
        :param twitter_consumer_secret: The twitter_consumer_secret of this SiteAuthSettings.
        :param unauthenticated_client_action: The unauthenticated_client_action of this SiteAuthSettings.
        """
        self.openapi_types = {
            'aad_client_id': str,
            'additional_login_params': List[str],
            'allowed_audiences': List[str],
            'allowed_external_redirect_urls': List[str],
            'client_id': str,
            'client_secret': str,
            'default_provider': str,
            'enabled': bool,
            'facebook_app_id': str,
            'facebook_app_secret': str,
            'facebook_o_auth_scopes': List[str],
            'google_client_id': str,
            'google_client_secret': str,
            'google_o_auth_scopes': List[str],
            'http_api_prefix_path': str,
            'issuer': str,
            'microsoft_account_client_id': str,
            'microsoft_account_client_secret': str,
            'microsoft_account_o_auth_scopes': List[str],
            'open_id_issuer': str,
            'token_refresh_extension_hours': float,
            'token_store_enabled': bool,
            'twitter_consumer_key': str,
            'twitter_consumer_secret': str,
            'unauthenticated_client_action': str
        }

        self.attribute_map = {
            'aad_client_id': 'aadClientId',
            'additional_login_params': 'additionalLoginParams',
            'allowed_audiences': 'allowedAudiences',
            'allowed_external_redirect_urls': 'allowedExternalRedirectUrls',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'default_provider': 'defaultProvider',
            'enabled': 'enabled',
            'facebook_app_id': 'facebookAppId',
            'facebook_app_secret': 'facebookAppSecret',
            'facebook_o_auth_scopes': 'facebookOAuthScopes',
            'google_client_id': 'googleClientId',
            'google_client_secret': 'googleClientSecret',
            'google_o_auth_scopes': 'googleOAuthScopes',
            'http_api_prefix_path': 'httpApiPrefixPath',
            'issuer': 'issuer',
            'microsoft_account_client_id': 'microsoftAccountClientId',
            'microsoft_account_client_secret': 'microsoftAccountClientSecret',
            'microsoft_account_o_auth_scopes': 'microsoftAccountOAuthScopes',
            'open_id_issuer': 'openIdIssuer',
            'token_refresh_extension_hours': 'tokenRefreshExtensionHours',
            'token_store_enabled': 'tokenStoreEnabled',
            'twitter_consumer_key': 'twitterConsumerKey',
            'twitter_consumer_secret': 'twitterConsumerSecret',
            'unauthenticated_client_action': 'unauthenticatedClientAction'
        }

        self._aad_client_id = aad_client_id
        self._additional_login_params = additional_login_params
        self._allowed_audiences = allowed_audiences
        self._allowed_external_redirect_urls = allowed_external_redirect_urls
        self._client_id = client_id
        self._client_secret = client_secret
        self._default_provider = default_provider
        self._enabled = enabled
        self._facebook_app_id = facebook_app_id
        self._facebook_app_secret = facebook_app_secret
        self._facebook_o_auth_scopes = facebook_o_auth_scopes
        self._google_client_id = google_client_id
        self._google_client_secret = google_client_secret
        self._google_o_auth_scopes = google_o_auth_scopes
        self._http_api_prefix_path = http_api_prefix_path
        self._issuer = issuer
        self._microsoft_account_client_id = microsoft_account_client_id
        self._microsoft_account_client_secret = microsoft_account_client_secret
        self._microsoft_account_o_auth_scopes = microsoft_account_o_auth_scopes
        self._open_id_issuer = open_id_issuer
        self._token_refresh_extension_hours = token_refresh_extension_hours
        self._token_store_enabled = token_store_enabled
        self._twitter_consumer_key = twitter_consumer_key
        self._twitter_consumer_secret = twitter_consumer_secret
        self._unauthenticated_client_action = unauthenticated_client_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SiteAuthSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SiteAuthSettings of this SiteAuthSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aad_client_id(self):
        """Gets the aad_client_id of this SiteAuthSettings.


        :return: The aad_client_id of this SiteAuthSettings.
        :rtype: str
        """
        return self._aad_client_id

    @aad_client_id.setter
    def aad_client_id(self, aad_client_id):
        """Sets the aad_client_id of this SiteAuthSettings.


        :param aad_client_id: The aad_client_id of this SiteAuthSettings.
        :type aad_client_id: str
        """

        self._aad_client_id = aad_client_id

    @property
    def additional_login_params(self):
        """Gets the additional_login_params of this SiteAuthSettings.

        Gets or sets a list of login parameters to send to the OpenID Connect authorization endpoint when              a user logs in. Each parameter must be in the form \"key=value\".

        :return: The additional_login_params of this SiteAuthSettings.
        :rtype: List[str]
        """
        return self._additional_login_params

    @additional_login_params.setter
    def additional_login_params(self, additional_login_params):
        """Sets the additional_login_params of this SiteAuthSettings.

        Gets or sets a list of login parameters to send to the OpenID Connect authorization endpoint when              a user logs in. Each parameter must be in the form \"key=value\".

        :param additional_login_params: The additional_login_params of this SiteAuthSettings.
        :type additional_login_params: List[str]
        """

        self._additional_login_params = additional_login_params

    @property
    def allowed_audiences(self):
        """Gets the allowed_audiences of this SiteAuthSettings.

        Gets or sets a list of allowed audience values to consider when validating JWTs issued by               Azure Active Directory. Note that the {Microsoft.Web.Hosting.Administration.SiteAuthSettings.ClientId} value is always considered an              allowed audience, regardless of this setting.

        :return: The allowed_audiences of this SiteAuthSettings.
        :rtype: List[str]
        """
        return self._allowed_audiences

    @allowed_audiences.setter
    def allowed_audiences(self, allowed_audiences):
        """Sets the allowed_audiences of this SiteAuthSettings.

        Gets or sets a list of allowed audience values to consider when validating JWTs issued by               Azure Active Directory. Note that the {Microsoft.Web.Hosting.Administration.SiteAuthSettings.ClientId} value is always considered an              allowed audience, regardless of this setting.

        :param allowed_audiences: The allowed_audiences of this SiteAuthSettings.
        :type allowed_audiences: List[str]
        """

        self._allowed_audiences = allowed_audiences

    @property
    def allowed_external_redirect_urls(self):
        """Gets the allowed_external_redirect_urls of this SiteAuthSettings.

        Gets or sets a collection of external URLs that can be redirected to as part of logging in              or logging out of the web app. Note that the query string part of the URL is ignored.              This is an advanced setting typically only needed by Windows Store application backends.              Note that URLs within the current domain are always implicitly allowed.

        :return: The allowed_external_redirect_urls of this SiteAuthSettings.
        :rtype: List[str]
        """
        return self._allowed_external_redirect_urls

    @allowed_external_redirect_urls.setter
    def allowed_external_redirect_urls(self, allowed_external_redirect_urls):
        """Sets the allowed_external_redirect_urls of this SiteAuthSettings.

        Gets or sets a collection of external URLs that can be redirected to as part of logging in              or logging out of the web app. Note that the query string part of the URL is ignored.              This is an advanced setting typically only needed by Windows Store application backends.              Note that URLs within the current domain are always implicitly allowed.

        :param allowed_external_redirect_urls: The allowed_external_redirect_urls of this SiteAuthSettings.
        :type allowed_external_redirect_urls: List[str]
        """

        self._allowed_external_redirect_urls = allowed_external_redirect_urls

    @property
    def client_id(self):
        """Gets the client_id of this SiteAuthSettings.

        Gets or sets the Client ID of this relying party application, known as the client_id.              This setting is required for enabling OpenID Connection authentication with Azure Active Directory or               other 3rd party OpenID Connect providers.              More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html

        :return: The client_id of this SiteAuthSettings.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SiteAuthSettings.

        Gets or sets the Client ID of this relying party application, known as the client_id.              This setting is required for enabling OpenID Connection authentication with Azure Active Directory or               other 3rd party OpenID Connect providers.              More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html

        :param client_id: The client_id of this SiteAuthSettings.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this SiteAuthSettings.

        Gets or sets the Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).              This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.              Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.              More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html

        :return: The client_secret of this SiteAuthSettings.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this SiteAuthSettings.

        Gets or sets the Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).              This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.              Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.              More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html

        :param client_secret: The client_secret of this SiteAuthSettings.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def default_provider(self):
        """Gets the default_provider of this SiteAuthSettings.

        Gets or sets the default authentication provider to use when multiple providers are configured.              This setting is only needed if multiple providers are configured and the unauthenticated client              action is set to \"RedirectToLoginPage\".

        :return: The default_provider of this SiteAuthSettings.
        :rtype: str
        """
        return self._default_provider

    @default_provider.setter
    def default_provider(self, default_provider):
        """Sets the default_provider of this SiteAuthSettings.

        Gets or sets the default authentication provider to use when multiple providers are configured.              This setting is only needed if multiple providers are configured and the unauthenticated client              action is set to \"RedirectToLoginPage\".

        :param default_provider: The default_provider of this SiteAuthSettings.
        :type default_provider: str
        """
        allowed_values = ["AzureActiveDirectory", "Facebook", "Google", "MicrosoftAccount", "Twitter"]  # noqa: E501
        if default_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `default_provider` ({0}), must be one of {1}"
                .format(default_provider, allowed_values)
            )

        self._default_provider = default_provider

    @property
    def enabled(self):
        """Gets the enabled of this SiteAuthSettings.

        Gets or sets a value indicating whether the Authentication / Authorization feature is enabled for the current app.

        :return: The enabled of this SiteAuthSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SiteAuthSettings.

        Gets or sets a value indicating whether the Authentication / Authorization feature is enabled for the current app.

        :param enabled: The enabled of this SiteAuthSettings.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def facebook_app_id(self):
        """Gets the facebook_app_id of this SiteAuthSettings.

        Gets or sets the App ID of the Facebook app used for login.              This setting is required for enabling Facebook Login.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login

        :return: The facebook_app_id of this SiteAuthSettings.
        :rtype: str
        """
        return self._facebook_app_id

    @facebook_app_id.setter
    def facebook_app_id(self, facebook_app_id):
        """Sets the facebook_app_id of this SiteAuthSettings.

        Gets or sets the App ID of the Facebook app used for login.              This setting is required for enabling Facebook Login.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login

        :param facebook_app_id: The facebook_app_id of this SiteAuthSettings.
        :type facebook_app_id: str
        """

        self._facebook_app_id = facebook_app_id

    @property
    def facebook_app_secret(self):
        """Gets the facebook_app_secret of this SiteAuthSettings.

        Gets or sets the App Secret of the Facebook app used for Facebook Login.              This setting is required for enabling Facebook Login.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login

        :return: The facebook_app_secret of this SiteAuthSettings.
        :rtype: str
        """
        return self._facebook_app_secret

    @facebook_app_secret.setter
    def facebook_app_secret(self, facebook_app_secret):
        """Sets the facebook_app_secret of this SiteAuthSettings.

        Gets or sets the App Secret of the Facebook app used for Facebook Login.              This setting is required for enabling Facebook Login.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login

        :param facebook_app_secret: The facebook_app_secret of this SiteAuthSettings.
        :type facebook_app_secret: str
        """

        self._facebook_app_secret = facebook_app_secret

    @property
    def facebook_o_auth_scopes(self):
        """Gets the facebook_o_auth_scopes of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.              This setting is optional.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login

        :return: The facebook_o_auth_scopes of this SiteAuthSettings.
        :rtype: List[str]
        """
        return self._facebook_o_auth_scopes

    @facebook_o_auth_scopes.setter
    def facebook_o_auth_scopes(self, facebook_o_auth_scopes):
        """Sets the facebook_o_auth_scopes of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.              This setting is optional.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login

        :param facebook_o_auth_scopes: The facebook_o_auth_scopes of this SiteAuthSettings.
        :type facebook_o_auth_scopes: List[str]
        """

        self._facebook_o_auth_scopes = facebook_o_auth_scopes

    @property
    def google_client_id(self):
        """Gets the google_client_id of this SiteAuthSettings.

        Gets or sets the OpenID Connect Client ID for the Google web application.              This setting is required for enabling Google Sign-In.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/

        :return: The google_client_id of this SiteAuthSettings.
        :rtype: str
        """
        return self._google_client_id

    @google_client_id.setter
    def google_client_id(self, google_client_id):
        """Sets the google_client_id of this SiteAuthSettings.

        Gets or sets the OpenID Connect Client ID for the Google web application.              This setting is required for enabling Google Sign-In.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/

        :param google_client_id: The google_client_id of this SiteAuthSettings.
        :type google_client_id: str
        """

        self._google_client_id = google_client_id

    @property
    def google_client_secret(self):
        """Gets the google_client_secret of this SiteAuthSettings.

        Gets or sets the client secret associated with the Google web application.              This setting is required for enabling Google Sign-In.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/

        :return: The google_client_secret of this SiteAuthSettings.
        :rtype: str
        """
        return self._google_client_secret

    @google_client_secret.setter
    def google_client_secret(self, google_client_secret):
        """Sets the google_client_secret of this SiteAuthSettings.

        Gets or sets the client secret associated with the Google web application.              This setting is required for enabling Google Sign-In.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/

        :param google_client_secret: The google_client_secret of this SiteAuthSettings.
        :type google_client_secret: str
        """

        self._google_client_secret = google_client_secret

    @property
    def google_o_auth_scopes(self):
        """Gets the google_o_auth_scopes of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.              This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/

        :return: The google_o_auth_scopes of this SiteAuthSettings.
        :rtype: List[str]
        """
        return self._google_o_auth_scopes

    @google_o_auth_scopes.setter
    def google_o_auth_scopes(self, google_o_auth_scopes):
        """Sets the google_o_auth_scopes of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.              This setting is optional. If not specified, \"openid\", \"profile\", and \"email\" are used as default scopes.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/

        :param google_o_auth_scopes: The google_o_auth_scopes of this SiteAuthSettings.
        :type google_o_auth_scopes: List[str]
        """

        self._google_o_auth_scopes = google_o_auth_scopes

    @property
    def http_api_prefix_path(self):
        """Gets the http_api_prefix_path of this SiteAuthSettings.

        Gets or sets the relative path prefix used by platform HTTP APIs.              Changing this value is not recommended except for compatibility reasons.

        :return: The http_api_prefix_path of this SiteAuthSettings.
        :rtype: str
        """
        return self._http_api_prefix_path

    @http_api_prefix_path.setter
    def http_api_prefix_path(self, http_api_prefix_path):
        """Sets the http_api_prefix_path of this SiteAuthSettings.

        Gets or sets the relative path prefix used by platform HTTP APIs.              Changing this value is not recommended except for compatibility reasons.

        :param http_api_prefix_path: The http_api_prefix_path of this SiteAuthSettings.
        :type http_api_prefix_path: str
        """

        self._http_api_prefix_path = http_api_prefix_path

    @property
    def issuer(self):
        """Gets the issuer of this SiteAuthSettings.

        Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.              When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.              This URI is a case-sensitive identifier for the token issuer.              More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html

        :return: The issuer of this SiteAuthSettings.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this SiteAuthSettings.

        Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.              When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.              This URI is a case-sensitive identifier for the token issuer.              More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html

        :param issuer: The issuer of this SiteAuthSettings.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def microsoft_account_client_id(self):
        """Gets the microsoft_account_client_id of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 client ID that was created for the app used for authentication.              This setting is required for enabling Microsoft Account authentication.              Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm

        :return: The microsoft_account_client_id of this SiteAuthSettings.
        :rtype: str
        """
        return self._microsoft_account_client_id

    @microsoft_account_client_id.setter
    def microsoft_account_client_id(self, microsoft_account_client_id):
        """Sets the microsoft_account_client_id of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 client ID that was created for the app used for authentication.              This setting is required for enabling Microsoft Account authentication.              Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm

        :param microsoft_account_client_id: The microsoft_account_client_id of this SiteAuthSettings.
        :type microsoft_account_client_id: str
        """

        self._microsoft_account_client_id = microsoft_account_client_id

    @property
    def microsoft_account_client_secret(self):
        """Gets the microsoft_account_client_secret of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 client secret that was created for the app used for authentication.              This setting is required for enabling Microsoft Account authentication.              Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm

        :return: The microsoft_account_client_secret of this SiteAuthSettings.
        :rtype: str
        """
        return self._microsoft_account_client_secret

    @microsoft_account_client_secret.setter
    def microsoft_account_client_secret(self, microsoft_account_client_secret):
        """Sets the microsoft_account_client_secret of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 client secret that was created for the app used for authentication.              This setting is required for enabling Microsoft Account authentication.              Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm

        :param microsoft_account_client_secret: The microsoft_account_client_secret of this SiteAuthSettings.
        :type microsoft_account_client_secret: str
        """

        self._microsoft_account_client_secret = microsoft_account_client_secret

    @property
    def microsoft_account_o_auth_scopes(self):
        """Gets the microsoft_account_o_auth_scopes of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.              This setting is optional. If not specified, \"wl.basic\" is used as the default scope.              Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx

        :return: The microsoft_account_o_auth_scopes of this SiteAuthSettings.
        :rtype: List[str]
        """
        return self._microsoft_account_o_auth_scopes

    @microsoft_account_o_auth_scopes.setter
    def microsoft_account_o_auth_scopes(self, microsoft_account_o_auth_scopes):
        """Sets the microsoft_account_o_auth_scopes of this SiteAuthSettings.

        Gets or sets the OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.              This setting is optional. If not specified, \"wl.basic\" is used as the default scope.              Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx

        :param microsoft_account_o_auth_scopes: The microsoft_account_o_auth_scopes of this SiteAuthSettings.
        :type microsoft_account_o_auth_scopes: List[str]
        """

        self._microsoft_account_o_auth_scopes = microsoft_account_o_auth_scopes

    @property
    def open_id_issuer(self):
        """Gets the open_id_issuer of this SiteAuthSettings.


        :return: The open_id_issuer of this SiteAuthSettings.
        :rtype: str
        """
        return self._open_id_issuer

    @open_id_issuer.setter
    def open_id_issuer(self, open_id_issuer):
        """Sets the open_id_issuer of this SiteAuthSettings.


        :param open_id_issuer: The open_id_issuer of this SiteAuthSettings.
        :type open_id_issuer: str
        """

        self._open_id_issuer = open_id_issuer

    @property
    def token_refresh_extension_hours(self):
        """Gets the token_refresh_extension_hours of this SiteAuthSettings.

        Gets or sets the number of hours after session token expiration that a session token can be used to              call the token refresh API. The default is 72 hours.

        :return: The token_refresh_extension_hours of this SiteAuthSettings.
        :rtype: float
        """
        return self._token_refresh_extension_hours

    @token_refresh_extension_hours.setter
    def token_refresh_extension_hours(self, token_refresh_extension_hours):
        """Sets the token_refresh_extension_hours of this SiteAuthSettings.

        Gets or sets the number of hours after session token expiration that a session token can be used to              call the token refresh API. The default is 72 hours.

        :param token_refresh_extension_hours: The token_refresh_extension_hours of this SiteAuthSettings.
        :type token_refresh_extension_hours: float
        """

        self._token_refresh_extension_hours = token_refresh_extension_hours

    @property
    def token_store_enabled(self):
        """Gets the token_store_enabled of this SiteAuthSettings.

        Gets or sets a value indicating whether to durably store platform-specific security tokens              obtained during login flows. This capability is disabled by default.

        :return: The token_store_enabled of this SiteAuthSettings.
        :rtype: bool
        """
        return self._token_store_enabled

    @token_store_enabled.setter
    def token_store_enabled(self, token_store_enabled):
        """Sets the token_store_enabled of this SiteAuthSettings.

        Gets or sets a value indicating whether to durably store platform-specific security tokens              obtained during login flows. This capability is disabled by default.

        :param token_store_enabled: The token_store_enabled of this SiteAuthSettings.
        :type token_store_enabled: bool
        """

        self._token_store_enabled = token_store_enabled

    @property
    def twitter_consumer_key(self):
        """Gets the twitter_consumer_key of this SiteAuthSettings.

        Gets or sets the OAuth 1.0a consumer key of the Twitter application used for sign-in.              This setting is required for enabling Twitter Sign-In.              Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in

        :return: The twitter_consumer_key of this SiteAuthSettings.
        :rtype: str
        """
        return self._twitter_consumer_key

    @twitter_consumer_key.setter
    def twitter_consumer_key(self, twitter_consumer_key):
        """Sets the twitter_consumer_key of this SiteAuthSettings.

        Gets or sets the OAuth 1.0a consumer key of the Twitter application used for sign-in.              This setting is required for enabling Twitter Sign-In.              Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in

        :param twitter_consumer_key: The twitter_consumer_key of this SiteAuthSettings.
        :type twitter_consumer_key: str
        """

        self._twitter_consumer_key = twitter_consumer_key

    @property
    def twitter_consumer_secret(self):
        """Gets the twitter_consumer_secret of this SiteAuthSettings.

        Gets or sets the OAuth 1.0a consumer secret of the Twitter application used for sign-in.              This setting is required for enabling Twitter Sign-In.              Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in

        :return: The twitter_consumer_secret of this SiteAuthSettings.
        :rtype: str
        """
        return self._twitter_consumer_secret

    @twitter_consumer_secret.setter
    def twitter_consumer_secret(self, twitter_consumer_secret):
        """Sets the twitter_consumer_secret of this SiteAuthSettings.

        Gets or sets the OAuth 1.0a consumer secret of the Twitter application used for sign-in.              This setting is required for enabling Twitter Sign-In.              Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in

        :param twitter_consumer_secret: The twitter_consumer_secret of this SiteAuthSettings.
        :type twitter_consumer_secret: str
        """

        self._twitter_consumer_secret = twitter_consumer_secret

    @property
    def unauthenticated_client_action(self):
        """Gets the unauthenticated_client_action of this SiteAuthSettings.

        Gets or sets the action to take when an unauthenticated client attempts to access the app.

        :return: The unauthenticated_client_action of this SiteAuthSettings.
        :rtype: str
        """
        return self._unauthenticated_client_action

    @unauthenticated_client_action.setter
    def unauthenticated_client_action(self, unauthenticated_client_action):
        """Sets the unauthenticated_client_action of this SiteAuthSettings.

        Gets or sets the action to take when an unauthenticated client attempts to access the app.

        :param unauthenticated_client_action: The unauthenticated_client_action of this SiteAuthSettings.
        :type unauthenticated_client_action: str
        """
        allowed_values = ["RedirectToLoginPage", "AllowAnonymous"]  # noqa: E501
        if unauthenticated_client_action not in allowed_values:
            raise ValueError(
                "Invalid value for `unauthenticated_client_action` ({0}), must be one of {1}"
                .format(unauthenticated_client_action, allowed_values)
            )

        self._unauthenticated_client_action = unauthenticated_client_action
