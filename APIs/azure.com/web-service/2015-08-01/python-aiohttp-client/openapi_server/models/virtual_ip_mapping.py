# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualIPMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_use: bool=None, internal_http_port: int=None, internal_https_port: int=None, virtual_ip: str=None):
        """VirtualIPMapping - a model defined in OpenAPI

        :param in_use: The in_use of this VirtualIPMapping.
        :param internal_http_port: The internal_http_port of this VirtualIPMapping.
        :param internal_https_port: The internal_https_port of this VirtualIPMapping.
        :param virtual_ip: The virtual_ip of this VirtualIPMapping.
        """
        self.openapi_types = {
            'in_use': bool,
            'internal_http_port': int,
            'internal_https_port': int,
            'virtual_ip': str
        }

        self.attribute_map = {
            'in_use': 'inUse',
            'internal_http_port': 'internalHttpPort',
            'internal_https_port': 'internalHttpsPort',
            'virtual_ip': 'virtualIP'
        }

        self._in_use = in_use
        self._internal_http_port = internal_http_port
        self._internal_https_port = internal_https_port
        self._virtual_ip = virtual_ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualIPMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualIPMapping of this VirtualIPMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_use(self):
        """Gets the in_use of this VirtualIPMapping.

        Is VIP mapping in use

        :return: The in_use of this VirtualIPMapping.
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this VirtualIPMapping.

        Is VIP mapping in use

        :param in_use: The in_use of this VirtualIPMapping.
        :type in_use: bool
        """

        self._in_use = in_use

    @property
    def internal_http_port(self):
        """Gets the internal_http_port of this VirtualIPMapping.

        Internal HTTP port

        :return: The internal_http_port of this VirtualIPMapping.
        :rtype: int
        """
        return self._internal_http_port

    @internal_http_port.setter
    def internal_http_port(self, internal_http_port):
        """Sets the internal_http_port of this VirtualIPMapping.

        Internal HTTP port

        :param internal_http_port: The internal_http_port of this VirtualIPMapping.
        :type internal_http_port: int
        """

        self._internal_http_port = internal_http_port

    @property
    def internal_https_port(self):
        """Gets the internal_https_port of this VirtualIPMapping.

        Internal HTTPS port

        :return: The internal_https_port of this VirtualIPMapping.
        :rtype: int
        """
        return self._internal_https_port

    @internal_https_port.setter
    def internal_https_port(self, internal_https_port):
        """Sets the internal_https_port of this VirtualIPMapping.

        Internal HTTPS port

        :param internal_https_port: The internal_https_port of this VirtualIPMapping.
        :type internal_https_port: int
        """

        self._internal_https_port = internal_https_port

    @property
    def virtual_ip(self):
        """Gets the virtual_ip of this VirtualIPMapping.

        Virtual IP address

        :return: The virtual_ip of this VirtualIPMapping.
        :rtype: str
        """
        return self._virtual_ip

    @virtual_ip.setter
    def virtual_ip(self, virtual_ip):
        """Sets the virtual_ip of this VirtualIPMapping.

        Virtual IP address

        :param virtual_ip: The virtual_ip of this VirtualIPMapping.
        :type virtual_ip: str
        """

        self._virtual_ip = virtual_ip
