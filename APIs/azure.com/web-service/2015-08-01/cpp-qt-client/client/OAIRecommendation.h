/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRecommendation.h
 *
 * Represents a recommendation result generated by the recommendation engine
 */

#ifndef OAIRecommendation_H
#define OAIRecommendation_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRecommendation : public OAIObject {
public:
    OAIRecommendation();
    OAIRecommendation(QString json);
    ~OAIRecommendation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionName() const;
    void setActionName(const QString &action_name);
    bool is_action_name_Set() const;
    bool is_action_name_Valid() const;

    QString getChannels() const;
    void setChannels(const QString &channels);
    bool is_channels_Set() const;
    bool is_channels_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    qint32 getEnabled() const;
    void setEnabled(const qint32 &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getLevel() const;
    void setLevel(const QString &level);
    bool is_level_Set() const;
    bool is_level_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QDateTime getNextNotificationTime() const;
    void setNextNotificationTime(const QDateTime &next_notification_time);
    bool is_next_notification_time_Set() const;
    bool is_next_notification_time_Valid() const;

    QDateTime getNotificationExpirationTime() const;
    void setNotificationExpirationTime(const QDateTime &notification_expiration_time);
    bool is_notification_expiration_time_Set() const;
    bool is_notification_expiration_time_Valid() const;

    QDateTime getNotifiedTime() const;
    void setNotifiedTime(const QDateTime &notified_time);
    bool is_notified_time_Set() const;
    bool is_notified_time_Valid() const;

    QString getRecommendationId() const;
    void setRecommendationId(const QString &recommendation_id);
    bool is_recommendation_id_Set() const;
    bool is_recommendation_id_Valid() const;

    QString getResourceId() const;
    void setResourceId(const QString &resource_id);
    bool is_resource_id_Set() const;
    bool is_resource_id_Valid() const;

    QString getResourceScope() const;
    void setResourceScope(const QString &resource_scope);
    bool is_resource_scope_Set() const;
    bool is_resource_scope_Valid() const;

    QString getRuleName() const;
    void setRuleName(const QString &rule_name);
    bool is_rule_name_Set() const;
    bool is_rule_name_Valid() const;

    double getScore() const;
    void setScore(const double &score);
    bool is_score_Set() const;
    bool is_score_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_name;
    bool m_action_name_isSet;
    bool m_action_name_isValid;

    QString m_channels;
    bool m_channels_isSet;
    bool m_channels_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    qint32 m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_level;
    bool m_level_isSet;
    bool m_level_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QDateTime m_next_notification_time;
    bool m_next_notification_time_isSet;
    bool m_next_notification_time_isValid;

    QDateTime m_notification_expiration_time;
    bool m_notification_expiration_time_isSet;
    bool m_notification_expiration_time_isValid;

    QDateTime m_notified_time;
    bool m_notified_time_isSet;
    bool m_notified_time_isValid;

    QString m_recommendation_id;
    bool m_recommendation_id_isSet;
    bool m_recommendation_id_isValid;

    QString m_resource_id;
    bool m_resource_id_isSet;
    bool m_resource_id_isValid;

    QString m_resource_scope;
    bool m_resource_scope_isSet;
    bool m_resource_scope_isValid;

    QString m_rule_name;
    bool m_rule_name_isSet;
    bool m_rule_name_isValid;

    double m_score;
    bool m_score_isSet;
    bool m_score_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRecommendation)

#endif // OAIRecommendation_H
