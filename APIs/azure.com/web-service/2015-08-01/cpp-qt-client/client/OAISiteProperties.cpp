/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteProperties::OAISiteProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteProperties::OAISiteProperties() {
    this->initializeModel();
}

OAISiteProperties::~OAISiteProperties() {}

void OAISiteProperties::initializeModel() {

    m_app_settings_isSet = false;
    m_app_settings_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAISiteProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteProperties::fromJsonObject(QJsonObject json) {

    m_app_settings_isValid = ::OpenAPI::fromJsonValue(m_app_settings, json[QString("appSettings")]);
    m_app_settings_isSet = !json[QString("appSettings")].isNull() && m_app_settings_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAISiteProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_app_settings.size() > 0) {
        obj.insert(QString("appSettings"), ::OpenAPI::toJsonValue(m_app_settings));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QList<OAINameValuePair> OAISiteProperties::getAppSettings() const {
    return m_app_settings;
}
void OAISiteProperties::setAppSettings(const QList<OAINameValuePair> &app_settings) {
    m_app_settings = app_settings;
    m_app_settings_isSet = true;
}

bool OAISiteProperties::is_app_settings_Set() const{
    return m_app_settings_isSet;
}

bool OAISiteProperties::is_app_settings_Valid() const{
    return m_app_settings_isValid;
}

QList<OAINameValuePair> OAISiteProperties::getMetadata() const {
    return m_metadata;
}
void OAISiteProperties::setMetadata(const QList<OAINameValuePair> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISiteProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISiteProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAINameValuePair> OAISiteProperties::getProperties() const {
    return m_properties;
}
void OAISiteProperties::setProperties(const QList<OAINameValuePair> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISiteProperties::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISiteProperties::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAISiteProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
