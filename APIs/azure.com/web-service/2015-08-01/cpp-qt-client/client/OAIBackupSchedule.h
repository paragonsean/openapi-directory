/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBackupSchedule.h
 *
 * Description of a backup schedule. Describes how often should be the backup performed and what should be the retention policy.
 */

#ifndef OAIBackupSchedule_H
#define OAIBackupSchedule_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBackupSchedule : public OAIObject {
public:
    OAIBackupSchedule();
    OAIBackupSchedule(QString json);
    ~OAIBackupSchedule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getFrequencyInterval() const;
    void setFrequencyInterval(const qint32 &frequency_interval);
    bool is_frequency_interval_Set() const;
    bool is_frequency_interval_Valid() const;

    QString getFrequencyUnit() const;
    void setFrequencyUnit(const QString &frequency_unit);
    bool is_frequency_unit_Set() const;
    bool is_frequency_unit_Valid() const;

    bool isKeepAtLeastOneBackup() const;
    void setKeepAtLeastOneBackup(const bool &keep_at_least_one_backup);
    bool is_keep_at_least_one_backup_Set() const;
    bool is_keep_at_least_one_backup_Valid() const;

    QDateTime getLastExecutionTime() const;
    void setLastExecutionTime(const QDateTime &last_execution_time);
    bool is_last_execution_time_Set() const;
    bool is_last_execution_time_Valid() const;

    qint32 getRetentionPeriodInDays() const;
    void setRetentionPeriodInDays(const qint32 &retention_period_in_days);
    bool is_retention_period_in_days_Set() const;
    bool is_retention_period_in_days_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_frequency_interval;
    bool m_frequency_interval_isSet;
    bool m_frequency_interval_isValid;

    QString m_frequency_unit;
    bool m_frequency_unit_isSet;
    bool m_frequency_unit_isValid;

    bool m_keep_at_least_one_backup;
    bool m_keep_at_least_one_backup_isSet;
    bool m_keep_at_least_one_backup_isValid;

    QDateTime m_last_execution_time;
    bool m_last_execution_time_isSet;
    bool m_last_execution_time_isValid;

    qint32 m_retention_period_in_days;
    bool m_retention_period_in_days_isSet;
    bool m_retention_period_in_days_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBackupSchedule)

#endif // OAIBackupSchedule_H
