/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualIPMapping.h
 *
 * Class that represents a VIP mapping
 */

#ifndef OAIVirtualIPMapping_H
#define OAIVirtualIPMapping_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVirtualIPMapping : public OAIObject {
public:
    OAIVirtualIPMapping();
    OAIVirtualIPMapping(QString json);
    ~OAIVirtualIPMapping() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isInUse() const;
    void setInUse(const bool &in_use);
    bool is_in_use_Set() const;
    bool is_in_use_Valid() const;

    qint32 getInternalHttpPort() const;
    void setInternalHttpPort(const qint32 &internal_http_port);
    bool is_internal_http_port_Set() const;
    bool is_internal_http_port_Valid() const;

    qint32 getInternalHttpsPort() const;
    void setInternalHttpsPort(const qint32 &internal_https_port);
    bool is_internal_https_port_Set() const;
    bool is_internal_https_port_Valid() const;

    QString getVirtualIp() const;
    void setVirtualIp(const QString &virtual_ip);
    bool is_virtual_ip_Set() const;
    bool is_virtual_ip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_in_use;
    bool m_in_use_isSet;
    bool m_in_use_isValid;

    qint32 m_internal_http_port;
    bool m_internal_http_port_isSet;
    bool m_internal_http_port_isValid;

    qint32 m_internal_https_port;
    bool m_internal_https_port_isSet;
    bool m_internal_https_port_isValid;

    QString m_virtual_ip;
    bool m_virtual_ip_isSet;
    bool m_virtual_ip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualIPMapping)

#endif // OAIVirtualIPMapping_H
