/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagedHostingEnvironmentsApi_H
#define OAI_OAIManagedHostingEnvironmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddressResponse.h"
#include "OAIHostingEnvironment.h"
#include "OAIHostingEnvironmentCollection.h"
#include "OAIManagedHostingEnvironment.h"
#include "OAIObject.h"
#include "OAIServerFarmCollection.h"
#include "OAISiteCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagedHostingEnvironmentsApi : public QObject {
    Q_OBJECT

public:
    OAIManagedHostingEnvironmentsApi(const int timeOut = 0);
    ~OAIManagedHostingEnvironmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  managed_hosting_environment_envelope OAIHostingEnvironment [required]
    */
    virtual void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIHostingEnvironment &managed_hosting_environment_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  force_delete bool [optional]
    */
    virtual void managedHostingEnvironmentsDeleteManagedHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &force_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedHostingEnvironmentsGetManagedHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    */
    virtual void managedHostingEnvironmentsGetManagedHostingEnvironmentSites(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedHostingEnvironmentsGetManagedHostingEnvironmentVips(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void managedHostingEnvironmentsGetManagedHostingEnvironments(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsDeleteManagedHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansCallback(OAIHttpRequestWorker *worker);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignal(OAIHostingEnvironment summary);
    void managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignal(OAIObject summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSignal(OAIManagedHostingEnvironment summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignal(OAIObject summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignal(OAIServerFarmCollection summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignal(OAISiteCollection summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignal(OAIAddressResponse summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignal(OAIServerFarmCollection summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentsSignal(OAIHostingEnvironmentCollection summary);


    void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironment summary);
    void managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIManagedHostingEnvironment summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmCollection summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignalFull(OAIHttpRequestWorker *worker, OAIAddressResponse summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmCollection summary);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironmentCollection summary);

    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignalError() instead")
    void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignalE(OAIHostingEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignalError(OAIHostingEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignalError() instead")
    void managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentSignalError() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSignalE(OAIManagedHostingEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSignalError(OAIManagedHostingEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignalError() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignalError() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignalE(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignalError(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignalError() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignalError() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignalE(OAIAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignalError(OAIAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignalError() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignalE(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignalError(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentsSignalError() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentsSignalE(OAIHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentsSignalError(OAIHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignalErrorFull() instead")
    void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignalErrorFull() instead")
    void managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsDeleteManagedHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentSignalErrorFull() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignalErrorFull() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignalErrorFull() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignalErrorFull() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignalErrorFull() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignalErrorFull() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managedHostingEnvironmentsGetManagedHostingEnvironmentsSignalErrorFull() instead")
    void managedHostingEnvironmentsGetManagedHostingEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managedHostingEnvironmentsGetManagedHostingEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
