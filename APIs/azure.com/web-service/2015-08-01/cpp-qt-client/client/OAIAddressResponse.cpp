/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddressResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddressResponse::OAIAddressResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddressResponse::OAIAddressResponse() {
    this->initializeModel();
}

OAIAddressResponse::~OAIAddressResponse() {}

void OAIAddressResponse::initializeModel() {

    m_internal_ip_address_isSet = false;
    m_internal_ip_address_isValid = false;

    m_outbound_ip_addresses_isSet = false;
    m_outbound_ip_addresses_isValid = false;

    m_service_ip_address_isSet = false;
    m_service_ip_address_isValid = false;

    m_vip_mappings_isSet = false;
    m_vip_mappings_isValid = false;
}

void OAIAddressResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddressResponse::fromJsonObject(QJsonObject json) {

    m_internal_ip_address_isValid = ::OpenAPI::fromJsonValue(m_internal_ip_address, json[QString("internalIpAddress")]);
    m_internal_ip_address_isSet = !json[QString("internalIpAddress")].isNull() && m_internal_ip_address_isValid;

    m_outbound_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_outbound_ip_addresses, json[QString("outboundIpAddresses")]);
    m_outbound_ip_addresses_isSet = !json[QString("outboundIpAddresses")].isNull() && m_outbound_ip_addresses_isValid;

    m_service_ip_address_isValid = ::OpenAPI::fromJsonValue(m_service_ip_address, json[QString("serviceIpAddress")]);
    m_service_ip_address_isSet = !json[QString("serviceIpAddress")].isNull() && m_service_ip_address_isValid;

    m_vip_mappings_isValid = ::OpenAPI::fromJsonValue(m_vip_mappings, json[QString("vipMappings")]);
    m_vip_mappings_isSet = !json[QString("vipMappings")].isNull() && m_vip_mappings_isValid;
}

QString OAIAddressResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddressResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_internal_ip_address_isSet) {
        obj.insert(QString("internalIpAddress"), ::OpenAPI::toJsonValue(m_internal_ip_address));
    }
    if (m_outbound_ip_addresses.size() > 0) {
        obj.insert(QString("outboundIpAddresses"), ::OpenAPI::toJsonValue(m_outbound_ip_addresses));
    }
    if (m_service_ip_address_isSet) {
        obj.insert(QString("serviceIpAddress"), ::OpenAPI::toJsonValue(m_service_ip_address));
    }
    if (m_vip_mappings.size() > 0) {
        obj.insert(QString("vipMappings"), ::OpenAPI::toJsonValue(m_vip_mappings));
    }
    return obj;
}

QString OAIAddressResponse::getInternalIpAddress() const {
    return m_internal_ip_address;
}
void OAIAddressResponse::setInternalIpAddress(const QString &internal_ip_address) {
    m_internal_ip_address = internal_ip_address;
    m_internal_ip_address_isSet = true;
}

bool OAIAddressResponse::is_internal_ip_address_Set() const{
    return m_internal_ip_address_isSet;
}

bool OAIAddressResponse::is_internal_ip_address_Valid() const{
    return m_internal_ip_address_isValid;
}

QList<QString> OAIAddressResponse::getOutboundIpAddresses() const {
    return m_outbound_ip_addresses;
}
void OAIAddressResponse::setOutboundIpAddresses(const QList<QString> &outbound_ip_addresses) {
    m_outbound_ip_addresses = outbound_ip_addresses;
    m_outbound_ip_addresses_isSet = true;
}

bool OAIAddressResponse::is_outbound_ip_addresses_Set() const{
    return m_outbound_ip_addresses_isSet;
}

bool OAIAddressResponse::is_outbound_ip_addresses_Valid() const{
    return m_outbound_ip_addresses_isValid;
}

QString OAIAddressResponse::getServiceIpAddress() const {
    return m_service_ip_address;
}
void OAIAddressResponse::setServiceIpAddress(const QString &service_ip_address) {
    m_service_ip_address = service_ip_address;
    m_service_ip_address_isSet = true;
}

bool OAIAddressResponse::is_service_ip_address_Set() const{
    return m_service_ip_address_isSet;
}

bool OAIAddressResponse::is_service_ip_address_Valid() const{
    return m_service_ip_address_isValid;
}

QList<OAIVirtualIPMapping> OAIAddressResponse::getVipMappings() const {
    return m_vip_mappings;
}
void OAIAddressResponse::setVipMappings(const QList<OAIVirtualIPMapping> &vip_mappings) {
    m_vip_mappings = vip_mappings;
    m_vip_mappings_isSet = true;
}

bool OAIAddressResponse::is_vip_mappings_Set() const{
    return m_vip_mappings_isSet;
}

bool OAIAddressResponse::is_vip_mappings_Valid() const{
    return m_vip_mappings_isValid;
}

bool OAIAddressResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_internal_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vip_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddressResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
