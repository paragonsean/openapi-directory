/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualIPMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualIPMapping::OAIVirtualIPMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualIPMapping::OAIVirtualIPMapping() {
    this->initializeModel();
}

OAIVirtualIPMapping::~OAIVirtualIPMapping() {}

void OAIVirtualIPMapping::initializeModel() {

    m_in_use_isSet = false;
    m_in_use_isValid = false;

    m_internal_http_port_isSet = false;
    m_internal_http_port_isValid = false;

    m_internal_https_port_isSet = false;
    m_internal_https_port_isValid = false;

    m_virtual_ip_isSet = false;
    m_virtual_ip_isValid = false;
}

void OAIVirtualIPMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualIPMapping::fromJsonObject(QJsonObject json) {

    m_in_use_isValid = ::OpenAPI::fromJsonValue(m_in_use, json[QString("inUse")]);
    m_in_use_isSet = !json[QString("inUse")].isNull() && m_in_use_isValid;

    m_internal_http_port_isValid = ::OpenAPI::fromJsonValue(m_internal_http_port, json[QString("internalHttpPort")]);
    m_internal_http_port_isSet = !json[QString("internalHttpPort")].isNull() && m_internal_http_port_isValid;

    m_internal_https_port_isValid = ::OpenAPI::fromJsonValue(m_internal_https_port, json[QString("internalHttpsPort")]);
    m_internal_https_port_isSet = !json[QString("internalHttpsPort")].isNull() && m_internal_https_port_isValid;

    m_virtual_ip_isValid = ::OpenAPI::fromJsonValue(m_virtual_ip, json[QString("virtualIP")]);
    m_virtual_ip_isSet = !json[QString("virtualIP")].isNull() && m_virtual_ip_isValid;
}

QString OAIVirtualIPMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualIPMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_in_use_isSet) {
        obj.insert(QString("inUse"), ::OpenAPI::toJsonValue(m_in_use));
    }
    if (m_internal_http_port_isSet) {
        obj.insert(QString("internalHttpPort"), ::OpenAPI::toJsonValue(m_internal_http_port));
    }
    if (m_internal_https_port_isSet) {
        obj.insert(QString("internalHttpsPort"), ::OpenAPI::toJsonValue(m_internal_https_port));
    }
    if (m_virtual_ip_isSet) {
        obj.insert(QString("virtualIP"), ::OpenAPI::toJsonValue(m_virtual_ip));
    }
    return obj;
}

bool OAIVirtualIPMapping::isInUse() const {
    return m_in_use;
}
void OAIVirtualIPMapping::setInUse(const bool &in_use) {
    m_in_use = in_use;
    m_in_use_isSet = true;
}

bool OAIVirtualIPMapping::is_in_use_Set() const{
    return m_in_use_isSet;
}

bool OAIVirtualIPMapping::is_in_use_Valid() const{
    return m_in_use_isValid;
}

qint32 OAIVirtualIPMapping::getInternalHttpPort() const {
    return m_internal_http_port;
}
void OAIVirtualIPMapping::setInternalHttpPort(const qint32 &internal_http_port) {
    m_internal_http_port = internal_http_port;
    m_internal_http_port_isSet = true;
}

bool OAIVirtualIPMapping::is_internal_http_port_Set() const{
    return m_internal_http_port_isSet;
}

bool OAIVirtualIPMapping::is_internal_http_port_Valid() const{
    return m_internal_http_port_isValid;
}

qint32 OAIVirtualIPMapping::getInternalHttpsPort() const {
    return m_internal_https_port;
}
void OAIVirtualIPMapping::setInternalHttpsPort(const qint32 &internal_https_port) {
    m_internal_https_port = internal_https_port;
    m_internal_https_port_isSet = true;
}

bool OAIVirtualIPMapping::is_internal_https_port_Set() const{
    return m_internal_https_port_isSet;
}

bool OAIVirtualIPMapping::is_internal_https_port_Valid() const{
    return m_internal_https_port_isValid;
}

QString OAIVirtualIPMapping::getVirtualIp() const {
    return m_virtual_ip;
}
void OAIVirtualIPMapping::setVirtualIp(const QString &virtual_ip) {
    m_virtual_ip = virtual_ip;
    m_virtual_ip_isSet = true;
}

bool OAIVirtualIPMapping::is_virtual_ip_Set() const{
    return m_virtual_ip_isSet;
}

bool OAIVirtualIPMapping::is_virtual_ip_Valid() const{
    return m_virtual_ip_isValid;
}

bool OAIVirtualIPMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_http_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_https_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualIPMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
