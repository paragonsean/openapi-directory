/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHandlerMapping.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHandlerMapping::OAIHandlerMapping(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHandlerMapping::OAIHandlerMapping() {
    this->initializeModel();
}

OAIHandlerMapping::~OAIHandlerMapping() {}

void OAIHandlerMapping::initializeModel() {

    m_arguments_isSet = false;
    m_arguments_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_script_processor_isSet = false;
    m_script_processor_isValid = false;
}

void OAIHandlerMapping::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHandlerMapping::fromJsonObject(QJsonObject json) {

    m_arguments_isValid = ::OpenAPI::fromJsonValue(m_arguments, json[QString("arguments")]);
    m_arguments_isSet = !json[QString("arguments")].isNull() && m_arguments_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_script_processor_isValid = ::OpenAPI::fromJsonValue(m_script_processor, json[QString("scriptProcessor")]);
    m_script_processor_isSet = !json[QString("scriptProcessor")].isNull() && m_script_processor_isValid;
}

QString OAIHandlerMapping::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHandlerMapping::asJsonObject() const {
    QJsonObject obj;
    if (m_arguments_isSet) {
        obj.insert(QString("arguments"), ::OpenAPI::toJsonValue(m_arguments));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_script_processor_isSet) {
        obj.insert(QString("scriptProcessor"), ::OpenAPI::toJsonValue(m_script_processor));
    }
    return obj;
}

QString OAIHandlerMapping::getArguments() const {
    return m_arguments;
}
void OAIHandlerMapping::setArguments(const QString &arguments) {
    m_arguments = arguments;
    m_arguments_isSet = true;
}

bool OAIHandlerMapping::is_arguments_Set() const{
    return m_arguments_isSet;
}

bool OAIHandlerMapping::is_arguments_Valid() const{
    return m_arguments_isValid;
}

QString OAIHandlerMapping::getExtension() const {
    return m_extension;
}
void OAIHandlerMapping::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIHandlerMapping::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIHandlerMapping::is_extension_Valid() const{
    return m_extension_isValid;
}

QString OAIHandlerMapping::getScriptProcessor() const {
    return m_script_processor;
}
void OAIHandlerMapping::setScriptProcessor(const QString &script_processor) {
    m_script_processor = script_processor;
    m_script_processor_isSet = true;
}

bool OAIHandlerMapping::is_script_processor_Set() const{
    return m_script_processor_isSet;
}

bool OAIHandlerMapping::is_script_processor_Valid() const{
    return m_script_processor_isValid;
}

bool OAIHandlerMapping::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arguments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_script_processor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHandlerMapping::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
