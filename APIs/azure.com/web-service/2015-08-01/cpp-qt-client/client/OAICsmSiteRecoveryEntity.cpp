/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsmSiteRecoveryEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsmSiteRecoveryEntity::OAICsmSiteRecoveryEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsmSiteRecoveryEntity::OAICsmSiteRecoveryEntity() {
    this->initializeModel();
}

OAICsmSiteRecoveryEntity::~OAICsmSiteRecoveryEntity() {}

void OAICsmSiteRecoveryEntity::initializeModel() {

    m_recover_config_isSet = false;
    m_recover_config_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_slot_name_isSet = false;
    m_slot_name_isValid = false;

    m_snapshot_time_isSet = false;
    m_snapshot_time_isValid = false;
}

void OAICsmSiteRecoveryEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsmSiteRecoveryEntity::fromJsonObject(QJsonObject json) {

    m_recover_config_isValid = ::OpenAPI::fromJsonValue(m_recover_config, json[QString("recoverConfig")]);
    m_recover_config_isSet = !json[QString("recoverConfig")].isNull() && m_recover_config_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("siteName")]);
    m_site_name_isSet = !json[QString("siteName")].isNull() && m_site_name_isValid;

    m_slot_name_isValid = ::OpenAPI::fromJsonValue(m_slot_name, json[QString("slotName")]);
    m_slot_name_isSet = !json[QString("slotName")].isNull() && m_slot_name_isValid;

    m_snapshot_time_isValid = ::OpenAPI::fromJsonValue(m_snapshot_time, json[QString("snapshotTime")]);
    m_snapshot_time_isSet = !json[QString("snapshotTime")].isNull() && m_snapshot_time_isValid;
}

QString OAICsmSiteRecoveryEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsmSiteRecoveryEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_recover_config_isSet) {
        obj.insert(QString("recoverConfig"), ::OpenAPI::toJsonValue(m_recover_config));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("siteName"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_slot_name_isSet) {
        obj.insert(QString("slotName"), ::OpenAPI::toJsonValue(m_slot_name));
    }
    if (m_snapshot_time_isSet) {
        obj.insert(QString("snapshotTime"), ::OpenAPI::toJsonValue(m_snapshot_time));
    }
    return obj;
}

bool OAICsmSiteRecoveryEntity::isRecoverConfig() const {
    return m_recover_config;
}
void OAICsmSiteRecoveryEntity::setRecoverConfig(const bool &recover_config) {
    m_recover_config = recover_config;
    m_recover_config_isSet = true;
}

bool OAICsmSiteRecoveryEntity::is_recover_config_Set() const{
    return m_recover_config_isSet;
}

bool OAICsmSiteRecoveryEntity::is_recover_config_Valid() const{
    return m_recover_config_isValid;
}

QString OAICsmSiteRecoveryEntity::getSiteName() const {
    return m_site_name;
}
void OAICsmSiteRecoveryEntity::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAICsmSiteRecoveryEntity::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAICsmSiteRecoveryEntity::is_site_name_Valid() const{
    return m_site_name_isValid;
}

QString OAICsmSiteRecoveryEntity::getSlotName() const {
    return m_slot_name;
}
void OAICsmSiteRecoveryEntity::setSlotName(const QString &slot_name) {
    m_slot_name = slot_name;
    m_slot_name_isSet = true;
}

bool OAICsmSiteRecoveryEntity::is_slot_name_Set() const{
    return m_slot_name_isSet;
}

bool OAICsmSiteRecoveryEntity::is_slot_name_Valid() const{
    return m_slot_name_isValid;
}

QDateTime OAICsmSiteRecoveryEntity::getSnapshotTime() const {
    return m_snapshot_time;
}
void OAICsmSiteRecoveryEntity::setSnapshotTime(const QDateTime &snapshot_time) {
    m_snapshot_time = snapshot_time;
    m_snapshot_time_isSet = true;
}

bool OAICsmSiteRecoveryEntity::is_snapshot_time_Set() const{
    return m_snapshot_time_isSet;
}

bool OAICsmSiteRecoveryEntity::is_snapshot_time_Valid() const{
    return m_snapshot_time_isValid;
}

bool OAICsmSiteRecoveryEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recover_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsmSiteRecoveryEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
