/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatusCodesBasedTrigger.h
 *
 * StatusCodeBasedTrigger
 */

#ifndef OAIStatusCodesBasedTrigger_H
#define OAIStatusCodesBasedTrigger_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStatusCodesBasedTrigger : public OAIObject {
public:
    OAIStatusCodesBasedTrigger();
    OAIStatusCodesBasedTrigger(QString json);
    ~OAIStatusCodesBasedTrigger() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getSubStatus() const;
    void setSubStatus(const qint32 &sub_status);
    bool is_sub_status_Set() const;
    bool is_sub_status_Valid() const;

    QString getTimeInterval() const;
    void setTimeInterval(const QString &time_interval);
    bool is_time_interval_Set() const;
    bool is_time_interval_Valid() const;

    qint32 getWin32Status() const;
    void setWin32Status(const qint32 &win32_status);
    bool is_win32_status_Set() const;
    bool is_win32_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_sub_status;
    bool m_sub_status_isSet;
    bool m_sub_status_isValid;

    QString m_time_interval;
    bool m_time_interval_isSet;
    bool m_time_interval_isValid;

    qint32 m_win32_status;
    bool m_win32_status_isSet;
    bool m_win32_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatusCodesBasedTrigger)

#endif // OAIStatusCodesBasedTrigger_H
