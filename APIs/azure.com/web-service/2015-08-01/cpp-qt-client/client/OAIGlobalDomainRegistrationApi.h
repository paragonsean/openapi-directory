/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlobalDomainRegistrationApi_H
#define OAI_OAIGlobalDomainRegistrationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDomainAvailablilityCheckResult.h"
#include "OAIDomainCollection.h"
#include "OAIDomainControlCenterSsoRequest.h"
#include "OAIDomainRecommendationSearchParameters.h"
#include "OAIDomainRegistrationInput.h"
#include "OAINameIdentifier.h"
#include "OAINameIdentifierCollection.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlobalDomainRegistrationApi : public QObject {
    Q_OBJECT

public:
    OAIGlobalDomainRegistrationApi(const int timeOut = 0);
    ~OAIGlobalDomainRegistrationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  identifier OAINameIdentifier [required]
    */
    virtual void globalDomainRegistrationCheckDomainAvailability(const QString &subscription_id, const QString &api_version, const OAINameIdentifier &identifier);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalDomainRegistrationGetAllDomains(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalDomainRegistrationGetDomainControlCenterSsoRequest(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDomainRecommendationSearchParameters [required]
    */
    virtual void globalDomainRegistrationListDomainRecommendations(const QString &subscription_id, const QString &api_version, const OAIDomainRecommendationSearchParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  domain_registration_input OAIDomainRegistrationInput [required]
    */
    virtual void globalDomainRegistrationValidateDomainPurchaseInformation(const QString &subscription_id, const QString &api_version, const OAIDomainRegistrationInput &domain_registration_input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void globalDomainRegistrationCheckDomainAvailabilityCallback(OAIHttpRequestWorker *worker);
    void globalDomainRegistrationGetAllDomainsCallback(OAIHttpRequestWorker *worker);
    void globalDomainRegistrationGetDomainControlCenterSsoRequestCallback(OAIHttpRequestWorker *worker);
    void globalDomainRegistrationListDomainRecommendationsCallback(OAIHttpRequestWorker *worker);
    void globalDomainRegistrationValidateDomainPurchaseInformationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void globalDomainRegistrationCheckDomainAvailabilitySignal(OAIDomainAvailablilityCheckResult summary);
    void globalDomainRegistrationGetAllDomainsSignal(OAIDomainCollection summary);
    void globalDomainRegistrationGetDomainControlCenterSsoRequestSignal(OAIDomainControlCenterSsoRequest summary);
    void globalDomainRegistrationListDomainRecommendationsSignal(OAINameIdentifierCollection summary);
    void globalDomainRegistrationValidateDomainPurchaseInformationSignal(OAIObject summary);


    void globalDomainRegistrationCheckDomainAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIDomainAvailablilityCheckResult summary);
    void globalDomainRegistrationGetAllDomainsSignalFull(OAIHttpRequestWorker *worker, OAIDomainCollection summary);
    void globalDomainRegistrationGetDomainControlCenterSsoRequestSignalFull(OAIHttpRequestWorker *worker, OAIDomainControlCenterSsoRequest summary);
    void globalDomainRegistrationListDomainRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAINameIdentifierCollection summary);
    void globalDomainRegistrationValidateDomainPurchaseInformationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationCheckDomainAvailabilitySignalError() instead")
    void globalDomainRegistrationCheckDomainAvailabilitySignalE(OAIDomainAvailablilityCheckResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationCheckDomainAvailabilitySignalError(OAIDomainAvailablilityCheckResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationGetAllDomainsSignalError() instead")
    void globalDomainRegistrationGetAllDomainsSignalE(OAIDomainCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationGetAllDomainsSignalError(OAIDomainCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationGetDomainControlCenterSsoRequestSignalError() instead")
    void globalDomainRegistrationGetDomainControlCenterSsoRequestSignalE(OAIDomainControlCenterSsoRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationGetDomainControlCenterSsoRequestSignalError(OAIDomainControlCenterSsoRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationListDomainRecommendationsSignalError() instead")
    void globalDomainRegistrationListDomainRecommendationsSignalE(OAINameIdentifierCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationListDomainRecommendationsSignalError(OAINameIdentifierCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationValidateDomainPurchaseInformationSignalError() instead")
    void globalDomainRegistrationValidateDomainPurchaseInformationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationValidateDomainPurchaseInformationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationCheckDomainAvailabilitySignalErrorFull() instead")
    void globalDomainRegistrationCheckDomainAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationCheckDomainAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationGetAllDomainsSignalErrorFull() instead")
    void globalDomainRegistrationGetAllDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationGetAllDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationGetDomainControlCenterSsoRequestSignalErrorFull() instead")
    void globalDomainRegistrationGetDomainControlCenterSsoRequestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationGetDomainControlCenterSsoRequestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationListDomainRecommendationsSignalErrorFull() instead")
    void globalDomainRegistrationListDomainRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationListDomainRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalDomainRegistrationValidateDomainPurchaseInformationSignalErrorFull() instead")
    void globalDomainRegistrationValidateDomainPurchaseInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalDomainRegistrationValidateDomainPurchaseInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
