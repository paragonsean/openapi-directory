/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICsmSlotEntity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICsmSlotEntity::OAICsmSlotEntity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICsmSlotEntity::OAICsmSlotEntity() {
    this->initializeModel();
}

OAICsmSlotEntity::~OAICsmSlotEntity() {}

void OAICsmSlotEntity::initializeModel() {

    m_preserve_vnet_isSet = false;
    m_preserve_vnet_isValid = false;

    m_target_slot_isSet = false;
    m_target_slot_isValid = false;
}

void OAICsmSlotEntity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICsmSlotEntity::fromJsonObject(QJsonObject json) {

    m_preserve_vnet_isValid = ::OpenAPI::fromJsonValue(m_preserve_vnet, json[QString("preserveVnet")]);
    m_preserve_vnet_isSet = !json[QString("preserveVnet")].isNull() && m_preserve_vnet_isValid;

    m_target_slot_isValid = ::OpenAPI::fromJsonValue(m_target_slot, json[QString("targetSlot")]);
    m_target_slot_isSet = !json[QString("targetSlot")].isNull() && m_target_slot_isValid;
}

QString OAICsmSlotEntity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICsmSlotEntity::asJsonObject() const {
    QJsonObject obj;
    if (m_preserve_vnet_isSet) {
        obj.insert(QString("preserveVnet"), ::OpenAPI::toJsonValue(m_preserve_vnet));
    }
    if (m_target_slot_isSet) {
        obj.insert(QString("targetSlot"), ::OpenAPI::toJsonValue(m_target_slot));
    }
    return obj;
}

bool OAICsmSlotEntity::isPreserveVnet() const {
    return m_preserve_vnet;
}
void OAICsmSlotEntity::setPreserveVnet(const bool &preserve_vnet) {
    m_preserve_vnet = preserve_vnet;
    m_preserve_vnet_isSet = true;
}

bool OAICsmSlotEntity::is_preserve_vnet_Set() const{
    return m_preserve_vnet_isSet;
}

bool OAICsmSlotEntity::is_preserve_vnet_Valid() const{
    return m_preserve_vnet_isValid;
}

QString OAICsmSlotEntity::getTargetSlot() const {
    return m_target_slot;
}
void OAICsmSlotEntity::setTargetSlot(const QString &target_slot) {
    m_target_slot = target_slot;
    m_target_slot_isSet = true;
}

bool OAICsmSlotEntity::is_target_slot_Set() const{
    return m_target_slot_isSet;
}

bool OAICsmSlotEntity::is_target_slot_Valid() const{
    return m_target_slot_isValid;
}

bool OAICsmSlotEntity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preserve_vnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_slot_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICsmSlotEntity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
