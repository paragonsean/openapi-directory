/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStampCapacity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStampCapacity::OAIStampCapacity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStampCapacity::OAIStampCapacity() {
    this->initializeModel();
}

OAIStampCapacity::~OAIStampCapacity() {}

void OAIStampCapacity::initializeModel() {

    m_available_capacity_isSet = false;
    m_available_capacity_isValid = false;

    m_compute_mode_isSet = false;
    m_compute_mode_isValid = false;

    m_exclude_from_capacity_allocation_isSet = false;
    m_exclude_from_capacity_allocation_isValid = false;

    m_is_applicable_for_all_compute_modes_isSet = false;
    m_is_applicable_for_all_compute_modes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_mode_isSet = false;
    m_site_mode_isValid = false;

    m_total_capacity_isSet = false;
    m_total_capacity_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_worker_size_isSet = false;
    m_worker_size_isValid = false;

    m_worker_size_id_isSet = false;
    m_worker_size_id_isValid = false;
}

void OAIStampCapacity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStampCapacity::fromJsonObject(QJsonObject json) {

    m_available_capacity_isValid = ::OpenAPI::fromJsonValue(m_available_capacity, json[QString("availableCapacity")]);
    m_available_capacity_isSet = !json[QString("availableCapacity")].isNull() && m_available_capacity_isValid;

    m_compute_mode_isValid = ::OpenAPI::fromJsonValue(m_compute_mode, json[QString("computeMode")]);
    m_compute_mode_isSet = !json[QString("computeMode")].isNull() && m_compute_mode_isValid;

    m_exclude_from_capacity_allocation_isValid = ::OpenAPI::fromJsonValue(m_exclude_from_capacity_allocation, json[QString("excludeFromCapacityAllocation")]);
    m_exclude_from_capacity_allocation_isSet = !json[QString("excludeFromCapacityAllocation")].isNull() && m_exclude_from_capacity_allocation_isValid;

    m_is_applicable_for_all_compute_modes_isValid = ::OpenAPI::fromJsonValue(m_is_applicable_for_all_compute_modes, json[QString("isApplicableForAllComputeModes")]);
    m_is_applicable_for_all_compute_modes_isSet = !json[QString("isApplicableForAllComputeModes")].isNull() && m_is_applicable_for_all_compute_modes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_mode_isValid = ::OpenAPI::fromJsonValue(m_site_mode, json[QString("siteMode")]);
    m_site_mode_isSet = !json[QString("siteMode")].isNull() && m_site_mode_isValid;

    m_total_capacity_isValid = ::OpenAPI::fromJsonValue(m_total_capacity, json[QString("totalCapacity")]);
    m_total_capacity_isSet = !json[QString("totalCapacity")].isNull() && m_total_capacity_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_worker_size_isValid = ::OpenAPI::fromJsonValue(m_worker_size, json[QString("workerSize")]);
    m_worker_size_isSet = !json[QString("workerSize")].isNull() && m_worker_size_isValid;

    m_worker_size_id_isValid = ::OpenAPI::fromJsonValue(m_worker_size_id, json[QString("workerSizeId")]);
    m_worker_size_id_isSet = !json[QString("workerSizeId")].isNull() && m_worker_size_id_isValid;
}

QString OAIStampCapacity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStampCapacity::asJsonObject() const {
    QJsonObject obj;
    if (m_available_capacity_isSet) {
        obj.insert(QString("availableCapacity"), ::OpenAPI::toJsonValue(m_available_capacity));
    }
    if (m_compute_mode_isSet) {
        obj.insert(QString("computeMode"), ::OpenAPI::toJsonValue(m_compute_mode));
    }
    if (m_exclude_from_capacity_allocation_isSet) {
        obj.insert(QString("excludeFromCapacityAllocation"), ::OpenAPI::toJsonValue(m_exclude_from_capacity_allocation));
    }
    if (m_is_applicable_for_all_compute_modes_isSet) {
        obj.insert(QString("isApplicableForAllComputeModes"), ::OpenAPI::toJsonValue(m_is_applicable_for_all_compute_modes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_mode_isSet) {
        obj.insert(QString("siteMode"), ::OpenAPI::toJsonValue(m_site_mode));
    }
    if (m_total_capacity_isSet) {
        obj.insert(QString("totalCapacity"), ::OpenAPI::toJsonValue(m_total_capacity));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_worker_size_isSet) {
        obj.insert(QString("workerSize"), ::OpenAPI::toJsonValue(m_worker_size));
    }
    if (m_worker_size_id_isSet) {
        obj.insert(QString("workerSizeId"), ::OpenAPI::toJsonValue(m_worker_size_id));
    }
    return obj;
}

qint64 OAIStampCapacity::getAvailableCapacity() const {
    return m_available_capacity;
}
void OAIStampCapacity::setAvailableCapacity(const qint64 &available_capacity) {
    m_available_capacity = available_capacity;
    m_available_capacity_isSet = true;
}

bool OAIStampCapacity::is_available_capacity_Set() const{
    return m_available_capacity_isSet;
}

bool OAIStampCapacity::is_available_capacity_Valid() const{
    return m_available_capacity_isValid;
}

QString OAIStampCapacity::getComputeMode() const {
    return m_compute_mode;
}
void OAIStampCapacity::setComputeMode(const QString &compute_mode) {
    m_compute_mode = compute_mode;
    m_compute_mode_isSet = true;
}

bool OAIStampCapacity::is_compute_mode_Set() const{
    return m_compute_mode_isSet;
}

bool OAIStampCapacity::is_compute_mode_Valid() const{
    return m_compute_mode_isValid;
}

bool OAIStampCapacity::isExcludeFromCapacityAllocation() const {
    return m_exclude_from_capacity_allocation;
}
void OAIStampCapacity::setExcludeFromCapacityAllocation(const bool &exclude_from_capacity_allocation) {
    m_exclude_from_capacity_allocation = exclude_from_capacity_allocation;
    m_exclude_from_capacity_allocation_isSet = true;
}

bool OAIStampCapacity::is_exclude_from_capacity_allocation_Set() const{
    return m_exclude_from_capacity_allocation_isSet;
}

bool OAIStampCapacity::is_exclude_from_capacity_allocation_Valid() const{
    return m_exclude_from_capacity_allocation_isValid;
}

bool OAIStampCapacity::isIsApplicableForAllComputeModes() const {
    return m_is_applicable_for_all_compute_modes;
}
void OAIStampCapacity::setIsApplicableForAllComputeModes(const bool &is_applicable_for_all_compute_modes) {
    m_is_applicable_for_all_compute_modes = is_applicable_for_all_compute_modes;
    m_is_applicable_for_all_compute_modes_isSet = true;
}

bool OAIStampCapacity::is_is_applicable_for_all_compute_modes_Set() const{
    return m_is_applicable_for_all_compute_modes_isSet;
}

bool OAIStampCapacity::is_is_applicable_for_all_compute_modes_Valid() const{
    return m_is_applicable_for_all_compute_modes_isValid;
}

QString OAIStampCapacity::getName() const {
    return m_name;
}
void OAIStampCapacity::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStampCapacity::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStampCapacity::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStampCapacity::getSiteMode() const {
    return m_site_mode;
}
void OAIStampCapacity::setSiteMode(const QString &site_mode) {
    m_site_mode = site_mode;
    m_site_mode_isSet = true;
}

bool OAIStampCapacity::is_site_mode_Set() const{
    return m_site_mode_isSet;
}

bool OAIStampCapacity::is_site_mode_Valid() const{
    return m_site_mode_isValid;
}

qint64 OAIStampCapacity::getTotalCapacity() const {
    return m_total_capacity;
}
void OAIStampCapacity::setTotalCapacity(const qint64 &total_capacity) {
    m_total_capacity = total_capacity;
    m_total_capacity_isSet = true;
}

bool OAIStampCapacity::is_total_capacity_Set() const{
    return m_total_capacity_isSet;
}

bool OAIStampCapacity::is_total_capacity_Valid() const{
    return m_total_capacity_isValid;
}

QString OAIStampCapacity::getUnit() const {
    return m_unit;
}
void OAIStampCapacity::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIStampCapacity::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIStampCapacity::is_unit_Valid() const{
    return m_unit_isValid;
}

QString OAIStampCapacity::getWorkerSize() const {
    return m_worker_size;
}
void OAIStampCapacity::setWorkerSize(const QString &worker_size) {
    m_worker_size = worker_size;
    m_worker_size_isSet = true;
}

bool OAIStampCapacity::is_worker_size_Set() const{
    return m_worker_size_isSet;
}

bool OAIStampCapacity::is_worker_size_Valid() const{
    return m_worker_size_isValid;
}

qint32 OAIStampCapacity::getWorkerSizeId() const {
    return m_worker_size_id;
}
void OAIStampCapacity::setWorkerSizeId(const qint32 &worker_size_id) {
    m_worker_size_id = worker_size_id;
    m_worker_size_id_isSet = true;
}

bool OAIStampCapacity::is_worker_size_id_Set() const{
    return m_worker_size_id_isSet;
}

bool OAIStampCapacity::is_worker_size_id_Valid() const{
    return m_worker_size_id_isValid;
}

bool OAIStampCapacity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_from_capacity_allocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_applicable_for_all_compute_modes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_worker_size_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStampCapacity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
