/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendationRule::OAIRecommendationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendationRule::OAIRecommendationRule() {
    this->initializeModel();
}

OAIRecommendationRule::~OAIRecommendationRule() {}

void OAIRecommendationRule::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRecommendationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendationRule::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("actionName")]);
    m_action_name_isSet = !json[QString("actionName")].isNull() && m_action_name_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("recommendationId")]);
    m_recommendation_id_isSet = !json[QString("recommendationId")].isNull() && m_recommendation_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIRecommendationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("actionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_channels_isSet) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("recommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIRecommendationRule::getActionName() const {
    return m_action_name;
}
void OAIRecommendationRule::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIRecommendationRule::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIRecommendationRule::is_action_name_Valid() const{
    return m_action_name_isValid;
}

QString OAIRecommendationRule::getChannels() const {
    return m_channels;
}
void OAIRecommendationRule::setChannels(const QString &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIRecommendationRule::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIRecommendationRule::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIRecommendationRule::getDescription() const {
    return m_description;
}
void OAIRecommendationRule::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecommendationRule::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecommendationRule::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRecommendationRule::getDisplayName() const {
    return m_display_name;
}
void OAIRecommendationRule::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRecommendationRule::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRecommendationRule::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIRecommendationRule::getEnabled() const {
    return m_enabled;
}
void OAIRecommendationRule::setEnabled(const qint32 &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIRecommendationRule::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIRecommendationRule::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIRecommendationRule::getLevel() const {
    return m_level;
}
void OAIRecommendationRule::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIRecommendationRule::is_level_Set() const{
    return m_level_isSet;
}

bool OAIRecommendationRule::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIRecommendationRule::getMessage() const {
    return m_message;
}
void OAIRecommendationRule::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRecommendationRule::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRecommendationRule::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIRecommendationRule::getName() const {
    return m_name;
}
void OAIRecommendationRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecommendationRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecommendationRule::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecommendationRule::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIRecommendationRule::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIRecommendationRule::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIRecommendationRule::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QList<QString> OAIRecommendationRule::getTags() const {
    return m_tags;
}
void OAIRecommendationRule::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRecommendationRule::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRecommendationRule::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRecommendationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channels_isValid && m_level_isValid && true;
}

} // namespace OpenAPI
