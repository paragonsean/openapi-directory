/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITopLevelDomainsApi_H
#define OAI_OAITopLevelDomainsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITldLegalAgreementCollection.h"
#include "OAITopLevelDomain.h"
#include "OAITopLevelDomainAgreementOption.h"
#include "OAITopLevelDomainCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITopLevelDomainsApi : public QObject {
    Q_OBJECT

public:
    OAITopLevelDomainsApi(const int timeOut = 0);
    ~OAITopLevelDomainsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topLevelDomainsGetGetTopLevelDomains(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void topLevelDomainsGetTopLevelDomain(const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  agreement_option OAITopLevelDomainAgreementOption [required]
    */
    virtual void topLevelDomainsListTopLevelDomainAgreements(const QString &name, const QString &subscription_id, const QString &api_version, const OAITopLevelDomainAgreementOption &agreement_option);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void topLevelDomainsGetGetTopLevelDomainsCallback(OAIHttpRequestWorker *worker);
    void topLevelDomainsGetTopLevelDomainCallback(OAIHttpRequestWorker *worker);
    void topLevelDomainsListTopLevelDomainAgreementsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void topLevelDomainsGetGetTopLevelDomainsSignal(OAITopLevelDomainCollection summary);
    void topLevelDomainsGetTopLevelDomainSignal(OAITopLevelDomain summary);
    void topLevelDomainsListTopLevelDomainAgreementsSignal(OAITldLegalAgreementCollection summary);


    void topLevelDomainsGetGetTopLevelDomainsSignalFull(OAIHttpRequestWorker *worker, OAITopLevelDomainCollection summary);
    void topLevelDomainsGetTopLevelDomainSignalFull(OAIHttpRequestWorker *worker, OAITopLevelDomain summary);
    void topLevelDomainsListTopLevelDomainAgreementsSignalFull(OAIHttpRequestWorker *worker, OAITldLegalAgreementCollection summary);

    Q_DECL_DEPRECATED_X("Use topLevelDomainsGetGetTopLevelDomainsSignalError() instead")
    void topLevelDomainsGetGetTopLevelDomainsSignalE(OAITopLevelDomainCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topLevelDomainsGetGetTopLevelDomainsSignalError(OAITopLevelDomainCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topLevelDomainsGetTopLevelDomainSignalError() instead")
    void topLevelDomainsGetTopLevelDomainSignalE(OAITopLevelDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topLevelDomainsGetTopLevelDomainSignalError(OAITopLevelDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topLevelDomainsListTopLevelDomainAgreementsSignalError() instead")
    void topLevelDomainsListTopLevelDomainAgreementsSignalE(OAITldLegalAgreementCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topLevelDomainsListTopLevelDomainAgreementsSignalError(OAITldLegalAgreementCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use topLevelDomainsGetGetTopLevelDomainsSignalErrorFull() instead")
    void topLevelDomainsGetGetTopLevelDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topLevelDomainsGetGetTopLevelDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topLevelDomainsGetTopLevelDomainSignalErrorFull() instead")
    void topLevelDomainsGetTopLevelDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topLevelDomainsGetTopLevelDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topLevelDomainsListTopLevelDomainAgreementsSignalErrorFull() instead")
    void topLevelDomainsListTopLevelDomainAgreementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topLevelDomainsListTopLevelDomainAgreementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
