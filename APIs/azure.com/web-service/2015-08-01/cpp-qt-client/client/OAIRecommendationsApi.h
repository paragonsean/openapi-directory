/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecommendationsApi_H
#define OAI_OAIRecommendationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRecommendation.h"
#include "OAIRecommendationRule.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecommendationsApi : public QObject {
    Q_OBJECT

public:
    OAIRecommendationsApi(const int timeOut = 0);
    ~OAIRecommendationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  featured bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void recommendationsGetRecommendationBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &featured = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QString [optional]
    * @param[in]  end_time QString [optional]
    */
    virtual void recommendationsGetRecommendationHistoryForSite(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  featured bool [optional]
    * @param[in]  site_sku QString [optional]
    * @param[in]  num_slots qint32 [optional]
    */
    virtual void recommendationsGetRecommendedRulesForSite(const QString &resource_group_name, const QString &site_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &featured = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &site_sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &num_slots = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  site_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void recommendationsGetRuleDetailsBySiteName(const QString &resource_group_name, const QString &site_name, const QString &name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void recommendationsGetRecommendationBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void recommendationsGetRecommendationHistoryForSiteCallback(OAIHttpRequestWorker *worker);
    void recommendationsGetRecommendedRulesForSiteCallback(OAIHttpRequestWorker *worker);
    void recommendationsGetRuleDetailsBySiteNameCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void recommendationsGetRecommendationBySubscriptionSignal(QList<OAIRecommendation> summary);
    void recommendationsGetRecommendationHistoryForSiteSignal(QList<OAIRecommendation> summary);
    void recommendationsGetRecommendedRulesForSiteSignal(QList<OAIRecommendation> summary);
    void recommendationsGetRuleDetailsBySiteNameSignal(OAIRecommendationRule summary);


    void recommendationsGetRecommendationBySubscriptionSignalFull(OAIHttpRequestWorker *worker, QList<OAIRecommendation> summary);
    void recommendationsGetRecommendationHistoryForSiteSignalFull(OAIHttpRequestWorker *worker, QList<OAIRecommendation> summary);
    void recommendationsGetRecommendedRulesForSiteSignalFull(OAIHttpRequestWorker *worker, QList<OAIRecommendation> summary);
    void recommendationsGetRuleDetailsBySiteNameSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationRule summary);

    Q_DECL_DEPRECATED_X("Use recommendationsGetRecommendationBySubscriptionSignalError() instead")
    void recommendationsGetRecommendationBySubscriptionSignalE(QList<OAIRecommendation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRecommendationBySubscriptionSignalError(QList<OAIRecommendation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRecommendationHistoryForSiteSignalError() instead")
    void recommendationsGetRecommendationHistoryForSiteSignalE(QList<OAIRecommendation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRecommendationHistoryForSiteSignalError(QList<OAIRecommendation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRecommendedRulesForSiteSignalError() instead")
    void recommendationsGetRecommendedRulesForSiteSignalE(QList<OAIRecommendation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRecommendedRulesForSiteSignalError(QList<OAIRecommendation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRuleDetailsBySiteNameSignalError() instead")
    void recommendationsGetRuleDetailsBySiteNameSignalE(OAIRecommendationRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRuleDetailsBySiteNameSignalError(OAIRecommendationRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use recommendationsGetRecommendationBySubscriptionSignalErrorFull() instead")
    void recommendationsGetRecommendationBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRecommendationBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRecommendationHistoryForSiteSignalErrorFull() instead")
    void recommendationsGetRecommendationHistoryForSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRecommendationHistoryForSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRecommendedRulesForSiteSignalErrorFull() instead")
    void recommendationsGetRecommendedRulesForSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRecommendedRulesForSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recommendationsGetRuleDetailsBySiteNameSignalErrorFull() instead")
    void recommendationsGetRuleDetailsBySiteNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recommendationsGetRuleDetailsBySiteNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
