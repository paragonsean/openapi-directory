/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestsBasedTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestsBasedTrigger::OAIRequestsBasedTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestsBasedTrigger::OAIRequestsBasedTrigger() {
    this->initializeModel();
}

OAIRequestsBasedTrigger::~OAIRequestsBasedTrigger() {}

void OAIRequestsBasedTrigger::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_time_interval_isSet = false;
    m_time_interval_isValid = false;
}

void OAIRequestsBasedTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestsBasedTrigger::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_time_interval_isValid = ::OpenAPI::fromJsonValue(m_time_interval, json[QString("timeInterval")]);
    m_time_interval_isSet = !json[QString("timeInterval")].isNull() && m_time_interval_isValid;
}

QString OAIRequestsBasedTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestsBasedTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_time_interval_isSet) {
        obj.insert(QString("timeInterval"), ::OpenAPI::toJsonValue(m_time_interval));
    }
    return obj;
}

qint32 OAIRequestsBasedTrigger::getCount() const {
    return m_count;
}
void OAIRequestsBasedTrigger::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIRequestsBasedTrigger::is_count_Set() const{
    return m_count_isSet;
}

bool OAIRequestsBasedTrigger::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIRequestsBasedTrigger::getTimeInterval() const {
    return m_time_interval;
}
void OAIRequestsBasedTrigger::setTimeInterval(const QString &time_interval) {
    m_time_interval = time_interval;
    m_time_interval_isSet = true;
}

bool OAIRequestsBasedTrigger::is_time_interval_Set() const{
    return m_time_interval_isSet;
}

bool OAIRequestsBasedTrigger::is_time_interval_Valid() const{
    return m_time_interval_isValid;
}

bool OAIRequestsBasedTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestsBasedTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
