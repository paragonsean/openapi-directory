/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlobalApi_H
#define OAI_OAIGlobalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateCollection.h"
#include "OAIClassicMobileServiceCollection.h"
#include "OAIGeoRegionCollection.h"
#include "OAIHostingEnvironmentCollection.h"
#include "OAIManagedHostingEnvironmentCollection.h"
#include "OAIObject.h"
#include "OAIResourceNameAvailability.h"
#include "OAIResourceNameAvailabilityRequest.h"
#include "OAIServerFarmCollection.h"
#include "OAISiteCollection.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlobalApi : public QObject {
    Q_OBJECT

public:
    OAIGlobalApi(const int timeOut = 0);
    ~OAIGlobalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIResourceNameAvailabilityRequest [required]
    */
    virtual void globalCheckNameAvailability(const QString &subscription_id, const QString &api_version, const OAIResourceNameAvailabilityRequest &request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalGetAllCertificates(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalGetAllClassicMobileServices(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalGetAllHostingEnvironments(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalGetAllManagedHostingEnvironments(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  detailed bool [optional]
    */
    virtual void globalGetAllServerFarms(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &detailed = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalGetAllSites(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  sku QString [optional]
    * @param[in]  linux_workers_enabled bool [optional]
    */
    virtual void globalGetSubscriptionGeoRegions(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &linux_workers_enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalGetSubscriptionPublishingCredentials(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalIsHostingEnvironmentNameAvailable(const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalIsHostingEnvironmentWithLegacyNameAvailable(const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void globalListPremierAddOnOffers(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request_message OAIUser [required]
    */
    virtual void globalUpdateSubscriptionPublishingCredentials(const QString &subscription_id, const QString &api_version, const OAIUser &request_message);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void globalCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void globalGetAllCertificatesCallback(OAIHttpRequestWorker *worker);
    void globalGetAllClassicMobileServicesCallback(OAIHttpRequestWorker *worker);
    void globalGetAllHostingEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void globalGetAllManagedHostingEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void globalGetAllServerFarmsCallback(OAIHttpRequestWorker *worker);
    void globalGetAllSitesCallback(OAIHttpRequestWorker *worker);
    void globalGetSubscriptionGeoRegionsCallback(OAIHttpRequestWorker *worker);
    void globalGetSubscriptionPublishingCredentialsCallback(OAIHttpRequestWorker *worker);
    void globalIsHostingEnvironmentNameAvailableCallback(OAIHttpRequestWorker *worker);
    void globalIsHostingEnvironmentWithLegacyNameAvailableCallback(OAIHttpRequestWorker *worker);
    void globalListPremierAddOnOffersCallback(OAIHttpRequestWorker *worker);
    void globalUpdateSubscriptionPublishingCredentialsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void globalCheckNameAvailabilitySignal(OAIResourceNameAvailability summary);
    void globalGetAllCertificatesSignal(OAICertificateCollection summary);
    void globalGetAllClassicMobileServicesSignal(OAIClassicMobileServiceCollection summary);
    void globalGetAllHostingEnvironmentsSignal(OAIHostingEnvironmentCollection summary);
    void globalGetAllManagedHostingEnvironmentsSignal(OAIManagedHostingEnvironmentCollection summary);
    void globalGetAllServerFarmsSignal(OAIServerFarmCollection summary);
    void globalGetAllSitesSignal(OAISiteCollection summary);
    void globalGetSubscriptionGeoRegionsSignal(OAIGeoRegionCollection summary);
    void globalGetSubscriptionPublishingCredentialsSignal(OAIUser summary);
    void globalIsHostingEnvironmentNameAvailableSignal(OAIObject summary);
    void globalIsHostingEnvironmentWithLegacyNameAvailableSignal(OAIObject summary);
    void globalListPremierAddOnOffersSignal(OAIObject summary);
    void globalUpdateSubscriptionPublishingCredentialsSignal(OAIUser summary);


    void globalCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIResourceNameAvailability summary);
    void globalGetAllCertificatesSignalFull(OAIHttpRequestWorker *worker, OAICertificateCollection summary);
    void globalGetAllClassicMobileServicesSignalFull(OAIHttpRequestWorker *worker, OAIClassicMobileServiceCollection summary);
    void globalGetAllHostingEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironmentCollection summary);
    void globalGetAllManagedHostingEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIManagedHostingEnvironmentCollection summary);
    void globalGetAllServerFarmsSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmCollection summary);
    void globalGetAllSitesSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);
    void globalGetSubscriptionGeoRegionsSignalFull(OAIHttpRequestWorker *worker, OAIGeoRegionCollection summary);
    void globalGetSubscriptionPublishingCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void globalIsHostingEnvironmentNameAvailableSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void globalIsHostingEnvironmentWithLegacyNameAvailableSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void globalListPremierAddOnOffersSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void globalUpdateSubscriptionPublishingCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use globalCheckNameAvailabilitySignalError() instead")
    void globalCheckNameAvailabilitySignalE(OAIResourceNameAvailability summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalCheckNameAvailabilitySignalError(OAIResourceNameAvailability summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllCertificatesSignalError() instead")
    void globalGetAllCertificatesSignalE(OAICertificateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllCertificatesSignalError(OAICertificateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllClassicMobileServicesSignalError() instead")
    void globalGetAllClassicMobileServicesSignalE(OAIClassicMobileServiceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllClassicMobileServicesSignalError(OAIClassicMobileServiceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllHostingEnvironmentsSignalError() instead")
    void globalGetAllHostingEnvironmentsSignalE(OAIHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllHostingEnvironmentsSignalError(OAIHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllManagedHostingEnvironmentsSignalError() instead")
    void globalGetAllManagedHostingEnvironmentsSignalE(OAIManagedHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllManagedHostingEnvironmentsSignalError(OAIManagedHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllServerFarmsSignalError() instead")
    void globalGetAllServerFarmsSignalE(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllServerFarmsSignalError(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllSitesSignalError() instead")
    void globalGetAllSitesSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllSitesSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetSubscriptionGeoRegionsSignalError() instead")
    void globalGetSubscriptionGeoRegionsSignalE(OAIGeoRegionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetSubscriptionGeoRegionsSignalError(OAIGeoRegionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetSubscriptionPublishingCredentialsSignalError() instead")
    void globalGetSubscriptionPublishingCredentialsSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetSubscriptionPublishingCredentialsSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalIsHostingEnvironmentNameAvailableSignalError() instead")
    void globalIsHostingEnvironmentNameAvailableSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalIsHostingEnvironmentNameAvailableSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalIsHostingEnvironmentWithLegacyNameAvailableSignalError() instead")
    void globalIsHostingEnvironmentWithLegacyNameAvailableSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalIsHostingEnvironmentWithLegacyNameAvailableSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalListPremierAddOnOffersSignalError() instead")
    void globalListPremierAddOnOffersSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalListPremierAddOnOffersSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUpdateSubscriptionPublishingCredentialsSignalError() instead")
    void globalUpdateSubscriptionPublishingCredentialsSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUpdateSubscriptionPublishingCredentialsSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use globalCheckNameAvailabilitySignalErrorFull() instead")
    void globalCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllCertificatesSignalErrorFull() instead")
    void globalGetAllCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllClassicMobileServicesSignalErrorFull() instead")
    void globalGetAllClassicMobileServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllClassicMobileServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllHostingEnvironmentsSignalErrorFull() instead")
    void globalGetAllHostingEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllHostingEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllManagedHostingEnvironmentsSignalErrorFull() instead")
    void globalGetAllManagedHostingEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllManagedHostingEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllServerFarmsSignalErrorFull() instead")
    void globalGetAllServerFarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllServerFarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetAllSitesSignalErrorFull() instead")
    void globalGetAllSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetAllSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetSubscriptionGeoRegionsSignalErrorFull() instead")
    void globalGetSubscriptionGeoRegionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetSubscriptionGeoRegionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalGetSubscriptionPublishingCredentialsSignalErrorFull() instead")
    void globalGetSubscriptionPublishingCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalGetSubscriptionPublishingCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalIsHostingEnvironmentNameAvailableSignalErrorFull() instead")
    void globalIsHostingEnvironmentNameAvailableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalIsHostingEnvironmentNameAvailableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalIsHostingEnvironmentWithLegacyNameAvailableSignalErrorFull() instead")
    void globalIsHostingEnvironmentWithLegacyNameAvailableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalIsHostingEnvironmentWithLegacyNameAvailableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalListPremierAddOnOffersSignalErrorFull() instead")
    void globalListPremierAddOnOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalListPremierAddOnOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use globalUpdateSubscriptionPublishingCredentialsSignalErrorFull() instead")
    void globalUpdateSubscriptionPublishingCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void globalUpdateSubscriptionPublishingCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
