/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISiteAuthSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISiteAuthSettings::OAISiteAuthSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISiteAuthSettings::OAISiteAuthSettings() {
    this->initializeModel();
}

OAISiteAuthSettings::~OAISiteAuthSettings() {}

void OAISiteAuthSettings::initializeModel() {

    m_aad_client_id_isSet = false;
    m_aad_client_id_isValid = false;

    m_additional_login_params_isSet = false;
    m_additional_login_params_isValid = false;

    m_allowed_audiences_isSet = false;
    m_allowed_audiences_isValid = false;

    m_allowed_external_redirect_urls_isSet = false;
    m_allowed_external_redirect_urls_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_default_provider_isSet = false;
    m_default_provider_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_facebook_app_id_isSet = false;
    m_facebook_app_id_isValid = false;

    m_facebook_app_secret_isSet = false;
    m_facebook_app_secret_isValid = false;

    m_facebook_o_auth_scopes_isSet = false;
    m_facebook_o_auth_scopes_isValid = false;

    m_google_client_id_isSet = false;
    m_google_client_id_isValid = false;

    m_google_client_secret_isSet = false;
    m_google_client_secret_isValid = false;

    m_google_o_auth_scopes_isSet = false;
    m_google_o_auth_scopes_isValid = false;

    m_http_api_prefix_path_isSet = false;
    m_http_api_prefix_path_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_microsoft_account_client_id_isSet = false;
    m_microsoft_account_client_id_isValid = false;

    m_microsoft_account_client_secret_isSet = false;
    m_microsoft_account_client_secret_isValid = false;

    m_microsoft_account_o_auth_scopes_isSet = false;
    m_microsoft_account_o_auth_scopes_isValid = false;

    m_open_id_issuer_isSet = false;
    m_open_id_issuer_isValid = false;

    m_token_refresh_extension_hours_isSet = false;
    m_token_refresh_extension_hours_isValid = false;

    m_token_store_enabled_isSet = false;
    m_token_store_enabled_isValid = false;

    m_twitter_consumer_key_isSet = false;
    m_twitter_consumer_key_isValid = false;

    m_twitter_consumer_secret_isSet = false;
    m_twitter_consumer_secret_isValid = false;

    m_unauthenticated_client_action_isSet = false;
    m_unauthenticated_client_action_isValid = false;
}

void OAISiteAuthSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISiteAuthSettings::fromJsonObject(QJsonObject json) {

    m_aad_client_id_isValid = ::OpenAPI::fromJsonValue(m_aad_client_id, json[QString("aadClientId")]);
    m_aad_client_id_isSet = !json[QString("aadClientId")].isNull() && m_aad_client_id_isValid;

    m_additional_login_params_isValid = ::OpenAPI::fromJsonValue(m_additional_login_params, json[QString("additionalLoginParams")]);
    m_additional_login_params_isSet = !json[QString("additionalLoginParams")].isNull() && m_additional_login_params_isValid;

    m_allowed_audiences_isValid = ::OpenAPI::fromJsonValue(m_allowed_audiences, json[QString("allowedAudiences")]);
    m_allowed_audiences_isSet = !json[QString("allowedAudiences")].isNull() && m_allowed_audiences_isValid;

    m_allowed_external_redirect_urls_isValid = ::OpenAPI::fromJsonValue(m_allowed_external_redirect_urls, json[QString("allowedExternalRedirectUrls")]);
    m_allowed_external_redirect_urls_isSet = !json[QString("allowedExternalRedirectUrls")].isNull() && m_allowed_external_redirect_urls_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_default_provider_isValid = ::OpenAPI::fromJsonValue(m_default_provider, json[QString("defaultProvider")]);
    m_default_provider_isSet = !json[QString("defaultProvider")].isNull() && m_default_provider_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_facebook_app_id_isValid = ::OpenAPI::fromJsonValue(m_facebook_app_id, json[QString("facebookAppId")]);
    m_facebook_app_id_isSet = !json[QString("facebookAppId")].isNull() && m_facebook_app_id_isValid;

    m_facebook_app_secret_isValid = ::OpenAPI::fromJsonValue(m_facebook_app_secret, json[QString("facebookAppSecret")]);
    m_facebook_app_secret_isSet = !json[QString("facebookAppSecret")].isNull() && m_facebook_app_secret_isValid;

    m_facebook_o_auth_scopes_isValid = ::OpenAPI::fromJsonValue(m_facebook_o_auth_scopes, json[QString("facebookOAuthScopes")]);
    m_facebook_o_auth_scopes_isSet = !json[QString("facebookOAuthScopes")].isNull() && m_facebook_o_auth_scopes_isValid;

    m_google_client_id_isValid = ::OpenAPI::fromJsonValue(m_google_client_id, json[QString("googleClientId")]);
    m_google_client_id_isSet = !json[QString("googleClientId")].isNull() && m_google_client_id_isValid;

    m_google_client_secret_isValid = ::OpenAPI::fromJsonValue(m_google_client_secret, json[QString("googleClientSecret")]);
    m_google_client_secret_isSet = !json[QString("googleClientSecret")].isNull() && m_google_client_secret_isValid;

    m_google_o_auth_scopes_isValid = ::OpenAPI::fromJsonValue(m_google_o_auth_scopes, json[QString("googleOAuthScopes")]);
    m_google_o_auth_scopes_isSet = !json[QString("googleOAuthScopes")].isNull() && m_google_o_auth_scopes_isValid;

    m_http_api_prefix_path_isValid = ::OpenAPI::fromJsonValue(m_http_api_prefix_path, json[QString("httpApiPrefixPath")]);
    m_http_api_prefix_path_isSet = !json[QString("httpApiPrefixPath")].isNull() && m_http_api_prefix_path_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_microsoft_account_client_id_isValid = ::OpenAPI::fromJsonValue(m_microsoft_account_client_id, json[QString("microsoftAccountClientId")]);
    m_microsoft_account_client_id_isSet = !json[QString("microsoftAccountClientId")].isNull() && m_microsoft_account_client_id_isValid;

    m_microsoft_account_client_secret_isValid = ::OpenAPI::fromJsonValue(m_microsoft_account_client_secret, json[QString("microsoftAccountClientSecret")]);
    m_microsoft_account_client_secret_isSet = !json[QString("microsoftAccountClientSecret")].isNull() && m_microsoft_account_client_secret_isValid;

    m_microsoft_account_o_auth_scopes_isValid = ::OpenAPI::fromJsonValue(m_microsoft_account_o_auth_scopes, json[QString("microsoftAccountOAuthScopes")]);
    m_microsoft_account_o_auth_scopes_isSet = !json[QString("microsoftAccountOAuthScopes")].isNull() && m_microsoft_account_o_auth_scopes_isValid;

    m_open_id_issuer_isValid = ::OpenAPI::fromJsonValue(m_open_id_issuer, json[QString("openIdIssuer")]);
    m_open_id_issuer_isSet = !json[QString("openIdIssuer")].isNull() && m_open_id_issuer_isValid;

    m_token_refresh_extension_hours_isValid = ::OpenAPI::fromJsonValue(m_token_refresh_extension_hours, json[QString("tokenRefreshExtensionHours")]);
    m_token_refresh_extension_hours_isSet = !json[QString("tokenRefreshExtensionHours")].isNull() && m_token_refresh_extension_hours_isValid;

    m_token_store_enabled_isValid = ::OpenAPI::fromJsonValue(m_token_store_enabled, json[QString("tokenStoreEnabled")]);
    m_token_store_enabled_isSet = !json[QString("tokenStoreEnabled")].isNull() && m_token_store_enabled_isValid;

    m_twitter_consumer_key_isValid = ::OpenAPI::fromJsonValue(m_twitter_consumer_key, json[QString("twitterConsumerKey")]);
    m_twitter_consumer_key_isSet = !json[QString("twitterConsumerKey")].isNull() && m_twitter_consumer_key_isValid;

    m_twitter_consumer_secret_isValid = ::OpenAPI::fromJsonValue(m_twitter_consumer_secret, json[QString("twitterConsumerSecret")]);
    m_twitter_consumer_secret_isSet = !json[QString("twitterConsumerSecret")].isNull() && m_twitter_consumer_secret_isValid;

    m_unauthenticated_client_action_isValid = ::OpenAPI::fromJsonValue(m_unauthenticated_client_action, json[QString("unauthenticatedClientAction")]);
    m_unauthenticated_client_action_isSet = !json[QString("unauthenticatedClientAction")].isNull() && m_unauthenticated_client_action_isValid;
}

QString OAISiteAuthSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISiteAuthSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_client_id_isSet) {
        obj.insert(QString("aadClientId"), ::OpenAPI::toJsonValue(m_aad_client_id));
    }
    if (m_additional_login_params.size() > 0) {
        obj.insert(QString("additionalLoginParams"), ::OpenAPI::toJsonValue(m_additional_login_params));
    }
    if (m_allowed_audiences.size() > 0) {
        obj.insert(QString("allowedAudiences"), ::OpenAPI::toJsonValue(m_allowed_audiences));
    }
    if (m_allowed_external_redirect_urls.size() > 0) {
        obj.insert(QString("allowedExternalRedirectUrls"), ::OpenAPI::toJsonValue(m_allowed_external_redirect_urls));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_default_provider_isSet) {
        obj.insert(QString("defaultProvider"), ::OpenAPI::toJsonValue(m_default_provider));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_facebook_app_id_isSet) {
        obj.insert(QString("facebookAppId"), ::OpenAPI::toJsonValue(m_facebook_app_id));
    }
    if (m_facebook_app_secret_isSet) {
        obj.insert(QString("facebookAppSecret"), ::OpenAPI::toJsonValue(m_facebook_app_secret));
    }
    if (m_facebook_o_auth_scopes.size() > 0) {
        obj.insert(QString("facebookOAuthScopes"), ::OpenAPI::toJsonValue(m_facebook_o_auth_scopes));
    }
    if (m_google_client_id_isSet) {
        obj.insert(QString("googleClientId"), ::OpenAPI::toJsonValue(m_google_client_id));
    }
    if (m_google_client_secret_isSet) {
        obj.insert(QString("googleClientSecret"), ::OpenAPI::toJsonValue(m_google_client_secret));
    }
    if (m_google_o_auth_scopes.size() > 0) {
        obj.insert(QString("googleOAuthScopes"), ::OpenAPI::toJsonValue(m_google_o_auth_scopes));
    }
    if (m_http_api_prefix_path_isSet) {
        obj.insert(QString("httpApiPrefixPath"), ::OpenAPI::toJsonValue(m_http_api_prefix_path));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_microsoft_account_client_id_isSet) {
        obj.insert(QString("microsoftAccountClientId"), ::OpenAPI::toJsonValue(m_microsoft_account_client_id));
    }
    if (m_microsoft_account_client_secret_isSet) {
        obj.insert(QString("microsoftAccountClientSecret"), ::OpenAPI::toJsonValue(m_microsoft_account_client_secret));
    }
    if (m_microsoft_account_o_auth_scopes.size() > 0) {
        obj.insert(QString("microsoftAccountOAuthScopes"), ::OpenAPI::toJsonValue(m_microsoft_account_o_auth_scopes));
    }
    if (m_open_id_issuer_isSet) {
        obj.insert(QString("openIdIssuer"), ::OpenAPI::toJsonValue(m_open_id_issuer));
    }
    if (m_token_refresh_extension_hours_isSet) {
        obj.insert(QString("tokenRefreshExtensionHours"), ::OpenAPI::toJsonValue(m_token_refresh_extension_hours));
    }
    if (m_token_store_enabled_isSet) {
        obj.insert(QString("tokenStoreEnabled"), ::OpenAPI::toJsonValue(m_token_store_enabled));
    }
    if (m_twitter_consumer_key_isSet) {
        obj.insert(QString("twitterConsumerKey"), ::OpenAPI::toJsonValue(m_twitter_consumer_key));
    }
    if (m_twitter_consumer_secret_isSet) {
        obj.insert(QString("twitterConsumerSecret"), ::OpenAPI::toJsonValue(m_twitter_consumer_secret));
    }
    if (m_unauthenticated_client_action_isSet) {
        obj.insert(QString("unauthenticatedClientAction"), ::OpenAPI::toJsonValue(m_unauthenticated_client_action));
    }
    return obj;
}

QString OAISiteAuthSettings::getAadClientId() const {
    return m_aad_client_id;
}
void OAISiteAuthSettings::setAadClientId(const QString &aad_client_id) {
    m_aad_client_id = aad_client_id;
    m_aad_client_id_isSet = true;
}

bool OAISiteAuthSettings::is_aad_client_id_Set() const{
    return m_aad_client_id_isSet;
}

bool OAISiteAuthSettings::is_aad_client_id_Valid() const{
    return m_aad_client_id_isValid;
}

QList<QString> OAISiteAuthSettings::getAdditionalLoginParams() const {
    return m_additional_login_params;
}
void OAISiteAuthSettings::setAdditionalLoginParams(const QList<QString> &additional_login_params) {
    m_additional_login_params = additional_login_params;
    m_additional_login_params_isSet = true;
}

bool OAISiteAuthSettings::is_additional_login_params_Set() const{
    return m_additional_login_params_isSet;
}

bool OAISiteAuthSettings::is_additional_login_params_Valid() const{
    return m_additional_login_params_isValid;
}

QList<QString> OAISiteAuthSettings::getAllowedAudiences() const {
    return m_allowed_audiences;
}
void OAISiteAuthSettings::setAllowedAudiences(const QList<QString> &allowed_audiences) {
    m_allowed_audiences = allowed_audiences;
    m_allowed_audiences_isSet = true;
}

bool OAISiteAuthSettings::is_allowed_audiences_Set() const{
    return m_allowed_audiences_isSet;
}

bool OAISiteAuthSettings::is_allowed_audiences_Valid() const{
    return m_allowed_audiences_isValid;
}

QList<QString> OAISiteAuthSettings::getAllowedExternalRedirectUrls() const {
    return m_allowed_external_redirect_urls;
}
void OAISiteAuthSettings::setAllowedExternalRedirectUrls(const QList<QString> &allowed_external_redirect_urls) {
    m_allowed_external_redirect_urls = allowed_external_redirect_urls;
    m_allowed_external_redirect_urls_isSet = true;
}

bool OAISiteAuthSettings::is_allowed_external_redirect_urls_Set() const{
    return m_allowed_external_redirect_urls_isSet;
}

bool OAISiteAuthSettings::is_allowed_external_redirect_urls_Valid() const{
    return m_allowed_external_redirect_urls_isValid;
}

QString OAISiteAuthSettings::getClientId() const {
    return m_client_id;
}
void OAISiteAuthSettings::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAISiteAuthSettings::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAISiteAuthSettings::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAISiteAuthSettings::getClientSecret() const {
    return m_client_secret;
}
void OAISiteAuthSettings::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAISiteAuthSettings::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAISiteAuthSettings::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAISiteAuthSettings::getDefaultProvider() const {
    return m_default_provider;
}
void OAISiteAuthSettings::setDefaultProvider(const QString &default_provider) {
    m_default_provider = default_provider;
    m_default_provider_isSet = true;
}

bool OAISiteAuthSettings::is_default_provider_Set() const{
    return m_default_provider_isSet;
}

bool OAISiteAuthSettings::is_default_provider_Valid() const{
    return m_default_provider_isValid;
}

bool OAISiteAuthSettings::isEnabled() const {
    return m_enabled;
}
void OAISiteAuthSettings::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISiteAuthSettings::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISiteAuthSettings::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAISiteAuthSettings::getFacebookAppId() const {
    return m_facebook_app_id;
}
void OAISiteAuthSettings::setFacebookAppId(const QString &facebook_app_id) {
    m_facebook_app_id = facebook_app_id;
    m_facebook_app_id_isSet = true;
}

bool OAISiteAuthSettings::is_facebook_app_id_Set() const{
    return m_facebook_app_id_isSet;
}

bool OAISiteAuthSettings::is_facebook_app_id_Valid() const{
    return m_facebook_app_id_isValid;
}

QString OAISiteAuthSettings::getFacebookAppSecret() const {
    return m_facebook_app_secret;
}
void OAISiteAuthSettings::setFacebookAppSecret(const QString &facebook_app_secret) {
    m_facebook_app_secret = facebook_app_secret;
    m_facebook_app_secret_isSet = true;
}

bool OAISiteAuthSettings::is_facebook_app_secret_Set() const{
    return m_facebook_app_secret_isSet;
}

bool OAISiteAuthSettings::is_facebook_app_secret_Valid() const{
    return m_facebook_app_secret_isValid;
}

QList<QString> OAISiteAuthSettings::getFacebookOAuthScopes() const {
    return m_facebook_o_auth_scopes;
}
void OAISiteAuthSettings::setFacebookOAuthScopes(const QList<QString> &facebook_o_auth_scopes) {
    m_facebook_o_auth_scopes = facebook_o_auth_scopes;
    m_facebook_o_auth_scopes_isSet = true;
}

bool OAISiteAuthSettings::is_facebook_o_auth_scopes_Set() const{
    return m_facebook_o_auth_scopes_isSet;
}

bool OAISiteAuthSettings::is_facebook_o_auth_scopes_Valid() const{
    return m_facebook_o_auth_scopes_isValid;
}

QString OAISiteAuthSettings::getGoogleClientId() const {
    return m_google_client_id;
}
void OAISiteAuthSettings::setGoogleClientId(const QString &google_client_id) {
    m_google_client_id = google_client_id;
    m_google_client_id_isSet = true;
}

bool OAISiteAuthSettings::is_google_client_id_Set() const{
    return m_google_client_id_isSet;
}

bool OAISiteAuthSettings::is_google_client_id_Valid() const{
    return m_google_client_id_isValid;
}

QString OAISiteAuthSettings::getGoogleClientSecret() const {
    return m_google_client_secret;
}
void OAISiteAuthSettings::setGoogleClientSecret(const QString &google_client_secret) {
    m_google_client_secret = google_client_secret;
    m_google_client_secret_isSet = true;
}

bool OAISiteAuthSettings::is_google_client_secret_Set() const{
    return m_google_client_secret_isSet;
}

bool OAISiteAuthSettings::is_google_client_secret_Valid() const{
    return m_google_client_secret_isValid;
}

QList<QString> OAISiteAuthSettings::getGoogleOAuthScopes() const {
    return m_google_o_auth_scopes;
}
void OAISiteAuthSettings::setGoogleOAuthScopes(const QList<QString> &google_o_auth_scopes) {
    m_google_o_auth_scopes = google_o_auth_scopes;
    m_google_o_auth_scopes_isSet = true;
}

bool OAISiteAuthSettings::is_google_o_auth_scopes_Set() const{
    return m_google_o_auth_scopes_isSet;
}

bool OAISiteAuthSettings::is_google_o_auth_scopes_Valid() const{
    return m_google_o_auth_scopes_isValid;
}

QString OAISiteAuthSettings::getHttpApiPrefixPath() const {
    return m_http_api_prefix_path;
}
void OAISiteAuthSettings::setHttpApiPrefixPath(const QString &http_api_prefix_path) {
    m_http_api_prefix_path = http_api_prefix_path;
    m_http_api_prefix_path_isSet = true;
}

bool OAISiteAuthSettings::is_http_api_prefix_path_Set() const{
    return m_http_api_prefix_path_isSet;
}

bool OAISiteAuthSettings::is_http_api_prefix_path_Valid() const{
    return m_http_api_prefix_path_isValid;
}

QString OAISiteAuthSettings::getIssuer() const {
    return m_issuer;
}
void OAISiteAuthSettings::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAISiteAuthSettings::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAISiteAuthSettings::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAISiteAuthSettings::getMicrosoftAccountClientId() const {
    return m_microsoft_account_client_id;
}
void OAISiteAuthSettings::setMicrosoftAccountClientId(const QString &microsoft_account_client_id) {
    m_microsoft_account_client_id = microsoft_account_client_id;
    m_microsoft_account_client_id_isSet = true;
}

bool OAISiteAuthSettings::is_microsoft_account_client_id_Set() const{
    return m_microsoft_account_client_id_isSet;
}

bool OAISiteAuthSettings::is_microsoft_account_client_id_Valid() const{
    return m_microsoft_account_client_id_isValid;
}

QString OAISiteAuthSettings::getMicrosoftAccountClientSecret() const {
    return m_microsoft_account_client_secret;
}
void OAISiteAuthSettings::setMicrosoftAccountClientSecret(const QString &microsoft_account_client_secret) {
    m_microsoft_account_client_secret = microsoft_account_client_secret;
    m_microsoft_account_client_secret_isSet = true;
}

bool OAISiteAuthSettings::is_microsoft_account_client_secret_Set() const{
    return m_microsoft_account_client_secret_isSet;
}

bool OAISiteAuthSettings::is_microsoft_account_client_secret_Valid() const{
    return m_microsoft_account_client_secret_isValid;
}

QList<QString> OAISiteAuthSettings::getMicrosoftAccountOAuthScopes() const {
    return m_microsoft_account_o_auth_scopes;
}
void OAISiteAuthSettings::setMicrosoftAccountOAuthScopes(const QList<QString> &microsoft_account_o_auth_scopes) {
    m_microsoft_account_o_auth_scopes = microsoft_account_o_auth_scopes;
    m_microsoft_account_o_auth_scopes_isSet = true;
}

bool OAISiteAuthSettings::is_microsoft_account_o_auth_scopes_Set() const{
    return m_microsoft_account_o_auth_scopes_isSet;
}

bool OAISiteAuthSettings::is_microsoft_account_o_auth_scopes_Valid() const{
    return m_microsoft_account_o_auth_scopes_isValid;
}

QString OAISiteAuthSettings::getOpenIdIssuer() const {
    return m_open_id_issuer;
}
void OAISiteAuthSettings::setOpenIdIssuer(const QString &open_id_issuer) {
    m_open_id_issuer = open_id_issuer;
    m_open_id_issuer_isSet = true;
}

bool OAISiteAuthSettings::is_open_id_issuer_Set() const{
    return m_open_id_issuer_isSet;
}

bool OAISiteAuthSettings::is_open_id_issuer_Valid() const{
    return m_open_id_issuer_isValid;
}

double OAISiteAuthSettings::getTokenRefreshExtensionHours() const {
    return m_token_refresh_extension_hours;
}
void OAISiteAuthSettings::setTokenRefreshExtensionHours(const double &token_refresh_extension_hours) {
    m_token_refresh_extension_hours = token_refresh_extension_hours;
    m_token_refresh_extension_hours_isSet = true;
}

bool OAISiteAuthSettings::is_token_refresh_extension_hours_Set() const{
    return m_token_refresh_extension_hours_isSet;
}

bool OAISiteAuthSettings::is_token_refresh_extension_hours_Valid() const{
    return m_token_refresh_extension_hours_isValid;
}

bool OAISiteAuthSettings::isTokenStoreEnabled() const {
    return m_token_store_enabled;
}
void OAISiteAuthSettings::setTokenStoreEnabled(const bool &token_store_enabled) {
    m_token_store_enabled = token_store_enabled;
    m_token_store_enabled_isSet = true;
}

bool OAISiteAuthSettings::is_token_store_enabled_Set() const{
    return m_token_store_enabled_isSet;
}

bool OAISiteAuthSettings::is_token_store_enabled_Valid() const{
    return m_token_store_enabled_isValid;
}

QString OAISiteAuthSettings::getTwitterConsumerKey() const {
    return m_twitter_consumer_key;
}
void OAISiteAuthSettings::setTwitterConsumerKey(const QString &twitter_consumer_key) {
    m_twitter_consumer_key = twitter_consumer_key;
    m_twitter_consumer_key_isSet = true;
}

bool OAISiteAuthSettings::is_twitter_consumer_key_Set() const{
    return m_twitter_consumer_key_isSet;
}

bool OAISiteAuthSettings::is_twitter_consumer_key_Valid() const{
    return m_twitter_consumer_key_isValid;
}

QString OAISiteAuthSettings::getTwitterConsumerSecret() const {
    return m_twitter_consumer_secret;
}
void OAISiteAuthSettings::setTwitterConsumerSecret(const QString &twitter_consumer_secret) {
    m_twitter_consumer_secret = twitter_consumer_secret;
    m_twitter_consumer_secret_isSet = true;
}

bool OAISiteAuthSettings::is_twitter_consumer_secret_Set() const{
    return m_twitter_consumer_secret_isSet;
}

bool OAISiteAuthSettings::is_twitter_consumer_secret_Valid() const{
    return m_twitter_consumer_secret_isValid;
}

QString OAISiteAuthSettings::getUnauthenticatedClientAction() const {
    return m_unauthenticated_client_action;
}
void OAISiteAuthSettings::setUnauthenticatedClientAction(const QString &unauthenticated_client_action) {
    m_unauthenticated_client_action = unauthenticated_client_action;
    m_unauthenticated_client_action_isSet = true;
}

bool OAISiteAuthSettings::is_unauthenticated_client_action_Set() const{
    return m_unauthenticated_client_action_isSet;
}

bool OAISiteAuthSettings::is_unauthenticated_client_action_Valid() const{
    return m_unauthenticated_client_action_isValid;
}

bool OAISiteAuthSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_login_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_audiences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_external_redirect_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_app_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook_o_auth_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_o_auth_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_api_prefix_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_account_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_account_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_account_o_auth_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_id_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_refresh_extension_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_store_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_consumer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_consumer_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unauthenticated_client_action_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISiteAuthSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
