/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerFarmsApi_H
#define OAI_OAIServerFarmsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMetricDefinitionCollection.h"
#include "OAIObject.h"
#include "OAIResourceMetricCollection.h"
#include "OAIServerFarmCollection.h"
#include "OAIServerFarmWithRichSku.h"
#include "OAISiteCollection.h"
#include "OAIVnetGateway.h"
#include "OAIVnetInfo.h"
#include "OAIVnetRoute.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerFarmsApi : public QObject {
    Q_OBJECT

public:
    OAIServerFarmsApi(const int timeOut = 0);
    ~OAIServerFarmsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  server_farm_envelope OAIServerFarmWithRichSku [required]
    * @param[in]  allow_pending_state bool [optional]
    */
    virtual void serverFarmsCreateOrUpdateServerFarm(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIServerFarmWithRichSku &server_farm_envelope, const ::OpenAPI::OptionalParam<bool> &allow_pending_state = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  route OAIVnetRoute [required]
    */
    virtual void serverFarmsCreateOrUpdateVnetRoute(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version, const OAIVnetRoute &route);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsDeleteServerFarm(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsDeleteVnetRoute(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetRouteForVnet(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetRoutesForVnet(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetServerFarm(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetServerFarmMetricDefintions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void serverFarmsGetServerFarmMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetServerFarmOperation(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  top QString [optional]
    */
    virtual void serverFarmsGetServerFarmSites(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &top = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetServerFarmVnetGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetServerFarms(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetVnetFromServerFarm(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsGetVnetsForServerFarm(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverFarmsRebootWorkerForServerFarm(const QString &resource_group_name, const QString &name, const QString &worker_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  soft_restart bool [optional]
    */
    virtual void serverFarmsRestartSitesForServerFarm(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &soft_restart = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetGateway [required]
    */
    virtual void serverFarmsUpdateServerFarmVnetGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version, const OAIVnetGateway &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  route_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  route OAIVnetRoute [required]
    */
    virtual void serverFarmsUpdateVnetRoute(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &route_name, const QString &subscription_id, const QString &api_version, const OAIVnetRoute &route);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serverFarmsCreateOrUpdateServerFarmCallback(OAIHttpRequestWorker *worker);
    void serverFarmsCreateOrUpdateVnetRouteCallback(OAIHttpRequestWorker *worker);
    void serverFarmsDeleteServerFarmCallback(OAIHttpRequestWorker *worker);
    void serverFarmsDeleteVnetRouteCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetRouteForVnetCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetRoutesForVnetCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetServerFarmCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetServerFarmMetricDefintionsCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetServerFarmMetricsCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetServerFarmOperationCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetServerFarmSitesCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetServerFarmVnetGatewayCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetServerFarmsCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetVnetFromServerFarmCallback(OAIHttpRequestWorker *worker);
    void serverFarmsGetVnetsForServerFarmCallback(OAIHttpRequestWorker *worker);
    void serverFarmsRebootWorkerForServerFarmCallback(OAIHttpRequestWorker *worker);
    void serverFarmsRestartSitesForServerFarmCallback(OAIHttpRequestWorker *worker);
    void serverFarmsUpdateServerFarmVnetGatewayCallback(OAIHttpRequestWorker *worker);
    void serverFarmsUpdateVnetRouteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serverFarmsCreateOrUpdateServerFarmSignal(OAIServerFarmWithRichSku summary);
    void serverFarmsCreateOrUpdateVnetRouteSignal(OAIVnetRoute summary);
    void serverFarmsDeleteServerFarmSignal(OAIObject summary);
    void serverFarmsDeleteVnetRouteSignal(OAIObject summary);
    void serverFarmsGetRouteForVnetSignal(QList<OAIVnetRoute> summary);
    void serverFarmsGetRoutesForVnetSignal(QList<OAIVnetRoute> summary);
    void serverFarmsGetServerFarmSignal(OAIServerFarmWithRichSku summary);
    void serverFarmsGetServerFarmMetricDefintionsSignal(OAIMetricDefinitionCollection summary);
    void serverFarmsGetServerFarmMetricsSignal(OAIResourceMetricCollection summary);
    void serverFarmsGetServerFarmOperationSignal(OAIServerFarmWithRichSku summary);
    void serverFarmsGetServerFarmSitesSignal(OAISiteCollection summary);
    void serverFarmsGetServerFarmVnetGatewaySignal(OAIVnetGateway summary);
    void serverFarmsGetServerFarmsSignal(OAIServerFarmCollection summary);
    void serverFarmsGetVnetFromServerFarmSignal(OAIVnetInfo summary);
    void serverFarmsGetVnetsForServerFarmSignal(QList<OAIVnetInfo> summary);
    void serverFarmsRebootWorkerForServerFarmSignal(OAIObject summary);
    void serverFarmsRestartSitesForServerFarmSignal(OAIObject summary);
    void serverFarmsUpdateServerFarmVnetGatewaySignal(OAIVnetGateway summary);
    void serverFarmsUpdateVnetRouteSignal(OAIVnetRoute summary);


    void serverFarmsCreateOrUpdateServerFarmSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmWithRichSku summary);
    void serverFarmsCreateOrUpdateVnetRouteSignalFull(OAIHttpRequestWorker *worker, OAIVnetRoute summary);
    void serverFarmsDeleteServerFarmSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void serverFarmsDeleteVnetRouteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void serverFarmsGetRouteForVnetSignalFull(OAIHttpRequestWorker *worker, QList<OAIVnetRoute> summary);
    void serverFarmsGetRoutesForVnetSignalFull(OAIHttpRequestWorker *worker, QList<OAIVnetRoute> summary);
    void serverFarmsGetServerFarmSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmWithRichSku summary);
    void serverFarmsGetServerFarmMetricDefintionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionCollection summary);
    void serverFarmsGetServerFarmMetricsSignalFull(OAIHttpRequestWorker *worker, OAIResourceMetricCollection summary);
    void serverFarmsGetServerFarmOperationSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmWithRichSku summary);
    void serverFarmsGetServerFarmSitesSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);
    void serverFarmsGetServerFarmVnetGatewaySignalFull(OAIHttpRequestWorker *worker, OAIVnetGateway summary);
    void serverFarmsGetServerFarmsSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmCollection summary);
    void serverFarmsGetVnetFromServerFarmSignalFull(OAIHttpRequestWorker *worker, OAIVnetInfo summary);
    void serverFarmsGetVnetsForServerFarmSignalFull(OAIHttpRequestWorker *worker, QList<OAIVnetInfo> summary);
    void serverFarmsRebootWorkerForServerFarmSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void serverFarmsRestartSitesForServerFarmSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void serverFarmsUpdateServerFarmVnetGatewaySignalFull(OAIHttpRequestWorker *worker, OAIVnetGateway summary);
    void serverFarmsUpdateVnetRouteSignalFull(OAIHttpRequestWorker *worker, OAIVnetRoute summary);

    Q_DECL_DEPRECATED_X("Use serverFarmsCreateOrUpdateServerFarmSignalError() instead")
    void serverFarmsCreateOrUpdateServerFarmSignalE(OAIServerFarmWithRichSku summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsCreateOrUpdateServerFarmSignalError(OAIServerFarmWithRichSku summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsCreateOrUpdateVnetRouteSignalError() instead")
    void serverFarmsCreateOrUpdateVnetRouteSignalE(OAIVnetRoute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsCreateOrUpdateVnetRouteSignalError(OAIVnetRoute summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsDeleteServerFarmSignalError() instead")
    void serverFarmsDeleteServerFarmSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsDeleteServerFarmSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsDeleteVnetRouteSignalError() instead")
    void serverFarmsDeleteVnetRouteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsDeleteVnetRouteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetRouteForVnetSignalError() instead")
    void serverFarmsGetRouteForVnetSignalE(QList<OAIVnetRoute> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetRouteForVnetSignalError(QList<OAIVnetRoute> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetRoutesForVnetSignalError() instead")
    void serverFarmsGetRoutesForVnetSignalE(QList<OAIVnetRoute> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetRoutesForVnetSignalError(QList<OAIVnetRoute> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmSignalError() instead")
    void serverFarmsGetServerFarmSignalE(OAIServerFarmWithRichSku summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmSignalError(OAIServerFarmWithRichSku summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmMetricDefintionsSignalError() instead")
    void serverFarmsGetServerFarmMetricDefintionsSignalE(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmMetricDefintionsSignalError(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmMetricsSignalError() instead")
    void serverFarmsGetServerFarmMetricsSignalE(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmMetricsSignalError(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmOperationSignalError() instead")
    void serverFarmsGetServerFarmOperationSignalE(OAIServerFarmWithRichSku summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmOperationSignalError(OAIServerFarmWithRichSku summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmSitesSignalError() instead")
    void serverFarmsGetServerFarmSitesSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmSitesSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmVnetGatewaySignalError() instead")
    void serverFarmsGetServerFarmVnetGatewaySignalE(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmVnetGatewaySignalError(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmsSignalError() instead")
    void serverFarmsGetServerFarmsSignalE(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmsSignalError(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetVnetFromServerFarmSignalError() instead")
    void serverFarmsGetVnetFromServerFarmSignalE(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetVnetFromServerFarmSignalError(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetVnetsForServerFarmSignalError() instead")
    void serverFarmsGetVnetsForServerFarmSignalE(QList<OAIVnetInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetVnetsForServerFarmSignalError(QList<OAIVnetInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsRebootWorkerForServerFarmSignalError() instead")
    void serverFarmsRebootWorkerForServerFarmSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsRebootWorkerForServerFarmSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsRestartSitesForServerFarmSignalError() instead")
    void serverFarmsRestartSitesForServerFarmSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsRestartSitesForServerFarmSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsUpdateServerFarmVnetGatewaySignalError() instead")
    void serverFarmsUpdateServerFarmVnetGatewaySignalE(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsUpdateServerFarmVnetGatewaySignalError(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsUpdateVnetRouteSignalError() instead")
    void serverFarmsUpdateVnetRouteSignalE(OAIVnetRoute summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsUpdateVnetRouteSignalError(OAIVnetRoute summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serverFarmsCreateOrUpdateServerFarmSignalErrorFull() instead")
    void serverFarmsCreateOrUpdateServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsCreateOrUpdateServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsCreateOrUpdateVnetRouteSignalErrorFull() instead")
    void serverFarmsCreateOrUpdateVnetRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsCreateOrUpdateVnetRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsDeleteServerFarmSignalErrorFull() instead")
    void serverFarmsDeleteServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsDeleteServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsDeleteVnetRouteSignalErrorFull() instead")
    void serverFarmsDeleteVnetRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsDeleteVnetRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetRouteForVnetSignalErrorFull() instead")
    void serverFarmsGetRouteForVnetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetRouteForVnetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetRoutesForVnetSignalErrorFull() instead")
    void serverFarmsGetRoutesForVnetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetRoutesForVnetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmSignalErrorFull() instead")
    void serverFarmsGetServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmMetricDefintionsSignalErrorFull() instead")
    void serverFarmsGetServerFarmMetricDefintionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmMetricDefintionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmMetricsSignalErrorFull() instead")
    void serverFarmsGetServerFarmMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmOperationSignalErrorFull() instead")
    void serverFarmsGetServerFarmOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmSitesSignalErrorFull() instead")
    void serverFarmsGetServerFarmSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmVnetGatewaySignalErrorFull() instead")
    void serverFarmsGetServerFarmVnetGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmVnetGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetServerFarmsSignalErrorFull() instead")
    void serverFarmsGetServerFarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetServerFarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetVnetFromServerFarmSignalErrorFull() instead")
    void serverFarmsGetVnetFromServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetVnetFromServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsGetVnetsForServerFarmSignalErrorFull() instead")
    void serverFarmsGetVnetsForServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsGetVnetsForServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsRebootWorkerForServerFarmSignalErrorFull() instead")
    void serverFarmsRebootWorkerForServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsRebootWorkerForServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsRestartSitesForServerFarmSignalErrorFull() instead")
    void serverFarmsRestartSitesForServerFarmSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsRestartSitesForServerFarmSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsUpdateServerFarmVnetGatewaySignalErrorFull() instead")
    void serverFarmsUpdateServerFarmVnetGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsUpdateServerFarmVnetGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverFarmsUpdateVnetRouteSignalErrorFull() instead")
    void serverFarmsUpdateVnetRouteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverFarmsUpdateVnetRouteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
