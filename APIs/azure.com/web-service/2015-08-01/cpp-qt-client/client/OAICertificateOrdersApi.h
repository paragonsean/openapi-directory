/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificateOrdersApi_H
#define OAI_OAICertificateOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateEmail.h"
#include "OAICertificateOrder.h"
#include "OAICertificateOrderAction.h"
#include "OAICertificateOrderCertificate.h"
#include "OAICertificateOrderCertificateCollection.h"
#include "OAICertificateOrderCollection.h"
#include "OAIObject.h"
#include "OAIReissueCertificateOrderRequest.h"
#include "OAIRenewCertificateOrderRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificateOrdersApi : public QObject {
    Q_OBJECT

public:
    OAICertificateOrdersApi(const int timeOut = 0);
    ~OAICertificateOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  key_vault_certificate OAICertificateOrderCertificate [required]
    */
    virtual void certificateOrdersCreateOrUpdateCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICertificateOrderCertificate &key_vault_certificate);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_distinguished_name OAICertificateOrder [required]
    */
    virtual void certificateOrdersCreateOrUpdateCertificateOrder(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICertificateOrder &certificate_distinguished_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersDeleteCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersDeleteCertificateOrder(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersGetCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersGetCertificateOrder(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersGetCertificateOrders(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersGetCertificates(const QString &resource_group_name, const QString &certificate_order_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  reissue_certificate_order_request OAIReissueCertificateOrderRequest [required]
    */
    virtual void certificateOrdersReissueCertificateOrder(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIReissueCertificateOrderRequest &reissue_certificate_order_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  renew_certificate_order_request OAIRenewCertificateOrderRequest [required]
    */
    virtual void certificateOrdersRenewCertificateOrder(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIRenewCertificateOrderRequest &renew_certificate_order_request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersResendCertificateEmail(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersRetrieveCertificateActions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersRetrieveCertificateEmailHistory(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  certificate_order_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  key_vault_certificate OAICertificateOrderCertificate [required]
    */
    virtual void certificateOrdersUpdateCertificate(const QString &resource_group_name, const QString &certificate_order_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICertificateOrderCertificate &key_vault_certificate);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_distinguished_name OAICertificateOrder [required]
    */
    virtual void certificateOrdersUpdateCertificateOrder(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICertificateOrder &certificate_distinguished_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificateOrdersVerifyDomainOwnership(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void certificateOrdersCreateOrUpdateCertificateCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersCreateOrUpdateCertificateOrderCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersDeleteCertificateCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersDeleteCertificateOrderCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersGetCertificateCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersGetCertificateOrderCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersGetCertificateOrdersCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersGetCertificatesCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersReissueCertificateOrderCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersRenewCertificateOrderCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersResendCertificateEmailCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersRetrieveCertificateActionsCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersRetrieveCertificateEmailHistoryCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersUpdateCertificateCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersUpdateCertificateOrderCallback(OAIHttpRequestWorker *worker);
    void certificateOrdersVerifyDomainOwnershipCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void certificateOrdersCreateOrUpdateCertificateSignal(OAICertificateOrderCertificate summary);
    void certificateOrdersCreateOrUpdateCertificateOrderSignal(OAICertificateOrder summary);
    void certificateOrdersDeleteCertificateSignal(OAIObject summary);
    void certificateOrdersDeleteCertificateOrderSignal(OAIObject summary);
    void certificateOrdersGetCertificateSignal(OAICertificateOrderCertificate summary);
    void certificateOrdersGetCertificateOrderSignal(OAICertificateOrder summary);
    void certificateOrdersGetCertificateOrdersSignal(OAICertificateOrderCollection summary);
    void certificateOrdersGetCertificatesSignal(OAICertificateOrderCertificateCollection summary);
    void certificateOrdersReissueCertificateOrderSignal(OAIObject summary);
    void certificateOrdersRenewCertificateOrderSignal(OAIObject summary);
    void certificateOrdersResendCertificateEmailSignal(OAIObject summary);
    void certificateOrdersRetrieveCertificateActionsSignal(QList<OAICertificateOrderAction> summary);
    void certificateOrdersRetrieveCertificateEmailHistorySignal(QList<OAICertificateEmail> summary);
    void certificateOrdersUpdateCertificateSignal(OAICertificateOrderCertificate summary);
    void certificateOrdersUpdateCertificateOrderSignal(OAICertificateOrder summary);
    void certificateOrdersVerifyDomainOwnershipSignal(OAIObject summary);


    void certificateOrdersCreateOrUpdateCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrderCertificate summary);
    void certificateOrdersCreateOrUpdateCertificateOrderSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrder summary);
    void certificateOrdersDeleteCertificateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void certificateOrdersDeleteCertificateOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void certificateOrdersGetCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrderCertificate summary);
    void certificateOrdersGetCertificateOrderSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrder summary);
    void certificateOrdersGetCertificateOrdersSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrderCollection summary);
    void certificateOrdersGetCertificatesSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrderCertificateCollection summary);
    void certificateOrdersReissueCertificateOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void certificateOrdersRenewCertificateOrderSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void certificateOrdersResendCertificateEmailSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void certificateOrdersRetrieveCertificateActionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICertificateOrderAction> summary);
    void certificateOrdersRetrieveCertificateEmailHistorySignalFull(OAIHttpRequestWorker *worker, QList<OAICertificateEmail> summary);
    void certificateOrdersUpdateCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrderCertificate summary);
    void certificateOrdersUpdateCertificateOrderSignalFull(OAIHttpRequestWorker *worker, OAICertificateOrder summary);
    void certificateOrdersVerifyDomainOwnershipSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use certificateOrdersCreateOrUpdateCertificateSignalError() instead")
    void certificateOrdersCreateOrUpdateCertificateSignalE(OAICertificateOrderCertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersCreateOrUpdateCertificateSignalError(OAICertificateOrderCertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersCreateOrUpdateCertificateOrderSignalError() instead")
    void certificateOrdersCreateOrUpdateCertificateOrderSignalE(OAICertificateOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersCreateOrUpdateCertificateOrderSignalError(OAICertificateOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersDeleteCertificateSignalError() instead")
    void certificateOrdersDeleteCertificateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersDeleteCertificateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersDeleteCertificateOrderSignalError() instead")
    void certificateOrdersDeleteCertificateOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersDeleteCertificateOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificateSignalError() instead")
    void certificateOrdersGetCertificateSignalE(OAICertificateOrderCertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificateSignalError(OAICertificateOrderCertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificateOrderSignalError() instead")
    void certificateOrdersGetCertificateOrderSignalE(OAICertificateOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificateOrderSignalError(OAICertificateOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificateOrdersSignalError() instead")
    void certificateOrdersGetCertificateOrdersSignalE(OAICertificateOrderCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificateOrdersSignalError(OAICertificateOrderCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificatesSignalError() instead")
    void certificateOrdersGetCertificatesSignalE(OAICertificateOrderCertificateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificatesSignalError(OAICertificateOrderCertificateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersReissueCertificateOrderSignalError() instead")
    void certificateOrdersReissueCertificateOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersReissueCertificateOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersRenewCertificateOrderSignalError() instead")
    void certificateOrdersRenewCertificateOrderSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersRenewCertificateOrderSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersResendCertificateEmailSignalError() instead")
    void certificateOrdersResendCertificateEmailSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersResendCertificateEmailSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersRetrieveCertificateActionsSignalError() instead")
    void certificateOrdersRetrieveCertificateActionsSignalE(QList<OAICertificateOrderAction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersRetrieveCertificateActionsSignalError(QList<OAICertificateOrderAction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersRetrieveCertificateEmailHistorySignalError() instead")
    void certificateOrdersRetrieveCertificateEmailHistorySignalE(QList<OAICertificateEmail> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersRetrieveCertificateEmailHistorySignalError(QList<OAICertificateEmail> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersUpdateCertificateSignalError() instead")
    void certificateOrdersUpdateCertificateSignalE(OAICertificateOrderCertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersUpdateCertificateSignalError(OAICertificateOrderCertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersUpdateCertificateOrderSignalError() instead")
    void certificateOrdersUpdateCertificateOrderSignalE(OAICertificateOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersUpdateCertificateOrderSignalError(OAICertificateOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersVerifyDomainOwnershipSignalError() instead")
    void certificateOrdersVerifyDomainOwnershipSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersVerifyDomainOwnershipSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use certificateOrdersCreateOrUpdateCertificateSignalErrorFull() instead")
    void certificateOrdersCreateOrUpdateCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersCreateOrUpdateCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersCreateOrUpdateCertificateOrderSignalErrorFull() instead")
    void certificateOrdersCreateOrUpdateCertificateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersCreateOrUpdateCertificateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersDeleteCertificateSignalErrorFull() instead")
    void certificateOrdersDeleteCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersDeleteCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersDeleteCertificateOrderSignalErrorFull() instead")
    void certificateOrdersDeleteCertificateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersDeleteCertificateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificateSignalErrorFull() instead")
    void certificateOrdersGetCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificateOrderSignalErrorFull() instead")
    void certificateOrdersGetCertificateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificateOrdersSignalErrorFull() instead")
    void certificateOrdersGetCertificateOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificateOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersGetCertificatesSignalErrorFull() instead")
    void certificateOrdersGetCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersGetCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersReissueCertificateOrderSignalErrorFull() instead")
    void certificateOrdersReissueCertificateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersReissueCertificateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersRenewCertificateOrderSignalErrorFull() instead")
    void certificateOrdersRenewCertificateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersRenewCertificateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersResendCertificateEmailSignalErrorFull() instead")
    void certificateOrdersResendCertificateEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersResendCertificateEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersRetrieveCertificateActionsSignalErrorFull() instead")
    void certificateOrdersRetrieveCertificateActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersRetrieveCertificateActionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersRetrieveCertificateEmailHistorySignalErrorFull() instead")
    void certificateOrdersRetrieveCertificateEmailHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersRetrieveCertificateEmailHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersUpdateCertificateSignalErrorFull() instead")
    void certificateOrdersUpdateCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersUpdateCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersUpdateCertificateOrderSignalErrorFull() instead")
    void certificateOrdersUpdateCertificateOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersUpdateCertificateOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateOrdersVerifyDomainOwnershipSignalErrorFull() instead")
    void certificateOrdersVerifyDomainOwnershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateOrdersVerifyDomainOwnershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
