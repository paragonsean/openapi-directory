/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISitesApi_H
#define OAI_OAISitesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackupItem.h"
#include "OAIBackupItemCollection.h"
#include "OAIBackupRequest.h"
#include "OAIConnectionStringDictionary.h"
#include "OAICsmPublishingProfileOptions.h"
#include "OAICsmSiteRecoveryEntity.h"
#include "OAICsmSlotEntity.h"
#include "OAICsmUsageQuotaCollection.h"
#include "OAIDeletedSiteCollection.h"
#include "OAIDeployment.h"
#include "OAIDeploymentCollection.h"
#include "OAIHostNameBinding.h"
#include "OAIHostNameBindingCollection.h"
#include "OAIHttpFileElement.h"
#include "OAIMetricDefinitionCollection.h"
#include "OAINetworkFeatures.h"
#include "OAIObject.h"
#include "OAIPremierAddOnRequest.h"
#include "OAIRelayServiceConnectionEntity.h"
#include "OAIResourceMetricCollection.h"
#include "OAIRestoreRequest.h"
#include "OAIRestoreResponse.h"
#include "OAISite.h"
#include "OAISiteAuthSettings.h"
#include "OAISiteCloneability.h"
#include "OAISiteCollection.h"
#include "OAISiteConfig.h"
#include "OAISiteInstanceCollection.h"
#include "OAISiteLogsConfig.h"
#include "OAISiteSourceControl.h"
#include "OAISlotConfigNamesResource.h"
#include "OAISlotDifferenceCollection.h"
#include "OAIStringDictionary.h"
#include "OAIUser.h"
#include "OAIVnetGateway.h"
#include "OAIVnetInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISitesApi : public QObject {
    Q_OBJECT

public:
    OAISitesApi(const int timeOut = 0);
    ~OAISitesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  premier_add_on OAIPremierAddOnRequest [required]
    */
    virtual void sitesAddSitePremierAddOn(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &subscription_id, const QString &api_version, const OAIPremierAddOnRequest &premier_add_on);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  premier_add_on OAIPremierAddOnRequest [required]
    */
    virtual void sitesAddSitePremierAddOnSlot(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIPremierAddOnRequest &premier_add_on);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void sitesApplySlotConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void sitesApplySlotConfigToProduction(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void sitesBackupSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void sitesBackupSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment OAIDeployment [required]
    */
    virtual void sitesCreateDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &subscription_id, const QString &api_version, const OAIDeployment &deployment);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment OAIDeployment [required]
    */
    virtual void sitesCreateDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIDeployment &deployment);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment OAIDeployment [required]
    */
    virtual void sitesCreateInstanceDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &instance_id, const QString &subscription_id, const QString &api_version, const OAIDeployment &deployment);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deployment OAIDeployment [required]
    */
    virtual void sitesCreateInstanceDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version, const OAIDeployment &deployment);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_envelope OAISite [required]
    * @param[in]  skip_dns_registration QString [optional]
    * @param[in]  skip_custom_domain_verification QString [optional]
    * @param[in]  force_dns_registration QString [optional]
    * @param[in]  ttl_in_seconds QString [optional]
    */
    virtual void sitesCreateOrUpdateSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISite &site_envelope, const ::OpenAPI::OptionalParam<QString> &skip_dns_registration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_custom_domain_verification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force_dns_registration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ttl_in_seconds = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfig [required]
    */
    virtual void sitesCreateOrUpdateSiteConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteConfig &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfig [required]
    */
    virtual void sitesCreateOrUpdateSiteConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteConfig &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  host_name_binding OAIHostNameBinding [required]
    */
    virtual void sitesCreateOrUpdateSiteHostNameBinding(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &subscription_id, const QString &api_version, const OAIHostNameBinding &host_name_binding);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  host_name_binding OAIHostNameBinding [required]
    */
    virtual void sitesCreateOrUpdateSiteHostNameBindingSlot(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIHostNameBinding &host_name_binding);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void sitesCreateOrUpdateSiteRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void sitesCreateOrUpdateSiteRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_envelope OAISite [required]
    * @param[in]  skip_dns_registration QString [optional]
    * @param[in]  skip_custom_domain_verification QString [optional]
    * @param[in]  force_dns_registration QString [optional]
    * @param[in]  ttl_in_seconds QString [optional]
    */
    virtual void sitesCreateOrUpdateSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISite &site_envelope, const ::OpenAPI::OptionalParam<QString> &skip_dns_registration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_custom_domain_verification = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &force_dns_registration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ttl_in_seconds = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void sitesCreateOrUpdateSiteSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void sitesCreateOrUpdateSiteSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetInfo [required]
    */
    virtual void sitesCreateOrUpdateSiteVNETConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version, const OAIVnetInfo &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetGateway [required]
    */
    virtual void sitesCreateOrUpdateSiteVNETConnectionGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version, const OAIVnetGateway &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetGateway [required]
    */
    virtual void sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIVnetGateway &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetInfo [required]
    */
    virtual void sitesCreateOrUpdateSiteVNETConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIVnetInfo &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteBackup(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteBackupSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteInstanceDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteInstanceDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  delete_metrics QString [optional]
    * @param[in]  delete_empty_server_farm QString [optional]
    * @param[in]  skip_dns_registration QString [optional]
    * @param[in]  delete_all_slots QString [optional]
    */
    virtual void sitesDeleteSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &delete_metrics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delete_empty_server_farm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_dns_registration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delete_all_slots = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteHostNameBinding(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteHostNameBindingSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSitePremierAddOn(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSitePremierAddOnSlot(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  delete_metrics QString [optional]
    * @param[in]  delete_empty_server_farm QString [optional]
    * @param[in]  skip_dns_registration QString [optional]
    * @param[in]  delete_all_slots QString [optional]
    */
    virtual void sitesDeleteSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &delete_metrics = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delete_empty_server_farm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skip_dns_registration = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delete_all_slots = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteVNETConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesDeleteSiteVNETConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void sitesDiscoverSiteRestore(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void sitesDiscoverSiteRestoreSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGenerateNewSitePublishingPassword(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGenerateNewSitePublishingPasswordSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    * @param[in]  include_site_types QString [optional]
    */
    virtual void sitesGetDeletedSites(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_site_types = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetDeployments(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetDeploymentsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetInstanceDeployment(const QString &resource_group_name, const QString &name, const QString &id, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetInstanceDeploymentSlot(const QString &resource_group_name, const QString &name, const QString &id, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetInstanceDeployments(const QString &resource_group_name, const QString &name, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetInstanceDeploymentsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &instance_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    */
    virtual void sitesGetSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteBackupConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteBackupConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteBackupStatus(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void sitesGetSiteBackupStatusSecrets(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void sitesGetSiteBackupStatusSecretsSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteBackupStatusSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteHostNameBinding(const QString &resource_group_name, const QString &name, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  host_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteHostNameBindingSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &host_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteHostNameBindings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteHostNameBindingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteInstanceIdentifiers(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteInstanceIdentifiersSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteLogsConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteLogsConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteMetricDefinitionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void sitesGetSiteMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void sitesGetSiteMetricsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  view QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteNetworkFeatures(const QString &resource_group_name, const QString &name, const QString &view, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  view QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteNetworkFeaturesSlot(const QString &resource_group_name, const QString &name, const QString &view, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteOperation(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteOperationSlot(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSitePremierAddOn(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  premier_add_on_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSitePremierAddOnSlot(const QString &resource_group_name, const QString &name, const QString &premier_add_on_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    */
    virtual void sitesGetSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    */
    virtual void sitesGetSiteSlots(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteSnapshots(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteSnapshotsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void sitesGetSiteUsages(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void sitesGetSiteUsagesSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteVNETConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteVNETConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteVNETConnections(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteVNETConnectionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteVnetGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSiteVnetGatewaySlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    * @param[in]  include_site_types QString [optional]
    * @param[in]  include_slots bool [optional]
    */
    virtual void sitesGetSites(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_site_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_slots = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesGetSlotConfigNames(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void sitesGetSlotsDifferencesFromProduction(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void sitesGetSlotsDifferencesSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesIsSiteCloneable(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesIsSiteCloneableSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteAppSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteAppSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteAuthSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteAuthSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteBackups(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteBackupsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteConnectionStrings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteConnectionStringsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteMetadata(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteMetadataSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSitePremierAddOns(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSitePremierAddOnsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSitePublishingCredentials(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSitePublishingCredentialsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  options OAICsmPublishingProfileOptions [required]
    */
    virtual void sitesListSitePublishingProfileXml(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmPublishingProfileOptions &options);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  options OAICsmPublishingProfileOptions [required]
    */
    virtual void sitesListSitePublishingProfileXmlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmPublishingProfileOptions &options);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteRelayServiceConnections(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesListSiteRelayServiceConnectionsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  recovery_entity OAICsmSiteRecoveryEntity [required]
    */
    virtual void sitesRecoverSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmSiteRecoveryEntity &recovery_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  recovery_entity OAICsmSiteRecoveryEntity [required]
    */
    virtual void sitesRecoverSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmSiteRecoveryEntity &recovery_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesResetProductionSlotConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesResetSlotConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  soft_restart bool [optional]
    * @param[in]  synchronous bool [optional]
    */
    virtual void sitesRestartSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &soft_restart = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &synchronous = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  soft_restart bool [optional]
    * @param[in]  synchronous bool [optional]
    */
    virtual void sitesRestartSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &soft_restart = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &synchronous = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void sitesRestoreSite(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  backup_id QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIRestoreRequest [required]
    */
    virtual void sitesRestoreSiteSlot(const QString &resource_group_name, const QString &name, const QString &backup_id, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRestoreRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesStartSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesStartSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesStopSite(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesStopSiteSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void sitesSwapSlotWithProduction(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_swap_entity OAICsmSlotEntity [required]
    */
    virtual void sitesSwapSlotsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAICsmSlotEntity &slot_swap_entity);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesSyncSiteRepository(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sitesSyncSiteRepositorySlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  app_settings OAIStringDictionary [required]
    */
    virtual void sitesUpdateSiteAppSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &app_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  app_settings OAIStringDictionary [required]
    */
    virtual void sitesUpdateSiteAppSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &app_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_auth_settings OAISiteAuthSettings [required]
    */
    virtual void sitesUpdateSiteAuthSettings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteAuthSettings &site_auth_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_auth_settings OAISiteAuthSettings [required]
    */
    virtual void sitesUpdateSiteAuthSettingsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteAuthSettings &site_auth_settings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void sitesUpdateSiteBackupConfiguration(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  request OAIBackupRequest [required]
    */
    virtual void sitesUpdateSiteBackupConfigurationSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIBackupRequest &request);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfig [required]
    */
    virtual void sitesUpdateSiteConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteConfig &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_config OAISiteConfig [required]
    */
    virtual void sitesUpdateSiteConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteConfig &site_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_strings OAIConnectionStringDictionary [required]
    */
    virtual void sitesUpdateSiteConnectionStrings(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIConnectionStringDictionary &connection_strings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_strings OAIConnectionStringDictionary [required]
    */
    virtual void sitesUpdateSiteConnectionStringsSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIConnectionStringDictionary &connection_strings);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_logs_config OAISiteLogsConfig [required]
    */
    virtual void sitesUpdateSiteLogsConfig(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteLogsConfig &site_logs_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_logs_config OAISiteLogsConfig [required]
    */
    virtual void sitesUpdateSiteLogsConfigSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteLogsConfig &site_logs_config);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  metadata OAIStringDictionary [required]
    */
    virtual void sitesUpdateSiteMetadata(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &metadata);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  metadata OAIStringDictionary [required]
    */
    virtual void sitesUpdateSiteMetadataSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIStringDictionary &metadata);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void sitesUpdateSiteRelayServiceConnection(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  entity_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIRelayServiceConnectionEntity [required]
    */
    virtual void sitesUpdateSiteRelayServiceConnectionSlot(const QString &resource_group_name, const QString &name, const QString &entity_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIRelayServiceConnectionEntity &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void sitesUpdateSiteSourceControl(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  site_source_control OAISiteSourceControl [required]
    */
    virtual void sitesUpdateSiteSourceControlSlot(const QString &resource_group_name, const QString &name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAISiteSourceControl &site_source_control);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetInfo [required]
    */
    virtual void sitesUpdateSiteVNETConnection(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &subscription_id, const QString &api_version, const OAIVnetInfo &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetGateway [required]
    */
    virtual void sitesUpdateSiteVNETConnectionGateway(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &subscription_id, const QString &api_version, const OAIVnetGateway &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  gateway_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetGateway [required]
    */
    virtual void sitesUpdateSiteVNETConnectionGatewaySlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &gateway_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIVnetGateway &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  vnet_name QString [required]
    * @param[in]  slot QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_envelope OAIVnetInfo [required]
    */
    virtual void sitesUpdateSiteVNETConnectionSlot(const QString &resource_group_name, const QString &name, const QString &vnet_name, const QString &slot, const QString &subscription_id, const QString &api_version, const OAIVnetInfo &connection_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  slot_config_names OAISlotConfigNamesResource [required]
    */
    virtual void sitesUpdateSlotConfigNames(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAISlotConfigNamesResource &slot_config_names);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sitesAddSitePremierAddOnCallback(OAIHttpRequestWorker *worker);
    void sitesAddSitePremierAddOnSlotCallback(OAIHttpRequestWorker *worker);
    void sitesApplySlotConfigSlotCallback(OAIHttpRequestWorker *worker);
    void sitesApplySlotConfigToProductionCallback(OAIHttpRequestWorker *worker);
    void sitesBackupSiteCallback(OAIHttpRequestWorker *worker);
    void sitesBackupSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateDeploymentCallback(OAIHttpRequestWorker *worker);
    void sitesCreateDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateInstanceDeploymentCallback(OAIHttpRequestWorker *worker);
    void sitesCreateInstanceDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteConfigCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteConfigSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteHostNameBindingCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteHostNameBindingSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteSourceControlCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteVNETConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteVNETConnectionGatewayCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotCallback(OAIHttpRequestWorker *worker);
    void sitesCreateOrUpdateSiteVNETConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteBackupCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteBackupSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteDeploymentCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteInstanceDeploymentCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteInstanceDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteHostNameBindingCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteHostNameBindingSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSitePremierAddOnCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSitePremierAddOnSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteSourceControlCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteVNETConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesDeleteSiteVNETConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesDiscoverSiteRestoreCallback(OAIHttpRequestWorker *worker);
    void sitesDiscoverSiteRestoreSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGenerateNewSitePublishingPasswordCallback(OAIHttpRequestWorker *worker);
    void sitesGenerateNewSitePublishingPasswordSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetDeletedSitesCallback(OAIHttpRequestWorker *worker);
    void sitesGetDeploymentCallback(OAIHttpRequestWorker *worker);
    void sitesGetDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetDeploymentsCallback(OAIHttpRequestWorker *worker);
    void sitesGetDeploymentsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetInstanceDeploymentCallback(OAIHttpRequestWorker *worker);
    void sitesGetInstanceDeploymentSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetInstanceDeploymentsCallback(OAIHttpRequestWorker *worker);
    void sitesGetInstanceDeploymentsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteBackupConfigurationCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteBackupConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteBackupStatusCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteBackupStatusSecretsCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteBackupStatusSecretsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteBackupStatusSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteConfigCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteConfigSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteHostNameBindingCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteHostNameBindingSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteHostNameBindingsCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteHostNameBindingsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteInstanceIdentifiersCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteInstanceIdentifiersSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteLogsConfigCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteLogsConfigSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteMetricDefinitionsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteMetricsCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteMetricsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteNetworkFeaturesCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteNetworkFeaturesSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteOperationCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteOperationSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSitePremierAddOnCallback(OAIHttpRequestWorker *worker);
    void sitesGetSitePremierAddOnSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteSlotsCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteSnapshotsCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteSnapshotsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteSourceControlCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteUsagesCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteUsagesSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteVNETConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteVNETConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteVNETConnectionsCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteVNETConnectionsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteVnetGatewayCallback(OAIHttpRequestWorker *worker);
    void sitesGetSiteVnetGatewaySlotCallback(OAIHttpRequestWorker *worker);
    void sitesGetSitesCallback(OAIHttpRequestWorker *worker);
    void sitesGetSlotConfigNamesCallback(OAIHttpRequestWorker *worker);
    void sitesGetSlotsDifferencesFromProductionCallback(OAIHttpRequestWorker *worker);
    void sitesGetSlotsDifferencesSlotCallback(OAIHttpRequestWorker *worker);
    void sitesIsSiteCloneableCallback(OAIHttpRequestWorker *worker);
    void sitesIsSiteCloneableSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteAppSettingsCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteAppSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteAuthSettingsCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteAuthSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteBackupsCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteBackupsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteConnectionStringsCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteConnectionStringsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteMetadataCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteMetadataSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSitePremierAddOnsCallback(OAIHttpRequestWorker *worker);
    void sitesListSitePremierAddOnsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSitePublishingCredentialsCallback(OAIHttpRequestWorker *worker);
    void sitesListSitePublishingCredentialsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSitePublishingProfileXmlCallback(OAIHttpRequestWorker *worker);
    void sitesListSitePublishingProfileXmlSlotCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteRelayServiceConnectionsCallback(OAIHttpRequestWorker *worker);
    void sitesListSiteRelayServiceConnectionsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesRecoverSiteCallback(OAIHttpRequestWorker *worker);
    void sitesRecoverSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesResetProductionSlotConfigCallback(OAIHttpRequestWorker *worker);
    void sitesResetSlotConfigSlotCallback(OAIHttpRequestWorker *worker);
    void sitesRestartSiteCallback(OAIHttpRequestWorker *worker);
    void sitesRestartSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesRestoreSiteCallback(OAIHttpRequestWorker *worker);
    void sitesRestoreSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesStartSiteCallback(OAIHttpRequestWorker *worker);
    void sitesStartSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesStopSiteCallback(OAIHttpRequestWorker *worker);
    void sitesStopSiteSlotCallback(OAIHttpRequestWorker *worker);
    void sitesSwapSlotWithProductionCallback(OAIHttpRequestWorker *worker);
    void sitesSwapSlotsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesSyncSiteRepositoryCallback(OAIHttpRequestWorker *worker);
    void sitesSyncSiteRepositorySlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteAppSettingsCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteAppSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteAuthSettingsCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteAuthSettingsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteBackupConfigurationCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteBackupConfigurationSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteConfigCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteConfigSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteConnectionStringsCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteConnectionStringsSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteLogsConfigCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteLogsConfigSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteMetadataCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteMetadataSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteRelayServiceConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteRelayServiceConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteSourceControlCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteSourceControlSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteVNETConnectionCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteVNETConnectionGatewayCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteVNETConnectionGatewaySlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSiteVNETConnectionSlotCallback(OAIHttpRequestWorker *worker);
    void sitesUpdateSlotConfigNamesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sitesAddSitePremierAddOnSignal(OAIObject summary);
    void sitesAddSitePremierAddOnSlotSignal(OAIObject summary);
    void sitesApplySlotConfigSlotSignal(OAIObject summary);
    void sitesApplySlotConfigToProductionSignal(OAIObject summary);
    void sitesBackupSiteSignal(OAIBackupItem summary);
    void sitesBackupSiteSlotSignal(OAIBackupItem summary);
    void sitesCreateDeploymentSignal(OAIDeployment summary);
    void sitesCreateDeploymentSlotSignal(OAIDeployment summary);
    void sitesCreateInstanceDeploymentSignal(OAIDeployment summary);
    void sitesCreateInstanceDeploymentSlotSignal(OAIDeployment summary);
    void sitesCreateOrUpdateSiteSignal(OAISite summary);
    void sitesCreateOrUpdateSiteConfigSignal(OAISiteConfig summary);
    void sitesCreateOrUpdateSiteConfigSlotSignal(OAISiteConfig summary);
    void sitesCreateOrUpdateSiteHostNameBindingSignal(OAIHostNameBinding summary);
    void sitesCreateOrUpdateSiteHostNameBindingSlotSignal(OAIHostNameBinding summary);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSignal(OAIRelayServiceConnectionEntity summary);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignal(OAIRelayServiceConnectionEntity summary);
    void sitesCreateOrUpdateSiteSlotSignal(OAISite summary);
    void sitesCreateOrUpdateSiteSourceControlSignal(OAISiteSourceControl summary);
    void sitesCreateOrUpdateSiteSourceControlSlotSignal(OAISiteSourceControl summary);
    void sitesCreateOrUpdateSiteVNETConnectionSignal(OAIVnetInfo summary);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySignal(OAIVnetGateway summary);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignal(OAIVnetGateway summary);
    void sitesCreateOrUpdateSiteVNETConnectionSlotSignal(OAIVnetInfo summary);
    void sitesDeleteBackupSignal(OAIBackupItem summary);
    void sitesDeleteBackupSlotSignal(OAIBackupItem summary);
    void sitesDeleteDeploymentSignal(OAIObject summary);
    void sitesDeleteDeploymentSlotSignal(OAIObject summary);
    void sitesDeleteInstanceDeploymentSignal(OAIObject summary);
    void sitesDeleteInstanceDeploymentSlotSignal(OAIObject summary);
    void sitesDeleteSiteSignal(OAIObject summary);
    void sitesDeleteSiteHostNameBindingSignal(OAIObject summary);
    void sitesDeleteSiteHostNameBindingSlotSignal(OAIObject summary);
    void sitesDeleteSitePremierAddOnSignal(OAIObject summary);
    void sitesDeleteSitePremierAddOnSlotSignal(OAIObject summary);
    void sitesDeleteSiteRelayServiceConnectionSignal(OAIObject summary);
    void sitesDeleteSiteRelayServiceConnectionSlotSignal(OAIObject summary);
    void sitesDeleteSiteSlotSignal(OAIObject summary);
    void sitesDeleteSiteSourceControlSignal(OAIObject summary);
    void sitesDeleteSiteSourceControlSlotSignal(OAIObject summary);
    void sitesDeleteSiteVNETConnectionSignal(OAIObject summary);
    void sitesDeleteSiteVNETConnectionSlotSignal(OAIObject summary);
    void sitesDiscoverSiteRestoreSignal(OAIRestoreRequest summary);
    void sitesDiscoverSiteRestoreSlotSignal(OAIRestoreRequest summary);
    void sitesGenerateNewSitePublishingPasswordSignal(OAIObject summary);
    void sitesGenerateNewSitePublishingPasswordSlotSignal(OAIObject summary);
    void sitesGetDeletedSitesSignal(OAIDeletedSiteCollection summary);
    void sitesGetDeploymentSignal(OAIDeployment summary);
    void sitesGetDeploymentSlotSignal(OAIDeployment summary);
    void sitesGetDeploymentsSignal(OAIDeploymentCollection summary);
    void sitesGetDeploymentsSlotSignal(OAIDeploymentCollection summary);
    void sitesGetInstanceDeploymentSignal(OAIDeployment summary);
    void sitesGetInstanceDeploymentSlotSignal(OAIDeployment summary);
    void sitesGetInstanceDeploymentsSignal(OAIDeploymentCollection summary);
    void sitesGetInstanceDeploymentsSlotSignal(OAIDeploymentCollection summary);
    void sitesGetSiteSignal(OAISite summary);
    void sitesGetSiteBackupConfigurationSignal(OAIBackupRequest summary);
    void sitesGetSiteBackupConfigurationSlotSignal(OAIBackupRequest summary);
    void sitesGetSiteBackupStatusSignal(OAIBackupItem summary);
    void sitesGetSiteBackupStatusSecretsSignal(OAIBackupItem summary);
    void sitesGetSiteBackupStatusSecretsSlotSignal(OAIBackupItem summary);
    void sitesGetSiteBackupStatusSlotSignal(OAIBackupItem summary);
    void sitesGetSiteConfigSignal(OAISiteConfig summary);
    void sitesGetSiteConfigSlotSignal(OAISiteConfig summary);
    void sitesGetSiteHostNameBindingSignal(OAIHostNameBinding summary);
    void sitesGetSiteHostNameBindingSlotSignal(OAIHostNameBinding summary);
    void sitesGetSiteHostNameBindingsSignal(OAIHostNameBindingCollection summary);
    void sitesGetSiteHostNameBindingsSlotSignal(OAIHostNameBindingCollection summary);
    void sitesGetSiteInstanceIdentifiersSignal(OAISiteInstanceCollection summary);
    void sitesGetSiteInstanceIdentifiersSlotSignal(OAISiteInstanceCollection summary);
    void sitesGetSiteLogsConfigSignal(OAISiteLogsConfig summary);
    void sitesGetSiteLogsConfigSlotSignal(OAISiteLogsConfig summary);
    void sitesGetSiteMetricDefinitionsSignal(OAIMetricDefinitionCollection summary);
    void sitesGetSiteMetricDefinitionsSlotSignal(OAIMetricDefinitionCollection summary);
    void sitesGetSiteMetricsSignal(OAIResourceMetricCollection summary);
    void sitesGetSiteMetricsSlotSignal(OAIResourceMetricCollection summary);
    void sitesGetSiteNetworkFeaturesSignal(OAINetworkFeatures summary);
    void sitesGetSiteNetworkFeaturesSlotSignal(OAINetworkFeatures summary);
    void sitesGetSiteOperationSignal(OAIObject summary);
    void sitesGetSiteOperationSlotSignal(OAIObject summary);
    void sitesGetSitePremierAddOnSignal(OAIObject summary);
    void sitesGetSitePremierAddOnSlotSignal(OAIObject summary);
    void sitesGetSiteRelayServiceConnectionSignal(OAIRelayServiceConnectionEntity summary);
    void sitesGetSiteRelayServiceConnectionSlotSignal(OAIRelayServiceConnectionEntity summary);
    void sitesGetSiteSlotSignal(OAISite summary);
    void sitesGetSiteSlotsSignal(OAISiteCollection summary);
    void sitesGetSiteSnapshotsSignal(OAIObject summary);
    void sitesGetSiteSnapshotsSlotSignal(OAIObject summary);
    void sitesGetSiteSourceControlSignal(OAISiteSourceControl summary);
    void sitesGetSiteSourceControlSlotSignal(OAISiteSourceControl summary);
    void sitesGetSiteUsagesSignal(OAICsmUsageQuotaCollection summary);
    void sitesGetSiteUsagesSlotSignal(OAICsmUsageQuotaCollection summary);
    void sitesGetSiteVNETConnectionSignal(OAIVnetInfo summary);
    void sitesGetSiteVNETConnectionSlotSignal(OAIVnetInfo summary);
    void sitesGetSiteVNETConnectionsSignal(QList<OAIVnetInfo> summary);
    void sitesGetSiteVNETConnectionsSlotSignal(QList<OAIVnetInfo> summary);
    void sitesGetSiteVnetGatewaySignal(OAIObject summary);
    void sitesGetSiteVnetGatewaySlotSignal(OAIObject summary);
    void sitesGetSitesSignal(OAISiteCollection summary);
    void sitesGetSlotConfigNamesSignal(OAISlotConfigNamesResource summary);
    void sitesGetSlotsDifferencesFromProductionSignal(OAISlotDifferenceCollection summary);
    void sitesGetSlotsDifferencesSlotSignal(OAISlotDifferenceCollection summary);
    void sitesIsSiteCloneableSignal(OAISiteCloneability summary);
    void sitesIsSiteCloneableSlotSignal(OAISiteCloneability summary);
    void sitesListSiteAppSettingsSignal(OAIStringDictionary summary);
    void sitesListSiteAppSettingsSlotSignal(OAIStringDictionary summary);
    void sitesListSiteAuthSettingsSignal(OAISiteAuthSettings summary);
    void sitesListSiteAuthSettingsSlotSignal(OAISiteAuthSettings summary);
    void sitesListSiteBackupsSignal(OAIBackupItemCollection summary);
    void sitesListSiteBackupsSlotSignal(OAIBackupItemCollection summary);
    void sitesListSiteConnectionStringsSignal(OAIConnectionStringDictionary summary);
    void sitesListSiteConnectionStringsSlotSignal(OAIConnectionStringDictionary summary);
    void sitesListSiteMetadataSignal(OAIStringDictionary summary);
    void sitesListSiteMetadataSlotSignal(OAIStringDictionary summary);
    void sitesListSitePremierAddOnsSignal(OAIObject summary);
    void sitesListSitePremierAddOnsSlotSignal(OAIObject summary);
    void sitesListSitePublishingCredentialsSignal(OAIUser summary);
    void sitesListSitePublishingCredentialsSlotSignal(OAIUser summary);
    void sitesListSitePublishingProfileXmlSignal(OAIHttpFileElement summary);
    void sitesListSitePublishingProfileXmlSlotSignal(OAIHttpFileElement summary);
    void sitesListSiteRelayServiceConnectionsSignal(OAIRelayServiceConnectionEntity summary);
    void sitesListSiteRelayServiceConnectionsSlotSignal(OAIRelayServiceConnectionEntity summary);
    void sitesRecoverSiteSignal(OAISite summary);
    void sitesRecoverSiteSlotSignal(OAISite summary);
    void sitesResetProductionSlotConfigSignal(OAIObject summary);
    void sitesResetSlotConfigSlotSignal(OAIObject summary);
    void sitesRestartSiteSignal(OAIObject summary);
    void sitesRestartSiteSlotSignal(OAIObject summary);
    void sitesRestoreSiteSignal(OAIRestoreResponse summary);
    void sitesRestoreSiteSlotSignal(OAIRestoreResponse summary);
    void sitesStartSiteSignal(OAIObject summary);
    void sitesStartSiteSlotSignal(OAIObject summary);
    void sitesStopSiteSignal(OAIObject summary);
    void sitesStopSiteSlotSignal(OAIObject summary);
    void sitesSwapSlotWithProductionSignal(OAIObject summary);
    void sitesSwapSlotsSlotSignal(OAIObject summary);
    void sitesSyncSiteRepositorySignal(OAIObject summary);
    void sitesSyncSiteRepositorySlotSignal(OAIObject summary);
    void sitesUpdateSiteAppSettingsSignal(OAIStringDictionary summary);
    void sitesUpdateSiteAppSettingsSlotSignal(OAIStringDictionary summary);
    void sitesUpdateSiteAuthSettingsSignal(OAISiteAuthSettings summary);
    void sitesUpdateSiteAuthSettingsSlotSignal(OAISiteAuthSettings summary);
    void sitesUpdateSiteBackupConfigurationSignal(OAIBackupRequest summary);
    void sitesUpdateSiteBackupConfigurationSlotSignal(OAIBackupRequest summary);
    void sitesUpdateSiteConfigSignal(OAISiteConfig summary);
    void sitesUpdateSiteConfigSlotSignal(OAISiteConfig summary);
    void sitesUpdateSiteConnectionStringsSignal(OAIConnectionStringDictionary summary);
    void sitesUpdateSiteConnectionStringsSlotSignal(OAIConnectionStringDictionary summary);
    void sitesUpdateSiteLogsConfigSignal(OAISiteLogsConfig summary);
    void sitesUpdateSiteLogsConfigSlotSignal(OAISiteLogsConfig summary);
    void sitesUpdateSiteMetadataSignal(OAIStringDictionary summary);
    void sitesUpdateSiteMetadataSlotSignal(OAIStringDictionary summary);
    void sitesUpdateSiteRelayServiceConnectionSignal(OAIRelayServiceConnectionEntity summary);
    void sitesUpdateSiteRelayServiceConnectionSlotSignal(OAIRelayServiceConnectionEntity summary);
    void sitesUpdateSiteSourceControlSignal(OAISiteSourceControl summary);
    void sitesUpdateSiteSourceControlSlotSignal(OAISiteSourceControl summary);
    void sitesUpdateSiteVNETConnectionSignal(OAIVnetInfo summary);
    void sitesUpdateSiteVNETConnectionGatewaySignal(OAIVnetGateway summary);
    void sitesUpdateSiteVNETConnectionGatewaySlotSignal(OAIVnetGateway summary);
    void sitesUpdateSiteVNETConnectionSlotSignal(OAIVnetInfo summary);
    void sitesUpdateSlotConfigNamesSignal(OAISlotConfigNamesResource summary);


    void sitesAddSitePremierAddOnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesAddSitePremierAddOnSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesApplySlotConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesApplySlotConfigToProductionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesBackupSiteSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesBackupSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesCreateDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesCreateDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesCreateInstanceDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesCreateInstanceDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesCreateOrUpdateSiteSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void sitesCreateOrUpdateSiteConfigSignalFull(OAIHttpRequestWorker *worker, OAISiteConfig summary);
    void sitesCreateOrUpdateSiteConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfig summary);
    void sitesCreateOrUpdateSiteHostNameBindingSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void sitesCreateOrUpdateSiteHostNameBindingSlotSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesCreateOrUpdateSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void sitesCreateOrUpdateSiteSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void sitesCreateOrUpdateSiteSourceControlSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void sitesCreateOrUpdateSiteVNETConnectionSignalFull(OAIHttpRequestWorker *worker, OAIVnetInfo summary);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySignalFull(OAIHttpRequestWorker *worker, OAIVnetGateway summary);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignalFull(OAIHttpRequestWorker *worker, OAIVnetGateway summary);
    void sitesCreateOrUpdateSiteVNETConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIVnetInfo summary);
    void sitesDeleteBackupSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesDeleteBackupSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesDeleteDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteInstanceDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteInstanceDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteHostNameBindingSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteHostNameBindingSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSitePremierAddOnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSitePremierAddOnSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteSourceControlSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteSourceControlSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteVNETConnectionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDeleteSiteVNETConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesDiscoverSiteRestoreSignalFull(OAIHttpRequestWorker *worker, OAIRestoreRequest summary);
    void sitesDiscoverSiteRestoreSlotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreRequest summary);
    void sitesGenerateNewSitePublishingPasswordSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGenerateNewSitePublishingPasswordSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetDeletedSitesSignalFull(OAIHttpRequestWorker *worker, OAIDeletedSiteCollection summary);
    void sitesGetDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesGetDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesGetDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentCollection summary);
    void sitesGetDeploymentsSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentCollection summary);
    void sitesGetInstanceDeploymentSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesGetInstanceDeploymentSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeployment summary);
    void sitesGetInstanceDeploymentsSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentCollection summary);
    void sitesGetInstanceDeploymentsSlotSignalFull(OAIHttpRequestWorker *worker, OAIDeploymentCollection summary);
    void sitesGetSiteSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void sitesGetSiteBackupConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void sitesGetSiteBackupConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void sitesGetSiteBackupStatusSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesGetSiteBackupStatusSecretsSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesGetSiteBackupStatusSecretsSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesGetSiteBackupStatusSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItem summary);
    void sitesGetSiteConfigSignalFull(OAIHttpRequestWorker *worker, OAISiteConfig summary);
    void sitesGetSiteConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfig summary);
    void sitesGetSiteHostNameBindingSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void sitesGetSiteHostNameBindingSlotSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBinding summary);
    void sitesGetSiteHostNameBindingsSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBindingCollection summary);
    void sitesGetSiteHostNameBindingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIHostNameBindingCollection summary);
    void sitesGetSiteInstanceIdentifiersSignalFull(OAIHttpRequestWorker *worker, OAISiteInstanceCollection summary);
    void sitesGetSiteInstanceIdentifiersSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteInstanceCollection summary);
    void sitesGetSiteLogsConfigSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void sitesGetSiteLogsConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void sitesGetSiteMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionCollection summary);
    void sitesGetSiteMetricDefinitionsSlotSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionCollection summary);
    void sitesGetSiteMetricsSignalFull(OAIHttpRequestWorker *worker, OAIResourceMetricCollection summary);
    void sitesGetSiteMetricsSlotSignalFull(OAIHttpRequestWorker *worker, OAIResourceMetricCollection summary);
    void sitesGetSiteNetworkFeaturesSignalFull(OAIHttpRequestWorker *worker, OAINetworkFeatures summary);
    void sitesGetSiteNetworkFeaturesSlotSignalFull(OAIHttpRequestWorker *worker, OAINetworkFeatures summary);
    void sitesGetSiteOperationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSiteOperationSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSitePremierAddOnSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSitePremierAddOnSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSiteRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesGetSiteRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesGetSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void sitesGetSiteSlotsSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);
    void sitesGetSiteSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSiteSnapshotsSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSiteSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void sitesGetSiteSourceControlSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void sitesGetSiteUsagesSignalFull(OAIHttpRequestWorker *worker, OAICsmUsageQuotaCollection summary);
    void sitesGetSiteUsagesSlotSignalFull(OAIHttpRequestWorker *worker, OAICsmUsageQuotaCollection summary);
    void sitesGetSiteVNETConnectionSignalFull(OAIHttpRequestWorker *worker, OAIVnetInfo summary);
    void sitesGetSiteVNETConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIVnetInfo summary);
    void sitesGetSiteVNETConnectionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIVnetInfo> summary);
    void sitesGetSiteVNETConnectionsSlotSignalFull(OAIHttpRequestWorker *worker, QList<OAIVnetInfo> summary);
    void sitesGetSiteVnetGatewaySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSiteVnetGatewaySlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesGetSitesSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);
    void sitesGetSlotConfigNamesSignalFull(OAIHttpRequestWorker *worker, OAISlotConfigNamesResource summary);
    void sitesGetSlotsDifferencesFromProductionSignalFull(OAIHttpRequestWorker *worker, OAISlotDifferenceCollection summary);
    void sitesGetSlotsDifferencesSlotSignalFull(OAIHttpRequestWorker *worker, OAISlotDifferenceCollection summary);
    void sitesIsSiteCloneableSignalFull(OAIHttpRequestWorker *worker, OAISiteCloneability summary);
    void sitesIsSiteCloneableSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteCloneability summary);
    void sitesListSiteAppSettingsSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesListSiteAppSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesListSiteAuthSettingsSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void sitesListSiteAuthSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void sitesListSiteBackupsSignalFull(OAIHttpRequestWorker *worker, OAIBackupItemCollection summary);
    void sitesListSiteBackupsSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupItemCollection summary);
    void sitesListSiteConnectionStringsSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void sitesListSiteConnectionStringsSlotSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void sitesListSiteMetadataSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesListSiteMetadataSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesListSitePremierAddOnsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesListSitePremierAddOnsSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesListSitePublishingCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void sitesListSitePublishingCredentialsSlotSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void sitesListSitePublishingProfileXmlSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void sitesListSitePublishingProfileXmlSlotSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void sitesListSiteRelayServiceConnectionsSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesListSiteRelayServiceConnectionsSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesRecoverSiteSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void sitesRecoverSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void sitesResetProductionSlotConfigSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesResetSlotConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesRestartSiteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesRestartSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesRestoreSiteSignalFull(OAIHttpRequestWorker *worker, OAIRestoreResponse summary);
    void sitesRestoreSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIRestoreResponse summary);
    void sitesStartSiteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesStartSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesStopSiteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesStopSiteSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesSwapSlotWithProductionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesSwapSlotsSlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesSyncSiteRepositorySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesSyncSiteRepositorySlotSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void sitesUpdateSiteAppSettingsSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesUpdateSiteAppSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesUpdateSiteAuthSettingsSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void sitesUpdateSiteAuthSettingsSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteAuthSettings summary);
    void sitesUpdateSiteBackupConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void sitesUpdateSiteBackupConfigurationSlotSignalFull(OAIHttpRequestWorker *worker, OAIBackupRequest summary);
    void sitesUpdateSiteConfigSignalFull(OAIHttpRequestWorker *worker, OAISiteConfig summary);
    void sitesUpdateSiteConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteConfig summary);
    void sitesUpdateSiteConnectionStringsSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void sitesUpdateSiteConnectionStringsSlotSignalFull(OAIHttpRequestWorker *worker, OAIConnectionStringDictionary summary);
    void sitesUpdateSiteLogsConfigSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void sitesUpdateSiteLogsConfigSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteLogsConfig summary);
    void sitesUpdateSiteMetadataSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesUpdateSiteMetadataSlotSignalFull(OAIHttpRequestWorker *worker, OAIStringDictionary summary);
    void sitesUpdateSiteRelayServiceConnectionSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesUpdateSiteRelayServiceConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIRelayServiceConnectionEntity summary);
    void sitesUpdateSiteSourceControlSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void sitesUpdateSiteSourceControlSlotSignalFull(OAIHttpRequestWorker *worker, OAISiteSourceControl summary);
    void sitesUpdateSiteVNETConnectionSignalFull(OAIHttpRequestWorker *worker, OAIVnetInfo summary);
    void sitesUpdateSiteVNETConnectionGatewaySignalFull(OAIHttpRequestWorker *worker, OAIVnetGateway summary);
    void sitesUpdateSiteVNETConnectionGatewaySlotSignalFull(OAIHttpRequestWorker *worker, OAIVnetGateway summary);
    void sitesUpdateSiteVNETConnectionSlotSignalFull(OAIHttpRequestWorker *worker, OAIVnetInfo summary);
    void sitesUpdateSlotConfigNamesSignalFull(OAIHttpRequestWorker *worker, OAISlotConfigNamesResource summary);

    Q_DECL_DEPRECATED_X("Use sitesAddSitePremierAddOnSignalError() instead")
    void sitesAddSitePremierAddOnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesAddSitePremierAddOnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesAddSitePremierAddOnSlotSignalError() instead")
    void sitesAddSitePremierAddOnSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesAddSitePremierAddOnSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesApplySlotConfigSlotSignalError() instead")
    void sitesApplySlotConfigSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesApplySlotConfigSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesApplySlotConfigToProductionSignalError() instead")
    void sitesApplySlotConfigToProductionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesApplySlotConfigToProductionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesBackupSiteSignalError() instead")
    void sitesBackupSiteSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesBackupSiteSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesBackupSiteSlotSignalError() instead")
    void sitesBackupSiteSlotSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesBackupSiteSlotSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateDeploymentSignalError() instead")
    void sitesCreateDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateDeploymentSlotSignalError() instead")
    void sitesCreateDeploymentSlotSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateDeploymentSlotSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateInstanceDeploymentSignalError() instead")
    void sitesCreateInstanceDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateInstanceDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateInstanceDeploymentSlotSignalError() instead")
    void sitesCreateInstanceDeploymentSlotSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateInstanceDeploymentSlotSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSignalError() instead")
    void sitesCreateOrUpdateSiteSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteConfigSignalError() instead")
    void sitesCreateOrUpdateSiteConfigSignalE(OAISiteConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteConfigSignalError(OAISiteConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteConfigSlotSignalError() instead")
    void sitesCreateOrUpdateSiteConfigSlotSignalE(OAISiteConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteConfigSlotSignalError(OAISiteConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteHostNameBindingSignalError() instead")
    void sitesCreateOrUpdateSiteHostNameBindingSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteHostNameBindingSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteHostNameBindingSlotSignalError() instead")
    void sitesCreateOrUpdateSiteHostNameBindingSlotSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteHostNameBindingSlotSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteRelayServiceConnectionSignalError() instead")
    void sitesCreateOrUpdateSiteRelayServiceConnectionSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignalError() instead")
    void sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSlotSignalError() instead")
    void sitesCreateOrUpdateSiteSlotSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSlotSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSourceControlSignalError() instead")
    void sitesCreateOrUpdateSiteSourceControlSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSourceControlSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSourceControlSlotSignalError() instead")
    void sitesCreateOrUpdateSiteSourceControlSlotSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSourceControlSlotSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionSignalError() instead")
    void sitesCreateOrUpdateSiteVNETConnectionSignalE(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionSignalError(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionGatewaySignalError() instead")
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySignalE(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySignalError(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignalError() instead")
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignalE(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignalError(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionSlotSignalError() instead")
    void sitesCreateOrUpdateSiteVNETConnectionSlotSignalE(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionSlotSignalError(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteBackupSignalError() instead")
    void sitesDeleteBackupSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteBackupSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteBackupSlotSignalError() instead")
    void sitesDeleteBackupSlotSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteBackupSlotSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteDeploymentSignalError() instead")
    void sitesDeleteDeploymentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteDeploymentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteDeploymentSlotSignalError() instead")
    void sitesDeleteDeploymentSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteDeploymentSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteInstanceDeploymentSignalError() instead")
    void sitesDeleteInstanceDeploymentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteInstanceDeploymentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteInstanceDeploymentSlotSignalError() instead")
    void sitesDeleteInstanceDeploymentSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteInstanceDeploymentSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSignalError() instead")
    void sitesDeleteSiteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteHostNameBindingSignalError() instead")
    void sitesDeleteSiteHostNameBindingSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteHostNameBindingSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteHostNameBindingSlotSignalError() instead")
    void sitesDeleteSiteHostNameBindingSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteHostNameBindingSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSitePremierAddOnSignalError() instead")
    void sitesDeleteSitePremierAddOnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSitePremierAddOnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSitePremierAddOnSlotSignalError() instead")
    void sitesDeleteSitePremierAddOnSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSitePremierAddOnSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteRelayServiceConnectionSignalError() instead")
    void sitesDeleteSiteRelayServiceConnectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteRelayServiceConnectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteRelayServiceConnectionSlotSignalError() instead")
    void sitesDeleteSiteRelayServiceConnectionSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteRelayServiceConnectionSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSlotSignalError() instead")
    void sitesDeleteSiteSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSourceControlSignalError() instead")
    void sitesDeleteSiteSourceControlSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSourceControlSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSourceControlSlotSignalError() instead")
    void sitesDeleteSiteSourceControlSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSourceControlSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteVNETConnectionSignalError() instead")
    void sitesDeleteSiteVNETConnectionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteVNETConnectionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteVNETConnectionSlotSignalError() instead")
    void sitesDeleteSiteVNETConnectionSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteVNETConnectionSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDiscoverSiteRestoreSignalError() instead")
    void sitesDiscoverSiteRestoreSignalE(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDiscoverSiteRestoreSignalError(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDiscoverSiteRestoreSlotSignalError() instead")
    void sitesDiscoverSiteRestoreSlotSignalE(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDiscoverSiteRestoreSlotSignalError(OAIRestoreRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGenerateNewSitePublishingPasswordSignalError() instead")
    void sitesGenerateNewSitePublishingPasswordSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGenerateNewSitePublishingPasswordSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGenerateNewSitePublishingPasswordSlotSignalError() instead")
    void sitesGenerateNewSitePublishingPasswordSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGenerateNewSitePublishingPasswordSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeletedSitesSignalError() instead")
    void sitesGetDeletedSitesSignalE(OAIDeletedSiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeletedSitesSignalError(OAIDeletedSiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentSignalError() instead")
    void sitesGetDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentSlotSignalError() instead")
    void sitesGetDeploymentSlotSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentSlotSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentsSignalError() instead")
    void sitesGetDeploymentsSignalE(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentsSignalError(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentsSlotSignalError() instead")
    void sitesGetDeploymentsSlotSignalE(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentsSlotSignalError(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentSignalError() instead")
    void sitesGetInstanceDeploymentSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentSlotSignalError() instead")
    void sitesGetInstanceDeploymentSlotSignalE(OAIDeployment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentSlotSignalError(OAIDeployment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentsSignalError() instead")
    void sitesGetInstanceDeploymentsSignalE(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentsSignalError(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentsSlotSignalError() instead")
    void sitesGetInstanceDeploymentsSlotSignalE(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentsSlotSignalError(OAIDeploymentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSignalError() instead")
    void sitesGetSiteSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupConfigurationSignalError() instead")
    void sitesGetSiteBackupConfigurationSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupConfigurationSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupConfigurationSlotSignalError() instead")
    void sitesGetSiteBackupConfigurationSlotSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupConfigurationSlotSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSignalError() instead")
    void sitesGetSiteBackupStatusSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSecretsSignalError() instead")
    void sitesGetSiteBackupStatusSecretsSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSecretsSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSecretsSlotSignalError() instead")
    void sitesGetSiteBackupStatusSecretsSlotSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSecretsSlotSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSlotSignalError() instead")
    void sitesGetSiteBackupStatusSlotSignalE(OAIBackupItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSlotSignalError(OAIBackupItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteConfigSignalError() instead")
    void sitesGetSiteConfigSignalE(OAISiteConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteConfigSignalError(OAISiteConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteConfigSlotSignalError() instead")
    void sitesGetSiteConfigSlotSignalE(OAISiteConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteConfigSlotSignalError(OAISiteConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingSignalError() instead")
    void sitesGetSiteHostNameBindingSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingSlotSignalError() instead")
    void sitesGetSiteHostNameBindingSlotSignalE(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingSlotSignalError(OAIHostNameBinding summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingsSignalError() instead")
    void sitesGetSiteHostNameBindingsSignalE(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingsSignalError(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingsSlotSignalError() instead")
    void sitesGetSiteHostNameBindingsSlotSignalE(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingsSlotSignalError(OAIHostNameBindingCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteInstanceIdentifiersSignalError() instead")
    void sitesGetSiteInstanceIdentifiersSignalE(OAISiteInstanceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteInstanceIdentifiersSignalError(OAISiteInstanceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteInstanceIdentifiersSlotSignalError() instead")
    void sitesGetSiteInstanceIdentifiersSlotSignalE(OAISiteInstanceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteInstanceIdentifiersSlotSignalError(OAISiteInstanceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteLogsConfigSignalError() instead")
    void sitesGetSiteLogsConfigSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteLogsConfigSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteLogsConfigSlotSignalError() instead")
    void sitesGetSiteLogsConfigSlotSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteLogsConfigSlotSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricDefinitionsSignalError() instead")
    void sitesGetSiteMetricDefinitionsSignalE(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricDefinitionsSignalError(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricDefinitionsSlotSignalError() instead")
    void sitesGetSiteMetricDefinitionsSlotSignalE(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricDefinitionsSlotSignalError(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricsSignalError() instead")
    void sitesGetSiteMetricsSignalE(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricsSignalError(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricsSlotSignalError() instead")
    void sitesGetSiteMetricsSlotSignalE(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricsSlotSignalError(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteNetworkFeaturesSignalError() instead")
    void sitesGetSiteNetworkFeaturesSignalE(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteNetworkFeaturesSignalError(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteNetworkFeaturesSlotSignalError() instead")
    void sitesGetSiteNetworkFeaturesSlotSignalE(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteNetworkFeaturesSlotSignalError(OAINetworkFeatures summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteOperationSignalError() instead")
    void sitesGetSiteOperationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteOperationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteOperationSlotSignalError() instead")
    void sitesGetSiteOperationSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteOperationSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSitePremierAddOnSignalError() instead")
    void sitesGetSitePremierAddOnSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSitePremierAddOnSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSitePremierAddOnSlotSignalError() instead")
    void sitesGetSitePremierAddOnSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSitePremierAddOnSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteRelayServiceConnectionSignalError() instead")
    void sitesGetSiteRelayServiceConnectionSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteRelayServiceConnectionSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteRelayServiceConnectionSlotSignalError() instead")
    void sitesGetSiteRelayServiceConnectionSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteRelayServiceConnectionSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSlotSignalError() instead")
    void sitesGetSiteSlotSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSlotSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSlotsSignalError() instead")
    void sitesGetSiteSlotsSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSlotsSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSnapshotsSignalError() instead")
    void sitesGetSiteSnapshotsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSnapshotsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSnapshotsSlotSignalError() instead")
    void sitesGetSiteSnapshotsSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSnapshotsSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSourceControlSignalError() instead")
    void sitesGetSiteSourceControlSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSourceControlSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSourceControlSlotSignalError() instead")
    void sitesGetSiteSourceControlSlotSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSourceControlSlotSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteUsagesSignalError() instead")
    void sitesGetSiteUsagesSignalE(OAICsmUsageQuotaCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteUsagesSignalError(OAICsmUsageQuotaCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteUsagesSlotSignalError() instead")
    void sitesGetSiteUsagesSlotSignalE(OAICsmUsageQuotaCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteUsagesSlotSignalError(OAICsmUsageQuotaCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionSignalError() instead")
    void sitesGetSiteVNETConnectionSignalE(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionSignalError(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionSlotSignalError() instead")
    void sitesGetSiteVNETConnectionSlotSignalE(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionSlotSignalError(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionsSignalError() instead")
    void sitesGetSiteVNETConnectionsSignalE(QList<OAIVnetInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionsSignalError(QList<OAIVnetInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionsSlotSignalError() instead")
    void sitesGetSiteVNETConnectionsSlotSignalE(QList<OAIVnetInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionsSlotSignalError(QList<OAIVnetInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVnetGatewaySignalError() instead")
    void sitesGetSiteVnetGatewaySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVnetGatewaySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVnetGatewaySlotSignalError() instead")
    void sitesGetSiteVnetGatewaySlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVnetGatewaySlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSitesSignalError() instead")
    void sitesGetSitesSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSitesSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSlotConfigNamesSignalError() instead")
    void sitesGetSlotConfigNamesSignalE(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSlotConfigNamesSignalError(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSlotsDifferencesFromProductionSignalError() instead")
    void sitesGetSlotsDifferencesFromProductionSignalE(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSlotsDifferencesFromProductionSignalError(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSlotsDifferencesSlotSignalError() instead")
    void sitesGetSlotsDifferencesSlotSignalE(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSlotsDifferencesSlotSignalError(OAISlotDifferenceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIsSiteCloneableSignalError() instead")
    void sitesIsSiteCloneableSignalE(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIsSiteCloneableSignalError(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIsSiteCloneableSlotSignalError() instead")
    void sitesIsSiteCloneableSlotSignalE(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIsSiteCloneableSlotSignalError(OAISiteCloneability summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAppSettingsSignalError() instead")
    void sitesListSiteAppSettingsSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAppSettingsSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAppSettingsSlotSignalError() instead")
    void sitesListSiteAppSettingsSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAppSettingsSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAuthSettingsSignalError() instead")
    void sitesListSiteAuthSettingsSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAuthSettingsSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAuthSettingsSlotSignalError() instead")
    void sitesListSiteAuthSettingsSlotSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAuthSettingsSlotSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteBackupsSignalError() instead")
    void sitesListSiteBackupsSignalE(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteBackupsSignalError(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteBackupsSlotSignalError() instead")
    void sitesListSiteBackupsSlotSignalE(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteBackupsSlotSignalError(OAIBackupItemCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteConnectionStringsSignalError() instead")
    void sitesListSiteConnectionStringsSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteConnectionStringsSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteConnectionStringsSlotSignalError() instead")
    void sitesListSiteConnectionStringsSlotSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteConnectionStringsSlotSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteMetadataSignalError() instead")
    void sitesListSiteMetadataSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteMetadataSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteMetadataSlotSignalError() instead")
    void sitesListSiteMetadataSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteMetadataSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePremierAddOnsSignalError() instead")
    void sitesListSitePremierAddOnsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePremierAddOnsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePremierAddOnsSlotSignalError() instead")
    void sitesListSitePremierAddOnsSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePremierAddOnsSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingCredentialsSignalError() instead")
    void sitesListSitePublishingCredentialsSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingCredentialsSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingCredentialsSlotSignalError() instead")
    void sitesListSitePublishingCredentialsSlotSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingCredentialsSlotSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingProfileXmlSignalError() instead")
    void sitesListSitePublishingProfileXmlSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingProfileXmlSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingProfileXmlSlotSignalError() instead")
    void sitesListSitePublishingProfileXmlSlotSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingProfileXmlSlotSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteRelayServiceConnectionsSignalError() instead")
    void sitesListSiteRelayServiceConnectionsSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteRelayServiceConnectionsSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteRelayServiceConnectionsSlotSignalError() instead")
    void sitesListSiteRelayServiceConnectionsSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteRelayServiceConnectionsSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRecoverSiteSignalError() instead")
    void sitesRecoverSiteSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRecoverSiteSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRecoverSiteSlotSignalError() instead")
    void sitesRecoverSiteSlotSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRecoverSiteSlotSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesResetProductionSlotConfigSignalError() instead")
    void sitesResetProductionSlotConfigSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesResetProductionSlotConfigSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesResetSlotConfigSlotSignalError() instead")
    void sitesResetSlotConfigSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesResetSlotConfigSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestartSiteSignalError() instead")
    void sitesRestartSiteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestartSiteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestartSiteSlotSignalError() instead")
    void sitesRestartSiteSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestartSiteSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestoreSiteSignalError() instead")
    void sitesRestoreSiteSignalE(OAIRestoreResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestoreSiteSignalError(OAIRestoreResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestoreSiteSlotSignalError() instead")
    void sitesRestoreSiteSlotSignalE(OAIRestoreResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestoreSiteSlotSignalError(OAIRestoreResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStartSiteSignalError() instead")
    void sitesStartSiteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStartSiteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStartSiteSlotSignalError() instead")
    void sitesStartSiteSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStartSiteSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStopSiteSignalError() instead")
    void sitesStopSiteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStopSiteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStopSiteSlotSignalError() instead")
    void sitesStopSiteSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStopSiteSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSwapSlotWithProductionSignalError() instead")
    void sitesSwapSlotWithProductionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSwapSlotWithProductionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSwapSlotsSlotSignalError() instead")
    void sitesSwapSlotsSlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSwapSlotsSlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSyncSiteRepositorySignalError() instead")
    void sitesSyncSiteRepositorySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSyncSiteRepositorySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSyncSiteRepositorySlotSignalError() instead")
    void sitesSyncSiteRepositorySlotSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSyncSiteRepositorySlotSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAppSettingsSignalError() instead")
    void sitesUpdateSiteAppSettingsSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAppSettingsSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAppSettingsSlotSignalError() instead")
    void sitesUpdateSiteAppSettingsSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAppSettingsSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAuthSettingsSignalError() instead")
    void sitesUpdateSiteAuthSettingsSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAuthSettingsSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAuthSettingsSlotSignalError() instead")
    void sitesUpdateSiteAuthSettingsSlotSignalE(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAuthSettingsSlotSignalError(OAISiteAuthSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteBackupConfigurationSignalError() instead")
    void sitesUpdateSiteBackupConfigurationSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteBackupConfigurationSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteBackupConfigurationSlotSignalError() instead")
    void sitesUpdateSiteBackupConfigurationSlotSignalE(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteBackupConfigurationSlotSignalError(OAIBackupRequest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConfigSignalError() instead")
    void sitesUpdateSiteConfigSignalE(OAISiteConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConfigSignalError(OAISiteConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConfigSlotSignalError() instead")
    void sitesUpdateSiteConfigSlotSignalE(OAISiteConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConfigSlotSignalError(OAISiteConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConnectionStringsSignalError() instead")
    void sitesUpdateSiteConnectionStringsSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConnectionStringsSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConnectionStringsSlotSignalError() instead")
    void sitesUpdateSiteConnectionStringsSlotSignalE(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConnectionStringsSlotSignalError(OAIConnectionStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteLogsConfigSignalError() instead")
    void sitesUpdateSiteLogsConfigSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteLogsConfigSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteLogsConfigSlotSignalError() instead")
    void sitesUpdateSiteLogsConfigSlotSignalE(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteLogsConfigSlotSignalError(OAISiteLogsConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteMetadataSignalError() instead")
    void sitesUpdateSiteMetadataSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteMetadataSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteMetadataSlotSignalError() instead")
    void sitesUpdateSiteMetadataSlotSignalE(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteMetadataSlotSignalError(OAIStringDictionary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteRelayServiceConnectionSignalError() instead")
    void sitesUpdateSiteRelayServiceConnectionSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteRelayServiceConnectionSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteRelayServiceConnectionSlotSignalError() instead")
    void sitesUpdateSiteRelayServiceConnectionSlotSignalE(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteRelayServiceConnectionSlotSignalError(OAIRelayServiceConnectionEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteSourceControlSignalError() instead")
    void sitesUpdateSiteSourceControlSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteSourceControlSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteSourceControlSlotSignalError() instead")
    void sitesUpdateSiteSourceControlSlotSignalE(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteSourceControlSlotSignalError(OAISiteSourceControl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionSignalError() instead")
    void sitesUpdateSiteVNETConnectionSignalE(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionSignalError(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionGatewaySignalError() instead")
    void sitesUpdateSiteVNETConnectionGatewaySignalE(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionGatewaySignalError(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionGatewaySlotSignalError() instead")
    void sitesUpdateSiteVNETConnectionGatewaySlotSignalE(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionGatewaySlotSignalError(OAIVnetGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionSlotSignalError() instead")
    void sitesUpdateSiteVNETConnectionSlotSignalE(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionSlotSignalError(OAIVnetInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSlotConfigNamesSignalError() instead")
    void sitesUpdateSlotConfigNamesSignalE(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSlotConfigNamesSignalError(OAISlotConfigNamesResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sitesAddSitePremierAddOnSignalErrorFull() instead")
    void sitesAddSitePremierAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesAddSitePremierAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesAddSitePremierAddOnSlotSignalErrorFull() instead")
    void sitesAddSitePremierAddOnSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesAddSitePremierAddOnSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesApplySlotConfigSlotSignalErrorFull() instead")
    void sitesApplySlotConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesApplySlotConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesApplySlotConfigToProductionSignalErrorFull() instead")
    void sitesApplySlotConfigToProductionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesApplySlotConfigToProductionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesBackupSiteSignalErrorFull() instead")
    void sitesBackupSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesBackupSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesBackupSiteSlotSignalErrorFull() instead")
    void sitesBackupSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesBackupSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateDeploymentSignalErrorFull() instead")
    void sitesCreateDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateDeploymentSlotSignalErrorFull() instead")
    void sitesCreateDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateInstanceDeploymentSignalErrorFull() instead")
    void sitesCreateInstanceDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateInstanceDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateInstanceDeploymentSlotSignalErrorFull() instead")
    void sitesCreateInstanceDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateInstanceDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteConfigSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteConfigSlotSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteHostNameBindingSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteHostNameBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteHostNameBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteHostNameBindingSlotSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteHostNameBindingSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteHostNameBindingSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteRelayServiceConnectionSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSlotSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSourceControlSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteSourceControlSlotSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteVNETConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionGatewaySignalErrorFull() instead")
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesCreateOrUpdateSiteVNETConnectionSlotSignalErrorFull() instead")
    void sitesCreateOrUpdateSiteVNETConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesCreateOrUpdateSiteVNETConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteBackupSignalErrorFull() instead")
    void sitesDeleteBackupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteBackupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteBackupSlotSignalErrorFull() instead")
    void sitesDeleteBackupSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteBackupSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteDeploymentSignalErrorFull() instead")
    void sitesDeleteDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteDeploymentSlotSignalErrorFull() instead")
    void sitesDeleteDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteInstanceDeploymentSignalErrorFull() instead")
    void sitesDeleteInstanceDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteInstanceDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteInstanceDeploymentSlotSignalErrorFull() instead")
    void sitesDeleteInstanceDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteInstanceDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSignalErrorFull() instead")
    void sitesDeleteSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteHostNameBindingSignalErrorFull() instead")
    void sitesDeleteSiteHostNameBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteHostNameBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteHostNameBindingSlotSignalErrorFull() instead")
    void sitesDeleteSiteHostNameBindingSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteHostNameBindingSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSitePremierAddOnSignalErrorFull() instead")
    void sitesDeleteSitePremierAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSitePremierAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSitePremierAddOnSlotSignalErrorFull() instead")
    void sitesDeleteSitePremierAddOnSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSitePremierAddOnSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteRelayServiceConnectionSignalErrorFull() instead")
    void sitesDeleteSiteRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteRelayServiceConnectionSlotSignalErrorFull() instead")
    void sitesDeleteSiteRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSlotSignalErrorFull() instead")
    void sitesDeleteSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSourceControlSignalErrorFull() instead")
    void sitesDeleteSiteSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteSourceControlSlotSignalErrorFull() instead")
    void sitesDeleteSiteSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteVNETConnectionSignalErrorFull() instead")
    void sitesDeleteSiteVNETConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteVNETConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDeleteSiteVNETConnectionSlotSignalErrorFull() instead")
    void sitesDeleteSiteVNETConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDeleteSiteVNETConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDiscoverSiteRestoreSignalErrorFull() instead")
    void sitesDiscoverSiteRestoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDiscoverSiteRestoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesDiscoverSiteRestoreSlotSignalErrorFull() instead")
    void sitesDiscoverSiteRestoreSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesDiscoverSiteRestoreSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGenerateNewSitePublishingPasswordSignalErrorFull() instead")
    void sitesGenerateNewSitePublishingPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGenerateNewSitePublishingPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGenerateNewSitePublishingPasswordSlotSignalErrorFull() instead")
    void sitesGenerateNewSitePublishingPasswordSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGenerateNewSitePublishingPasswordSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeletedSitesSignalErrorFull() instead")
    void sitesGetDeletedSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeletedSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentSignalErrorFull() instead")
    void sitesGetDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentSlotSignalErrorFull() instead")
    void sitesGetDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentsSignalErrorFull() instead")
    void sitesGetDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetDeploymentsSlotSignalErrorFull() instead")
    void sitesGetDeploymentsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetDeploymentsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentSignalErrorFull() instead")
    void sitesGetInstanceDeploymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentSlotSignalErrorFull() instead")
    void sitesGetInstanceDeploymentSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentsSignalErrorFull() instead")
    void sitesGetInstanceDeploymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetInstanceDeploymentsSlotSignalErrorFull() instead")
    void sitesGetInstanceDeploymentsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetInstanceDeploymentsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSignalErrorFull() instead")
    void sitesGetSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupConfigurationSignalErrorFull() instead")
    void sitesGetSiteBackupConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupConfigurationSlotSignalErrorFull() instead")
    void sitesGetSiteBackupConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSignalErrorFull() instead")
    void sitesGetSiteBackupStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSecretsSignalErrorFull() instead")
    void sitesGetSiteBackupStatusSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSecretsSlotSignalErrorFull() instead")
    void sitesGetSiteBackupStatusSecretsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSecretsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteBackupStatusSlotSignalErrorFull() instead")
    void sitesGetSiteBackupStatusSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteBackupStatusSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteConfigSignalErrorFull() instead")
    void sitesGetSiteConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteConfigSlotSignalErrorFull() instead")
    void sitesGetSiteConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingSignalErrorFull() instead")
    void sitesGetSiteHostNameBindingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingSlotSignalErrorFull() instead")
    void sitesGetSiteHostNameBindingSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingsSignalErrorFull() instead")
    void sitesGetSiteHostNameBindingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteHostNameBindingsSlotSignalErrorFull() instead")
    void sitesGetSiteHostNameBindingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteHostNameBindingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteInstanceIdentifiersSignalErrorFull() instead")
    void sitesGetSiteInstanceIdentifiersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteInstanceIdentifiersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteInstanceIdentifiersSlotSignalErrorFull() instead")
    void sitesGetSiteInstanceIdentifiersSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteInstanceIdentifiersSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteLogsConfigSignalErrorFull() instead")
    void sitesGetSiteLogsConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteLogsConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteLogsConfigSlotSignalErrorFull() instead")
    void sitesGetSiteLogsConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteLogsConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricDefinitionsSignalErrorFull() instead")
    void sitesGetSiteMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricDefinitionsSlotSignalErrorFull() instead")
    void sitesGetSiteMetricDefinitionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricDefinitionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricsSignalErrorFull() instead")
    void sitesGetSiteMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteMetricsSlotSignalErrorFull() instead")
    void sitesGetSiteMetricsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteMetricsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteNetworkFeaturesSignalErrorFull() instead")
    void sitesGetSiteNetworkFeaturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteNetworkFeaturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteNetworkFeaturesSlotSignalErrorFull() instead")
    void sitesGetSiteNetworkFeaturesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteNetworkFeaturesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteOperationSignalErrorFull() instead")
    void sitesGetSiteOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteOperationSlotSignalErrorFull() instead")
    void sitesGetSiteOperationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteOperationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSitePremierAddOnSignalErrorFull() instead")
    void sitesGetSitePremierAddOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSitePremierAddOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSitePremierAddOnSlotSignalErrorFull() instead")
    void sitesGetSitePremierAddOnSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSitePremierAddOnSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteRelayServiceConnectionSignalErrorFull() instead")
    void sitesGetSiteRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteRelayServiceConnectionSlotSignalErrorFull() instead")
    void sitesGetSiteRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSlotSignalErrorFull() instead")
    void sitesGetSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSlotsSignalErrorFull() instead")
    void sitesGetSiteSlotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSlotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSnapshotsSignalErrorFull() instead")
    void sitesGetSiteSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSnapshotsSlotSignalErrorFull() instead")
    void sitesGetSiteSnapshotsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSnapshotsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSourceControlSignalErrorFull() instead")
    void sitesGetSiteSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteSourceControlSlotSignalErrorFull() instead")
    void sitesGetSiteSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteUsagesSignalErrorFull() instead")
    void sitesGetSiteUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteUsagesSlotSignalErrorFull() instead")
    void sitesGetSiteUsagesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteUsagesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionSignalErrorFull() instead")
    void sitesGetSiteVNETConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionSlotSignalErrorFull() instead")
    void sitesGetSiteVNETConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionsSignalErrorFull() instead")
    void sitesGetSiteVNETConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVNETConnectionsSlotSignalErrorFull() instead")
    void sitesGetSiteVNETConnectionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVNETConnectionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVnetGatewaySignalErrorFull() instead")
    void sitesGetSiteVnetGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVnetGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSiteVnetGatewaySlotSignalErrorFull() instead")
    void sitesGetSiteVnetGatewaySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSiteVnetGatewaySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSitesSignalErrorFull() instead")
    void sitesGetSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSlotConfigNamesSignalErrorFull() instead")
    void sitesGetSlotConfigNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSlotConfigNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSlotsDifferencesFromProductionSignalErrorFull() instead")
    void sitesGetSlotsDifferencesFromProductionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSlotsDifferencesFromProductionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSlotsDifferencesSlotSignalErrorFull() instead")
    void sitesGetSlotsDifferencesSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSlotsDifferencesSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIsSiteCloneableSignalErrorFull() instead")
    void sitesIsSiteCloneableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIsSiteCloneableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesIsSiteCloneableSlotSignalErrorFull() instead")
    void sitesIsSiteCloneableSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesIsSiteCloneableSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAppSettingsSignalErrorFull() instead")
    void sitesListSiteAppSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAppSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAppSettingsSlotSignalErrorFull() instead")
    void sitesListSiteAppSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAppSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAuthSettingsSignalErrorFull() instead")
    void sitesListSiteAuthSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAuthSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteAuthSettingsSlotSignalErrorFull() instead")
    void sitesListSiteAuthSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteAuthSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteBackupsSignalErrorFull() instead")
    void sitesListSiteBackupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteBackupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteBackupsSlotSignalErrorFull() instead")
    void sitesListSiteBackupsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteBackupsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteConnectionStringsSignalErrorFull() instead")
    void sitesListSiteConnectionStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteConnectionStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteConnectionStringsSlotSignalErrorFull() instead")
    void sitesListSiteConnectionStringsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteConnectionStringsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteMetadataSignalErrorFull() instead")
    void sitesListSiteMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteMetadataSlotSignalErrorFull() instead")
    void sitesListSiteMetadataSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteMetadataSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePremierAddOnsSignalErrorFull() instead")
    void sitesListSitePremierAddOnsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePremierAddOnsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePremierAddOnsSlotSignalErrorFull() instead")
    void sitesListSitePremierAddOnsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePremierAddOnsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingCredentialsSignalErrorFull() instead")
    void sitesListSitePublishingCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingCredentialsSlotSignalErrorFull() instead")
    void sitesListSitePublishingCredentialsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingCredentialsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingProfileXmlSignalErrorFull() instead")
    void sitesListSitePublishingProfileXmlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingProfileXmlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSitePublishingProfileXmlSlotSignalErrorFull() instead")
    void sitesListSitePublishingProfileXmlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSitePublishingProfileXmlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteRelayServiceConnectionsSignalErrorFull() instead")
    void sitesListSiteRelayServiceConnectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteRelayServiceConnectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesListSiteRelayServiceConnectionsSlotSignalErrorFull() instead")
    void sitesListSiteRelayServiceConnectionsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesListSiteRelayServiceConnectionsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRecoverSiteSignalErrorFull() instead")
    void sitesRecoverSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRecoverSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRecoverSiteSlotSignalErrorFull() instead")
    void sitesRecoverSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRecoverSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesResetProductionSlotConfigSignalErrorFull() instead")
    void sitesResetProductionSlotConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesResetProductionSlotConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesResetSlotConfigSlotSignalErrorFull() instead")
    void sitesResetSlotConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesResetSlotConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestartSiteSignalErrorFull() instead")
    void sitesRestartSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestartSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestartSiteSlotSignalErrorFull() instead")
    void sitesRestartSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestartSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestoreSiteSignalErrorFull() instead")
    void sitesRestoreSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestoreSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesRestoreSiteSlotSignalErrorFull() instead")
    void sitesRestoreSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesRestoreSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStartSiteSignalErrorFull() instead")
    void sitesStartSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStartSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStartSiteSlotSignalErrorFull() instead")
    void sitesStartSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStartSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStopSiteSignalErrorFull() instead")
    void sitesStopSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStopSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesStopSiteSlotSignalErrorFull() instead")
    void sitesStopSiteSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesStopSiteSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSwapSlotWithProductionSignalErrorFull() instead")
    void sitesSwapSlotWithProductionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSwapSlotWithProductionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSwapSlotsSlotSignalErrorFull() instead")
    void sitesSwapSlotsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSwapSlotsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSyncSiteRepositorySignalErrorFull() instead")
    void sitesSyncSiteRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSyncSiteRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesSyncSiteRepositorySlotSignalErrorFull() instead")
    void sitesSyncSiteRepositorySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesSyncSiteRepositorySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAppSettingsSignalErrorFull() instead")
    void sitesUpdateSiteAppSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAppSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAppSettingsSlotSignalErrorFull() instead")
    void sitesUpdateSiteAppSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAppSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAuthSettingsSignalErrorFull() instead")
    void sitesUpdateSiteAuthSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAuthSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteAuthSettingsSlotSignalErrorFull() instead")
    void sitesUpdateSiteAuthSettingsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteAuthSettingsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteBackupConfigurationSignalErrorFull() instead")
    void sitesUpdateSiteBackupConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteBackupConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteBackupConfigurationSlotSignalErrorFull() instead")
    void sitesUpdateSiteBackupConfigurationSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteBackupConfigurationSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConfigSignalErrorFull() instead")
    void sitesUpdateSiteConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConfigSlotSignalErrorFull() instead")
    void sitesUpdateSiteConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConnectionStringsSignalErrorFull() instead")
    void sitesUpdateSiteConnectionStringsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConnectionStringsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteConnectionStringsSlotSignalErrorFull() instead")
    void sitesUpdateSiteConnectionStringsSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteConnectionStringsSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteLogsConfigSignalErrorFull() instead")
    void sitesUpdateSiteLogsConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteLogsConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteLogsConfigSlotSignalErrorFull() instead")
    void sitesUpdateSiteLogsConfigSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteLogsConfigSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteMetadataSignalErrorFull() instead")
    void sitesUpdateSiteMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteMetadataSlotSignalErrorFull() instead")
    void sitesUpdateSiteMetadataSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteMetadataSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteRelayServiceConnectionSignalErrorFull() instead")
    void sitesUpdateSiteRelayServiceConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteRelayServiceConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteRelayServiceConnectionSlotSignalErrorFull() instead")
    void sitesUpdateSiteRelayServiceConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteRelayServiceConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteSourceControlSignalErrorFull() instead")
    void sitesUpdateSiteSourceControlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteSourceControlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteSourceControlSlotSignalErrorFull() instead")
    void sitesUpdateSiteSourceControlSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteSourceControlSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionSignalErrorFull() instead")
    void sitesUpdateSiteVNETConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionGatewaySignalErrorFull() instead")
    void sitesUpdateSiteVNETConnectionGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionGatewaySlotSignalErrorFull() instead")
    void sitesUpdateSiteVNETConnectionGatewaySlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionGatewaySlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSiteVNETConnectionSlotSignalErrorFull() instead")
    void sitesUpdateSiteVNETConnectionSlotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSiteVNETConnectionSlotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesUpdateSlotConfigNamesSignalErrorFull() instead")
    void sitesUpdateSlotConfigNamesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesUpdateSlotConfigNamesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
