/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecommendation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecommendation::OAIRecommendation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecommendation::OAIRecommendation() {
    this->initializeModel();
}

OAIRecommendation::~OAIRecommendation() {}

void OAIRecommendation::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_next_notification_time_isSet = false;
    m_next_notification_time_isValid = false;

    m_notification_expiration_time_isSet = false;
    m_notification_expiration_time_isValid = false;

    m_notified_time_isSet = false;
    m_notified_time_isValid = false;

    m_recommendation_id_isSet = false;
    m_recommendation_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_scope_isSet = false;
    m_resource_scope_isValid = false;

    m_rule_name_isSet = false;
    m_rule_name_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIRecommendation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecommendation::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("actionName")]);
    m_action_name_isSet = !json[QString("actionName")].isNull() && m_action_name_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_next_notification_time_isValid = ::OpenAPI::fromJsonValue(m_next_notification_time, json[QString("nextNotificationTime")]);
    m_next_notification_time_isSet = !json[QString("nextNotificationTime")].isNull() && m_next_notification_time_isValid;

    m_notification_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_notification_expiration_time, json[QString("notificationExpirationTime")]);
    m_notification_expiration_time_isSet = !json[QString("notificationExpirationTime")].isNull() && m_notification_expiration_time_isValid;

    m_notified_time_isValid = ::OpenAPI::fromJsonValue(m_notified_time, json[QString("notifiedTime")]);
    m_notified_time_isSet = !json[QString("notifiedTime")].isNull() && m_notified_time_isValid;

    m_recommendation_id_isValid = ::OpenAPI::fromJsonValue(m_recommendation_id, json[QString("recommendationId")]);
    m_recommendation_id_isSet = !json[QString("recommendationId")].isNull() && m_recommendation_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_scope_isValid = ::OpenAPI::fromJsonValue(m_resource_scope, json[QString("resourceScope")]);
    m_resource_scope_isSet = !json[QString("resourceScope")].isNull() && m_resource_scope_isValid;

    m_rule_name_isValid = ::OpenAPI::fromJsonValue(m_rule_name, json[QString("ruleName")]);
    m_rule_name_isSet = !json[QString("ruleName")].isNull() && m_rule_name_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIRecommendation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecommendation::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("actionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_channels_isSet) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_next_notification_time_isSet) {
        obj.insert(QString("nextNotificationTime"), ::OpenAPI::toJsonValue(m_next_notification_time));
    }
    if (m_notification_expiration_time_isSet) {
        obj.insert(QString("notificationExpirationTime"), ::OpenAPI::toJsonValue(m_notification_expiration_time));
    }
    if (m_notified_time_isSet) {
        obj.insert(QString("notifiedTime"), ::OpenAPI::toJsonValue(m_notified_time));
    }
    if (m_recommendation_id_isSet) {
        obj.insert(QString("recommendationId"), ::OpenAPI::toJsonValue(m_recommendation_id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_scope_isSet) {
        obj.insert(QString("resourceScope"), ::OpenAPI::toJsonValue(m_resource_scope));
    }
    if (m_rule_name_isSet) {
        obj.insert(QString("ruleName"), ::OpenAPI::toJsonValue(m_rule_name));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIRecommendation::getActionName() const {
    return m_action_name;
}
void OAIRecommendation::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIRecommendation::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIRecommendation::is_action_name_Valid() const{
    return m_action_name_isValid;
}

QString OAIRecommendation::getChannels() const {
    return m_channels;
}
void OAIRecommendation::setChannels(const QString &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIRecommendation::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIRecommendation::is_channels_Valid() const{
    return m_channels_isValid;
}

QDateTime OAIRecommendation::getCreationTime() const {
    return m_creation_time;
}
void OAIRecommendation::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIRecommendation::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIRecommendation::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIRecommendation::getDisplayName() const {
    return m_display_name;
}
void OAIRecommendation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRecommendation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRecommendation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIRecommendation::getEnabled() const {
    return m_enabled;
}
void OAIRecommendation::setEnabled(const qint32 &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIRecommendation::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIRecommendation::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAIRecommendation::getEndTime() const {
    return m_end_time;
}
void OAIRecommendation::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRecommendation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRecommendation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIRecommendation::getLevel() const {
    return m_level;
}
void OAIRecommendation::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIRecommendation::is_level_Set() const{
    return m_level_isSet;
}

bool OAIRecommendation::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIRecommendation::getMessage() const {
    return m_message;
}
void OAIRecommendation::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIRecommendation::is_message_Set() const{
    return m_message_isSet;
}

bool OAIRecommendation::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIRecommendation::getNextNotificationTime() const {
    return m_next_notification_time;
}
void OAIRecommendation::setNextNotificationTime(const QDateTime &next_notification_time) {
    m_next_notification_time = next_notification_time;
    m_next_notification_time_isSet = true;
}

bool OAIRecommendation::is_next_notification_time_Set() const{
    return m_next_notification_time_isSet;
}

bool OAIRecommendation::is_next_notification_time_Valid() const{
    return m_next_notification_time_isValid;
}

QDateTime OAIRecommendation::getNotificationExpirationTime() const {
    return m_notification_expiration_time;
}
void OAIRecommendation::setNotificationExpirationTime(const QDateTime &notification_expiration_time) {
    m_notification_expiration_time = notification_expiration_time;
    m_notification_expiration_time_isSet = true;
}

bool OAIRecommendation::is_notification_expiration_time_Set() const{
    return m_notification_expiration_time_isSet;
}

bool OAIRecommendation::is_notification_expiration_time_Valid() const{
    return m_notification_expiration_time_isValid;
}

QDateTime OAIRecommendation::getNotifiedTime() const {
    return m_notified_time;
}
void OAIRecommendation::setNotifiedTime(const QDateTime &notified_time) {
    m_notified_time = notified_time;
    m_notified_time_isSet = true;
}

bool OAIRecommendation::is_notified_time_Set() const{
    return m_notified_time_isSet;
}

bool OAIRecommendation::is_notified_time_Valid() const{
    return m_notified_time_isValid;
}

QString OAIRecommendation::getRecommendationId() const {
    return m_recommendation_id;
}
void OAIRecommendation::setRecommendationId(const QString &recommendation_id) {
    m_recommendation_id = recommendation_id;
    m_recommendation_id_isSet = true;
}

bool OAIRecommendation::is_recommendation_id_Set() const{
    return m_recommendation_id_isSet;
}

bool OAIRecommendation::is_recommendation_id_Valid() const{
    return m_recommendation_id_isValid;
}

QString OAIRecommendation::getResourceId() const {
    return m_resource_id;
}
void OAIRecommendation::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIRecommendation::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIRecommendation::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIRecommendation::getResourceScope() const {
    return m_resource_scope;
}
void OAIRecommendation::setResourceScope(const QString &resource_scope) {
    m_resource_scope = resource_scope;
    m_resource_scope_isSet = true;
}

bool OAIRecommendation::is_resource_scope_Set() const{
    return m_resource_scope_isSet;
}

bool OAIRecommendation::is_resource_scope_Valid() const{
    return m_resource_scope_isValid;
}

QString OAIRecommendation::getRuleName() const {
    return m_rule_name;
}
void OAIRecommendation::setRuleName(const QString &rule_name) {
    m_rule_name = rule_name;
    m_rule_name_isSet = true;
}

bool OAIRecommendation::is_rule_name_Set() const{
    return m_rule_name_isSet;
}

bool OAIRecommendation::is_rule_name_Valid() const{
    return m_rule_name_isValid;
}

double OAIRecommendation::getScore() const {
    return m_score;
}
void OAIRecommendation::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIRecommendation::is_score_Set() const{
    return m_score_isSet;
}

bool OAIRecommendation::is_score_Valid() const{
    return m_score_isValid;
}

QDateTime OAIRecommendation::getStartTime() const {
    return m_start_time;
}
void OAIRecommendation::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRecommendation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRecommendation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<QString> OAIRecommendation::getTags() const {
    return m_tags;
}
void OAIRecommendation::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRecommendation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRecommendation::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIRecommendation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_notification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommendation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecommendation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channels_isValid && m_level_isValid && true;
}

} // namespace OpenAPI
