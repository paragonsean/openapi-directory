/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHostingEnvironmentsApi_H
#define OAI_OAIHostingEnvironmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddressResponse.h"
#include "OAICsmUsageQuotaCollection.h"
#include "OAIHostingEnvironment.h"
#include "OAIHostingEnvironmentCollection.h"
#include "OAIHostingEnvironmentDiagnostics.h"
#include "OAIMetricDefinition.h"
#include "OAIMetricDefinitionCollection.h"
#include "OAIObject.h"
#include "OAIResourceMetricCollection.h"
#include "OAIServerFarmCollection.h"
#include "OAISiteCollection.h"
#include "OAISkuInfoCollection.h"
#include "OAIStampCapacityCollection.h"
#include "OAIUsageCollection.h"
#include "OAIWorkerPool.h"
#include "OAIWorkerPoolCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHostingEnvironmentsApi : public QObject {
    Q_OBJECT

public:
    OAIHostingEnvironmentsApi(const int timeOut = 0);
    ~OAIHostingEnvironmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  hosting_environment_envelope OAIHostingEnvironment [required]
    */
    virtual void hostingEnvironmentsCreateOrUpdateHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIHostingEnvironment &hosting_environment_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  multi_role_pool_envelope OAIWorkerPool [required]
    */
    virtual void hostingEnvironmentsCreateOrUpdateMultiRolePool(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAIWorkerPool &multi_role_pool_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  worker_pool_envelope OAIWorkerPool [required]
    */
    virtual void hostingEnvironmentsCreateOrUpdateWorkerPool(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version, const OAIWorkerPool &worker_pool_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  force_delete bool [optional]
    */
    virtual void hostingEnvironmentsDeleteHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &force_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentCapacities(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentDiagnostics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  diagnostics_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(const QString &resource_group_name, const QString &name, const QString &diagnostics_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_time QString [optional]
    * @param[in]  end_time QString [optional]
    * @param[in]  time_grain QString [optional]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &start_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_grain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentOperation(const QString &resource_group_name, const QString &name, const QString &operation_id, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentOperations(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentServerFarms(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  properties_to_include QString [optional]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentSites(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &properties_to_include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentUsages(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentVips(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetHostingEnvironments(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetMultiRolePool(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &instance, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    */
    virtual void hostingEnvironmentsGetMultiRolePoolInstanceMetrics(const QString &resource_group_name, const QString &name, const QString &instance, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetMultiRolePoolSkus(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetMultiRolePools(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetWorkerPool(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &instance, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  instance QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  details bool [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void hostingEnvironmentsGetWorkerPoolInstanceMetrics(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &instance, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &details = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  worker_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetWorkerPoolSkus(const QString &resource_group_name, const QString &name, const QString &worker_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsGetWorkerPools(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsRebootHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsResumeHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void hostingEnvironmentsSuspendHostingEnvironment(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hostingEnvironmentsCreateOrUpdateHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsCreateOrUpdateMultiRolePoolCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsCreateOrUpdateWorkerPoolCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsDeleteHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentCapacitiesCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentMetricsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentOperationCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentOperationsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentServerFarmsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentSitesCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentUsagesCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentVipsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetHostingEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetMultiRolePoolCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetMultiRolePoolSkusCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetMultiRolePoolsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetWorkerPoolCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetWorkerPoolSkusCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsGetWorkerPoolsCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsRebootHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsResumeHostingEnvironmentCallback(OAIHttpRequestWorker *worker);
    void hostingEnvironmentsSuspendHostingEnvironmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignal(OAIHostingEnvironment summary);
    void hostingEnvironmentsCreateOrUpdateMultiRolePoolSignal(OAIWorkerPool summary);
    void hostingEnvironmentsCreateOrUpdateWorkerPoolSignal(OAIWorkerPool summary);
    void hostingEnvironmentsDeleteHostingEnvironmentSignal(OAIObject summary);
    void hostingEnvironmentsGetHostingEnvironmentSignal(OAIHostingEnvironment summary);
    void hostingEnvironmentsGetHostingEnvironmentCapacitiesSignal(OAIStampCapacityCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignal(QList<OAIHostingEnvironmentDiagnostics> summary);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignal(OAIHostingEnvironmentDiagnostics summary);
    void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignal(OAIMetricDefinition summary);
    void hostingEnvironmentsGetHostingEnvironmentMetricsSignal(OAIResourceMetricCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignal(OAIMetricDefinitionCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignal(OAIResourceMetricCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignal(OAIUsageCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentOperationSignal(OAIObject summary);
    void hostingEnvironmentsGetHostingEnvironmentOperationsSignal(OAIObject summary);
    void hostingEnvironmentsGetHostingEnvironmentServerFarmsSignal(OAIServerFarmCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentSitesSignal(OAISiteCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentUsagesSignal(OAICsmUsageQuotaCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentVipsSignal(OAIAddressResponse summary);
    void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignal(OAIServerFarmCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignal(OAIMetricDefinitionCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignal(OAIResourceMetricCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignal(OAIUsageCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentsSignal(OAIHostingEnvironmentCollection summary);
    void hostingEnvironmentsGetMultiRolePoolSignal(OAIWorkerPool summary);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignal(OAIObject summary);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignal(OAIObject summary);
    void hostingEnvironmentsGetMultiRolePoolSkusSignal(OAISkuInfoCollection summary);
    void hostingEnvironmentsGetMultiRolePoolsSignal(OAIWorkerPoolCollection summary);
    void hostingEnvironmentsGetWorkerPoolSignal(OAIWorkerPool summary);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignal(OAIObject summary);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricsSignal(OAIObject summary);
    void hostingEnvironmentsGetWorkerPoolSkusSignal(OAISkuInfoCollection summary);
    void hostingEnvironmentsGetWorkerPoolsSignal(OAIWorkerPoolCollection summary);
    void hostingEnvironmentsRebootHostingEnvironmentSignal(OAIObject summary);
    void hostingEnvironmentsResumeHostingEnvironmentSignal(OAISiteCollection summary);
    void hostingEnvironmentsSuspendHostingEnvironmentSignal(OAISiteCollection summary);


    void hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironment summary);
    void hostingEnvironmentsCreateOrUpdateMultiRolePoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPool summary);
    void hostingEnvironmentsCreateOrUpdateWorkerPoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPool summary);
    void hostingEnvironmentsDeleteHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsGetHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironment summary);
    void hostingEnvironmentsGetHostingEnvironmentCapacitiesSignalFull(OAIHttpRequestWorker *worker, OAIStampCapacityCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignalFull(OAIHttpRequestWorker *worker, QList<OAIHostingEnvironmentDiagnostics> summary);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironmentDiagnostics summary);
    void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinition summary);
    void hostingEnvironmentsGetHostingEnvironmentMetricsSignalFull(OAIHttpRequestWorker *worker, OAIResourceMetricCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignalFull(OAIHttpRequestWorker *worker, OAIResourceMetricCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsageCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentOperationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsGetHostingEnvironmentOperationsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsGetHostingEnvironmentServerFarmsSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentSitesSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentUsagesSignalFull(OAIHttpRequestWorker *worker, OAICsmUsageQuotaCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentVipsSignalFull(OAIHttpRequestWorker *worker, OAIAddressResponse summary);
    void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignalFull(OAIHttpRequestWorker *worker, OAIServerFarmCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIMetricDefinitionCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignalFull(OAIHttpRequestWorker *worker, OAIResourceMetricCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignalFull(OAIHttpRequestWorker *worker, OAIUsageCollection summary);
    void hostingEnvironmentsGetHostingEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIHostingEnvironmentCollection summary);
    void hostingEnvironmentsGetMultiRolePoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPool summary);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsGetMultiRolePoolSkusSignalFull(OAIHttpRequestWorker *worker, OAISkuInfoCollection summary);
    void hostingEnvironmentsGetMultiRolePoolsSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolCollection summary);
    void hostingEnvironmentsGetWorkerPoolSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPool summary);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsGetWorkerPoolSkusSignalFull(OAIHttpRequestWorker *worker, OAISkuInfoCollection summary);
    void hostingEnvironmentsGetWorkerPoolsSignalFull(OAIHttpRequestWorker *worker, OAIWorkerPoolCollection summary);
    void hostingEnvironmentsRebootHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void hostingEnvironmentsResumeHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);
    void hostingEnvironmentsSuspendHostingEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAISiteCollection summary);

    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignalError() instead")
    void hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignalE(OAIHostingEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignalError(OAIHostingEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsCreateOrUpdateMultiRolePoolSignalError() instead")
    void hostingEnvironmentsCreateOrUpdateMultiRolePoolSignalE(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsCreateOrUpdateMultiRolePoolSignalError(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsCreateOrUpdateWorkerPoolSignalError() instead")
    void hostingEnvironmentsCreateOrUpdateWorkerPoolSignalE(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsCreateOrUpdateWorkerPoolSignalError(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsDeleteHostingEnvironmentSignalError() instead")
    void hostingEnvironmentsDeleteHostingEnvironmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsDeleteHostingEnvironmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentSignalE(OAIHostingEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentSignalError(OAIHostingEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentCapacitiesSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentCapacitiesSignalE(OAIStampCapacityCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentCapacitiesSignalError(OAIStampCapacityCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignalE(QList<OAIHostingEnvironmentDiagnostics> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignalError(QList<OAIHostingEnvironmentDiagnostics> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignalE(OAIHostingEnvironmentDiagnostics summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignalError(OAIHostingEnvironmentDiagnostics summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignalE(OAIMetricDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignalError(OAIMetricDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMetricsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentMetricsSignalE(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMetricsSignalError(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignalE(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignalError(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignalE(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignalError(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignalE(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignalError(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentOperationSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentOperationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentOperationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentOperationsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentOperationsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentOperationsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentServerFarmsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentServerFarmsSignalE(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentServerFarmsSignalError(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentSitesSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentSitesSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentSitesSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentUsagesSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentUsagesSignalE(OAICsmUsageQuotaCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentUsagesSignalError(OAICsmUsageQuotaCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentVipsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentVipsSignalE(OAIAddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentVipsSignalError(OAIAddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignalE(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignalError(OAIServerFarmCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignalE(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignalError(OAIMetricDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignalE(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignalError(OAIResourceMetricCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignalE(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignalError(OAIUsageCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentsSignalError() instead")
    void hostingEnvironmentsGetHostingEnvironmentsSignalE(OAIHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentsSignalError(OAIHostingEnvironmentCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolSignalError() instead")
    void hostingEnvironmentsGetMultiRolePoolSignalE(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolSignalError(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignalError() instead")
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignalError() instead")
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolSkusSignalError() instead")
    void hostingEnvironmentsGetMultiRolePoolSkusSignalE(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolSkusSignalError(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolsSignalError() instead")
    void hostingEnvironmentsGetMultiRolePoolsSignalE(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolsSignalError(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolSignalError() instead")
    void hostingEnvironmentsGetWorkerPoolSignalE(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolSignalError(OAIWorkerPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignalError() instead")
    void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolInstanceMetricsSignalError() instead")
    void hostingEnvironmentsGetWorkerPoolInstanceMetricsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolSkusSignalError() instead")
    void hostingEnvironmentsGetWorkerPoolSkusSignalE(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolSkusSignalError(OAISkuInfoCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolsSignalError() instead")
    void hostingEnvironmentsGetWorkerPoolsSignalE(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolsSignalError(OAIWorkerPoolCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsRebootHostingEnvironmentSignalError() instead")
    void hostingEnvironmentsRebootHostingEnvironmentSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsRebootHostingEnvironmentSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsResumeHostingEnvironmentSignalError() instead")
    void hostingEnvironmentsResumeHostingEnvironmentSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsResumeHostingEnvironmentSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsSuspendHostingEnvironmentSignalError() instead")
    void hostingEnvironmentsSuspendHostingEnvironmentSignalE(OAISiteCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsSuspendHostingEnvironmentSignalError(OAISiteCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignalErrorFull() instead")
    void hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsCreateOrUpdateHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsCreateOrUpdateMultiRolePoolSignalErrorFull() instead")
    void hostingEnvironmentsCreateOrUpdateMultiRolePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsCreateOrUpdateMultiRolePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsCreateOrUpdateWorkerPoolSignalErrorFull() instead")
    void hostingEnvironmentsCreateOrUpdateWorkerPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsCreateOrUpdateWorkerPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsDeleteHostingEnvironmentSignalErrorFull() instead")
    void hostingEnvironmentsDeleteHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsDeleteHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentCapacitiesSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentCapacitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentCapacitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMetricsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentOperationSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentOperationsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentOperationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentOperationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentServerFarmsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentServerFarmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentServerFarmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentSitesSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentUsagesSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentVipsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentVipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentVipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetHostingEnvironmentsSignalErrorFull() instead")
    void hostingEnvironmentsGetHostingEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetHostingEnvironmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolSignalErrorFull() instead")
    void hostingEnvironmentsGetMultiRolePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignalErrorFull() instead")
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignalErrorFull() instead")
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolInstanceMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolSkusSignalErrorFull() instead")
    void hostingEnvironmentsGetMultiRolePoolSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetMultiRolePoolsSignalErrorFull() instead")
    void hostingEnvironmentsGetMultiRolePoolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetMultiRolePoolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolSignalErrorFull() instead")
    void hostingEnvironmentsGetWorkerPoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignalErrorFull() instead")
    void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolInstanceMetricsSignalErrorFull() instead")
    void hostingEnvironmentsGetWorkerPoolInstanceMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolInstanceMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolSkusSignalErrorFull() instead")
    void hostingEnvironmentsGetWorkerPoolSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsGetWorkerPoolsSignalErrorFull() instead")
    void hostingEnvironmentsGetWorkerPoolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsGetWorkerPoolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsRebootHostingEnvironmentSignalErrorFull() instead")
    void hostingEnvironmentsRebootHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsRebootHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsResumeHostingEnvironmentSignalErrorFull() instead")
    void hostingEnvironmentsResumeHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsResumeHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hostingEnvironmentsSuspendHostingEnvironmentSignalErrorFull() instead")
    void hostingEnvironmentsSuspendHostingEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hostingEnvironmentsSuspendHostingEnvironmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
