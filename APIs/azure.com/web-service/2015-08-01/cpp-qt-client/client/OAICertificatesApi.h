/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificatesApi_H
#define OAI_OAICertificatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificate.h"
#include "OAICertificateCollection.h"
#include "OAICsr.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificatesApi : public QObject {
    Q_OBJECT

public:
    OAICertificatesApi(const int timeOut = 0);
    ~OAICertificatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_envelope OAICertificate [required]
    */
    virtual void certificatesCreateOrUpdateCertificate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICertificate &certificate_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  csr_envelope OAICsr [required]
    */
    virtual void certificatesCreateOrUpdateCsr(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsr &csr_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificatesDeleteCertificate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificatesDeleteCsr(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificatesGetCertificate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificatesGetCertificates(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificatesGetCsr(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void certificatesGetCsrs(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  certificate_envelope OAICertificate [required]
    */
    virtual void certificatesUpdateCertificate(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICertificate &certificate_envelope);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  csr_envelope OAICsr [required]
    */
    virtual void certificatesUpdateCsr(const QString &resource_group_name, const QString &name, const QString &subscription_id, const QString &api_version, const OAICsr &csr_envelope);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void certificatesCreateOrUpdateCertificateCallback(OAIHttpRequestWorker *worker);
    void certificatesCreateOrUpdateCsrCallback(OAIHttpRequestWorker *worker);
    void certificatesDeleteCertificateCallback(OAIHttpRequestWorker *worker);
    void certificatesDeleteCsrCallback(OAIHttpRequestWorker *worker);
    void certificatesGetCertificateCallback(OAIHttpRequestWorker *worker);
    void certificatesGetCertificatesCallback(OAIHttpRequestWorker *worker);
    void certificatesGetCsrCallback(OAIHttpRequestWorker *worker);
    void certificatesGetCsrsCallback(OAIHttpRequestWorker *worker);
    void certificatesUpdateCertificateCallback(OAIHttpRequestWorker *worker);
    void certificatesUpdateCsrCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void certificatesCreateOrUpdateCertificateSignal(OAICertificate summary);
    void certificatesCreateOrUpdateCsrSignal(OAICsr summary);
    void certificatesDeleteCertificateSignal(OAIObject summary);
    void certificatesDeleteCsrSignal(OAIObject summary);
    void certificatesGetCertificateSignal(OAICertificate summary);
    void certificatesGetCertificatesSignal(OAICertificateCollection summary);
    void certificatesGetCsrSignal(OAICsr summary);
    void certificatesGetCsrsSignal(QList<OAICsr> summary);
    void certificatesUpdateCertificateSignal(OAICertificate summary);
    void certificatesUpdateCsrSignal(OAICsr summary);


    void certificatesCreateOrUpdateCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void certificatesCreateOrUpdateCsrSignalFull(OAIHttpRequestWorker *worker, OAICsr summary);
    void certificatesDeleteCertificateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void certificatesDeleteCsrSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void certificatesGetCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void certificatesGetCertificatesSignalFull(OAIHttpRequestWorker *worker, OAICertificateCollection summary);
    void certificatesGetCsrSignalFull(OAIHttpRequestWorker *worker, OAICsr summary);
    void certificatesGetCsrsSignalFull(OAIHttpRequestWorker *worker, QList<OAICsr> summary);
    void certificatesUpdateCertificateSignalFull(OAIHttpRequestWorker *worker, OAICertificate summary);
    void certificatesUpdateCsrSignalFull(OAIHttpRequestWorker *worker, OAICsr summary);

    Q_DECL_DEPRECATED_X("Use certificatesCreateOrUpdateCertificateSignalError() instead")
    void certificatesCreateOrUpdateCertificateSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateOrUpdateCertificateSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesCreateOrUpdateCsrSignalError() instead")
    void certificatesCreateOrUpdateCsrSignalE(OAICsr summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateOrUpdateCsrSignalError(OAICsr summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteCertificateSignalError() instead")
    void certificatesDeleteCertificateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteCertificateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteCsrSignalError() instead")
    void certificatesDeleteCsrSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteCsrSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCertificateSignalError() instead")
    void certificatesGetCertificateSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCertificateSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCertificatesSignalError() instead")
    void certificatesGetCertificatesSignalE(OAICertificateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCertificatesSignalError(OAICertificateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCsrSignalError() instead")
    void certificatesGetCsrSignalE(OAICsr summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCsrSignalError(OAICsr summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCsrsSignalError() instead")
    void certificatesGetCsrsSignalE(QList<OAICsr> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCsrsSignalError(QList<OAICsr> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesUpdateCertificateSignalError() instead")
    void certificatesUpdateCertificateSignalE(OAICertificate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesUpdateCertificateSignalError(OAICertificate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesUpdateCsrSignalError() instead")
    void certificatesUpdateCsrSignalE(OAICsr summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesUpdateCsrSignalError(OAICsr summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use certificatesCreateOrUpdateCertificateSignalErrorFull() instead")
    void certificatesCreateOrUpdateCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateOrUpdateCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesCreateOrUpdateCsrSignalErrorFull() instead")
    void certificatesCreateOrUpdateCsrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateOrUpdateCsrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteCertificateSignalErrorFull() instead")
    void certificatesDeleteCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteCsrSignalErrorFull() instead")
    void certificatesDeleteCsrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteCsrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCertificateSignalErrorFull() instead")
    void certificatesGetCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCertificatesSignalErrorFull() instead")
    void certificatesGetCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCsrSignalErrorFull() instead")
    void certificatesGetCsrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCsrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetCsrsSignalErrorFull() instead")
    void certificatesGetCsrsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetCsrsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesUpdateCertificateSignalErrorFull() instead")
    void certificatesUpdateCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesUpdateCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesUpdateCsrSignalErrorFull() instead")
    void certificatesUpdateCsrSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesUpdateCsrSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
