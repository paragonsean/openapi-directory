/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRampUpRule.h
 *
 * Routing rules for ramp up testing. This rule allows to redirect static traffic % to a slot or to gradually change routing % based on performance
 */

#ifndef OAIRampUpRule_H
#define OAIRampUpRule_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRampUpRule : public OAIObject {
public:
    OAIRampUpRule();
    OAIRampUpRule(QString json);
    ~OAIRampUpRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getActionHostName() const;
    void setActionHostName(const QString &action_host_name);
    bool is_action_host_name_Set() const;
    bool is_action_host_name_Valid() const;

    QString getChangeDecisionCallbackUrl() const;
    void setChangeDecisionCallbackUrl(const QString &change_decision_callback_url);
    bool is_change_decision_callback_url_Set() const;
    bool is_change_decision_callback_url_Valid() const;

    qint32 getChangeIntervalInMinutes() const;
    void setChangeIntervalInMinutes(const qint32 &change_interval_in_minutes);
    bool is_change_interval_in_minutes_Set() const;
    bool is_change_interval_in_minutes_Valid() const;

    double getChangeStep() const;
    void setChangeStep(const double &change_step);
    bool is_change_step_Set() const;
    bool is_change_step_Valid() const;

    double getMaxReroutePercentage() const;
    void setMaxReroutePercentage(const double &max_reroute_percentage);
    bool is_max_reroute_percentage_Set() const;
    bool is_max_reroute_percentage_Valid() const;

    double getMinReroutePercentage() const;
    void setMinReroutePercentage(const double &min_reroute_percentage);
    bool is_min_reroute_percentage_Set() const;
    bool is_min_reroute_percentage_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getReroutePercentage() const;
    void setReroutePercentage(const double &reroute_percentage);
    bool is_reroute_percentage_Set() const;
    bool is_reroute_percentage_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_action_host_name;
    bool m_action_host_name_isSet;
    bool m_action_host_name_isValid;

    QString m_change_decision_callback_url;
    bool m_change_decision_callback_url_isSet;
    bool m_change_decision_callback_url_isValid;

    qint32 m_change_interval_in_minutes;
    bool m_change_interval_in_minutes_isSet;
    bool m_change_interval_in_minutes_isValid;

    double m_change_step;
    bool m_change_step_isSet;
    bool m_change_step_isValid;

    double m_max_reroute_percentage;
    bool m_max_reroute_percentage_isSet;
    bool m_max_reroute_percentage_isValid;

    double m_min_reroute_percentage;
    bool m_min_reroute_percentage_isSet;
    bool m_min_reroute_percentage_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_reroute_percentage;
    bool m_reroute_percentage_isSet;
    bool m_reroute_percentage_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRampUpRule)

#endif // OAIRampUpRule_H
