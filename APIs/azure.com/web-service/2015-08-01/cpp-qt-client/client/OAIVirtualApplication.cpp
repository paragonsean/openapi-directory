/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualApplication::OAIVirtualApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualApplication::OAIVirtualApplication() {
    this->initializeModel();
}

OAIVirtualApplication::~OAIVirtualApplication() {}

void OAIVirtualApplication::initializeModel() {

    m_physical_path_isSet = false;
    m_physical_path_isValid = false;

    m_preload_enabled_isSet = false;
    m_preload_enabled_isValid = false;

    m_virtual_directories_isSet = false;
    m_virtual_directories_isValid = false;

    m_virtual_path_isSet = false;
    m_virtual_path_isValid = false;
}

void OAIVirtualApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualApplication::fromJsonObject(QJsonObject json) {

    m_physical_path_isValid = ::OpenAPI::fromJsonValue(m_physical_path, json[QString("physicalPath")]);
    m_physical_path_isSet = !json[QString("physicalPath")].isNull() && m_physical_path_isValid;

    m_preload_enabled_isValid = ::OpenAPI::fromJsonValue(m_preload_enabled, json[QString("preloadEnabled")]);
    m_preload_enabled_isSet = !json[QString("preloadEnabled")].isNull() && m_preload_enabled_isValid;

    m_virtual_directories_isValid = ::OpenAPI::fromJsonValue(m_virtual_directories, json[QString("virtualDirectories")]);
    m_virtual_directories_isSet = !json[QString("virtualDirectories")].isNull() && m_virtual_directories_isValid;

    m_virtual_path_isValid = ::OpenAPI::fromJsonValue(m_virtual_path, json[QString("virtualPath")]);
    m_virtual_path_isSet = !json[QString("virtualPath")].isNull() && m_virtual_path_isValid;
}

QString OAIVirtualApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_physical_path_isSet) {
        obj.insert(QString("physicalPath"), ::OpenAPI::toJsonValue(m_physical_path));
    }
    if (m_preload_enabled_isSet) {
        obj.insert(QString("preloadEnabled"), ::OpenAPI::toJsonValue(m_preload_enabled));
    }
    if (m_virtual_directories.size() > 0) {
        obj.insert(QString("virtualDirectories"), ::OpenAPI::toJsonValue(m_virtual_directories));
    }
    if (m_virtual_path_isSet) {
        obj.insert(QString("virtualPath"), ::OpenAPI::toJsonValue(m_virtual_path));
    }
    return obj;
}

QString OAIVirtualApplication::getPhysicalPath() const {
    return m_physical_path;
}
void OAIVirtualApplication::setPhysicalPath(const QString &physical_path) {
    m_physical_path = physical_path;
    m_physical_path_isSet = true;
}

bool OAIVirtualApplication::is_physical_path_Set() const{
    return m_physical_path_isSet;
}

bool OAIVirtualApplication::is_physical_path_Valid() const{
    return m_physical_path_isValid;
}

bool OAIVirtualApplication::isPreloadEnabled() const {
    return m_preload_enabled;
}
void OAIVirtualApplication::setPreloadEnabled(const bool &preload_enabled) {
    m_preload_enabled = preload_enabled;
    m_preload_enabled_isSet = true;
}

bool OAIVirtualApplication::is_preload_enabled_Set() const{
    return m_preload_enabled_isSet;
}

bool OAIVirtualApplication::is_preload_enabled_Valid() const{
    return m_preload_enabled_isValid;
}

QList<OAIVirtualDirectory> OAIVirtualApplication::getVirtualDirectories() const {
    return m_virtual_directories;
}
void OAIVirtualApplication::setVirtualDirectories(const QList<OAIVirtualDirectory> &virtual_directories) {
    m_virtual_directories = virtual_directories;
    m_virtual_directories_isSet = true;
}

bool OAIVirtualApplication::is_virtual_directories_Set() const{
    return m_virtual_directories_isSet;
}

bool OAIVirtualApplication::is_virtual_directories_Valid() const{
    return m_virtual_directories_isValid;
}

QString OAIVirtualApplication::getVirtualPath() const {
    return m_virtual_path;
}
void OAIVirtualApplication::setVirtualPath(const QString &virtual_path) {
    m_virtual_path = virtual_path;
    m_virtual_path_isSet = true;
}

bool OAIVirtualApplication::is_virtual_path_Set() const{
    return m_virtual_path_isSet;
}

bool OAIVirtualApplication::is_virtual_path_Valid() const{
    return m_virtual_path_isValid;
}

bool OAIVirtualApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_physical_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preload_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_directories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
