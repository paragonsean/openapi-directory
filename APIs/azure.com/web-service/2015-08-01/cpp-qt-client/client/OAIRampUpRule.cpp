/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRampUpRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRampUpRule::OAIRampUpRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRampUpRule::OAIRampUpRule() {
    this->initializeModel();
}

OAIRampUpRule::~OAIRampUpRule() {}

void OAIRampUpRule::initializeModel() {

    m_action_host_name_isSet = false;
    m_action_host_name_isValid = false;

    m_change_decision_callback_url_isSet = false;
    m_change_decision_callback_url_isValid = false;

    m_change_interval_in_minutes_isSet = false;
    m_change_interval_in_minutes_isValid = false;

    m_change_step_isSet = false;
    m_change_step_isValid = false;

    m_max_reroute_percentage_isSet = false;
    m_max_reroute_percentage_isValid = false;

    m_min_reroute_percentage_isSet = false;
    m_min_reroute_percentage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reroute_percentage_isSet = false;
    m_reroute_percentage_isValid = false;
}

void OAIRampUpRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRampUpRule::fromJsonObject(QJsonObject json) {

    m_action_host_name_isValid = ::OpenAPI::fromJsonValue(m_action_host_name, json[QString("actionHostName")]);
    m_action_host_name_isSet = !json[QString("actionHostName")].isNull() && m_action_host_name_isValid;

    m_change_decision_callback_url_isValid = ::OpenAPI::fromJsonValue(m_change_decision_callback_url, json[QString("changeDecisionCallbackUrl")]);
    m_change_decision_callback_url_isSet = !json[QString("changeDecisionCallbackUrl")].isNull() && m_change_decision_callback_url_isValid;

    m_change_interval_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_change_interval_in_minutes, json[QString("changeIntervalInMinutes")]);
    m_change_interval_in_minutes_isSet = !json[QString("changeIntervalInMinutes")].isNull() && m_change_interval_in_minutes_isValid;

    m_change_step_isValid = ::OpenAPI::fromJsonValue(m_change_step, json[QString("changeStep")]);
    m_change_step_isSet = !json[QString("changeStep")].isNull() && m_change_step_isValid;

    m_max_reroute_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_reroute_percentage, json[QString("maxReroutePercentage")]);
    m_max_reroute_percentage_isSet = !json[QString("maxReroutePercentage")].isNull() && m_max_reroute_percentage_isValid;

    m_min_reroute_percentage_isValid = ::OpenAPI::fromJsonValue(m_min_reroute_percentage, json[QString("minReroutePercentage")]);
    m_min_reroute_percentage_isSet = !json[QString("minReroutePercentage")].isNull() && m_min_reroute_percentage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reroute_percentage_isValid = ::OpenAPI::fromJsonValue(m_reroute_percentage, json[QString("reroutePercentage")]);
    m_reroute_percentage_isSet = !json[QString("reroutePercentage")].isNull() && m_reroute_percentage_isValid;
}

QString OAIRampUpRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRampUpRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_host_name_isSet) {
        obj.insert(QString("actionHostName"), ::OpenAPI::toJsonValue(m_action_host_name));
    }
    if (m_change_decision_callback_url_isSet) {
        obj.insert(QString("changeDecisionCallbackUrl"), ::OpenAPI::toJsonValue(m_change_decision_callback_url));
    }
    if (m_change_interval_in_minutes_isSet) {
        obj.insert(QString("changeIntervalInMinutes"), ::OpenAPI::toJsonValue(m_change_interval_in_minutes));
    }
    if (m_change_step_isSet) {
        obj.insert(QString("changeStep"), ::OpenAPI::toJsonValue(m_change_step));
    }
    if (m_max_reroute_percentage_isSet) {
        obj.insert(QString("maxReroutePercentage"), ::OpenAPI::toJsonValue(m_max_reroute_percentage));
    }
    if (m_min_reroute_percentage_isSet) {
        obj.insert(QString("minReroutePercentage"), ::OpenAPI::toJsonValue(m_min_reroute_percentage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reroute_percentage_isSet) {
        obj.insert(QString("reroutePercentage"), ::OpenAPI::toJsonValue(m_reroute_percentage));
    }
    return obj;
}

QString OAIRampUpRule::getActionHostName() const {
    return m_action_host_name;
}
void OAIRampUpRule::setActionHostName(const QString &action_host_name) {
    m_action_host_name = action_host_name;
    m_action_host_name_isSet = true;
}

bool OAIRampUpRule::is_action_host_name_Set() const{
    return m_action_host_name_isSet;
}

bool OAIRampUpRule::is_action_host_name_Valid() const{
    return m_action_host_name_isValid;
}

QString OAIRampUpRule::getChangeDecisionCallbackUrl() const {
    return m_change_decision_callback_url;
}
void OAIRampUpRule::setChangeDecisionCallbackUrl(const QString &change_decision_callback_url) {
    m_change_decision_callback_url = change_decision_callback_url;
    m_change_decision_callback_url_isSet = true;
}

bool OAIRampUpRule::is_change_decision_callback_url_Set() const{
    return m_change_decision_callback_url_isSet;
}

bool OAIRampUpRule::is_change_decision_callback_url_Valid() const{
    return m_change_decision_callback_url_isValid;
}

qint32 OAIRampUpRule::getChangeIntervalInMinutes() const {
    return m_change_interval_in_minutes;
}
void OAIRampUpRule::setChangeIntervalInMinutes(const qint32 &change_interval_in_minutes) {
    m_change_interval_in_minutes = change_interval_in_minutes;
    m_change_interval_in_minutes_isSet = true;
}

bool OAIRampUpRule::is_change_interval_in_minutes_Set() const{
    return m_change_interval_in_minutes_isSet;
}

bool OAIRampUpRule::is_change_interval_in_minutes_Valid() const{
    return m_change_interval_in_minutes_isValid;
}

double OAIRampUpRule::getChangeStep() const {
    return m_change_step;
}
void OAIRampUpRule::setChangeStep(const double &change_step) {
    m_change_step = change_step;
    m_change_step_isSet = true;
}

bool OAIRampUpRule::is_change_step_Set() const{
    return m_change_step_isSet;
}

bool OAIRampUpRule::is_change_step_Valid() const{
    return m_change_step_isValid;
}

double OAIRampUpRule::getMaxReroutePercentage() const {
    return m_max_reroute_percentage;
}
void OAIRampUpRule::setMaxReroutePercentage(const double &max_reroute_percentage) {
    m_max_reroute_percentage = max_reroute_percentage;
    m_max_reroute_percentage_isSet = true;
}

bool OAIRampUpRule::is_max_reroute_percentage_Set() const{
    return m_max_reroute_percentage_isSet;
}

bool OAIRampUpRule::is_max_reroute_percentage_Valid() const{
    return m_max_reroute_percentage_isValid;
}

double OAIRampUpRule::getMinReroutePercentage() const {
    return m_min_reroute_percentage;
}
void OAIRampUpRule::setMinReroutePercentage(const double &min_reroute_percentage) {
    m_min_reroute_percentage = min_reroute_percentage;
    m_min_reroute_percentage_isSet = true;
}

bool OAIRampUpRule::is_min_reroute_percentage_Set() const{
    return m_min_reroute_percentage_isSet;
}

bool OAIRampUpRule::is_min_reroute_percentage_Valid() const{
    return m_min_reroute_percentage_isValid;
}

QString OAIRampUpRule::getName() const {
    return m_name;
}
void OAIRampUpRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRampUpRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRampUpRule::is_name_Valid() const{
    return m_name_isValid;
}

double OAIRampUpRule::getReroutePercentage() const {
    return m_reroute_percentage;
}
void OAIRampUpRule::setReroutePercentage(const double &reroute_percentage) {
    m_reroute_percentage = reroute_percentage;
    m_reroute_percentage_isSet = true;
}

bool OAIRampUpRule::is_reroute_percentage_Set() const{
    return m_reroute_percentage_isSet;
}

bool OAIRampUpRule::is_reroute_percentage_Valid() const{
    return m_reroute_percentage_isValid;
}

bool OAIRampUpRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_decision_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_interval_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_step_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_reroute_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_reroute_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reroute_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRampUpRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
