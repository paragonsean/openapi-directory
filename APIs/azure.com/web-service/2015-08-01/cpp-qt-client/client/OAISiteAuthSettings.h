/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISiteAuthSettings.h
 *
 * Configuration settings for the Azure App Service Authentication / Authorization feature.
 */

#ifndef OAISiteAuthSettings_H
#define OAISiteAuthSettings_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISiteAuthSettings : public OAIObject {
public:
    OAISiteAuthSettings();
    OAISiteAuthSettings(QString json);
    ~OAISiteAuthSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAadClientId() const;
    void setAadClientId(const QString &aad_client_id);
    bool is_aad_client_id_Set() const;
    bool is_aad_client_id_Valid() const;

    QList<QString> getAdditionalLoginParams() const;
    void setAdditionalLoginParams(const QList<QString> &additional_login_params);
    bool is_additional_login_params_Set() const;
    bool is_additional_login_params_Valid() const;

    QList<QString> getAllowedAudiences() const;
    void setAllowedAudiences(const QList<QString> &allowed_audiences);
    bool is_allowed_audiences_Set() const;
    bool is_allowed_audiences_Valid() const;

    QList<QString> getAllowedExternalRedirectUrls() const;
    void setAllowedExternalRedirectUrls(const QList<QString> &allowed_external_redirect_urls);
    bool is_allowed_external_redirect_urls_Set() const;
    bool is_allowed_external_redirect_urls_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientSecret() const;
    void setClientSecret(const QString &client_secret);
    bool is_client_secret_Set() const;
    bool is_client_secret_Valid() const;

    QString getDefaultProvider() const;
    void setDefaultProvider(const QString &default_provider);
    bool is_default_provider_Set() const;
    bool is_default_provider_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QString getFacebookAppId() const;
    void setFacebookAppId(const QString &facebook_app_id);
    bool is_facebook_app_id_Set() const;
    bool is_facebook_app_id_Valid() const;

    QString getFacebookAppSecret() const;
    void setFacebookAppSecret(const QString &facebook_app_secret);
    bool is_facebook_app_secret_Set() const;
    bool is_facebook_app_secret_Valid() const;

    QList<QString> getFacebookOAuthScopes() const;
    void setFacebookOAuthScopes(const QList<QString> &facebook_o_auth_scopes);
    bool is_facebook_o_auth_scopes_Set() const;
    bool is_facebook_o_auth_scopes_Valid() const;

    QString getGoogleClientId() const;
    void setGoogleClientId(const QString &google_client_id);
    bool is_google_client_id_Set() const;
    bool is_google_client_id_Valid() const;

    QString getGoogleClientSecret() const;
    void setGoogleClientSecret(const QString &google_client_secret);
    bool is_google_client_secret_Set() const;
    bool is_google_client_secret_Valid() const;

    QList<QString> getGoogleOAuthScopes() const;
    void setGoogleOAuthScopes(const QList<QString> &google_o_auth_scopes);
    bool is_google_o_auth_scopes_Set() const;
    bool is_google_o_auth_scopes_Valid() const;

    QString getHttpApiPrefixPath() const;
    void setHttpApiPrefixPath(const QString &http_api_prefix_path);
    bool is_http_api_prefix_path_Set() const;
    bool is_http_api_prefix_path_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    QString getMicrosoftAccountClientId() const;
    void setMicrosoftAccountClientId(const QString &microsoft_account_client_id);
    bool is_microsoft_account_client_id_Set() const;
    bool is_microsoft_account_client_id_Valid() const;

    QString getMicrosoftAccountClientSecret() const;
    void setMicrosoftAccountClientSecret(const QString &microsoft_account_client_secret);
    bool is_microsoft_account_client_secret_Set() const;
    bool is_microsoft_account_client_secret_Valid() const;

    QList<QString> getMicrosoftAccountOAuthScopes() const;
    void setMicrosoftAccountOAuthScopes(const QList<QString> &microsoft_account_o_auth_scopes);
    bool is_microsoft_account_o_auth_scopes_Set() const;
    bool is_microsoft_account_o_auth_scopes_Valid() const;

    QString getOpenIdIssuer() const;
    void setOpenIdIssuer(const QString &open_id_issuer);
    bool is_open_id_issuer_Set() const;
    bool is_open_id_issuer_Valid() const;

    double getTokenRefreshExtensionHours() const;
    void setTokenRefreshExtensionHours(const double &token_refresh_extension_hours);
    bool is_token_refresh_extension_hours_Set() const;
    bool is_token_refresh_extension_hours_Valid() const;

    bool isTokenStoreEnabled() const;
    void setTokenStoreEnabled(const bool &token_store_enabled);
    bool is_token_store_enabled_Set() const;
    bool is_token_store_enabled_Valid() const;

    QString getTwitterConsumerKey() const;
    void setTwitterConsumerKey(const QString &twitter_consumer_key);
    bool is_twitter_consumer_key_Set() const;
    bool is_twitter_consumer_key_Valid() const;

    QString getTwitterConsumerSecret() const;
    void setTwitterConsumerSecret(const QString &twitter_consumer_secret);
    bool is_twitter_consumer_secret_Set() const;
    bool is_twitter_consumer_secret_Valid() const;

    QString getUnauthenticatedClientAction() const;
    void setUnauthenticatedClientAction(const QString &unauthenticated_client_action);
    bool is_unauthenticated_client_action_Set() const;
    bool is_unauthenticated_client_action_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aad_client_id;
    bool m_aad_client_id_isSet;
    bool m_aad_client_id_isValid;

    QList<QString> m_additional_login_params;
    bool m_additional_login_params_isSet;
    bool m_additional_login_params_isValid;

    QList<QString> m_allowed_audiences;
    bool m_allowed_audiences_isSet;
    bool m_allowed_audiences_isValid;

    QList<QString> m_allowed_external_redirect_urls;
    bool m_allowed_external_redirect_urls_isSet;
    bool m_allowed_external_redirect_urls_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_secret;
    bool m_client_secret_isSet;
    bool m_client_secret_isValid;

    QString m_default_provider;
    bool m_default_provider_isSet;
    bool m_default_provider_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QString m_facebook_app_id;
    bool m_facebook_app_id_isSet;
    bool m_facebook_app_id_isValid;

    QString m_facebook_app_secret;
    bool m_facebook_app_secret_isSet;
    bool m_facebook_app_secret_isValid;

    QList<QString> m_facebook_o_auth_scopes;
    bool m_facebook_o_auth_scopes_isSet;
    bool m_facebook_o_auth_scopes_isValid;

    QString m_google_client_id;
    bool m_google_client_id_isSet;
    bool m_google_client_id_isValid;

    QString m_google_client_secret;
    bool m_google_client_secret_isSet;
    bool m_google_client_secret_isValid;

    QList<QString> m_google_o_auth_scopes;
    bool m_google_o_auth_scopes_isSet;
    bool m_google_o_auth_scopes_isValid;

    QString m_http_api_prefix_path;
    bool m_http_api_prefix_path_isSet;
    bool m_http_api_prefix_path_isValid;

    QString m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    QString m_microsoft_account_client_id;
    bool m_microsoft_account_client_id_isSet;
    bool m_microsoft_account_client_id_isValid;

    QString m_microsoft_account_client_secret;
    bool m_microsoft_account_client_secret_isSet;
    bool m_microsoft_account_client_secret_isValid;

    QList<QString> m_microsoft_account_o_auth_scopes;
    bool m_microsoft_account_o_auth_scopes_isSet;
    bool m_microsoft_account_o_auth_scopes_isValid;

    QString m_open_id_issuer;
    bool m_open_id_issuer_isSet;
    bool m_open_id_issuer_isValid;

    double m_token_refresh_extension_hours;
    bool m_token_refresh_extension_hours_isSet;
    bool m_token_refresh_extension_hours_isValid;

    bool m_token_store_enabled;
    bool m_token_store_enabled_isSet;
    bool m_token_store_enabled_isValid;

    QString m_twitter_consumer_key;
    bool m_twitter_consumer_key_isSet;
    bool m_twitter_consumer_key_isValid;

    QString m_twitter_consumer_secret;
    bool m_twitter_consumer_secret_isSet;
    bool m_twitter_consumer_secret_isValid;

    QString m_unauthenticated_client_action;
    bool m_unauthenticated_client_action_isSet;
    bool m_unauthenticated_client_action_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISiteAuthSettings)

#endif // OAISiteAuthSettings_H
