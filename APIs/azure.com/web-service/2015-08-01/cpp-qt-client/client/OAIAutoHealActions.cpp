/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoHealActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoHealActions::OAIAutoHealActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoHealActions::OAIAutoHealActions() {
    this->initializeModel();
}

OAIAutoHealActions::~OAIAutoHealActions() {}

void OAIAutoHealActions::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_custom_action_isSet = false;
    m_custom_action_isValid = false;

    m_min_process_execution_time_isSet = false;
    m_min_process_execution_time_isValid = false;
}

void OAIAutoHealActions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoHealActions::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;

    m_custom_action_isValid = ::OpenAPI::fromJsonValue(m_custom_action, json[QString("customAction")]);
    m_custom_action_isSet = !json[QString("customAction")].isNull() && m_custom_action_isValid;

    m_min_process_execution_time_isValid = ::OpenAPI::fromJsonValue(m_min_process_execution_time, json[QString("minProcessExecutionTime")]);
    m_min_process_execution_time_isSet = !json[QString("minProcessExecutionTime")].isNull() && m_min_process_execution_time_isValid;
}

QString OAIAutoHealActions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoHealActions::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type_isSet) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_custom_action.isSet()) {
        obj.insert(QString("customAction"), ::OpenAPI::toJsonValue(m_custom_action));
    }
    if (m_min_process_execution_time_isSet) {
        obj.insert(QString("minProcessExecutionTime"), ::OpenAPI::toJsonValue(m_min_process_execution_time));
    }
    return obj;
}

QString OAIAutoHealActions::getActionType() const {
    return m_action_type;
}
void OAIAutoHealActions::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIAutoHealActions::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIAutoHealActions::is_action_type_Valid() const{
    return m_action_type_isValid;
}

OAIAutoHealCustomAction OAIAutoHealActions::getCustomAction() const {
    return m_custom_action;
}
void OAIAutoHealActions::setCustomAction(const OAIAutoHealCustomAction &custom_action) {
    m_custom_action = custom_action;
    m_custom_action_isSet = true;
}

bool OAIAutoHealActions::is_custom_action_Set() const{
    return m_custom_action_isSet;
}

bool OAIAutoHealActions::is_custom_action_Valid() const{
    return m_custom_action_isValid;
}

QString OAIAutoHealActions::getMinProcessExecutionTime() const {
    return m_min_process_execution_time;
}
void OAIAutoHealActions::setMinProcessExecutionTime(const QString &min_process_execution_time) {
    m_min_process_execution_time = min_process_execution_time;
    m_min_process_execution_time_isSet = true;
}

bool OAIAutoHealActions::is_min_process_execution_time_Set() const{
    return m_min_process_execution_time_isSet;
}

bool OAIAutoHealActions::is_min_process_execution_time_Valid() const{
    return m_min_process_execution_time_isValid;
}

bool OAIAutoHealActions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_process_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoHealActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_type_isValid && true;
}

} // namespace OpenAPI
