/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutoHealTriggers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutoHealTriggers::OAIAutoHealTriggers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutoHealTriggers::OAIAutoHealTriggers() {
    this->initializeModel();
}

OAIAutoHealTriggers::~OAIAutoHealTriggers() {}

void OAIAutoHealTriggers::initializeModel() {

    m_private_bytes_in_kb_isSet = false;
    m_private_bytes_in_kb_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;

    m_slow_requests_isSet = false;
    m_slow_requests_isValid = false;

    m_status_codes_isSet = false;
    m_status_codes_isValid = false;
}

void OAIAutoHealTriggers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutoHealTriggers::fromJsonObject(QJsonObject json) {

    m_private_bytes_in_kb_isValid = ::OpenAPI::fromJsonValue(m_private_bytes_in_kb, json[QString("privateBytesInKB")]);
    m_private_bytes_in_kb_isSet = !json[QString("privateBytesInKB")].isNull() && m_private_bytes_in_kb_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;

    m_slow_requests_isValid = ::OpenAPI::fromJsonValue(m_slow_requests, json[QString("slowRequests")]);
    m_slow_requests_isSet = !json[QString("slowRequests")].isNull() && m_slow_requests_isValid;

    m_status_codes_isValid = ::OpenAPI::fromJsonValue(m_status_codes, json[QString("statusCodes")]);
    m_status_codes_isSet = !json[QString("statusCodes")].isNull() && m_status_codes_isValid;
}

QString OAIAutoHealTriggers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutoHealTriggers::asJsonObject() const {
    QJsonObject obj;
    if (m_private_bytes_in_kb_isSet) {
        obj.insert(QString("privateBytesInKB"), ::OpenAPI::toJsonValue(m_private_bytes_in_kb));
    }
    if (m_requests.isSet()) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    if (m_slow_requests.isSet()) {
        obj.insert(QString("slowRequests"), ::OpenAPI::toJsonValue(m_slow_requests));
    }
    if (m_status_codes.size() > 0) {
        obj.insert(QString("statusCodes"), ::OpenAPI::toJsonValue(m_status_codes));
    }
    return obj;
}

qint32 OAIAutoHealTriggers::getPrivateBytesInKb() const {
    return m_private_bytes_in_kb;
}
void OAIAutoHealTriggers::setPrivateBytesInKb(const qint32 &private_bytes_in_kb) {
    m_private_bytes_in_kb = private_bytes_in_kb;
    m_private_bytes_in_kb_isSet = true;
}

bool OAIAutoHealTriggers::is_private_bytes_in_kb_Set() const{
    return m_private_bytes_in_kb_isSet;
}

bool OAIAutoHealTriggers::is_private_bytes_in_kb_Valid() const{
    return m_private_bytes_in_kb_isValid;
}

OAIRequestsBasedTrigger OAIAutoHealTriggers::getRequests() const {
    return m_requests;
}
void OAIAutoHealTriggers::setRequests(const OAIRequestsBasedTrigger &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIAutoHealTriggers::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIAutoHealTriggers::is_requests_Valid() const{
    return m_requests_isValid;
}

OAISlowRequestsBasedTrigger OAIAutoHealTriggers::getSlowRequests() const {
    return m_slow_requests;
}
void OAIAutoHealTriggers::setSlowRequests(const OAISlowRequestsBasedTrigger &slow_requests) {
    m_slow_requests = slow_requests;
    m_slow_requests_isSet = true;
}

bool OAIAutoHealTriggers::is_slow_requests_Set() const{
    return m_slow_requests_isSet;
}

bool OAIAutoHealTriggers::is_slow_requests_Valid() const{
    return m_slow_requests_isValid;
}

QList<OAIStatusCodesBasedTrigger> OAIAutoHealTriggers::getStatusCodes() const {
    return m_status_codes;
}
void OAIAutoHealTriggers::setStatusCodes(const QList<OAIStatusCodesBasedTrigger> &status_codes) {
    m_status_codes = status_codes;
    m_status_codes_isSet = true;
}

bool OAIAutoHealTriggers::is_status_codes_Set() const{
    return m_status_codes_isSet;
}

bool OAIAutoHealTriggers::is_status_codes_Valid() const{
    return m_status_codes_isValid;
}

bool OAIAutoHealTriggers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_private_bytes_in_kb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slow_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutoHealTriggers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
