/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Certificate from '../model/Certificate';
import CertificateCollection from '../model/CertificateCollection';
import Csr from '../model/Csr';

/**
* Certificates service.
* @module api/CertificatesApi
* @version 2015-08-01
*/
export default class CertificatesApi {

    /**
    * Constructs a new CertificatesApi. 
    * @alias module:api/CertificatesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the certificatesCreateOrUpdateCertificate operation.
     * @callback module:api/CertificatesApi~certificatesCreateOrUpdateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or modifies an existing certificate.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Certificate} certificateEnvelope Details of certificate if it exists already.
     * @param {module:api/CertificatesApi~certificatesCreateOrUpdateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    certificatesCreateOrUpdateCertificate(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, callback) {
      let postBody = certificateEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdateCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesCreateOrUpdateCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdateCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdateCertificate");
      }
      // verify the required parameter 'certificateEnvelope' is set
      if (certificateEnvelope === undefined || certificateEnvelope === null) {
        throw new Error("Missing the required parameter 'certificateEnvelope' when calling certificatesCreateOrUpdateCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesCreateOrUpdateCsr operation.
     * @callback module:api/CertificatesApi~certificatesCreateOrUpdateCsrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Csr} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or modifies an existing certificate signing request.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Csr} csrEnvelope Details of certificate signing request if it exists already.
     * @param {module:api/CertificatesApi~certificatesCreateOrUpdateCsrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Csr}
     */
    certificatesCreateOrUpdateCsr(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, callback) {
      let postBody = csrEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdateCsr");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesCreateOrUpdateCsr");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdateCsr");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdateCsr");
      }
      // verify the required parameter 'csrEnvelope' is set
      if (csrEnvelope === undefined || csrEnvelope === null) {
        throw new Error("Missing the required parameter 'csrEnvelope' when calling certificatesCreateOrUpdateCsr");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Csr;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesDeleteCertificate operation.
     * @callback module:api/CertificatesApi~certificatesDeleteCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a certificate by name in a specified subscription and resourcegroup.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate to be deleted.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificatesApi~certificatesDeleteCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificatesDeleteCertificate(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesDeleteCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesDeleteCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesDeleteCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesDeleteCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesDeleteCsr operation.
     * @callback module:api/CertificatesApi~certificatesDeleteCsrCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the certificate signing request.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate signing request.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificatesApi~certificatesDeleteCsrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificatesDeleteCsr(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesDeleteCsr");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesDeleteCsr");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesDeleteCsr");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesDeleteCsr");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesGetCertificate operation.
     * @callback module:api/CertificatesApi~certificatesGetCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificatesApi~certificatesGetCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    certificatesGetCertificate(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesGetCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesGetCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesGetCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesGetCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesGetCertificates operation.
     * @callback module:api/CertificatesApi~certificatesGetCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get certificates for a subscription in the specified resource group.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificatesApi~certificatesGetCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateCollection}
     */
    certificatesGetCertificates(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesGetCertificates");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesGetCertificates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesGetCertificates");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CertificateCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesGetCsr operation.
     * @callback module:api/CertificatesApi~certificatesGetCsrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Csr} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificatesApi~certificatesGetCsrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Csr}
     */
    certificatesGetCsr(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesGetCsr");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesGetCsr");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesGetCsr");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesGetCsr");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Csr;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesGetCsrs operation.
     * @callback module:api/CertificatesApi~certificatesGetCsrsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Csr>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificatesApi~certificatesGetCsrsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Csr>}
     */
    certificatesGetCsrs(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesGetCsrs");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesGetCsrs");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesGetCsrs");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Csr];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesUpdateCertificate operation.
     * @callback module:api/CertificatesApi~certificatesUpdateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or modifies an existing certificate.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Certificate} certificateEnvelope Details of certificate if it exists already.
     * @param {module:api/CertificatesApi~certificatesUpdateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    certificatesUpdateCertificate(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, callback) {
      let postBody = certificateEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesUpdateCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesUpdateCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesUpdateCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesUpdateCertificate");
      }
      // verify the required parameter 'certificateEnvelope' is set
      if (certificateEnvelope === undefined || certificateEnvelope === null) {
        throw new Error("Missing the required parameter 'certificateEnvelope' when calling certificatesUpdateCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Certificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificatesUpdateCsr operation.
     * @callback module:api/CertificatesApi~certificatesUpdateCsrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Csr} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or modifies an existing certificate signing request.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the certificate.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Csr} csrEnvelope Details of certificate signing request if it exists already.
     * @param {module:api/CertificatesApi~certificatesUpdateCsrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Csr}
     */
    certificatesUpdateCsr(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, callback) {
      let postBody = csrEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificatesUpdateCsr");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificatesUpdateCsr");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificatesUpdateCsr");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificatesUpdateCsr");
      }
      // verify the required parameter 'csrEnvelope' is set
      if (csrEnvelope === undefined || csrEnvelope === null) {
        throw new Error("Missing the required parameter 'csrEnvelope' when calling certificatesUpdateCsr");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Csr;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
