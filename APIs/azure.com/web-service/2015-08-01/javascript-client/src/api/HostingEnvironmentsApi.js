/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressResponse from '../model/AddressResponse';
import CsmUsageQuotaCollection from '../model/CsmUsageQuotaCollection';
import HostingEnvironment from '../model/HostingEnvironment';
import HostingEnvironmentCollection from '../model/HostingEnvironmentCollection';
import HostingEnvironmentDiagnostics from '../model/HostingEnvironmentDiagnostics';
import MetricDefinition from '../model/MetricDefinition';
import MetricDefinitionCollection from '../model/MetricDefinitionCollection';
import ResourceMetricCollection from '../model/ResourceMetricCollection';
import ServerFarmCollection from '../model/ServerFarmCollection';
import SiteCollection from '../model/SiteCollection';
import SkuInfoCollection from '../model/SkuInfoCollection';
import StampCapacityCollection from '../model/StampCapacityCollection';
import UsageCollection from '../model/UsageCollection';
import WorkerPool from '../model/WorkerPool';
import WorkerPoolCollection from '../model/WorkerPoolCollection';

/**
* HostingEnvironments service.
* @module api/HostingEnvironmentsApi
* @version 2015-08-01
*/
export default class HostingEnvironmentsApi {

    /**
    * Constructs a new HostingEnvironmentsApi. 
    * @alias module:api/HostingEnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the hostingEnvironmentsCreateOrUpdateHostingEnvironment operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsCreateOrUpdateHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/HostingEnvironment} hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment)
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsCreateOrUpdateHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironment}
     */
    hostingEnvironmentsCreateOrUpdateHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, callback) {
      let postBody = hostingEnvironmentEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment");
      }
      // verify the required parameter 'hostingEnvironmentEnvelope' is set
      if (hostingEnvironmentEnvelope === undefined || hostingEnvironmentEnvelope === null) {
        throw new Error("Missing the required parameter 'hostingEnvironmentEnvelope' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostingEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsCreateOrUpdateMultiRolePool operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsCreateOrUpdateMultiRolePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a multiRole pool.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/WorkerPool} multiRolePoolEnvelope Properties of multiRole pool
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsCreateOrUpdateMultiRolePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPool}
     */
    hostingEnvironmentsCreateOrUpdateMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, callback) {
      let postBody = multiRolePoolEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool");
      }
      // verify the required parameter 'multiRolePoolEnvelope' is set
      if (multiRolePoolEnvelope === undefined || multiRolePoolEnvelope === null) {
        throw new Error("Missing the required parameter 'multiRolePoolEnvelope' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = WorkerPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsCreateOrUpdateWorkerPool operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsCreateOrUpdateWorkerPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a worker pool.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/WorkerPool} workerPoolEnvelope Properties of worker pool
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsCreateOrUpdateWorkerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPool}
     */
    hostingEnvironmentsCreateOrUpdateWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, callback) {
      let postBody = workerPoolEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsCreateOrUpdateWorkerPool");
      }
      // verify the required parameter 'workerPoolEnvelope' is set
      if (workerPoolEnvelope === undefined || workerPoolEnvelope === null) {
        throw new Error("Missing the required parameter 'workerPoolEnvelope' when calling hostingEnvironmentsCreateOrUpdateWorkerPool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = WorkerPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsDeleteHostingEnvironment operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsDeleteHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceDelete] Delete even if the hostingEnvironment (App Service Environment) contains resources
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsDeleteHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsDeleteHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsDeleteHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsDeleteHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsDeleteHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsDeleteHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'forceDelete': opts['forceDelete'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironment operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironment}
     */
    hostingEnvironmentsGetHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostingEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentCapacities operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentCapacitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StampCapacityCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentCapacitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StampCapacityCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentCapacities(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentCapacities");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentCapacities");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentCapacities");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentCapacities");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = StampCapacityCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentDiagnostics operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentDiagnosticsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HostingEnvironmentDiagnostics>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentDiagnosticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HostingEnvironmentDiagnostics>}
     */
    hostingEnvironmentsGetHostingEnvironmentDiagnostics(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [HostingEnvironmentDiagnostics];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironmentDiagnostics} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} diagnosticsName Name of the diagnostics
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironmentDiagnostics}
     */
    hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem");
      }
      // verify the required parameter 'diagnosticsName' is set
      if (diagnosticsName === undefined || diagnosticsName === null) {
        throw new Error("Missing the required parameter 'diagnosticsName' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'diagnosticsName': diagnosticsName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostingEnvironmentDiagnostics;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentMetricDefinitions operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinition}
     */
    hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = MetricDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentMetrics operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] Include instance details
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentMetrics(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResourceMetricCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = MetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [startTime] Beginning time of metrics query
     * @param {String} [endTime] End time of metrics query
     * @param {String} [timeGrain] Time granularity of metrics query
     * @param {Boolean} [details] Include instance details
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'timeGrain': opts['timeGrain'],
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResourceMetricCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = UsageCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentOperation operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentOperationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} operationId operation identifier GUID
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsGetHostingEnvironmentOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentOperation");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling hostingEnvironmentsGetHostingEnvironmentOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentOperations operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentOperationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment)
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsGetHostingEnvironmentOperations(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentOperations");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentOperations");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentOperations");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentOperations");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentServerFarms operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentServerFarmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentServerFarmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentServerFarms(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServerFarmCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentSites operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] Comma separated list of site properties to include
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentSites(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentSites");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentSites");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentSites");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentSites");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentUsages operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CsmUsageQuotaCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CsmUsageQuotaCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentUsages(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CsmUsageQuotaCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentVips operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentVipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentVipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressResponse}
     */
    hostingEnvironmentsGetHostingEnvironmentVips(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentVips");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentVips");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentVips");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentVips");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = AddressResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentWebHostingPlans operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebHostingPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebHostingPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServerFarmCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/webhostingplans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = MetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] Include instance details
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResourceMetricCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsageCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsageCollection}
     */
    hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = UsageCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetHostingEnvironments operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironmentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetHostingEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironmentCollection}
     */
    hostingEnvironmentsGetHostingEnvironments(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironments");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironments");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = HostingEnvironmentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetMultiRolePool operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of a multiRole pool.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPool}
     */
    hostingEnvironmentsGetMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = WorkerPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} instance Name of instance in the multiRole pool&gt;
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(resourceGroupName, name, instance, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instance': instance,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetMultiRolePoolInstanceMetrics operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolInstanceMetricsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} instance Name of instance in the multiRole pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] Include instance details
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolInstanceMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsGetMultiRolePoolInstanceMetrics(resourceGroupName, name, instance, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instance': instance,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetMultiRolePoolSkus operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkuInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available skus for scaling a multiRole pool.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkuInfoCollection}
     */
    hostingEnvironmentsGetMultiRolePoolSkus(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePoolSkus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePoolSkus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePoolSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePoolSkus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SkuInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetMultiRolePools operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all multi role pools
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetMultiRolePoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolCollection}
     */
    hostingEnvironmentsGetMultiRolePools(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePools");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePools");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePools");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePools");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkerPoolCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetWorkerPool operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of a worker pool.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPool}
     */
    hostingEnvironmentsGetWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = WorkerPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} instance Name of instance in the worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'instance': instance,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetWorkerPoolInstanceMetrics operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolInstanceMetricsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} instance Name of instance in the worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] Include instance details
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolInstanceMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsGetWorkerPoolInstanceMetrics(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'instance': instance,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetWorkerPoolSkus operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkuInfoCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available skus for scaling a worker pool.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} workerPoolName Name of worker pool
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkuInfoCollection}
     */
    hostingEnvironmentsGetWorkerPoolSkus(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPoolSkus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPoolSkus");
      }
      // verify the required parameter 'workerPoolName' is set
      if (workerPoolName === undefined || workerPoolName === null) {
        throw new Error("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPoolSkus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPoolSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPoolSkus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerPoolName': workerPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SkuInfoCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsGetWorkerPools operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkerPoolCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all worker pools
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsGetWorkerPoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkerPoolCollection}
     */
    hostingEnvironmentsGetWorkerPools(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPools");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPools");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPools");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPools");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkerPoolCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsRebootHostingEnvironment operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsRebootHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsRebootHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    hostingEnvironmentsRebootHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsRebootHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsRebootHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsRebootHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsRebootHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsResumeHostingEnvironment operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsResumeHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resumes the hostingEnvironment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsResumeHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    hostingEnvironmentsResumeHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsResumeHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsResumeHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsResumeHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsResumeHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hostingEnvironmentsSuspendHostingEnvironment operation.
     * @callback module:api/HostingEnvironmentsApi~hostingEnvironmentsSuspendHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspends the hostingEnvironment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of hostingEnvironment (App Service Environment)
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/HostingEnvironmentsApi~hostingEnvironmentsSuspendHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    hostingEnvironmentsSuspendHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsSuspendHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling hostingEnvironmentsSuspendHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsSuspendHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsSuspendHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
