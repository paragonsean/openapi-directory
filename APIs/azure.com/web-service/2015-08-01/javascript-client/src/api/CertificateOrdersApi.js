/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateEmail from '../model/CertificateEmail';
import CertificateOrder from '../model/CertificateOrder';
import CertificateOrderAction from '../model/CertificateOrderAction';
import CertificateOrderCertificate from '../model/CertificateOrderCertificate';
import CertificateOrderCertificateCollection from '../model/CertificateOrderCertificateCollection';
import CertificateOrderCollection from '../model/CertificateOrderCollection';
import ReissueCertificateOrderRequest from '../model/ReissueCertificateOrderRequest';
import RenewCertificateOrderRequest from '../model/RenewCertificateOrderRequest';

/**
* CertificateOrders service.
* @module api/CertificateOrdersApi
* @version 2015-08-01
*/
export default class CertificateOrdersApi {

    /**
    * Constructs a new CertificateOrdersApi. 
    * @alias module:api/CertificateOrdersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the certificateOrdersCreateOrUpdateCertificate operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersCreateOrUpdateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrderCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} certificateOrderName Certificate name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CertificateOrderCertificate} keyVaultCertificate Key Vault secret csm Id
     * @param {module:api/CertificateOrdersApi~certificateOrdersCreateOrUpdateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrderCertificate}
     */
    certificateOrdersCreateOrUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, callback) {
      let postBody = keyVaultCertificate;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling certificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersCreateOrUpdateCertificate");
      }
      // verify the required parameter 'keyVaultCertificate' is set
      if (keyVaultCertificate === undefined || keyVaultCertificate === null) {
        throw new Error("Missing the required parameter 'keyVaultCertificate' when calling certificateOrdersCreateOrUpdateCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = CertificateOrderCertificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersCreateOrUpdateCertificateOrder operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersCreateOrUpdateCertificateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a certificate purchase order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CertificateOrder} certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @param {module:api/CertificateOrdersApi~certificateOrdersCreateOrUpdateCertificateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrder}
     */
    certificateOrdersCreateOrUpdateCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, callback) {
      let postBody = certificateDistinguishedName;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersCreateOrUpdateCertificateOrder");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersCreateOrUpdateCertificateOrder");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersCreateOrUpdateCertificateOrder");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersCreateOrUpdateCertificateOrder");
      }
      // verify the required parameter 'certificateDistinguishedName' is set
      if (certificateDistinguishedName === undefined || certificateDistinguishedName === null) {
        throw new Error("Missing the required parameter 'certificateDistinguishedName' when calling certificateOrdersCreateOrUpdateCertificateOrder");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = CertificateOrder;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersDeleteCertificate operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersDeleteCertificateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the certificate associated with the certificate order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} certificateOrderName Certificate name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersDeleteCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificateOrdersDeleteCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling certificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersDeleteCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersDeleteCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersDeleteCertificateOrder operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersDeleteCertificateOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing certificate order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersDeleteCertificateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificateOrdersDeleteCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersDeleteCertificateOrder");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersDeleteCertificateOrder");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersDeleteCertificateOrder");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersDeleteCertificateOrder");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersGetCertificate operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersGetCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrderCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get certificate associated with the certificate order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} certificateOrderName Certificate name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersGetCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrderCertificate}
     */
    certificateOrdersGetCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling certificateOrdersGetCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersGetCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = CertificateOrderCertificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersGetCertificateOrder operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersGetCertificateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a certificate order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersGetCertificateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrder}
     */
    certificateOrdersGetCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificateOrder");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersGetCertificateOrder");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificateOrder");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificateOrder");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = CertificateOrder;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersGetCertificateOrders operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersGetCertificateOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrderCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get certificate orders in a resource group
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersGetCertificateOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrderCollection}
     */
    certificateOrdersGetCertificateOrders(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificateOrders");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificateOrders");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificateOrders");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CertificateOrderCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersGetCertificates operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersGetCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrderCertificateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time)
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} certificateOrderName Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersGetCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrderCertificateCollection}
     */
    certificateOrdersGetCertificates(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificates");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling certificateOrdersGetCertificates");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificates");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CertificateOrderCertificateCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersReissueCertificateOrder operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersReissueCertificateOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reissue an existing certificate order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/ReissueCertificateOrderRequest} reissueCertificateOrderRequest Reissue parameters
     * @param {module:api/CertificateOrdersApi~certificateOrdersReissueCertificateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificateOrdersReissueCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, reissueCertificateOrderRequest, callback) {
      let postBody = reissueCertificateOrderRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersReissueCertificateOrder");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersReissueCertificateOrder");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersReissueCertificateOrder");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersReissueCertificateOrder");
      }
      // verify the required parameter 'reissueCertificateOrderRequest' is set
      if (reissueCertificateOrderRequest === undefined || reissueCertificateOrderRequest === null) {
        throw new Error("Missing the required parameter 'reissueCertificateOrderRequest' when calling certificateOrdersReissueCertificateOrder");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersRenewCertificateOrder operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersRenewCertificateOrderCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renew an existing certificate order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RenewCertificateOrderRequest} renewCertificateOrderRequest Renew parameters
     * @param {module:api/CertificateOrdersApi~certificateOrdersRenewCertificateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificateOrdersRenewCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, renewCertificateOrderRequest, callback) {
      let postBody = renewCertificateOrderRequest;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersRenewCertificateOrder");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersRenewCertificateOrder");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersRenewCertificateOrder");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersRenewCertificateOrder");
      }
      // verify the required parameter 'renewCertificateOrderRequest' is set
      if (renewCertificateOrderRequest === undefined || renewCertificateOrderRequest === null) {
        throw new Error("Missing the required parameter 'renewCertificateOrderRequest' when calling certificateOrdersRenewCertificateOrder");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersResendCertificateEmail operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersResendCertificateEmailCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resend certificate email
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate order name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersResendCertificateEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificateOrdersResendCertificateEmail(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersResendCertificateEmail");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersResendCertificateEmail");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersResendCertificateEmail");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersResendCertificateEmail");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersRetrieveCertificateActions operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersRetrieveCertificateActionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CertificateOrderAction>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the list of certificate actions
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate order name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersRetrieveCertificateActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CertificateOrderAction>}
     */
    certificateOrdersRetrieveCertificateActions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersRetrieveCertificateActions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersRetrieveCertificateActions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersRetrieveCertificateActions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersRetrieveCertificateActions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [CertificateOrderAction];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersRetrieveCertificateEmailHistory operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersRetrieveCertificateEmailHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CertificateEmail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve email history
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate order name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersRetrieveCertificateEmailHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CertificateEmail>}
     */
    certificateOrdersRetrieveCertificateEmailHistory(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersRetrieveCertificateEmailHistory");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersRetrieveCertificateEmailHistory");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersRetrieveCertificateEmailHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersRetrieveCertificateEmailHistory");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [CertificateEmail];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersUpdateCertificate operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersUpdateCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrderCertificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it's ready
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} certificateOrderName Certificate name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CertificateOrderCertificate} keyVaultCertificate Key Vault secret csm Id
     * @param {module:api/CertificateOrdersApi~certificateOrdersUpdateCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrderCertificate}
     */
    certificateOrdersUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, callback) {
      let postBody = keyVaultCertificate;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'certificateOrderName' is set
      if (certificateOrderName === undefined || certificateOrderName === null) {
        throw new Error("Missing the required parameter 'certificateOrderName' when calling certificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersUpdateCertificate");
      }
      // verify the required parameter 'keyVaultCertificate' is set
      if (keyVaultCertificate === undefined || keyVaultCertificate === null) {
        throw new Error("Missing the required parameter 'keyVaultCertificate' when calling certificateOrdersUpdateCertificate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'certificateOrderName': certificateOrderName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = CertificateOrderCertificate;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersUpdateCertificateOrder operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersUpdateCertificateOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateOrder} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a certificate purchase order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CertificateOrder} certificateDistinguishedName Distinguished name to be used for purchasing certificate
     * @param {module:api/CertificateOrdersApi~certificateOrdersUpdateCertificateOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateOrder}
     */
    certificateOrdersUpdateCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, callback) {
      let postBody = certificateDistinguishedName;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersUpdateCertificateOrder");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersUpdateCertificateOrder");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersUpdateCertificateOrder");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersUpdateCertificateOrder");
      }
      // verify the required parameter 'certificateDistinguishedName' is set
      if (certificateDistinguishedName === undefined || certificateDistinguishedName === null) {
        throw new Error("Missing the required parameter 'certificateDistinguishedName' when calling certificateOrdersUpdateCertificateOrder");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = CertificateOrder;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the certificateOrdersVerifyDomainOwnership operation.
     * @callback module:api/CertificateOrdersApi~certificateOrdersVerifyDomainOwnershipCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify domain ownership for this certificate order
     * @param {String} resourceGroupName Azure resource group name
     * @param {String} name Certificate order name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/CertificateOrdersApi~certificateOrdersVerifyDomainOwnershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    certificateOrdersVerifyDomainOwnership(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling certificateOrdersVerifyDomainOwnership");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling certificateOrdersVerifyDomainOwnership");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling certificateOrdersVerifyDomainOwnership");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling certificateOrdersVerifyDomainOwnership");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
