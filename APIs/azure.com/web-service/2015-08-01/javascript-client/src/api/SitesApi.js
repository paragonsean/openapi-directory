/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BackupItem from '../model/BackupItem';
import BackupItemCollection from '../model/BackupItemCollection';
import BackupRequest from '../model/BackupRequest';
import ConnectionStringDictionary from '../model/ConnectionStringDictionary';
import CsmPublishingProfileOptions from '../model/CsmPublishingProfileOptions';
import CsmSiteRecoveryEntity from '../model/CsmSiteRecoveryEntity';
import CsmSlotEntity from '../model/CsmSlotEntity';
import CsmUsageQuotaCollection from '../model/CsmUsageQuotaCollection';
import DeletedSiteCollection from '../model/DeletedSiteCollection';
import Deployment from '../model/Deployment';
import DeploymentCollection from '../model/DeploymentCollection';
import HostNameBinding from '../model/HostNameBinding';
import HostNameBindingCollection from '../model/HostNameBindingCollection';
import MetricDefinitionCollection from '../model/MetricDefinitionCollection';
import NetworkFeatures from '../model/NetworkFeatures';
import PremierAddOnRequest from '../model/PremierAddOnRequest';
import RelayServiceConnectionEntity from '../model/RelayServiceConnectionEntity';
import ResourceMetricCollection from '../model/ResourceMetricCollection';
import RestoreRequest from '../model/RestoreRequest';
import RestoreResponse from '../model/RestoreResponse';
import Site from '../model/Site';
import SiteAuthSettings from '../model/SiteAuthSettings';
import SiteCloneability from '../model/SiteCloneability';
import SiteCollection from '../model/SiteCollection';
import SiteConfig from '../model/SiteConfig';
import SiteInstanceCollection from '../model/SiteInstanceCollection';
import SiteLogsConfig from '../model/SiteLogsConfig';
import SiteSourceControl from '../model/SiteSourceControl';
import SlotConfigNamesResource from '../model/SlotConfigNamesResource';
import SlotDifferenceCollection from '../model/SlotDifferenceCollection';
import StringDictionary from '../model/StringDictionary';
import User from '../model/User';
import VnetGateway from '../model/VnetGateway';
import VnetInfo from '../model/VnetInfo';

/**
* Sites service.
* @module api/SitesApi
* @version 2015-08-01
*/
export default class SitesApi {

    /**
    * Constructs a new SitesApi. 
    * @alias module:api/SitesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sitesAddSitePremierAddOn operation.
     * @callback module:api/SitesApi~sitesAddSitePremierAddOnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} premierAddOnName 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/PremierAddOnRequest} premierAddOn 
     * @param {module:api/SitesApi~sitesAddSitePremierAddOnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesAddSitePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, callback) {
      let postBody = premierAddOn;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesAddSitePremierAddOn");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesAddSitePremierAddOn");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling sitesAddSitePremierAddOn");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesAddSitePremierAddOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesAddSitePremierAddOn");
      }
      // verify the required parameter 'premierAddOn' is set
      if (premierAddOn === undefined || premierAddOn === null) {
        throw new Error("Missing the required parameter 'premierAddOn' when calling sitesAddSitePremierAddOn");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesAddSitePremierAddOnSlot operation.
     * @callback module:api/SitesApi~sitesAddSitePremierAddOnSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} premierAddOnName 
     * @param {String} slot 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/PremierAddOnRequest} premierAddOn 
     * @param {module:api/SitesApi~sitesAddSitePremierAddOnSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesAddSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, callback) {
      let postBody = premierAddOn;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesAddSitePremierAddOnSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesAddSitePremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling sitesAddSitePremierAddOnSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesAddSitePremierAddOnSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesAddSitePremierAddOnSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesAddSitePremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOn' is set
      if (premierAddOn === undefined || premierAddOn === null) {
        throw new Error("Missing the required parameter 'premierAddOn' when calling sitesAddSitePremierAddOnSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesApplySlotConfigSlot operation.
     * @callback module:api/SitesApi~sitesApplySlotConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies the configuration settings from the target slot onto the current slot
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of the source slot. Settings from the target slot will be applied onto this slot
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot
     * @param {module:api/SitesApi~sitesApplySlotConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesApplySlotConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesApplySlotConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesApplySlotConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesApplySlotConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesApplySlotConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesApplySlotConfigSlot");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling sitesApplySlotConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesApplySlotConfigToProduction operation.
     * @callback module:api/SitesApi~sitesApplySlotConfigToProductionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies the configuration settings from the target slot onto the current slot
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot
     * @param {module:api/SitesApi~sitesApplySlotConfigToProductionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesApplySlotConfigToProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesApplySlotConfigToProduction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesApplySlotConfigToProduction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesApplySlotConfigToProduction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesApplySlotConfigToProduction");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling sitesApplySlotConfigToProduction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesBackupSite operation.
     * @callback module:api/SitesApi~sitesBackupSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates web app backup
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request
     * @param {module:api/SitesApi~sitesBackupSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesBackupSite(resourceGroupName, name, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesBackupSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesBackupSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesBackupSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesBackupSite");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesBackupSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesBackupSiteSlot operation.
     * @callback module:api/SitesApi~sitesBackupSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates web app backup
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request
     * @param {module:api/SitesApi~sitesBackupSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesBackupSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesBackupSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesBackupSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesBackupSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesBackupSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesBackupSiteSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesBackupSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateDeployment operation.
     * @callback module:api/SitesApi~sitesCreateDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Deployment} deployment Details of deployment
     * @param {module:api/SitesApi~sitesCreateDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesCreateDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, callback) {
      let postBody = deployment;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesCreateDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateDeployment");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling sitesCreateDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateDeploymentSlot operation.
     * @callback module:api/SitesApi~sitesCreateDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Deployment} deployment Details of deployment
     * @param {module:api/SitesApi~sitesCreateDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesCreateDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, callback) {
      let postBody = deployment;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesCreateDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateDeploymentSlot");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling sitesCreateDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateInstanceDeployment operation.
     * @callback module:api/SitesApi~sitesCreateInstanceDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Deployment} deployment Details of deployment
     * @param {module:api/SitesApi~sitesCreateInstanceDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesCreateInstanceDeployment(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, deployment, callback) {
      let postBody = deployment;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateInstanceDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateInstanceDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesCreateInstanceDeployment");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesCreateInstanceDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateInstanceDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateInstanceDeployment");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling sitesCreateInstanceDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateInstanceDeploymentSlot operation.
     * @callback module:api/SitesApi~sitesCreateInstanceDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Deployment} deployment Details of deployment
     * @param {module:api/SitesApi~sitesCreateInstanceDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesCreateInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, deployment, callback) {
      let postBody = deployment;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateInstanceDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateInstanceDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesCreateInstanceDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateInstanceDeploymentSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesCreateInstanceDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateInstanceDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateInstanceDeploymentSlot");
      }
      // verify the required parameter 'deployment' is set
      if (deployment === undefined || deployment === null) {
        throw new Error("Missing the required parameter 'deployment' when calling sitesCreateInstanceDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSite operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web app or modifies an existing web app.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Site} siteEnvelope Details of web app if it exists already
     * @param {Object} opts Optional parameters
     * @param {String} [skipDnsRegistration] If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation
     * @param {String} [skipCustomDomainVerification] If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
     * @param {String} [forceDnsRegistration] If true, web app hostname is force registered with DNS
     * @param {String} [ttlInSeconds] Time to live in seconds for web app's default domain name
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    sitesCreateOrUpdateSite(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, opts, callback) {
      opts = opts || {};
      let postBody = siteEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSite");
      }
      // verify the required parameter 'siteEnvelope' is set
      if (siteEnvelope === undefined || siteEnvelope === null) {
        throw new Error("Missing the required parameter 'siteEnvelope' when calling sitesCreateOrUpdateSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'skipDnsRegistration': opts['skipDnsRegistration'],
        'skipCustomDomainVerification': opts['skipCustomDomainVerification'],
        'forceDnsRegistration': opts['forceDnsRegistration'],
        'ttlInSeconds': opts['ttlInSeconds'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteConfig operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfig} siteConfig Request body that contains the configuration setting for the web app
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfig}
     */
    sitesCreateOrUpdateSiteConfig(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteConfig");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling sitesCreateOrUpdateSiteConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteConfigSlot operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfig} siteConfig Request body that contains the configuration setting for the web app
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfig}
     */
    sitesCreateOrUpdateSiteConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteConfigSlot");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling sitesCreateOrUpdateSiteConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteHostNameBinding operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteHostNameBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a web app hostname binding
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} hostName Name of host
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/HostNameBinding} hostNameBinding Host name binding information
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteHostNameBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    sitesCreateOrUpdateSiteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, callback) {
      let postBody = hostNameBinding;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteHostNameBinding");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteHostNameBinding");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling sitesCreateOrUpdateSiteHostNameBinding");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteHostNameBinding");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteHostNameBinding");
      }
      // verify the required parameter 'hostNameBinding' is set
      if (hostNameBinding === undefined || hostNameBinding === null) {
        throw new Error("Missing the required parameter 'hostNameBinding' when calling sitesCreateOrUpdateSiteHostNameBinding");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteHostNameBindingSlot operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteHostNameBindingSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a web app hostname binding
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} hostName Name of host
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/HostNameBinding} hostNameBinding Host name binding information
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteHostNameBindingSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    sitesCreateOrUpdateSiteHostNameBindingSlot(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, callback) {
      let postBody = hostNameBinding;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteHostNameBindingSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteHostNameBindingSlot");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling sitesCreateOrUpdateSiteHostNameBindingSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteHostNameBindingSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteHostNameBindingSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteHostNameBindingSlot");
      }
      // verify the required parameter 'hostNameBinding' is set
      if (hostNameBinding === undefined || hostNameBinding === null) {
        throw new Error("Missing the required parameter 'hostNameBinding' when calling sitesCreateOrUpdateSiteHostNameBindingSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteRelayServiceConnection operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope The details of the Hybrid Connection
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesCreateOrUpdateSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesCreateOrUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteRelayServiceConnectionSlot operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope The details of the Hybrid Connection
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesCreateOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteSlot operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web app or modifies an existing web app.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/Site} siteEnvelope Details of web app if it exists already
     * @param {Object} opts Optional parameters
     * @param {String} [skipDnsRegistration] If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation
     * @param {String} [skipCustomDomainVerification] If true, custom (non *.azurewebsites.net) domains associated with web app are not verified.
     * @param {String} [forceDnsRegistration] If true, web app hostname is force registered with DNS
     * @param {String} [ttlInSeconds] Time to live in seconds for web app's default domain name
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    sitesCreateOrUpdateSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, opts, callback) {
      opts = opts || {};
      let postBody = siteEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteSlot");
      }
      // verify the required parameter 'siteEnvelope' is set
      if (siteEnvelope === undefined || siteEnvelope === null) {
        throw new Error("Missing the required parameter 'siteEnvelope' when calling sitesCreateOrUpdateSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'skipDnsRegistration': opts['skipDnsRegistration'],
        'skipCustomDomainVerification': opts['skipCustomDomainVerification'],
        'forceDnsRegistration': opts['forceDnsRegistration'],
        'ttlInSeconds': opts['ttlInSeconds'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteSourceControl operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl Request body that contains the source control parameters
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    sitesCreateOrUpdateSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteSourceControl");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling sitesCreateOrUpdateSiteSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteSourceControlSlot operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl Request body that contains the source control parameters
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    sitesCreateOrUpdateSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling sitesCreateOrUpdateSiteSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteVNETConnection operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetInfo} connectionEnvelope The properties of this Virtual Network Connection
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetInfo}
     */
    sitesCreateOrUpdateSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteVNETConnectionGateway operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Virtual Network Gateway.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} gatewayName The name of the gateway. The only gateway that exists presently is \"primary\"
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetGateway} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetGateway}
     */
    sitesCreateOrUpdateSiteVNETConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling sitesCreateOrUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnectionGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteVNETConnectionGatewaySlot operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionGatewaySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Virtual Network Gateway.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} gatewayName The name of the gateway. The only gateway that exists presently is \"primary\"
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetGateway} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionGatewaySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetGateway}
     */
    sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesCreateOrUpdateSiteVNETConnectionSlot operation.
     * @callback module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetInfo} connectionEnvelope The properties of this Virtual Network Connection
     * @param {module:api/SitesApi~sitesCreateOrUpdateSiteVNETConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetInfo}
     */
    sitesCreateOrUpdateSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteBackup operation.
     * @callback module:api/SitesApi~sitesDeleteBackupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a backup from Azure Storage
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteBackupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesDeleteBackup(resourceGroupName, name, backupId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteBackup");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteBackup");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesDeleteBackup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteBackup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteBackup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteBackupSlot operation.
     * @callback module:api/SitesApi~sitesDeleteBackupSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a backup from Azure Storage
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteBackupSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesDeleteBackupSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteBackupSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteBackupSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesDeleteBackupSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteBackupSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteBackupSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteBackupSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteDeployment operation.
     * @callback module:api/SitesApi~sitesDeleteDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesDeleteDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteDeploymentSlot operation.
     * @callback module:api/SitesApi~sitesDeleteDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesDeleteDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteInstanceDeployment operation.
     * @callback module:api/SitesApi~sitesDeleteInstanceDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteInstanceDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteInstanceDeployment(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteInstanceDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteInstanceDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesDeleteInstanceDeployment");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesDeleteInstanceDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteInstanceDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteInstanceDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteInstanceDeploymentSlot operation.
     * @callback module:api/SitesApi~sitesDeleteInstanceDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteInstanceDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteInstanceDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteInstanceDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesDeleteInstanceDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteInstanceDeploymentSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesDeleteInstanceDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteInstanceDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteInstanceDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSite operation.
     * @callback module:api/SitesApi~sitesDeleteSiteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [deleteMetrics] If true, web app metrics are also deleted
     * @param {String} [deleteEmptyServerFarm] If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
     * @param {String} [skipDnsRegistration] If true, DNS registration is skipped
     * @param {String} [deleteAllSlots] If true, all slots associated with web app are also deleted
     * @param {module:api/SitesApi~sitesDeleteSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSite(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'deleteMetrics': opts['deleteMetrics'],
        'deleteEmptyServerFarm': opts['deleteEmptyServerFarm'],
        'skipDnsRegistration': opts['skipDnsRegistration'],
        'deleteAllSlots': opts['deleteAllSlots'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteHostNameBinding operation.
     * @callback module:api/SitesApi~sitesDeleteSiteHostNameBindingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a host name binding
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} hostName Name of host
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteHostNameBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteHostNameBinding");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteHostNameBinding");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling sitesDeleteSiteHostNameBinding");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteHostNameBinding");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteHostNameBinding");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteHostNameBindingSlot operation.
     * @callback module:api/SitesApi~sitesDeleteSiteHostNameBindingSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a host name binding
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} hostName Name of host
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteHostNameBindingSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteHostNameBindingSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteHostNameBindingSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteSiteHostNameBindingSlot");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling sitesDeleteSiteHostNameBindingSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteHostNameBindingSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteHostNameBindingSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSitePremierAddOn operation.
     * @callback module:api/SitesApi~sitesDeleteSitePremierAddOnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} premierAddOnName 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSitePremierAddOnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSitePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSitePremierAddOn");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSitePremierAddOn");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling sitesDeleteSitePremierAddOn");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSitePremierAddOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSitePremierAddOn");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSitePremierAddOnSlot operation.
     * @callback module:api/SitesApi~sitesDeleteSitePremierAddOnSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} premierAddOnName 
     * @param {String} slot 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSitePremierAddOnSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSitePremierAddOnSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSitePremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling sitesDeleteSitePremierAddOnSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteSitePremierAddOnSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSitePremierAddOnSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSitePremierAddOnSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteRelayServiceConnection operation.
     * @callback module:api/SitesApi~sitesDeleteSiteRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesDeleteSiteRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteRelayServiceConnectionSlot operation.
     * @callback module:api/SitesApi~sitesDeleteSiteRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesDeleteSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteSlot operation.
     * @callback module:api/SitesApi~sitesDeleteSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [deleteMetrics] If true, web app metrics are also deleted
     * @param {String} [deleteEmptyServerFarm] If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted
     * @param {String} [skipDnsRegistration] If true, DNS registration is skipped
     * @param {String} [deleteAllSlots] If true, all slots associated with web app are also deleted
     * @param {module:api/SitesApi~sitesDeleteSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'deleteMetrics': opts['deleteMetrics'],
        'deleteEmptyServerFarm': opts['deleteEmptyServerFarm'],
        'skipDnsRegistration': opts['skipDnsRegistration'],
        'deleteAllSlots': opts['deleteAllSlots'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteSourceControl operation.
     * @callback module:api/SitesApi~sitesDeleteSiteSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteSourceControlSlot operation.
     * @callback module:api/SitesApi~sitesDeleteSiteSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteSiteSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteVNETConnection operation.
     * @callback module:api/SitesApi~sitesDeleteSiteVNETConnectionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteVNETConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteVNETConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteVNETConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesDeleteSiteVNETConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteVNETConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteVNETConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDeleteSiteVNETConnectionSlot operation.
     * @callback module:api/SitesApi~sitesDeleteSiteVNETConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesDeleteSiteVNETConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesDeleteSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteVNETConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDeleteSiteVNETConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesDeleteSiteVNETConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDeleteSiteVNETConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteVNETConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteVNETConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDiscoverSiteRestore operation.
     * @callback module:api/SitesApi~sitesDiscoverSiteRestoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers existing web app backups that can be restored
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request
     * @param {module:api/SitesApi~sitesDiscoverSiteRestoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreRequest}
     */
    sitesDiscoverSiteRestore(resourceGroupName, name, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDiscoverSiteRestore");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDiscoverSiteRestore");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDiscoverSiteRestore");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDiscoverSiteRestore");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesDiscoverSiteRestore");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestoreRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesDiscoverSiteRestoreSlot operation.
     * @callback module:api/SitesApi~sitesDiscoverSiteRestoreSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers existing web app backups that can be restored
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request
     * @param {module:api/SitesApi~sitesDiscoverSiteRestoreSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreRequest}
     */
    sitesDiscoverSiteRestoreSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesDiscoverSiteRestoreSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesDiscoverSiteRestoreSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesDiscoverSiteRestoreSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesDiscoverSiteRestoreSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesDiscoverSiteRestoreSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesDiscoverSiteRestoreSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestoreRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGenerateNewSitePublishingPassword operation.
     * @callback module:api/SitesApi~sitesGenerateNewSitePublishingPasswordCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates new random app publishing password
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGenerateNewSitePublishingPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGenerateNewSitePublishingPassword(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGenerateNewSitePublishingPassword");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGenerateNewSitePublishingPassword");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGenerateNewSitePublishingPassword");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGenerateNewSitePublishingPassword");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGenerateNewSitePublishingPasswordSlot operation.
     * @callback module:api/SitesApi~sitesGenerateNewSitePublishingPasswordSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates new random app publishing password
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGenerateNewSitePublishingPasswordSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGenerateNewSitePublishingPasswordSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGenerateNewSitePublishingPasswordSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGenerateNewSitePublishingPasswordSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetDeletedSites operation.
     * @callback module:api/SitesApi~sitesGetDeletedSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedSiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets deleted web apps in subscription
     * @param {String} resourceGroupName Name of resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] Additional web app properties included in the response
     * @param {String} [includeSiteTypes] Types of apps included in the response
     * @param {module:api/SitesApi~sitesGetDeletedSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedSiteCollection}
     */
    sitesGetDeletedSites(resourceGroupName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetDeletedSites");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetDeletedSites");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetDeletedSites");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'includeSiteTypes': opts['includeSiteTypes'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DeletedSiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetDeployment operation.
     * @callback module:api/SitesApi~sitesGetDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesGetDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesGetDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetDeploymentSlot operation.
     * @callback module:api/SitesApi~sitesGetDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesGetDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesGetDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetDeployments operation.
     * @callback module:api/SitesApi~sitesGetDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployments
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentCollection}
     */
    sitesGetDeployments(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetDeployments");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetDeployments");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetDeployments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetDeployments");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DeploymentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetDeploymentsSlot operation.
     * @callback module:api/SitesApi~sitesGetDeploymentsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployments
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetDeploymentsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentCollection}
     */
    sitesGetDeploymentsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetDeploymentsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetDeploymentsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetDeploymentsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetDeploymentsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetDeploymentsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DeploymentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetInstanceDeployment operation.
     * @callback module:api/SitesApi~sitesGetInstanceDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetInstanceDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesGetInstanceDeployment(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeployment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetInstanceDeployment");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesGetInstanceDeployment");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeployment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeployment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeployment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetInstanceDeploymentSlot operation.
     * @callback module:api/SitesApi~sitesGetInstanceDeploymentSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the deployment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} id Id of the deployment
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetInstanceDeploymentSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    sitesGetInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeploymentSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetInstanceDeploymentSlot");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sitesGetInstanceDeploymentSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetInstanceDeploymentSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeploymentSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeploymentSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeploymentSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'id': id,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetInstanceDeployments operation.
     * @callback module:api/SitesApi~sitesGetInstanceDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployments
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetInstanceDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentCollection}
     */
    sitesGetInstanceDeployments(resourceGroupName, name, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeployments");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetInstanceDeployments");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeployments");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeployments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeployments");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DeploymentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetInstanceDeploymentsSlot operation.
     * @callback module:api/SitesApi~sitesGetInstanceDeploymentsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List deployments
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} instanceId Id of web app instance
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetInstanceDeploymentsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentCollection}
     */
    sitesGetInstanceDeploymentsSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeploymentsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetInstanceDeploymentsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetInstanceDeploymentsSlot");
      }
      // verify the required parameter 'instanceId' is set
      if (instanceId === undefined || instanceId === null) {
        throw new Error("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeploymentsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeploymentsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeploymentsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'instanceId': instanceId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = DeploymentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSite operation.
     * @callback module:api/SitesApi~sitesGetSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] Additional web app properties included in the response
     * @param {module:api/SitesApi~sitesGetSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    sitesGetSite(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteBackupConfiguration operation.
     * @callback module:api/SitesApi~sitesGetSiteBackupConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the backup configuration for a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteBackupConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    sitesGetSiteBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteBackupConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteBackupConfigurationSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteBackupConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the backup configuration for a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteBackupConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    sitesGetSiteBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteBackupStatus operation.
     * @callback module:api/SitesApi~sitesGetSiteBackupStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets status of a web app backup that may be in progress.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteBackupStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesGetSiteBackupStatus(resourceGroupName, name, backupId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatus");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteBackupStatus");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatus");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatus");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteBackupStatusSecrets operation.
     * @callback module:api/SitesApi~sitesGetSiteBackupStatusSecretsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request
     * @param {module:api/SitesApi~sitesGetSiteBackupStatusSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesGetSiteBackupStatusSecrets(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatusSecrets");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteBackupStatusSecrets");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatusSecrets");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatusSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatusSecrets");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesGetSiteBackupStatusSecrets");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteBackupStatusSecretsSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteBackupStatusSecretsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request
     * @param {module:api/SitesApi~sitesGetSiteBackupStatusSecretsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesGetSiteBackupStatusSecretsSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatusSecretsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteBackupStatusSecretsSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatusSecretsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteBackupStatusSecretsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatusSecretsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatusSecretsSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesGetSiteBackupStatusSecretsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteBackupStatusSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteBackupStatusSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets status of a web app backup that may be in progress.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteBackupStatusSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItem}
     */
    sitesGetSiteBackupStatusSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatusSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteBackupStatusSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatusSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteBackupStatusSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatusSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatusSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupItem;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteConfig operation.
     * @callback module:api/SitesApi~sitesGetSiteConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration of the web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfig}
     */
    sitesGetSiteConfig(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteConfigSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the configuration of the web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfig}
     */
    sitesGetSiteConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteHostNameBinding operation.
     * @callback module:api/SitesApi~sitesGetSiteHostNameBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get web app binding for a hostname
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} hostName Name of host
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteHostNameBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    sitesGetSiteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBinding");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteHostNameBinding");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling sitesGetSiteHostNameBinding");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBinding");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBinding");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteHostNameBindingSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteHostNameBindingSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBinding} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get web app binding for a hostname
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} hostName Name of host
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteHostNameBindingSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBinding}
     */
    sitesGetSiteHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBindingSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteHostNameBindingSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteHostNameBindingSlot");
      }
      // verify the required parameter 'hostName' is set
      if (hostName === undefined || hostName === null) {
        throw new Error("Missing the required parameter 'hostName' when calling sitesGetSiteHostNameBindingSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBindingSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBindingSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'hostName': hostName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostNameBinding;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteHostNameBindings operation.
     * @callback module:api/SitesApi~sitesGetSiteHostNameBindingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBindingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get web app hostname bindings
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteHostNameBindingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBindingCollection}
     */
    sitesGetSiteHostNameBindings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBindings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteHostNameBindings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBindings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBindings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = HostNameBindingCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteHostNameBindingsSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteHostNameBindingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostNameBindingCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get web app hostname bindings
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteHostNameBindingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostNameBindingCollection}
     */
    sitesGetSiteHostNameBindingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBindingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteHostNameBindingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteHostNameBindingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBindingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBindingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = HostNameBindingCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteInstanceIdentifiers operation.
     * @callback module:api/SitesApi~sitesGetSiteInstanceIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all instance of a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteInstanceIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteInstanceCollection}
     */
    sitesGetSiteInstanceIdentifiers(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteInstanceIdentifiers");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteInstanceIdentifiers");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteInstanceIdentifiers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteInstanceIdentifiers");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteInstanceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteInstanceIdentifiersSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteInstanceIdentifiersSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteInstanceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all instance of a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteInstanceIdentifiersSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteInstanceCollection}
     */
    sitesGetSiteInstanceIdentifiersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteInstanceIdentifiersSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteInstanceIdentifiersSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteInstanceIdentifiersSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteInstanceIdentifiersSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteInstanceIdentifiersSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteInstanceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteLogsConfig operation.
     * @callback module:api/SitesApi~sitesGetSiteLogsConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web app logs configuration
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteLogsConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    sitesGetSiteLogsConfig(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteLogsConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteLogsConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteLogsConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteLogsConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteLogsConfigSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteLogsConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web app logs configuration
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteLogsConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    sitesGetSiteLogsConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteLogsConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteLogsConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteLogsConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteLogsConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteLogsConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteMetricDefinitions operation.
     * @callback module:api/SitesApi~sitesGetSiteMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metric definitions for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionCollection}
     */
    sitesGetSiteMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetricDefinitions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteMetricDefinitions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetricDefinitions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = MetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteMetricDefinitionsSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteMetricDefinitionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metric definitions for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteMetricDefinitionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionCollection}
     */
    sitesGetSiteMetricDefinitionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetricDefinitionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteMetricDefinitionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteMetricDefinitionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetricDefinitionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetricDefinitionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = MetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteMetrics operation.
     * @callback module:api/SitesApi~sitesGetSiteMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metrics for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] If true, metric details are included in response
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/SitesApi~sitesGetSiteMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricCollection}
     */
    sitesGetSiteMetrics(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResourceMetricCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteMetricsSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteMetricsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metrics for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] If true, metric details are included in response
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/SitesApi~sitesGetSiteMetricsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricCollection}
     */
    sitesGetSiteMetricsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetricsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteMetricsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteMetricsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetricsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetricsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResourceMetricCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteNetworkFeatures operation.
     * @callback module:api/SitesApi~sitesGetSiteNetworkFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a view of all network features in use on this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} view The type of view. This can either be \"summary\" or \"detailed\".
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteNetworkFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatures}
     */
    sitesGetSiteNetworkFeatures(resourceGroupName, name, view, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteNetworkFeatures");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteNetworkFeatures");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling sitesGetSiteNetworkFeatures");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteNetworkFeatures");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteNetworkFeatures");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'view': view,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = NetworkFeatures;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteNetworkFeaturesSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteNetworkFeaturesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a view of all network features in use on this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} view The type of view. This can either be \"summary\" or \"detailed\".
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteNetworkFeaturesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkFeatures}
     */
    sitesGetSiteNetworkFeaturesSlot(resourceGroupName, name, view, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteNetworkFeaturesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteNetworkFeaturesSlot");
      }
      // verify the required parameter 'view' is set
      if (view === undefined || view === null) {
        throw new Error("Missing the required parameter 'view' when calling sitesGetSiteNetworkFeaturesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteNetworkFeaturesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteNetworkFeaturesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteNetworkFeaturesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'view': view,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = NetworkFeatures;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteOperation operation.
     * @callback module:api/SitesApi~sitesGetSiteOperationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the operation for a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} operationId Id of an operation
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSiteOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteOperation");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling sitesGetSiteOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteOperationSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteOperationSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the operation for a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} operationId Id of an operation
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteOperationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSiteOperationSlot(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteOperationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteOperationSlot");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling sitesGetSiteOperationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteOperationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteOperationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteOperationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSitePremierAddOn operation.
     * @callback module:api/SitesApi~sitesGetSitePremierAddOnCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} premierAddOnName 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSitePremierAddOnCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSitePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSitePremierAddOn");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSitePremierAddOn");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling sitesGetSitePremierAddOn");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSitePremierAddOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSitePremierAddOn");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSitePremierAddOnSlot operation.
     * @callback module:api/SitesApi~sitesGetSitePremierAddOnSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} premierAddOnName 
     * @param {String} slot 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSitePremierAddOnSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSitePremierAddOnSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSitePremierAddOnSlot");
      }
      // verify the required parameter 'premierAddOnName' is set
      if (premierAddOnName === undefined || premierAddOnName === null) {
        throw new Error("Missing the required parameter 'premierAddOnName' when calling sitesGetSitePremierAddOnSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSitePremierAddOnSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSitePremierAddOnSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSitePremierAddOnSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'premierAddOnName': premierAddOnName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteRelayServiceConnection operation.
     * @callback module:api/SitesApi~sitesGetSiteRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesGetSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesGetSiteRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteRelayServiceConnectionSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesGetSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesGetSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] Additional web app properties included in the response
     * @param {module:api/SitesApi~sitesGetSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    sitesGetSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteSlots operation.
     * @callback module:api/SitesApi~sitesGetSiteSlotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the slots for a web apps
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] List of app properties to include in the response
     * @param {module:api/SitesApi~sitesGetSiteSlotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    sitesGetSiteSlots(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSlots");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteSlots");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSlots");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteSlots");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteSnapshots operation.
     * @callback module:api/SitesApi~sitesGetSiteSnapshotsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Snapshots to the user.
     * @param {String} resourceGroupName Webspace
     * @param {String} name Website Name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteSnapshotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSiteSnapshots(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSnapshots");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteSnapshots");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSnapshots");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteSnapshots");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteSnapshotsSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteSnapshotsSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all Snapshots to the user.
     * @param {String} resourceGroupName Webspace
     * @param {String} name Website Name
     * @param {String} slot Website Slot
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteSnapshotsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSiteSnapshotsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSnapshotsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteSnapshotsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteSnapshotsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSnapshotsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteSnapshotsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteSourceControl operation.
     * @callback module:api/SitesApi~sitesGetSiteSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    sitesGetSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteSourceControlSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    sitesGetSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteUsages operation.
     * @callback module:api/SitesApi~sitesGetSiteUsagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CsmUsageQuotaCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the quota usage numbers for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/SitesApi~sitesGetSiteUsagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CsmUsageQuotaCollection}
     */
    sitesGetSiteUsages(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteUsages");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteUsages");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteUsages");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteUsages");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CsmUsageQuotaCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteUsagesSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteUsagesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CsmUsageQuotaCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the quota usage numbers for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/SitesApi~sitesGetSiteUsagesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CsmUsageQuotaCollection}
     */
    sitesGetSiteUsagesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteUsagesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteUsagesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteUsagesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteUsagesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteUsagesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CsmUsageQuotaCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteVNETConnection operation.
     * @callback module:api/SitesApi~sitesGetSiteVNETConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteVNETConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetInfo}
     */
    sitesGetSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteVNETConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesGetSiteVNETConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteVNETConnectionSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteVNETConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteVNETConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetInfo}
     */
    sitesGetSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteVNETConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesGetSiteVNETConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteVNETConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteVNETConnections operation.
     * @callback module:api/SitesApi~sitesGetSiteVNETConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VnetInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteVNETConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VnetInfo>}
     */
    sitesGetSiteVNETConnections(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnections");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteVNETConnections");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnections");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [VnetInfo];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteVNETConnectionsSlot operation.
     * @callback module:api/SitesApi~sitesGetSiteVNETConnectionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VnetInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteVNETConnectionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VnetInfo>}
     */
    sitesGetSiteVNETConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnectionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteVNETConnectionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteVNETConnectionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnectionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnectionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [VnetInfo];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteVnetGateway operation.
     * @callback module:api/SitesApi~sitesGetSiteVnetGatewayCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} gatewayName The name of the gateway. The only gateway that exists presently is \"primary\"
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteVnetGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSiteVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVnetGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteVnetGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesGetSiteVnetGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling sitesGetSiteVnetGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVnetGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteVnetGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSiteVnetGatewaySlot operation.
     * @callback module:api/SitesApi~sitesGetSiteVnetGatewaySlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} gatewayName The name of the gateway. The only gateway that exists presently is \"primary\"
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSiteVnetGatewaySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesGetSiteVnetGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVnetGatewaySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSiteVnetGatewaySlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesGetSiteVnetGatewaySlot");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling sitesGetSiteVnetGatewaySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSiteVnetGatewaySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVnetGatewaySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSiteVnetGatewaySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSites operation.
     * @callback module:api/SitesApi~sitesGetSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web apps for a subscription in the specified resource group
     * @param {String} resourceGroupName Name of resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] Additional web app properties included in the response
     * @param {String} [includeSiteTypes] Types of apps included in the response
     * @param {Boolean} [includeSlots] Whether or not to include deployments slots in results
     * @param {module:api/SitesApi~sitesGetSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    sitesGetSites(resourceGroupName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSites");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSites");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSites");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'includeSiteTypes': opts['includeSiteTypes'],
        'includeSlots': opts['includeSlots'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSlotConfigNames operation.
     * @callback module:api/SitesApi~sitesGetSlotConfigNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotConfigNamesResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesGetSlotConfigNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotConfigNamesResource}
     */
    sitesGetSlotConfigNames(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSlotConfigNames");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSlotConfigNames");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSlotConfigNames");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSlotConfigNames");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SlotConfigNamesResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSlotsDifferencesFromProduction operation.
     * @callback module:api/SitesApi~sitesGetSlotsDifferencesFromProductionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotDifferenceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the difference in configuration settings between two web app slots
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity Request body that contains the target slot name
     * @param {module:api/SitesApi~sitesGetSlotsDifferencesFromProductionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotDifferenceCollection}
     */
    sitesGetSlotsDifferencesFromProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSlotsDifferencesFromProduction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSlotsDifferencesFromProduction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSlotsDifferencesFromProduction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSlotsDifferencesFromProduction");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling sitesGetSlotsDifferencesFromProduction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json'];
      let returnType = SlotDifferenceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGetSlotsDifferencesSlot operation.
     * @callback module:api/SitesApi~sitesGetSlotsDifferencesSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotDifferenceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the difference in configuration settings between two web app slots
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of the source slot
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity Request body that contains the target slot name
     * @param {module:api/SitesApi~sitesGetSlotsDifferencesSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotDifferenceCollection}
     */
    sitesGetSlotsDifferencesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesGetSlotsDifferencesSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesGetSlotsDifferencesSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesGetSlotsDifferencesSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesGetSlotsDifferencesSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesGetSlotsDifferencesSlot");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling sitesGetSlotsDifferencesSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json'];
      let returnType = SlotDifferenceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesIsSiteCloneable operation.
     * @callback module:api/SitesApi~sitesIsSiteCloneableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCloneability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web app or modifies an existing web app.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesIsSiteCloneableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCloneability}
     */
    sitesIsSiteCloneable(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesIsSiteCloneable");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesIsSiteCloneable");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesIsSiteCloneable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesIsSiteCloneable");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteCloneability;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesIsSiteCloneableSlot operation.
     * @callback module:api/SitesApi~sitesIsSiteCloneableSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCloneability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new web app or modifies an existing web app.
     * @param {String} resourceGroupName Name of the resource group
     * @param {String} name Name of the web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesIsSiteCloneableSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCloneability}
     */
    sitesIsSiteCloneableSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesIsSiteCloneableSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesIsSiteCloneableSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesIsSiteCloneableSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesIsSiteCloneableSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesIsSiteCloneableSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteCloneability;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteAppSettings operation.
     * @callback module:api/SitesApi~sitesListSiteAppSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the application settings of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteAppSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesListSiteAppSettings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAppSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteAppSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteAppSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteAppSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteAppSettingsSlot operation.
     * @callback module:api/SitesApi~sitesListSiteAppSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the application settings of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteAppSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesListSiteAppSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAppSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteAppSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSiteAppSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteAppSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteAppSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteAuthSettings operation.
     * @callback module:api/SitesApi~sitesListSiteAuthSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Authentication / Authorization settings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteAuthSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    sitesListSiteAuthSettings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAuthSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteAuthSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteAuthSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteAuthSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteAuthSettingsSlot operation.
     * @callback module:api/SitesApi~sitesListSiteAuthSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Authentication / Authorization settings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteAuthSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    sitesListSiteAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAuthSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteAuthSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSiteAuthSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteAuthSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteAuthSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteBackups operation.
     * @callback module:api/SitesApi~sitesListSiteBackupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available backups for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteBackupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItemCollection}
     */
    sitesListSiteBackups(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteBackups");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteBackups");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteBackups");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteBackups");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = BackupItemCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteBackupsSlot operation.
     * @callback module:api/SitesApi~sitesListSiteBackupsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupItemCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all available backups for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteBackupsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupItemCollection}
     */
    sitesListSiteBackupsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteBackupsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteBackupsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSiteBackupsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteBackupsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteBackupsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = BackupItemCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteConnectionStrings operation.
     * @callback module:api/SitesApi~sitesListSiteConnectionStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the connection strings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteConnectionStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    sitesListSiteConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteConnectionStrings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteConnectionStrings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteConnectionStrings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteConnectionStrings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteConnectionStringsSlot operation.
     * @callback module:api/SitesApi~sitesListSiteConnectionStringsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the connection strings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteConnectionStringsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    sitesListSiteConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteConnectionStringsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteConnectionStringsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSiteConnectionStringsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteConnectionStringsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteConnectionStringsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteMetadata operation.
     * @callback module:api/SitesApi~sitesListSiteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web app meta data.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesListSiteMetadata(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteMetadata");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteMetadata");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteMetadata");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteMetadataSlot operation.
     * @callback module:api/SitesApi~sitesListSiteMetadataSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web app meta data.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteMetadataSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesListSiteMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteMetadataSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteMetadataSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSiteMetadataSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteMetadataSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteMetadataSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSitePremierAddOns operation.
     * @callback module:api/SitesApi~sitesListSitePremierAddOnsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSitePremierAddOnsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesListSitePremierAddOns(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSitePremierAddOns");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSitePremierAddOns");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSitePremierAddOns");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSitePremierAddOns");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSitePremierAddOnsSlot operation.
     * @callback module:api/SitesApi~sitesListSitePremierAddOnsSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} slot 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSitePremierAddOnsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesListSitePremierAddOnsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSitePremierAddOnsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSitePremierAddOnsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSitePremierAddOnsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSitePremierAddOnsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSitePremierAddOnsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSitePublishingCredentials operation.
     * @callback module:api/SitesApi~sitesListSitePublishingCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web app publishing credentials
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSitePublishingCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    sitesListSitePublishingCredentials(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingCredentials");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSitePublishingCredentials");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingCredentials");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = User;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSitePublishingCredentialsSlot operation.
     * @callback module:api/SitesApi~sitesListSitePublishingCredentialsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the web app publishing credentials
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSitePublishingCredentialsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    sitesListSitePublishingCredentialsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingCredentialsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSitePublishingCredentialsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSitePublishingCredentialsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingCredentialsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingCredentialsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = User;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSitePublishingProfileXml operation.
     * @callback module:api/SitesApi~sitesListSitePublishingProfileXmlCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the publishing profile for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmPublishingProfileOptions} options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
     * @param {module:api/SitesApi~sitesListSitePublishingProfileXmlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    sitesListSitePublishingProfileXml(resourceGroupName, name, subscriptionId, apiVersion, options, callback) {
      let postBody = options;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingProfileXml");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSitePublishingProfileXml");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingProfileXml");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingProfileXml");
      }
      // verify the required parameter 'options' is set
      if (options === undefined || options === null) {
        throw new Error("Missing the required parameter 'options' when calling sitesListSitePublishingProfileXml");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSitePublishingProfileXmlSlot operation.
     * @callback module:api/SitesApi~sitesListSitePublishingProfileXmlSlotCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the publishing profile for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmPublishingProfileOptions} options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
     * @param {module:api/SitesApi~sitesListSitePublishingProfileXmlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    sitesListSitePublishingProfileXmlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, options, callback) {
      let postBody = options;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingProfileXmlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSitePublishingProfileXmlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSitePublishingProfileXmlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingProfileXmlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingProfileXmlSlot");
      }
      // verify the required parameter 'options' is set
      if (options === undefined || options === null) {
        throw new Error("Missing the required parameter 'options' when calling sitesListSitePublishingProfileXmlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteRelayServiceConnections operation.
     * @callback module:api/SitesApi~sitesListSiteRelayServiceConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteRelayServiceConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesListSiteRelayServiceConnections(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteRelayServiceConnections");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteRelayServiceConnections");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteRelayServiceConnections");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteRelayServiceConnections");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesListSiteRelayServiceConnectionsSlot operation.
     * @callback module:api/SitesApi~sitesListSiteRelayServiceConnectionsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesListSiteRelayServiceConnectionsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesListSiteRelayServiceConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesListSiteRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesListSiteRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesListSiteRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesListSiteRelayServiceConnectionsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesListSiteRelayServiceConnectionsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesRecoverSite operation.
     * @callback module:api/SitesApi~sitesRecoverSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers a deleted web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSiteRecoveryEntity} recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
     * @param {module:api/SitesApi~sitesRecoverSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    sitesRecoverSite(resourceGroupName, name, subscriptionId, apiVersion, recoveryEntity, callback) {
      let postBody = recoveryEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesRecoverSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesRecoverSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesRecoverSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesRecoverSite");
      }
      // verify the required parameter 'recoveryEntity' is set
      if (recoveryEntity === undefined || recoveryEntity === null) {
        throw new Error("Missing the required parameter 'recoveryEntity' when calling sitesRecoverSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesRecoverSiteSlot operation.
     * @callback module:api/SitesApi~sitesRecoverSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recovers a deleted web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSiteRecoveryEntity} recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API.
     * @param {module:api/SitesApi~sitesRecoverSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    sitesRecoverSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, recoveryEntity, callback) {
      let postBody = recoveryEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesRecoverSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesRecoverSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesRecoverSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesRecoverSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesRecoverSiteSlot");
      }
      // verify the required parameter 'recoveryEntity' is set
      if (recoveryEntity === undefined || recoveryEntity === null) {
        throw new Error("Missing the required parameter 'recoveryEntity' when calling sitesRecoverSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesResetProductionSlotConfig operation.
     * @callback module:api/SitesApi~sitesResetProductionSlotConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesResetProductionSlotConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesResetProductionSlotConfig(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesResetProductionSlotConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesResetProductionSlotConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesResetProductionSlotConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesResetProductionSlotConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesResetSlotConfigSlot operation.
     * @callback module:api/SitesApi~sitesResetSlotConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesResetSlotConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesResetSlotConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesResetSlotConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesResetSlotConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesResetSlotConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesResetSlotConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesResetSlotConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesRestartSite operation.
     * @callback module:api/SitesApi~sitesRestartSiteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [softRestart] Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
     * @param {Boolean} [synchronous] If true then the API will block until the app has been restarted
     * @param {module:api/SitesApi~sitesRestartSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesRestartSite(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesRestartSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesRestartSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesRestartSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesRestartSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'softRestart': opts['softRestart'],
        'synchronous': opts['synchronous'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesRestartSiteSlot operation.
     * @callback module:api/SitesApi~sitesRestartSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [softRestart] Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app
     * @param {Boolean} [synchronous] If true then the API will block until the app has been restarted
     * @param {module:api/SitesApi~sitesRestartSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesRestartSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesRestartSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesRestartSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesRestartSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesRestartSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesRestartSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'softRestart': opts['softRestart'],
        'synchronous': opts['synchronous'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesRestoreSite operation.
     * @callback module:api/SitesApi~sitesRestoreSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup to restore
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request
     * @param {module:api/SitesApi~sitesRestoreSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreResponse}
     */
    sitesRestoreSite(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesRestoreSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesRestoreSite");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesRestoreSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesRestoreSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesRestoreSite");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesRestoreSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestoreResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesRestoreSiteSlot operation.
     * @callback module:api/SitesApi~sitesRestoreSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RestoreResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restores a web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} backupId Id of backup to restore
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RestoreRequest} request Information on restore request
     * @param {module:api/SitesApi~sitesRestoreSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RestoreResponse}
     */
    sitesRestoreSiteSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesRestoreSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesRestoreSiteSlot");
      }
      // verify the required parameter 'backupId' is set
      if (backupId === undefined || backupId === null) {
        throw new Error("Missing the required parameter 'backupId' when calling sitesRestoreSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesRestoreSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesRestoreSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesRestoreSiteSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesRestoreSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'backupId': backupId,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RestoreResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesStartSite operation.
     * @callback module:api/SitesApi~sitesStartSiteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesStartSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesStartSite(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesStartSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesStartSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesStartSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesStartSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesStartSiteSlot operation.
     * @callback module:api/SitesApi~sitesStartSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesStartSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesStartSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesStartSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesStartSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesStartSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesStartSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesStartSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesStopSite operation.
     * @callback module:api/SitesApi~sitesStopSiteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesStopSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesStopSite(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesStopSite");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesStopSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesStopSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesStopSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesStopSiteSlot operation.
     * @callback module:api/SitesApi~sitesStopSiteSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesStopSiteSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesStopSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesStopSiteSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesStopSiteSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesStopSiteSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesStopSiteSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesStopSiteSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesSwapSlotWithProduction operation.
     * @callback module:api/SitesApi~sitesSwapSlotWithProductionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps web app slots
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity Request body that contains the target slot name
     * @param {module:api/SitesApi~sitesSwapSlotWithProductionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesSwapSlotWithProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesSwapSlotWithProduction");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesSwapSlotWithProduction");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesSwapSlotWithProduction");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesSwapSlotWithProduction");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling sitesSwapSlotWithProduction");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesSwapSlotsSlot operation.
     * @callback module:api/SitesApi~sitesSwapSlotsSlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Swaps web app slots
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of source slot for the swap
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/CsmSlotEntity} slotSwapEntity Request body that contains the target slot name
     * @param {module:api/SitesApi~sitesSwapSlotsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesSwapSlotsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, callback) {
      let postBody = slotSwapEntity;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesSwapSlotsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesSwapSlotsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesSwapSlotsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesSwapSlotsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesSwapSlotsSlot");
      }
      // verify the required parameter 'slotSwapEntity' is set
      if (slotSwapEntity === undefined || slotSwapEntity === null) {
        throw new Error("Missing the required parameter 'slotSwapEntity' when calling sitesSwapSlotsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesSyncSiteRepository operation.
     * @callback module:api/SitesApi~sitesSyncSiteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesSyncSiteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesSyncSiteRepository(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesSyncSiteRepository");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesSyncSiteRepository");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesSyncSiteRepository");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesSyncSiteRepository");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesSyncSiteRepositorySlot operation.
     * @callback module:api/SitesApi~sitesSyncSiteRepositorySlotCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} resourceGroupName 
     * @param {String} name 
     * @param {String} slot 
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/SitesApi~sitesSyncSiteRepositorySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitesSyncSiteRepositorySlot(resourceGroupName, name, slot, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesSyncSiteRepositorySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesSyncSiteRepositorySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesSyncSiteRepositorySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesSyncSiteRepositorySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesSyncSiteRepositorySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteAppSettings operation.
     * @callback module:api/SitesApi~sitesUpdateSiteAppSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the application settings of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} appSettings Application settings of web app
     * @param {module:api/SitesApi~sitesUpdateSiteAppSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesUpdateSiteAppSettings(resourceGroupName, name, subscriptionId, apiVersion, appSettings, callback) {
      let postBody = appSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAppSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteAppSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAppSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAppSettings");
      }
      // verify the required parameter 'appSettings' is set
      if (appSettings === undefined || appSettings === null) {
        throw new Error("Missing the required parameter 'appSettings' when calling sitesUpdateSiteAppSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteAppSettingsSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteAppSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the application settings of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} appSettings Application settings of web app
     * @param {module:api/SitesApi~sitesUpdateSiteAppSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesUpdateSiteAppSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, callback) {
      let postBody = appSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAppSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteAppSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteAppSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAppSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAppSettingsSlot");
      }
      // verify the required parameter 'appSettings' is set
      if (appSettings === undefined || appSettings === null) {
        throw new Error("Missing the required parameter 'appSettings' when calling sitesUpdateSiteAppSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteAuthSettings operation.
     * @callback module:api/SitesApi~sitesUpdateSiteAuthSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Authentication / Authorization settings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteAuthSettings} siteAuthSettings Auth settings associated with web app
     * @param {module:api/SitesApi~sitesUpdateSiteAuthSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    sitesUpdateSiteAuthSettings(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, callback) {
      let postBody = siteAuthSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAuthSettings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteAuthSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAuthSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAuthSettings");
      }
      // verify the required parameter 'siteAuthSettings' is set
      if (siteAuthSettings === undefined || siteAuthSettings === null) {
        throw new Error("Missing the required parameter 'siteAuthSettings' when calling sitesUpdateSiteAuthSettings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteAuthSettingsSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteAuthSettingsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteAuthSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Authentication / Authorization settings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteAuthSettings} siteAuthSettings Auth settings associated with web app
     * @param {module:api/SitesApi~sitesUpdateSiteAuthSettingsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteAuthSettings}
     */
    sitesUpdateSiteAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, callback) {
      let postBody = siteAuthSettings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAuthSettingsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteAuthSettingsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteAuthSettingsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAuthSettingsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAuthSettingsSlot");
      }
      // verify the required parameter 'siteAuthSettings' is set
      if (siteAuthSettings === undefined || siteAuthSettings === null) {
        throw new Error("Missing the required parameter 'siteAuthSettings' when calling sitesUpdateSiteAuthSettingsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteAuthSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteBackupConfiguration operation.
     * @callback module:api/SitesApi~sitesUpdateSiteBackupConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates backup configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request
     * @param {module:api/SitesApi~sitesUpdateSiteBackupConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    sitesUpdateSiteBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteBackupConfiguration");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteBackupConfiguration");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteBackupConfiguration");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteBackupConfiguration");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesUpdateSiteBackupConfiguration");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteBackupConfigurationSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteBackupConfigurationSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BackupRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates backup configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/BackupRequest} request Information on backup request
     * @param {module:api/SitesApi~sitesUpdateSiteBackupConfigurationSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BackupRequest}
     */
    sitesUpdateSiteBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteBackupConfigurationSlot");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling sitesUpdateSiteBackupConfigurationSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = BackupRequest;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteConfig operation.
     * @callback module:api/SitesApi~sitesUpdateSiteConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfig} siteConfig Request body that contains the configuration setting for the web app
     * @param {module:api/SitesApi~sitesUpdateSiteConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfig}
     */
    sitesUpdateSiteConfig(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConfig");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling sitesUpdateSiteConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteConfigSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteConfig} siteConfig Request body that contains the configuration setting for the web app
     * @param {module:api/SitesApi~sitesUpdateSiteConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteConfig}
     */
    sitesUpdateSiteConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, callback) {
      let postBody = siteConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConfigSlot");
      }
      // verify the required parameter 'siteConfig' is set
      if (siteConfig === undefined || siteConfig === null) {
        throw new Error("Missing the required parameter 'siteConfig' when calling sitesUpdateSiteConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteConnectionStrings operation.
     * @callback module:api/SitesApi~sitesUpdateSiteConnectionStringsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the connection strings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/ConnectionStringDictionary} connectionStrings Connection strings associated with web app
     * @param {module:api/SitesApi~sitesUpdateSiteConnectionStringsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    sitesUpdateSiteConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, callback) {
      let postBody = connectionStrings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConnectionStrings");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteConnectionStrings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConnectionStrings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConnectionStrings");
      }
      // verify the required parameter 'connectionStrings' is set
      if (connectionStrings === undefined || connectionStrings === null) {
        throw new Error("Missing the required parameter 'connectionStrings' when calling sitesUpdateSiteConnectionStrings");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteConnectionStringsSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteConnectionStringsSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionStringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the connection strings associated with web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/ConnectionStringDictionary} connectionStrings Connection strings associated with web app
     * @param {module:api/SitesApi~sitesUpdateSiteConnectionStringsSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionStringDictionary}
     */
    sitesUpdateSiteConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, callback) {
      let postBody = connectionStrings;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConnectionStringsSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteConnectionStringsSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteConnectionStringsSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConnectionStringsSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConnectionStringsSlot");
      }
      // verify the required parameter 'connectionStrings' is set
      if (connectionStrings === undefined || connectionStrings === null) {
        throw new Error("Missing the required parameter 'connectionStrings' when calling sitesUpdateSiteConnectionStringsSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ConnectionStringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteLogsConfig operation.
     * @callback module:api/SitesApi~sitesUpdateSiteLogsConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the meta data for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteLogsConfig} siteLogsConfig Site logs configuration
     * @param {module:api/SitesApi~sitesUpdateSiteLogsConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    sitesUpdateSiteLogsConfig(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, callback) {
      let postBody = siteLogsConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteLogsConfig");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteLogsConfig");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteLogsConfig");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteLogsConfig");
      }
      // verify the required parameter 'siteLogsConfig' is set
      if (siteLogsConfig === undefined || siteLogsConfig === null) {
        throw new Error("Missing the required parameter 'siteLogsConfig' when calling sitesUpdateSiteLogsConfig");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteLogsConfigSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteLogsConfigSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteLogsConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the meta data for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteLogsConfig} siteLogsConfig Site logs configuration
     * @param {module:api/SitesApi~sitesUpdateSiteLogsConfigSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteLogsConfig}
     */
    sitesUpdateSiteLogsConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, callback) {
      let postBody = siteLogsConfig;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteLogsConfigSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteLogsConfigSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteLogsConfigSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteLogsConfigSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteLogsConfigSlot");
      }
      // verify the required parameter 'siteLogsConfig' is set
      if (siteLogsConfig === undefined || siteLogsConfig === null) {
        throw new Error("Missing the required parameter 'siteLogsConfig' when calling sitesUpdateSiteLogsConfigSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteLogsConfig;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteMetadata operation.
     * @callback module:api/SitesApi~sitesUpdateSiteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the meta data for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} metadata Meta data of web app
     * @param {module:api/SitesApi~sitesUpdateSiteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesUpdateSiteMetadata(resourceGroupName, name, subscriptionId, apiVersion, metadata, callback) {
      let postBody = metadata;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteMetadata");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteMetadata");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteMetadata");
      }
      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling sitesUpdateSiteMetadata");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteMetadataSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteMetadataSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StringDictionary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the meta data for web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/StringDictionary} metadata Meta data of web app
     * @param {module:api/SitesApi~sitesUpdateSiteMetadataSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StringDictionary}
     */
    sitesUpdateSiteMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, callback) {
      let postBody = metadata;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteMetadataSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteMetadataSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteMetadataSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteMetadataSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteMetadataSlot");
      }
      // verify the required parameter 'metadata' is set
      if (metadata === undefined || metadata === null) {
        throw new Error("Missing the required parameter 'metadata' when calling sitesUpdateSiteMetadataSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = StringDictionary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteRelayServiceConnection operation.
     * @callback module:api/SitesApi~sitesUpdateSiteRelayServiceConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope The details of the Hybrid Connection
     * @param {module:api/SitesApi~sitesUpdateSiteRelayServiceConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesUpdateSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteRelayServiceConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteRelayServiceConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteRelayServiceConnectionSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteRelayServiceConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayServiceConnectionEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} entityName The name by which the Hybrid Connection is identified
     * @param {String} slot The name of the slot for the web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/RelayServiceConnectionEntity} connectionEnvelope The details of the Hybrid Connection
     * @param {module:api/SitesApi~sitesUpdateSiteRelayServiceConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayServiceConnectionEntity}
     */
    sitesUpdateSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'entityName' is set
      if (entityName === undefined || entityName === null) {
        throw new Error("Missing the required parameter 'entityName' when calling sitesUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteRelayServiceConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteRelayServiceConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'entityName': entityName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RelayServiceConnectionEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteSourceControl operation.
     * @callback module:api/SitesApi~sitesUpdateSiteSourceControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl Request body that contains the source control parameters
     * @param {module:api/SitesApi~sitesUpdateSiteSourceControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    sitesUpdateSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteSourceControl");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteSourceControl");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteSourceControl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteSourceControl");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling sitesUpdateSiteSourceControl");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteSourceControlSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteSourceControlSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteSourceControl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the source control configuration of web app
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} slot Name of web app slot. If not specified then will default to production slot.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SiteSourceControl} siteSourceControl Request body that contains the source control parameters
     * @param {module:api/SitesApi~sitesUpdateSiteSourceControlSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteSourceControl}
     */
    sitesUpdateSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, callback) {
      let postBody = siteSourceControl;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteSourceControlSlot");
      }
      // verify the required parameter 'siteSourceControl' is set
      if (siteSourceControl === undefined || siteSourceControl === null) {
        throw new Error("Missing the required parameter 'siteSourceControl' when calling sitesUpdateSiteSourceControlSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SiteSourceControl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteVNETConnection operation.
     * @callback module:api/SitesApi~sitesUpdateSiteVNETConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetInfo} connectionEnvelope The properties of this Virtual Network Connection
     * @param {module:api/SitesApi~sitesUpdateSiteVNETConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetInfo}
     */
    sitesUpdateSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnection");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnection");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnection");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnection");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnection");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteVNETConnectionGateway operation.
     * @callback module:api/SitesApi~sitesUpdateSiteVNETConnectionGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Virtual Network Gateway.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} gatewayName The name of the gateway. The only gateway that exists presently is \"primary\"
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetGateway} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/SitesApi~sitesUpdateSiteVNETConnectionGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetGateway}
     */
    sitesUpdateSiteVNETConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling sitesUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnectionGateway");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnectionGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteVNETConnectionGatewaySlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteVNETConnectionGatewaySlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Virtual Network Gateway.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} gatewayName The name of the gateway. The only gateway that exists presently is \"primary\"
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetGateway} connectionEnvelope The properties to update this gateway with.
     * @param {module:api/SitesApi~sitesUpdateSiteVNETConnectionGatewaySlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetGateway}
     */
    sitesUpdateSiteVNETConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnectionGatewaySlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSiteVNETConnectionSlot operation.
     * @callback module:api/SitesApi~sitesUpdateSiteVNETConnectionSlotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a Virtual Network Connection or updates it's properties.
     * @param {String} resourceGroupName The resource group name
     * @param {String} name The name of the web app
     * @param {String} vnetName The name of the Virtual Network
     * @param {String} slot The name of the slot for this web app.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetInfo} connectionEnvelope The properties of this Virtual Network Connection
     * @param {module:api/SitesApi~sitesUpdateSiteVNETConnectionSlotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetInfo}
     */
    sitesUpdateSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'slot' is set
      if (slot === undefined || slot === null) {
        throw new Error("Missing the required parameter 'slot' when calling sitesUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnectionSlot");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnectionSlot");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'slot': slot,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesUpdateSlotConfigNames operation.
     * @callback module:api/SitesApi~sitesUpdateSlotConfigNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SlotConfigNamesResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of web app
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/SlotConfigNamesResource} slotConfigNames Request body containing the names of application settings and connection strings
     * @param {module:api/SitesApi~sitesUpdateSlotConfigNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SlotConfigNamesResource}
     */
    sitesUpdateSlotConfigNames(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, callback) {
      let postBody = slotConfigNames;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSlotConfigNames");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling sitesUpdateSlotConfigNames");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sitesUpdateSlotConfigNames");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sitesUpdateSlotConfigNames");
      }
      // verify the required parameter 'slotConfigNames' is set
      if (slotConfigNames === undefined || slotConfigNames === null) {
        throw new Error("Missing the required parameter 'slotConfigNames' when calling sitesUpdateSlotConfigNames");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = SlotConfigNamesResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
