/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressResponse from '../model/AddressResponse';
import HostingEnvironment from '../model/HostingEnvironment';
import HostingEnvironmentCollection from '../model/HostingEnvironmentCollection';
import ManagedHostingEnvironment from '../model/ManagedHostingEnvironment';
import ServerFarmCollection from '../model/ServerFarmCollection';
import SiteCollection from '../model/SiteCollection';

/**
* ManagedHostingEnvironments service.
* @module api/ManagedHostingEnvironmentsApi
* @version 2015-08-01
*/
export default class ManagedHostingEnvironmentsApi {

    /**
    * Constructs a new ManagedHostingEnvironmentsApi. 
    * @alias module:api/ManagedHostingEnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a managed hosting environment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/HostingEnvironment} managedHostingEnvironmentEnvelope Properties of managed hosting environment
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironment}
     */
    managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, managedHostingEnvironmentEnvelope, callback) {
      let postBody = managedHostingEnvironmentEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment");
      }
      // verify the required parameter 'managedHostingEnvironmentEnvelope' is set
      if (managedHostingEnvironmentEnvelope === undefined || managedHostingEnvironmentEnvelope === null) {
        throw new Error("Missing the required parameter 'managedHostingEnvironmentEnvelope' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = HostingEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsDeleteManagedHostingEnvironment operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsDeleteManagedHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a managed hosting environment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [forceDelete] Delete even if the managed hosting environment contains resources
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsDeleteManagedHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    managedHostingEnvironmentsDeleteManagedHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'forceDelete': opts['forceDelete'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsGetManagedHostingEnvironment operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedHostingEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of a managed hosting environment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedHostingEnvironment}
     */
    managedHostingEnvironmentsGetManagedHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironment");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironment");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironment");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ManagedHostingEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsGetManagedHostingEnvironmentOperation operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentOperationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of an operation on a managed hosting environment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} operationId operation identifier GUID
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/operations/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmCollection}
     */
    managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServerFarmCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsGetManagedHostingEnvironmentSites operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all sites on the managed hosting environment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [propertiesToInclude] Comma separated list of site properties to include
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    managedHostingEnvironmentsGetManagedHostingEnvironmentSites(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'propertiesToInclude': opts['propertiesToInclude'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsGetManagedHostingEnvironmentVips operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentVipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of ip addresses assigned to a managed hosting environment
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentVipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressResponse}
     */
    managedHostingEnvironmentsGetManagedHostingEnvironmentVips(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = AddressResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of managed hosting environment
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmCollection}
     */
    managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServerFarmCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/webhostingplans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managedHostingEnvironmentsGetManagedHostingEnvironments operation.
     * @callback module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironmentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all managed hosting environments in a resource group.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ManagedHostingEnvironmentsApi~managedHostingEnvironmentsGetManagedHostingEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironmentCollection}
     */
    managedHostingEnvironmentsGetManagedHostingEnvironments(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironments");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironments");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = HostingEnvironmentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
