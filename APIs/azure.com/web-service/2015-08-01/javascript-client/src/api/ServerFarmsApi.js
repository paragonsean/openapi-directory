/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MetricDefinitionCollection from '../model/MetricDefinitionCollection';
import ResourceMetricCollection from '../model/ResourceMetricCollection';
import ServerFarmCollection from '../model/ServerFarmCollection';
import ServerFarmWithRichSku from '../model/ServerFarmWithRichSku';
import SiteCollection from '../model/SiteCollection';
import VnetGateway from '../model/VnetGateway';
import VnetInfo from '../model/VnetInfo';
import VnetRoute from '../model/VnetRoute';

/**
* ServerFarms service.
* @module api/ServerFarmsApi
* @version 2015-08-01
*/
export default class ServerFarmsApi {

    /**
    * Constructs a new ServerFarmsApi. 
    * @alias module:api/ServerFarmsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serverFarmsCreateOrUpdateServerFarm operation.
     * @callback module:api/ServerFarmsApi~serverFarmsCreateOrUpdateServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmWithRichSku} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an App Service Plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/ServerFarmWithRichSku} serverFarmEnvelope Details of App Service Plan
     * @param {Object} opts Optional parameters
     * @param {Boolean} [allowPendingState] OBSOLETE: If true, allow pending state for App Service Plan
     * @param {module:api/ServerFarmsApi~serverFarmsCreateOrUpdateServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmWithRichSku}
     */
    serverFarmsCreateOrUpdateServerFarm(resourceGroupName, name, subscriptionId, apiVersion, serverFarmEnvelope, opts, callback) {
      opts = opts || {};
      let postBody = serverFarmEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsCreateOrUpdateServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsCreateOrUpdateServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsCreateOrUpdateServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsCreateOrUpdateServerFarm");
      }
      // verify the required parameter 'serverFarmEnvelope' is set
      if (serverFarmEnvelope === undefined || serverFarmEnvelope === null) {
        throw new Error("Missing the required parameter 'serverFarmEnvelope' when calling serverFarmsCreateOrUpdateServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'allowPendingState': opts['allowPendingState'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ServerFarmWithRichSku;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsCreateOrUpdateVnetRoute operation.
     * @callback module:api/ServerFarmsApi~serverFarmsCreateOrUpdateVnetRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetRoute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} vnetName Name of virtual network
     * @param {String} routeName Name of the virtual network route
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetRoute} route The route object
     * @param {module:api/ServerFarmsApi~serverFarmsCreateOrUpdateVnetRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetRoute}
     */
    serverFarmsCreateOrUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, callback) {
      let postBody = route;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling serverFarmsCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsCreateOrUpdateVnetRoute");
      }
      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling serverFarmsCreateOrUpdateVnetRoute");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetRoute;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsDeleteServerFarm operation.
     * @callback module:api/ServerFarmsApi~serverFarmsDeleteServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a App Service Plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsDeleteServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    serverFarmsDeleteServerFarm(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsDeleteServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsDeleteServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsDeleteServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsDeleteServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsDeleteVnetRoute operation.
     * @callback module:api/ServerFarmsApi~serverFarmsDeleteVnetRouteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing route for a vnet in an app service plan.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} vnetName Name of virtual network
     * @param {String} routeName Name of the virtual network route
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsDeleteVnetRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    serverFarmsDeleteVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsDeleteVnetRoute");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsDeleteVnetRoute");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsDeleteVnetRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling serverFarmsDeleteVnetRoute");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsDeleteVnetRoute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsDeleteVnetRoute");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetRouteForVnet operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetRouteForVnetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VnetRoute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific route associated with a vnet, in an app service plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} vnetName Name of virtual network
     * @param {String} routeName Name of the virtual network route
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetRouteForVnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VnetRoute>}
     */
    serverFarmsGetRouteForVnet(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetRouteForVnet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetRouteForVnet");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsGetRouteForVnet");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling serverFarmsGetRouteForVnet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetRouteForVnet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetRouteForVnet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [VnetRoute];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetRoutesForVnet operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetRoutesForVnetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VnetRoute>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} vnetName Name of virtual network
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetRoutesForVnetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VnetRoute>}
     */
    serverFarmsGetRoutesForVnet(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetRoutesForVnet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetRoutesForVnet");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsGetRoutesForVnet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetRoutesForVnet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetRoutesForVnet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [VnetRoute];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetServerFarm operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmWithRichSku} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets specified App Service Plan in a resource group
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmWithRichSku}
     */
    serverFarmsGetServerFarm(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ServerFarmWithRichSku;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetServerFarmMetricDefintions operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetServerFarmMetricDefintionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MetricDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of metrics that can be queried for an App Service Plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetServerFarmMetricDefintionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MetricDefinitionCollection}
     */
    serverFarmsGetServerFarmMetricDefintions(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmMetricDefintions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetServerFarmMetricDefintions");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmMetricDefintions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmMetricDefintions");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = MetricDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetServerFarmMetrics operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetServerFarmMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceMetricCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries for App Service Plan metrics
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [details] If true, metrics are broken down per App Service Plan instance
     * @param {String} [filter] Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
     * @param {module:api/ServerFarmsApi~serverFarmsGetServerFarmMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceMetricCollection}
     */
    serverFarmsGetServerFarmMetrics(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmMetrics");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetServerFarmMetrics");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmMetrics");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'details': opts['details'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ResourceMetricCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetServerFarmOperation operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetServerFarmOperationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmWithRichSku} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a server farm operation
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of server farm
     * @param {String} operationId Id of Server farm operation\"&gt;
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetServerFarmOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmWithRichSku}
     */
    serverFarmsGetServerFarmOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmOperation");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetServerFarmOperation");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling serverFarmsGetServerFarmOperation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmOperation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmOperation");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ServerFarmWithRichSku;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetServerFarmSites operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetServerFarmSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of Apps associated with an App Service Plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list
     * @param {String} [filter] Supported filter: $filter=state eq running. Returns only web apps that are currently running
     * @param {String} [top] List page size. If specified, results are paged.
     * @param {module:api/ServerFarmsApi~serverFarmsGetServerFarmSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    serverFarmsGetServerFarmSites(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmSites");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetServerFarmSites");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmSites");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmSites");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$skipToken': opts['skipToken'],
        '$filter': opts['filter'],
        '$top': opts['top'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetServerFarmVnetGateway operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetServerFarmVnetGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the vnet gateway.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of the App Service Plan
     * @param {String} vnetName Name of the virtual network
     * @param {String} gatewayName Name of the gateway. Only the 'primary' gateway is supported.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetServerFarmVnetGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetGateway}
     */
    serverFarmsGetServerFarmVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmVnetGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetServerFarmVnetGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsGetServerFarmVnetGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling serverFarmsGetServerFarmVnetGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmVnetGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmVnetGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetServerFarms operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetServerFarmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets collection of App Service Plans in a resource group for a given subscription.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetServerFarmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmCollection}
     */
    serverFarmsGetServerFarms(resourceGroupName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarms");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarms");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarms");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServerFarmCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetVnetFromServerFarm operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetVnetFromServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a vnet associated with an App Service Plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} vnetName Name of virtual network
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetVnetFromServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetInfo}
     */
    serverFarmsGetVnetFromServerFarm(resourceGroupName, name, vnetName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetVnetFromServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetVnetFromServerFarm");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsGetVnetFromServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetVnetFromServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetVnetFromServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsGetVnetsForServerFarm operation.
     * @callback module:api/ServerFarmsApi~serverFarmsGetVnetsForServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VnetInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of VNets associated with App Service Plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsGetVnetsForServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VnetInfo>}
     */
    serverFarmsGetVnetsForServerFarm(resourceGroupName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetVnetsForServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsGetVnetsForServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsGetVnetsForServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsGetVnetsForServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [VnetInfo];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsRebootWorkerForServerFarm operation.
     * @callback module:api/ServerFarmsApi~serverFarmsRebootWorkerForServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a reboot request for a worker machine in the specified server farm
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of server farm
     * @param {String} workerName Name of worker machine, typically starts with RD
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ServerFarmsApi~serverFarmsRebootWorkerForServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    serverFarmsRebootWorkerForServerFarm(resourceGroupName, name, workerName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsRebootWorkerForServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsRebootWorkerForServerFarm");
      }
      // verify the required parameter 'workerName' is set
      if (workerName === undefined || workerName === null) {
        throw new Error("Missing the required parameter 'workerName' when calling serverFarmsRebootWorkerForServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsRebootWorkerForServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsRebootWorkerForServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'workerName': workerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsRestartSitesForServerFarm operation.
     * @callback module:api/ServerFarmsApi~serverFarmsRestartSitesForServerFarmCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restarts web apps in a specified App Service Plan
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [softRestart] Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps
     * @param {module:api/ServerFarmsApi~serverFarmsRestartSitesForServerFarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    serverFarmsRestartSitesForServerFarm(resourceGroupName, name, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsRestartSitesForServerFarm");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsRestartSitesForServerFarm");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsRestartSitesForServerFarm");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsRestartSitesForServerFarm");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'softRestart': opts['softRestart'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsUpdateServerFarmVnetGateway operation.
     * @callback module:api/ServerFarmsApi~serverFarmsUpdateServerFarmVnetGatewayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetGateway} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the vnet gateway
     * @param {String} resourceGroupName The resource group
     * @param {String} name The name of the App Service Plan
     * @param {String} vnetName The name of the virtual network
     * @param {String} gatewayName The name of the gateway. Only 'primary' is supported.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetGateway} connectionEnvelope The gateway entity.
     * @param {module:api/ServerFarmsApi~serverFarmsUpdateServerFarmVnetGatewayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetGateway}
     */
    serverFarmsUpdateServerFarmVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, callback) {
      let postBody = connectionEnvelope;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsUpdateServerFarmVnetGateway");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsUpdateServerFarmVnetGateway");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsUpdateServerFarmVnetGateway");
      }
      // verify the required parameter 'gatewayName' is set
      if (gatewayName === undefined || gatewayName === null) {
        throw new Error("Missing the required parameter 'gatewayName' when calling serverFarmsUpdateServerFarmVnetGateway");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsUpdateServerFarmVnetGateway");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsUpdateServerFarmVnetGateway");
      }
      // verify the required parameter 'connectionEnvelope' is set
      if (connectionEnvelope === undefined || connectionEnvelope === null) {
        throw new Error("Missing the required parameter 'connectionEnvelope' when calling serverFarmsUpdateServerFarmVnetGateway");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'gatewayName': gatewayName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetGateway;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serverFarmsUpdateVnetRoute operation.
     * @callback module:api/ServerFarmsApi~serverFarmsUpdateVnetRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VnetRoute} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     * @param {String} resourceGroupName Name of resource group
     * @param {String} name Name of App Service Plan
     * @param {String} vnetName Name of virtual network
     * @param {String} routeName Name of the virtual network route
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/VnetRoute} route The route object
     * @param {module:api/ServerFarmsApi~serverFarmsUpdateVnetRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VnetRoute}
     */
    serverFarmsUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, callback) {
      let postBody = route;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serverFarmsUpdateVnetRoute");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling serverFarmsUpdateVnetRoute");
      }
      // verify the required parameter 'vnetName' is set
      if (vnetName === undefined || vnetName === null) {
        throw new Error("Missing the required parameter 'vnetName' when calling serverFarmsUpdateVnetRoute");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling serverFarmsUpdateVnetRoute");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serverFarmsUpdateVnetRoute");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serverFarmsUpdateVnetRoute");
      }
      // verify the required parameter 'route' is set
      if (route === undefined || route === null) {
        throw new Error("Missing the required parameter 'route' when calling serverFarmsUpdateVnetRoute");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'name': name,
        'vnetName': vnetName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = VnetRoute;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
