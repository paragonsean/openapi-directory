/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CertificateCollection from '../model/CertificateCollection';
import ClassicMobileServiceCollection from '../model/ClassicMobileServiceCollection';
import GeoRegionCollection from '../model/GeoRegionCollection';
import HostingEnvironmentCollection from '../model/HostingEnvironmentCollection';
import ManagedHostingEnvironmentCollection from '../model/ManagedHostingEnvironmentCollection';
import ResourceNameAvailability from '../model/ResourceNameAvailability';
import ResourceNameAvailabilityRequest from '../model/ResourceNameAvailabilityRequest';
import ServerFarmCollection from '../model/ServerFarmCollection';
import SiteCollection from '../model/SiteCollection';
import User from '../model/User';

/**
* Global service.
* @module api/GlobalApi
* @version 2015-08-01
*/
export default class GlobalApi {

    /**
    * Constructs a new GlobalApi. 
    * @alias module:api/GlobalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the globalCheckNameAvailability operation.
     * @callback module:api/GlobalApi~globalCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceNameAvailability} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if resource name is available
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/ResourceNameAvailabilityRequest} request Name availability request
     * @param {module:api/GlobalApi~globalCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceNameAvailability}
     */
    globalCheckNameAvailability(subscriptionId, apiVersion, request, callback) {
      let postBody = request;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalCheckNameAvailability");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling globalCheckNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = ResourceNameAvailability;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetAllCertificates operation.
     * @callback module:api/GlobalApi~globalGetAllCertificatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CertificateCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all certificates for a subscription
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalGetAllCertificatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CertificateCollection}
     */
    globalGetAllCertificates(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetAllCertificates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetAllCertificates");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = CertificateCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/certificates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetAllClassicMobileServices operation.
     * @callback module:api/GlobalApi~globalGetAllClassicMobileServicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassicMobileServiceCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all mobile services for a subscription
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalGetAllClassicMobileServicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassicMobileServiceCollection}
     */
    globalGetAllClassicMobileServices(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetAllClassicMobileServices");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetAllClassicMobileServices");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ClassicMobileServiceCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/classicMobileServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetAllHostingEnvironments operation.
     * @callback module:api/GlobalApi~globalGetAllHostingEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HostingEnvironmentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all hostingEnvironments (App Service Environment) for a subscription
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalGetAllHostingEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HostingEnvironmentCollection}
     */
    globalGetAllHostingEnvironments(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetAllHostingEnvironments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetAllHostingEnvironments");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = HostingEnvironmentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/hostingEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetAllManagedHostingEnvironments operation.
     * @callback module:api/GlobalApi~globalGetAllManagedHostingEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedHostingEnvironmentCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all managed hosting environments for a subscription
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalGetAllManagedHostingEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedHostingEnvironmentCollection}
     */
    globalGetAllManagedHostingEnvironments(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetAllManagedHostingEnvironments");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetAllManagedHostingEnvironments");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ManagedHostingEnvironmentCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/managedHostingEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetAllServerFarms operation.
     * @callback module:api/GlobalApi~globalGetAllServerFarmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServerFarmCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all App Service Plans for a subscription
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [detailed] False to return a subset of App Service Plan properties, true to return all of the properties.              Retrieval of all properties may increase the API latency.
     * @param {module:api/GlobalApi~globalGetAllServerFarmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServerFarmCollection}
     */
    globalGetAllServerFarms(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetAllServerFarms");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetAllServerFarms");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'detailed': opts['detailed'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ServerFarmCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/serverfarms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetAllSites operation.
     * @callback module:api/GlobalApi~globalGetAllSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SiteCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all Web Apps for a subscription
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalGetAllSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SiteCollection}
     */
    globalGetAllSites(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetAllSites");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetAllSites");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = SiteCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetSubscriptionGeoRegions operation.
     * @callback module:api/GlobalApi~globalGetSubscriptionGeoRegionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoRegionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of available geo regions
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [sku] Filter only to regions that support this sku
     * @param {Boolean} [linuxWorkersEnabled] Filter only to regions that support linux workers
     * @param {module:api/GlobalApi~globalGetSubscriptionGeoRegionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoRegionCollection}
     */
    globalGetSubscriptionGeoRegions(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetSubscriptionGeoRegions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetSubscriptionGeoRegions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'sku': opts['sku'],
        'linuxWorkersEnabled': opts['linuxWorkersEnabled'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = GeoRegionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalGetSubscriptionPublishingCredentials operation.
     * @callback module:api/GlobalApi~globalGetSubscriptionPublishingCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets publishing credentials for the subscription owner
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalGetSubscriptionPublishingCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    globalGetSubscriptionPublishingCredentials(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalGetSubscriptionPublishingCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalGetSubscriptionPublishingCredentials");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = User;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalIsHostingEnvironmentNameAvailable operation.
     * @callback module:api/GlobalApi~globalIsHostingEnvironmentNameAvailableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Whether hosting environment name is available
     * @param {String} name Hosting environment name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalIsHostingEnvironmentNameAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    globalIsHostingEnvironmentNameAvailable(name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling globalIsHostingEnvironmentNameAvailable");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalIsHostingEnvironmentNameAvailable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalIsHostingEnvironmentNameAvailable");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'name': name,
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalIsHostingEnvironmentWithLegacyNameAvailable operation.
     * @callback module:api/GlobalApi~globalIsHostingEnvironmentWithLegacyNameAvailableCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Whether hosting environment name is available
     * @param {String} name Hosting environment name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalIsHostingEnvironmentWithLegacyNameAvailableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    globalIsHostingEnvironmentWithLegacyNameAvailable(name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling globalIsHostingEnvironmentWithLegacyNameAvailable");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalIsHostingEnvironmentWithLegacyNameAvailable");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalIsHostingEnvironmentWithLegacyNameAvailable");
      }

      let pathParams = {
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/ishostingenvironmentnameavailable/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalListPremierAddOnOffers operation.
     * @callback module:api/GlobalApi~globalListPremierAddOnOffersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List premier add on offers
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/GlobalApi~globalListPremierAddOnOffersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    globalListPremierAddOnOffers(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalListPremierAddOnOffers");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalListPremierAddOnOffers");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the globalUpdateSubscriptionPublishingCredentials operation.
     * @callback module:api/GlobalApi~globalUpdateSubscriptionPublishingCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates publishing credentials for the subscription owner
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:model/User} requestMessage requestMessage with new publishing credentials
     * @param {module:api/GlobalApi~globalUpdateSubscriptionPublishingCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    globalUpdateSubscriptionPublishingCredentials(subscriptionId, apiVersion, requestMessage, callback) {
      let postBody = requestMessage;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling globalUpdateSubscriptionPublishingCredentials");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling globalUpdateSubscriptionPublishingCredentials");
      }
      // verify the required parameter 'requestMessage' is set
      if (requestMessage === undefined || requestMessage === null) {
        throw new Error("Missing the required parameter 'requestMessage' when calling globalUpdateSubscriptionPublishingCredentials");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = User;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/publishingCredentials', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
