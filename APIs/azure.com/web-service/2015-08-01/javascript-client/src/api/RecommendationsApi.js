/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Recommendation from '../model/Recommendation';
import RecommendationRule from '../model/RecommendationRule';

/**
* Recommendations service.
* @module api/RecommendationsApi
* @version 2015-08-01
*/
export default class RecommendationsApi {

    /**
    * Constructs a new RecommendationsApi. 
    * @alias module:api/RecommendationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recommendationsGetRecommendationBySubscription operation.
     * @callback module:api/RecommendationsApi~recommendationsGetRecommendationBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recommendation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of recommendations associated with the specified subscription.
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [featured] If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
     * @param {String} [filter] Return only channels specified in the filter. Filter is specified by using OData syntax. Example: $filter=channels eq 'Api' or channel eq 'Notification'
     * @param {module:api/RecommendationsApi~recommendationsGetRecommendationBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recommendation>}
     */
    recommendationsGetRecommendationBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsGetRecommendationBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsGetRecommendationBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'featured': opts['featured'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Recommendation];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsGetRecommendationHistoryForSite operation.
     * @callback module:api/RecommendationsApi~recommendationsGetRecommendationHistoryForSiteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recommendation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     * @param {String} resourceGroupName Resource group name
     * @param {String} siteName Site name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {String} [startTime] The start time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
     * @param {String} [endTime] The end time of a time range to query, e.g. $filter=startTime eq '2015-01-01T00:00:00Z' and endTime eq '2015-01-02T00:00:00Z'
     * @param {module:api/RecommendationsApi~recommendationsGetRecommendationHistoryForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recommendation>}
     */
    recommendationsGetRecommendationHistoryForSite(resourceGroupName, siteName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsGetRecommendationHistoryForSite");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsGetRecommendationHistoryForSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsGetRecommendationHistoryForSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsGetRecommendationHistoryForSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Recommendation];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendationHistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsGetRecommendedRulesForSite operation.
     * @callback module:api/RecommendationsApi~recommendationsGetRecommendedRulesForSiteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Recommendation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of recommendations associated with the specified web site.
     * @param {String} resourceGroupName Resource group name
     * @param {String} siteName Site name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [featured] If set, this API returns only the most critical recommendation among the others. Otherwise this API returns all recommendations available
     * @param {String} [siteSku] The name of site SKU.
     * @param {Number} [numSlots] The number of site slots associated to the site
     * @param {module:api/RecommendationsApi~recommendationsGetRecommendedRulesForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Recommendation>}
     */
    recommendationsGetRecommendedRulesForSite(resourceGroupName, siteName, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsGetRecommendedRulesForSite");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsGetRecommendedRulesForSite");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsGetRecommendedRulesForSite");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsGetRecommendedRulesForSite");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'featured': opts['featured'],
        'siteSku': opts['siteSku'],
        'numSlots': opts['numSlots'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = [Recommendation];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recommendationsGetRuleDetailsBySiteName operation.
     * @callback module:api/RecommendationsApi~recommendationsGetRuleDetailsBySiteNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the detailed properties of the recommendation object for the specified web site.
     * @param {String} resourceGroupName Resource group name
     * @param {String} siteName Site name
     * @param {String} name Recommendation rule name
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/RecommendationsApi~recommendationsGetRuleDetailsBySiteNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationRule}
     */
    recommendationsGetRuleDetailsBySiteName(resourceGroupName, siteName, name, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recommendationsGetRuleDetailsBySiteName");
      }
      // verify the required parameter 'siteName' is set
      if (siteName === undefined || siteName === null) {
        throw new Error("Missing the required parameter 'siteName' when calling recommendationsGetRuleDetailsBySiteName");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling recommendationsGetRuleDetailsBySiteName");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recommendationsGetRuleDetailsBySiteName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recommendationsGetRuleDetailsBySiteName");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'siteName': siteName,
        'name': name,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      let returnType = RecommendationRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/recommendations/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
