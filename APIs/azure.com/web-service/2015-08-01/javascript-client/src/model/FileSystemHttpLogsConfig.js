/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileSystemHttpLogsConfig model module.
 * @module model/FileSystemHttpLogsConfig
 * @version 2015-08-01
 */
class FileSystemHttpLogsConfig {
    /**
     * Constructs a new <code>FileSystemHttpLogsConfig</code>.
     * Http logs to file system configuration
     * @alias module:model/FileSystemHttpLogsConfig
     */
    constructor() { 
        
        FileSystemHttpLogsConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileSystemHttpLogsConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileSystemHttpLogsConfig} obj Optional instance to populate.
     * @return {module:model/FileSystemHttpLogsConfig} The populated <code>FileSystemHttpLogsConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileSystemHttpLogsConfig();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('retentionInDays')) {
                obj['retentionInDays'] = ApiClient.convertToType(data['retentionInDays'], 'Number');
            }
            if (data.hasOwnProperty('retentionInMb')) {
                obj['retentionInMb'] = ApiClient.convertToType(data['retentionInMb'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileSystemHttpLogsConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileSystemHttpLogsConfig</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Enabled
 * @member {Boolean} enabled
 */
FileSystemHttpLogsConfig.prototype['enabled'] = undefined;

/**
 * Retention in days.              Remove files older than X days.              0 or lower means no retention.
 * @member {Number} retentionInDays
 */
FileSystemHttpLogsConfig.prototype['retentionInDays'] = undefined;

/**
 * Maximum size in megabytes that http log files can use.              When reached old log files will be removed to make space for new ones.              Value can range between 25 and 100.
 * @member {Number} retentionInMb
 */
FileSystemHttpLogsConfig.prototype['retentionInMb'] = undefined;






export default FileSystemHttpLogsConfig;

