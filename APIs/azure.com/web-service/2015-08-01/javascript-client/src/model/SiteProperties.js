/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NameValuePair from './NameValuePair';

/**
 * The SiteProperties model module.
 * @module model/SiteProperties
 * @version 2015-08-01
 */
class SiteProperties {
    /**
     * Constructs a new <code>SiteProperties</code>.
     * @alias module:model/SiteProperties
     */
    constructor() { 
        
        SiteProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SiteProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SiteProperties} obj Optional instance to populate.
     * @return {module:model/SiteProperties} The populated <code>SiteProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SiteProperties();

            if (data.hasOwnProperty('appSettings')) {
                obj['appSettings'] = ApiClient.convertToType(data['appSettings'], [NameValuePair]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [NameValuePair]);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [NameValuePair]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SiteProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SiteProperties</code>.
     */
    static validateJSON(data) {
        if (data['appSettings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['appSettings'])) {
                throw new Error("Expected the field `appSettings` to be an array in the JSON data but got " + data['appSettings']);
            }
            // validate the optional field `appSettings` (array)
            for (const item of data['appSettings']) {
                NameValuePair.validateJSON(item);
            };
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                NameValuePair.validateJSON(item);
            };
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                NameValuePair.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/NameValuePair>} appSettings
 */
SiteProperties.prototype['appSettings'] = undefined;

/**
 * @member {Array.<module:model/NameValuePair>} metadata
 */
SiteProperties.prototype['metadata'] = undefined;

/**
 * @member {Array.<module:model/NameValuePair>} properties
 */
SiteProperties.prototype['properties'] = undefined;






export default SiteProperties;

