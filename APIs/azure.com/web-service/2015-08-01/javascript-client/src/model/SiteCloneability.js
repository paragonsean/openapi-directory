/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SiteCloneabilityCriterion from './SiteCloneabilityCriterion';

/**
 * The SiteCloneability model module.
 * @module model/SiteCloneability
 * @version 2015-08-01
 */
class SiteCloneability {
    /**
     * Constructs a new <code>SiteCloneability</code>.
     * Represents whether or not a web app is cloneable
     * @alias module:model/SiteCloneability
     * @param result {module:model/SiteCloneability.ResultEnum} Name of web app
     */
    constructor(result) { 
        
        SiteCloneability.initialize(this, result);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, result) { 
        obj['result'] = result;
    }

    /**
     * Constructs a <code>SiteCloneability</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SiteCloneability} obj Optional instance to populate.
     * @return {module:model/SiteCloneability} The populated <code>SiteCloneability</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SiteCloneability();

            if (data.hasOwnProperty('blockingCharacteristics')) {
                obj['blockingCharacteristics'] = ApiClient.convertToType(data['blockingCharacteristics'], [SiteCloneabilityCriterion]);
            }
            if (data.hasOwnProperty('blockingFeatures')) {
                obj['blockingFeatures'] = ApiClient.convertToType(data['blockingFeatures'], [SiteCloneabilityCriterion]);
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = ApiClient.convertToType(data['result'], 'String');
            }
            if (data.hasOwnProperty('unsupportedFeatures')) {
                obj['unsupportedFeatures'] = ApiClient.convertToType(data['unsupportedFeatures'], [SiteCloneabilityCriterion]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SiteCloneability</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SiteCloneability</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SiteCloneability.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['blockingCharacteristics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['blockingCharacteristics'])) {
                throw new Error("Expected the field `blockingCharacteristics` to be an array in the JSON data but got " + data['blockingCharacteristics']);
            }
            // validate the optional field `blockingCharacteristics` (array)
            for (const item of data['blockingCharacteristics']) {
                SiteCloneabilityCriterion.validateJSON(item);
            };
        }
        if (data['blockingFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['blockingFeatures'])) {
                throw new Error("Expected the field `blockingFeatures` to be an array in the JSON data but got " + data['blockingFeatures']);
            }
            // validate the optional field `blockingFeatures` (array)
            for (const item of data['blockingFeatures']) {
                SiteCloneabilityCriterion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['result'] && !(typeof data['result'] === 'string' || data['result'] instanceof String)) {
            throw new Error("Expected the field `result` to be a primitive type in the JSON string but got " + data['result']);
        }
        if (data['unsupportedFeatures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['unsupportedFeatures'])) {
                throw new Error("Expected the field `unsupportedFeatures` to be an array in the JSON data but got " + data['unsupportedFeatures']);
            }
            // validate the optional field `unsupportedFeatures` (array)
            for (const item of data['unsupportedFeatures']) {
                SiteCloneabilityCriterion.validateJSON(item);
            };
        }

        return true;
    }


}

SiteCloneability.RequiredProperties = ["result"];

/**
 * List of blocking application characteristics
 * @member {Array.<module:model/SiteCloneabilityCriterion>} blockingCharacteristics
 */
SiteCloneability.prototype['blockingCharacteristics'] = undefined;

/**
 * List of features enabled on web app that prevent cloning
 * @member {Array.<module:model/SiteCloneabilityCriterion>} blockingFeatures
 */
SiteCloneability.prototype['blockingFeatures'] = undefined;

/**
 * Name of web app
 * @member {module:model/SiteCloneability.ResultEnum} result
 */
SiteCloneability.prototype['result'] = undefined;

/**
 * List of features enabled on web app that are non-blocking but cannot be cloned. The web app can still be cloned              but the features in this list will not be set up on cloned web app.
 * @member {Array.<module:model/SiteCloneabilityCriterion>} unsupportedFeatures
 */
SiteCloneability.prototype['unsupportedFeatures'] = undefined;





/**
 * Allowed values for the <code>result</code> property.
 * @enum {String}
 * @readonly
 */
SiteCloneability['ResultEnum'] = {

    /**
     * value: "Cloneable"
     * @const
     */
    "Cloneable": "Cloneable",

    /**
     * value: "PartiallyCloneable"
     * @const
     */
    "PartiallyCloneable": "PartiallyCloneable",

    /**
     * value: "NotCloneable"
     * @const
     */
    "NotCloneable": "NotCloneable"
};



export default SiteCloneability;

