/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Recommendation model module.
 * @module model/Recommendation
 * @version 2015-08-01
 */
class Recommendation {
    /**
     * Constructs a new <code>Recommendation</code>.
     * Represents a recommendation result generated by the recommendation engine
     * @alias module:model/Recommendation
     * @param channels {module:model/Recommendation.ChannelsEnum} List of channels that this recommendation can apply.
     * @param level {module:model/Recommendation.LevelEnum} Level indicating how critical this recommendation can impact.
     */
    constructor(channels, level) { 
        
        Recommendation.initialize(this, channels, level);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channels, level) { 
        obj['channels'] = channels;
        obj['level'] = level;
    }

    /**
     * Constructs a <code>Recommendation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Recommendation} obj Optional instance to populate.
     * @return {module:model/Recommendation} The populated <code>Recommendation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Recommendation();

            if (data.hasOwnProperty('actionName')) {
                obj['actionName'] = ApiClient.convertToType(data['actionName'], 'String');
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Date');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Number');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('nextNotificationTime')) {
                obj['nextNotificationTime'] = ApiClient.convertToType(data['nextNotificationTime'], 'Date');
            }
            if (data.hasOwnProperty('notificationExpirationTime')) {
                obj['notificationExpirationTime'] = ApiClient.convertToType(data['notificationExpirationTime'], 'Date');
            }
            if (data.hasOwnProperty('notifiedTime')) {
                obj['notifiedTime'] = ApiClient.convertToType(data['notifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('recommendationId')) {
                obj['recommendationId'] = ApiClient.convertToType(data['recommendationId'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('resourceScope')) {
                obj['resourceScope'] = ApiClient.convertToType(data['resourceScope'], 'String');
            }
            if (data.hasOwnProperty('ruleName')) {
                obj['ruleName'] = ApiClient.convertToType(data['ruleName'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Recommendation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Recommendation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Recommendation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actionName'] && !(typeof data['actionName'] === 'string' || data['actionName'] instanceof String)) {
            throw new Error("Expected the field `actionName` to be a primitive type in the JSON string but got " + data['actionName']);
        }
        // ensure the json data is a string
        if (data['channels'] && !(typeof data['channels'] === 'string' || data['channels'] instanceof String)) {
            throw new Error("Expected the field `channels` to be a primitive type in the JSON string but got " + data['channels']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['recommendationId'] && !(typeof data['recommendationId'] === 'string' || data['recommendationId'] instanceof String)) {
            throw new Error("Expected the field `recommendationId` to be a primitive type in the JSON string but got " + data['recommendationId']);
        }
        // ensure the json data is a string
        if (data['resourceId'] && !(typeof data['resourceId'] === 'string' || data['resourceId'] instanceof String)) {
            throw new Error("Expected the field `resourceId` to be a primitive type in the JSON string but got " + data['resourceId']);
        }
        // ensure the json data is a string
        if (data['resourceScope'] && !(typeof data['resourceScope'] === 'string' || data['resourceScope'] instanceof String)) {
            throw new Error("Expected the field `resourceScope` to be a primitive type in the JSON string but got " + data['resourceScope']);
        }
        // ensure the json data is a string
        if (data['ruleName'] && !(typeof data['ruleName'] === 'string' || data['ruleName'] instanceof String)) {
            throw new Error("Expected the field `ruleName` to be a primitive type in the JSON string but got " + data['ruleName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

Recommendation.RequiredProperties = ["channels", "level"];

/**
 * Name of action recommended by this object.
 * @member {String} actionName
 */
Recommendation.prototype['actionName'] = undefined;

/**
 * List of channels that this recommendation can apply.
 * @member {module:model/Recommendation.ChannelsEnum} channels
 */
Recommendation.prototype['channels'] = undefined;

/**
 * Timestamp when this instance was created.
 * @member {Date} creationTime
 */
Recommendation.prototype['creationTime'] = undefined;

/**
 * UI friendly name of the rule (may not be unique)
 * @member {String} displayName
 */
Recommendation.prototype['displayName'] = undefined;

/**
 * On/off flag indicating the rule is currently enabled or disabled.
 * @member {Number} enabled
 */
Recommendation.prototype['enabled'] = undefined;

/**
 * The end time of a range that the recommendation refers to.
 * @member {Date} endTime
 */
Recommendation.prototype['endTime'] = undefined;

/**
 * Level indicating how critical this recommendation can impact.
 * @member {module:model/Recommendation.LevelEnum} level
 */
Recommendation.prototype['level'] = undefined;

/**
 * Localized text of recommendation, good for UI.
 * @member {String} message
 */
Recommendation.prototype['message'] = undefined;

/**
 * When to notify this recommendation next. Null means that this will never be notified anymore.
 * @member {Date} nextNotificationTime
 */
Recommendation.prototype['nextNotificationTime'] = undefined;

/**
 * Date and time when this notification expires.
 * @member {Date} notificationExpirationTime
 */
Recommendation.prototype['notificationExpirationTime'] = undefined;

/**
 * Last timestamp this instance was actually notified. Null means that this recommendation hasn't been notified yet.
 * @member {Date} notifiedTime
 */
Recommendation.prototype['notifiedTime'] = undefined;

/**
 * A GUID value that each recommendation object is associated with.
 * @member {String} recommendationId
 */
Recommendation.prototype['recommendationId'] = undefined;

/**
 * Full ARM resource ID string that this recommendation object is associated with.
 * @member {String} resourceId
 */
Recommendation.prototype['resourceId'] = undefined;

/**
 * Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.
 * @member {String} resourceScope
 */
Recommendation.prototype['resourceScope'] = undefined;

/**
 * Unique name of the rule
 * @member {String} ruleName
 */
Recommendation.prototype['ruleName'] = undefined;

/**
 * A metric value measured by the rule.
 * @member {Number} score
 */
Recommendation.prototype['score'] = undefined;

/**
 * The beginning time of a range that the recommendation refers to.
 * @member {Date} startTime
 */
Recommendation.prototype['startTime'] = undefined;

/**
 * The list of category tags that this recommendation belongs to.
 * @member {Array.<String>} tags
 */
Recommendation.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>channels</code> property.
 * @enum {String}
 * @readonly
 */
Recommendation['ChannelsEnum'] = {

    /**
     * value: "Notification"
     * @const
     */
    "Notification": "Notification",

    /**
     * value: "Api"
     * @const
     */
    "Api": "Api",

    /**
     * value: "Email"
     * @const
     */
    "Email": "Email",

    /**
     * value: "All"
     * @const
     */
    "All": "All"
};


/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
Recommendation['LevelEnum'] = {

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Information"
     * @const
     */
    "Information": "Information",

    /**
     * value: "NonUrgentSuggestion"
     * @const
     */
    "NonUrgentSuggestion": "NonUrgentSuggestion"
};



export default Recommendation;

