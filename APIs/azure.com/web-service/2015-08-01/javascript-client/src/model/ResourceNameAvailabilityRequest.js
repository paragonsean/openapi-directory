/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceNameAvailabilityRequest model module.
 * @module model/ResourceNameAvailabilityRequest
 * @version 2015-08-01
 */
class ResourceNameAvailabilityRequest {
    /**
     * Constructs a new <code>ResourceNameAvailabilityRequest</code>.
     * Resource name availability request content
     * @alias module:model/ResourceNameAvailabilityRequest
     */
    constructor() { 
        
        ResourceNameAvailabilityRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceNameAvailabilityRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceNameAvailabilityRequest} obj Optional instance to populate.
     * @return {module:model/ResourceNameAvailabilityRequest} The populated <code>ResourceNameAvailabilityRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceNameAvailabilityRequest();

            if (data.hasOwnProperty('isFqdn')) {
                obj['isFqdn'] = ApiClient.convertToType(data['isFqdn'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceNameAvailabilityRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceNameAvailabilityRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Is fully qualified domain name
 * @member {Boolean} isFqdn
 */
ResourceNameAvailabilityRequest.prototype['isFqdn'] = undefined;

/**
 * Resource name to verify
 * @member {String} name
 */
ResourceNameAvailabilityRequest.prototype['name'] = undefined;

/**
 * Resource type used for verification
 * @member {String} type
 */
ResourceNameAvailabilityRequest.prototype['type'] = undefined;






export default ResourceNameAvailabilityRequest;

