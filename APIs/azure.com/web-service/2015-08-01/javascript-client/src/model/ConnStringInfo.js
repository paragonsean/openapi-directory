/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConnStringInfo model module.
 * @module model/ConnStringInfo
 * @version 2015-08-01
 */
class ConnStringInfo {
    /**
     * Constructs a new <code>ConnStringInfo</code>.
     * Represents database connection string information
     * @alias module:model/ConnStringInfo
     * @param type {module:model/ConnStringInfo.TypeEnum} Type of database
     */
    constructor(type) { 
        
        ConnStringInfo.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ConnStringInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnStringInfo} obj Optional instance to populate.
     * @return {module:model/ConnStringInfo} The populated <code>ConnStringInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnStringInfo();

            if (data.hasOwnProperty('connectionString')) {
                obj['connectionString'] = ApiClient.convertToType(data['connectionString'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnStringInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnStringInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnStringInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['connectionString'] && !(typeof data['connectionString'] === 'string' || data['connectionString'] instanceof String)) {
            throw new Error("Expected the field `connectionString` to be a primitive type in the JSON string but got " + data['connectionString']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ConnStringInfo.RequiredProperties = ["type"];

/**
 * Connection string value
 * @member {String} connectionString
 */
ConnStringInfo.prototype['connectionString'] = undefined;

/**
 * Name of connection string
 * @member {String} name
 */
ConnStringInfo.prototype['name'] = undefined;

/**
 * Type of database
 * @member {module:model/ConnStringInfo.TypeEnum} type
 */
ConnStringInfo.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ConnStringInfo['TypeEnum'] = {

    /**
     * value: "MySql"
     * @const
     */
    "MySql": "MySql",

    /**
     * value: "SQLServer"
     * @const
     */
    "SQLServer": "SQLServer",

    /**
     * value: "SQLAzure"
     * @const
     */
    "SQLAzure": "SQLAzure",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom"
};



export default ConnStringInfo;

