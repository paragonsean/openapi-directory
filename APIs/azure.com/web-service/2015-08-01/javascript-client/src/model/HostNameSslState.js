/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HostNameSslState model module.
 * @module model/HostNameSslState
 * @version 2015-08-01
 */
class HostNameSslState {
    /**
     * Constructs a new <code>HostNameSslState</code>.
     * Object that represents a SSL-enabled host name.
     * @alias module:model/HostNameSslState
     * @param sslState {module:model/HostNameSslState.SslStateEnum} SSL type
     */
    constructor(sslState) { 
        
        HostNameSslState.initialize(this, sslState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sslState) { 
        obj['sslState'] = sslState;
    }

    /**
     * Constructs a <code>HostNameSslState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HostNameSslState} obj Optional instance to populate.
     * @return {module:model/HostNameSslState} The populated <code>HostNameSslState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HostNameSslState();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('sslState')) {
                obj['sslState'] = ApiClient.convertToType(data['sslState'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
            if (data.hasOwnProperty('toUpdate')) {
                obj['toUpdate'] = ApiClient.convertToType(data['toUpdate'], 'Boolean');
            }
            if (data.hasOwnProperty('virtualIP')) {
                obj['virtualIP'] = ApiClient.convertToType(data['virtualIP'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HostNameSslState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HostNameSslState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HostNameSslState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sslState'] && !(typeof data['sslState'] === 'string' || data['sslState'] instanceof String)) {
            throw new Error("Expected the field `sslState` to be a primitive type in the JSON string but got " + data['sslState']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }
        // ensure the json data is a string
        if (data['virtualIP'] && !(typeof data['virtualIP'] === 'string' || data['virtualIP'] instanceof String)) {
            throw new Error("Expected the field `virtualIP` to be a primitive type in the JSON string but got " + data['virtualIP']);
        }

        return true;
    }


}

HostNameSslState.RequiredProperties = ["sslState"];

/**
 * Host name
 * @member {String} name
 */
HostNameSslState.prototype['name'] = undefined;

/**
 * SSL type
 * @member {module:model/HostNameSslState.SslStateEnum} sslState
 */
HostNameSslState.prototype['sslState'] = undefined;

/**
 * SSL cert thumbprint
 * @member {String} thumbprint
 */
HostNameSslState.prototype['thumbprint'] = undefined;

/**
 * Set this flag to update existing host name
 * @member {Boolean} toUpdate
 */
HostNameSslState.prototype['toUpdate'] = undefined;

/**
 * Virtual IP address assigned to the host name if IP based SSL is enabled
 * @member {String} virtualIP
 */
HostNameSslState.prototype['virtualIP'] = undefined;





/**
 * Allowed values for the <code>sslState</code> property.
 * @enum {String}
 * @readonly
 */
HostNameSslState['SslStateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "SniEnabled"
     * @const
     */
    "SniEnabled": "SniEnabled",

    /**
     * value: "IpBasedEnabled"
     * @const
     */
    "IpBasedEnabled": "IpBasedEnabled"
};



export default HostNameSslState;

