/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecommendationRule model module.
 * @module model/RecommendationRule
 * @version 2015-08-01
 */
class RecommendationRule {
    /**
     * Constructs a new <code>RecommendationRule</code>.
     * Represents a recommendation rule that the recommendation engine can perform
     * @alias module:model/RecommendationRule
     * @param channels {module:model/RecommendationRule.ChannelsEnum} List of available channels that this rule applies.
     * @param level {module:model/RecommendationRule.LevelEnum} Level of impact indicating how critical this rule is.
     */
    constructor(channels, level) { 
        
        RecommendationRule.initialize(this, channels, level);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channels, level) { 
        obj['channels'] = channels;
        obj['level'] = level;
    }

    /**
     * Constructs a <code>RecommendationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecommendationRule} obj Optional instance to populate.
     * @return {module:model/RecommendationRule} The populated <code>RecommendationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecommendationRule();

            if (data.hasOwnProperty('actionName')) {
                obj['actionName'] = ApiClient.convertToType(data['actionName'], 'String');
            }
            if (data.hasOwnProperty('channels')) {
                obj['channels'] = ApiClient.convertToType(data['channels'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Number');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('recommendationId')) {
                obj['recommendationId'] = ApiClient.convertToType(data['recommendationId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecommendationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecommendationRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecommendationRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['actionName'] && !(typeof data['actionName'] === 'string' || data['actionName'] instanceof String)) {
            throw new Error("Expected the field `actionName` to be a primitive type in the JSON string but got " + data['actionName']);
        }
        // ensure the json data is a string
        if (data['channels'] && !(typeof data['channels'] === 'string' || data['channels'] instanceof String)) {
            throw new Error("Expected the field `channels` to be a primitive type in the JSON string but got " + data['channels']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['recommendationId'] && !(typeof data['recommendationId'] === 'string' || data['recommendationId'] instanceof String)) {
            throw new Error("Expected the field `recommendationId` to be a primitive type in the JSON string but got " + data['recommendationId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

RecommendationRule.RequiredProperties = ["channels", "level"];

/**
 * Name of action that is recommended by this rule in string
 * @member {String} actionName
 */
RecommendationRule.prototype['actionName'] = undefined;

/**
 * List of available channels that this rule applies.
 * @member {module:model/RecommendationRule.ChannelsEnum} channels
 */
RecommendationRule.prototype['channels'] = undefined;

/**
 * Localized detailed description of the rule
 * @member {String} description
 */
RecommendationRule.prototype['description'] = undefined;

/**
 * UI friendly name of the rule
 * @member {String} displayName
 */
RecommendationRule.prototype['displayName'] = undefined;

/**
 * On/off flag indicating the rule is currently enabled or disabled.
 * @member {Number} enabled
 */
RecommendationRule.prototype['enabled'] = undefined;

/**
 * Level of impact indicating how critical this rule is.
 * @member {module:model/RecommendationRule.LevelEnum} level
 */
RecommendationRule.prototype['level'] = undefined;

/**
 * Localized name of the rule (Good for UI)
 * @member {String} message
 */
RecommendationRule.prototype['message'] = undefined;

/**
 * Unique name of the rule
 * @member {String} name
 */
RecommendationRule.prototype['name'] = undefined;

/**
 * Recommendation ID of an associated recommendation object tied to the rule, if exists.              If such an object doesn't exist, it is set to null.
 * @member {String} recommendationId
 */
RecommendationRule.prototype['recommendationId'] = undefined;

/**
 * An array of category tags that the rule contains.
 * @member {Array.<String>} tags
 */
RecommendationRule.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>channels</code> property.
 * @enum {String}
 * @readonly
 */
RecommendationRule['ChannelsEnum'] = {

    /**
     * value: "Notification"
     * @const
     */
    "Notification": "Notification",

    /**
     * value: "Api"
     * @const
     */
    "Api": "Api",

    /**
     * value: "Email"
     * @const
     */
    "Email": "Email",

    /**
     * value: "All"
     * @const
     */
    "All": "All"
};


/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
RecommendationRule['LevelEnum'] = {

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Information"
     * @const
     */
    "Information": "Information",

    /**
     * value: "NonUrgentSuggestion"
     * @const
     */
    "NonUrgentSuggestion": "NonUrgentSuggestion"
};



export default RecommendationRule;

