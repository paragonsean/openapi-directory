/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StampCapacity model module.
 * @module model/StampCapacity
 * @version 2015-08-01
 */
class StampCapacity {
    /**
     * Constructs a new <code>StampCapacity</code>.
     * Class containing stamp capacity information
     * @alias module:model/StampCapacity
     */
    constructor() { 
        
        StampCapacity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StampCapacity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StampCapacity} obj Optional instance to populate.
     * @return {module:model/StampCapacity} The populated <code>StampCapacity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StampCapacity();

            if (data.hasOwnProperty('availableCapacity')) {
                obj['availableCapacity'] = ApiClient.convertToType(data['availableCapacity'], 'Number');
            }
            if (data.hasOwnProperty('computeMode')) {
                obj['computeMode'] = ApiClient.convertToType(data['computeMode'], 'String');
            }
            if (data.hasOwnProperty('excludeFromCapacityAllocation')) {
                obj['excludeFromCapacityAllocation'] = ApiClient.convertToType(data['excludeFromCapacityAllocation'], 'Boolean');
            }
            if (data.hasOwnProperty('isApplicableForAllComputeModes')) {
                obj['isApplicableForAllComputeModes'] = ApiClient.convertToType(data['isApplicableForAllComputeModes'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('siteMode')) {
                obj['siteMode'] = ApiClient.convertToType(data['siteMode'], 'String');
            }
            if (data.hasOwnProperty('totalCapacity')) {
                obj['totalCapacity'] = ApiClient.convertToType(data['totalCapacity'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
            if (data.hasOwnProperty('workerSize')) {
                obj['workerSize'] = ApiClient.convertToType(data['workerSize'], 'String');
            }
            if (data.hasOwnProperty('workerSizeId')) {
                obj['workerSizeId'] = ApiClient.convertToType(data['workerSizeId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StampCapacity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StampCapacity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['computeMode'] && !(typeof data['computeMode'] === 'string' || data['computeMode'] instanceof String)) {
            throw new Error("Expected the field `computeMode` to be a primitive type in the JSON string but got " + data['computeMode']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['siteMode'] && !(typeof data['siteMode'] === 'string' || data['siteMode'] instanceof String)) {
            throw new Error("Expected the field `siteMode` to be a primitive type in the JSON string but got " + data['siteMode']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }
        // ensure the json data is a string
        if (data['workerSize'] && !(typeof data['workerSize'] === 'string' || data['workerSize'] instanceof String)) {
            throw new Error("Expected the field `workerSize` to be a primitive type in the JSON string but got " + data['workerSize']);
        }

        return true;
    }


}



/**
 * Available capacity (# of machines, bytes of storage etc...)
 * @member {Number} availableCapacity
 */
StampCapacity.prototype['availableCapacity'] = undefined;

/**
 * Shared/Dedicated workers
 * @member {module:model/StampCapacity.ComputeModeEnum} computeMode
 */
StampCapacity.prototype['computeMode'] = undefined;

/**
 * If true it includes basic sites              Basic sites are not used for capacity allocation.
 * @member {Boolean} excludeFromCapacityAllocation
 */
StampCapacity.prototype['excludeFromCapacityAllocation'] = undefined;

/**
 * Is capacity applicable for all sites?
 * @member {Boolean} isApplicableForAllComputeModes
 */
StampCapacity.prototype['isApplicableForAllComputeModes'] = undefined;

/**
 * Name of the stamp
 * @member {String} name
 */
StampCapacity.prototype['name'] = undefined;

/**
 * Shared or Dedicated
 * @member {String} siteMode
 */
StampCapacity.prototype['siteMode'] = undefined;

/**
 * Total capacity (# of machines, bytes of storage etc...)
 * @member {Number} totalCapacity
 */
StampCapacity.prototype['totalCapacity'] = undefined;

/**
 * Name of the unit
 * @member {String} unit
 */
StampCapacity.prototype['unit'] = undefined;

/**
 * Size of the machines
 * @member {module:model/StampCapacity.WorkerSizeEnum} workerSize
 */
StampCapacity.prototype['workerSize'] = undefined;

/**
 * Size Id of machines:               0 - Small              1 - Medium              2 - Large
 * @member {Number} workerSizeId
 */
StampCapacity.prototype['workerSizeId'] = undefined;





/**
 * Allowed values for the <code>computeMode</code> property.
 * @enum {String}
 * @readonly
 */
StampCapacity['ComputeModeEnum'] = {

    /**
     * value: "Shared"
     * @const
     */
    "Shared": "Shared",

    /**
     * value: "Dedicated"
     * @const
     */
    "Dedicated": "Dedicated",

    /**
     * value: "Dynamic"
     * @const
     */
    "Dynamic": "Dynamic"
};


/**
 * Allowed values for the <code>workerSize</code> property.
 * @enum {String}
 * @readonly
 */
StampCapacity['WorkerSizeEnum'] = {

    /**
     * value: "Default"
     * @const
     */
    "Default": "Default",

    /**
     * value: "Small"
     * @const
     */
    "Small": "Small",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "Large"
     * @const
     */
    "Large": "Large"
};



export default StampCapacity;

