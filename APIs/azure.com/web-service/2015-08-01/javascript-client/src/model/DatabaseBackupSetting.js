/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DatabaseBackupSetting model module.
 * @module model/DatabaseBackupSetting
 * @version 2015-08-01
 */
class DatabaseBackupSetting {
    /**
     * Constructs a new <code>DatabaseBackupSetting</code>.
     * Note: properties are serialized in JSON format and stored in DB.               if new properties are added they might not be in the previous data rows               so please handle nulls
     * @alias module:model/DatabaseBackupSetting
     */
    constructor() { 
        
        DatabaseBackupSetting.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DatabaseBackupSetting</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DatabaseBackupSetting} obj Optional instance to populate.
     * @return {module:model/DatabaseBackupSetting} The populated <code>DatabaseBackupSetting</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DatabaseBackupSetting();

            if (data.hasOwnProperty('connectionString')) {
                obj['connectionString'] = ApiClient.convertToType(data['connectionString'], 'String');
            }
            if (data.hasOwnProperty('connectionStringName')) {
                obj['connectionStringName'] = ApiClient.convertToType(data['connectionStringName'], 'String');
            }
            if (data.hasOwnProperty('databaseType')) {
                obj['databaseType'] = ApiClient.convertToType(data['databaseType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DatabaseBackupSetting</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DatabaseBackupSetting</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectionString'] && !(typeof data['connectionString'] === 'string' || data['connectionString'] instanceof String)) {
            throw new Error("Expected the field `connectionString` to be a primitive type in the JSON string but got " + data['connectionString']);
        }
        // ensure the json data is a string
        if (data['connectionStringName'] && !(typeof data['connectionStringName'] === 'string' || data['connectionStringName'] instanceof String)) {
            throw new Error("Expected the field `connectionStringName` to be a primitive type in the JSON string but got " + data['connectionStringName']);
        }
        // ensure the json data is a string
        if (data['databaseType'] && !(typeof data['databaseType'] === 'string' || data['databaseType'] instanceof String)) {
            throw new Error("Expected the field `databaseType` to be a primitive type in the JSON string but got " + data['databaseType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Contains a connection string to a database which is being backed up/restored. If the restore should happen to a new database, the database name inside is the new one.
 * @member {String} connectionString
 */
DatabaseBackupSetting.prototype['connectionString'] = undefined;

/**
 * Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.              This is used during restore with overwrite connection strings options.
 * @member {String} connectionStringName
 */
DatabaseBackupSetting.prototype['connectionStringName'] = undefined;

/**
 * SqlAzure / MySql
 * @member {String} databaseType
 */
DatabaseBackupSetting.prototype['databaseType'] = undefined;

/**
 * @member {String} name
 */
DatabaseBackupSetting.prototype['name'] = undefined;






export default DatabaseBackupSetting;

