/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The Contact model module.
 * @module model/Contact
 * @version 2015-08-01
 */
class Contact {
    /**
     * Constructs a new <code>Contact</code>.
     * Contact information for domain registration. If &#39;Domain Privacy&#39; option is not selected then the contact information will be made publicly available through the Whois directories as per ICANN requirements.
     * @alias module:model/Contact
     */
    constructor() { 
        
        Contact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Contact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Contact} obj Optional instance to populate.
     * @return {module:model/Contact} The populated <code>Contact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Contact();

            if (data.hasOwnProperty('addressMailing')) {
                obj['addressMailing'] = Address.constructFromObject(data['addressMailing']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fax')) {
                obj['fax'] = ApiClient.convertToType(data['fax'], 'String');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('nameFirst')) {
                obj['nameFirst'] = ApiClient.convertToType(data['nameFirst'], 'String');
            }
            if (data.hasOwnProperty('nameLast')) {
                obj['nameLast'] = ApiClient.convertToType(data['nameLast'], 'String');
            }
            if (data.hasOwnProperty('nameMiddle')) {
                obj['nameMiddle'] = ApiClient.convertToType(data['nameMiddle'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Contact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Contact</code>.
     */
    static validateJSON(data) {
        // validate the optional field `addressMailing`
        if (data['addressMailing']) { // data not null
          Address.validateJSON(data['addressMailing']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fax'] && !(typeof data['fax'] === 'string' || data['fax'] instanceof String)) {
            throw new Error("Expected the field `fax` to be a primitive type in the JSON string but got " + data['fax']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // ensure the json data is a string
        if (data['nameFirst'] && !(typeof data['nameFirst'] === 'string' || data['nameFirst'] instanceof String)) {
            throw new Error("Expected the field `nameFirst` to be a primitive type in the JSON string but got " + data['nameFirst']);
        }
        // ensure the json data is a string
        if (data['nameLast'] && !(typeof data['nameLast'] === 'string' || data['nameLast'] instanceof String)) {
            throw new Error("Expected the field `nameLast` to be a primitive type in the JSON string but got " + data['nameLast']);
        }
        // ensure the json data is a string
        if (data['nameMiddle'] && !(typeof data['nameMiddle'] === 'string' || data['nameMiddle'] instanceof String)) {
            throw new Error("Expected the field `nameMiddle` to be a primitive type in the JSON string but got " + data['nameMiddle']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} addressMailing
 */
Contact.prototype['addressMailing'] = undefined;

/**
 * Email address
 * @member {String} email
 */
Contact.prototype['email'] = undefined;

/**
 * Fax number
 * @member {String} fax
 */
Contact.prototype['fax'] = undefined;

/**
 * Job title
 * @member {String} jobTitle
 */
Contact.prototype['jobTitle'] = undefined;

/**
 * First name
 * @member {String} nameFirst
 */
Contact.prototype['nameFirst'] = undefined;

/**
 * Last name
 * @member {String} nameLast
 */
Contact.prototype['nameLast'] = undefined;

/**
 * Middle name
 * @member {String} nameMiddle
 */
Contact.prototype['nameMiddle'] = undefined;

/**
 * Organization
 * @member {String} organization
 */
Contact.prototype['organization'] = undefined;

/**
 * Phone number
 * @member {String} phone
 */
Contact.prototype['phone'] = undefined;






export default Contact;

