/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WebSiteManagementClient);
  }
}(this, function(expect, WebSiteManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WebSiteManagementClient.GlobalApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GlobalApi', function() {
    describe('globalCheckNameAvailability', function() {
      it('should call globalCheckNameAvailability successfully', function(done) {
        //uncomment below and update the code to test globalCheckNameAvailability
        //instance.globalCheckNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetAllCertificates', function() {
      it('should call globalGetAllCertificates successfully', function(done) {
        //uncomment below and update the code to test globalGetAllCertificates
        //instance.globalGetAllCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetAllClassicMobileServices', function() {
      it('should call globalGetAllClassicMobileServices successfully', function(done) {
        //uncomment below and update the code to test globalGetAllClassicMobileServices
        //instance.globalGetAllClassicMobileServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetAllHostingEnvironments', function() {
      it('should call globalGetAllHostingEnvironments successfully', function(done) {
        //uncomment below and update the code to test globalGetAllHostingEnvironments
        //instance.globalGetAllHostingEnvironments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetAllManagedHostingEnvironments', function() {
      it('should call globalGetAllManagedHostingEnvironments successfully', function(done) {
        //uncomment below and update the code to test globalGetAllManagedHostingEnvironments
        //instance.globalGetAllManagedHostingEnvironments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetAllServerFarms', function() {
      it('should call globalGetAllServerFarms successfully', function(done) {
        //uncomment below and update the code to test globalGetAllServerFarms
        //instance.globalGetAllServerFarms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetAllSites', function() {
      it('should call globalGetAllSites successfully', function(done) {
        //uncomment below and update the code to test globalGetAllSites
        //instance.globalGetAllSites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetSubscriptionGeoRegions', function() {
      it('should call globalGetSubscriptionGeoRegions successfully', function(done) {
        //uncomment below and update the code to test globalGetSubscriptionGeoRegions
        //instance.globalGetSubscriptionGeoRegions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalGetSubscriptionPublishingCredentials', function() {
      it('should call globalGetSubscriptionPublishingCredentials successfully', function(done) {
        //uncomment below and update the code to test globalGetSubscriptionPublishingCredentials
        //instance.globalGetSubscriptionPublishingCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalIsHostingEnvironmentNameAvailable', function() {
      it('should call globalIsHostingEnvironmentNameAvailable successfully', function(done) {
        //uncomment below and update the code to test globalIsHostingEnvironmentNameAvailable
        //instance.globalIsHostingEnvironmentNameAvailable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalIsHostingEnvironmentWithLegacyNameAvailable', function() {
      it('should call globalIsHostingEnvironmentWithLegacyNameAvailable successfully', function(done) {
        //uncomment below and update the code to test globalIsHostingEnvironmentWithLegacyNameAvailable
        //instance.globalIsHostingEnvironmentWithLegacyNameAvailable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalListPremierAddOnOffers', function() {
      it('should call globalListPremierAddOnOffers successfully', function(done) {
        //uncomment below and update the code to test globalListPremierAddOnOffers
        //instance.globalListPremierAddOnOffers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('globalUpdateSubscriptionPublishingCredentials', function() {
      it('should call globalUpdateSubscriptionPublishingCredentials successfully', function(done) {
        //uncomment below and update the code to test globalUpdateSubscriptionPublishingCredentials
        //instance.globalUpdateSubscriptionPublishingCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
