/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WebSiteManagementClient);
  }
}(this, function(expect, WebSiteManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WebSiteManagementClient.CloningInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CloningInfo', function() {
    it('should create an instance of CloningInfo', function() {
      // uncomment below and update the code to test CloningInfo
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be.a(WebSiteManagementClient.CloningInfo);
    });

    it('should have the property appSettingsOverrides (base name: "appSettingsOverrides")', function() {
      // uncomment below and update the code to test the property appSettingsOverrides
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property cloneCustomHostNames (base name: "cloneCustomHostNames")', function() {
      // uncomment below and update the code to test the property cloneCustomHostNames
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property cloneSourceControl (base name: "cloneSourceControl")', function() {
      // uncomment below and update the code to test the property cloneSourceControl
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property configureLoadBalancing (base name: "configureLoadBalancing")', function() {
      // uncomment below and update the code to test the property configureLoadBalancing
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property correlationId (base name: "correlationId")', function() {
      // uncomment below and update the code to test the property correlationId
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property hostingEnvironment (base name: "hostingEnvironment")', function() {
      // uncomment below and update the code to test the property hostingEnvironment
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property overwrite (base name: "overwrite")', function() {
      // uncomment below and update the code to test the property overwrite
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property sourceWebAppId (base name: "sourceWebAppId")', function() {
      // uncomment below and update the code to test the property sourceWebAppId
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property trafficManagerProfileId (base name: "trafficManagerProfileId")', function() {
      // uncomment below and update the code to test the property trafficManagerProfileId
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

    it('should have the property trafficManagerProfileName (base name: "trafficManagerProfileName")', function() {
      // uncomment below and update the code to test the property trafficManagerProfileName
      //var instance = new WebSiteManagementClient.CloningInfo();
      //expect(instance).to.be();
    });

  });

}));
