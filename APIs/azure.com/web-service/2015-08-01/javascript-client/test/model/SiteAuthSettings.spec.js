/**
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.WebSiteManagementClient);
  }
}(this, function(expect, WebSiteManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new WebSiteManagementClient.SiteAuthSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SiteAuthSettings', function() {
    it('should create an instance of SiteAuthSettings', function() {
      // uncomment below and update the code to test SiteAuthSettings
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be.a(WebSiteManagementClient.SiteAuthSettings);
    });

    it('should have the property aadClientId (base name: "aadClientId")', function() {
      // uncomment below and update the code to test the property aadClientId
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property additionalLoginParams (base name: "additionalLoginParams")', function() {
      // uncomment below and update the code to test the property additionalLoginParams
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property allowedAudiences (base name: "allowedAudiences")', function() {
      // uncomment below and update the code to test the property allowedAudiences
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property allowedExternalRedirectUrls (base name: "allowedExternalRedirectUrls")', function() {
      // uncomment below and update the code to test the property allowedExternalRedirectUrls
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property clientId (base name: "clientId")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property clientSecret (base name: "clientSecret")', function() {
      // uncomment below and update the code to test the property clientSecret
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultProvider (base name: "defaultProvider")', function() {
      // uncomment below and update the code to test the property defaultProvider
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property facebookAppId (base name: "facebookAppId")', function() {
      // uncomment below and update the code to test the property facebookAppId
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property facebookAppSecret (base name: "facebookAppSecret")', function() {
      // uncomment below and update the code to test the property facebookAppSecret
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property facebookOAuthScopes (base name: "facebookOAuthScopes")', function() {
      // uncomment below and update the code to test the property facebookOAuthScopes
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property googleClientId (base name: "googleClientId")', function() {
      // uncomment below and update the code to test the property googleClientId
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property googleClientSecret (base name: "googleClientSecret")', function() {
      // uncomment below and update the code to test the property googleClientSecret
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property googleOAuthScopes (base name: "googleOAuthScopes")', function() {
      // uncomment below and update the code to test the property googleOAuthScopes
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property httpApiPrefixPath (base name: "httpApiPrefixPath")', function() {
      // uncomment below and update the code to test the property httpApiPrefixPath
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property issuer (base name: "issuer")', function() {
      // uncomment below and update the code to test the property issuer
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property microsoftAccountClientId (base name: "microsoftAccountClientId")', function() {
      // uncomment below and update the code to test the property microsoftAccountClientId
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property microsoftAccountClientSecret (base name: "microsoftAccountClientSecret")', function() {
      // uncomment below and update the code to test the property microsoftAccountClientSecret
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property microsoftAccountOAuthScopes (base name: "microsoftAccountOAuthScopes")', function() {
      // uncomment below and update the code to test the property microsoftAccountOAuthScopes
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property openIdIssuer (base name: "openIdIssuer")', function() {
      // uncomment below and update the code to test the property openIdIssuer
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property tokenRefreshExtensionHours (base name: "tokenRefreshExtensionHours")', function() {
      // uncomment below and update the code to test the property tokenRefreshExtensionHours
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property tokenStoreEnabled (base name: "tokenStoreEnabled")', function() {
      // uncomment below and update the code to test the property tokenStoreEnabled
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property twitterConsumerKey (base name: "twitterConsumerKey")', function() {
      // uncomment below and update the code to test the property twitterConsumerKey
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property twitterConsumerSecret (base name: "twitterConsumerSecret")', function() {
      // uncomment below and update the code to test the property twitterConsumerSecret
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

    it('should have the property unauthenticatedClientAction (base name: "unauthenticatedClientAction")', function() {
      // uncomment below and update the code to test the property unauthenticatedClientAction
      //var instance = new WebSiteManagementClient.SiteAuthSettings();
      //expect(instance).to.be();
    });

  });

}));
