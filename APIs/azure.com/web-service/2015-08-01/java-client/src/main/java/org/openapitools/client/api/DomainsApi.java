/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Domain;
import org.openapitools.client.model.DomainCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainsCreateOrUpdateDomain
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsCreateOrUpdateDomainCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domain;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsCreateOrUpdateDomainValidateBeforeCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsCreateOrUpdateDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsCreateOrUpdateDomain(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsCreateOrUpdateDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsCreateOrUpdateDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling domainsCreateOrUpdateDomain(Async)");
        }

        return domainsCreateOrUpdateDomainCall(resourceGroupName, domainName, subscriptionId, apiVersion, domain, _callback);

    }

    /**
     * Creates a domain
     * 
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public Domain domainsCreateOrUpdateDomain(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain) throws ApiException {
        ApiResponse<Domain> localVarResp = domainsCreateOrUpdateDomainWithHttpInfo(resourceGroupName, domainName, subscriptionId, apiVersion, domain);
        return localVarResp.getData();
    }

    /**
     * Creates a domain
     * 
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Domain> domainsCreateOrUpdateDomainWithHttpInfo(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain) throws ApiException {
        okhttp3.Call localVarCall = domainsCreateOrUpdateDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, domain, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a domain (asynchronously)
     * 
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsCreateOrUpdateDomainAsync(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsCreateOrUpdateDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, domain, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsDeleteDomain
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceHardDeleteDomain If true then the domain will be deleted immediately instead of after 24 hours (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Domain does not exist in Azure database probably because it has already been deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsDeleteDomainCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Boolean forceHardDeleteDomain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceHardDeleteDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceHardDeleteDomain", forceHardDeleteDomain));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsDeleteDomainValidateBeforeCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Boolean forceHardDeleteDomain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsDeleteDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsDeleteDomain(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsDeleteDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsDeleteDomain(Async)");
        }

        return domainsDeleteDomainCall(resourceGroupName, domainName, subscriptionId, apiVersion, forceHardDeleteDomain, _callback);

    }

    /**
     * Deletes a domain
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceHardDeleteDomain If true then the domain will be deleted immediately instead of after 24 hours (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Domain does not exist in Azure database probably because it has already been deleted </td><td>  -  </td></tr>
     </table>
     */
    public Object domainsDeleteDomain(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Boolean forceHardDeleteDomain) throws ApiException {
        ApiResponse<Object> localVarResp = domainsDeleteDomainWithHttpInfo(resourceGroupName, domainName, subscriptionId, apiVersion, forceHardDeleteDomain);
        return localVarResp.getData();
    }

    /**
     * Deletes a domain
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceHardDeleteDomain If true then the domain will be deleted immediately instead of after 24 hours (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Domain does not exist in Azure database probably because it has already been deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> domainsDeleteDomainWithHttpInfo(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Boolean forceHardDeleteDomain) throws ApiException {
        okhttp3.Call localVarCall = domainsDeleteDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, forceHardDeleteDomain, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a domain (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceHardDeleteDomain If true then the domain will be deleted immediately instead of after 24 hours (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Domain does not exist in Azure database probably because it has already been deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsDeleteDomainAsync(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Boolean forceHardDeleteDomain, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsDeleteDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, forceHardDeleteDomain, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsGetDomain
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetDomainCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsGetDomainValidateBeforeCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsGetDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsGetDomain(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsGetDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsGetDomain(Async)");
        }

        return domainsGetDomainCall(resourceGroupName, domainName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets details of a domain
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Domain domainsGetDomain(String resourceGroupName, String domainName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Domain> localVarResp = domainsGetDomainWithHttpInfo(resourceGroupName, domainName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets details of a domain
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Domain> domainsGetDomainWithHttpInfo(String resourceGroupName, String domainName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainsGetDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets details of a domain (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetDomainAsync(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsGetDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsGetDomainOperation
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param operationId Domain purchase operation Id (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Domain purchase request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetDomainOperationCall(String resourceGroupName, String domainName, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsGetDomainOperationValidateBeforeCall(String resourceGroupName, String domainName, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsGetDomainOperation(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsGetDomainOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling domainsGetDomainOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsGetDomainOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsGetDomainOperation(Async)");
        }

        return domainsGetDomainOperationCall(resourceGroupName, domainName, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves the latest status of a domain purchase operation
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param operationId Domain purchase operation Id (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Domain purchase request failed </td><td>  -  </td></tr>
     </table>
     */
    public Domain domainsGetDomainOperation(String resourceGroupName, String domainName, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Domain> localVarResp = domainsGetDomainOperationWithHttpInfo(resourceGroupName, domainName, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves the latest status of a domain purchase operation
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param operationId Domain purchase operation Id (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Domain purchase request failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Domain> domainsGetDomainOperationWithHttpInfo(String resourceGroupName, String domainName, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainsGetDomainOperationValidateBeforeCall(resourceGroupName, domainName, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the latest status of a domain purchase operation (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param operationId Domain purchase operation Id (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Domain purchase request failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetDomainOperationAsync(String resourceGroupName, String domainName, String operationId, String subscriptionId, String apiVersion, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsGetDomainOperationValidateBeforeCall(resourceGroupName, domainName, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsGetDomains
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetDomainsCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsGetDomainsValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsGetDomains(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsGetDomains(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsGetDomains(Async)");
        }

        return domainsGetDomainsCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists domains under a resource group
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return DomainCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DomainCollection domainsGetDomains(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DomainCollection> localVarResp = domainsGetDomainsWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists domains under a resource group
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DomainCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainCollection> domainsGetDomainsWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = domainsGetDomainsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DomainCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists domains under a resource group (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsGetDomainsAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<DomainCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsGetDomainsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DomainCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsUpdateDomain
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdateDomainCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domain;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DomainRegistration/domains/{domainName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "domainName" + "}", localVarApiClient.escapeString(domainName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsUpdateDomainValidateBeforeCall(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling domainsUpdateDomain(Async)");
        }

        // verify the required parameter 'domainName' is set
        if (domainName == null) {
            throw new ApiException("Missing the required parameter 'domainName' when calling domainsUpdateDomain(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling domainsUpdateDomain(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling domainsUpdateDomain(Async)");
        }

        // verify the required parameter 'domain' is set
        if (domain == null) {
            throw new ApiException("Missing the required parameter 'domain' when calling domainsUpdateDomain(Async)");
        }

        return domainsUpdateDomainCall(resourceGroupName, domainName, subscriptionId, apiVersion, domain, _callback);

    }

    /**
     * Creates a domain
     * 
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @return Domain
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public Domain domainsUpdateDomain(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain) throws ApiException {
        ApiResponse<Domain> localVarResp = domainsUpdateDomainWithHttpInfo(resourceGroupName, domainName, subscriptionId, apiVersion, domain);
        return localVarResp.getData();
    }

    /**
     * Creates a domain
     * 
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @return ApiResponse&lt;Domain&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Domain> domainsUpdateDomainWithHttpInfo(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain) throws ApiException {
        okhttp3.Call localVarCall = domainsUpdateDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, domain, null);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a domain (asynchronously)
     * 
     * @param resourceGroupName &amp;gt;Name of the resource group (required)
     * @param domainName Name of the domain (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domain Domain registration information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Domain purchase was successful </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Domain purchase is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsUpdateDomainAsync(String resourceGroupName, String domainName, String subscriptionId, String apiVersion, Domain domain, final ApiCallback<Domain> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsUpdateDomainValidateBeforeCall(resourceGroupName, domainName, subscriptionId, apiVersion, domain, _callback);
        Type localVarReturnType = new TypeToken<Domain>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
