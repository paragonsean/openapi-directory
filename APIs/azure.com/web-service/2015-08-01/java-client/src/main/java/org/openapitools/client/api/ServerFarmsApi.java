/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MetricDefinitionCollection;
import org.openapitools.client.model.ResourceMetricCollection;
import org.openapitools.client.model.ServerFarmCollection;
import org.openapitools.client.model.ServerFarmWithRichSku;
import org.openapitools.client.model.SiteCollection;
import org.openapitools.client.model.VnetGateway;
import org.openapitools.client.model.VnetInfo;
import org.openapitools.client.model.VnetRoute;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServerFarmsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServerFarmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServerFarmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serverFarmsCreateOrUpdateServerFarm
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param serverFarmEnvelope Details of App Service Plan (required)
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsCreateOrUpdateServerFarmCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ServerFarmWithRichSku serverFarmEnvelope, Boolean allowPendingState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverFarmEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowPendingState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowPendingState", allowPendingState));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsCreateOrUpdateServerFarmValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ServerFarmWithRichSku serverFarmEnvelope, Boolean allowPendingState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsCreateOrUpdateServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsCreateOrUpdateServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsCreateOrUpdateServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsCreateOrUpdateServerFarm(Async)");
        }

        // verify the required parameter 'serverFarmEnvelope' is set
        if (serverFarmEnvelope == null) {
            throw new ApiException("Missing the required parameter 'serverFarmEnvelope' when calling serverFarmsCreateOrUpdateServerFarm(Async)");
        }

        return serverFarmsCreateOrUpdateServerFarmCall(resourceGroupName, name, subscriptionId, apiVersion, serverFarmEnvelope, allowPendingState, _callback);

    }

    /**
     * Creates or updates an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param serverFarmEnvelope Details of App Service Plan (required)
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan (optional)
     * @return ServerFarmWithRichSku
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmWithRichSku serverFarmsCreateOrUpdateServerFarm(String resourceGroupName, String name, String subscriptionId, String apiVersion, ServerFarmWithRichSku serverFarmEnvelope, Boolean allowPendingState) throws ApiException {
        ApiResponse<ServerFarmWithRichSku> localVarResp = serverFarmsCreateOrUpdateServerFarmWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, serverFarmEnvelope, allowPendingState);
        return localVarResp.getData();
    }

    /**
     * Creates or updates an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param serverFarmEnvelope Details of App Service Plan (required)
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan (optional)
     * @return ApiResponse&lt;ServerFarmWithRichSku&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmWithRichSku> serverFarmsCreateOrUpdateServerFarmWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, ServerFarmWithRichSku serverFarmEnvelope, Boolean allowPendingState) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsCreateOrUpdateServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, serverFarmEnvelope, allowPendingState, null);
        Type localVarReturnType = new TypeToken<ServerFarmWithRichSku>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates an App Service Plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param serverFarmEnvelope Details of App Service Plan (required)
     * @param allowPendingState OBSOLETE: If true, allow pending state for App Service Plan (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsCreateOrUpdateServerFarmAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, ServerFarmWithRichSku serverFarmEnvelope, Boolean allowPendingState, final ApiCallback<ServerFarmWithRichSku> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsCreateOrUpdateServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, serverFarmEnvelope, allowPendingState, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmWithRichSku>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsCreateOrUpdateVnetRoute
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsCreateOrUpdateVnetRouteCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = route;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsCreateOrUpdateVnetRouteValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling serverFarmsCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsCreateOrUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'route' is set
        if (route == null) {
            throw new ApiException("Missing the required parameter 'route' when calling serverFarmsCreateOrUpdateVnetRoute(Async)");
        }

        return serverFarmsCreateOrUpdateVnetRouteCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);

    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @return VnetRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public VnetRoute serverFarmsCreateOrUpdateVnetRoute(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route) throws ApiException {
        ApiResponse<VnetRoute> localVarResp = serverFarmsCreateOrUpdateVnetRouteWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        return localVarResp.getData();
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @return ApiResponse&lt;VnetRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetRoute> serverFarmsCreateOrUpdateVnetRouteWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsCreateOrUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, null);
        Type localVarReturnType = new TypeToken<VnetRoute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsCreateOrUpdateVnetRouteAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route, final ApiCallback<VnetRoute> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsCreateOrUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);
        Type localVarReturnType = new TypeToken<VnetRoute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsDeleteServerFarm
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsDeleteServerFarmCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsDeleteServerFarmValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsDeleteServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsDeleteServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsDeleteServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsDeleteServerFarm(Async)");
        }

        return serverFarmsDeleteServerFarmCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object serverFarmsDeleteServerFarm(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = serverFarmsDeleteServerFarmWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> serverFarmsDeleteServerFarmWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsDeleteServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a App Service Plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsDeleteServerFarmAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsDeleteServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsDeleteVnetRoute
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsDeleteVnetRouteCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsDeleteVnetRouteValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling serverFarmsDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsDeleteVnetRoute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsDeleteVnetRoute(Async)");
        }

        return serverFarmsDeleteVnetRouteCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes an existing route for a vnet in an app service plan.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public Object serverFarmsDeleteVnetRoute(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = serverFarmsDeleteVnetRouteWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes an existing route for a vnet in an app service plan.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> serverFarmsDeleteVnetRouteWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsDeleteVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes an existing route for a vnet in an app service plan. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsDeleteVnetRouteAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsDeleteVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetRouteForVnet
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetRouteForVnetCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetRouteForVnetValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetRouteForVnet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetRouteForVnet(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsGetRouteForVnet(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling serverFarmsGetRouteForVnet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetRouteForVnet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetRouteForVnet(Async)");
        }

        return serverFarmsGetRouteForVnetCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a specific route associated with a vnet, in an app service plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;VnetRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist </td><td>  -  </td></tr>
     </table>
     */
    public List<VnetRoute> serverFarmsGetRouteForVnet(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<VnetRoute>> localVarResp = serverFarmsGetRouteForVnetWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a specific route associated with a vnet, in an app service plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;VnetRoute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VnetRoute>> serverFarmsGetRouteForVnetWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetRouteForVnetValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<VnetRoute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a specific route associated with a vnet, in an app service plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Specified route does not exist </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetRouteForVnetAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, final ApiCallback<List<VnetRoute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetRouteForVnetValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<VnetRoute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetRoutesForVnet
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetRoutesForVnetCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetRoutesForVnetValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetRoutesForVnet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetRoutesForVnet(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsGetRoutesForVnet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetRoutesForVnet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetRoutesForVnet(Async)");
        }

        return serverFarmsGetRoutesForVnetCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;VnetRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VnetRoute> serverFarmsGetRoutesForVnet(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<VnetRoute>> localVarResp = serverFarmsGetRoutesForVnetWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;VnetRoute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VnetRoute>> serverFarmsGetRoutesForVnetWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetRoutesForVnetValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<VnetRoute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetRoutesForVnetAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<List<VnetRoute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetRoutesForVnetValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<VnetRoute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetServerFarm
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetServerFarmValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarm(Async)");
        }

        return serverFarmsGetServerFarmCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets specified App Service Plan in a resource group
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ServerFarmWithRichSku
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmWithRichSku serverFarmsGetServerFarm(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerFarmWithRichSku> localVarResp = serverFarmsGetServerFarmWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets specified App Service Plan in a resource group
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ServerFarmWithRichSku&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmWithRichSku> serverFarmsGetServerFarmWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerFarmWithRichSku>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets specified App Service Plan in a resource group (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ServerFarmWithRichSku> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmWithRichSku>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetServerFarmMetricDefintions
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmMetricDefintionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetServerFarmMetricDefintionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmMetricDefintions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetServerFarmMetricDefintions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmMetricDefintions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmMetricDefintions(Async)");
        }

        return serverFarmsGetServerFarmMetricDefintionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List of metrics that can be queried for an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return MetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionCollection serverFarmsGetServerFarmMetricDefintions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionCollection> localVarResp = serverFarmsGetServerFarmMetricDefintionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List of metrics that can be queried for an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionCollection> serverFarmsGetServerFarmMetricDefintionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetServerFarmMetricDefintionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of metrics that can be queried for an App Service Plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmMetricDefintionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<MetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetServerFarmMetricDefintionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetServerFarmMetrics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metrics are broken down per App Service Plan instance (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmMetricsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetServerFarmMetricsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetServerFarmMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmMetrics(Async)");
        }

        return serverFarmsGetServerFarmMetricsCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Queries for App Service Plan metrics
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metrics are broken down per App Service Plan instance (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ResourceMetricCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricCollection serverFarmsGetServerFarmMetrics(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<ResourceMetricCollection> localVarResp = serverFarmsGetServerFarmMetricsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Queries for App Service Plan metrics
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metrics are broken down per App Service Plan instance (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;ResourceMetricCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricCollection> serverFarmsGetServerFarmMetricsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetServerFarmMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queries for App Service Plan metrics (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metrics are broken down per App Service Plan instance (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmMetricsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<ResourceMetricCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetServerFarmMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetServerFarmOperation
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param operationId Id of Server farm operation\&quot;&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmOperationCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetServerFarmOperationValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetServerFarmOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling serverFarmsGetServerFarmOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmOperation(Async)");
        }

        return serverFarmsGetServerFarmOperationCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a server farm operation
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param operationId Id of Server farm operation\&quot;&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ServerFarmWithRichSku
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmWithRichSku serverFarmsGetServerFarmOperation(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerFarmWithRichSku> localVarResp = serverFarmsGetServerFarmOperationWithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a server farm operation
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param operationId Id of Server farm operation\&quot;&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ServerFarmWithRichSku&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmWithRichSku> serverFarmsGetServerFarmOperationWithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetServerFarmOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerFarmWithRichSku>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a server farm operation (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param operationId Id of Server farm operation\&quot;&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmOperationAsync(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<ServerFarmWithRichSku> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetServerFarmOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmWithRichSku>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetServerFarmSites
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmSitesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetServerFarmSitesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmSites(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetServerFarmSites(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmSites(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmSites(Async)");
        }

        return serverFarmsGetServerFarmSitesCall(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top, _callback);

    }

    /**
     * Gets list of Apps associated with an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @return SiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteCollection serverFarmsGetServerFarmSites(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top) throws ApiException {
        ApiResponse<SiteCollection> localVarResp = serverFarmsGetServerFarmSitesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top);
        return localVarResp.getData();
    }

    /**
     * Gets list of Apps associated with an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @return ApiResponse&lt;SiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCollection> serverFarmsGetServerFarmSitesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetServerFarmSitesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top, null);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of Apps associated with an App Service Plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $skipToken Skip to of web apps in a list. If specified, the resulting list will contain web apps starting from (including) the skipToken. Else, the resulting list contains web apps from the start of the list (optional)
     * @param $filter Supported filter: $filter&#x3D;state eq running. Returns only web apps that are currently running (optional)
     * @param $top List page size. If specified, results are paged. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmSitesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $skipToken, String $filter, String $top, final ApiCallback<SiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetServerFarmSitesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top, _callback);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetServerFarmVnetGateway
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of the App Service Plan (required)
     * @param vnetName Name of the virtual network (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmVnetGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetServerFarmVnetGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsGetServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling serverFarmsGetServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarmVnetGateway(Async)");
        }

        return serverFarmsGetServerFarmVnetGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the vnet gateway.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of the App Service Plan (required)
     * @param vnetName Name of the virtual network (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return VnetGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetGateway serverFarmsGetServerFarmVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<VnetGateway> localVarResp = serverFarmsGetServerFarmVnetGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the vnet gateway.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of the App Service Plan (required)
     * @param vnetName Name of the virtual network (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;VnetGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetGateway> serverFarmsGetServerFarmVnetGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetServerFarmVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the vnet gateway. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of the App Service Plan (required)
     * @param vnetName Name of the virtual network (required)
     * @param gatewayName Name of the gateway. Only the &#39;primary&#39; gateway is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmVnetGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback<VnetGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetServerFarmVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetServerFarms
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmsCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetServerFarmsValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetServerFarms(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetServerFarms(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetServerFarms(Async)");
        }

        return serverFarmsGetServerFarmsCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets collection of App Service Plans in a resource group for a given subscription.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ServerFarmCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmCollection serverFarmsGetServerFarms(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerFarmCollection> localVarResp = serverFarmsGetServerFarmsWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets collection of App Service Plans in a resource group for a given subscription.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ServerFarmCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmCollection> serverFarmsGetServerFarmsWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetServerFarmsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets collection of App Service Plans in a resource group for a given subscription. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetServerFarmsAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<ServerFarmCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetServerFarmsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetVnetFromServerFarm
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetVnetFromServerFarmCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetVnetFromServerFarmValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetVnetFromServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetVnetFromServerFarm(Async)");
        }

        return serverFarmsGetVnetFromServerFarmCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a vnet associated with an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return VnetInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found </td><td>  -  </td></tr>
     </table>
     */
    public VnetInfo serverFarmsGetVnetFromServerFarm(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<VnetInfo> localVarResp = serverFarmsGetVnetFromServerFarmWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a vnet associated with an App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetInfo> serverFarmsGetVnetFromServerFarmWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetVnetFromServerFarmValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a vnet associated with an App Service Plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Virtual network could not be found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetVnetFromServerFarmAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<VnetInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetVnetFromServerFarmValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsGetVnetsForServerFarm
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetVnetsForServerFarmCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsGetVnetsForServerFarmValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsGetVnetsForServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsGetVnetsForServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsGetVnetsForServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsGetVnetsForServerFarm(Async)");
        }

        return serverFarmsGetVnetsForServerFarmCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets list of VNets associated with App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VnetInfo> serverFarmsGetVnetsForServerFarm(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<VnetInfo>> localVarResp = serverFarmsGetVnetsForServerFarmWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets list of VNets associated with App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;VnetInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VnetInfo>> serverFarmsGetVnetsForServerFarmWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsGetVnetsForServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<VnetInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of VNets associated with App Service Plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsGetVnetsForServerFarmAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<VnetInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsGetVnetsForServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<VnetInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsRebootWorkerForServerFarm
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param workerName Name of worker machine, typically starts with RD (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsRebootWorkerForServerFarmCall(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/workers/{workerName}/reboot"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerName" + "}", localVarApiClient.escapeString(workerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsRebootWorkerForServerFarmValidateBeforeCall(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsRebootWorkerForServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsRebootWorkerForServerFarm(Async)");
        }

        // verify the required parameter 'workerName' is set
        if (workerName == null) {
            throw new ApiException("Missing the required parameter 'workerName' when calling serverFarmsRebootWorkerForServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsRebootWorkerForServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsRebootWorkerForServerFarm(Async)");
        }

        return serverFarmsRebootWorkerForServerFarmCall(resourceGroupName, name, workerName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Submit a reboot request for a worker machine in the specified server farm
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param workerName Name of worker machine, typically starts with RD (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object serverFarmsRebootWorkerForServerFarm(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = serverFarmsRebootWorkerForServerFarmWithHttpInfo(resourceGroupName, name, workerName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Submit a reboot request for a worker machine in the specified server farm
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param workerName Name of worker machine, typically starts with RD (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> serverFarmsRebootWorkerForServerFarmWithHttpInfo(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsRebootWorkerForServerFarmValidateBeforeCall(resourceGroupName, name, workerName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Submit a reboot request for a worker machine in the specified server farm (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of server farm (required)
     * @param workerName Name of worker machine, typically starts with RD (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsRebootWorkerForServerFarmAsync(String resourceGroupName, String name, String workerName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsRebootWorkerForServerFarmValidateBeforeCall(resourceGroupName, name, workerName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsRestartSitesForServerFarm
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsRestartSitesForServerFarmCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/restartSites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("softRestart", softRestart));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsRestartSitesForServerFarmValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsRestartSitesForServerFarm(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsRestartSitesForServerFarm(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsRestartSitesForServerFarm(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsRestartSitesForServerFarm(Async)");
        }

        return serverFarmsRestartSitesForServerFarmCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, _callback);

    }

    /**
     * Restarts web apps in a specified App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object serverFarmsRestartSitesForServerFarm(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart) throws ApiException {
        ApiResponse<Object> localVarResp = serverFarmsRestartSitesForServerFarmWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, softRestart);
        return localVarResp.getData();
    }

    /**
     * Restarts web apps in a specified App Service Plan
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> serverFarmsRestartSitesForServerFarmWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsRestartSitesForServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restarts web apps in a specified App Service Plan (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the apps if necessary. Hard restart always restarts and reprovisions the apps (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsRestartSitesForServerFarmAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsRestartSitesForServerFarmValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsUpdateServerFarmVnetGateway
     * @param resourceGroupName The resource group (required)
     * @param name The name of the App Service Plan (required)
     * @param vnetName The name of the virtual network (required)
     * @param gatewayName The name of the gateway. Only &#39;primary&#39; is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The gateway entity. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsUpdateServerFarmVnetGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsUpdateServerFarmVnetGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsUpdateServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsUpdateServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsUpdateServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling serverFarmsUpdateServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsUpdateServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsUpdateServerFarmVnetGateway(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling serverFarmsUpdateServerFarmVnetGateway(Async)");
        }

        return serverFarmsUpdateServerFarmVnetGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Updates the vnet gateway
     * 
     * @param resourceGroupName The resource group (required)
     * @param name The name of the App Service Plan (required)
     * @param vnetName The name of the virtual network (required)
     * @param gatewayName The name of the gateway. Only &#39;primary&#39; is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The gateway entity. (required)
     * @return VnetGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetGateway serverFarmsUpdateServerFarmVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        ApiResponse<VnetGateway> localVarResp = serverFarmsUpdateServerFarmVnetGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Updates the vnet gateway
     * 
     * @param resourceGroupName The resource group (required)
     * @param name The name of the App Service Plan (required)
     * @param vnetName The name of the virtual network (required)
     * @param gatewayName The name of the gateway. Only &#39;primary&#39; is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The gateway entity. (required)
     * @return ApiResponse&lt;VnetGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetGateway> serverFarmsUpdateServerFarmVnetGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsUpdateServerFarmVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the vnet gateway (asynchronously)
     * 
     * @param resourceGroupName The resource group (required)
     * @param name The name of the App Service Plan (required)
     * @param vnetName The name of the virtual network (required)
     * @param gatewayName The name of the gateway. Only &#39;primary&#39; is supported. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The gateway entity. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsUpdateServerFarmVnetGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback<VnetGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsUpdateServerFarmVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serverFarmsUpdateVnetRoute
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsUpdateVnetRouteCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = route;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/serverfarms/{name}/virtualNetworkConnections/{vnetName}/routes/{routeName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "routeName" + "}", localVarApiClient.escapeString(routeName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serverFarmsUpdateVnetRouteValidateBeforeCall(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serverFarmsUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling serverFarmsUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling serverFarmsUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'routeName' is set
        if (routeName == null) {
            throw new ApiException("Missing the required parameter 'routeName' when calling serverFarmsUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serverFarmsUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serverFarmsUpdateVnetRoute(Async)");
        }

        // verify the required parameter 'route' is set
        if (route == null) {
            throw new ApiException("Missing the required parameter 'route' when calling serverFarmsUpdateVnetRoute(Async)");
        }

        return serverFarmsUpdateVnetRouteCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);

    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @return VnetRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public VnetRoute serverFarmsUpdateVnetRoute(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route) throws ApiException {
        ApiResponse<VnetRoute> localVarResp = serverFarmsUpdateVnetRouteWithHttpInfo(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        return localVarResp.getData();
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @return ApiResponse&lt;VnetRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetRoute> serverFarmsUpdateVnetRouteWithHttpInfo(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route) throws ApiException {
        okhttp3.Call localVarCall = serverFarmsUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, null);
        Type localVarReturnType = new TypeToken<VnetRoute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of App Service Plan (required)
     * @param vnetName Name of virtual network (required)
     * @param routeName Name of the virtual network route (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param route The route object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. Ensure that required parameters are given, and that addresses and address spaces are valid </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route not found. This will only occur when using the PATCH verb. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serverFarmsUpdateVnetRouteAsync(String resourceGroupName, String name, String vnetName, String routeName, String subscriptionId, String apiVersion, VnetRoute route, final ApiCallback<VnetRoute> _callback) throws ApiException {

        okhttp3.Call localVarCall = serverFarmsUpdateVnetRouteValidateBeforeCall(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route, _callback);
        Type localVarReturnType = new TypeToken<VnetRoute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
