/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Class containing names for connection strings and application settings to be marked as sticky to the slot               and not moved during swap operation              This is valid for all deployment slots under the site
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlotConfigNames {
  public static final String SERIALIZED_NAME_APP_SETTING_NAMES = "appSettingNames";
  @SerializedName(SERIALIZED_NAME_APP_SETTING_NAMES)
  private List<String> appSettingNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTION_STRING_NAMES = "connectionStringNames";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING_NAMES)
  private List<String> connectionStringNames = new ArrayList<>();

  public SlotConfigNames() {
  }

  public SlotConfigNames appSettingNames(List<String> appSettingNames) {
    this.appSettingNames = appSettingNames;
    return this;
  }

  public SlotConfigNames addAppSettingNamesItem(String appSettingNamesItem) {
    if (this.appSettingNames == null) {
      this.appSettingNames = new ArrayList<>();
    }
    this.appSettingNames.add(appSettingNamesItem);
    return this;
  }

  /**
   * List of application settings names
   * @return appSettingNames
   */
  @javax.annotation.Nullable
  public List<String> getAppSettingNames() {
    return appSettingNames;
  }

  public void setAppSettingNames(List<String> appSettingNames) {
    this.appSettingNames = appSettingNames;
  }


  public SlotConfigNames connectionStringNames(List<String> connectionStringNames) {
    this.connectionStringNames = connectionStringNames;
    return this;
  }

  public SlotConfigNames addConnectionStringNamesItem(String connectionStringNamesItem) {
    if (this.connectionStringNames == null) {
      this.connectionStringNames = new ArrayList<>();
    }
    this.connectionStringNames.add(connectionStringNamesItem);
    return this;
  }

  /**
   * List of connection string names
   * @return connectionStringNames
   */
  @javax.annotation.Nullable
  public List<String> getConnectionStringNames() {
    return connectionStringNames;
  }

  public void setConnectionStringNames(List<String> connectionStringNames) {
    this.connectionStringNames = connectionStringNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlotConfigNames slotConfigNames = (SlotConfigNames) o;
    return Objects.equals(this.appSettingNames, slotConfigNames.appSettingNames) &&
        Objects.equals(this.connectionStringNames, slotConfigNames.connectionStringNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appSettingNames, connectionStringNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlotConfigNames {\n");
    sb.append("    appSettingNames: ").append(toIndentedString(appSettingNames)).append("\n");
    sb.append("    connectionStringNames: ").append(toIndentedString(connectionStringNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appSettingNames");
    openapiFields.add("connectionStringNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlotConfigNames
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlotConfigNames.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlotConfigNames is not found in the empty JSON string", SlotConfigNames.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlotConfigNames.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlotConfigNames` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("appSettingNames") != null && !jsonObj.get("appSettingNames").isJsonNull() && !jsonObj.get("appSettingNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appSettingNames` to be an array in the JSON string but got `%s`", jsonObj.get("appSettingNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("connectionStringNames") != null && !jsonObj.get("connectionStringNames").isJsonNull() && !jsonObj.get("connectionStringNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionStringNames` to be an array in the JSON string but got `%s`", jsonObj.get("connectionStringNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlotConfigNames.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlotConfigNames' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlotConfigNames> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlotConfigNames.class));

       return (TypeAdapter<T>) new TypeAdapter<SlotConfigNames>() {
           @Override
           public void write(JsonWriter out, SlotConfigNames value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlotConfigNames read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlotConfigNames given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlotConfigNames
   * @throws IOException if the JSON string is invalid with respect to SlotConfigNames
   */
  public static SlotConfigNames fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlotConfigNames.class);
  }

  /**
   * Convert an instance of SlotConfigNames to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

