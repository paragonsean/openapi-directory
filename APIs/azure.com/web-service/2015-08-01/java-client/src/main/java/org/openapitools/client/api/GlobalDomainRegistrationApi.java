/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DomainAvailablilityCheckResult;
import org.openapitools.client.model.DomainCollection;
import org.openapitools.client.model.DomainControlCenterSsoRequest;
import org.openapitools.client.model.DomainRecommendationSearchParameters;
import org.openapitools.client.model.DomainRegistrationInput;
import org.openapitools.client.model.NameIdentifier;
import org.openapitools.client.model.NameIdentifierCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalDomainRegistrationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalDomainRegistrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalDomainRegistrationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for globalDomainRegistrationCheckDomainAvailability
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param identifier Name of the domain (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationCheckDomainAvailabilityCall(String subscriptionId, String apiVersion, NameIdentifier identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identifier;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/checkDomainAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDomainRegistrationCheckDomainAvailabilityValidateBeforeCall(String subscriptionId, String apiVersion, NameIdentifier identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling globalDomainRegistrationCheckDomainAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalDomainRegistrationCheckDomainAvailability(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling globalDomainRegistrationCheckDomainAvailability(Async)");
        }

        return globalDomainRegistrationCheckDomainAvailabilityCall(subscriptionId, apiVersion, identifier, _callback);

    }

    /**
     * Checks if a domain is available for registration
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param identifier Name of the domain (required)
     * @return DomainAvailablilityCheckResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DomainAvailablilityCheckResult globalDomainRegistrationCheckDomainAvailability(String subscriptionId, String apiVersion, NameIdentifier identifier) throws ApiException {
        ApiResponse<DomainAvailablilityCheckResult> localVarResp = globalDomainRegistrationCheckDomainAvailabilityWithHttpInfo(subscriptionId, apiVersion, identifier);
        return localVarResp.getData();
    }

    /**
     * Checks if a domain is available for registration
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param identifier Name of the domain (required)
     * @return ApiResponse&lt;DomainAvailablilityCheckResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAvailablilityCheckResult> globalDomainRegistrationCheckDomainAvailabilityWithHttpInfo(String subscriptionId, String apiVersion, NameIdentifier identifier) throws ApiException {
        okhttp3.Call localVarCall = globalDomainRegistrationCheckDomainAvailabilityValidateBeforeCall(subscriptionId, apiVersion, identifier, null);
        Type localVarReturnType = new TypeToken<DomainAvailablilityCheckResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks if a domain is available for registration (asynchronously)
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param identifier Name of the domain (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationCheckDomainAvailabilityAsync(String subscriptionId, String apiVersion, NameIdentifier identifier, final ApiCallback<DomainAvailablilityCheckResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDomainRegistrationCheckDomainAvailabilityValidateBeforeCall(subscriptionId, apiVersion, identifier, _callback);
        Type localVarReturnType = new TypeToken<DomainAvailablilityCheckResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDomainRegistrationGetAllDomains
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationGetAllDomainsCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/domains"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDomainRegistrationGetAllDomainsValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling globalDomainRegistrationGetAllDomains(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalDomainRegistrationGetAllDomains(Async)");
        }

        return globalDomainRegistrationGetAllDomainsCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists all domains in a subscription
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return DomainCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DomainCollection globalDomainRegistrationGetAllDomains(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DomainCollection> localVarResp = globalDomainRegistrationGetAllDomainsWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all domains in a subscription
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DomainCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainCollection> globalDomainRegistrationGetAllDomainsWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = globalDomainRegistrationGetAllDomainsValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DomainCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all domains in a subscription (asynchronously)
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationGetAllDomainsAsync(String subscriptionId, String apiVersion, final ApiCallback<DomainCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDomainRegistrationGetAllDomainsValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DomainCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDomainRegistrationGetDomainControlCenterSsoRequest
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationGetDomainControlCenterSsoRequestCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/generateSsoRequest"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDomainRegistrationGetDomainControlCenterSsoRequestValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling globalDomainRegistrationGetDomainControlCenterSsoRequest(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalDomainRegistrationGetDomainControlCenterSsoRequest(Async)");
        }

        return globalDomainRegistrationGetDomainControlCenterSsoRequestCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Generates a single sign on request for domain management portal
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return DomainControlCenterSsoRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DomainControlCenterSsoRequest globalDomainRegistrationGetDomainControlCenterSsoRequest(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DomainControlCenterSsoRequest> localVarResp = globalDomainRegistrationGetDomainControlCenterSsoRequestWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Generates a single sign on request for domain management portal
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DomainControlCenterSsoRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainControlCenterSsoRequest> globalDomainRegistrationGetDomainControlCenterSsoRequestWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = globalDomainRegistrationGetDomainControlCenterSsoRequestValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DomainControlCenterSsoRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a single sign on request for domain management portal (asynchronously)
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationGetDomainControlCenterSsoRequestAsync(String subscriptionId, String apiVersion, final ApiCallback<DomainControlCenterSsoRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDomainRegistrationGetDomainControlCenterSsoRequestValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DomainControlCenterSsoRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDomainRegistrationListDomainRecommendations
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param parameters Domain recommendation search parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationListDomainRecommendationsCall(String subscriptionId, String apiVersion, DomainRecommendationSearchParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/listDomainRecommendations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDomainRegistrationListDomainRecommendationsValidateBeforeCall(String subscriptionId, String apiVersion, DomainRecommendationSearchParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling globalDomainRegistrationListDomainRecommendations(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalDomainRegistrationListDomainRecommendations(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling globalDomainRegistrationListDomainRecommendations(Async)");
        }

        return globalDomainRegistrationListDomainRecommendationsCall(subscriptionId, apiVersion, parameters, _callback);

    }

    /**
     * Lists domain recommendations based on keywords
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param parameters Domain recommendation search parameters (required)
     * @return NameIdentifierCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public NameIdentifierCollection globalDomainRegistrationListDomainRecommendations(String subscriptionId, String apiVersion, DomainRecommendationSearchParameters parameters) throws ApiException {
        ApiResponse<NameIdentifierCollection> localVarResp = globalDomainRegistrationListDomainRecommendationsWithHttpInfo(subscriptionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Lists domain recommendations based on keywords
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param parameters Domain recommendation search parameters (required)
     * @return ApiResponse&lt;NameIdentifierCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NameIdentifierCollection> globalDomainRegistrationListDomainRecommendationsWithHttpInfo(String subscriptionId, String apiVersion, DomainRecommendationSearchParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = globalDomainRegistrationListDomainRecommendationsValidateBeforeCall(subscriptionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<NameIdentifierCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists domain recommendations based on keywords (asynchronously)
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param parameters Domain recommendation search parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationListDomainRecommendationsAsync(String subscriptionId, String apiVersion, DomainRecommendationSearchParameters parameters, final ApiCallback<NameIdentifierCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDomainRegistrationListDomainRecommendationsValidateBeforeCall(subscriptionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<NameIdentifierCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for globalDomainRegistrationValidateDomainPurchaseInformation
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domainRegistrationInput Domain registration information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationValidateDomainPurchaseInformationCall(String subscriptionId, String apiVersion, DomainRegistrationInput domainRegistrationInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainRegistrationInput;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DomainRegistration/validateDomainRegistrationInformation"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call globalDomainRegistrationValidateDomainPurchaseInformationValidateBeforeCall(String subscriptionId, String apiVersion, DomainRegistrationInput domainRegistrationInput, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling globalDomainRegistrationValidateDomainPurchaseInformation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling globalDomainRegistrationValidateDomainPurchaseInformation(Async)");
        }

        // verify the required parameter 'domainRegistrationInput' is set
        if (domainRegistrationInput == null) {
            throw new ApiException("Missing the required parameter 'domainRegistrationInput' when calling globalDomainRegistrationValidateDomainPurchaseInformation(Async)");
        }

        return globalDomainRegistrationValidateDomainPurchaseInformationCall(subscriptionId, apiVersion, domainRegistrationInput, _callback);

    }

    /**
     * Validates domain registration information
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domainRegistrationInput Domain registration information (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object globalDomainRegistrationValidateDomainPurchaseInformation(String subscriptionId, String apiVersion, DomainRegistrationInput domainRegistrationInput) throws ApiException {
        ApiResponse<Object> localVarResp = globalDomainRegistrationValidateDomainPurchaseInformationWithHttpInfo(subscriptionId, apiVersion, domainRegistrationInput);
        return localVarResp.getData();
    }

    /**
     * Validates domain registration information
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domainRegistrationInput Domain registration information (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> globalDomainRegistrationValidateDomainPurchaseInformationWithHttpInfo(String subscriptionId, String apiVersion, DomainRegistrationInput domainRegistrationInput) throws ApiException {
        okhttp3.Call localVarCall = globalDomainRegistrationValidateDomainPurchaseInformationValidateBeforeCall(subscriptionId, apiVersion, domainRegistrationInput, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validates domain registration information (asynchronously)
     * 
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param domainRegistrationInput Domain registration information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call globalDomainRegistrationValidateDomainPurchaseInformationAsync(String subscriptionId, String apiVersion, DomainRegistrationInput domainRegistrationInput, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = globalDomainRegistrationValidateDomainPurchaseInformationValidateBeforeCall(subscriptionId, apiVersion, domainRegistrationInput, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
