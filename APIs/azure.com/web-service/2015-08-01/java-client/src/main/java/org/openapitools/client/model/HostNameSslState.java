/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Object that represents a SSL-enabled host name.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HostNameSslState {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * SSL type
   */
  @JsonAdapter(SslStateEnum.Adapter.class)
  public enum SslStateEnum {
    DISABLED("Disabled"),
    
    SNI_ENABLED("SniEnabled"),
    
    IP_BASED_ENABLED("IpBasedEnabled");

    private String value;

    SslStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SslStateEnum fromValue(String value) {
      for (SslStateEnum b : SslStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SslStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SslStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SslStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SslStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SslStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SSL_STATE = "sslState";
  @SerializedName(SERIALIZED_NAME_SSL_STATE)
  private SslStateEnum sslState;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_TO_UPDATE = "toUpdate";
  @SerializedName(SERIALIZED_NAME_TO_UPDATE)
  private Boolean toUpdate;

  public static final String SERIALIZED_NAME_VIRTUAL_I_P = "virtualIP";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_I_P)
  private String virtualIP;

  public HostNameSslState() {
  }

  public HostNameSslState name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Host name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public HostNameSslState sslState(SslStateEnum sslState) {
    this.sslState = sslState;
    return this;
  }

  /**
   * SSL type
   * @return sslState
   */
  @javax.annotation.Nonnull
  public SslStateEnum getSslState() {
    return sslState;
  }

  public void setSslState(SslStateEnum sslState) {
    this.sslState = sslState;
  }


  public HostNameSslState thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * SSL cert thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public HostNameSslState toUpdate(Boolean toUpdate) {
    this.toUpdate = toUpdate;
    return this;
  }

  /**
   * Set this flag to update existing host name
   * @return toUpdate
   */
  @javax.annotation.Nullable
  public Boolean getToUpdate() {
    return toUpdate;
  }

  public void setToUpdate(Boolean toUpdate) {
    this.toUpdate = toUpdate;
  }


  public HostNameSslState virtualIP(String virtualIP) {
    this.virtualIP = virtualIP;
    return this;
  }

  /**
   * Virtual IP address assigned to the host name if IP based SSL is enabled
   * @return virtualIP
   */
  @javax.annotation.Nullable
  public String getVirtualIP() {
    return virtualIP;
  }

  public void setVirtualIP(String virtualIP) {
    this.virtualIP = virtualIP;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostNameSslState hostNameSslState = (HostNameSslState) o;
    return Objects.equals(this.name, hostNameSslState.name) &&
        Objects.equals(this.sslState, hostNameSslState.sslState) &&
        Objects.equals(this.thumbprint, hostNameSslState.thumbprint) &&
        Objects.equals(this.toUpdate, hostNameSslState.toUpdate) &&
        Objects.equals(this.virtualIP, hostNameSslState.virtualIP);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, sslState, thumbprint, toUpdate, virtualIP);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostNameSslState {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sslState: ").append(toIndentedString(sslState)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    toUpdate: ").append(toIndentedString(toUpdate)).append("\n");
    sb.append("    virtualIP: ").append(toIndentedString(virtualIP)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("sslState");
    openapiFields.add("thumbprint");
    openapiFields.add("toUpdate");
    openapiFields.add("virtualIP");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sslState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HostNameSslState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HostNameSslState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HostNameSslState is not found in the empty JSON string", HostNameSslState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HostNameSslState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HostNameSslState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HostNameSslState.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("sslState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslState").toString()));
      }
      // validate the required field `sslState`
      SslStateEnum.validateJsonElement(jsonObj.get("sslState"));
      if ((jsonObj.get("thumbprint") != null && !jsonObj.get("thumbprint").isJsonNull()) && !jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if ((jsonObj.get("virtualIP") != null && !jsonObj.get("virtualIP").isJsonNull()) && !jsonObj.get("virtualIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualIP").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HostNameSslState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HostNameSslState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HostNameSslState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HostNameSslState.class));

       return (TypeAdapter<T>) new TypeAdapter<HostNameSslState>() {
           @Override
           public void write(JsonWriter out, HostNameSslState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HostNameSslState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HostNameSslState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HostNameSslState
   * @throws IOException if the JSON string is invalid with respect to HostNameSslState
   */
  public static HostNameSslState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HostNameSslState.class);
  }

  /**
   * Convert an instance of HostNameSslState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

