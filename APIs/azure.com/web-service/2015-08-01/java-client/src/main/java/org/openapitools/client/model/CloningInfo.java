/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents information needed for cloning operation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloningInfo {
  public static final String SERIALIZED_NAME_APP_SETTINGS_OVERRIDES = "appSettingsOverrides";
  @SerializedName(SERIALIZED_NAME_APP_SETTINGS_OVERRIDES)
  private Map<String, String> appSettingsOverrides = new HashMap<>();

  public static final String SERIALIZED_NAME_CLONE_CUSTOM_HOST_NAMES = "cloneCustomHostNames";
  @SerializedName(SERIALIZED_NAME_CLONE_CUSTOM_HOST_NAMES)
  private Boolean cloneCustomHostNames;

  public static final String SERIALIZED_NAME_CLONE_SOURCE_CONTROL = "cloneSourceControl";
  @SerializedName(SERIALIZED_NAME_CLONE_SOURCE_CONTROL)
  private Boolean cloneSourceControl;

  public static final String SERIALIZED_NAME_CONFIGURE_LOAD_BALANCING = "configureLoadBalancing";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_LOAD_BALANCING)
  private Boolean configureLoadBalancing;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_HOSTING_ENVIRONMENT = "hostingEnvironment";
  @SerializedName(SERIALIZED_NAME_HOSTING_ENVIRONMENT)
  private String hostingEnvironment;

  public static final String SERIALIZED_NAME_OVERWRITE = "overwrite";
  @SerializedName(SERIALIZED_NAME_OVERWRITE)
  private Boolean overwrite;

  public static final String SERIALIZED_NAME_SOURCE_WEB_APP_ID = "sourceWebAppId";
  @SerializedName(SERIALIZED_NAME_SOURCE_WEB_APP_ID)
  private String sourceWebAppId;

  public static final String SERIALIZED_NAME_TRAFFIC_MANAGER_PROFILE_ID = "trafficManagerProfileId";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_MANAGER_PROFILE_ID)
  private String trafficManagerProfileId;

  public static final String SERIALIZED_NAME_TRAFFIC_MANAGER_PROFILE_NAME = "trafficManagerProfileName";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_MANAGER_PROFILE_NAME)
  private String trafficManagerProfileName;

  public CloningInfo() {
  }

  public CloningInfo appSettingsOverrides(Map<String, String> appSettingsOverrides) {
    this.appSettingsOverrides = appSettingsOverrides;
    return this;
  }

  public CloningInfo putAppSettingsOverridesItem(String key, String appSettingsOverridesItem) {
    if (this.appSettingsOverrides == null) {
      this.appSettingsOverrides = new HashMap<>();
    }
    this.appSettingsOverrides.put(key, appSettingsOverridesItem);
    return this;
  }

  /**
   * Application settings overrides for cloned web app. If specified these settings will override the settings cloned               from source web app. If not specified, application settings from source web app are retained.
   * @return appSettingsOverrides
   */
  @javax.annotation.Nullable
  public Map<String, String> getAppSettingsOverrides() {
    return appSettingsOverrides;
  }

  public void setAppSettingsOverrides(Map<String, String> appSettingsOverrides) {
    this.appSettingsOverrides = appSettingsOverrides;
  }


  public CloningInfo cloneCustomHostNames(Boolean cloneCustomHostNames) {
    this.cloneCustomHostNames = cloneCustomHostNames;
    return this;
  }

  /**
   * If true, clone custom hostnames from source web app
   * @return cloneCustomHostNames
   */
  @javax.annotation.Nullable
  public Boolean getCloneCustomHostNames() {
    return cloneCustomHostNames;
  }

  public void setCloneCustomHostNames(Boolean cloneCustomHostNames) {
    this.cloneCustomHostNames = cloneCustomHostNames;
  }


  public CloningInfo cloneSourceControl(Boolean cloneSourceControl) {
    this.cloneSourceControl = cloneSourceControl;
    return this;
  }

  /**
   * Clone source control from source web app
   * @return cloneSourceControl
   */
  @javax.annotation.Nullable
  public Boolean getCloneSourceControl() {
    return cloneSourceControl;
  }

  public void setCloneSourceControl(Boolean cloneSourceControl) {
    this.cloneSourceControl = cloneSourceControl;
  }


  public CloningInfo configureLoadBalancing(Boolean configureLoadBalancing) {
    this.configureLoadBalancing = configureLoadBalancing;
    return this;
  }

  /**
   * If specified configure load balancing for source and clone site
   * @return configureLoadBalancing
   */
  @javax.annotation.Nullable
  public Boolean getConfigureLoadBalancing() {
    return configureLoadBalancing;
  }

  public void setConfigureLoadBalancing(Boolean configureLoadBalancing) {
    this.configureLoadBalancing = configureLoadBalancing;
  }


  public CloningInfo correlationId(String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * Correlation Id of cloning operation. This id ties multiple cloning operations              together to use the same snapshot
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public CloningInfo hostingEnvironment(String hostingEnvironment) {
    this.hostingEnvironment = hostingEnvironment;
    return this;
  }

  /**
   * Hosting environment
   * @return hostingEnvironment
   */
  @javax.annotation.Nullable
  public String getHostingEnvironment() {
    return hostingEnvironment;
  }

  public void setHostingEnvironment(String hostingEnvironment) {
    this.hostingEnvironment = hostingEnvironment;
  }


  public CloningInfo overwrite(Boolean overwrite) {
    this.overwrite = overwrite;
    return this;
  }

  /**
   * Overwrite destination web app
   * @return overwrite
   */
  @javax.annotation.Nullable
  public Boolean getOverwrite() {
    return overwrite;
  }

  public void setOverwrite(Boolean overwrite) {
    this.overwrite = overwrite;
  }


  public CloningInfo sourceWebAppId(String sourceWebAppId) {
    this.sourceWebAppId = sourceWebAppId;
    return this;
  }

  /**
   * ARM resource id of the source web app. Web app resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName} for production slots and               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slotName} for other slots
   * @return sourceWebAppId
   */
  @javax.annotation.Nullable
  public String getSourceWebAppId() {
    return sourceWebAppId;
  }

  public void setSourceWebAppId(String sourceWebAppId) {
    this.sourceWebAppId = sourceWebAppId;
  }


  public CloningInfo trafficManagerProfileId(String trafficManagerProfileId) {
    this.trafficManagerProfileId = trafficManagerProfileId;
    return this;
  }

  /**
   * ARM resource id of the traffic manager profile to use if it exists. Traffic manager resource id is of the form               /subscriptions/{subId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/trafficManagerProfiles/{profileName}
   * @return trafficManagerProfileId
   */
  @javax.annotation.Nullable
  public String getTrafficManagerProfileId() {
    return trafficManagerProfileId;
  }

  public void setTrafficManagerProfileId(String trafficManagerProfileId) {
    this.trafficManagerProfileId = trafficManagerProfileId;
  }


  public CloningInfo trafficManagerProfileName(String trafficManagerProfileName) {
    this.trafficManagerProfileName = trafficManagerProfileName;
    return this;
  }

  /**
   * Name of traffic manager profile to create. This is only needed if traffic manager profile does not already exist
   * @return trafficManagerProfileName
   */
  @javax.annotation.Nullable
  public String getTrafficManagerProfileName() {
    return trafficManagerProfileName;
  }

  public void setTrafficManagerProfileName(String trafficManagerProfileName) {
    this.trafficManagerProfileName = trafficManagerProfileName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloningInfo cloningInfo = (CloningInfo) o;
    return Objects.equals(this.appSettingsOverrides, cloningInfo.appSettingsOverrides) &&
        Objects.equals(this.cloneCustomHostNames, cloningInfo.cloneCustomHostNames) &&
        Objects.equals(this.cloneSourceControl, cloningInfo.cloneSourceControl) &&
        Objects.equals(this.configureLoadBalancing, cloningInfo.configureLoadBalancing) &&
        Objects.equals(this.correlationId, cloningInfo.correlationId) &&
        Objects.equals(this.hostingEnvironment, cloningInfo.hostingEnvironment) &&
        Objects.equals(this.overwrite, cloningInfo.overwrite) &&
        Objects.equals(this.sourceWebAppId, cloningInfo.sourceWebAppId) &&
        Objects.equals(this.trafficManagerProfileId, cloningInfo.trafficManagerProfileId) &&
        Objects.equals(this.trafficManagerProfileName, cloningInfo.trafficManagerProfileName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appSettingsOverrides, cloneCustomHostNames, cloneSourceControl, configureLoadBalancing, correlationId, hostingEnvironment, overwrite, sourceWebAppId, trafficManagerProfileId, trafficManagerProfileName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloningInfo {\n");
    sb.append("    appSettingsOverrides: ").append(toIndentedString(appSettingsOverrides)).append("\n");
    sb.append("    cloneCustomHostNames: ").append(toIndentedString(cloneCustomHostNames)).append("\n");
    sb.append("    cloneSourceControl: ").append(toIndentedString(cloneSourceControl)).append("\n");
    sb.append("    configureLoadBalancing: ").append(toIndentedString(configureLoadBalancing)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    hostingEnvironment: ").append(toIndentedString(hostingEnvironment)).append("\n");
    sb.append("    overwrite: ").append(toIndentedString(overwrite)).append("\n");
    sb.append("    sourceWebAppId: ").append(toIndentedString(sourceWebAppId)).append("\n");
    sb.append("    trafficManagerProfileId: ").append(toIndentedString(trafficManagerProfileId)).append("\n");
    sb.append("    trafficManagerProfileName: ").append(toIndentedString(trafficManagerProfileName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appSettingsOverrides");
    openapiFields.add("cloneCustomHostNames");
    openapiFields.add("cloneSourceControl");
    openapiFields.add("configureLoadBalancing");
    openapiFields.add("correlationId");
    openapiFields.add("hostingEnvironment");
    openapiFields.add("overwrite");
    openapiFields.add("sourceWebAppId");
    openapiFields.add("trafficManagerProfileId");
    openapiFields.add("trafficManagerProfileName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloningInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloningInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloningInfo is not found in the empty JSON string", CloningInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloningInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloningInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if ((jsonObj.get("hostingEnvironment") != null && !jsonObj.get("hostingEnvironment").isJsonNull()) && !jsonObj.get("hostingEnvironment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostingEnvironment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostingEnvironment").toString()));
      }
      if ((jsonObj.get("sourceWebAppId") != null && !jsonObj.get("sourceWebAppId").isJsonNull()) && !jsonObj.get("sourceWebAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceWebAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceWebAppId").toString()));
      }
      if ((jsonObj.get("trafficManagerProfileId") != null && !jsonObj.get("trafficManagerProfileId").isJsonNull()) && !jsonObj.get("trafficManagerProfileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficManagerProfileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficManagerProfileId").toString()));
      }
      if ((jsonObj.get("trafficManagerProfileName") != null && !jsonObj.get("trafficManagerProfileName").isJsonNull()) && !jsonObj.get("trafficManagerProfileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trafficManagerProfileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trafficManagerProfileName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloningInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloningInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloningInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloningInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CloningInfo>() {
           @Override
           public void write(JsonWriter out, CloningInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloningInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloningInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloningInfo
   * @throws IOException if the JSON string is invalid with respect to CloningInfo
   */
  public static CloningInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloningInfo.class);
  }

  /**
   * Convert an instance of CloningInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

