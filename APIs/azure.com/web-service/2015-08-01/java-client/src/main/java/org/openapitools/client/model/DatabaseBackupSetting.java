/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Note: properties are serialized in JSON format and stored in DB.               if new properties are added they might not be in the previous data rows               so please handle nulls
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseBackupSetting {
  public static final String SERIALIZED_NAME_CONNECTION_STRING = "connectionString";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING)
  private String connectionString;

  public static final String SERIALIZED_NAME_CONNECTION_STRING_NAME = "connectionStringName";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STRING_NAME)
  private String connectionStringName;

  public static final String SERIALIZED_NAME_DATABASE_TYPE = "databaseType";
  @SerializedName(SERIALIZED_NAME_DATABASE_TYPE)
  private String databaseType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public DatabaseBackupSetting() {
  }

  public DatabaseBackupSetting connectionString(String connectionString) {
    this.connectionString = connectionString;
    return this;
  }

  /**
   * Contains a connection string to a database which is being backed up/restored. If the restore should happen to a new database, the database name inside is the new one.
   * @return connectionString
   */
  @javax.annotation.Nullable
  public String getConnectionString() {
    return connectionString;
  }

  public void setConnectionString(String connectionString) {
    this.connectionString = connectionString;
  }


  public DatabaseBackupSetting connectionStringName(String connectionStringName) {
    this.connectionStringName = connectionStringName;
    return this;
  }

  /**
   * Contains a connection string name that is linked to the SiteConfig.ConnectionStrings.              This is used during restore with overwrite connection strings options.
   * @return connectionStringName
   */
  @javax.annotation.Nullable
  public String getConnectionStringName() {
    return connectionStringName;
  }

  public void setConnectionStringName(String connectionStringName) {
    this.connectionStringName = connectionStringName;
  }


  public DatabaseBackupSetting databaseType(String databaseType) {
    this.databaseType = databaseType;
    return this;
  }

  /**
   * SqlAzure / MySql
   * @return databaseType
   */
  @javax.annotation.Nullable
  public String getDatabaseType() {
    return databaseType;
  }

  public void setDatabaseType(String databaseType) {
    this.databaseType = databaseType;
  }


  public DatabaseBackupSetting name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseBackupSetting databaseBackupSetting = (DatabaseBackupSetting) o;
    return Objects.equals(this.connectionString, databaseBackupSetting.connectionString) &&
        Objects.equals(this.connectionStringName, databaseBackupSetting.connectionStringName) &&
        Objects.equals(this.databaseType, databaseBackupSetting.databaseType) &&
        Objects.equals(this.name, databaseBackupSetting.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionString, connectionStringName, databaseType, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseBackupSetting {\n");
    sb.append("    connectionString: ").append(toIndentedString(connectionString)).append("\n");
    sb.append("    connectionStringName: ").append(toIndentedString(connectionStringName)).append("\n");
    sb.append("    databaseType: ").append(toIndentedString(databaseType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionString");
    openapiFields.add("connectionStringName");
    openapiFields.add("databaseType");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseBackupSetting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseBackupSetting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseBackupSetting is not found in the empty JSON string", DatabaseBackupSetting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseBackupSetting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseBackupSetting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionString") != null && !jsonObj.get("connectionString").isJsonNull()) && !jsonObj.get("connectionString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionString").toString()));
      }
      if ((jsonObj.get("connectionStringName") != null && !jsonObj.get("connectionStringName").isJsonNull()) && !jsonObj.get("connectionStringName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionStringName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionStringName").toString()));
      }
      if ((jsonObj.get("databaseType") != null && !jsonObj.get("databaseType").isJsonNull()) && !jsonObj.get("databaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseBackupSetting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseBackupSetting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseBackupSetting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseBackupSetting.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseBackupSetting>() {
           @Override
           public void write(JsonWriter out, DatabaseBackupSetting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseBackupSetting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseBackupSetting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseBackupSetting
   * @throws IOException if the JSON string is invalid with respect to DatabaseBackupSetting
   */
  public static DatabaseBackupSetting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseBackupSetting.class);
  }

  /**
   * Convert an instance of DatabaseBackupSetting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

