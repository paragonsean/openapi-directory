/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Value of resource metric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceMetricValue {
  public static final String SERIALIZED_NAME_AVERAGE = "average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Float average;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Float count;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Float maximum;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Float minimum;

  public static final String SERIALIZED_NAME_TIME_STAMP = "timeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private String timeStamp;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Float total;

  public ResourceMetricValue() {
  }

  public ResourceMetricValue average(Float average) {
    this.average = average;
    return this;
  }

  /**
   * Value average
   * @return average
   */
  @javax.annotation.Nullable
  public Float getAverage() {
    return average;
  }

  public void setAverage(Float average) {
    this.average = average;
  }


  public ResourceMetricValue count(Float count) {
    this.count = count;
    return this;
  }

  /**
   * Value count
   * @return count
   */
  @javax.annotation.Nullable
  public Float getCount() {
    return count;
  }

  public void setCount(Float count) {
    this.count = count;
  }


  public ResourceMetricValue maximum(Float maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * Value maximum
   * @return maximum
   */
  @javax.annotation.Nullable
  public Float getMaximum() {
    return maximum;
  }

  public void setMaximum(Float maximum) {
    this.maximum = maximum;
  }


  public ResourceMetricValue minimum(Float minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * Value minimum
   * @return minimum
   */
  @javax.annotation.Nullable
  public Float getMinimum() {
    return minimum;
  }

  public void setMinimum(Float minimum) {
    this.minimum = minimum;
  }


  public ResourceMetricValue timeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Value timestamp
   * @return timeStamp
   */
  @javax.annotation.Nullable
  public String getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(String timeStamp) {
    this.timeStamp = timeStamp;
  }


  public ResourceMetricValue total(Float total) {
    this.total = total;
    return this;
  }

  /**
   * Value total
   * @return total
   */
  @javax.annotation.Nullable
  public Float getTotal() {
    return total;
  }

  public void setTotal(Float total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceMetricValue resourceMetricValue = (ResourceMetricValue) o;
    return Objects.equals(this.average, resourceMetricValue.average) &&
        Objects.equals(this.count, resourceMetricValue.count) &&
        Objects.equals(this.maximum, resourceMetricValue.maximum) &&
        Objects.equals(this.minimum, resourceMetricValue.minimum) &&
        Objects.equals(this.timeStamp, resourceMetricValue.timeStamp) &&
        Objects.equals(this.total, resourceMetricValue.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(average, count, maximum, minimum, timeStamp, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceMetricValue {\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average");
    openapiFields.add("count");
    openapiFields.add("maximum");
    openapiFields.add("minimum");
    openapiFields.add("timeStamp");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceMetricValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceMetricValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceMetricValue is not found in the empty JSON string", ResourceMetricValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceMetricValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceMetricValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("timeStamp") != null && !jsonObj.get("timeStamp").isJsonNull()) && !jsonObj.get("timeStamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeStamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeStamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceMetricValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceMetricValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceMetricValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceMetricValue.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceMetricValue>() {
           @Override
           public void write(JsonWriter out, ResourceMetricValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceMetricValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceMetricValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceMetricValue
   * @throws IOException if the JSON string is invalid with respect to ResourceMetricValue
   */
  public static ResourceMetricValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceMetricValue.class);
  }

  /**
   * Convert an instance of ResourceMetricValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

