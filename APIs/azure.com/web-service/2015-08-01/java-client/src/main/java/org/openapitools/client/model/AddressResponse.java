/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VirtualIPMapping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes main public ip address and any extra vips
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddressResponse {
  public static final String SERIALIZED_NAME_INTERNAL_IP_ADDRESS = "internalIpAddress";
  @SerializedName(SERIALIZED_NAME_INTERNAL_IP_ADDRESS)
  private String internalIpAddress;

  public static final String SERIALIZED_NAME_OUTBOUND_IP_ADDRESSES = "outboundIpAddresses";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_IP_ADDRESSES)
  private List<String> outboundIpAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_IP_ADDRESS = "serviceIpAddress";
  @SerializedName(SERIALIZED_NAME_SERVICE_IP_ADDRESS)
  private String serviceIpAddress;

  public static final String SERIALIZED_NAME_VIP_MAPPINGS = "vipMappings";
  @SerializedName(SERIALIZED_NAME_VIP_MAPPINGS)
  private List<VirtualIPMapping> vipMappings = new ArrayList<>();

  public AddressResponse() {
  }

  public AddressResponse internalIpAddress(String internalIpAddress) {
    this.internalIpAddress = internalIpAddress;
    return this;
  }

  /**
   * VNET internal ip address of the hostingEnvironment (App Service Environment) if it is in internal load-balancing mode
   * @return internalIpAddress
   */
  @javax.annotation.Nullable
  public String getInternalIpAddress() {
    return internalIpAddress;
  }

  public void setInternalIpAddress(String internalIpAddress) {
    this.internalIpAddress = internalIpAddress;
  }


  public AddressResponse outboundIpAddresses(List<String> outboundIpAddresses) {
    this.outboundIpAddresses = outboundIpAddresses;
    return this;
  }

  public AddressResponse addOutboundIpAddressesItem(String outboundIpAddressesItem) {
    if (this.outboundIpAddresses == null) {
      this.outboundIpAddresses = new ArrayList<>();
    }
    this.outboundIpAddresses.add(outboundIpAddressesItem);
    return this;
  }

  /**
   * IP addresses appearing on outbound connections
   * @return outboundIpAddresses
   */
  @javax.annotation.Nullable
  public List<String> getOutboundIpAddresses() {
    return outboundIpAddresses;
  }

  public void setOutboundIpAddresses(List<String> outboundIpAddresses) {
    this.outboundIpAddresses = outboundIpAddresses;
  }


  public AddressResponse serviceIpAddress(String serviceIpAddress) {
    this.serviceIpAddress = serviceIpAddress;
    return this;
  }

  /**
   * Main public vip
   * @return serviceIpAddress
   */
  @javax.annotation.Nullable
  public String getServiceIpAddress() {
    return serviceIpAddress;
  }

  public void setServiceIpAddress(String serviceIpAddress) {
    this.serviceIpAddress = serviceIpAddress;
  }


  public AddressResponse vipMappings(List<VirtualIPMapping> vipMappings) {
    this.vipMappings = vipMappings;
    return this;
  }

  public AddressResponse addVipMappingsItem(VirtualIPMapping vipMappingsItem) {
    if (this.vipMappings == null) {
      this.vipMappings = new ArrayList<>();
    }
    this.vipMappings.add(vipMappingsItem);
    return this;
  }

  /**
   * Additional vips
   * @return vipMappings
   */
  @javax.annotation.Nullable
  public List<VirtualIPMapping> getVipMappings() {
    return vipMappings;
  }

  public void setVipMappings(List<VirtualIPMapping> vipMappings) {
    this.vipMappings = vipMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressResponse addressResponse = (AddressResponse) o;
    return Objects.equals(this.internalIpAddress, addressResponse.internalIpAddress) &&
        Objects.equals(this.outboundIpAddresses, addressResponse.outboundIpAddresses) &&
        Objects.equals(this.serviceIpAddress, addressResponse.serviceIpAddress) &&
        Objects.equals(this.vipMappings, addressResponse.vipMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(internalIpAddress, outboundIpAddresses, serviceIpAddress, vipMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressResponse {\n");
    sb.append("    internalIpAddress: ").append(toIndentedString(internalIpAddress)).append("\n");
    sb.append("    outboundIpAddresses: ").append(toIndentedString(outboundIpAddresses)).append("\n");
    sb.append("    serviceIpAddress: ").append(toIndentedString(serviceIpAddress)).append("\n");
    sb.append("    vipMappings: ").append(toIndentedString(vipMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("internalIpAddress");
    openapiFields.add("outboundIpAddresses");
    openapiFields.add("serviceIpAddress");
    openapiFields.add("vipMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddressResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddressResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddressResponse is not found in the empty JSON string", AddressResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddressResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddressResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("internalIpAddress") != null && !jsonObj.get("internalIpAddress").isJsonNull()) && !jsonObj.get("internalIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalIpAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("outboundIpAddresses") != null && !jsonObj.get("outboundIpAddresses").isJsonNull() && !jsonObj.get("outboundIpAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `outboundIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("outboundIpAddresses").toString()));
      }
      if ((jsonObj.get("serviceIpAddress") != null && !jsonObj.get("serviceIpAddress").isJsonNull()) && !jsonObj.get("serviceIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceIpAddress").toString()));
      }
      if (jsonObj.get("vipMappings") != null && !jsonObj.get("vipMappings").isJsonNull()) {
        JsonArray jsonArrayvipMappings = jsonObj.getAsJsonArray("vipMappings");
        if (jsonArrayvipMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vipMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vipMappings` to be an array in the JSON string but got `%s`", jsonObj.get("vipMappings").toString()));
          }

          // validate the optional field `vipMappings` (array)
          for (int i = 0; i < jsonArrayvipMappings.size(); i++) {
            VirtualIPMapping.validateJsonElement(jsonArrayvipMappings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddressResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddressResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddressResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddressResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AddressResponse>() {
           @Override
           public void write(JsonWriter out, AddressResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddressResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddressResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddressResponse
   * @throws IOException if the JSON string is invalid with respect to AddressResponse
   */
  public static AddressResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddressResponse.class);
  }

  /**
   * Convert an instance of AddressResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

