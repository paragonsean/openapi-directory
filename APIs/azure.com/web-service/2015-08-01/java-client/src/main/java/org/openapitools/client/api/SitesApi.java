/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BackupItem;
import org.openapitools.client.model.BackupItemCollection;
import org.openapitools.client.model.BackupRequest;
import org.openapitools.client.model.ConnectionStringDictionary;
import org.openapitools.client.model.CsmPublishingProfileOptions;
import org.openapitools.client.model.CsmSiteRecoveryEntity;
import org.openapitools.client.model.CsmSlotEntity;
import org.openapitools.client.model.CsmUsageQuotaCollection;
import org.openapitools.client.model.DeletedSiteCollection;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentCollection;
import java.io.File;
import org.openapitools.client.model.HostNameBinding;
import org.openapitools.client.model.HostNameBindingCollection;
import org.openapitools.client.model.MetricDefinitionCollection;
import org.openapitools.client.model.NetworkFeatures;
import org.openapitools.client.model.PremierAddOnRequest;
import org.openapitools.client.model.RelayServiceConnectionEntity;
import org.openapitools.client.model.ResourceMetricCollection;
import org.openapitools.client.model.RestoreRequest;
import org.openapitools.client.model.RestoreResponse;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.SiteAuthSettings;
import org.openapitools.client.model.SiteCloneability;
import org.openapitools.client.model.SiteCollection;
import org.openapitools.client.model.SiteConfig;
import org.openapitools.client.model.SiteInstanceCollection;
import org.openapitools.client.model.SiteLogsConfig;
import org.openapitools.client.model.SiteSourceControl;
import org.openapitools.client.model.SlotConfigNamesResource;
import org.openapitools.client.model.SlotDifferenceCollection;
import org.openapitools.client.model.StringDictionary;
import org.openapitools.client.model.User;
import org.openapitools.client.model.VnetGateway;
import org.openapitools.client.model.VnetInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SitesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SitesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SitesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for sitesAddSitePremierAddOn
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesAddSitePremierAddOnCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = premierAddOn;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesAddSitePremierAddOnValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesAddSitePremierAddOn(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesAddSitePremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling sitesAddSitePremierAddOn(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesAddSitePremierAddOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesAddSitePremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOn' is set
        if (premierAddOn == null) {
            throw new ApiException("Missing the required parameter 'premierAddOn' when calling sitesAddSitePremierAddOn(Async)");
        }

        return sitesAddSitePremierAddOnCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesAddSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn) throws ApiException {
        ApiResponse<Object> localVarResp = sitesAddSitePremierAddOnWithHttpInfo(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesAddSitePremierAddOnWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn) throws ApiException {
        okhttp3.Call localVarCall = sitesAddSitePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesAddSitePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesAddSitePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesAddSitePremierAddOnSlot
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesAddSitePremierAddOnSlotCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = premierAddOn;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesAddSitePremierAddOnSlotValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesAddSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesAddSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling sitesAddSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesAddSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesAddSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesAddSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOn' is set
        if (premierAddOn == null) {
            throw new ApiException("Missing the required parameter 'premierAddOn' when calling sitesAddSitePremierAddOnSlot(Async)");
        }

        return sitesAddSitePremierAddOnSlotCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesAddSitePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn) throws ApiException {
        ApiResponse<Object> localVarResp = sitesAddSitePremierAddOnSlotWithHttpInfo(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesAddSitePremierAddOnSlotWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn) throws ApiException {
        okhttp3.Call localVarCall = sitesAddSitePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param premierAddOn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesAddSitePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, PremierAddOnRequest premierAddOn, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesAddSitePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesApplySlotConfigSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesApplySlotConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/applySlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesApplySlotConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesApplySlotConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesApplySlotConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesApplySlotConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesApplySlotConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesApplySlotConfigSlot(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling sitesApplySlotConfigSlot(Async)");
        }

        return sitesApplySlotConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Applies the configuration settings from the target slot onto the current slot
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesApplySlotConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<Object> localVarResp = sitesApplySlotConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesApplySlotConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesApplySlotConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot. Settings from the target slot will be applied onto this slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesApplySlotConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesApplySlotConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesApplySlotConfigToProduction
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesApplySlotConfigToProductionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/applySlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesApplySlotConfigToProductionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesApplySlotConfigToProduction(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling sitesApplySlotConfigToProduction(Async)");
        }

        return sitesApplySlotConfigToProductionCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Applies the configuration settings from the target slot onto the current slot
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesApplySlotConfigToProduction(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<Object> localVarResp = sitesApplySlotConfigToProductionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesApplySlotConfigToProductionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesApplySlotConfigToProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name. Settings from that slot will be applied on the source slot (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesApplySlotConfigToProductionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesApplySlotConfigToProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesBackupSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesBackupSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesBackupSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesBackupSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesBackupSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesBackupSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesBackupSite(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesBackupSite(Async)");
        }

        return sitesBackupSiteCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Creates web app backup
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesBackupSite(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesBackupSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Creates web app backup
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesBackupSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesBackupSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates web app backup (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesBackupSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesBackupSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesBackupSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesBackupSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesBackupSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesBackupSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesBackupSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesBackupSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesBackupSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesBackupSiteSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesBackupSiteSlot(Async)");
        }

        return sitesBackupSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Creates web app backup
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesBackupSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesBackupSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Creates web app backup
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesBackupSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesBackupSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates web app backup (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesBackupSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesBackupSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateDeployment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateDeploymentCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesCreateDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateDeployment(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling sitesCreateDeployment(Async)");
        }

        return sitesCreateDeploymentCall(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, _callback);

    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesCreateDeployment(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesCreateDeploymentWithHttpInfo(resourceGroupName, name, id, subscriptionId, apiVersion, deployment);
        return localVarResp.getData();
    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesCreateDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateDeploymentAsync(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, deployment, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateDeploymentSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateDeploymentSlot(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling sitesCreateDeploymentSlot(Async)");
        }

        return sitesCreateDeploymentSlotCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, _callback);

    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesCreateDeploymentSlot(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesCreateDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment);
        return localVarResp.getData();
    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesCreateDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateInstanceDeployment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateInstanceDeploymentCall(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateInstanceDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateInstanceDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateInstanceDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesCreateInstanceDeployment(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesCreateInstanceDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateInstanceDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateInstanceDeployment(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling sitesCreateInstanceDeployment(Async)");
        }

        return sitesCreateInstanceDeploymentCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, deployment, _callback);

    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesCreateInstanceDeployment(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesCreateInstanceDeploymentWithHttpInfo(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, deployment);
        return localVarResp.getData();
    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesCreateInstanceDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateInstanceDeploymentValidateBeforeCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, deployment, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateInstanceDeploymentAsync(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateInstanceDeploymentValidateBeforeCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, deployment, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateInstanceDeploymentSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateInstanceDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deployment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateInstanceDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'deployment' is set
        if (deployment == null) {
            throw new ApiException("Missing the required parameter 'deployment' when calling sitesCreateInstanceDeploymentSlot(Async)");
        }

        return sitesCreateInstanceDeploymentSlotCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, deployment, _callback);

    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesCreateInstanceDeploymentSlot(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesCreateInstanceDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, deployment);
        return localVarResp.getData();
    }

    /**
     * Create a deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesCreateInstanceDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, Deployment deployment) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateInstanceDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, deployment, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deployment Details of deployment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateInstanceDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, Deployment deployment, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateInstanceDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, deployment, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSite
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipDnsRegistration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipDnsRegistration", skipDnsRegistration));
        }

        if (skipCustomDomainVerification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCustomDomainVerification", skipCustomDomainVerification));
        }

        if (forceDnsRegistration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceDnsRegistration", forceDnsRegistration));
        }

        if (ttlInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttlInSeconds", ttlInSeconds));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSite(Async)");
        }

        // verify the required parameter 'siteEnvelope' is set
        if (siteEnvelope == null) {
            throw new ApiException("Missing the required parameter 'siteEnvelope' when calling sitesCreateOrUpdateSite(Async)");
        }

        return sitesCreateOrUpdateSiteCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, _callback);

    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public Site sitesCreateOrUpdateSite(String resourceGroupName, String name, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds) throws ApiException {
        ApiResponse<Site> localVarResp = sitesCreateOrUpdateSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds);
        return localVarResp.getData();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> sitesCreateOrUpdateSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web app or modifies an existing web app. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteConfig
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling sitesCreateOrUpdateSiteConfig(Async)");
        }

        return sitesCreateOrUpdateSiteConfigCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return SiteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfig sitesCreateOrUpdateSiteConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        ApiResponse<SiteConfig> localVarResp = sitesCreateOrUpdateSiteConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return ApiResponse&lt;SiteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfig> sitesCreateOrUpdateSiteConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback<SiteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteConfigSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling sitesCreateOrUpdateSiteConfigSlot(Async)");
        }

        return sitesCreateOrUpdateSiteConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return SiteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfig sitesCreateOrUpdateSiteConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        ApiResponse<SiteConfig> localVarResp = sitesCreateOrUpdateSiteConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return ApiResponse&lt;SiteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfig> sitesCreateOrUpdateSiteConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback<SiteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteHostNameBinding
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteHostNameBindingCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostNameBinding;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteHostNameBindingValidateBeforeCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling sitesCreateOrUpdateSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'hostNameBinding' is set
        if (hostNameBinding == null) {
            throw new ApiException("Missing the required parameter 'hostNameBinding' when calling sitesCreateOrUpdateSiteHostNameBinding(Async)");
        }

        return sitesCreateOrUpdateSiteHostNameBindingCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, _callback);

    }

    /**
     * Creates a web app hostname binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding sitesCreateOrUpdateSiteHostNameBinding(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = sitesCreateOrUpdateSiteHostNameBindingWithHttpInfo(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding);
        return localVarResp.getData();
    }

    /**
     * Creates a web app hostname binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> sitesCreateOrUpdateSiteHostNameBindingWithHttpInfo(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a web app hostname binding (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteHostNameBindingAsync(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteHostNameBindingSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteHostNameBindingSlotCall(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostNameBinding;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteHostNameBindingSlotValidateBeforeCall(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling sitesCreateOrUpdateSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostNameBinding' is set
        if (hostNameBinding == null) {
            throw new ApiException("Missing the required parameter 'hostNameBinding' when calling sitesCreateOrUpdateSiteHostNameBindingSlot(Async)");
        }

        return sitesCreateOrUpdateSiteHostNameBindingSlotCall(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, _callback);

    }

    /**
     * Creates a web app hostname binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding sitesCreateOrUpdateSiteHostNameBindingSlot(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = sitesCreateOrUpdateSiteHostNameBindingSlotWithHttpInfo(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding);
        return localVarResp.getData();
    }

    /**
     * Creates a web app hostname binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> sitesCreateOrUpdateSiteHostNameBindingSlotWithHttpInfo(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a web app hostname binding (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostNameBinding Host name binding information (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteHostNameBindingSlotAsync(String resourceGroupName, String name, String hostName, String slot, String subscriptionId, String apiVersion, HostNameBinding hostNameBinding, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteRelayServiceConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesCreateOrUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteRelayServiceConnection(Async)");
        }

        return sitesCreateOrUpdateSiteRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesCreateOrUpdateSiteRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesCreateOrUpdateSiteRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesCreateOrUpdateSiteRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteRelayServiceConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        return sitesCreateOrUpdateSiteRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesCreateOrUpdateSiteRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesCreateOrUpdateSiteRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesCreateOrUpdateSiteRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteSlot
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipDnsRegistration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipDnsRegistration", skipDnsRegistration));
        }

        if (skipCustomDomainVerification != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipCustomDomainVerification", skipCustomDomainVerification));
        }

        if (forceDnsRegistration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceDnsRegistration", forceDnsRegistration));
        }

        if (ttlInSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ttlInSeconds", ttlInSeconds));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteSlot(Async)");
        }

        // verify the required parameter 'siteEnvelope' is set
        if (siteEnvelope == null) {
            throw new ApiException("Missing the required parameter 'siteEnvelope' when calling sitesCreateOrUpdateSiteSlot(Async)");
        }

        return sitesCreateOrUpdateSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, _callback);

    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public Site sitesCreateOrUpdateSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds) throws ApiException {
        ApiResponse<Site> localVarResp = sitesCreateOrUpdateSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds);
        return localVarResp.getData();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> sitesCreateOrUpdateSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web app or modifies an existing web app. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteEnvelope Details of web app if it exists already (required)
     * @param skipDnsRegistration If true web app hostname is not registered with DNS on creation. This parameter is              only used for app creation (optional)
     * @param skipCustomDomainVerification If true, custom (non *.azurewebsites.net) domains associated with web app are not verified. (optional)
     * @param forceDnsRegistration If true, web app hostname is force registered with DNS (optional)
     * @param ttlInSeconds Time to live in seconds for web app&#39;s default domain name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Site siteEnvelope, String skipDnsRegistration, String skipCustomDomainVerification, String forceDnsRegistration, String ttlInSeconds, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteSourceControl
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling sitesCreateOrUpdateSiteSourceControl(Async)");
        }

        return sitesCreateOrUpdateSiteSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl sitesCreateOrUpdateSiteSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = sitesCreateOrUpdateSiteSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> sitesCreateOrUpdateSiteSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteSourceControlSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling sitesCreateOrUpdateSiteSourceControlSlot(Async)");
        }

        return sitesCreateOrUpdateSiteSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl sitesCreateOrUpdateSiteSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = sitesCreateOrUpdateSiteSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> sitesCreateOrUpdateSiteSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteVNETConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnection(Async)");
        }

        return sitesCreateOrUpdateSiteVNETConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return VnetInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetInfo sitesCreateOrUpdateSiteVNETConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        ApiResponse<VnetInfo> localVarResp = sitesCreateOrUpdateSiteVNETConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return ApiResponse&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetInfo> sitesCreateOrUpdateSiteVNETConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback<VnetInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteVNETConnectionGateway
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling sitesCreateOrUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnectionGateway(Async)");
        }

        return sitesCreateOrUpdateSiteVNETConnectionGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return VnetGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetGateway sitesCreateOrUpdateSiteVNETConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        ApiResponse<VnetGateway> localVarResp = sitesCreateOrUpdateSiteVNETConnectionGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;VnetGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetGateway> sitesCreateOrUpdateSiteVNETConnectionGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Virtual Network Gateway. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback<VnetGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteVNETConnectionGatewaySlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionGatewaySlotCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionGatewaySlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        return sitesCreateOrUpdateSiteVNETConnectionGatewaySlotCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return VnetGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetGateway sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        ApiResponse<VnetGateway> localVarResp = sitesCreateOrUpdateSiteVNETConnectionGatewaySlotWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;VnetGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetGateway> sitesCreateOrUpdateSiteVNETConnectionGatewaySlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Virtual Network Gateway. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback<VnetGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesCreateOrUpdateSiteVNETConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesCreateOrUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesCreateOrUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesCreateOrUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesCreateOrUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesCreateOrUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesCreateOrUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesCreateOrUpdateSiteVNETConnectionSlot(Async)");
        }

        return sitesCreateOrUpdateSiteVNETConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return VnetInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetInfo sitesCreateOrUpdateSiteVNETConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        ApiResponse<VnetInfo> localVarResp = sitesCreateOrUpdateSiteVNETConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return ApiResponse&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetInfo> sitesCreateOrUpdateSiteVNETConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesCreateOrUpdateSiteVNETConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback<VnetInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesCreateOrUpdateSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteBackup
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteBackupCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteBackupValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteBackup(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteBackup(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesDeleteBackup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteBackup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteBackup(Async)");
        }

        return sitesDeleteBackupCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a backup from Azure Storage
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesDeleteBackup(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesDeleteBackupWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a backup from Azure Storage
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesDeleteBackupWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteBackupValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a backup from Azure Storage (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteBackupAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteBackupValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteBackupSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteBackupSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteBackupSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteBackupSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteBackupSlot(Async)");
        }

        return sitesDeleteBackupSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a backup from Azure Storage
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesDeleteBackupSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesDeleteBackupSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a backup from Azure Storage
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesDeleteBackupSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteBackupSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a backup from Azure Storage (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteBackupSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteBackupSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteDeployment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteDeploymentCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesDeleteDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteDeployment(Async)");
        }

        return sitesDeleteDeploymentCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteDeployment(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteDeploymentWithHttpInfo(resourceGroupName, name, id, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteDeploymentAsync(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteDeploymentSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteDeploymentSlot(Async)");
        }

        return sitesDeleteDeploymentSlotCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteDeploymentSlot(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteInstanceDeployment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteInstanceDeploymentCall(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteInstanceDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteInstanceDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteInstanceDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesDeleteInstanceDeployment(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesDeleteInstanceDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteInstanceDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteInstanceDeployment(Async)");
        }

        return sitesDeleteInstanceDeploymentCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteInstanceDeployment(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteInstanceDeploymentWithHttpInfo(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteInstanceDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteInstanceDeploymentValidateBeforeCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteInstanceDeploymentAsync(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteInstanceDeploymentValidateBeforeCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteInstanceDeploymentSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteInstanceDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteInstanceDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesDeleteInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesDeleteInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteInstanceDeploymentSlot(Async)");
        }

        return sitesDeleteInstanceDeploymentSlotCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteInstanceDeploymentSlot(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteInstanceDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteInstanceDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteInstanceDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteInstanceDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteInstanceDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteMetrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteMetrics", deleteMetrics));
        }

        if (deleteEmptyServerFarm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteEmptyServerFarm", deleteEmptyServerFarm));
        }

        if (skipDnsRegistration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipDnsRegistration", skipDnsRegistration));
        }

        if (deleteAllSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAllSlots", deleteAllSlots));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSite(Async)");
        }

        return sitesDeleteSiteCall(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, _callback);

    }

    /**
     * Deletes a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSite(String resourceGroupName, String name, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots);
        return localVarResp.getData();
    }

    /**
     * Deletes a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteHostNameBinding
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteHostNameBindingCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteHostNameBindingValidateBeforeCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling sitesDeleteSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteHostNameBinding(Async)");
        }

        return sitesDeleteSiteHostNameBindingCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a host name binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteHostNameBinding(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteHostNameBindingWithHttpInfo(resourceGroupName, name, hostName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a host name binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteHostNameBindingWithHttpInfo(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a host name binding (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteHostNameBindingAsync(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteHostNameBindingSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteHostNameBindingSlotCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteHostNameBindingSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling sitesDeleteSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteHostNameBindingSlot(Async)");
        }

        return sitesDeleteSiteHostNameBindingSlotCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes a host name binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteHostNameBindingSlot(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteHostNameBindingSlotWithHttpInfo(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a host name binding
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteHostNameBindingSlotWithHttpInfo(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a host name binding (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSitePremierAddOn
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSitePremierAddOnCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSitePremierAddOnValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSitePremierAddOn(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSitePremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling sitesDeleteSitePremierAddOn(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSitePremierAddOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSitePremierAddOn(Async)");
        }

        return sitesDeleteSitePremierAddOnCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSitePremierAddOnWithHttpInfo(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSitePremierAddOnWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSitePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSitePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSitePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSitePremierAddOnSlot
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSitePremierAddOnSlotCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSitePremierAddOnSlotValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling sitesDeleteSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSitePremierAddOnSlot(Async)");
        }

        return sitesDeleteSitePremierAddOnSlotCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSitePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSitePremierAddOnSlotWithHttpInfo(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSitePremierAddOnSlotWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSitePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSitePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSitePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteRelayServiceConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesDeleteSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteRelayServiceConnection(Async)");
        }

        return sitesDeleteSiteRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteRelayServiceConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesDeleteSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteRelayServiceConnectionSlot(Async)");
        }

        return sitesDeleteSiteRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deleteMetrics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteMetrics", deleteMetrics));
        }

        if (deleteEmptyServerFarm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteEmptyServerFarm", deleteEmptyServerFarm));
        }

        if (skipDnsRegistration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skipDnsRegistration", skipDnsRegistration));
        }

        if (deleteAllSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteAllSlots", deleteAllSlots));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteSlot(Async)");
        }

        return sitesDeleteSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, _callback);

    }

    /**
     * Deletes a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots);
        return localVarResp.getData();
    }

    /**
     * Deletes a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param deleteMetrics If true, web app metrics are also deleted (optional)
     * @param deleteEmptyServerFarm If true and App Service Plan is empty after web app deletion, App Service Plan is also deleted (optional)
     * @param skipDnsRegistration If true, DNS registration is skipped (optional)
     * @param deleteAllSlots If true, all slots associated with web app are also deleted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String deleteMetrics, String deleteEmptyServerFarm, String skipDnsRegistration, String deleteAllSlots, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteSourceControl
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteSourceControl(Async)");
        }

        return sitesDeleteSiteSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteSourceControlSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteSourceControlSlot(Async)");
        }

        return sitesDeleteSiteSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteVNETConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteVNETConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteVNETConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteVNETConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteVNETConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesDeleteSiteVNETConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteVNETConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteVNETConnection(Async)");
        }

        return sitesDeleteSiteVNETConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteVNETConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteVNETConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteVNETConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteVNETConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDeleteSiteVNETConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteVNETConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDeleteSiteVNETConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDeleteSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDeleteSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesDeleteSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDeleteSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDeleteSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDeleteSiteVNETConnectionSlot(Async)");
        }

        return sitesDeleteSiteVNETConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesDeleteSiteVNETConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesDeleteSiteVNETConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesDeleteSiteVNETConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesDeleteSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDeleteSiteVNETConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDeleteSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDiscoverSiteRestore
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDiscoverSiteRestoreCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/discover"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDiscoverSiteRestoreValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDiscoverSiteRestore(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDiscoverSiteRestore(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDiscoverSiteRestore(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDiscoverSiteRestore(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesDiscoverSiteRestore(Async)");
        }

        return sitesDiscoverSiteRestoreCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Discovers existing web app backups that can be restored
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return RestoreRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RestoreRequest sitesDiscoverSiteRestore(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        ApiResponse<RestoreRequest> localVarResp = sitesDiscoverSiteRestoreWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Discovers existing web app backups that can be restored
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return ApiResponse&lt;RestoreRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreRequest> sitesDiscoverSiteRestoreWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesDiscoverSiteRestoreValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discovers existing web app backups that can be restored (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDiscoverSiteRestoreAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<RestoreRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDiscoverSiteRestoreValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesDiscoverSiteRestoreSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDiscoverSiteRestoreSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/discover"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesDiscoverSiteRestoreSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesDiscoverSiteRestoreSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesDiscoverSiteRestoreSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesDiscoverSiteRestoreSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesDiscoverSiteRestoreSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesDiscoverSiteRestoreSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesDiscoverSiteRestoreSlot(Async)");
        }

        return sitesDiscoverSiteRestoreSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Discovers existing web app backups that can be restored
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return RestoreRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RestoreRequest sitesDiscoverSiteRestoreSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        ApiResponse<RestoreRequest> localVarResp = sitesDiscoverSiteRestoreSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Discovers existing web app backups that can be restored
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return ApiResponse&lt;RestoreRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreRequest> sitesDiscoverSiteRestoreSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesDiscoverSiteRestoreSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discovers existing web app backups that can be restored (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesDiscoverSiteRestoreSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<RestoreRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesDiscoverSiteRestoreSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<RestoreRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGenerateNewSitePublishingPassword
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGenerateNewSitePublishingPasswordCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/newpassword"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGenerateNewSitePublishingPasswordValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGenerateNewSitePublishingPassword(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGenerateNewSitePublishingPassword(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGenerateNewSitePublishingPassword(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGenerateNewSitePublishingPassword(Async)");
        }

        return sitesGenerateNewSitePublishingPasswordCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Generates new random app publishing password
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGenerateNewSitePublishingPassword(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGenerateNewSitePublishingPasswordWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Generates new random app publishing password
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGenerateNewSitePublishingPasswordWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGenerateNewSitePublishingPasswordValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates new random app publishing password (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGenerateNewSitePublishingPasswordAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGenerateNewSitePublishingPasswordValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGenerateNewSitePublishingPasswordSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGenerateNewSitePublishingPasswordSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/newpassword"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGenerateNewSitePublishingPasswordSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGenerateNewSitePublishingPasswordSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGenerateNewSitePublishingPasswordSlot(Async)");
        }

        return sitesGenerateNewSitePublishingPasswordSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Generates new random app publishing password
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGenerateNewSitePublishingPasswordSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGenerateNewSitePublishingPasswordSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Generates new random app publishing password
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGenerateNewSitePublishingPasswordSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGenerateNewSitePublishingPasswordSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates new random app publishing password (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGenerateNewSitePublishingPasswordSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGenerateNewSitePublishingPasswordSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetDeletedSites
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeletedSitesCall(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/deletedSites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (includeSiteTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSiteTypes", includeSiteTypes));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetDeletedSitesValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetDeletedSites(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetDeletedSites(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetDeletedSites(Async)");
        }

        return sitesGetDeletedSitesCall(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, _callback);

    }

    /**
     * Gets deleted web apps in subscription
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @return DeletedSiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeletedSiteCollection sitesGetDeletedSites(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes) throws ApiException {
        ApiResponse<DeletedSiteCollection> localVarResp = sitesGetDeletedSitesWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes);
        return localVarResp.getData();
    }

    /**
     * Gets deleted web apps in subscription
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @return ApiResponse&lt;DeletedSiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeletedSiteCollection> sitesGetDeletedSitesWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes) throws ApiException {
        okhttp3.Call localVarCall = sitesGetDeletedSitesValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, null);
        Type localVarReturnType = new TypeToken<DeletedSiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets deleted web apps in subscription (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeletedSitesAsync(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, final ApiCallback<DeletedSiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetDeletedSitesValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, _callback);
        Type localVarReturnType = new TypeToken<DeletedSiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetDeployment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesGetDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetDeployment(Async)");
        }

        return sitesGetDeploymentCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesGetDeployment(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesGetDeploymentWithHttpInfo(resourceGroupName, name, id, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesGetDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentAsync(String resourceGroupName, String name, String id, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetDeploymentValidateBeforeCall(resourceGroupName, name, id, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetDeploymentSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetDeploymentSlot(Async)");
        }

        return sitesGetDeploymentSlotCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesGetDeploymentSlot(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesGetDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesGetDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetDeployments
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/deployments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetDeploymentsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetDeployments(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetDeployments(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetDeployments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetDeployments(Async)");
        }

        return sitesGetDeploymentsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return DeploymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentCollection sitesGetDeployments(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DeploymentCollection> localVarResp = sitesGetDeploymentsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DeploymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentCollection> sitesGetDeploymentsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetDeploymentsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployments (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<DeploymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetDeploymentsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetDeploymentsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/deployments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetDeploymentsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetDeploymentsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetDeploymentsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetDeploymentsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetDeploymentsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetDeploymentsSlot(Async)");
        }

        return sitesGetDeploymentsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return DeploymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentCollection sitesGetDeploymentsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DeploymentCollection> localVarResp = sitesGetDeploymentsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DeploymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentCollection> sitesGetDeploymentsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetDeploymentsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployments (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetDeploymentsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<DeploymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetDeploymentsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetInstanceDeployment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentCall(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetInstanceDeploymentValidateBeforeCall(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeployment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetInstanceDeployment(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesGetInstanceDeployment(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeployment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeployment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeployment(Async)");
        }

        return sitesGetInstanceDeploymentCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesGetInstanceDeployment(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesGetInstanceDeploymentWithHttpInfo(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesGetInstanceDeploymentWithHttpInfo(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetInstanceDeploymentValidateBeforeCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentAsync(String resourceGroupName, String name, String id, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetInstanceDeploymentValidateBeforeCall(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetInstanceDeploymentSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentSlotCall(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments/{id}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetInstanceDeploymentSlotValidateBeforeCall(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sitesGetInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeploymentSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeploymentSlot(Async)");
        }

        return sitesGetInstanceDeploymentSlotCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Deployment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Deployment sitesGetInstanceDeploymentSlot(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Deployment> localVarResp = sitesGetInstanceDeploymentSlotWithHttpInfo(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the deployment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Deployment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deployment> sitesGetInstanceDeploymentSlotWithHttpInfo(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetInstanceDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the deployment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param id Id of the deployment (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentSlotAsync(String resourceGroupName, String name, String id, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<Deployment> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetInstanceDeploymentSlotValidateBeforeCall(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Deployment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetInstanceDeployments
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentsCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances/{instanceId}/deployments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetInstanceDeploymentsValidateBeforeCall(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeployments(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetInstanceDeployments(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeployments(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeployments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeployments(Async)");
        }

        return sitesGetInstanceDeploymentsCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return DeploymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentCollection sitesGetInstanceDeployments(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DeploymentCollection> localVarResp = sitesGetInstanceDeploymentsWithHttpInfo(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DeploymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentCollection> sitesGetInstanceDeploymentsWithHttpInfo(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetInstanceDeploymentsValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployments (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentsAsync(String resourceGroupName, String name, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<DeploymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetInstanceDeploymentsValidateBeforeCall(resourceGroupName, name, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetInstanceDeploymentsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentsSlotCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances/{instanceId}/deployments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "instanceId" + "}", localVarApiClient.escapeString(instanceId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetInstanceDeploymentsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetInstanceDeploymentsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetInstanceDeploymentsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetInstanceDeploymentsSlot(Async)");
        }

        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling sitesGetInstanceDeploymentsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetInstanceDeploymentsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetInstanceDeploymentsSlot(Async)");
        }

        return sitesGetInstanceDeploymentsSlotCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);

    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return DeploymentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeploymentCollection sitesGetInstanceDeploymentsSlot(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DeploymentCollection> localVarResp = sitesGetInstanceDeploymentsSlotWithHttpInfo(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List deployments
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;DeploymentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeploymentCollection> sitesGetInstanceDeploymentsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetInstanceDeploymentsSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List deployments (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param instanceId Id of web app instance (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetInstanceDeploymentsSlotAsync(String resourceGroupName, String name, String slot, String instanceId, String subscriptionId, String apiVersion, final ApiCallback<DeploymentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetInstanceDeploymentsSlotValidateBeforeCall(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DeploymentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSite(Async)");
        }

        return sitesGetSiteCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);

    }

    /**
     * Get details of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Site sitesGetSite(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        ApiResponse<Site> localVarResp = sitesGetSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        return localVarResp.getData();
    }

    /**
     * Get details of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> sitesGetSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteBackupConfiguration
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteBackupConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteBackupConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupConfiguration(Async)");
        }

        return sitesGetSiteBackupConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the backup configuration for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest sitesGetSiteBackupConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = sitesGetSiteBackupConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the backup configuration for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> sitesGetSiteBackupConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the backup configuration for a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteBackupConfigurationSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteBackupConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupConfigurationSlot(Async)");
        }

        return sitesGetSiteBackupConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the backup configuration for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest sitesGetSiteBackupConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = sitesGetSiteBackupConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the backup configuration for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> sitesGetSiteBackupConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the backup configuration for a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteBackupStatus
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteBackupStatusValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteBackupStatus(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatus(Async)");
        }

        return sitesGetSiteBackupStatusCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets status of a web app backup that may be in progress.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesGetSiteBackupStatus(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesGetSiteBackupStatusWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets status of a web app backup that may be in progress.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesGetSiteBackupStatusWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteBackupStatusValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets status of a web app backup that may be in progress. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteBackupStatusValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteBackupStatusSecrets
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusSecretsCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteBackupStatusSecretsValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatusSecrets(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesGetSiteBackupStatusSecrets(Async)");
        }

        return sitesGetSiteBackupStatusSecretsCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesGetSiteBackupStatusSecrets(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesGetSiteBackupStatusSecretsWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesGetSiteBackupStatusSecretsWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteBackupStatusSecretsValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusSecretsAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteBackupStatusSecretsValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteBackupStatusSecretsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusSecretsSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteBackupStatusSecretsSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatusSecretsSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesGetSiteBackupStatusSecretsSlot(Async)");
        }

        return sitesGetSiteBackupStatusSecretsSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesGetSiteBackupStatusSecretsSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesGetSiteBackupStatusSecretsSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesGetSiteBackupStatusSecretsSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteBackupStatusSecretsSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusSecretsSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteBackupStatusSecretsSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteBackupStatusSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteBackupStatusSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteBackupStatusSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteBackupStatusSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesGetSiteBackupStatusSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteBackupStatusSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteBackupStatusSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteBackupStatusSlot(Async)");
        }

        return sitesGetSiteBackupStatusSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets status of a web app backup that may be in progress.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItem sitesGetSiteBackupStatusSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItem> localVarResp = sitesGetSiteBackupStatusSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets status of a web app backup that may be in progress.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItem> sitesGetSiteBackupStatusSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteBackupStatusSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets status of a web app backup that may be in progress. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteBackupStatusSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, final ApiCallback<BackupItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteBackupStatusSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteConfig
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteConfig(Async)");
        }

        return sitesGetSiteConfigCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the configuration of the web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfig sitesGetSiteConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfig> localVarResp = sitesGetSiteConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the configuration of the web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfig> sitesGetSiteConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the configuration of the web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteConfigSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteConfigSlot(Async)");
        }

        return sitesGetSiteConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the configuration of the web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfig sitesGetSiteConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteConfig> localVarResp = sitesGetSiteConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the configuration of the web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfig> sitesGetSiteConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the configuration of the web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteHostNameBinding
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteHostNameBindingValidateBeforeCall(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling sitesGetSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBinding(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBinding(Async)");
        }

        return sitesGetSiteHostNameBindingCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get web app binding for a hostname
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding sitesGetSiteHostNameBinding(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = sitesGetSiteHostNameBindingWithHttpInfo(resourceGroupName, name, hostName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get web app binding for a hostname
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> sitesGetSiteHostNameBindingWithHttpInfo(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get web app binding for a hostname (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingAsync(String resourceGroupName, String name, String hostName, String subscriptionId, String apiVersion, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingValidateBeforeCall(resourceGroupName, name, hostName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteHostNameBindingSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingSlotCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings/{hostName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "hostName" + "}", localVarApiClient.escapeString(hostName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteHostNameBindingSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'hostName' is set
        if (hostName == null) {
            throw new ApiException("Missing the required parameter 'hostName' when calling sitesGetSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBindingSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBindingSlot(Async)");
        }

        return sitesGetSiteHostNameBindingSlotCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get web app binding for a hostname
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostNameBinding
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBinding sitesGetSiteHostNameBindingSlot(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBinding> localVarResp = sitesGetSiteHostNameBindingSlotWithHttpInfo(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get web app binding for a hostname
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBinding&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBinding> sitesGetSiteHostNameBindingSlotWithHttpInfo(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get web app binding for a hostname (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param hostName Name of host (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingSlotAsync(String resourceGroupName, String name, String slot, String hostName, String subscriptionId, String apiVersion, final ApiCallback<HostNameBinding> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingSlotValidateBeforeCall(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBinding>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteHostNameBindings
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hostNameBindings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteHostNameBindingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBindings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteHostNameBindings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBindings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBindings(Async)");
        }

        return sitesGetSiteHostNameBindingsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get web app hostname bindings
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostNameBindingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBindingCollection sitesGetSiteHostNameBindings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBindingCollection> localVarResp = sitesGetSiteHostNameBindingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get web app hostname bindings
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBindingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBindingCollection> sitesGetSiteHostNameBindingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get web app hostname bindings (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<HostNameBindingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteHostNameBindingsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hostNameBindings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteHostNameBindingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteHostNameBindingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteHostNameBindingsSlot(Async)");
        }

        return sitesGetSiteHostNameBindingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get web app hostname bindings
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostNameBindingCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostNameBindingCollection sitesGetSiteHostNameBindingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostNameBindingCollection> localVarResp = sitesGetSiteHostNameBindingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get web app hostname bindings
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostNameBindingCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostNameBindingCollection> sitesGetSiteHostNameBindingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get web app hostname bindings (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteHostNameBindingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<HostNameBindingCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteHostNameBindingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostNameBindingCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteInstanceIdentifiers
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteInstanceIdentifiersCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/instances"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteInstanceIdentifiersValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteInstanceIdentifiers(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteInstanceIdentifiers(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteInstanceIdentifiers(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteInstanceIdentifiers(Async)");
        }

        return sitesGetSiteInstanceIdentifiersCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all instance of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteInstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteInstanceCollection sitesGetSiteInstanceIdentifiers(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteInstanceCollection> localVarResp = sitesGetSiteInstanceIdentifiersWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all instance of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteInstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteInstanceCollection> sitesGetSiteInstanceIdentifiersWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteInstanceIdentifiersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteInstanceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all instance of a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteInstanceIdentifiersAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteInstanceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteInstanceIdentifiersValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteInstanceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteInstanceIdentifiersSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteInstanceIdentifiersSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/instances"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteInstanceIdentifiersSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteInstanceIdentifiersSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteInstanceIdentifiersSlot(Async)");
        }

        return sitesGetSiteInstanceIdentifiersSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets all instance of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteInstanceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteInstanceCollection sitesGetSiteInstanceIdentifiersSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteInstanceCollection> localVarResp = sitesGetSiteInstanceIdentifiersSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all instance of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteInstanceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteInstanceCollection> sitesGetSiteInstanceIdentifiersSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteInstanceIdentifiersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteInstanceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all instance of a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteInstanceIdentifiersSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteInstanceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteInstanceIdentifiersSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteInstanceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteLogsConfig
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteLogsConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteLogsConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteLogsConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteLogsConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteLogsConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteLogsConfig(Async)");
        }

        return sitesGetSiteLogsConfigCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the web app logs configuration
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig sitesGetSiteLogsConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = sitesGetSiteLogsConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the web app logs configuration
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> sitesGetSiteLogsConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteLogsConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the web app logs configuration (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteLogsConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteLogsConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteLogsConfigSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteLogsConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteLogsConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteLogsConfigSlot(Async)");
        }

        return sitesGetSiteLogsConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the web app logs configuration
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig sitesGetSiteLogsConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = sitesGetSiteLogsConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the web app logs configuration
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> sitesGetSiteLogsConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteLogsConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the web app logs configuration (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteLogsConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteLogsConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteMetricDefinitions
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricDefinitionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetricDefinitions(Async)");
        }

        return sitesGetSiteMetricDefinitionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets metric definitions for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return MetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionCollection sitesGetSiteMetricDefinitions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionCollection> localVarResp = sitesGetSiteMetricDefinitionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets metric definitions for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionCollection> sitesGetSiteMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets metric definitions for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricDefinitionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<MetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteMetricDefinitionsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricDefinitionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteMetricDefinitionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetricDefinitionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetricDefinitionsSlot(Async)");
        }

        return sitesGetSiteMetricDefinitionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets metric definitions for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return MetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionCollection sitesGetSiteMetricDefinitionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionCollection> localVarResp = sitesGetSiteMetricDefinitionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets metric definitions for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionCollection> sitesGetSiteMetricDefinitionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteMetricDefinitionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets metric definitions for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricDefinitionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<MetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteMetricDefinitionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteMetrics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteMetricsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetrics(Async)");
        }

        return sitesGetSiteMetricsCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Gets metrics for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ResourceMetricCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricCollection sitesGetSiteMetrics(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<ResourceMetricCollection> localVarResp = sitesGetSiteMetricsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets metrics for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;ResourceMetricCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricCollection> sitesGetSiteMetricsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets metrics for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<ResourceMetricCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteMetricsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteMetricsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteMetricsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteMetricsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteMetricsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteMetricsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteMetricsSlot(Async)");
        }

        return sitesGetSiteMetricsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Gets metrics for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ResourceMetricCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricCollection sitesGetSiteMetricsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<ResourceMetricCollection> localVarResp = sitesGetSiteMetricsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets metrics for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;ResourceMetricCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricCollection> sitesGetSiteMetricsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteMetricsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets metrics for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details If true, metric details are included in response (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteMetricsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<ResourceMetricCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteMetricsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteNetworkFeatures
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteNetworkFeaturesCall(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/networkFeatures/{view}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "view" + "}", localVarApiClient.escapeString(view.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteNetworkFeaturesValidateBeforeCall(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteNetworkFeatures(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteNetworkFeatures(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling sitesGetSiteNetworkFeatures(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteNetworkFeatures(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteNetworkFeatures(Async)");
        }

        return sitesGetSiteNetworkFeaturesCall(resourceGroupName, name, view, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a view of all network features in use on this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return NetworkFeatures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatures sitesGetSiteNetworkFeatures(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<NetworkFeatures> localVarResp = sitesGetSiteNetworkFeaturesWithHttpInfo(resourceGroupName, name, view, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;NetworkFeatures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatures> sitesGetSiteNetworkFeaturesWithHttpInfo(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteNetworkFeaturesValidateBeforeCall(resourceGroupName, name, view, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a view of all network features in use on this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteNetworkFeaturesAsync(String resourceGroupName, String name, String view, String subscriptionId, String apiVersion, final ApiCallback<NetworkFeatures> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteNetworkFeaturesValidateBeforeCall(resourceGroupName, name, view, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteNetworkFeaturesSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteNetworkFeaturesSlotCall(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/networkFeatures/{view}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "view" + "}", localVarApiClient.escapeString(view.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteNetworkFeaturesSlotValidateBeforeCall(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling sitesGetSiteNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteNetworkFeaturesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteNetworkFeaturesSlot(Async)");
        }

        return sitesGetSiteNetworkFeaturesSlotCall(resourceGroupName, name, view, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a view of all network features in use on this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return NetworkFeatures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public NetworkFeatures sitesGetSiteNetworkFeaturesSlot(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<NetworkFeatures> localVarResp = sitesGetSiteNetworkFeaturesSlotWithHttpInfo(resourceGroupName, name, view, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;NetworkFeatures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NetworkFeatures> sitesGetSiteNetworkFeaturesSlotWithHttpInfo(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteNetworkFeaturesSlotValidateBeforeCall(resourceGroupName, name, view, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a view of all network features in use on this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param view The type of view. This can either be \&quot;summary\&quot; or \&quot;detailed\&quot;. (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested view does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteNetworkFeaturesSlotAsync(String resourceGroupName, String name, String view, String slot, String subscriptionId, String apiVersion, final ApiCallback<NetworkFeatures> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteNetworkFeaturesSlotValidateBeforeCall(resourceGroupName, name, view, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<NetworkFeatures>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteOperation
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteOperationCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteOperationValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling sitesGetSiteOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteOperation(Async)");
        }

        return sitesGetSiteOperationCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the operation for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSiteOperation(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSiteOperationWithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the operation for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSiteOperationWithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the operation for a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteOperationAsync(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteOperationSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteOperationSlotCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/operationresults/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteOperationSlotValidateBeforeCall(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteOperationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteOperationSlot(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling sitesGetSiteOperationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteOperationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteOperationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteOperationSlot(Async)");
        }

        return sitesGetSiteOperationSlotCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the operation for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSiteOperationSlot(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSiteOperationSlotWithHttpInfo(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the operation for a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSiteOperationSlotWithHttpInfo(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteOperationSlotValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the operation for a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param operationId Id of an operation (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteOperationSlotAsync(String resourceGroupName, String name, String operationId, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteOperationSlotValidateBeforeCall(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSitePremierAddOn
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSitePremierAddOnCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSitePremierAddOnValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSitePremierAddOn(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSitePremierAddOn(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling sitesGetSitePremierAddOn(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSitePremierAddOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSitePremierAddOn(Async)");
        }

        return sitesGetSitePremierAddOnCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSitePremierAddOn(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSitePremierAddOnWithHttpInfo(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSitePremierAddOnWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSitePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSitePremierAddOnAsync(String resourceGroupName, String name, String premierAddOnName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSitePremierAddOnValidateBeforeCall(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSitePremierAddOnSlot
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSitePremierAddOnSlotCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons/{premierAddOnName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "premierAddOnName" + "}", localVarApiClient.escapeString(premierAddOnName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSitePremierAddOnSlotValidateBeforeCall(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'premierAddOnName' is set
        if (premierAddOnName == null) {
            throw new ApiException("Missing the required parameter 'premierAddOnName' when calling sitesGetSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSitePremierAddOnSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSitePremierAddOnSlot(Async)");
        }

        return sitesGetSitePremierAddOnSlotCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSitePremierAddOnSlot(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSitePremierAddOnSlotWithHttpInfo(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSitePremierAddOnSlotWithHttpInfo(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSitePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param premierAddOnName  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSitePremierAddOnSlotAsync(String resourceGroupName, String name, String premierAddOnName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSitePremierAddOnSlotValidateBeforeCall(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteRelayServiceConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesGetSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteRelayServiceConnection(Async)");
        }

        return sitesGetSiteRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesGetSiteRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesGetSiteRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesGetSiteRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteRelayServiceConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesGetSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteRelayServiceConnectionSlot(Async)");
        }

        return sitesGetSiteRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesGetSiteRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesGetSiteRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesGetSiteRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteSlot(Async)");
        }

        return sitesGetSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, propertiesToInclude, _callback);

    }

    /**
     * Get details of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Site sitesGetSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        ApiResponse<Site> localVarResp = sitesGetSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, propertiesToInclude);
        return localVarResp.getData();
    }

    /**
     * Get details of a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> sitesGetSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, propertiesToInclude, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, propertiesToInclude, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteSlots
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude List of app properties to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSlotsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteSlotsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSlots(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteSlots(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSlots(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteSlots(Async)");
        }

        return sitesGetSiteSlotsCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);

    }

    /**
     * Gets all the slots for a web apps
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude List of app properties to include in the response (optional)
     * @return SiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteCollection sitesGetSiteSlots(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        ApiResponse<SiteCollection> localVarResp = sitesGetSiteSlotsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        return localVarResp.getData();
    }

    /**
     * Gets all the slots for a web apps
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude List of app properties to include in the response (optional)
     * @return ApiResponse&lt;SiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCollection> sitesGetSiteSlotsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteSlotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, null);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the slots for a web apps (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude List of app properties to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSlotsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback<SiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteSlotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteSnapshots
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSnapshotsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/snapshots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteSnapshotsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSnapshots(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteSnapshots(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSnapshots(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteSnapshots(Async)");
        }

        return sitesGetSiteSnapshotsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns all Snapshots to the user.
     * 
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSiteSnapshots(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSiteSnapshotsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all Snapshots to the user.
     * 
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSiteSnapshotsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteSnapshotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Snapshots to the user. (asynchronously)
     * 
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSnapshotsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteSnapshotsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteSnapshotsSlot
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param slot Website Slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSnapshotsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/snapshots"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteSnapshotsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSnapshotsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteSnapshotsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteSnapshotsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSnapshotsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteSnapshotsSlot(Async)");
        }

        return sitesGetSiteSnapshotsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Returns all Snapshots to the user.
     * 
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param slot Website Slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSiteSnapshotsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSiteSnapshotsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Returns all Snapshots to the user.
     * 
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param slot Website Slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSiteSnapshotsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteSnapshotsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns all Snapshots to the user. (asynchronously)
     * 
     * @param resourceGroupName Webspace (required)
     * @param name Website Name (required)
     * @param slot Website Slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSnapshotsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteSnapshotsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteSourceControl
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteSourceControl(Async)");
        }

        return sitesGetSiteSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl sitesGetSiteSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = sitesGetSiteSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> sitesGetSiteSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteSourceControlSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteSourceControlSlot(Async)");
        }

        return sitesGetSiteSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl sitesGetSiteSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = sitesGetSiteSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> sitesGetSiteSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteUsages
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteUsagesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteUsagesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteUsages(Async)");
        }

        return sitesGetSiteUsagesCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Gets the quota usage numbers for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return CsmUsageQuotaCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CsmUsageQuotaCollection sitesGetSiteUsages(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<CsmUsageQuotaCollection> localVarResp = sitesGetSiteUsagesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets the quota usage numbers for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;CsmUsageQuotaCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CsmUsageQuotaCollection> sitesGetSiteUsagesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<CsmUsageQuotaCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the quota usage numbers for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteUsagesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback<CsmUsageQuotaCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<CsmUsageQuotaCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteUsagesSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteUsagesSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteUsagesSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteUsagesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteUsagesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteUsagesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteUsagesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteUsagesSlot(Async)");
        }

        return sitesGetSiteUsagesSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Gets the quota usage numbers for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return CsmUsageQuotaCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CsmUsageQuotaCollection sitesGetSiteUsagesSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<CsmUsageQuotaCollection> localVarResp = sitesGetSiteUsagesSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Gets the quota usage numbers for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;CsmUsageQuotaCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CsmUsageQuotaCollection> sitesGetSiteUsagesSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteUsagesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<CsmUsageQuotaCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the quota usage numbers for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages specified in the filter. Filter is specified by using OData syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteUsagesSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, String $filter, final ApiCallback<CsmUsageQuotaCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteUsagesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<CsmUsageQuotaCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteVNETConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteVNETConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteVNETConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesGetSiteVNETConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnection(Async)");
        }

        return sitesGetSiteVNETConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return VnetInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetInfo sitesGetSiteVNETConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<VnetInfo> localVarResp = sitesGetSiteVNETConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetInfo> sitesGetSiteVNETConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, final ApiCallback<VnetInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteVNETConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteVNETConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesGetSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnectionSlot(Async)");
        }

        return sitesGetSiteVNETConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return VnetInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetInfo sitesGetSiteVNETConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<VnetInfo> localVarResp = sitesGetSiteVNETConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetInfo> sitesGetSiteVNETConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, final ApiCallback<VnetInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteVNETConnections
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteVNETConnectionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnections(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteVNETConnections(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnections(Async)");
        }

        return sitesGetSiteVNETConnectionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VnetInfo> sitesGetSiteVNETConnections(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<VnetInfo>> localVarResp = sitesGetSiteVNETConnectionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;VnetInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VnetInfo>> sitesGetSiteVNETConnectionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<VnetInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<VnetInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<VnetInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteVNETConnectionsSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteVNETConnectionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVNETConnectionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteVNETConnectionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteVNETConnectionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVNETConnectionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteVNETConnectionsSlot(Async)");
        }

        return sitesGetSiteVNETConnectionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<VnetInfo> sitesGetSiteVNETConnectionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<VnetInfo>> localVarResp = sitesGetSiteVNETConnectionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;VnetInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VnetInfo>> sitesGetSiteVNETConnectionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<VnetInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVNETConnectionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<List<VnetInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteVNETConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<VnetInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteVnetGateway
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVnetGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteVnetGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVnetGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteVnetGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesGetSiteVnetGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling sitesGetSiteVnetGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVnetGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteVnetGateway(Async)");
        }

        return sitesGetSiteVnetGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSiteVnetGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSiteVnetGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSiteVnetGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVnetGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteVnetGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSiteVnetGatewaySlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVnetGatewaySlotCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSiteVnetGatewaySlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSiteVnetGatewaySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSiteVnetGatewaySlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesGetSiteVnetGatewaySlot(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling sitesGetSiteVnetGatewaySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSiteVnetGatewaySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSiteVnetGatewaySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSiteVnetGatewaySlot(Async)");
        }

        return sitesGetSiteVnetGatewaySlotCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesGetSiteVnetGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesGetSiteVnetGatewaySlotWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesGetSiteVnetGatewaySlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSiteVnetGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Gateway does not exist. Only the \&quot;primary\&quot; gateway exists presently. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSiteVnetGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSiteVnetGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSites
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @param includeSlots Whether or not to include deployments slots in results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSitesCall(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, Boolean includeSlots, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (includeSiteTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSiteTypes", includeSiteTypes));
        }

        if (includeSlots != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSlots", includeSlots));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSitesValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, Boolean includeSlots, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSites(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSites(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSites(Async)");
        }

        return sitesGetSitesCall(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, includeSlots, _callback);

    }

    /**
     * Gets the web apps for a subscription in the specified resource group
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @param includeSlots Whether or not to include deployments slots in results (optional)
     * @return SiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteCollection sitesGetSites(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, Boolean includeSlots) throws ApiException {
        ApiResponse<SiteCollection> localVarResp = sitesGetSitesWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, includeSlots);
        return localVarResp.getData();
    }

    /**
     * Gets the web apps for a subscription in the specified resource group
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @param includeSlots Whether or not to include deployments slots in results (optional)
     * @return ApiResponse&lt;SiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCollection> sitesGetSitesWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, Boolean includeSlots) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSitesValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, includeSlots, null);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the web apps for a subscription in the specified resource group (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Additional web app properties included in the response (optional)
     * @param includeSiteTypes Types of apps included in the response (optional)
     * @param includeSlots Whether or not to include deployments slots in results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSitesAsync(String resourceGroupName, String subscriptionId, String apiVersion, String propertiesToInclude, String includeSiteTypes, Boolean includeSlots, final ApiCallback<SiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSitesValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, includeSlots, _callback);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSlotConfigNames
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSlotConfigNamesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSlotConfigNamesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSlotConfigNames(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSlotConfigNames(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSlotConfigNames(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSlotConfigNames(Async)");
        }

        return sitesGetSlotConfigNamesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SlotConfigNamesResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SlotConfigNamesResource sitesGetSlotConfigNames(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SlotConfigNamesResource> localVarResp = sitesGetSlotConfigNamesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SlotConfigNamesResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotConfigNamesResource> sitesGetSlotConfigNamesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSlotConfigNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSlotConfigNamesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SlotConfigNamesResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSlotConfigNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSlotsDifferencesFromProduction
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSlotsDifferencesFromProductionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsdiffs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSlotsDifferencesFromProductionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSlotsDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSlotsDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSlotsDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSlotsDifferencesFromProduction(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling sitesGetSlotsDifferencesFromProduction(Async)");
        }

        return sitesGetSlotsDifferencesFromProductionCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Get the difference in configuration settings between two web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return SlotDifferenceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SlotDifferenceCollection sitesGetSlotsDifferencesFromProduction(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<SlotDifferenceCollection> localVarResp = sitesGetSlotsDifferencesFromProductionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Get the difference in configuration settings between two web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return ApiResponse&lt;SlotDifferenceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotDifferenceCollection> sitesGetSlotsDifferencesFromProductionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSlotsDifferencesFromProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the difference in configuration settings between two web app slots (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSlotsDifferencesFromProductionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<SlotDifferenceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSlotsDifferencesFromProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesGetSlotsDifferencesSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSlotsDifferencesSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsdiffs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesGetSlotsDifferencesSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesGetSlotsDifferencesSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesGetSlotsDifferencesSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesGetSlotsDifferencesSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesGetSlotsDifferencesSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesGetSlotsDifferencesSlot(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling sitesGetSlotsDifferencesSlot(Async)");
        }

        return sitesGetSlotsDifferencesSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Get the difference in configuration settings between two web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return SlotDifferenceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SlotDifferenceCollection sitesGetSlotsDifferencesSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<SlotDifferenceCollection> localVarResp = sitesGetSlotsDifferencesSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Get the difference in configuration settings between two web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return ApiResponse&lt;SlotDifferenceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotDifferenceCollection> sitesGetSlotsDifferencesSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesGetSlotsDifferencesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the difference in configuration settings between two web app slots (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of the source slot (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesGetSlotsDifferencesSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<SlotDifferenceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesGetSlotsDifferencesSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<SlotDifferenceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesIsSiteCloneable
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIsSiteCloneableCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/iscloneable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesIsSiteCloneableValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesIsSiteCloneable(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesIsSiteCloneable(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesIsSiteCloneable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesIsSiteCloneable(Async)");
        }

        return sitesIsSiteCloneableCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteCloneability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteCloneability sitesIsSiteCloneable(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteCloneability> localVarResp = sitesIsSiteCloneableWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteCloneability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCloneability> sitesIsSiteCloneableWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesIsSiteCloneableValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web app or modifies an existing web app. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIsSiteCloneableAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteCloneability> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesIsSiteCloneableValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesIsSiteCloneableSlot
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIsSiteCloneableSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/iscloneable"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesIsSiteCloneableSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesIsSiteCloneableSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesIsSiteCloneableSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesIsSiteCloneableSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesIsSiteCloneableSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesIsSiteCloneableSlot(Async)");
        }

        return sitesIsSiteCloneableSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteCloneability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteCloneability sitesIsSiteCloneableSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteCloneability> localVarResp = sitesIsSiteCloneableSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Creates a new web app or modifies an existing web app.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteCloneability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCloneability> sitesIsSiteCloneableSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesIsSiteCloneableSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new web app or modifies an existing web app. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesIsSiteCloneableSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteCloneability> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesIsSiteCloneableSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteCloneability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteAppSettings
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAppSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteAppSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAppSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteAppSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteAppSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteAppSettings(Async)");
        }

        return sitesListSiteAppSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesListSiteAppSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesListSiteAppSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesListSiteAppSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteAppSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the application settings of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAppSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteAppSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteAppSettingsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAppSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteAppSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteAppSettingsSlot(Async)");
        }

        return sitesListSiteAppSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesListSiteAppSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesListSiteAppSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesListSiteAppSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteAppSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the application settings of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAppSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteAppSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteAuthSettings
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAuthSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteAuthSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAuthSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteAuthSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteAuthSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteAuthSettings(Async)");
        }

        return sitesListSiteAuthSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings sitesListSiteAuthSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = sitesListSiteAuthSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> sitesListSiteAuthSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAuthSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteAuthSettingsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAuthSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteAuthSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteAuthSettingsSlot(Async)");
        }

        return sitesListSiteAuthSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings sitesListSiteAuthSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = sitesListSiteAuthSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> sitesListSiteAuthSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteAuthSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteBackups
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteBackupsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteBackupsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteBackups(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteBackups(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteBackups(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteBackups(Async)");
        }

        return sitesListSiteBackupsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists all available backups for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItemCollection sitesListSiteBackups(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItemCollection> localVarResp = sitesListSiteBackupsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all available backups for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItemCollection> sitesListSiteBackupsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteBackupsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all available backups for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteBackupsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<BackupItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteBackupsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteBackupsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteBackupsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteBackupsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteBackupsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteBackupsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSiteBackupsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteBackupsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteBackupsSlot(Async)");
        }

        return sitesListSiteBackupsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists all available backups for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return BackupItemCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupItemCollection sitesListSiteBackupsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<BackupItemCollection> localVarResp = sitesListSiteBackupsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all available backups for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;BackupItemCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupItemCollection> sitesListSiteBackupsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteBackupsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all available backups for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteBackupsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<BackupItemCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteBackupsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BackupItemCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteConnectionStrings
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteConnectionStringsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteConnectionStringsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteConnectionStrings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteConnectionStrings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteConnectionStrings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteConnectionStrings(Async)");
        }

        return sitesListSiteConnectionStringsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary sitesListSiteConnectionStrings(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = sitesListSiteConnectionStringsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> sitesListSiteConnectionStringsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the connection strings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteConnectionStringsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteConnectionStringsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteConnectionStringsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteConnectionStringsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteConnectionStringsSlot(Async)");
        }

        return sitesListSiteConnectionStringsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary sitesListSiteConnectionStringsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = sitesListSiteConnectionStringsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> sitesListSiteConnectionStringsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the connection strings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteConnectionStringsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteMetadata
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteMetadataCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteMetadataValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteMetadata(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteMetadata(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteMetadata(Async)");
        }

        return sitesListSiteMetadataCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the web app meta data.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesListSiteMetadata(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesListSiteMetadataWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the web app meta data.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesListSiteMetadataWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the web app meta data. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteMetadataAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteMetadataSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteMetadataSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteMetadataSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteMetadataSlot(Async)");
        }

        return sitesListSiteMetadataSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the web app meta data.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesListSiteMetadataSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesListSiteMetadataSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the web app meta data.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesListSiteMetadataSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the web app meta data. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteMetadataSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSitePremierAddOns
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePremierAddOnsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/premieraddons"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSitePremierAddOnsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSitePremierAddOns(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSitePremierAddOns(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSitePremierAddOns(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSitePremierAddOns(Async)");
        }

        return sitesListSitePremierAddOnsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesListSitePremierAddOns(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesListSitePremierAddOnsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesListSitePremierAddOnsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSitePremierAddOnsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePremierAddOnsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSitePremierAddOnsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSitePremierAddOnsSlot
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePremierAddOnsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/premieraddons"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSitePremierAddOnsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSitePremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSitePremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSitePremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSitePremierAddOnsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSitePremierAddOnsSlot(Async)");
        }

        return sitesListSitePremierAddOnsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesListSitePremierAddOnsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesListSitePremierAddOnsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesListSitePremierAddOnsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSitePremierAddOnsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePremierAddOnsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSitePremierAddOnsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSitePublishingCredentials
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingCredentialsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/publishingcredentials/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSitePublishingCredentialsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingCredentials(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSitePublishingCredentials(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingCredentials(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingCredentials(Async)");
        }

        return sitesListSitePublishingCredentialsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the web app publishing credentials
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public User sitesListSitePublishingCredentials(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<User> localVarResp = sitesListSitePublishingCredentialsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the web app publishing credentials
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> sitesListSitePublishingCredentialsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSitePublishingCredentialsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the web app publishing credentials (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingCredentialsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSitePublishingCredentialsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSitePublishingCredentialsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingCredentialsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/publishingcredentials/list"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSitePublishingCredentialsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSitePublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSitePublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingCredentialsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingCredentialsSlot(Async)");
        }

        return sitesListSitePublishingCredentialsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the web app publishing credentials
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public User sitesListSitePublishingCredentialsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<User> localVarResp = sitesListSitePublishingCredentialsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the web app publishing credentials
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> sitesListSitePublishingCredentialsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSitePublishingCredentialsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the web app publishing credentials (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingCredentialsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSitePublishingCredentialsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSitePublishingProfileXml
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingProfileXmlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/publishxml"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSitePublishingProfileXmlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingProfileXml(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSitePublishingProfileXml(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingProfileXml(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingProfileXml(Async)");
        }

        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException("Missing the required parameter 'options' when calling sitesListSitePublishingProfileXml(Async)");
        }

        return sitesListSitePublishingProfileXmlCall(resourceGroupName, name, subscriptionId, apiVersion, options, _callback);

    }

    /**
     * Gets the publishing profile for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File sitesListSitePublishingProfileXml(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options) throws ApiException {
        ApiResponse<File> localVarResp = sitesListSitePublishingProfileXmlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, options);
        return localVarResp.getData();
    }

    /**
     * Gets the publishing profile for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> sitesListSitePublishingProfileXmlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options) throws ApiException {
        okhttp3.Call localVarCall = sitesListSitePublishingProfileXmlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, options, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the publishing profile for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingProfileXmlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSitePublishingProfileXmlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, options, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSitePublishingProfileXmlSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingProfileXmlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = options;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/publishxml"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSitePublishingProfileXmlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSitePublishingProfileXmlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSitePublishingProfileXmlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSitePublishingProfileXmlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSitePublishingProfileXmlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSitePublishingProfileXmlSlot(Async)");
        }

        // verify the required parameter 'options' is set
        if (options == null) {
            throw new ApiException("Missing the required parameter 'options' when calling sitesListSitePublishingProfileXmlSlot(Async)");
        }

        return sitesListSitePublishingProfileXmlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, options, _callback);

    }

    /**
     * Gets the publishing profile for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public File sitesListSitePublishingProfileXmlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options) throws ApiException {
        ApiResponse<File> localVarResp = sitesListSitePublishingProfileXmlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, options);
        return localVarResp.getData();
    }

    /**
     * Gets the publishing profile for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> sitesListSitePublishingProfileXmlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options) throws ApiException {
        okhttp3.Call localVarCall = sitesListSitePublishingProfileXmlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, options, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the publishing profile for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param options Specifies options for publishing profile. Pass CsmPublishingProfileOptions.Format&#x3D;FileZilla3 for FileZilla FTP format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSitePublishingProfileXmlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmPublishingProfileOptions options, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSitePublishingProfileXmlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, options, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteRelayServiceConnections
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteRelayServiceConnectionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteRelayServiceConnectionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteRelayServiceConnections(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteRelayServiceConnections(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteRelayServiceConnections(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteRelayServiceConnections(Async)");
        }

        return sitesListSiteRelayServiceConnectionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesListSiteRelayServiceConnections(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesListSiteRelayServiceConnectionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesListSiteRelayServiceConnectionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteRelayServiceConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteRelayServiceConnectionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteRelayServiceConnectionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesListSiteRelayServiceConnectionsSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteRelayServiceConnectionsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesListSiteRelayServiceConnectionsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesListSiteRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesListSiteRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesListSiteRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesListSiteRelayServiceConnectionsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesListSiteRelayServiceConnectionsSlot(Async)");
        }

        return sitesListSiteRelayServiceConnectionsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesListSiteRelayServiceConnectionsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesListSiteRelayServiceConnectionsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesListSiteRelayServiceConnectionsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesListSiteRelayServiceConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesListSiteRelayServiceConnectionsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesListSiteRelayServiceConnectionsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesRecoverSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRecoverSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recoveryEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/recover"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesRecoverSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesRecoverSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesRecoverSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesRecoverSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesRecoverSite(Async)");
        }

        // verify the required parameter 'recoveryEntity' is set
        if (recoveryEntity == null) {
            throw new ApiException("Missing the required parameter 'recoveryEntity' when calling sitesRecoverSite(Async)");
        }

        return sitesRecoverSiteCall(resourceGroupName, name, subscriptionId, apiVersion, recoveryEntity, _callback);

    }

    /**
     * Recovers a deleted web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public Site sitesRecoverSite(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity) throws ApiException {
        ApiResponse<Site> localVarResp = sitesRecoverSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, recoveryEntity);
        return localVarResp.getData();
    }

    /**
     * Recovers a deleted web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> sitesRecoverSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesRecoverSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, recoveryEntity, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recovers a deleted web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRecoverSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesRecoverSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, recoveryEntity, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesRecoverSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRecoverSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recoveryEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/recover"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesRecoverSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesRecoverSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesRecoverSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesRecoverSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesRecoverSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesRecoverSiteSlot(Async)");
        }

        // verify the required parameter 'recoveryEntity' is set
        if (recoveryEntity == null) {
            throw new ApiException("Missing the required parameter 'recoveryEntity' when calling sitesRecoverSiteSlot(Async)");
        }

        return sitesRecoverSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, recoveryEntity, _callback);

    }

    /**
     * Recovers a deleted web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @return Site
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public Site sitesRecoverSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity) throws ApiException {
        ApiResponse<Site> localVarResp = sitesRecoverSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, recoveryEntity);
        return localVarResp.getData();
    }

    /**
     * Recovers a deleted web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @return ApiResponse&lt;Site&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Site> sitesRecoverSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesRecoverSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, recoveryEntity, null);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recovers a deleted web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param recoveryEntity Snapshot data used for web app recovery. Snapshot information can be obtained by calling GetDeletedSites or GetSiteSnapshots API. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Web app not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRecoverSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSiteRecoveryEntity recoveryEntity, final ApiCallback<Site> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesRecoverSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, recoveryEntity, _callback);
        Type localVarReturnType = new TypeToken<Site>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesResetProductionSlotConfig
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesResetProductionSlotConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/resetSlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesResetProductionSlotConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesResetProductionSlotConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesResetProductionSlotConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesResetProductionSlotConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesResetProductionSlotConfig(Async)");
        }

        return sitesResetProductionSlotConfigCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesResetProductionSlotConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesResetProductionSlotConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesResetProductionSlotConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesResetProductionSlotConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesResetProductionSlotConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesResetProductionSlotConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesResetSlotConfigSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesResetSlotConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/resetSlotConfig"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesResetSlotConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesResetSlotConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesResetSlotConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesResetSlotConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesResetSlotConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesResetSlotConfigSlot(Async)");
        }

        return sitesResetSlotConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesResetSlotConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesResetSlotConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesResetSlotConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesResetSlotConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesResetSlotConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesResetSlotConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesRestartSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestartSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/restart"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("softRestart", softRestart));
        }

        if (synchronous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synchronous", synchronous));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesRestartSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesRestartSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesRestartSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesRestartSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesRestartSite(Async)");
        }

        return sitesRestartSiteCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous, _callback);

    }

    /**
     * Restarts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesRestartSite(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        ApiResponse<Object> localVarResp = sitesRestartSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous);
        return localVarResp.getData();
    }

    /**
     * Restarts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesRestartSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        okhttp3.Call localVarCall = sitesRestartSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restarts web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestartSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesRestartSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesRestartSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestartSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/restart"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (softRestart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("softRestart", softRestart));
        }

        if (synchronous != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synchronous", synchronous));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesRestartSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesRestartSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesRestartSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesRestartSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesRestartSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesRestartSiteSlot(Async)");
        }

        return sitesRestartSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous, _callback);

    }

    /**
     * Restarts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesRestartSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        ApiResponse<Object> localVarResp = sitesRestartSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous);
        return localVarResp.getData();
    }

    /**
     * Restarts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesRestartSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous) throws ApiException {
        okhttp3.Call localVarCall = sitesRestartSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restarts web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param softRestart Soft restart applies the configuration settings and restarts the app if necessary. Hard restart always restarts and reprovisions the app (optional)
     * @param synchronous If true then the API will block until the app has been restarted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestartSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, Boolean softRestart, Boolean synchronous, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesRestartSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesRestoreSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestoreSiteCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/backups/{backupId}/restore"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesRestoreSiteValidateBeforeCall(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesRestoreSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesRestoreSite(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesRestoreSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesRestoreSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesRestoreSite(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesRestoreSite(Async)");
        }

        return sitesRestoreSiteCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Restores a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return RestoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RestoreResponse sitesRestoreSite(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        ApiResponse<RestoreResponse> localVarResp = sitesRestoreSiteWithHttpInfo(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Restores a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return ApiResponse&lt;RestoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreResponse> sitesRestoreSiteWithHttpInfo(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesRestoreSiteValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<RestoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restores a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestoreSiteAsync(String resourceGroupName, String name, String backupId, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<RestoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesRestoreSiteValidateBeforeCall(resourceGroupName, name, backupId, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<RestoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesRestoreSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestoreSiteSlotCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/backups/{backupId}/restore"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "backupId" + "}", localVarApiClient.escapeString(backupId.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesRestoreSiteSlotValidateBeforeCall(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesRestoreSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesRestoreSiteSlot(Async)");
        }

        // verify the required parameter 'backupId' is set
        if (backupId == null) {
            throw new ApiException("Missing the required parameter 'backupId' when calling sitesRestoreSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesRestoreSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesRestoreSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesRestoreSiteSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesRestoreSiteSlot(Async)");
        }

        return sitesRestoreSiteSlotCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Restores a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return RestoreResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RestoreResponse sitesRestoreSiteSlot(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        ApiResponse<RestoreResponse> localVarResp = sitesRestoreSiteSlotWithHttpInfo(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Restores a web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @return ApiResponse&lt;RestoreResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestoreResponse> sitesRestoreSiteSlotWithHttpInfo(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesRestoreSiteSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<RestoreResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Restores a web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param backupId Id of backup to restore (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on restore request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesRestoreSiteSlotAsync(String resourceGroupName, String name, String backupId, String slot, String subscriptionId, String apiVersion, RestoreRequest request, final ApiCallback<RestoreResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesRestoreSiteSlotValidateBeforeCall(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<RestoreResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesStartSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStartSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesStartSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesStartSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesStartSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesStartSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesStartSite(Async)");
        }

        return sitesStartSiteCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Starts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesStartSite(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesStartSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Starts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesStartSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesStartSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStartSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesStartSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesStartSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStartSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/start"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesStartSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesStartSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesStartSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesStartSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesStartSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesStartSiteSlot(Async)");
        }

        return sitesStartSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Starts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesStartSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesStartSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Starts web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesStartSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesStartSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStartSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesStartSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesStopSite
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStopSiteCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesStopSiteValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesStopSite(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesStopSite(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesStopSite(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesStopSite(Async)");
        }

        return sitesStopSiteCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stops web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesStopSite(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesStopSiteWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Stops web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesStopSiteWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesStopSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stops web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStopSiteAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesStopSiteValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesStopSiteSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStopSiteSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/stop"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesStopSiteSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesStopSiteSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesStopSiteSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesStopSiteSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesStopSiteSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesStopSiteSlot(Async)");
        }

        return sitesStopSiteSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * Stops web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesStopSiteSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesStopSiteSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Stops web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesStopSiteSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesStopSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stops web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesStopSiteSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesStopSiteSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesSwapSlotWithProduction
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSwapSlotWithProductionCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slotsswap"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesSwapSlotWithProductionValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesSwapSlotWithProduction(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling sitesSwapSlotWithProduction(Async)");
        }

        return sitesSwapSlotWithProductionCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Swaps web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesSwapSlotWithProduction(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<Object> localVarResp = sitesSwapSlotWithProductionWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Swaps web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesSwapSlotWithProductionWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesSwapSlotWithProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Swaps web app slots (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSwapSlotWithProductionAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesSwapSlotWithProductionValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesSwapSlotsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of source slot for the swap (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSwapSlotsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotSwapEntity;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/slotsswap"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesSwapSlotsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesSwapSlotsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesSwapSlotsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesSwapSlotsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesSwapSlotsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesSwapSlotsSlot(Async)");
        }

        // verify the required parameter 'slotSwapEntity' is set
        if (slotSwapEntity == null) {
            throw new ApiException("Missing the required parameter 'slotSwapEntity' when calling sitesSwapSlotsSlot(Async)");
        }

        return sitesSwapSlotsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);

    }

    /**
     * Swaps web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of source slot for the swap (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesSwapSlotsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        ApiResponse<Object> localVarResp = sitesSwapSlotsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        return localVarResp.getData();
    }

    /**
     * Swaps web app slots
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of source slot for the swap (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesSwapSlotsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity) throws ApiException {
        okhttp3.Call localVarCall = sitesSwapSlotsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Swaps web app slots (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of source slot for the swap (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotSwapEntity Request body that contains the target slot name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSwapSlotsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, CsmSlotEntity slotSwapEntity, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesSwapSlotsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesSyncSiteRepository
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSyncSiteRepositoryCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sync"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesSyncSiteRepositoryValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesSyncSiteRepository(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesSyncSiteRepository(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesSyncSiteRepository(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesSyncSiteRepository(Async)");
        }

        return sitesSyncSiteRepositoryCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesSyncSiteRepository(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesSyncSiteRepositoryWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesSyncSiteRepositoryWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesSyncSiteRepositoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSyncSiteRepositoryAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesSyncSiteRepositoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesSyncSiteRepositorySlot
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSyncSiteRepositorySlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sync"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesSyncSiteRepositorySlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesSyncSiteRepositorySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesSyncSiteRepositorySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesSyncSiteRepositorySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesSyncSiteRepositorySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesSyncSiteRepositorySlot(Async)");
        }

        return sitesSyncSiteRepositorySlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object sitesSyncSiteRepositorySlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = sitesSyncSiteRepositorySlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> sitesSyncSiteRepositorySlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sitesSyncSiteRepositorySlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param resourceGroupName  (required)
     * @param name  (required)
     * @param slot  (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesSyncSiteRepositorySlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesSyncSiteRepositorySlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteAppSettings
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAppSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/appsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteAppSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAppSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteAppSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAppSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAppSettings(Async)");
        }

        // verify the required parameter 'appSettings' is set
        if (appSettings == null) {
            throw new ApiException("Missing the required parameter 'appSettings' when calling sitesUpdateSiteAppSettings(Async)");
        }

        return sitesUpdateSiteAppSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, appSettings, _callback);

    }

    /**
     * Updates the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesUpdateSiteAppSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesUpdateSiteAppSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, appSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesUpdateSiteAppSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteAppSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appSettings, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the application settings of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAppSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteAppSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, appSettings, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteAppSettingsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAppSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/appsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteAppSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAppSettingsSlot(Async)");
        }

        // verify the required parameter 'appSettings' is set
        if (appSettings == null) {
            throw new ApiException("Missing the required parameter 'appSettings' when calling sitesUpdateSiteAppSettingsSlot(Async)");
        }

        return sitesUpdateSiteAppSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, _callback);

    }

    /**
     * Updates the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesUpdateSiteAppSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesUpdateSiteAppSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the application settings of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesUpdateSiteAppSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteAppSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the application settings of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param appSettings Application settings of web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAppSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary appSettings, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteAppSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteAuthSettings
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAuthSettingsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteAuthSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/authsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteAuthSettingsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAuthSettings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteAuthSettings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAuthSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAuthSettings(Async)");
        }

        // verify the required parameter 'siteAuthSettings' is set
        if (siteAuthSettings == null) {
            throw new ApiException("Missing the required parameter 'siteAuthSettings' when calling sitesUpdateSiteAuthSettings(Async)");
        }

        return sitesUpdateSiteAuthSettingsCall(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, _callback);

    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings sitesUpdateSiteAuthSettings(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = sitesUpdateSiteAuthSettingsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> sitesUpdateSiteAuthSettingsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAuthSettingsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteAuthSettingsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteAuthSettingsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAuthSettingsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteAuthSettings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/authsettings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteAuthSettingsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteAuthSettingsSlot(Async)");
        }

        // verify the required parameter 'siteAuthSettings' is set
        if (siteAuthSettings == null) {
            throw new ApiException("Missing the required parameter 'siteAuthSettings' when calling sitesUpdateSiteAuthSettingsSlot(Async)");
        }

        return sitesUpdateSiteAuthSettingsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, _callback);

    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @return SiteAuthSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteAuthSettings sitesUpdateSiteAuthSettingsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        ApiResponse<SiteAuthSettings> localVarResp = sitesUpdateSiteAuthSettingsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings);
        return localVarResp.getData();
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @return ApiResponse&lt;SiteAuthSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteAuthSettings> sitesUpdateSiteAuthSettingsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, null);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteAuthSettings Auth settings associated with web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteAuthSettingsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteAuthSettings siteAuthSettings, final ApiCallback<SiteAuthSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteAuthSettingsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings, _callback);
        Type localVarReturnType = new TypeToken<SiteAuthSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteBackupConfiguration
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteBackupConfigurationCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteBackupConfigurationValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteBackupConfiguration(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteBackupConfiguration(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteBackupConfiguration(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteBackupConfiguration(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesUpdateSiteBackupConfiguration(Async)");
        }

        return sitesUpdateSiteBackupConfigurationCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Updates backup configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest sitesUpdateSiteBackupConfiguration(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = sitesUpdateSiteBackupConfigurationWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Updates backup configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> sitesUpdateSiteBackupConfigurationWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates backup configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteBackupConfigurationAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteBackupConfigurationValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteBackupConfigurationSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteBackupConfigurationSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/backup"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteBackupConfigurationSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteBackupConfigurationSlot(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling sitesUpdateSiteBackupConfigurationSlot(Async)");
        }

        return sitesUpdateSiteBackupConfigurationSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);

    }

    /**
     * Updates backup configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return BackupRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public BackupRequest sitesUpdateSiteBackupConfigurationSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        ApiResponse<BackupRequest> localVarResp = sitesUpdateSiteBackupConfigurationSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        return localVarResp.getData();
    }

    /**
     * Updates backup configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @return ApiResponse&lt;BackupRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackupRequest> sitesUpdateSiteBackupConfigurationSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, null);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates backup configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param request Information on backup request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteBackupConfigurationSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, BackupRequest request, final ApiCallback<BackupRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteBackupConfigurationSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, request, _callback);
        Type localVarReturnType = new TypeToken<BackupRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteConfig
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConfig(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling sitesUpdateSiteConfig(Async)");
        }

        return sitesUpdateSiteConfigCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return SiteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfig sitesUpdateSiteConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        ApiResponse<SiteConfig> localVarResp = sitesUpdateSiteConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return ApiResponse&lt;SiteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfig> sitesUpdateSiteConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback<SiteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteConfigSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConfigSlot(Async)");
        }

        // verify the required parameter 'siteConfig' is set
        if (siteConfig == null) {
            throw new ApiException("Missing the required parameter 'siteConfig' when calling sitesUpdateSiteConfigSlot(Async)");
        }

        return sitesUpdateSiteConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);

    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return SiteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteConfig sitesUpdateSiteConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        ApiResponse<SiteConfig> localVarResp = sitesUpdateSiteConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        return localVarResp.getData();
    }

    /**
     * Update the configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @return ApiResponse&lt;SiteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteConfig> sitesUpdateSiteConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, null);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteConfig Request body that contains the configuration setting for the web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteConfig siteConfig, final ApiCallback<SiteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteConnectionStrings
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConnectionStringsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionStrings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/connectionstrings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteConnectionStringsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConnectionStrings(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteConnectionStrings(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConnectionStrings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConnectionStrings(Async)");
        }

        // verify the required parameter 'connectionStrings' is set
        if (connectionStrings == null) {
            throw new ApiException("Missing the required parameter 'connectionStrings' when calling sitesUpdateSiteConnectionStrings(Async)");
        }

        return sitesUpdateSiteConnectionStringsCall(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, _callback);

    }

    /**
     * Updates the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary sitesUpdateSiteConnectionStrings(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = sitesUpdateSiteConnectionStringsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings);
        return localVarResp.getData();
    }

    /**
     * Updates the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> sitesUpdateSiteConnectionStringsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the connection strings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConnectionStringsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteConnectionStringsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteConnectionStringsSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConnectionStringsSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionStrings;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/connectionstrings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteConnectionStringsSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteConnectionStringsSlot(Async)");
        }

        // verify the required parameter 'connectionStrings' is set
        if (connectionStrings == null) {
            throw new ApiException("Missing the required parameter 'connectionStrings' when calling sitesUpdateSiteConnectionStringsSlot(Async)");
        }

        return sitesUpdateSiteConnectionStringsSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, _callback);

    }

    /**
     * Updates the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @return ConnectionStringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionStringDictionary sitesUpdateSiteConnectionStringsSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        ApiResponse<ConnectionStringDictionary> localVarResp = sitesUpdateSiteConnectionStringsSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings);
        return localVarResp.getData();
    }

    /**
     * Updates the connection strings associated with web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @return ApiResponse&lt;ConnectionStringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionStringDictionary> sitesUpdateSiteConnectionStringsSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, null);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the connection strings associated with web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionStrings Connection strings associated with web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteConnectionStringsSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, ConnectionStringDictionary connectionStrings, final ApiCallback<ConnectionStringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteConnectionStringsSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings, _callback);
        Type localVarReturnType = new TypeToken<ConnectionStringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteLogsConfig
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteLogsConfigCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteLogsConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteLogsConfigValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteLogsConfig(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteLogsConfig(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteLogsConfig(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteLogsConfig(Async)");
        }

        // verify the required parameter 'siteLogsConfig' is set
        if (siteLogsConfig == null) {
            throw new ApiException("Missing the required parameter 'siteLogsConfig' when calling sitesUpdateSiteLogsConfig(Async)");
        }

        return sitesUpdateSiteLogsConfigCall(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, _callback);

    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig sitesUpdateSiteLogsConfig(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = sitesUpdateSiteLogsConfigWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> sitesUpdateSiteLogsConfigWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteLogsConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the meta data for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteLogsConfigAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteLogsConfigValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteLogsConfigSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteLogsConfigSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteLogsConfig;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/logs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteLogsConfigSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteLogsConfigSlot(Async)");
        }

        // verify the required parameter 'siteLogsConfig' is set
        if (siteLogsConfig == null) {
            throw new ApiException("Missing the required parameter 'siteLogsConfig' when calling sitesUpdateSiteLogsConfigSlot(Async)");
        }

        return sitesUpdateSiteLogsConfigSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, _callback);

    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @return SiteLogsConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteLogsConfig sitesUpdateSiteLogsConfigSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        ApiResponse<SiteLogsConfig> localVarResp = sitesUpdateSiteLogsConfigSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig);
        return localVarResp.getData();
    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @return ApiResponse&lt;SiteLogsConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteLogsConfig> sitesUpdateSiteLogsConfigSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteLogsConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, null);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the meta data for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteLogsConfig Site logs configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteLogsConfigSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteLogsConfig siteLogsConfig, final ApiCallback<SiteLogsConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteLogsConfigSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig, _callback);
        Type localVarReturnType = new TypeToken<SiteLogsConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteMetadata
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteMetadataCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/metadata"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteMetadataValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteMetadata(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteMetadata(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteMetadata(Async)");
        }

        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling sitesUpdateSiteMetadata(Async)");
        }

        return sitesUpdateSiteMetadataCall(resourceGroupName, name, subscriptionId, apiVersion, metadata, _callback);

    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesUpdateSiteMetadata(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesUpdateSiteMetadataWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, metadata);
        return localVarResp.getData();
    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesUpdateSiteMetadataWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, metadata, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the meta data for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteMetadataAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteMetadataValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, metadata, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteMetadataSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteMetadataSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metadata;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/config/metadata"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteMetadataSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteMetadataSlot(Async)");
        }

        // verify the required parameter 'metadata' is set
        if (metadata == null) {
            throw new ApiException("Missing the required parameter 'metadata' when calling sitesUpdateSiteMetadataSlot(Async)");
        }

        return sitesUpdateSiteMetadataSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, _callback);

    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @return StringDictionary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StringDictionary sitesUpdateSiteMetadataSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        ApiResponse<StringDictionary> localVarResp = sitesUpdateSiteMetadataSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata);
        return localVarResp.getData();
    }

    /**
     * Updates the meta data for web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @return ApiResponse&lt;StringDictionary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StringDictionary> sitesUpdateSiteMetadataSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, null);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the meta data for web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param metadata Meta data of web app (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteMetadataSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, StringDictionary metadata, final ApiCallback<StringDictionary> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteMetadataSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata, _callback);
        Type localVarReturnType = new TypeToken<StringDictionary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteRelayServiceConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteRelayServiceConnectionCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteRelayServiceConnectionValidateBeforeCall(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteRelayServiceConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteRelayServiceConnection(Async)");
        }

        return sitesUpdateSiteRelayServiceConnectionCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesUpdateSiteRelayServiceConnection(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesUpdateSiteRelayServiceConnectionWithHttpInfo(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesUpdateSiteRelayServiceConnectionWithHttpInfo(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteRelayServiceConnectionAsync(String resourceGroupName, String name, String entityName, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteRelayServiceConnectionValidateBeforeCall(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteRelayServiceConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteRelayServiceConnectionSlotCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/hybridconnection/{entityName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "entityName" + "}", localVarApiClient.escapeString(entityName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteRelayServiceConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'entityName' is set
        if (entityName == null) {
            throw new ApiException("Missing the required parameter 'entityName' when calling sitesUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteRelayServiceConnectionSlot(Async)");
        }

        return sitesUpdateSiteRelayServiceConnectionSlotCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return RelayServiceConnectionEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RelayServiceConnectionEntity sitesUpdateSiteRelayServiceConnectionSlot(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        ApiResponse<RelayServiceConnectionEntity> localVarResp = sitesUpdateSiteRelayServiceConnectionSlotWithHttpInfo(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @return ApiResponse&lt;RelayServiceConnectionEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RelayServiceConnectionEntity> sitesUpdateSiteRelayServiceConnectionSlotWithHttpInfo(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param entityName The name by which the Hybrid Connection is identified (required)
     * @param slot The name of the slot for the web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The details of the Hybrid Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteRelayServiceConnectionSlotAsync(String resourceGroupName, String name, String entityName, String slot, String subscriptionId, String apiVersion, RelayServiceConnectionEntity connectionEnvelope, final ApiCallback<RelayServiceConnectionEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteRelayServiceConnectionSlotValidateBeforeCall(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<RelayServiceConnectionEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteSourceControl
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteSourceControlCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteSourceControlValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteSourceControl(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling sitesUpdateSiteSourceControl(Async)");
        }

        return sitesUpdateSiteSourceControlCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl sitesUpdateSiteSourceControl(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = sitesUpdateSiteSourceControlWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> sitesUpdateSiteSourceControlWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteSourceControlAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteSourceControlValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteSourceControlSlot
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteSourceControlSlotCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = siteSourceControl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/sourcecontrols/web"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteSourceControlSlotValidateBeforeCall(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteSourceControlSlot(Async)");
        }

        // verify the required parameter 'siteSourceControl' is set
        if (siteSourceControl == null) {
            throw new ApiException("Missing the required parameter 'siteSourceControl' when calling sitesUpdateSiteSourceControlSlot(Async)");
        }

        return sitesUpdateSiteSourceControlSlotCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);

    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return SiteSourceControl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteSourceControl sitesUpdateSiteSourceControlSlot(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        ApiResponse<SiteSourceControl> localVarResp = sitesUpdateSiteSourceControlSlotWithHttpInfo(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        return localVarResp.getData();
    }

    /**
     * Update the source control configuration of web app
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @return ApiResponse&lt;SiteSourceControl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteSourceControl> sitesUpdateSiteSourceControlSlotWithHttpInfo(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, null);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the source control configuration of web app (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param slot Name of web app slot. If not specified then will default to production slot. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param siteSourceControl Request body that contains the source control parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteSourceControlSlotAsync(String resourceGroupName, String name, String slot, String subscriptionId, String apiVersion, SiteSourceControl siteSourceControl, final ApiCallback<SiteSourceControl> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteSourceControlSlotValidateBeforeCall(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl, _callback);
        Type localVarReturnType = new TypeToken<SiteSourceControl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteVNETConnection
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteVNETConnectionValidateBeforeCall(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnection(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnection(Async)");
        }

        return sitesUpdateSiteVNETConnectionCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return VnetInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetInfo sitesUpdateSiteVNETConnection(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        ApiResponse<VnetInfo> localVarResp = sitesUpdateSiteVNETConnectionWithHttpInfo(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return ApiResponse&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetInfo> sitesUpdateSiteVNETConnectionWithHttpInfo(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionAsync(String resourceGroupName, String name, String vnetName, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback<VnetInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionValidateBeforeCall(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteVNETConnectionGateway
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionGatewayCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteVNETConnectionGatewayValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling sitesUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnectionGateway(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnectionGateway(Async)");
        }

        return sitesUpdateSiteVNETConnectionGatewayCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return VnetGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetGateway sitesUpdateSiteVNETConnectionGateway(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        ApiResponse<VnetGateway> localVarResp = sitesUpdateSiteVNETConnectionGatewayWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;VnetGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetGateway> sitesUpdateSiteVNETConnectionGatewayWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Virtual Network Gateway. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionGatewayAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback<VnetGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionGatewayValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteVNETConnectionGatewaySlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionGatewaySlotCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}/gateways/{gatewayName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "gatewayName" + "}", localVarApiClient.escapeString(gatewayName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteVNETConnectionGatewaySlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'gatewayName' is set
        if (gatewayName == null) {
            throw new ApiException("Missing the required parameter 'gatewayName' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnectionGatewaySlot(Async)");
        }

        return sitesUpdateSiteVNETConnectionGatewaySlotCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return VnetGateway
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetGateway sitesUpdateSiteVNETConnectionGatewaySlot(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        ApiResponse<VnetGateway> localVarResp = sitesUpdateSiteVNETConnectionGatewaySlotWithHttpInfo(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Updates the Virtual Network Gateway.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @return ApiResponse&lt;VnetGateway&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetGateway> sitesUpdateSiteVNETConnectionGatewaySlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the Virtual Network Gateway. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param gatewayName The name of the gateway. The only gateway that exists presently is \&quot;primary\&quot; (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties to update this gateway with. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionGatewaySlotAsync(String resourceGroupName, String name, String vnetName, String gatewayName, String slot, String subscriptionId, String apiVersion, VnetGateway connectionEnvelope, final ApiCallback<VnetGateway> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionGatewaySlotValidateBeforeCall(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetGateway>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSiteVNETConnectionSlot
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionSlotCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/slots/{slot}/virtualNetworkConnections/{vnetName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "vnetName" + "}", localVarApiClient.escapeString(vnetName.toString()))
            .replace("{" + "slot" + "}", localVarApiClient.escapeString(slot.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSiteVNETConnectionSlotValidateBeforeCall(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'vnetName' is set
        if (vnetName == null) {
            throw new ApiException("Missing the required parameter 'vnetName' when calling sitesUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'slot' is set
        if (slot == null) {
            throw new ApiException("Missing the required parameter 'slot' when calling sitesUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSiteVNETConnectionSlot(Async)");
        }

        // verify the required parameter 'connectionEnvelope' is set
        if (connectionEnvelope == null) {
            throw new ApiException("Missing the required parameter 'connectionEnvelope' when calling sitesUpdateSiteVNETConnectionSlot(Async)");
        }

        return sitesUpdateSiteVNETConnectionSlotCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);

    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return VnetInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VnetInfo sitesUpdateSiteVNETConnectionSlot(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        ApiResponse<VnetInfo> localVarResp = sitesUpdateSiteVNETConnectionSlotWithHttpInfo(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        return localVarResp.getData();
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @return ApiResponse&lt;VnetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VnetInfo> sitesUpdateSiteVNETConnectionSlotWithHttpInfo(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, null);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties. (asynchronously)
     * 
     * @param resourceGroupName The resource group name (required)
     * @param name The name of the web app (required)
     * @param vnetName The name of the Virtual Network (required)
     * @param slot The name of the slot for this web app. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param connectionEnvelope The properties of this Virtual Network Connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSiteVNETConnectionSlotAsync(String resourceGroupName, String name, String vnetName, String slot, String subscriptionId, String apiVersion, VnetInfo connectionEnvelope, final ApiCallback<VnetInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSiteVNETConnectionSlotValidateBeforeCall(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope, _callback);
        Type localVarReturnType = new TypeToken<VnetInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sitesUpdateSlotConfigNames
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Request body containing the names of application settings and connection strings (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSlotConfigNamesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = slotConfigNames;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{name}/config/slotConfigNames"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sitesUpdateSlotConfigNamesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sitesUpdateSlotConfigNames(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling sitesUpdateSlotConfigNames(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sitesUpdateSlotConfigNames(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sitesUpdateSlotConfigNames(Async)");
        }

        // verify the required parameter 'slotConfigNames' is set
        if (slotConfigNames == null) {
            throw new ApiException("Missing the required parameter 'slotConfigNames' when calling sitesUpdateSlotConfigNames(Async)");
        }

        return sitesUpdateSlotConfigNamesCall(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, _callback);

    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Request body containing the names of application settings and connection strings (required)
     * @return SlotConfigNamesResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SlotConfigNamesResource sitesUpdateSlotConfigNames(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames) throws ApiException {
        ApiResponse<SlotConfigNamesResource> localVarResp = sitesUpdateSlotConfigNamesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames);
        return localVarResp.getData();
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Request body containing the names of application settings and connection strings (required)
     * @return ApiResponse&lt;SlotConfigNamesResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SlotConfigNamesResource> sitesUpdateSlotConfigNamesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames) throws ApiException {
        okhttp3.Call localVarCall = sitesUpdateSlotConfigNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, null);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of web app (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param slotConfigNames Request body containing the names of application settings and connection strings (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sitesUpdateSlotConfigNamesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, SlotConfigNamesResource slotConfigNames, final ApiCallback<SlotConfigNamesResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = sitesUpdateSlotConfigNamesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames, _callback);
        Type localVarReturnType = new TypeToken<SlotConfigNamesResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
