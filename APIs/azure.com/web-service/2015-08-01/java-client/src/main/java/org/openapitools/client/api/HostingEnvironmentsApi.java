/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressResponse;
import org.openapitools.client.model.CsmUsageQuotaCollection;
import org.openapitools.client.model.HostingEnvironment;
import org.openapitools.client.model.HostingEnvironmentCollection;
import org.openapitools.client.model.HostingEnvironmentDiagnostics;
import org.openapitools.client.model.MetricDefinition;
import org.openapitools.client.model.MetricDefinitionCollection;
import org.openapitools.client.model.ResourceMetricCollection;
import org.openapitools.client.model.ServerFarmCollection;
import org.openapitools.client.model.SiteCollection;
import org.openapitools.client.model.SkuInfoCollection;
import org.openapitools.client.model.StampCapacityCollection;
import org.openapitools.client.model.UsageCollection;
import org.openapitools.client.model.WorkerPool;
import org.openapitools.client.model.WorkerPoolCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HostingEnvironmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HostingEnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HostingEnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hostingEnvironmentsCreateOrUpdateHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsCreateOrUpdateHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment hostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hostingEnvironmentEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsCreateOrUpdateHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment hostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment(Async)");
        }

        // verify the required parameter 'hostingEnvironmentEnvelope' is set
        if (hostingEnvironmentEnvelope == null) {
            throw new ApiException("Missing the required parameter 'hostingEnvironmentEnvelope' when calling hostingEnvironmentsCreateOrUpdateHostingEnvironment(Async)");
        }

        return hostingEnvironmentsCreateOrUpdateHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, _callback);

    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment) (required)
     * @return HostingEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public HostingEnvironment hostingEnvironmentsCreateOrUpdateHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment hostingEnvironmentEnvelope) throws ApiException {
        ApiResponse<HostingEnvironment> localVarResp = hostingEnvironmentsCreateOrUpdateHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment) (required)
     * @return ApiResponse&lt;HostingEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostingEnvironment> hostingEnvironmentsCreateOrUpdateHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment hostingEnvironmentEnvelope) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsCreateOrUpdateHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, null);
        Type localVarReturnType = new TypeToken<HostingEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param hostingEnvironmentEnvelope Properties of hostingEnvironment (App Service Environment) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsCreateOrUpdateHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment hostingEnvironmentEnvelope, final ApiCallback<HostingEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsCreateOrUpdateHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope, _callback);
        Type localVarReturnType = new TypeToken<HostingEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsCreateOrUpdateMultiRolePool
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of multiRole pool (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsCreateOrUpdateMultiRolePoolCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPool multiRolePoolEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = multiRolePoolEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsCreateOrUpdateMultiRolePoolValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPool multiRolePoolEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        // verify the required parameter 'multiRolePoolEnvelope' is set
        if (multiRolePoolEnvelope == null) {
            throw new ApiException("Missing the required parameter 'multiRolePoolEnvelope' when calling hostingEnvironmentsCreateOrUpdateMultiRolePool(Async)");
        }

        return hostingEnvironmentsCreateOrUpdateMultiRolePoolCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, _callback);

    }

    /**
     * Create or update a multiRole pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of multiRole pool (required)
     * @return WorkerPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPool hostingEnvironmentsCreateOrUpdateMultiRolePool(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPool multiRolePoolEnvelope) throws ApiException {
        ApiResponse<WorkerPool> localVarResp = hostingEnvironmentsCreateOrUpdateMultiRolePoolWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a multiRole pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of multiRole pool (required)
     * @return ApiResponse&lt;WorkerPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPool> hostingEnvironmentsCreateOrUpdateMultiRolePoolWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPool multiRolePoolEnvelope) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsCreateOrUpdateMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, null);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a multiRole pool. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param multiRolePoolEnvelope Properties of multiRole pool (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsCreateOrUpdateMultiRolePoolAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, WorkerPool multiRolePoolEnvelope, final ApiCallback<WorkerPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsCreateOrUpdateMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsCreateOrUpdateWorkerPool
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of worker pool (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsCreateOrUpdateWorkerPoolCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPool workerPoolEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workerPoolEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsCreateOrUpdateWorkerPoolValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPool workerPoolEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolEnvelope' is set
        if (workerPoolEnvelope == null) {
            throw new ApiException("Missing the required parameter 'workerPoolEnvelope' when calling hostingEnvironmentsCreateOrUpdateWorkerPool(Async)");
        }

        return hostingEnvironmentsCreateOrUpdateWorkerPoolCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, _callback);

    }

    /**
     * Create or update a worker pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of worker pool (required)
     * @return WorkerPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPool hostingEnvironmentsCreateOrUpdateWorkerPool(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPool workerPoolEnvelope) throws ApiException {
        ApiResponse<WorkerPool> localVarResp = hostingEnvironmentsCreateOrUpdateWorkerPoolWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a worker pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of worker pool (required)
     * @return ApiResponse&lt;WorkerPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPool> hostingEnvironmentsCreateOrUpdateWorkerPoolWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPool workerPoolEnvelope) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsCreateOrUpdateWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, null);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a worker pool. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param workerPoolEnvelope Properties of worker pool (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsCreateOrUpdateWorkerPoolAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, WorkerPool workerPoolEnvelope, final ApiCallback<WorkerPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsCreateOrUpdateWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope, _callback);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsDeleteHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsDeleteHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceDelete", forceDelete));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsDeleteHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsDeleteHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsDeleteHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsDeleteHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsDeleteHostingEnvironment(Async)");
        }

        return hostingEnvironmentsDeleteHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, _callback);

    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsDeleteHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsDeleteHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, forceDelete);
        return localVarResp.getData();
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsDeleteHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsDeleteHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the hostingEnvironment (App Service Environment) contains resources (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsDeleteHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsDeleteHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironment(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostingEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostingEnvironment hostingEnvironmentsGetHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostingEnvironment> localVarResp = hostingEnvironmentsGetHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostingEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostingEnvironment> hostingEnvironmentsGetHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostingEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<HostingEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostingEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentCapacities
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentCapacitiesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/compute"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentCapacitiesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentCapacities(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentCapacities(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentCapacities(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentCapacities(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentCapacitiesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return StampCapacityCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StampCapacityCollection hostingEnvironmentsGetHostingEnvironmentCapacities(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<StampCapacityCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentCapacitiesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;StampCapacityCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StampCapacityCollection> hostingEnvironmentsGetHostingEnvironmentCapacitiesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentCapacitiesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<StampCapacityCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentCapacitiesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<StampCapacityCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentCapacitiesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StampCapacityCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentDiagnostics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentDiagnosticsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentDiagnosticsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentDiagnostics(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentDiagnosticsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;HostingEnvironmentDiagnostics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<HostingEnvironmentDiagnostics> hostingEnvironmentsGetHostingEnvironmentDiagnostics(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<HostingEnvironmentDiagnostics>> localVarResp = hostingEnvironmentsGetHostingEnvironmentDiagnosticsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;HostingEnvironmentDiagnostics&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<HostingEnvironmentDiagnostics>> hostingEnvironmentsGetHostingEnvironmentDiagnosticsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentDiagnosticsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<HostingEnvironmentDiagnostics>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentDiagnosticsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<HostingEnvironmentDiagnostics>> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentDiagnosticsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<HostingEnvironmentDiagnostics>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param diagnosticsName Name of the diagnostics (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemCall(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/diagnostics/{diagnosticsName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "diagnosticsName" + "}", localVarApiClient.escapeString(diagnosticsName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemValidateBeforeCall(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(Async)");
        }

        // verify the required parameter 'diagnosticsName' is set
        if (diagnosticsName == null) {
            throw new ApiException("Missing the required parameter 'diagnosticsName' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemCall(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param diagnosticsName Name of the diagnostics (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostingEnvironmentDiagnostics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostingEnvironmentDiagnostics hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostingEnvironmentDiagnostics> localVarResp = hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemWithHttpInfo(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param diagnosticsName Name of the diagnostics (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostingEnvironmentDiagnostics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostingEnvironmentDiagnostics> hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemWithHttpInfo(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemValidateBeforeCall(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostingEnvironmentDiagnostics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param diagnosticsName Name of the diagnostics (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemAsync(String resourceGroupName, String name, String diagnosticsName, String subscriptionId, String apiVersion, final ApiCallback<HostingEnvironmentDiagnostics> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemValidateBeforeCall(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostingEnvironmentDiagnostics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentMetricDefinitions
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return MetricDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinition hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinition> localVarResp = hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MetricDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinition> hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<MetricDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentMetrics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMetricsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMetricsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMetrics(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentMetricsCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ResourceMetricCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricCollection hostingEnvironmentsGetHostingEnvironmentMetrics(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<ResourceMetricCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentMetricsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;ResourceMetricCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricCollection> hostingEnvironmentsGetHostingEnvironmentMetricsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMetricsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<ResourceMetricCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return MetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionCollection hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionCollection> hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<MetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param startTime Beginning time of metrics query (optional)
     * @param endTime End time of metrics query (optional)
     * @param timeGrain Time granularity of metrics query (optional)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String startTime, String endTime, String timeGrain, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (timeGrain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeGrain", timeGrain));
        }

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String startTime, String endTime, String timeGrain, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsCall(resourceGroupName, name, subscriptionId, apiVersion, startTime, endTime, timeGrain, details, $filter, _callback);

    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param startTime Beginning time of metrics query (optional)
     * @param endTime End time of metrics query (optional)
     * @param timeGrain Time granularity of metrics query (optional)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ResourceMetricCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricCollection hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(String resourceGroupName, String name, String subscriptionId, String apiVersion, String startTime, String endTime, String timeGrain, Boolean details, String $filter) throws ApiException {
        ApiResponse<ResourceMetricCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, startTime, endTime, timeGrain, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param startTime Beginning time of metrics query (optional)
     * @param endTime End time of metrics query (optional)
     * @param timeGrain Time granularity of metrics query (optional)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;ResourceMetricCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricCollection> hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String startTime, String endTime, String timeGrain, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, startTime, endTime, timeGrain, details, $filter, null);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param startTime Beginning time of metrics query (optional)
     * @param endTime End time of metrics query (optional)
     * @param timeGrain Time granularity of metrics query (optional)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String startTime, String endTime, String timeGrain, Boolean details, String $filter, final ApiCallback<ResourceMetricCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, startTime, endTime, timeGrain, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return UsageCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UsageCollection hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<UsageCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;UsageCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageCollection> hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<UsageCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentOperation
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentOperationCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentOperationValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling hostingEnvironmentsGetHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentOperation(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentOperationCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsGetHostingEnvironmentOperation(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsGetHostingEnvironmentOperationWithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsGetHostingEnvironmentOperationWithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentOperationAsync(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentOperations
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentOperationsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/operations"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentOperationsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentOperations(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentOperations(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentOperations(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentOperations(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentOperationsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsGetHostingEnvironmentOperations(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsGetHostingEnvironmentOperationsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsGetHostingEnvironmentOperationsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentOperationsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment) (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentOperationsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentOperationsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentServerFarms
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentServerFarmsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/serverfarms"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentServerFarmsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentServerFarms(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentServerFarmsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ServerFarmCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmCollection hostingEnvironmentsGetHostingEnvironmentServerFarms(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerFarmCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentServerFarmsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ServerFarmCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmCollection> hostingEnvironmentsGetHostingEnvironmentServerFarmsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentServerFarmsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentServerFarmsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ServerFarmCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentServerFarmsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentSites
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentSitesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentSitesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentSites(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentSites(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentSites(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentSites(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentSitesCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);

    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @return SiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteCollection hostingEnvironmentsGetHostingEnvironmentSites(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        ApiResponse<SiteCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentSitesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        return localVarResp.getData();
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @return ApiResponse&lt;SiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCollection> hostingEnvironmentsGetHostingEnvironmentSitesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentSitesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, null);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentSitesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback<SiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentSitesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentUsages
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentUsagesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentUsagesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentUsages(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentUsagesCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);

    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return CsmUsageQuotaCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CsmUsageQuotaCollection hostingEnvironmentsGetHostingEnvironmentUsages(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        ApiResponse<CsmUsageQuotaCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentUsagesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;CsmUsageQuotaCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CsmUsageQuotaCollection> hostingEnvironmentsGetHostingEnvironmentUsagesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<CsmUsageQuotaCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentUsagesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String $filter, final ApiCallback<CsmUsageQuotaCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentUsagesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<CsmUsageQuotaCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentVips
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentVipsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/capacities/virtualip"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentVipsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentVips(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentVips(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentVips(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentVips(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentVipsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return AddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddressResponse hostingEnvironmentsGetHostingEnvironmentVips(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AddressResponse> localVarResp = hostingEnvironmentsGetHostingEnvironmentVipsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressResponse> hostingEnvironmentsGetHostingEnvironmentVipsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentVipsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentVipsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentVipsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentWebHostingPlans
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebHostingPlansCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/webhostingplans"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebHostingPlansValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentWebHostingPlansCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ServerFarmCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmCollection hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerFarmCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentWebHostingPlansWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ServerFarmCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmCollection> hostingEnvironmentsGetHostingEnvironmentWebHostingPlansWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebHostingPlansValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebHostingPlansAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ServerFarmCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebHostingPlansValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return MetricDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public MetricDefinitionCollection hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<MetricDefinitionCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;MetricDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricDefinitionCollection> hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<MetricDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MetricDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ResourceMetricCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ResourceMetricCollection hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<ResourceMetricCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;ResourceMetricCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceMetricCollection> hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<ResourceMetricCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<ResourceMetricCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/usages"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return UsageCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UsageCollection hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<UsageCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;UsageCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageCollection> hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<UsageCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UsageCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetHostingEnvironments
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentsCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetHostingEnvironmentsValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetHostingEnvironments(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetHostingEnvironments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetHostingEnvironments(Async)");
        }

        return hostingEnvironmentsGetHostingEnvironmentsCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostingEnvironmentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostingEnvironmentCollection hostingEnvironmentsGetHostingEnvironments(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostingEnvironmentCollection> localVarResp = hostingEnvironmentsGetHostingEnvironmentsWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostingEnvironmentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostingEnvironmentCollection> hostingEnvironmentsGetHostingEnvironmentsWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostingEnvironmentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetHostingEnvironmentsAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<HostingEnvironmentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetHostingEnvironmentsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostingEnvironmentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetMultiRolePool
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetMultiRolePoolValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePool(Async)");
        }

        return hostingEnvironmentsGetMultiRolePoolCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get properties of a multiRole pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return WorkerPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPool hostingEnvironmentsGetMultiRolePool(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPool> localVarResp = hostingEnvironmentsGetMultiRolePoolWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get properties of a multiRole pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPool> hostingEnvironmentsGetMultiRolePoolWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties of a multiRole pool. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WorkerPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsCall(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(Async)");
        }

        return hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsCall(resourceGroupName, name, instance, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsWithHttpInfo(resourceGroupName, name, instance, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, instance, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool&amp;gt; (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsAsync(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, instance, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetMultiRolePoolInstanceMetrics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolInstanceMetricsCall(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, Boolean details, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/instances/{instance}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetMultiRolePoolInstanceMetricsValidateBeforeCall(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, Boolean details, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePoolInstanceMetrics(Async)");
        }

        return hostingEnvironmentsGetMultiRolePoolInstanceMetricsCall(resourceGroupName, name, instance, subscriptionId, apiVersion, details, _callback);

    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsGetMultiRolePoolInstanceMetrics(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, Boolean details) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsGetMultiRolePoolInstanceMetricsWithHttpInfo(resourceGroupName, name, instance, subscriptionId, apiVersion, details);
        return localVarResp.getData();
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsGetMultiRolePoolInstanceMetricsWithHttpInfo(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, Boolean details) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolInstanceMetricsValidateBeforeCall(resourceGroupName, name, instance, subscriptionId, apiVersion, details, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param instance Name of instance in the multiRole pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolInstanceMetricsAsync(String resourceGroupName, String name, String instance, String subscriptionId, String apiVersion, Boolean details, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolInstanceMetricsValidateBeforeCall(resourceGroupName, name, instance, subscriptionId, apiVersion, details, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetMultiRolePoolSkus
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolSkusCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools/default/skus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetMultiRolePoolSkusValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePoolSkus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePoolSkus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePoolSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePoolSkus(Async)");
        }

        return hostingEnvironmentsGetMultiRolePoolSkusCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get available skus for scaling a multiRole pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SkuInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SkuInfoCollection hostingEnvironmentsGetMultiRolePoolSkus(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SkuInfoCollection> localVarResp = hostingEnvironmentsGetMultiRolePoolSkusWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get available skus for scaling a multiRole pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SkuInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuInfoCollection> hostingEnvironmentsGetMultiRolePoolSkusWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolSkusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available skus for scaling a multiRole pool. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolSkusAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SkuInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolSkusValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetMultiRolePools
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/multiRolePools"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetMultiRolePoolsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetMultiRolePools(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetMultiRolePools(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetMultiRolePools(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetMultiRolePools(Async)");
        }

        return hostingEnvironmentsGetMultiRolePoolsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all multi role pools
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return WorkerPoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolCollection hostingEnvironmentsGetMultiRolePools(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPoolCollection> localVarResp = hostingEnvironmentsGetMultiRolePoolsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all multi role pools
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolCollection> hostingEnvironmentsGetMultiRolePoolsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all multi role pools (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetMultiRolePoolsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WorkerPoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetMultiRolePoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetWorkerPool
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetWorkerPoolValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPool(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPool(Async)");
        }

        return hostingEnvironmentsGetWorkerPoolCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get properties of a worker pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return WorkerPool
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPool hostingEnvironmentsGetWorkerPool(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPool> localVarResp = hostingEnvironmentsGetWorkerPoolWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get properties of a worker pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPool> hostingEnvironmentsGetWorkerPoolWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties of a worker pool. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<WorkerPool> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPool>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsCall(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metricdefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(Async)");
        }

        return hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsWithHttpInfo(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsAsync(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsValidateBeforeCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetWorkerPoolInstanceMetrics
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolInstanceMetricsCall(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/instances/{instance}/metrics"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "instance" + "}", localVarApiClient.escapeString(instance.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (details != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("details", details));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetWorkerPoolInstanceMetricsValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'instance' is set
        if (instance == null) {
            throw new ApiException("Missing the required parameter 'instance' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPoolInstanceMetrics(Async)");
        }

        return hostingEnvironmentsGetWorkerPoolInstanceMetricsCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, details, $filter, _callback);

    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsGetWorkerPoolInstanceMetrics(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsGetWorkerPoolInstanceMetricsWithHttpInfo(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, details, $filter);
        return localVarResp.getData();
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsGetWorkerPoolInstanceMetricsWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, Boolean details, String $filter) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolInstanceMetricsValidateBeforeCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, details, $filter, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param instance Name of instance in the worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param details Include instance details (optional)
     * @param $filter Return only usages/metrics specified in the filter. Filter conforms to odata syntax. Example: $filter&#x3D;(name.value eq &#39;Metric1&#39; or name.value eq &#39;Metric2&#39;) and startTime eq &#39;2014-01-01T00:00:00Z&#39; and endTime eq &#39;2014-12-31T23:59:59Z&#39; and timeGrain eq duration&#39;[Hour|Minute|Day]&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolInstanceMetricsAsync(String resourceGroupName, String name, String workerPoolName, String instance, String subscriptionId, String apiVersion, Boolean details, String $filter, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolInstanceMetricsValidateBeforeCall(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, details, $filter, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetWorkerPoolSkus
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolSkusCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools/{workerPoolName}/skus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "workerPoolName" + "}", localVarApiClient.escapeString(workerPoolName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetWorkerPoolSkusValidateBeforeCall(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'workerPoolName' is set
        if (workerPoolName == null) {
            throw new ApiException("Missing the required parameter 'workerPoolName' when calling hostingEnvironmentsGetWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPoolSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPoolSkus(Async)");
        }

        return hostingEnvironmentsGetWorkerPoolSkusCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get available skus for scaling a worker pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SkuInfoCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SkuInfoCollection hostingEnvironmentsGetWorkerPoolSkus(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SkuInfoCollection> localVarResp = hostingEnvironmentsGetWorkerPoolSkusWithHttpInfo(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get available skus for scaling a worker pool.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SkuInfoCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuInfoCollection> hostingEnvironmentsGetWorkerPoolSkusWithHttpInfo(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolSkusValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available skus for scaling a worker pool. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param workerPoolName Name of worker pool (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolSkusAsync(String resourceGroupName, String name, String workerPoolName, String subscriptionId, String apiVersion, final ApiCallback<SkuInfoCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolSkusValidateBeforeCall(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SkuInfoCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsGetWorkerPools
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/workerPools"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsGetWorkerPoolsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsGetWorkerPools(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsGetWorkerPools(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsGetWorkerPools(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsGetWorkerPools(Async)");
        }

        return hostingEnvironmentsGetWorkerPoolsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all worker pools
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return WorkerPoolCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkerPoolCollection hostingEnvironmentsGetWorkerPools(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<WorkerPoolCollection> localVarResp = hostingEnvironmentsGetWorkerPoolsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all worker pools
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;WorkerPoolCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkerPoolCollection> hostingEnvironmentsGetWorkerPoolsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all worker pools (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsGetWorkerPoolsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<WorkerPoolCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsGetWorkerPoolsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkerPoolCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsRebootHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsRebootHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/reboot"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsRebootHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsRebootHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsRebootHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsRebootHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsRebootHostingEnvironment(Async)");
        }

        return hostingEnvironmentsRebootHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Object hostingEnvironmentsRebootHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = hostingEnvironmentsRebootHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> hostingEnvironmentsRebootHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsRebootHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment). (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsRebootHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsRebootHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsResumeHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsResumeHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/resume"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsResumeHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsResumeHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsResumeHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsResumeHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsResumeHostingEnvironment(Async)");
        }

        return hostingEnvironmentsResumeHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resumes the hostingEnvironment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public SiteCollection hostingEnvironmentsResumeHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteCollection> localVarResp = hostingEnvironmentsResumeHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Resumes the hostingEnvironment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCollection> hostingEnvironmentsResumeHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsResumeHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resumes the hostingEnvironment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsResumeHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsResumeHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hostingEnvironmentsSuspendHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsSuspendHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/suspend"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hostingEnvironmentsSuspendHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hostingEnvironmentsSuspendHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling hostingEnvironmentsSuspendHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hostingEnvironmentsSuspendHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hostingEnvironmentsSuspendHostingEnvironment(Async)");
        }

        return hostingEnvironmentsSuspendHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Suspends the hostingEnvironment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return SiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public SiteCollection hostingEnvironmentsSuspendHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<SiteCollection> localVarResp = hostingEnvironmentsSuspendHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Suspends the hostingEnvironment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;SiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCollection> hostingEnvironmentsSuspendHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = hostingEnvironmentsSuspendHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suspends the hostingEnvironment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of hostingEnvironment (App Service Environment) (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Operation is in progress </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hostingEnvironmentsSuspendHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<SiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = hostingEnvironmentsSuspendHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
