/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration settings for the Azure App Service Authentication / Authorization feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SiteAuthSettings {
  public static final String SERIALIZED_NAME_AAD_CLIENT_ID = "aadClientId";
  @SerializedName(SERIALIZED_NAME_AAD_CLIENT_ID)
  private String aadClientId;

  public static final String SERIALIZED_NAME_ADDITIONAL_LOGIN_PARAMS = "additionalLoginParams";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LOGIN_PARAMS)
  private List<String> additionalLoginParams = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_AUDIENCES = "allowedAudiences";
  @SerializedName(SERIALIZED_NAME_ALLOWED_AUDIENCES)
  private List<String> allowedAudiences = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_EXTERNAL_REDIRECT_URLS = "allowedExternalRedirectUrls";
  @SerializedName(SERIALIZED_NAME_ALLOWED_EXTERNAL_REDIRECT_URLS)
  private List<String> allowedExternalRedirectUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  /**
   * Gets or sets the default authentication provider to use when multiple providers are configured.              This setting is only needed if multiple providers are configured and the unauthenticated client              action is set to \&quot;RedirectToLoginPage\&quot;.
   */
  @JsonAdapter(DefaultProviderEnum.Adapter.class)
  public enum DefaultProviderEnum {
    AZURE_ACTIVE_DIRECTORY("AzureActiveDirectory"),
    
    FACEBOOK("Facebook"),
    
    GOOGLE("Google"),
    
    MICROSOFT_ACCOUNT("MicrosoftAccount"),
    
    TWITTER("Twitter");

    private String value;

    DefaultProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultProviderEnum fromValue(String value) {
      for (DefaultProviderEnum b : DefaultProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultProviderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultProviderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_PROVIDER = "defaultProvider";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PROVIDER)
  private DefaultProviderEnum defaultProvider;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FACEBOOK_APP_ID = "facebookAppId";
  @SerializedName(SERIALIZED_NAME_FACEBOOK_APP_ID)
  private String facebookAppId;

  public static final String SERIALIZED_NAME_FACEBOOK_APP_SECRET = "facebookAppSecret";
  @SerializedName(SERIALIZED_NAME_FACEBOOK_APP_SECRET)
  private String facebookAppSecret;

  public static final String SERIALIZED_NAME_FACEBOOK_O_AUTH_SCOPES = "facebookOAuthScopes";
  @SerializedName(SERIALIZED_NAME_FACEBOOK_O_AUTH_SCOPES)
  private List<String> facebookOAuthScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_GOOGLE_CLIENT_ID = "googleClientId";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLIENT_ID)
  private String googleClientId;

  public static final String SERIALIZED_NAME_GOOGLE_CLIENT_SECRET = "googleClientSecret";
  @SerializedName(SERIALIZED_NAME_GOOGLE_CLIENT_SECRET)
  private String googleClientSecret;

  public static final String SERIALIZED_NAME_GOOGLE_O_AUTH_SCOPES = "googleOAuthScopes";
  @SerializedName(SERIALIZED_NAME_GOOGLE_O_AUTH_SCOPES)
  private List<String> googleOAuthScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTP_API_PREFIX_PATH = "httpApiPrefixPath";
  @SerializedName(SERIALIZED_NAME_HTTP_API_PREFIX_PATH)
  private String httpApiPrefixPath;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_MICROSOFT_ACCOUNT_CLIENT_ID = "microsoftAccountClientId";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_ACCOUNT_CLIENT_ID)
  private String microsoftAccountClientId;

  public static final String SERIALIZED_NAME_MICROSOFT_ACCOUNT_CLIENT_SECRET = "microsoftAccountClientSecret";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_ACCOUNT_CLIENT_SECRET)
  private String microsoftAccountClientSecret;

  public static final String SERIALIZED_NAME_MICROSOFT_ACCOUNT_O_AUTH_SCOPES = "microsoftAccountOAuthScopes";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_ACCOUNT_O_AUTH_SCOPES)
  private List<String> microsoftAccountOAuthScopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPEN_ID_ISSUER = "openIdIssuer";
  @SerializedName(SERIALIZED_NAME_OPEN_ID_ISSUER)
  private String openIdIssuer;

  public static final String SERIALIZED_NAME_TOKEN_REFRESH_EXTENSION_HOURS = "tokenRefreshExtensionHours";
  @SerializedName(SERIALIZED_NAME_TOKEN_REFRESH_EXTENSION_HOURS)
  private Double tokenRefreshExtensionHours;

  public static final String SERIALIZED_NAME_TOKEN_STORE_ENABLED = "tokenStoreEnabled";
  @SerializedName(SERIALIZED_NAME_TOKEN_STORE_ENABLED)
  private Boolean tokenStoreEnabled;

  public static final String SERIALIZED_NAME_TWITTER_CONSUMER_KEY = "twitterConsumerKey";
  @SerializedName(SERIALIZED_NAME_TWITTER_CONSUMER_KEY)
  private String twitterConsumerKey;

  public static final String SERIALIZED_NAME_TWITTER_CONSUMER_SECRET = "twitterConsumerSecret";
  @SerializedName(SERIALIZED_NAME_TWITTER_CONSUMER_SECRET)
  private String twitterConsumerSecret;

  /**
   * Gets or sets the action to take when an unauthenticated client attempts to access the app.
   */
  @JsonAdapter(UnauthenticatedClientActionEnum.Adapter.class)
  public enum UnauthenticatedClientActionEnum {
    REDIRECT_TO_LOGIN_PAGE("RedirectToLoginPage"),
    
    ALLOW_ANONYMOUS("AllowAnonymous");

    private String value;

    UnauthenticatedClientActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnauthenticatedClientActionEnum fromValue(String value) {
      for (UnauthenticatedClientActionEnum b : UnauthenticatedClientActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnauthenticatedClientActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnauthenticatedClientActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnauthenticatedClientActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnauthenticatedClientActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnauthenticatedClientActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNAUTHENTICATED_CLIENT_ACTION = "unauthenticatedClientAction";
  @SerializedName(SERIALIZED_NAME_UNAUTHENTICATED_CLIENT_ACTION)
  private UnauthenticatedClientActionEnum unauthenticatedClientAction;

  public SiteAuthSettings() {
  }

  public SiteAuthSettings aadClientId(String aadClientId) {
    this.aadClientId = aadClientId;
    return this;
  }

  /**
   * Get aadClientId
   * @return aadClientId
   */
  @javax.annotation.Nullable
  public String getAadClientId() {
    return aadClientId;
  }

  public void setAadClientId(String aadClientId) {
    this.aadClientId = aadClientId;
  }


  public SiteAuthSettings additionalLoginParams(List<String> additionalLoginParams) {
    this.additionalLoginParams = additionalLoginParams;
    return this;
  }

  public SiteAuthSettings addAdditionalLoginParamsItem(String additionalLoginParamsItem) {
    if (this.additionalLoginParams == null) {
      this.additionalLoginParams = new ArrayList<>();
    }
    this.additionalLoginParams.add(additionalLoginParamsItem);
    return this;
  }

  /**
   * Gets or sets a list of login parameters to send to the OpenID Connect authorization endpoint when              a user logs in. Each parameter must be in the form \&quot;key&#x3D;value\&quot;.
   * @return additionalLoginParams
   */
  @javax.annotation.Nullable
  public List<String> getAdditionalLoginParams() {
    return additionalLoginParams;
  }

  public void setAdditionalLoginParams(List<String> additionalLoginParams) {
    this.additionalLoginParams = additionalLoginParams;
  }


  public SiteAuthSettings allowedAudiences(List<String> allowedAudiences) {
    this.allowedAudiences = allowedAudiences;
    return this;
  }

  public SiteAuthSettings addAllowedAudiencesItem(String allowedAudiencesItem) {
    if (this.allowedAudiences == null) {
      this.allowedAudiences = new ArrayList<>();
    }
    this.allowedAudiences.add(allowedAudiencesItem);
    return this;
  }

  /**
   * Gets or sets a list of allowed audience values to consider when validating JWTs issued by               Azure Active Directory. Note that the {Microsoft.Web.Hosting.Administration.SiteAuthSettings.ClientId} value is always considered an              allowed audience, regardless of this setting.
   * @return allowedAudiences
   */
  @javax.annotation.Nullable
  public List<String> getAllowedAudiences() {
    return allowedAudiences;
  }

  public void setAllowedAudiences(List<String> allowedAudiences) {
    this.allowedAudiences = allowedAudiences;
  }


  public SiteAuthSettings allowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
    this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
    return this;
  }

  public SiteAuthSettings addAllowedExternalRedirectUrlsItem(String allowedExternalRedirectUrlsItem) {
    if (this.allowedExternalRedirectUrls == null) {
      this.allowedExternalRedirectUrls = new ArrayList<>();
    }
    this.allowedExternalRedirectUrls.add(allowedExternalRedirectUrlsItem);
    return this;
  }

  /**
   * Gets or sets a collection of external URLs that can be redirected to as part of logging in              or logging out of the web app. Note that the query string part of the URL is ignored.              This is an advanced setting typically only needed by Windows Store application backends.              Note that URLs within the current domain are always implicitly allowed.
   * @return allowedExternalRedirectUrls
   */
  @javax.annotation.Nullable
  public List<String> getAllowedExternalRedirectUrls() {
    return allowedExternalRedirectUrls;
  }

  public void setAllowedExternalRedirectUrls(List<String> allowedExternalRedirectUrls) {
    this.allowedExternalRedirectUrls = allowedExternalRedirectUrls;
  }


  public SiteAuthSettings clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Gets or sets the Client ID of this relying party application, known as the client_id.              This setting is required for enabling OpenID Connection authentication with Azure Active Directory or               other 3rd party OpenID Connect providers.              More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public SiteAuthSettings clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Gets or sets the Client Secret of this relying party application (in Azure Active Directory, this is also referred to as the Key).              This setting is optional. If no client secret is configured, the OpenID Connect implicit auth flow is used to authenticate end users.              Otherwise, the OpenID Connect Authorization Code Flow is used to authenticate end users.              More information on OpenID Connect: http://openid.net/specs/openid-connect-core-1_0.html
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public SiteAuthSettings defaultProvider(DefaultProviderEnum defaultProvider) {
    this.defaultProvider = defaultProvider;
    return this;
  }

  /**
   * Gets or sets the default authentication provider to use when multiple providers are configured.              This setting is only needed if multiple providers are configured and the unauthenticated client              action is set to \&quot;RedirectToLoginPage\&quot;.
   * @return defaultProvider
   */
  @javax.annotation.Nullable
  public DefaultProviderEnum getDefaultProvider() {
    return defaultProvider;
  }

  public void setDefaultProvider(DefaultProviderEnum defaultProvider) {
    this.defaultProvider = defaultProvider;
  }


  public SiteAuthSettings enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Gets or sets a value indicating whether the Authentication / Authorization feature is enabled for the current app.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public SiteAuthSettings facebookAppId(String facebookAppId) {
    this.facebookAppId = facebookAppId;
    return this;
  }

  /**
   * Gets or sets the App ID of the Facebook app used for login.              This setting is required for enabling Facebook Login.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
   * @return facebookAppId
   */
  @javax.annotation.Nullable
  public String getFacebookAppId() {
    return facebookAppId;
  }

  public void setFacebookAppId(String facebookAppId) {
    this.facebookAppId = facebookAppId;
  }


  public SiteAuthSettings facebookAppSecret(String facebookAppSecret) {
    this.facebookAppSecret = facebookAppSecret;
    return this;
  }

  /**
   * Gets or sets the App Secret of the Facebook app used for Facebook Login.              This setting is required for enabling Facebook Login.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
   * @return facebookAppSecret
   */
  @javax.annotation.Nullable
  public String getFacebookAppSecret() {
    return facebookAppSecret;
  }

  public void setFacebookAppSecret(String facebookAppSecret) {
    this.facebookAppSecret = facebookAppSecret;
  }


  public SiteAuthSettings facebookOAuthScopes(List<String> facebookOAuthScopes) {
    this.facebookOAuthScopes = facebookOAuthScopes;
    return this;
  }

  public SiteAuthSettings addFacebookOAuthScopesItem(String facebookOAuthScopesItem) {
    if (this.facebookOAuthScopes == null) {
      this.facebookOAuthScopes = new ArrayList<>();
    }
    this.facebookOAuthScopes.add(facebookOAuthScopesItem);
    return this;
  }

  /**
   * Gets or sets the OAuth 2.0 scopes that will be requested as part of Facebook Login authentication.              This setting is optional.              Facebook Login documentation: https://developers.facebook.com/docs/facebook-login
   * @return facebookOAuthScopes
   */
  @javax.annotation.Nullable
  public List<String> getFacebookOAuthScopes() {
    return facebookOAuthScopes;
  }

  public void setFacebookOAuthScopes(List<String> facebookOAuthScopes) {
    this.facebookOAuthScopes = facebookOAuthScopes;
  }


  public SiteAuthSettings googleClientId(String googleClientId) {
    this.googleClientId = googleClientId;
    return this;
  }

  /**
   * Gets or sets the OpenID Connect Client ID for the Google web application.              This setting is required for enabling Google Sign-In.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
   * @return googleClientId
   */
  @javax.annotation.Nullable
  public String getGoogleClientId() {
    return googleClientId;
  }

  public void setGoogleClientId(String googleClientId) {
    this.googleClientId = googleClientId;
  }


  public SiteAuthSettings googleClientSecret(String googleClientSecret) {
    this.googleClientSecret = googleClientSecret;
    return this;
  }

  /**
   * Gets or sets the client secret associated with the Google web application.              This setting is required for enabling Google Sign-In.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
   * @return googleClientSecret
   */
  @javax.annotation.Nullable
  public String getGoogleClientSecret() {
    return googleClientSecret;
  }

  public void setGoogleClientSecret(String googleClientSecret) {
    this.googleClientSecret = googleClientSecret;
  }


  public SiteAuthSettings googleOAuthScopes(List<String> googleOAuthScopes) {
    this.googleOAuthScopes = googleOAuthScopes;
    return this;
  }

  public SiteAuthSettings addGoogleOAuthScopesItem(String googleOAuthScopesItem) {
    if (this.googleOAuthScopes == null) {
      this.googleOAuthScopes = new ArrayList<>();
    }
    this.googleOAuthScopes.add(googleOAuthScopesItem);
    return this;
  }

  /**
   * Gets or sets the OAuth 2.0 scopes that will be requested as part of Google Sign-In authentication.              This setting is optional. If not specified, \&quot;openid\&quot;, \&quot;profile\&quot;, and \&quot;email\&quot; are used as default scopes.              Google Sign-In documentation: https://developers.google.com/identity/sign-in/web/
   * @return googleOAuthScopes
   */
  @javax.annotation.Nullable
  public List<String> getGoogleOAuthScopes() {
    return googleOAuthScopes;
  }

  public void setGoogleOAuthScopes(List<String> googleOAuthScopes) {
    this.googleOAuthScopes = googleOAuthScopes;
  }


  public SiteAuthSettings httpApiPrefixPath(String httpApiPrefixPath) {
    this.httpApiPrefixPath = httpApiPrefixPath;
    return this;
  }

  /**
   * Gets or sets the relative path prefix used by platform HTTP APIs.              Changing this value is not recommended except for compatibility reasons.
   * @return httpApiPrefixPath
   */
  @javax.annotation.Nullable
  public String getHttpApiPrefixPath() {
    return httpApiPrefixPath;
  }

  public void setHttpApiPrefixPath(String httpApiPrefixPath) {
    this.httpApiPrefixPath = httpApiPrefixPath;
  }


  public SiteAuthSettings issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Gets or sets the OpenID Connect Issuer URI that represents the entity which issues access tokens for this application.              When using Azure Active Directory, this value is the URI of the directory tenant, e.g. https://sts.windows.net/{tenant-guid}/.              This URI is a case-sensitive identifier for the token issuer.              More information on OpenID Connect Discovery: http://openid.net/specs/openid-connect-discovery-1_0.html
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public SiteAuthSettings microsoftAccountClientId(String microsoftAccountClientId) {
    this.microsoftAccountClientId = microsoftAccountClientId;
    return this;
  }

  /**
   * Gets or sets the OAuth 2.0 client ID that was created for the app used for authentication.              This setting is required for enabling Microsoft Account authentication.              Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
   * @return microsoftAccountClientId
   */
  @javax.annotation.Nullable
  public String getMicrosoftAccountClientId() {
    return microsoftAccountClientId;
  }

  public void setMicrosoftAccountClientId(String microsoftAccountClientId) {
    this.microsoftAccountClientId = microsoftAccountClientId;
  }


  public SiteAuthSettings microsoftAccountClientSecret(String microsoftAccountClientSecret) {
    this.microsoftAccountClientSecret = microsoftAccountClientSecret;
    return this;
  }

  /**
   * Gets or sets the OAuth 2.0 client secret that was created for the app used for authentication.              This setting is required for enabling Microsoft Account authentication.              Microsoft Account OAuth documentation: https://dev.onedrive.com/auth/msa_oauth.htm
   * @return microsoftAccountClientSecret
   */
  @javax.annotation.Nullable
  public String getMicrosoftAccountClientSecret() {
    return microsoftAccountClientSecret;
  }

  public void setMicrosoftAccountClientSecret(String microsoftAccountClientSecret) {
    this.microsoftAccountClientSecret = microsoftAccountClientSecret;
  }


  public SiteAuthSettings microsoftAccountOAuthScopes(List<String> microsoftAccountOAuthScopes) {
    this.microsoftAccountOAuthScopes = microsoftAccountOAuthScopes;
    return this;
  }

  public SiteAuthSettings addMicrosoftAccountOAuthScopesItem(String microsoftAccountOAuthScopesItem) {
    if (this.microsoftAccountOAuthScopes == null) {
      this.microsoftAccountOAuthScopes = new ArrayList<>();
    }
    this.microsoftAccountOAuthScopes.add(microsoftAccountOAuthScopesItem);
    return this;
  }

  /**
   * Gets or sets the OAuth 2.0 scopes that will be requested as part of Microsoft Account authentication.              This setting is optional. If not specified, \&quot;wl.basic\&quot; is used as the default scope.              Microsoft Account Scopes and permissions documentation: https://msdn.microsoft.com/en-us/library/dn631845.aspx
   * @return microsoftAccountOAuthScopes
   */
  @javax.annotation.Nullable
  public List<String> getMicrosoftAccountOAuthScopes() {
    return microsoftAccountOAuthScopes;
  }

  public void setMicrosoftAccountOAuthScopes(List<String> microsoftAccountOAuthScopes) {
    this.microsoftAccountOAuthScopes = microsoftAccountOAuthScopes;
  }


  public SiteAuthSettings openIdIssuer(String openIdIssuer) {
    this.openIdIssuer = openIdIssuer;
    return this;
  }

  /**
   * Get openIdIssuer
   * @return openIdIssuer
   */
  @javax.annotation.Nullable
  public String getOpenIdIssuer() {
    return openIdIssuer;
  }

  public void setOpenIdIssuer(String openIdIssuer) {
    this.openIdIssuer = openIdIssuer;
  }


  public SiteAuthSettings tokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
    this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
    return this;
  }

  /**
   * Gets or sets the number of hours after session token expiration that a session token can be used to              call the token refresh API. The default is 72 hours.
   * @return tokenRefreshExtensionHours
   */
  @javax.annotation.Nullable
  public Double getTokenRefreshExtensionHours() {
    return tokenRefreshExtensionHours;
  }

  public void setTokenRefreshExtensionHours(Double tokenRefreshExtensionHours) {
    this.tokenRefreshExtensionHours = tokenRefreshExtensionHours;
  }


  public SiteAuthSettings tokenStoreEnabled(Boolean tokenStoreEnabled) {
    this.tokenStoreEnabled = tokenStoreEnabled;
    return this;
  }

  /**
   * Gets or sets a value indicating whether to durably store platform-specific security tokens              obtained during login flows. This capability is disabled by default.
   * @return tokenStoreEnabled
   */
  @javax.annotation.Nullable
  public Boolean getTokenStoreEnabled() {
    return tokenStoreEnabled;
  }

  public void setTokenStoreEnabled(Boolean tokenStoreEnabled) {
    this.tokenStoreEnabled = tokenStoreEnabled;
  }


  public SiteAuthSettings twitterConsumerKey(String twitterConsumerKey) {
    this.twitterConsumerKey = twitterConsumerKey;
    return this;
  }

  /**
   * Gets or sets the OAuth 1.0a consumer key of the Twitter application used for sign-in.              This setting is required for enabling Twitter Sign-In.              Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
   * @return twitterConsumerKey
   */
  @javax.annotation.Nullable
  public String getTwitterConsumerKey() {
    return twitterConsumerKey;
  }

  public void setTwitterConsumerKey(String twitterConsumerKey) {
    this.twitterConsumerKey = twitterConsumerKey;
  }


  public SiteAuthSettings twitterConsumerSecret(String twitterConsumerSecret) {
    this.twitterConsumerSecret = twitterConsumerSecret;
    return this;
  }

  /**
   * Gets or sets the OAuth 1.0a consumer secret of the Twitter application used for sign-in.              This setting is required for enabling Twitter Sign-In.              Twitter Sign-In documentation: https://dev.twitter.com/web/sign-in
   * @return twitterConsumerSecret
   */
  @javax.annotation.Nullable
  public String getTwitterConsumerSecret() {
    return twitterConsumerSecret;
  }

  public void setTwitterConsumerSecret(String twitterConsumerSecret) {
    this.twitterConsumerSecret = twitterConsumerSecret;
  }


  public SiteAuthSettings unauthenticatedClientAction(UnauthenticatedClientActionEnum unauthenticatedClientAction) {
    this.unauthenticatedClientAction = unauthenticatedClientAction;
    return this;
  }

  /**
   * Gets or sets the action to take when an unauthenticated client attempts to access the app.
   * @return unauthenticatedClientAction
   */
  @javax.annotation.Nullable
  public UnauthenticatedClientActionEnum getUnauthenticatedClientAction() {
    return unauthenticatedClientAction;
  }

  public void setUnauthenticatedClientAction(UnauthenticatedClientActionEnum unauthenticatedClientAction) {
    this.unauthenticatedClientAction = unauthenticatedClientAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteAuthSettings siteAuthSettings = (SiteAuthSettings) o;
    return Objects.equals(this.aadClientId, siteAuthSettings.aadClientId) &&
        Objects.equals(this.additionalLoginParams, siteAuthSettings.additionalLoginParams) &&
        Objects.equals(this.allowedAudiences, siteAuthSettings.allowedAudiences) &&
        Objects.equals(this.allowedExternalRedirectUrls, siteAuthSettings.allowedExternalRedirectUrls) &&
        Objects.equals(this.clientId, siteAuthSettings.clientId) &&
        Objects.equals(this.clientSecret, siteAuthSettings.clientSecret) &&
        Objects.equals(this.defaultProvider, siteAuthSettings.defaultProvider) &&
        Objects.equals(this.enabled, siteAuthSettings.enabled) &&
        Objects.equals(this.facebookAppId, siteAuthSettings.facebookAppId) &&
        Objects.equals(this.facebookAppSecret, siteAuthSettings.facebookAppSecret) &&
        Objects.equals(this.facebookOAuthScopes, siteAuthSettings.facebookOAuthScopes) &&
        Objects.equals(this.googleClientId, siteAuthSettings.googleClientId) &&
        Objects.equals(this.googleClientSecret, siteAuthSettings.googleClientSecret) &&
        Objects.equals(this.googleOAuthScopes, siteAuthSettings.googleOAuthScopes) &&
        Objects.equals(this.httpApiPrefixPath, siteAuthSettings.httpApiPrefixPath) &&
        Objects.equals(this.issuer, siteAuthSettings.issuer) &&
        Objects.equals(this.microsoftAccountClientId, siteAuthSettings.microsoftAccountClientId) &&
        Objects.equals(this.microsoftAccountClientSecret, siteAuthSettings.microsoftAccountClientSecret) &&
        Objects.equals(this.microsoftAccountOAuthScopes, siteAuthSettings.microsoftAccountOAuthScopes) &&
        Objects.equals(this.openIdIssuer, siteAuthSettings.openIdIssuer) &&
        Objects.equals(this.tokenRefreshExtensionHours, siteAuthSettings.tokenRefreshExtensionHours) &&
        Objects.equals(this.tokenStoreEnabled, siteAuthSettings.tokenStoreEnabled) &&
        Objects.equals(this.twitterConsumerKey, siteAuthSettings.twitterConsumerKey) &&
        Objects.equals(this.twitterConsumerSecret, siteAuthSettings.twitterConsumerSecret) &&
        Objects.equals(this.unauthenticatedClientAction, siteAuthSettings.unauthenticatedClientAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aadClientId, additionalLoginParams, allowedAudiences, allowedExternalRedirectUrls, clientId, clientSecret, defaultProvider, enabled, facebookAppId, facebookAppSecret, facebookOAuthScopes, googleClientId, googleClientSecret, googleOAuthScopes, httpApiPrefixPath, issuer, microsoftAccountClientId, microsoftAccountClientSecret, microsoftAccountOAuthScopes, openIdIssuer, tokenRefreshExtensionHours, tokenStoreEnabled, twitterConsumerKey, twitterConsumerSecret, unauthenticatedClientAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteAuthSettings {\n");
    sb.append("    aadClientId: ").append(toIndentedString(aadClientId)).append("\n");
    sb.append("    additionalLoginParams: ").append(toIndentedString(additionalLoginParams)).append("\n");
    sb.append("    allowedAudiences: ").append(toIndentedString(allowedAudiences)).append("\n");
    sb.append("    allowedExternalRedirectUrls: ").append(toIndentedString(allowedExternalRedirectUrls)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    defaultProvider: ").append(toIndentedString(defaultProvider)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    facebookAppId: ").append(toIndentedString(facebookAppId)).append("\n");
    sb.append("    facebookAppSecret: ").append(toIndentedString(facebookAppSecret)).append("\n");
    sb.append("    facebookOAuthScopes: ").append(toIndentedString(facebookOAuthScopes)).append("\n");
    sb.append("    googleClientId: ").append(toIndentedString(googleClientId)).append("\n");
    sb.append("    googleClientSecret: ").append(toIndentedString(googleClientSecret)).append("\n");
    sb.append("    googleOAuthScopes: ").append(toIndentedString(googleOAuthScopes)).append("\n");
    sb.append("    httpApiPrefixPath: ").append(toIndentedString(httpApiPrefixPath)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    microsoftAccountClientId: ").append(toIndentedString(microsoftAccountClientId)).append("\n");
    sb.append("    microsoftAccountClientSecret: ").append(toIndentedString(microsoftAccountClientSecret)).append("\n");
    sb.append("    microsoftAccountOAuthScopes: ").append(toIndentedString(microsoftAccountOAuthScopes)).append("\n");
    sb.append("    openIdIssuer: ").append(toIndentedString(openIdIssuer)).append("\n");
    sb.append("    tokenRefreshExtensionHours: ").append(toIndentedString(tokenRefreshExtensionHours)).append("\n");
    sb.append("    tokenStoreEnabled: ").append(toIndentedString(tokenStoreEnabled)).append("\n");
    sb.append("    twitterConsumerKey: ").append(toIndentedString(twitterConsumerKey)).append("\n");
    sb.append("    twitterConsumerSecret: ").append(toIndentedString(twitterConsumerSecret)).append("\n");
    sb.append("    unauthenticatedClientAction: ").append(toIndentedString(unauthenticatedClientAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aadClientId");
    openapiFields.add("additionalLoginParams");
    openapiFields.add("allowedAudiences");
    openapiFields.add("allowedExternalRedirectUrls");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("defaultProvider");
    openapiFields.add("enabled");
    openapiFields.add("facebookAppId");
    openapiFields.add("facebookAppSecret");
    openapiFields.add("facebookOAuthScopes");
    openapiFields.add("googleClientId");
    openapiFields.add("googleClientSecret");
    openapiFields.add("googleOAuthScopes");
    openapiFields.add("httpApiPrefixPath");
    openapiFields.add("issuer");
    openapiFields.add("microsoftAccountClientId");
    openapiFields.add("microsoftAccountClientSecret");
    openapiFields.add("microsoftAccountOAuthScopes");
    openapiFields.add("openIdIssuer");
    openapiFields.add("tokenRefreshExtensionHours");
    openapiFields.add("tokenStoreEnabled");
    openapiFields.add("twitterConsumerKey");
    openapiFields.add("twitterConsumerSecret");
    openapiFields.add("unauthenticatedClientAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SiteAuthSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SiteAuthSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SiteAuthSettings is not found in the empty JSON string", SiteAuthSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SiteAuthSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SiteAuthSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aadClientId") != null && !jsonObj.get("aadClientId").isJsonNull()) && !jsonObj.get("aadClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aadClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aadClientId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("additionalLoginParams") != null && !jsonObj.get("additionalLoginParams").isJsonNull() && !jsonObj.get("additionalLoginParams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalLoginParams` to be an array in the JSON string but got `%s`", jsonObj.get("additionalLoginParams").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedAudiences") != null && !jsonObj.get("allowedAudiences").isJsonNull() && !jsonObj.get("allowedAudiences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedAudiences` to be an array in the JSON string but got `%s`", jsonObj.get("allowedAudiences").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedExternalRedirectUrls") != null && !jsonObj.get("allowedExternalRedirectUrls").isJsonNull() && !jsonObj.get("allowedExternalRedirectUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedExternalRedirectUrls` to be an array in the JSON string but got `%s`", jsonObj.get("allowedExternalRedirectUrls").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("defaultProvider") != null && !jsonObj.get("defaultProvider").isJsonNull()) && !jsonObj.get("defaultProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultProvider").toString()));
      }
      // validate the optional field `defaultProvider`
      if (jsonObj.get("defaultProvider") != null && !jsonObj.get("defaultProvider").isJsonNull()) {
        DefaultProviderEnum.validateJsonElement(jsonObj.get("defaultProvider"));
      }
      if ((jsonObj.get("facebookAppId") != null && !jsonObj.get("facebookAppId").isJsonNull()) && !jsonObj.get("facebookAppId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facebookAppId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facebookAppId").toString()));
      }
      if ((jsonObj.get("facebookAppSecret") != null && !jsonObj.get("facebookAppSecret").isJsonNull()) && !jsonObj.get("facebookAppSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facebookAppSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facebookAppSecret").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("facebookOAuthScopes") != null && !jsonObj.get("facebookOAuthScopes").isJsonNull() && !jsonObj.get("facebookOAuthScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facebookOAuthScopes` to be an array in the JSON string but got `%s`", jsonObj.get("facebookOAuthScopes").toString()));
      }
      if ((jsonObj.get("googleClientId") != null && !jsonObj.get("googleClientId").isJsonNull()) && !jsonObj.get("googleClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleClientId").toString()));
      }
      if ((jsonObj.get("googleClientSecret") != null && !jsonObj.get("googleClientSecret").isJsonNull()) && !jsonObj.get("googleClientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleClientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("googleClientSecret").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("googleOAuthScopes") != null && !jsonObj.get("googleOAuthScopes").isJsonNull() && !jsonObj.get("googleOAuthScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `googleOAuthScopes` to be an array in the JSON string but got `%s`", jsonObj.get("googleOAuthScopes").toString()));
      }
      if ((jsonObj.get("httpApiPrefixPath") != null && !jsonObj.get("httpApiPrefixPath").isJsonNull()) && !jsonObj.get("httpApiPrefixPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpApiPrefixPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpApiPrefixPath").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("microsoftAccountClientId") != null && !jsonObj.get("microsoftAccountClientId").isJsonNull()) && !jsonObj.get("microsoftAccountClientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsoftAccountClientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microsoftAccountClientId").toString()));
      }
      if ((jsonObj.get("microsoftAccountClientSecret") != null && !jsonObj.get("microsoftAccountClientSecret").isJsonNull()) && !jsonObj.get("microsoftAccountClientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsoftAccountClientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("microsoftAccountClientSecret").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("microsoftAccountOAuthScopes") != null && !jsonObj.get("microsoftAccountOAuthScopes").isJsonNull() && !jsonObj.get("microsoftAccountOAuthScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `microsoftAccountOAuthScopes` to be an array in the JSON string but got `%s`", jsonObj.get("microsoftAccountOAuthScopes").toString()));
      }
      if ((jsonObj.get("openIdIssuer") != null && !jsonObj.get("openIdIssuer").isJsonNull()) && !jsonObj.get("openIdIssuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `openIdIssuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("openIdIssuer").toString()));
      }
      if ((jsonObj.get("twitterConsumerKey") != null && !jsonObj.get("twitterConsumerKey").isJsonNull()) && !jsonObj.get("twitterConsumerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitterConsumerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitterConsumerKey").toString()));
      }
      if ((jsonObj.get("twitterConsumerSecret") != null && !jsonObj.get("twitterConsumerSecret").isJsonNull()) && !jsonObj.get("twitterConsumerSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitterConsumerSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitterConsumerSecret").toString()));
      }
      if ((jsonObj.get("unauthenticatedClientAction") != null && !jsonObj.get("unauthenticatedClientAction").isJsonNull()) && !jsonObj.get("unauthenticatedClientAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unauthenticatedClientAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unauthenticatedClientAction").toString()));
      }
      // validate the optional field `unauthenticatedClientAction`
      if (jsonObj.get("unauthenticatedClientAction") != null && !jsonObj.get("unauthenticatedClientAction").isJsonNull()) {
        UnauthenticatedClientActionEnum.validateJsonElement(jsonObj.get("unauthenticatedClientAction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SiteAuthSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SiteAuthSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SiteAuthSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SiteAuthSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SiteAuthSettings>() {
           @Override
           public void write(JsonWriter out, SiteAuthSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SiteAuthSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SiteAuthSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SiteAuthSettings
   * @throws IOException if the JSON string is invalid with respect to SiteAuthSettings
   */
  public static SiteAuthSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SiteAuthSettings.class);
  }

  /**
   * Convert an instance of SiteAuthSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

