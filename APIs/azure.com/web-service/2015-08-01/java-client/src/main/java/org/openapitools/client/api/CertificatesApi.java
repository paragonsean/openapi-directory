/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateCollection;
import org.openapitools.client.model.Csr;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificatesCreateOrUpdateCertificate
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateCertificateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesCreateOrUpdateCertificateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'certificateEnvelope' is set
        if (certificateEnvelope == null) {
            throw new ApiException("Missing the required parameter 'certificateEnvelope' when calling certificatesCreateOrUpdateCertificate(Async)");
        }

        return certificatesCreateOrUpdateCertificateCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);

    }

    /**
     * Creates or modifies an existing certificate.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificatesCreateOrUpdateCertificate(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificatesCreateOrUpdateCertificateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates or modifies an existing certificate.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificatesCreateOrUpdateCertificateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope) throws ApiException {
        okhttp3.Call localVarCall = certificatesCreateOrUpdateCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or modifies an existing certificate. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateCertificateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesCreateOrUpdateCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesCreateOrUpdateCsr
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateCsrCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = csrEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesCreateOrUpdateCsrValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdateCsr(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesCreateOrUpdateCsr(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdateCsr(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdateCsr(Async)");
        }

        // verify the required parameter 'csrEnvelope' is set
        if (csrEnvelope == null) {
            throw new ApiException("Missing the required parameter 'csrEnvelope' when calling certificatesCreateOrUpdateCsr(Async)");
        }

        return certificatesCreateOrUpdateCsrCall(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, _callback);

    }

    /**
     * Creates or modifies an existing certificate signing request.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @return Csr
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Csr certificatesCreateOrUpdateCsr(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope) throws ApiException {
        ApiResponse<Csr> localVarResp = certificatesCreateOrUpdateCsrWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @return ApiResponse&lt;Csr&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Csr> certificatesCreateOrUpdateCsrWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope) throws ApiException {
        okhttp3.Call localVarCall = certificatesCreateOrUpdateCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, null);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or modifies an existing certificate signing request. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateCsrAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope, final ApiCallback<Csr> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesCreateOrUpdateCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, _callback);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesDeleteCertificate
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate to be deleted. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteCertificateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesDeleteCertificateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesDeleteCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesDeleteCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesDeleteCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesDeleteCertificate(Async)");
        }

        return certificatesDeleteCertificateCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete a certificate by name in a specified subscription and resourcegroup.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate to be deleted. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificatesDeleteCertificate(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = certificatesDeleteCertificateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete a certificate by name in a specified subscription and resourcegroup.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate to be deleted. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificatesDeleteCertificateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesDeleteCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a certificate by name in a specified subscription and resourcegroup. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate to be deleted. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteCertificateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesDeleteCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesDeleteCsr
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate signing request. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteCsrCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesDeleteCsrValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesDeleteCsr(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesDeleteCsr(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesDeleteCsr(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesDeleteCsr(Async)");
        }

        return certificatesDeleteCsrCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete the certificate signing request.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate signing request. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificatesDeleteCsr(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = certificatesDeleteCsrWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete the certificate signing request.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate signing request. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificatesDeleteCsrWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesDeleteCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the certificate signing request. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate signing request. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteCsrAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesDeleteCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGetCertificate
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCertificateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGetCertificateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGetCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesGetCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGetCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGetCertificate(Async)");
        }

        return certificatesGetCertificateCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificatesGetCertificate(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificatesGetCertificateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificatesGetCertificateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesGetCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCertificateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGetCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGetCertificates
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCertificatesCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGetCertificatesValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGetCertificates(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGetCertificates(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGetCertificates(Async)");
        }

        return certificatesGetCertificatesCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return CertificateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateCollection certificatesGetCertificates(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CertificateCollection> localVarResp = certificatesGetCertificatesWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CertificateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateCollection> certificatesGetCertificatesWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesGetCertificatesValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get certificates for a subscription in the specified resource group. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCertificatesAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<CertificateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGetCertificatesValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGetCsr
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCsrCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGetCsrValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGetCsr(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesGetCsr(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGetCsr(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGetCsr(Async)");
        }

        return certificatesGetCsrCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Csr
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Csr certificatesGetCsr(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Csr> localVarResp = certificatesGetCsrWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Csr&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Csr> certificatesGetCsrWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesGetCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCsrAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Csr> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGetCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGetCsrs
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCsrsCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGetCsrsValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGetCsrs(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGetCsrs(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGetCsrs(Async)");
        }

        return certificatesGetCsrsCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;Csr&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Csr> certificatesGetCsrs(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<Csr>> localVarResp = certificatesGetCsrsWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;Csr&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Csr>> certificatesGetCsrsWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesGetCsrsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<Csr>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCsrsAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<List<Csr>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGetCsrsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<Csr>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesUpdateCertificate
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesUpdateCertificateCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesUpdateCertificateValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesUpdateCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesUpdateCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesUpdateCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesUpdateCertificate(Async)");
        }

        // verify the required parameter 'certificateEnvelope' is set
        if (certificateEnvelope == null) {
            throw new ApiException("Missing the required parameter 'certificateEnvelope' when calling certificatesUpdateCertificate(Async)");
        }

        return certificatesUpdateCertificateCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);

    }

    /**
     * Creates or modifies an existing certificate.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @return Certificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Certificate certificatesUpdateCertificate(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope) throws ApiException {
        ApiResponse<Certificate> localVarResp = certificatesUpdateCertificateWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates or modifies an existing certificate.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @return ApiResponse&lt;Certificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Certificate> certificatesUpdateCertificateWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope) throws ApiException {
        okhttp3.Call localVarCall = certificatesUpdateCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, null);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or modifies an existing certificate. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateEnvelope Details of certificate if it exists already. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesUpdateCertificateAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Certificate certificateEnvelope, final ApiCallback<Certificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesUpdateCertificateValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope, _callback);
        Type localVarReturnType = new TypeToken<Certificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesUpdateCsr
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesUpdateCsrCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = csrEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/csrs/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesUpdateCsrValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesUpdateCsr(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificatesUpdateCsr(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesUpdateCsr(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesUpdateCsr(Async)");
        }

        // verify the required parameter 'csrEnvelope' is set
        if (csrEnvelope == null) {
            throw new ApiException("Missing the required parameter 'csrEnvelope' when calling certificatesUpdateCsr(Async)");
        }

        return certificatesUpdateCsrCall(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, _callback);

    }

    /**
     * Creates or modifies an existing certificate signing request.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @return Csr
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Csr certificatesUpdateCsr(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope) throws ApiException {
        ApiResponse<Csr> localVarResp = certificatesUpdateCsrWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope);
        return localVarResp.getData();
    }

    /**
     * Creates or modifies an existing certificate signing request.
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @return ApiResponse&lt;Csr&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Csr> certificatesUpdateCsrWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope) throws ApiException {
        okhttp3.Call localVarCall = certificatesUpdateCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, null);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or modifies an existing certificate signing request. (asynchronously)
     * 
     * @param resourceGroupName Name of the resource group (required)
     * @param name Name of the certificate. (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param csrEnvelope Details of certificate signing request if it exists already. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesUpdateCsrAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Csr csrEnvelope, final ApiCallback<Csr> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesUpdateCsrValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope, _callback);
        Type localVarReturnType = new TypeToken<Csr>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
