/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressResponse;
import org.openapitools.client.model.HostingEnvironment;
import org.openapitools.client.model.HostingEnvironmentCollection;
import org.openapitools.client.model.ManagedHostingEnvironment;
import org.openapitools.client.model.ServerFarmCollection;
import org.openapitools.client.model.SiteCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagedHostingEnvironmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagedHostingEnvironmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagedHostingEnvironmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment managedHostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = managedHostingEnvironmentEnvelope;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment managedHostingEnvironmentEnvelope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'managedHostingEnvironmentEnvelope' is set
        if (managedHostingEnvironmentEnvelope == null) {
            throw new ApiException("Missing the required parameter 'managedHostingEnvironmentEnvelope' when calling managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(Async)");
        }

        return managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, managedHostingEnvironmentEnvelope, _callback);

    }

    /**
     * Create or update a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment (required)
     * @return HostingEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public HostingEnvironment managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment managedHostingEnvironmentEnvelope) throws ApiException {
        ApiResponse<HostingEnvironment> localVarResp = managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, managedHostingEnvironmentEnvelope);
        return localVarResp.getData();
    }

    /**
     * Create or update a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment (required)
     * @return ApiResponse&lt;HostingEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostingEnvironment> managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment managedHostingEnvironmentEnvelope) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, managedHostingEnvironmentEnvelope, null);
        Type localVarReturnType = new TypeToken<HostingEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a managed hosting environment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param managedHostingEnvironmentEnvelope Properties of managed hosting environment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, HostingEnvironment managedHostingEnvironmentEnvelope, final ApiCallback<HostingEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, managedHostingEnvironmentEnvelope, _callback);
        Type localVarReturnType = new TypeToken<HostingEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsDeleteManagedHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the managed hosting environment contains resources (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsDeleteManagedHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forceDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forceDelete", forceDelete));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsDeleteManagedHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsDeleteManagedHostingEnvironment(Async)");
        }

        return managedHostingEnvironmentsDeleteManagedHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, _callback);

    }

    /**
     * Delete a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the managed hosting environment contains resources (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public Object managedHostingEnvironmentsDeleteManagedHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete) throws ApiException {
        ApiResponse<Object> localVarResp = managedHostingEnvironmentsDeleteManagedHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, forceDelete);
        return localVarResp.getData();
    }

    /**
     * Delete a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the managed hosting environment contains resources (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> managedHostingEnvironmentsDeleteManagedHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsDeleteManagedHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a managed hosting environment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param forceDelete Delete even if the managed hosting environment contains resources (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsDeleteManagedHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, Boolean forceDelete, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsDeleteManagedHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, forceDelete, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsGetManagedHostingEnvironment
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironment(Async)");
        }

        return managedHostingEnvironmentsGetManagedHostingEnvironmentCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get properties of a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ManagedHostingEnvironment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ManagedHostingEnvironment managedHostingEnvironmentsGetManagedHostingEnvironment(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ManagedHostingEnvironment> localVarResp = managedHostingEnvironmentsGetManagedHostingEnvironmentWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get properties of a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ManagedHostingEnvironment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ManagedHostingEnvironment> managedHostingEnvironmentsGetManagedHostingEnvironmentWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ManagedHostingEnvironment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get properties of a managed hosting environment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ManagedHostingEnvironment> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ManagedHostingEnvironment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsGetManagedHostingEnvironmentOperation
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentOperationCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/operations/{operationId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentOperationValidateBeforeCall(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(Async)");
        }

        return managedHostingEnvironmentsGetManagedHostingEnvironmentOperationCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get status of an operation on a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Object managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = managedHostingEnvironmentsGetManagedHostingEnvironmentOperationWithHttpInfo(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get status of an operation on a managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> managedHostingEnvironmentsGetManagedHostingEnvironmentOperationWithHttpInfo(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status of an operation on a managed hosting environment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param operationId operation identifier GUID (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Operation completed successfully </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Asynchronous operation in progress </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentOperationAsync(String resourceGroupName, String name, String operationId, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentOperationValidateBeforeCall(resourceGroupName, name, operationId, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/serverfarms"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(Async)");
        }

        return managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ServerFarmCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmCollection managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerFarmCollection> localVarResp = managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ServerFarmCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmCollection> managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ServerFarmCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsGetManagedHostingEnvironmentSites
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentSitesCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/sites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (propertiesToInclude != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("propertiesToInclude", propertiesToInclude));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentSitesValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentSites(Async)");
        }

        return managedHostingEnvironmentsGetManagedHostingEnvironmentSitesCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);

    }

    /**
     * Get all sites on the managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @return SiteCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SiteCollection managedHostingEnvironmentsGetManagedHostingEnvironmentSites(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        ApiResponse<SiteCollection> localVarResp = managedHostingEnvironmentsGetManagedHostingEnvironmentSitesWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        return localVarResp.getData();
    }

    /**
     * Get all sites on the managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @return ApiResponse&lt;SiteCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SiteCollection> managedHostingEnvironmentsGetManagedHostingEnvironmentSitesWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentSitesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, null);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all sites on the managed hosting environment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param propertiesToInclude Comma separated list of site properties to include (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentSitesAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, String propertiesToInclude, final ApiCallback<SiteCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentSitesValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude, _callback);
        Type localVarReturnType = new TypeToken<SiteCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsGetManagedHostingEnvironmentVips
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentVipsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/capacities/virtualip"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentVipsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentVips(Async)");
        }

        return managedHostingEnvironmentsGetManagedHostingEnvironmentVipsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return AddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddressResponse managedHostingEnvironmentsGetManagedHostingEnvironmentVips(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AddressResponse> localVarResp = managedHostingEnvironmentsGetManagedHostingEnvironmentVipsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddressResponse> managedHostingEnvironmentsGetManagedHostingEnvironmentVipsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentVipsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentVipsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<AddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentVipsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments/{name}/webhostingplans"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(Async)");
        }

        return managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ServerFarmCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServerFarmCollection managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServerFarmCollection> localVarResp = managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ServerFarmCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServerFarmCollection> managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param name Name of managed hosting environment (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<ServerFarmCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServerFarmCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for managedHostingEnvironmentsGetManagedHostingEnvironments
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentsCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/managedHostingEnvironments"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentsValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling managedHostingEnvironmentsGetManagedHostingEnvironments(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling managedHostingEnvironmentsGetManagedHostingEnvironments(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling managedHostingEnvironmentsGetManagedHostingEnvironments(Async)");
        }

        return managedHostingEnvironmentsGetManagedHostingEnvironmentsCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get all managed hosting environments in a resource group.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return HostingEnvironmentCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public HostingEnvironmentCollection managedHostingEnvironmentsGetManagedHostingEnvironments(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<HostingEnvironmentCollection> localVarResp = managedHostingEnvironmentsGetManagedHostingEnvironmentsWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all managed hosting environments in a resource group.
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;HostingEnvironmentCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HostingEnvironmentCollection> managedHostingEnvironmentsGetManagedHostingEnvironmentsWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<HostingEnvironmentCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all managed hosting environments in a resource group. (asynchronously)
     * 
     * @param resourceGroupName Name of resource group (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call managedHostingEnvironmentsGetManagedHostingEnvironmentsAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<HostingEnvironmentCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = managedHostingEnvironmentsGetManagedHostingEnvironmentsValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<HostingEnvironmentCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
