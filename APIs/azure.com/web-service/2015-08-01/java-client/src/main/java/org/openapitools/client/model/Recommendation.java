/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a recommendation result generated by the recommendation engine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:21.317015-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Recommendation {
  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;

  /**
   * List of channels that this recommendation can apply.
   */
  @JsonAdapter(ChannelsEnum.Adapter.class)
  public enum ChannelsEnum {
    NOTIFICATION("Notification"),
    
    API("Api"),
    
    EMAIL("Email"),
    
    ALL("All");

    private String value;

    ChannelsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelsEnum fromValue(String value) {
      for (ChannelsEnum b : ChannelsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private ChannelsEnum channels;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Integer enabled;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  /**
   * Level indicating how critical this recommendation can impact.
   */
  @JsonAdapter(LevelEnum.Adapter.class)
  public enum LevelEnum {
    CRITICAL("Critical"),
    
    WARNING("Warning"),
    
    INFORMATION("Information"),
    
    NON_URGENT_SUGGESTION("NonUrgentSuggestion");

    private String value;

    LevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LevelEnum fromValue(String value) {
      for (LevelEnum b : LevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private LevelEnum level;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NEXT_NOTIFICATION_TIME = "nextNotificationTime";
  @SerializedName(SERIALIZED_NAME_NEXT_NOTIFICATION_TIME)
  private OffsetDateTime nextNotificationTime;

  public static final String SERIALIZED_NAME_NOTIFICATION_EXPIRATION_TIME = "notificationExpirationTime";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EXPIRATION_TIME)
  private OffsetDateTime notificationExpirationTime;

  public static final String SERIALIZED_NAME_NOTIFIED_TIME = "notifiedTime";
  @SerializedName(SERIALIZED_NAME_NOTIFIED_TIME)
  private OffsetDateTime notifiedTime;

  public static final String SERIALIZED_NAME_RECOMMENDATION_ID = "recommendationId";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION_ID)
  private String recommendationId;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_SCOPE = "resourceScope";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SCOPE)
  private String resourceScope;

  public static final String SERIALIZED_NAME_RULE_NAME = "ruleName";
  @SerializedName(SERIALIZED_NAME_RULE_NAME)
  private String ruleName;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Double score;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public Recommendation() {
  }

  public Recommendation actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * Name of action recommended by this object.
   * @return actionName
   */
  @javax.annotation.Nullable
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }


  public Recommendation channels(ChannelsEnum channels) {
    this.channels = channels;
    return this;
  }

  /**
   * List of channels that this recommendation can apply.
   * @return channels
   */
  @javax.annotation.Nonnull
  public ChannelsEnum getChannels() {
    return channels;
  }

  public void setChannels(ChannelsEnum channels) {
    this.channels = channels;
  }


  public Recommendation creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Timestamp when this instance was created.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Recommendation displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * UI friendly name of the rule (may not be unique)
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Recommendation enabled(Integer enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * On/off flag indicating the rule is currently enabled or disabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Integer getEnabled() {
    return enabled;
  }

  public void setEnabled(Integer enabled) {
    this.enabled = enabled;
  }


  public Recommendation endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of a range that the recommendation refers to.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Recommendation level(LevelEnum level) {
    this.level = level;
    return this;
  }

  /**
   * Level indicating how critical this recommendation can impact.
   * @return level
   */
  @javax.annotation.Nonnull
  public LevelEnum getLevel() {
    return level;
  }

  public void setLevel(LevelEnum level) {
    this.level = level;
  }


  public Recommendation message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Localized text of recommendation, good for UI.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public Recommendation nextNotificationTime(OffsetDateTime nextNotificationTime) {
    this.nextNotificationTime = nextNotificationTime;
    return this;
  }

  /**
   * When to notify this recommendation next. Null means that this will never be notified anymore.
   * @return nextNotificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextNotificationTime() {
    return nextNotificationTime;
  }

  public void setNextNotificationTime(OffsetDateTime nextNotificationTime) {
    this.nextNotificationTime = nextNotificationTime;
  }


  public Recommendation notificationExpirationTime(OffsetDateTime notificationExpirationTime) {
    this.notificationExpirationTime = notificationExpirationTime;
    return this;
  }

  /**
   * Date and time when this notification expires.
   * @return notificationExpirationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotificationExpirationTime() {
    return notificationExpirationTime;
  }

  public void setNotificationExpirationTime(OffsetDateTime notificationExpirationTime) {
    this.notificationExpirationTime = notificationExpirationTime;
  }


  public Recommendation notifiedTime(OffsetDateTime notifiedTime) {
    this.notifiedTime = notifiedTime;
    return this;
  }

  /**
   * Last timestamp this instance was actually notified. Null means that this recommendation hasn&#39;t been notified yet.
   * @return notifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotifiedTime() {
    return notifiedTime;
  }

  public void setNotifiedTime(OffsetDateTime notifiedTime) {
    this.notifiedTime = notifiedTime;
  }


  public Recommendation recommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
    return this;
  }

  /**
   * A GUID value that each recommendation object is associated with.
   * @return recommendationId
   */
  @javax.annotation.Nullable
  public String getRecommendationId() {
    return recommendationId;
  }

  public void setRecommendationId(String recommendationId) {
    this.recommendationId = recommendationId;
  }


  public Recommendation resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Full ARM resource ID string that this recommendation object is associated with.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public Recommendation resourceScope(String resourceScope) {
    this.resourceScope = resourceScope;
    return this;
  }

  /**
   * Name of a resource type this recommendation applies, e.g. Subscription, ServerFarm, Site.
   * @return resourceScope
   */
  @javax.annotation.Nullable
  public String getResourceScope() {
    return resourceScope;
  }

  public void setResourceScope(String resourceScope) {
    this.resourceScope = resourceScope;
  }


  public Recommendation ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

  /**
   * Unique name of the rule
   * @return ruleName
   */
  @javax.annotation.Nullable
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }


  public Recommendation score(Double score) {
    this.score = score;
    return this;
  }

  /**
   * A metric value measured by the rule.
   * @return score
   */
  @javax.annotation.Nullable
  public Double getScore() {
    return score;
  }

  public void setScore(Double score) {
    this.score = score;
  }


  public Recommendation startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The beginning time of a range that the recommendation refers to.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Recommendation tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Recommendation addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The list of category tags that this recommendation belongs to.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Recommendation recommendation = (Recommendation) o;
    return Objects.equals(this.actionName, recommendation.actionName) &&
        Objects.equals(this.channels, recommendation.channels) &&
        Objects.equals(this.creationTime, recommendation.creationTime) &&
        Objects.equals(this.displayName, recommendation.displayName) &&
        Objects.equals(this.enabled, recommendation.enabled) &&
        Objects.equals(this.endTime, recommendation.endTime) &&
        Objects.equals(this.level, recommendation.level) &&
        Objects.equals(this.message, recommendation.message) &&
        Objects.equals(this.nextNotificationTime, recommendation.nextNotificationTime) &&
        Objects.equals(this.notificationExpirationTime, recommendation.notificationExpirationTime) &&
        Objects.equals(this.notifiedTime, recommendation.notifiedTime) &&
        Objects.equals(this.recommendationId, recommendation.recommendationId) &&
        Objects.equals(this.resourceId, recommendation.resourceId) &&
        Objects.equals(this.resourceScope, recommendation.resourceScope) &&
        Objects.equals(this.ruleName, recommendation.ruleName) &&
        Objects.equals(this.score, recommendation.score) &&
        Objects.equals(this.startTime, recommendation.startTime) &&
        Objects.equals(this.tags, recommendation.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, channels, creationTime, displayName, enabled, endTime, level, message, nextNotificationTime, notificationExpirationTime, notifiedTime, recommendationId, resourceId, resourceScope, ruleName, score, startTime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Recommendation {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    nextNotificationTime: ").append(toIndentedString(nextNotificationTime)).append("\n");
    sb.append("    notificationExpirationTime: ").append(toIndentedString(notificationExpirationTime)).append("\n");
    sb.append("    notifiedTime: ").append(toIndentedString(notifiedTime)).append("\n");
    sb.append("    recommendationId: ").append(toIndentedString(recommendationId)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceScope: ").append(toIndentedString(resourceScope)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionName");
    openapiFields.add("channels");
    openapiFields.add("creationTime");
    openapiFields.add("displayName");
    openapiFields.add("enabled");
    openapiFields.add("endTime");
    openapiFields.add("level");
    openapiFields.add("message");
    openapiFields.add("nextNotificationTime");
    openapiFields.add("notificationExpirationTime");
    openapiFields.add("notifiedTime");
    openapiFields.add("recommendationId");
    openapiFields.add("resourceId");
    openapiFields.add("resourceScope");
    openapiFields.add("ruleName");
    openapiFields.add("score");
    openapiFields.add("startTime");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channels");
    openapiRequiredFields.add("level");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Recommendation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Recommendation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Recommendation is not found in the empty JSON string", Recommendation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Recommendation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Recommendation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Recommendation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionName") != null && !jsonObj.get("actionName").isJsonNull()) && !jsonObj.get("actionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionName").toString()));
      }
      if (!jsonObj.get("channels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channels").toString()));
      }
      // validate the required field `channels`
      ChannelsEnum.validateJsonElement(jsonObj.get("channels"));
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      // validate the required field `level`
      LevelEnum.validateJsonElement(jsonObj.get("level"));
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("recommendationId") != null && !jsonObj.get("recommendationId").isJsonNull()) && !jsonObj.get("recommendationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendationId").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("resourceScope") != null && !jsonObj.get("resourceScope").isJsonNull()) && !jsonObj.get("resourceScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceScope").toString()));
      }
      if ((jsonObj.get("ruleName") != null && !jsonObj.get("ruleName").isJsonNull()) && !jsonObj.get("ruleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Recommendation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Recommendation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Recommendation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Recommendation.class));

       return (TypeAdapter<T>) new TypeAdapter<Recommendation>() {
           @Override
           public void write(JsonWriter out, Recommendation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Recommendation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Recommendation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Recommendation
   * @throws IOException if the JSON string is invalid with respect to Recommendation
   */
  public static Recommendation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Recommendation.class);
  }

  /**
   * Convert an instance of Recommendation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

