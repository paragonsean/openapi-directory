/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CertificateEmail;
import org.openapitools.client.model.CertificateOrder;
import org.openapitools.client.model.CertificateOrderAction;
import org.openapitools.client.model.CertificateOrderCertificate;
import org.openapitools.client.model.CertificateOrderCertificateCollection;
import org.openapitools.client.model.CertificateOrderCollection;
import org.openapitools.client.model.ReissueCertificateOrderRequest;
import org.openapitools.client.model.RenewCertificateOrderRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CertificateOrdersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CertificateOrdersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CertificateOrdersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificateOrdersCreateOrUpdateCertificate
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersCreateOrUpdateCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyVaultCertificate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersCreateOrUpdateCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling certificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersCreateOrUpdateCertificate(Async)");
        }

        // verify the required parameter 'keyVaultCertificate' is set
        if (keyVaultCertificate == null) {
            throw new ApiException("Missing the required parameter 'keyVaultCertificate' when calling certificateOrdersCreateOrUpdateCertificate(Async)");
        }

        return certificateOrdersCreateOrUpdateCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);

    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @return CertificateOrderCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrderCertificate certificateOrdersCreateOrUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate) throws ApiException {
        ApiResponse<CertificateOrderCertificate> localVarResp = certificateOrdersCreateOrUpdateCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        return localVarResp.getData();
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @return ApiResponse&lt;CertificateOrderCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrderCertificate> certificateOrdersCreateOrUpdateCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersCreateOrUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, null);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersCreateOrUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate, final ApiCallback<CertificateOrderCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersCreateOrUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersCreateOrUpdateCertificateOrder
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersCreateOrUpdateCertificateOrderCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateDistinguishedName;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersCreateOrUpdateCertificateOrderValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersCreateOrUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersCreateOrUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersCreateOrUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersCreateOrUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'certificateDistinguishedName' is set
        if (certificateDistinguishedName == null) {
            throw new ApiException("Missing the required parameter 'certificateDistinguishedName' when calling certificateOrdersCreateOrUpdateCertificateOrder(Async)");
        }

        return certificateOrdersCreateOrUpdateCertificateOrderCall(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, _callback);

    }

    /**
     * Create or update a certificate purchase order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @return CertificateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrder certificateOrdersCreateOrUpdateCertificateOrder(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName) throws ApiException {
        ApiResponse<CertificateOrder> localVarResp = certificateOrdersCreateOrUpdateCertificateOrderWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName);
        return localVarResp.getData();
    }

    /**
     * Create or update a certificate purchase order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @return ApiResponse&lt;CertificateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrder> certificateOrdersCreateOrUpdateCertificateOrderWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersCreateOrUpdateCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, null);
        Type localVarReturnType = new TypeToken<CertificateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a certificate purchase order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersCreateOrUpdateCertificateOrderAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName, final ApiCallback<CertificateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersCreateOrUpdateCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersDeleteCertificate
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersDeleteCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersDeleteCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling certificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersDeleteCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersDeleteCertificate(Async)");
        }

        return certificateOrdersDeleteCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Deletes the certificate associated with the certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificateOrdersDeleteCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = certificateOrdersDeleteCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes the certificate associated with the certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificateOrdersDeleteCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersDeleteCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes the certificate associated with the certificate order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersDeleteCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersDeleteCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersDeleteCertificateOrder
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersDeleteCertificateOrderCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersDeleteCertificateOrderValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersDeleteCertificateOrder(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersDeleteCertificateOrder(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersDeleteCertificateOrder(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersDeleteCertificateOrder(Async)");
        }

        return certificateOrdersDeleteCertificateOrderCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Delete an existing certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificateOrdersDeleteCertificateOrder(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = certificateOrdersDeleteCertificateOrderWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete an existing certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificateOrdersDeleteCertificateOrderWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersDeleteCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing certificate order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersDeleteCertificateOrderAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersDeleteCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersGetCertificate
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersGetCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling certificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificate(Async)");
        }

        return certificateOrdersGetCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get certificate associated with the certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return CertificateOrderCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrderCertificate certificateOrdersGetCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CertificateOrderCertificate> localVarResp = certificateOrdersGetCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get certificate associated with the certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CertificateOrderCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrderCertificate> certificateOrdersGetCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersGetCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get certificate associated with the certificate order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, final ApiCallback<CertificateOrderCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersGetCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersGetCertificateOrder
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificateOrderCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersGetCertificateOrderValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificateOrder(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersGetCertificateOrder(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificateOrder(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificateOrder(Async)");
        }

        return certificateOrdersGetCertificateOrderCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return CertificateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrder certificateOrdersGetCertificateOrder(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CertificateOrder> localVarResp = certificateOrdersGetCertificateOrderWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CertificateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrder> certificateOrdersGetCertificateOrderWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersGetCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a certificate order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificateOrderAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<CertificateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersGetCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersGetCertificateOrders
     * @param resourceGroupName Azure resource group name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificateOrdersCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersGetCertificateOrdersValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificateOrders(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificateOrders(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificateOrders(Async)");
        }

        return certificateOrdersGetCertificateOrdersCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Get certificate orders in a resource group
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return CertificateOrderCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrderCollection certificateOrdersGetCertificateOrders(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CertificateOrderCollection> localVarResp = certificateOrdersGetCertificateOrdersWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get certificate orders in a resource group
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CertificateOrderCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrderCollection> certificateOrdersGetCertificateOrdersWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersGetCertificateOrdersValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateOrderCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get certificate orders in a resource group (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificateOrdersAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<CertificateOrderCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersGetCertificateOrdersValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrderCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersGetCertificates
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificatesCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersGetCertificatesValidateBeforeCall(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersGetCertificates(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling certificateOrdersGetCertificates(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersGetCertificates(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersGetCertificates(Async)");
        }

        return certificateOrdersGetCertificatesCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);

    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return CertificateOrderCertificateCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrderCertificateCollection certificateOrdersGetCertificates(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<CertificateOrderCertificateCollection> localVarResp = certificateOrdersGetCertificatesWithHttpInfo(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CertificateOrderCertificateCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrderCertificateCollection> certificateOrdersGetCertificatesWithHttpInfo(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersGetCertificatesValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificateCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time) (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersGetCertificatesAsync(String resourceGroupName, String certificateOrderName, String subscriptionId, String apiVersion, final ApiCallback<CertificateOrderCertificateCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersGetCertificatesValidateBeforeCall(resourceGroupName, certificateOrderName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificateCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersReissueCertificateOrder
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Reissue parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersReissueCertificateOrderCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reissueCertificateOrderRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/reissue"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersReissueCertificateOrderValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersReissueCertificateOrder(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersReissueCertificateOrder(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersReissueCertificateOrder(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersReissueCertificateOrder(Async)");
        }

        // verify the required parameter 'reissueCertificateOrderRequest' is set
        if (reissueCertificateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'reissueCertificateOrderRequest' when calling certificateOrdersReissueCertificateOrder(Async)");
        }

        return certificateOrdersReissueCertificateOrderCall(resourceGroupName, name, subscriptionId, apiVersion, reissueCertificateOrderRequest, _callback);

    }

    /**
     * Reissue an existing certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Reissue parameters (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificateOrdersReissueCertificateOrder(String resourceGroupName, String name, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest) throws ApiException {
        ApiResponse<Object> localVarResp = certificateOrdersReissueCertificateOrderWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, reissueCertificateOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Reissue an existing certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Reissue parameters (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificateOrdersReissueCertificateOrderWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersReissueCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, reissueCertificateOrderRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reissue an existing certificate order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param reissueCertificateOrderRequest Reissue parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersReissueCertificateOrderAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, ReissueCertificateOrderRequest reissueCertificateOrderRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersReissueCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, reissueCertificateOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersRenewCertificateOrder
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersRenewCertificateOrderCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = renewCertificateOrderRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/renew"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersRenewCertificateOrderValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersRenewCertificateOrder(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersRenewCertificateOrder(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersRenewCertificateOrder(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersRenewCertificateOrder(Async)");
        }

        // verify the required parameter 'renewCertificateOrderRequest' is set
        if (renewCertificateOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'renewCertificateOrderRequest' when calling certificateOrdersRenewCertificateOrder(Async)");
        }

        return certificateOrdersRenewCertificateOrderCall(resourceGroupName, name, subscriptionId, apiVersion, renewCertificateOrderRequest, _callback);

    }

    /**
     * Renew an existing certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificateOrdersRenewCertificateOrder(String resourceGroupName, String name, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest) throws ApiException {
        ApiResponse<Object> localVarResp = certificateOrdersRenewCertificateOrderWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, renewCertificateOrderRequest);
        return localVarResp.getData();
    }

    /**
     * Renew an existing certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificateOrdersRenewCertificateOrderWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersRenewCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, renewCertificateOrderRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Renew an existing certificate order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param renewCertificateOrderRequest Renew parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersRenewCertificateOrderAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, RenewCertificateOrderRequest renewCertificateOrderRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersRenewCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, renewCertificateOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersResendCertificateEmail
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersResendCertificateEmailCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/resendEmail"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersResendCertificateEmailValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersResendCertificateEmail(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersResendCertificateEmail(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersResendCertificateEmail(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersResendCertificateEmail(Async)");
        }

        return certificateOrdersResendCertificateEmailCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Resend certificate email
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificateOrdersResendCertificateEmail(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = certificateOrdersResendCertificateEmailWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Resend certificate email
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificateOrdersResendCertificateEmailWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersResendCertificateEmailValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resend certificate email (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersResendCertificateEmailAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersResendCertificateEmailValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersRetrieveCertificateActions
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersRetrieveCertificateActionsCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveCertificateActions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersRetrieveCertificateActionsValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersRetrieveCertificateActions(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersRetrieveCertificateActions(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersRetrieveCertificateActions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersRetrieveCertificateActions(Async)");
        }

        return certificateOrdersRetrieveCertificateActionsCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieve the list of certificate actions
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;CertificateOrderAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CertificateOrderAction> certificateOrdersRetrieveCertificateActions(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<CertificateOrderAction>> localVarResp = certificateOrdersRetrieveCertificateActionsWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve the list of certificate actions
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;CertificateOrderAction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CertificateOrderAction>> certificateOrdersRetrieveCertificateActionsWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersRetrieveCertificateActionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<CertificateOrderAction>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the list of certificate actions (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersRetrieveCertificateActionsAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<CertificateOrderAction>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersRetrieveCertificateActionsValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CertificateOrderAction>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersRetrieveCertificateEmailHistory
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersRetrieveCertificateEmailHistoryCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/retrieveEmailHistory"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersRetrieveCertificateEmailHistoryValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersRetrieveCertificateEmailHistory(Async)");
        }

        return certificateOrdersRetrieveCertificateEmailHistoryCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Retrieve email history
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return List&lt;CertificateEmail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CertificateEmail> certificateOrdersRetrieveCertificateEmailHistory(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<List<CertificateEmail>> localVarResp = certificateOrdersRetrieveCertificateEmailHistoryWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve email history
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;List&lt;CertificateEmail&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CertificateEmail>> certificateOrdersRetrieveCertificateEmailHistoryWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersRetrieveCertificateEmailHistoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<List<CertificateEmail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve email history (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersRetrieveCertificateEmailHistoryAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<List<CertificateEmail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersRetrieveCertificateEmailHistoryValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<List<CertificateEmail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersUpdateCertificate
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersUpdateCertificateCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyVaultCertificate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/certificates/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "certificateOrderName" + "}", localVarApiClient.escapeString(certificateOrderName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersUpdateCertificateValidateBeforeCall(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'certificateOrderName' is set
        if (certificateOrderName == null) {
            throw new ApiException("Missing the required parameter 'certificateOrderName' when calling certificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersUpdateCertificate(Async)");
        }

        // verify the required parameter 'keyVaultCertificate' is set
        if (keyVaultCertificate == null) {
            throw new ApiException("Missing the required parameter 'keyVaultCertificate' when calling certificateOrdersUpdateCertificate(Async)");
        }

        return certificateOrdersUpdateCertificateCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);

    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @return CertificateOrderCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrderCertificate certificateOrdersUpdateCertificate(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate) throws ApiException {
        ApiResponse<CertificateOrderCertificate> localVarResp = certificateOrdersUpdateCertificateWithHttpInfo(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        return localVarResp.getData();
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @return ApiResponse&lt;CertificateOrderCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrderCertificate> certificateOrdersUpdateCertificateWithHttpInfo(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, null);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param certificateOrderName Certificate name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param keyVaultCertificate Key Vault secret csm Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersUpdateCertificateAsync(String resourceGroupName, String certificateOrderName, String name, String subscriptionId, String apiVersion, CertificateOrderCertificate keyVaultCertificate, final ApiCallback<CertificateOrderCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersUpdateCertificateValidateBeforeCall(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrderCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersUpdateCertificateOrder
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersUpdateCertificateOrderCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificateDistinguishedName;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersUpdateCertificateOrderValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersUpdateCertificateOrder(Async)");
        }

        // verify the required parameter 'certificateDistinguishedName' is set
        if (certificateDistinguishedName == null) {
            throw new ApiException("Missing the required parameter 'certificateDistinguishedName' when calling certificateOrdersUpdateCertificateOrder(Async)");
        }

        return certificateOrdersUpdateCertificateOrderCall(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, _callback);

    }

    /**
     * Create or update a certificate purchase order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @return CertificateOrder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CertificateOrder certificateOrdersUpdateCertificateOrder(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName) throws ApiException {
        ApiResponse<CertificateOrder> localVarResp = certificateOrdersUpdateCertificateOrderWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName);
        return localVarResp.getData();
    }

    /**
     * Create or update a certificate purchase order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @return ApiResponse&lt;CertificateOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CertificateOrder> certificateOrdersUpdateCertificateOrderWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersUpdateCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, null);
        Type localVarReturnType = new TypeToken<CertificateOrder>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a certificate purchase order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param certificateDistinguishedName Distinguished name to be used for purchasing certificate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersUpdateCertificateOrderAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, CertificateOrder certificateDistinguishedName, final ApiCallback<CertificateOrder> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersUpdateCertificateOrderValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName, _callback);
        Type localVarReturnType = new TypeToken<CertificateOrder>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificateOrdersVerifyDomainOwnership
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersVerifyDomainOwnershipCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{name}/verifyDomainOwnership"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificateOrdersVerifyDomainOwnershipValidateBeforeCall(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificateOrdersVerifyDomainOwnership(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling certificateOrdersVerifyDomainOwnership(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificateOrdersVerifyDomainOwnership(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificateOrdersVerifyDomainOwnership(Async)");
        }

        return certificateOrdersVerifyDomainOwnershipCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);

    }

    /**
     * Verify domain ownership for this certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Object certificateOrdersVerifyDomainOwnership(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = certificateOrdersVerifyDomainOwnershipWithHttpInfo(resourceGroupName, name, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Verify domain ownership for this certificate order
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> certificateOrdersVerifyDomainOwnershipWithHttpInfo(String resourceGroupName, String name, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificateOrdersVerifyDomainOwnershipValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify domain ownership for this certificate order (asynchronously)
     * 
     * @param resourceGroupName Azure resource group name (required)
     * @param name Certificate order name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificateOrdersVerifyDomainOwnershipAsync(String resourceGroupName, String name, String subscriptionId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificateOrdersVerifyDomainOwnershipValidateBeforeCall(resourceGroupName, name, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
