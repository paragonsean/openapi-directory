/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.SourceControl;
import org.openapitools.client.model.SourceControlCollection;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProviderApi
 */
@Disabled
public class ProviderApiTest {

    private final ProviderApi api = new ProviderApi();

    /**
     * Gets publishing user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerGetPublishingUserTest() throws ApiException {
        String apiVersion = null;
        User response = api.providerGetPublishingUser(apiVersion);
        // TODO: test validations
    }

    /**
     * Gets source control token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerGetSourceControlTest() throws ApiException {
        String sourceControlType = null;
        String apiVersion = null;
        SourceControl response = api.providerGetSourceControl(sourceControlType, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the source controls available for Azure websites
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerGetSourceControlsTest() throws ApiException {
        String apiVersion = null;
        SourceControlCollection response = api.providerGetSourceControls(apiVersion);
        // TODO: test validations
    }

    /**
     * Updates publishing user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerUpdatePublishingUserTest() throws ApiException {
        String apiVersion = null;
        User requestMessage = null;
        User response = api.providerUpdatePublishingUser(apiVersion, requestMessage);
        // TODO: test validations
    }

    /**
     * Updates source control token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerUpdateSourceControlTest() throws ApiException {
        String sourceControlType = null;
        String apiVersion = null;
        SourceControl requestMessage = null;
        SourceControl response = api.providerUpdateSourceControl(sourceControlType, apiVersion, requestMessage);
        // TODO: test validations
    }

}
