/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Certificate;
import org.openapitools.client.model.CertificateCollection;
import org.openapitools.client.model.Csr;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificatesApi
 */
@Disabled
public class CertificatesApiTest {

    private final CertificatesApi api = new CertificatesApi();

    /**
     * Creates or modifies an existing certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesCreateOrUpdateCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Certificate certificateEnvelope = null;
        Certificate response = api.certificatesCreateOrUpdateCertificate(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope);
        // TODO: test validations
    }

    /**
     * Creates or modifies an existing certificate signing request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesCreateOrUpdateCsrTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Csr csrEnvelope = null;
        Csr response = api.certificatesCreateOrUpdateCsr(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope);
        // TODO: test validations
    }

    /**
     * Delete a certificate by name in a specified subscription and resourcegroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesDeleteCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.certificatesDeleteCertificate(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the certificate signing request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesDeleteCsrTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.certificatesDeleteCsr(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a certificate by certificate name for a subscription in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesGetCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Certificate response = api.certificatesGetCertificate(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get certificates for a subscription in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesGetCertificatesTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateCollection response = api.certificatesGetCertificates(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a certificate signing request by certificate name for a subscription in the specified resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesGetCsrTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Csr response = api.certificatesGetCsr(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the certificate signing requests for a subscription in the specified resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesGetCsrsTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<Csr> response = api.certificatesGetCsrs(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates or modifies an existing certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesUpdateCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Certificate certificateEnvelope = null;
        Certificate response = api.certificatesUpdateCertificate(resourceGroupName, name, subscriptionId, apiVersion, certificateEnvelope);
        // TODO: test validations
    }

    /**
     * Creates or modifies an existing certificate signing request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificatesUpdateCsrTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Csr csrEnvelope = null;
        Csr response = api.certificatesUpdateCsr(resourceGroupName, name, subscriptionId, apiVersion, csrEnvelope);
        // TODO: test validations
    }

}
