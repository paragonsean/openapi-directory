/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressResponse;
import org.openapitools.client.model.HostingEnvironment;
import org.openapitools.client.model.HostingEnvironmentCollection;
import org.openapitools.client.model.ManagedHostingEnvironment;
import org.openapitools.client.model.ServerFarmCollection;
import org.openapitools.client.model.SiteCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagedHostingEnvironmentsApi
 */
@Disabled
public class ManagedHostingEnvironmentsApiTest {

    private final ManagedHostingEnvironmentsApi api = new ManagedHostingEnvironmentsApi();

    /**
     * Create or update a managed hosting environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironment managedHostingEnvironmentEnvelope = null;
        HostingEnvironment response = api.managedHostingEnvironmentsCreateOrUpdateManagedHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, managedHostingEnvironmentEnvelope);
        // TODO: test validations
    }

    /**
     * Delete a managed hosting environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsDeleteManagedHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean forceDelete = null;
        Object response = api.managedHostingEnvironmentsDeleteManagedHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, forceDelete);
        // TODO: test validations
    }

    /**
     * Get properties of a managed hosting environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsGetManagedHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ManagedHostingEnvironment response = api.managedHostingEnvironmentsGetManagedHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get status of an operation on a managed hosting environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsGetManagedHostingEnvironmentOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.managedHostingEnvironmentsGetManagedHostingEnvironmentOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarmsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmCollection response = api.managedHostingEnvironmentsGetManagedHostingEnvironmentServerFarms(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all sites on the managed hosting environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsGetManagedHostingEnvironmentSitesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        SiteCollection response = api.managedHostingEnvironmentsGetManagedHostingEnvironmentSites(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        // TODO: test validations
    }

    /**
     * Get list of ip addresses assigned to a managed hosting environment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsGetManagedHostingEnvironmentVipsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AddressResponse response = api.managedHostingEnvironmentsGetManagedHostingEnvironmentVips(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all serverfarms (App Service Plans) on the managed hosting environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlansTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmCollection response = api.managedHostingEnvironmentsGetManagedHostingEnvironmentWebHostingPlans(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all managed hosting environments in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void managedHostingEnvironmentsGetManagedHostingEnvironmentsTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironmentCollection response = api.managedHostingEnvironmentsGetManagedHostingEnvironments(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
