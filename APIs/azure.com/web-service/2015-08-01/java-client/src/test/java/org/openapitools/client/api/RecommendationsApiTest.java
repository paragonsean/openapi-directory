/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Recommendation;
import org.openapitools.client.model.RecommendationRule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecommendationsApi
 */
@Disabled
public class RecommendationsApiTest {

    private final RecommendationsApi api = new RecommendationsApi();

    /**
     * Gets a list of recommendations associated with the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsGetRecommendationBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        Boolean featured = null;
        String $filter = null;
        List<Recommendation> response = api.recommendationsGetRecommendationBySubscription(subscriptionId, apiVersion, featured, $filter);
        // TODO: test validations
    }

    /**
     * Gets the list of past recommendations optionally specified by the time range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsGetRecommendationHistoryForSiteTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        String startTime = null;
        String endTime = null;
        List<Recommendation> response = api.recommendationsGetRecommendationHistoryForSite(resourceGroupName, siteName, subscriptionId, apiVersion, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Gets a list of recommendations associated with the specified web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsGetRecommendedRulesForSiteTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean featured = null;
        String siteSku = null;
        Integer numSlots = null;
        List<Recommendation> response = api.recommendationsGetRecommendedRulesForSite(resourceGroupName, siteName, subscriptionId, apiVersion, featured, siteSku, numSlots);
        // TODO: test validations
    }

    /**
     * Gets the detailed properties of the recommendation object for the specified web site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recommendationsGetRuleDetailsBySiteNameTest() throws ApiException {
        String resourceGroupName = null;
        String siteName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        RecommendationRule response = api.recommendationsGetRuleDetailsBySiteName(resourceGroupName, siteName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
