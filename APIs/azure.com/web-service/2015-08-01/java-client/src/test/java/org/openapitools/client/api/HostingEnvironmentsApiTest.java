/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressResponse;
import org.openapitools.client.model.CsmUsageQuotaCollection;
import org.openapitools.client.model.HostingEnvironment;
import org.openapitools.client.model.HostingEnvironmentCollection;
import org.openapitools.client.model.HostingEnvironmentDiagnostics;
import org.openapitools.client.model.MetricDefinition;
import org.openapitools.client.model.MetricDefinitionCollection;
import org.openapitools.client.model.ResourceMetricCollection;
import org.openapitools.client.model.ServerFarmCollection;
import org.openapitools.client.model.SiteCollection;
import org.openapitools.client.model.SkuInfoCollection;
import org.openapitools.client.model.StampCapacityCollection;
import org.openapitools.client.model.UsageCollection;
import org.openapitools.client.model.WorkerPool;
import org.openapitools.client.model.WorkerPoolCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HostingEnvironmentsApi
 */
@Disabled
public class HostingEnvironmentsApiTest {

    private final HostingEnvironmentsApi api = new HostingEnvironmentsApi();

    /**
     * Create or update a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsCreateOrUpdateHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironment hostingEnvironmentEnvelope = null;
        HostingEnvironment response = api.hostingEnvironmentsCreateOrUpdateHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, hostingEnvironmentEnvelope);
        // TODO: test validations
    }

    /**
     * Create or update a multiRole pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsCreateOrUpdateMultiRolePoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPool multiRolePoolEnvelope = null;
        WorkerPool response = api.hostingEnvironmentsCreateOrUpdateMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion, multiRolePoolEnvelope);
        // TODO: test validations
    }

    /**
     * Create or update a worker pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsCreateOrUpdateWorkerPoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPool workerPoolEnvelope = null;
        WorkerPool response = api.hostingEnvironmentsCreateOrUpdateWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, workerPoolEnvelope);
        // TODO: test validations
    }

    /**
     * Delete a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsDeleteHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean forceDelete = null;
        Object response = api.hostingEnvironmentsDeleteHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion, forceDelete);
        // TODO: test validations
    }

    /**
     * Get properties of hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironment response = api.hostingEnvironmentsGetHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get used, available, and total worker capacity for hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentCapacitiesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StampCapacityCollection response = api.hostingEnvironmentsGetHostingEnvironmentCapacities(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentDiagnosticsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<HostingEnvironmentDiagnostics> response = api.hostingEnvironmentsGetHostingEnvironmentDiagnostics(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get diagnostic information for hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentDiagnosticsItemTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String diagnosticsName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironmentDiagnostics response = api.hostingEnvironmentsGetHostingEnvironmentDiagnosticsItem(resourceGroupName, name, diagnosticsName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get global metric definitions of hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MetricDefinition response = api.hostingEnvironmentsGetHostingEnvironmentMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get global metrics of hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        ResourceMetricCollection response = api.hostingEnvironmentsGetHostingEnvironmentMetrics(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MetricDefinitionCollection response = api.hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentMultiRoleMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String startTime = null;
        String endTime = null;
        String timeGrain = null;
        Boolean details = null;
        String $filter = null;
        ResourceMetricCollection response = api.hostingEnvironmentsGetHostingEnvironmentMultiRoleMetrics(resourceGroupName, name, subscriptionId, apiVersion, startTime, endTime, timeGrain, details, $filter);
        // TODO: test validations
    }

    /**
     * Get usages for a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentMultiRoleUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        UsageCollection response = api.hostingEnvironmentsGetHostingEnvironmentMultiRoleUsages(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get status of an operation on a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.hostingEnvironmentsGetHostingEnvironmentOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all currently running operations on the hostingEnvironment (App Service Environment)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentOperationsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.hostingEnvironmentsGetHostingEnvironmentOperations(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentServerFarmsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmCollection response = api.hostingEnvironmentsGetHostingEnvironmentServerFarms(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all sites on the hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentSitesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        SiteCollection response = api.hostingEnvironmentsGetHostingEnvironmentSites(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        // TODO: test validations
    }

    /**
     * Get global usages of hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        CsmUsageQuotaCollection response = api.hostingEnvironmentsGetHostingEnvironmentUsages(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Get IP addresses assigned to the hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentVipsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        AddressResponse response = api.hostingEnvironmentsGetHostingEnvironmentVips(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all serverfarms (App Service Plans) on the hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentWebHostingPlansTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmCollection response = api.hostingEnvironmentsGetHostingEnvironmentWebHostingPlans(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        MetricDefinitionCollection response = api.hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricDefinitions(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentWebWorkerMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        ResourceMetricCollection response = api.hostingEnvironmentsGetHostingEnvironmentWebWorkerMetrics(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Get usages for a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentWebWorkerUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        UsageCollection response = api.hostingEnvironmentsGetHostingEnvironmentWebWorkerUsages(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all hostingEnvironments (App Service Environments) in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetHostingEnvironmentsTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironmentCollection response = api.hostingEnvironmentsGetHostingEnvironments(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get properties of a multiRole pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetMultiRolePoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPool response = api.hostingEnvironmentsGetMultiRolePool(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.hostingEnvironmentsGetMultiRolePoolInstanceMetricDefinitions(resourceGroupName, name, instance, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a specific instance of a multiRole pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetMultiRolePoolInstanceMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        Object response = api.hostingEnvironmentsGetMultiRolePoolInstanceMetrics(resourceGroupName, name, instance, subscriptionId, apiVersion, details);
        // TODO: test validations
    }

    /**
     * Get available skus for scaling a multiRole pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetMultiRolePoolSkusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SkuInfoCollection response = api.hostingEnvironmentsGetMultiRolePoolSkus(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all multi role pools
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetMultiRolePoolsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolCollection response = api.hostingEnvironmentsGetMultiRolePools(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get properties of a worker pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetWorkerPoolTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPool response = api.hostingEnvironmentsGetWorkerPool(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metric definitions for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.hostingEnvironmentsGetWorkerPoolInstanceMetricDefinitions(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get metrics for a specific instance of a worker pool of a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetWorkerPoolInstanceMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String instance = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        Object response = api.hostingEnvironmentsGetWorkerPoolInstanceMetrics(resourceGroupName, name, workerPoolName, instance, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Get available skus for scaling a worker pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetWorkerPoolSkusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        SkuInfoCollection response = api.hostingEnvironmentsGetWorkerPoolSkus(resourceGroupName, name, workerPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all worker pools
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsGetWorkerPoolsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        WorkerPoolCollection response = api.hostingEnvironmentsGetWorkerPools(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Reboots all machines in a hostingEnvironment (App Service Environment).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsRebootHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.hostingEnvironmentsRebootHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Resumes the hostingEnvironment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsResumeHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteCollection response = api.hostingEnvironmentsResumeHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Suspends the hostingEnvironment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hostingEnvironmentsSuspendHostingEnvironmentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteCollection response = api.hostingEnvironmentsSuspendHostingEnvironment(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
