/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BackupItem;
import org.openapitools.client.model.BackupItemCollection;
import org.openapitools.client.model.BackupRequest;
import org.openapitools.client.model.ConnectionStringDictionary;
import org.openapitools.client.model.CsmPublishingProfileOptions;
import org.openapitools.client.model.CsmSiteRecoveryEntity;
import org.openapitools.client.model.CsmSlotEntity;
import org.openapitools.client.model.CsmUsageQuotaCollection;
import org.openapitools.client.model.DeletedSiteCollection;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.DeploymentCollection;
import java.io.File;
import org.openapitools.client.model.HostNameBinding;
import org.openapitools.client.model.HostNameBindingCollection;
import org.openapitools.client.model.MetricDefinitionCollection;
import org.openapitools.client.model.NetworkFeatures;
import org.openapitools.client.model.PremierAddOnRequest;
import org.openapitools.client.model.RelayServiceConnectionEntity;
import org.openapitools.client.model.ResourceMetricCollection;
import org.openapitools.client.model.RestoreRequest;
import org.openapitools.client.model.RestoreResponse;
import org.openapitools.client.model.Site;
import org.openapitools.client.model.SiteAuthSettings;
import org.openapitools.client.model.SiteCloneability;
import org.openapitools.client.model.SiteCollection;
import org.openapitools.client.model.SiteConfig;
import org.openapitools.client.model.SiteInstanceCollection;
import org.openapitools.client.model.SiteLogsConfig;
import org.openapitools.client.model.SiteSourceControl;
import org.openapitools.client.model.SlotConfigNamesResource;
import org.openapitools.client.model.SlotDifferenceCollection;
import org.openapitools.client.model.StringDictionary;
import org.openapitools.client.model.User;
import org.openapitools.client.model.VnetGateway;
import org.openapitools.client.model.VnetInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SitesApi
 */
@Disabled
public class SitesApiTest {

    private final SitesApi api = new SitesApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesAddSitePremierAddOnTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOnRequest premierAddOn = null;
        Object response = api.sitesAddSitePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion, premierAddOn);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesAddSitePremierAddOnSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        PremierAddOnRequest premierAddOn = null;
        Object response = api.sitesAddSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion, premierAddOn);
        // TODO: test validations
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesApplySlotConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        Object response = api.sitesApplySlotConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Applies the configuration settings from the target slot onto the current slot
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesApplySlotConfigToProductionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        Object response = api.sitesApplySlotConfigToProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Creates web app backup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesBackupSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.sitesBackupSite(resourceGroupName, name, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Creates web app backup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesBackupSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.sitesBackupSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Create a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment deployment = null;
        Deployment response = api.sitesCreateDeployment(resourceGroupName, name, id, subscriptionId, apiVersion, deployment);
        // TODO: test validations
    }

    /**
     * Create a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment deployment = null;
        Deployment response = api.sitesCreateDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion, deployment);
        // TODO: test validations
    }

    /**
     * Create a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateInstanceDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment deployment = null;
        Deployment response = api.sitesCreateInstanceDeployment(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion, deployment);
        // TODO: test validations
    }

    /**
     * Create a deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateInstanceDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment deployment = null;
        Deployment response = api.sitesCreateInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion, deployment);
        // TODO: test validations
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Site siteEnvelope = null;
        String skipDnsRegistration = null;
        String skipCustomDomainVerification = null;
        String forceDnsRegistration = null;
        String ttlInSeconds = null;
        Site response = api.sitesCreateOrUpdateSite(resourceGroupName, name, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds);
        // TODO: test validations
    }

    /**
     * Update the configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfig siteConfig = null;
        SiteConfig response = api.sitesCreateOrUpdateSiteConfig(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Update the configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfig siteConfig = null;
        SiteConfig response = api.sitesCreateOrUpdateSiteConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Creates a web app hostname binding
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteHostNameBindingTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding hostNameBinding = null;
        HostNameBinding response = api.sitesCreateOrUpdateSiteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion, hostNameBinding);
        // TODO: test validations
    }

    /**
     * Creates a web app hostname binding
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteHostNameBindingSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding hostNameBinding = null;
        HostNameBinding response = api.sitesCreateOrUpdateSiteHostNameBindingSlot(resourceGroupName, name, hostName, slot, subscriptionId, apiVersion, hostNameBinding);
        // TODO: test validations
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.sitesCreateOrUpdateSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.sitesCreateOrUpdateSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Site siteEnvelope = null;
        String skipDnsRegistration = null;
        String skipCustomDomainVerification = null;
        String forceDnsRegistration = null;
        String ttlInSeconds = null;
        Site response = api.sitesCreateOrUpdateSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds);
        // TODO: test validations
    }

    /**
     * Update the source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.sitesCreateOrUpdateSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Update the source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.sitesCreateOrUpdateSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteVNETConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetInfo connectionEnvelope = null;
        VnetInfo response = api.sitesCreateOrUpdateSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteVNETConnectionGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetGateway connectionEnvelope = null;
        VnetGateway response = api.sitesCreateOrUpdateSiteVNETConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteVNETConnectionGatewaySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetGateway connectionEnvelope = null;
        VnetGateway response = api.sitesCreateOrUpdateSiteVNETConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesCreateOrUpdateSiteVNETConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetInfo connectionEnvelope = null;
        VnetInfo response = api.sitesCreateOrUpdateSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Deletes a backup from Azure Storage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteBackupTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItem response = api.sitesDeleteBackup(resourceGroupName, name, backupId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a backup from Azure Storage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteBackupSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItem response = api.sitesDeleteBackupSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteDeployment(resourceGroupName, name, id, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteInstanceDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteInstanceDeployment(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteInstanceDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String deleteMetrics = null;
        String deleteEmptyServerFarm = null;
        String skipDnsRegistration = null;
        String deleteAllSlots = null;
        Object response = api.sitesDeleteSite(resourceGroupName, name, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots);
        // TODO: test validations
    }

    /**
     * Deletes a host name binding
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteHostNameBindingTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a host name binding
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteHostNameBindingSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSitePremierAddOnTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSitePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSitePremierAddOnSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Removes the association to a BizTalk Hybrid Connection, identified by its entity name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        String deleteMetrics = null;
        String deleteEmptyServerFarm = null;
        String skipDnsRegistration = null;
        String deleteAllSlots = null;
        Object response = api.sitesDeleteSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, deleteAllSlots);
        // TODO: test validations
    }

    /**
     * Delete source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteVNETConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Removes the specified Virtual Network Connection association from this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDeleteSiteVNETConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesDeleteSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Discovers existing web app backups that can be restored
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDiscoverSiteRestoreTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        RestoreRequest response = api.sitesDiscoverSiteRestore(resourceGroupName, name, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Discovers existing web app backups that can be restored
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesDiscoverSiteRestoreSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        RestoreRequest response = api.sitesDiscoverSiteRestoreSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Generates new random app publishing password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGenerateNewSitePublishingPasswordTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGenerateNewSitePublishingPassword(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Generates new random app publishing password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGenerateNewSitePublishingPasswordSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGenerateNewSitePublishingPasswordSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets deleted web apps in subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetDeletedSitesTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        String includeSiteTypes = null;
        DeletedSiteCollection response = api.sitesGetDeletedSites(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes);
        // TODO: test validations
    }

    /**
     * Get the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.sitesGetDeployment(resourceGroupName, name, id, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.sitesGetDeploymentSlot(resourceGroupName, name, id, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetDeploymentsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeploymentCollection response = api.sitesGetDeployments(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetDeploymentsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeploymentCollection response = api.sitesGetDeploymentsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetInstanceDeploymentTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.sitesGetInstanceDeployment(resourceGroupName, name, id, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the deployment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetInstanceDeploymentSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String id = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Deployment response = api.sitesGetInstanceDeploymentSlot(resourceGroupName, name, id, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetInstanceDeploymentsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeploymentCollection response = api.sitesGetInstanceDeployments(resourceGroupName, name, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List deployments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetInstanceDeploymentsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String instanceId = null;
        String subscriptionId = null;
        String apiVersion = null;
        DeploymentCollection response = api.sitesGetInstanceDeploymentsSlot(resourceGroupName, name, slot, instanceId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get details of a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        Site response = api.sitesGetSite(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        // TODO: test validations
    }

    /**
     * Gets the backup configuration for a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteBackupConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest response = api.sitesGetSiteBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the backup configuration for a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteBackupConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest response = api.sitesGetSiteBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteBackupStatusTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItem response = api.sitesGetSiteBackupStatus(resourceGroupName, name, backupId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteBackupStatusSecretsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.sitesGetSiteBackupStatusSecrets(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Gets status of a web app backup that may be in progress, including secrets associated with the backup, such as the Azure Storage SAS URL. Also can be used to update the SAS URL for the backup if a new URL is passed in the request body.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteBackupStatusSecretsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupItem response = api.sitesGetSiteBackupStatusSecretsSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Gets status of a web app backup that may be in progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteBackupStatusSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItem response = api.sitesGetSiteBackupStatusSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the configuration of the web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfig response = api.sitesGetSiteConfig(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the configuration of the web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfig response = api.sitesGetSiteConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get web app binding for a hostname
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteHostNameBindingTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding response = api.sitesGetSiteHostNameBinding(resourceGroupName, name, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get web app binding for a hostname
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteHostNameBindingSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String hostName = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBinding response = api.sitesGetSiteHostNameBindingSlot(resourceGroupName, name, slot, hostName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get web app hostname bindings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteHostNameBindingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBindingCollection response = api.sitesGetSiteHostNameBindings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get web app hostname bindings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteHostNameBindingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        HostNameBindingCollection response = api.sitesGetSiteHostNameBindingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all instance of a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteInstanceIdentifiersTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteInstanceCollection response = api.sitesGetSiteInstanceIdentifiers(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all instance of a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteInstanceIdentifiersSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteInstanceCollection response = api.sitesGetSiteInstanceIdentifiersSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the web app logs configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteLogsConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig response = api.sitesGetSiteLogsConfig(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the web app logs configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteLogsConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig response = api.sitesGetSiteLogsConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets metric definitions for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteMetricDefinitionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MetricDefinitionCollection response = api.sitesGetSiteMetricDefinitions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets metric definitions for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteMetricDefinitionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        MetricDefinitionCollection response = api.sitesGetSiteMetricDefinitionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets metrics for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        ResourceMetricCollection response = api.sitesGetSiteMetrics(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Gets metrics for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteMetricsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        ResourceMetricCollection response = api.sitesGetSiteMetricsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteNetworkFeaturesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String view = null;
        String subscriptionId = null;
        String apiVersion = null;
        NetworkFeatures response = api.sitesGetSiteNetworkFeatures(resourceGroupName, name, view, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a view of all network features in use on this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteNetworkFeaturesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String view = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        NetworkFeatures response = api.sitesGetSiteNetworkFeaturesSlot(resourceGroupName, name, view, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the operation for a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSiteOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the operation for a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteOperationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSiteOperationSlot(resourceGroupName, name, operationId, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSitePremierAddOnTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSitePremierAddOn(resourceGroupName, name, premierAddOnName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSitePremierAddOnSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String premierAddOnName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSitePremierAddOnSlot(resourceGroupName, name, premierAddOnName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.sitesGetSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a BizTalk Hybrid Connection identified by its entity name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.sitesGetSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get details of a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        Site response = api.sitesGetSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, propertiesToInclude);
        // TODO: test validations
    }

    /**
     * Gets all the slots for a web apps
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteSlotsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        SiteCollection response = api.sitesGetSiteSlots(resourceGroupName, name, subscriptionId, apiVersion, propertiesToInclude);
        // TODO: test validations
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteSnapshotsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSiteSnapshots(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Returns all Snapshots to the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteSnapshotsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSiteSnapshotsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl response = api.sitesGetSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl response = api.sitesGetSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the quota usage numbers for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteUsagesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        CsmUsageQuotaCollection response = api.sitesGetSiteUsages(resourceGroupName, name, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Gets the quota usage numbers for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteUsagesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        CsmUsageQuotaCollection response = api.sitesGetSiteUsagesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, $filter);
        // TODO: test validations
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteVNETConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetInfo response = api.sitesGetSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a specific Virtual Network Connection associated with this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteVNETConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetInfo response = api.sitesGetSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteVNETConnectionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<VnetInfo> response = api.sitesGetSiteVNETConnections(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a list of all Virtual Network Connections associated with this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteVNETConnectionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<VnetInfo> response = api.sitesGetSiteVNETConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteVnetGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSiteVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves a Virtual Network connection gateway associated with this web app and virtual network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSiteVnetGatewaySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesGetSiteVnetGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the web apps for a subscription in the specified resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSitesTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        String propertiesToInclude = null;
        String includeSiteTypes = null;
        Boolean includeSlots = null;
        SiteCollection response = api.sitesGetSites(resourceGroupName, subscriptionId, apiVersion, propertiesToInclude, includeSiteTypes, includeSlots);
        // TODO: test validations
    }

    /**
     * Gets the names of application settings and connection string that remain with the slot during swap operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSlotConfigNamesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SlotConfigNamesResource response = api.sitesGetSlotConfigNames(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the difference in configuration settings between two web app slots
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSlotsDifferencesFromProductionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        SlotDifferenceCollection response = api.sitesGetSlotsDifferencesFromProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Get the difference in configuration settings between two web app slots
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetSlotsDifferencesSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        SlotDifferenceCollection response = api.sitesGetSlotsDifferencesSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesIsSiteCloneableTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteCloneability response = api.sitesIsSiteCloneable(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a new web app or modifies an existing web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesIsSiteCloneableSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteCloneability response = api.sitesIsSiteCloneableSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the application settings of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteAppSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.sitesListSiteAppSettings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the application settings of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteAppSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.sitesListSiteAppSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteAuthSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings response = api.sitesListSiteAuthSettings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Authentication / Authorization settings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteAuthSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings response = api.sitesListSiteAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all available backups for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteBackupsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItemCollection response = api.sitesListSiteBackups(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all available backups for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteBackupsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupItemCollection response = api.sitesListSiteBackupsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the connection strings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteConnectionStringsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary response = api.sitesListSiteConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the connection strings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteConnectionStringsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary response = api.sitesListSiteConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the web app meta data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteMetadataTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.sitesListSiteMetadata(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the web app meta data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteMetadataSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary response = api.sitesListSiteMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSitePremierAddOnsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesListSitePremierAddOns(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSitePremierAddOnsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesListSitePremierAddOnsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the web app publishing credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSitePublishingCredentialsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        User response = api.sitesListSitePublishingCredentials(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the web app publishing credentials
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSitePublishingCredentialsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        User response = api.sitesListSitePublishingCredentialsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the publishing profile for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSitePublishingProfileXmlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmPublishingProfileOptions options = null;
        File response = api.sitesListSitePublishingProfileXml(resourceGroupName, name, subscriptionId, apiVersion, options);
        // TODO: test validations
    }

    /**
     * Gets the publishing profile for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSitePublishingProfileXmlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmPublishingProfileOptions options = null;
        File response = api.sitesListSitePublishingProfileXmlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, options);
        // TODO: test validations
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteRelayServiceConnectionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.sitesListSiteRelayServiceConnections(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieves all BizTalk Hybrid Connections associated with this web app.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesListSiteRelayServiceConnectionsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity response = api.sitesListSiteRelayServiceConnectionsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Recovers a deleted web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesRecoverSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSiteRecoveryEntity recoveryEntity = null;
        Site response = api.sitesRecoverSite(resourceGroupName, name, subscriptionId, apiVersion, recoveryEntity);
        // TODO: test validations
    }

    /**
     * Recovers a deleted web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesRecoverSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSiteRecoveryEntity recoveryEntity = null;
        Site response = api.sitesRecoverSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, recoveryEntity);
        // TODO: test validations
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesResetProductionSlotConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesResetProductionSlotConfig(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Resets the configuration settings of the current slot if they were previously modified by calling ApplySlotConfig API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesResetSlotConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesResetSlotConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Restarts web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesRestartSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean softRestart = null;
        Boolean synchronous = null;
        Object response = api.sitesRestartSite(resourceGroupName, name, subscriptionId, apiVersion, softRestart, synchronous);
        // TODO: test validations
    }

    /**
     * Restarts web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesRestartSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean softRestart = null;
        Boolean synchronous = null;
        Object response = api.sitesRestartSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, softRestart, synchronous);
        // TODO: test validations
    }

    /**
     * Restores a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesRestoreSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        RestoreResponse response = api.sitesRestoreSite(resourceGroupName, name, backupId, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Restores a web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesRestoreSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String backupId = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RestoreRequest request = null;
        RestoreResponse response = api.sitesRestoreSiteSlot(resourceGroupName, name, backupId, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Starts web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesStartSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesStartSite(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Starts web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesStartSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesStartSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stops web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesStopSiteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesStopSite(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Stops web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesStopSiteSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesStopSiteSlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Swaps web app slots
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSwapSlotWithProductionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        Object response = api.sitesSwapSlotWithProduction(resourceGroupName, name, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * Swaps web app slots
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSwapSlotsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        CsmSlotEntity slotSwapEntity = null;
        Object response = api.sitesSwapSlotsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, slotSwapEntity);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSyncSiteRepositoryTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesSyncSiteRepository(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSyncSiteRepositorySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.sitesSyncSiteRepositorySlot(resourceGroupName, name, slot, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates the application settings of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteAppSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary appSettings = null;
        StringDictionary response = api.sitesUpdateSiteAppSettings(resourceGroupName, name, subscriptionId, apiVersion, appSettings);
        // TODO: test validations
    }

    /**
     * Updates the application settings of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteAppSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary appSettings = null;
        StringDictionary response = api.sitesUpdateSiteAppSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, appSettings);
        // TODO: test validations
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteAuthSettingsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings siteAuthSettings = null;
        SiteAuthSettings response = api.sitesUpdateSiteAuthSettings(resourceGroupName, name, subscriptionId, apiVersion, siteAuthSettings);
        // TODO: test validations
    }

    /**
     * Updates the Authentication / Authorization settings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteAuthSettingsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteAuthSettings siteAuthSettings = null;
        SiteAuthSettings response = api.sitesUpdateSiteAuthSettingsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteAuthSettings);
        // TODO: test validations
    }

    /**
     * Updates backup configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteBackupConfigurationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupRequest response = api.sitesUpdateSiteBackupConfiguration(resourceGroupName, name, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Updates backup configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteBackupConfigurationSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        BackupRequest request = null;
        BackupRequest response = api.sitesUpdateSiteBackupConfigurationSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Update the configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfig siteConfig = null;
        SiteConfig response = api.sitesUpdateSiteConfig(resourceGroupName, name, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Update the configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteConfig siteConfig = null;
        SiteConfig response = api.sitesUpdateSiteConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteConfig);
        // TODO: test validations
    }

    /**
     * Updates the connection strings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteConnectionStringsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary connectionStrings = null;
        ConnectionStringDictionary response = api.sitesUpdateSiteConnectionStrings(resourceGroupName, name, subscriptionId, apiVersion, connectionStrings);
        // TODO: test validations
    }

    /**
     * Updates the connection strings associated with web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteConnectionStringsSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionStringDictionary connectionStrings = null;
        ConnectionStringDictionary response = api.sitesUpdateSiteConnectionStringsSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, connectionStrings);
        // TODO: test validations
    }

    /**
     * Updates the meta data for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteLogsConfigTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig siteLogsConfig = null;
        SiteLogsConfig response = api.sitesUpdateSiteLogsConfig(resourceGroupName, name, subscriptionId, apiVersion, siteLogsConfig);
        // TODO: test validations
    }

    /**
     * Updates the meta data for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteLogsConfigSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteLogsConfig siteLogsConfig = null;
        SiteLogsConfig response = api.sitesUpdateSiteLogsConfigSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteLogsConfig);
        // TODO: test validations
    }

    /**
     * Updates the meta data for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteMetadataTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary metadata = null;
        StringDictionary response = api.sitesUpdateSiteMetadata(resourceGroupName, name, subscriptionId, apiVersion, metadata);
        // TODO: test validations
    }

    /**
     * Updates the meta data for web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteMetadataSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        StringDictionary metadata = null;
        StringDictionary response = api.sitesUpdateSiteMetadataSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, metadata);
        // TODO: test validations
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteRelayServiceConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.sitesUpdateSiteRelayServiceConnection(resourceGroupName, name, entityName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new association to a BizTalk Hybrid Connection, or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteRelayServiceConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String entityName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        RelayServiceConnectionEntity connectionEnvelope = null;
        RelayServiceConnectionEntity response = api.sitesUpdateSiteRelayServiceConnectionSlot(resourceGroupName, name, entityName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Update the source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteSourceControlTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.sitesUpdateSiteSourceControl(resourceGroupName, name, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Update the source control configuration of web app
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteSourceControlSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        SiteSourceControl siteSourceControl = null;
        SiteSourceControl response = api.sitesUpdateSiteSourceControlSlot(resourceGroupName, name, slot, subscriptionId, apiVersion, siteSourceControl);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteVNETConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetInfo connectionEnvelope = null;
        VnetInfo response = api.sitesUpdateSiteVNETConnection(resourceGroupName, name, vnetName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteVNETConnectionGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetGateway connectionEnvelope = null;
        VnetGateway response = api.sitesUpdateSiteVNETConnectionGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the Virtual Network Gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteVNETConnectionGatewaySlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetGateway connectionEnvelope = null;
        VnetGateway response = api.sitesUpdateSiteVNETConnectionGatewaySlot(resourceGroupName, name, vnetName, gatewayName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Adds a Virtual Network Connection or updates it&#39;s properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSiteVNETConnectionSlotTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String slot = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetInfo connectionEnvelope = null;
        VnetInfo response = api.sitesUpdateSiteVNETConnectionSlot(resourceGroupName, name, vnetName, slot, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Updates the names of application settings and connection string that remain with the slot during swap operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesUpdateSlotConfigNamesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        SlotConfigNamesResource slotConfigNames = null;
        SlotConfigNamesResource response = api.sitesUpdateSlotConfigNames(resourceGroupName, name, subscriptionId, apiVersion, slotConfigNames);
        // TODO: test validations
    }

}
