/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateEmail;
import org.openapitools.client.model.CertificateOrder;
import org.openapitools.client.model.CertificateOrderAction;
import org.openapitools.client.model.CertificateOrderCertificate;
import org.openapitools.client.model.CertificateOrderCertificateCollection;
import org.openapitools.client.model.CertificateOrderCollection;
import org.openapitools.client.model.ReissueCertificateOrderRequest;
import org.openapitools.client.model.RenewCertificateOrderRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificateOrdersApi
 */
@Disabled
public class CertificateOrdersApiTest {

    private final CertificateOrdersApi api = new CertificateOrdersApi();

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersCreateOrUpdateCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrderCertificate keyVaultCertificate = null;
        CertificateOrderCertificate response = api.certificateOrdersCreateOrUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        // TODO: test validations
    }

    /**
     * Create or update a certificate purchase order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersCreateOrUpdateCertificateOrderTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrder certificateDistinguishedName = null;
        CertificateOrder response = api.certificateOrdersCreateOrUpdateCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName);
        // TODO: test validations
    }

    /**
     * Deletes the certificate associated with the certificate order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersDeleteCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.certificateOrdersDeleteCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an existing certificate order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersDeleteCertificateOrderTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.certificateOrdersDeleteCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get certificate associated with the certificate order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersGetCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrderCertificate response = api.certificateOrdersGetCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a certificate order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersGetCertificateOrderTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrder response = api.certificateOrdersGetCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get certificate orders in a resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersGetCertificateOrdersTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrderCollection response = api.certificateOrdersGetCertificateOrders(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all certificates associated with a certificate order (only one certificate can be associated with an order at a time)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersGetCertificatesTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrderCertificateCollection response = api.certificateOrdersGetCertificates(resourceGroupName, certificateOrderName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Reissue an existing certificate order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersReissueCertificateOrderTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ReissueCertificateOrderRequest reissueCertificateOrderRequest = null;
        Object response = api.certificateOrdersReissueCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, reissueCertificateOrderRequest);
        // TODO: test validations
    }

    /**
     * Renew an existing certificate order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersRenewCertificateOrderTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        RenewCertificateOrderRequest renewCertificateOrderRequest = null;
        Object response = api.certificateOrdersRenewCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, renewCertificateOrderRequest);
        // TODO: test validations
    }

    /**
     * Resend certificate email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersResendCertificateEmailTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.certificateOrdersResendCertificateEmail(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieve the list of certificate actions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersRetrieveCertificateActionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<CertificateOrderAction> response = api.certificateOrdersRetrieveCertificateActions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieve email history
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersRetrieveCertificateEmailHistoryTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<CertificateEmail> response = api.certificateOrdersRetrieveCertificateEmailHistory(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Associates a Key Vault secret to a certificate store that will be used for storing the certificate once it&#39;s ready
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersUpdateCertificateTest() throws ApiException {
        String resourceGroupName = null;
        String certificateOrderName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrderCertificate keyVaultCertificate = null;
        CertificateOrderCertificate response = api.certificateOrdersUpdateCertificate(resourceGroupName, certificateOrderName, name, subscriptionId, apiVersion, keyVaultCertificate);
        // TODO: test validations
    }

    /**
     * Create or update a certificate purchase order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersUpdateCertificateOrderTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        CertificateOrder certificateDistinguishedName = null;
        CertificateOrder response = api.certificateOrdersUpdateCertificateOrder(resourceGroupName, name, subscriptionId, apiVersion, certificateDistinguishedName);
        // TODO: test validations
    }

    /**
     * Verify domain ownership for this certificate order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateOrdersVerifyDomainOwnershipTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.certificateOrdersVerifyDomainOwnership(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
