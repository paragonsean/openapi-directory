/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DomainAvailablilityCheckResult;
import org.openapitools.client.model.DomainCollection;
import org.openapitools.client.model.DomainControlCenterSsoRequest;
import org.openapitools.client.model.DomainRecommendationSearchParameters;
import org.openapitools.client.model.DomainRegistrationInput;
import org.openapitools.client.model.NameIdentifier;
import org.openapitools.client.model.NameIdentifierCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GlobalDomainRegistrationApi
 */
@Disabled
public class GlobalDomainRegistrationApiTest {

    private final GlobalDomainRegistrationApi api = new GlobalDomainRegistrationApi();

    /**
     * Checks if a domain is available for registration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalDomainRegistrationCheckDomainAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        NameIdentifier identifier = null;
        DomainAvailablilityCheckResult response = api.globalDomainRegistrationCheckDomainAvailability(subscriptionId, apiVersion, identifier);
        // TODO: test validations
    }

    /**
     * Lists all domains in a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalDomainRegistrationGetAllDomainsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainCollection response = api.globalDomainRegistrationGetAllDomains(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Generates a single sign on request for domain management portal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalDomainRegistrationGetDomainControlCenterSsoRequestTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainControlCenterSsoRequest response = api.globalDomainRegistrationGetDomainControlCenterSsoRequest(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists domain recommendations based on keywords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalDomainRegistrationListDomainRecommendationsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainRecommendationSearchParameters parameters = null;
        NameIdentifierCollection response = api.globalDomainRegistrationListDomainRecommendations(subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Validates domain registration information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalDomainRegistrationValidateDomainPurchaseInformationTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        DomainRegistrationInput domainRegistrationInput = null;
        Object response = api.globalDomainRegistrationValidateDomainPurchaseInformation(subscriptionId, apiVersion, domainRegistrationInput);
        // TODO: test validations
    }

}
