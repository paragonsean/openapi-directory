/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.MetricDefinitionCollection;
import org.openapitools.client.model.ResourceMetricCollection;
import org.openapitools.client.model.ServerFarmCollection;
import org.openapitools.client.model.ServerFarmWithRichSku;
import org.openapitools.client.model.SiteCollection;
import org.openapitools.client.model.VnetGateway;
import org.openapitools.client.model.VnetInfo;
import org.openapitools.client.model.VnetRoute;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServerFarmsApi
 */
@Disabled
public class ServerFarmsApiTest {

    private final ServerFarmsApi api = new ServerFarmsApi();

    /**
     * Creates or updates an App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsCreateOrUpdateServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmWithRichSku serverFarmEnvelope = null;
        Boolean allowPendingState = null;
        ServerFarmWithRichSku response = api.serverFarmsCreateOrUpdateServerFarm(resourceGroupName, name, subscriptionId, apiVersion, serverFarmEnvelope, allowPendingState);
        // TODO: test validations
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsCreateOrUpdateVnetRouteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetRoute route = null;
        VnetRoute response = api.serverFarmsCreateOrUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        // TODO: test validations
    }

    /**
     * Deletes a App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsDeleteServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.serverFarmsDeleteServerFarm(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes an existing route for a vnet in an app service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsDeleteVnetRouteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.serverFarmsDeleteVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a specific route associated with a vnet, in an app service plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetRouteForVnetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<VnetRoute> response = api.serverFarmsGetRouteForVnet(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of all routes associated with a vnet, in an app service plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetRoutesForVnetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<VnetRoute> response = api.serverFarmsGetRoutesForVnet(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets specified App Service Plan in a resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmWithRichSku response = api.serverFarmsGetServerFarm(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List of metrics that can be queried for an App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetServerFarmMetricDefintionsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        MetricDefinitionCollection response = api.serverFarmsGetServerFarmMetricDefintions(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Queries for App Service Plan metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetServerFarmMetricsTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean details = null;
        String $filter = null;
        ResourceMetricCollection response = api.serverFarmsGetServerFarmMetrics(resourceGroupName, name, subscriptionId, apiVersion, details, $filter);
        // TODO: test validations
    }

    /**
     * Gets a server farm operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetServerFarmOperationTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String operationId = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmWithRichSku response = api.serverFarmsGetServerFarmOperation(resourceGroupName, name, operationId, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets list of Apps associated with an App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetServerFarmSitesTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        String $skipToken = null;
        String $filter = null;
        String $top = null;
        SiteCollection response = api.serverFarmsGetServerFarmSites(resourceGroupName, name, subscriptionId, apiVersion, $skipToken, $filter, $top);
        // TODO: test validations
    }

    /**
     * Gets the vnet gateway.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetServerFarmVnetGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetGateway response = api.serverFarmsGetServerFarmVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets collection of App Service Plans in a resource group for a given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetServerFarmsTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ServerFarmCollection response = api.serverFarmsGetServerFarms(resourceGroupName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a vnet associated with an App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetVnetFromServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetInfo response = api.serverFarmsGetVnetFromServerFarm(resourceGroupName, name, vnetName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets list of VNets associated with App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsGetVnetsForServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        List<VnetInfo> response = api.serverFarmsGetVnetsForServerFarm(resourceGroupName, name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Submit a reboot request for a worker machine in the specified server farm
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsRebootWorkerForServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String workerName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.serverFarmsRebootWorkerForServerFarm(resourceGroupName, name, workerName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Restarts web apps in a specified App Service Plan
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsRestartSitesForServerFarmTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Boolean softRestart = null;
        Object response = api.serverFarmsRestartSitesForServerFarm(resourceGroupName, name, subscriptionId, apiVersion, softRestart);
        // TODO: test validations
    }

    /**
     * Updates the vnet gateway
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsUpdateServerFarmVnetGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String gatewayName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetGateway connectionEnvelope = null;
        VnetGateway response = api.serverFarmsUpdateServerFarmVnetGateway(resourceGroupName, name, vnetName, gatewayName, subscriptionId, apiVersion, connectionEnvelope);
        // TODO: test validations
    }

    /**
     * Creates a new route or updates an existing route for a vnet in an app service plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serverFarmsUpdateVnetRouteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String vnetName = null;
        String routeName = null;
        String subscriptionId = null;
        String apiVersion = null;
        VnetRoute route = null;
        VnetRoute response = api.serverFarmsUpdateVnetRoute(resourceGroupName, name, vnetName, routeName, subscriptionId, apiVersion, route);
        // TODO: test validations
    }

}
