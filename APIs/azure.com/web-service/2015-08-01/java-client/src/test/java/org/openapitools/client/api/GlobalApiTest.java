/*
 * WebSite Management Client
 * Use these APIs to manage Azure Websites resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://msdn.microsoft.com/en-us/library/azure/dn790557.aspx.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateCollection;
import org.openapitools.client.model.ClassicMobileServiceCollection;
import org.openapitools.client.model.GeoRegionCollection;
import org.openapitools.client.model.HostingEnvironmentCollection;
import org.openapitools.client.model.ManagedHostingEnvironmentCollection;
import org.openapitools.client.model.ResourceNameAvailability;
import org.openapitools.client.model.ResourceNameAvailabilityRequest;
import org.openapitools.client.model.ServerFarmCollection;
import org.openapitools.client.model.SiteCollection;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GlobalApi
 */
@Disabled
public class GlobalApiTest {

    private final GlobalApi api = new GlobalApi();

    /**
     * Check if resource name is available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalCheckNameAvailabilityTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ResourceNameAvailabilityRequest request = null;
        ResourceNameAvailability response = api.globalCheckNameAvailability(subscriptionId, apiVersion, request);
        // TODO: test validations
    }

    /**
     * Get all certificates for a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetAllCertificatesTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        CertificateCollection response = api.globalGetAllCertificates(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all mobile services for a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetAllClassicMobileServicesTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ClassicMobileServiceCollection response = api.globalGetAllClassicMobileServices(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all hostingEnvironments (App Service Environment) for a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetAllHostingEnvironmentsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        HostingEnvironmentCollection response = api.globalGetAllHostingEnvironments(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all managed hosting environments for a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetAllManagedHostingEnvironmentsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ManagedHostingEnvironmentCollection response = api.globalGetAllManagedHostingEnvironments(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all App Service Plans for a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetAllServerFarmsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        Boolean detailed = null;
        ServerFarmCollection response = api.globalGetAllServerFarms(subscriptionId, apiVersion, detailed);
        // TODO: test validations
    }

    /**
     * Gets all Web Apps for a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetAllSitesTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        SiteCollection response = api.globalGetAllSites(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets list of available geo regions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetSubscriptionGeoRegionsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String sku = null;
        Boolean linuxWorkersEnabled = null;
        GeoRegionCollection response = api.globalGetSubscriptionGeoRegions(subscriptionId, apiVersion, sku, linuxWorkersEnabled);
        // TODO: test validations
    }

    /**
     * Gets publishing credentials for the subscription owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalGetSubscriptionPublishingCredentialsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        User response = api.globalGetSubscriptionPublishingCredentials(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Whether hosting environment name is available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalIsHostingEnvironmentNameAvailableTest() throws ApiException {
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.globalIsHostingEnvironmentNameAvailable(name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Whether hosting environment name is available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalIsHostingEnvironmentWithLegacyNameAvailableTest() throws ApiException {
        String name = null;
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.globalIsHostingEnvironmentWithLegacyNameAvailable(name, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List premier add on offers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalListPremierAddOnOffersTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        Object response = api.globalListPremierAddOnOffers(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates publishing credentials for the subscription owner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void globalUpdateSubscriptionPublishingCredentialsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        User requestMessage = null;
        User response = api.globalUpdateSubscriptionPublishingCredentials(subscriptionId, apiVersion, requestMessage);
        // TODO: test validations
    }

}
