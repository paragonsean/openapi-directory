/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaGraphSink from './MediaGraphSink';
import MediaGraphSource from './MediaGraphSource';

/**
 * The MediaGraphProperties model module.
 * @module model/MediaGraphProperties
 * @version 2019-09-01-preview
 */
class MediaGraphProperties {
    /**
     * Constructs a new <code>MediaGraphProperties</code>.
     * Class for Media Graph properties
     * @alias module:model/MediaGraphProperties
     * @param sinks {Array.<module:model/MediaGraphSink>} Media Graph sinks
     * @param sources {Array.<module:model/MediaGraphSource>} Media Graph sources
     */
    constructor(sinks, sources) { 
        
        MediaGraphProperties.initialize(this, sinks, sources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sinks, sources) { 
        obj['sinks'] = sinks;
        obj['sources'] = sources;
    }

    /**
     * Constructs a <code>MediaGraphProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaGraphProperties} obj Optional instance to populate.
     * @return {module:model/MediaGraphProperties} The populated <code>MediaGraphProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaGraphProperties();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('sinks')) {
                obj['sinks'] = ApiClient.convertToType(data['sinks'], [MediaGraphSink]);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [MediaGraphSource]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaGraphProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaGraphProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MediaGraphProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['sinks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sinks'])) {
                throw new Error("Expected the field `sinks` to be an array in the JSON data but got " + data['sinks']);
            }
            // validate the optional field `sinks` (array)
            for (const item of data['sinks']) {
                MediaGraphSink.validateJSON(item);
            };
        }
        if (data['sources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sources'])) {
                throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
            }
            // validate the optional field `sources` (array)
            for (const item of data['sources']) {
                MediaGraphSource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

MediaGraphProperties.RequiredProperties = ["sinks", "sources"];

/**
 * Date the Media Graph was created
 * @member {Date} created
 */
MediaGraphProperties.prototype['created'] = undefined;

/**
 * Media Graph  description
 * @member {String} description
 */
MediaGraphProperties.prototype['description'] = undefined;

/**
 * Date the Media Graph was last modified
 * @member {Date} lastModified
 */
MediaGraphProperties.prototype['lastModified'] = undefined;

/**
 * Media Graph sinks
 * @member {Array.<module:model/MediaGraphSink>} sinks
 */
MediaGraphProperties.prototype['sinks'] = undefined;

/**
 * Media Graph sources
 * @member {Array.<module:model/MediaGraphSource>} sources
 */
MediaGraphProperties.prototype['sources'] = undefined;

/**
 * Media Graph state
 * @member {module:model/MediaGraphProperties.StateEnum} state
 */
MediaGraphProperties.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
MediaGraphProperties['StateEnum'] = {

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Starting"
     * @const
     */
    "Starting": "Starting",

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped",

    /**
     * value: "Stopping"
     * @const
     */
    "Stopping": "Stopping"
};



export default MediaGraphProperties;

