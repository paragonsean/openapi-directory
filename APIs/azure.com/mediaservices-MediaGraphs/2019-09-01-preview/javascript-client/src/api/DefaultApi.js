/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import MediaGraph from '../model/MediaGraph';
import MediaGraphCollection from '../model/MediaGraphCollection';
import MediaGraphOperationStatus from '../model/MediaGraphOperationStatus';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-09-01-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mediaGraphsCreateOrUpdate operation.
     * @callback module:api/DefaultApi~mediaGraphsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaGraph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a Media Graph
     * Create or update a Media Graph in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} mediaGraphName The Media Graph name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:model/MediaGraph} parameters The request parameters
     * @param {module:api/DefaultApi~mediaGraphsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaGraph}
     */
    mediaGraphsCreateOrUpdate(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaGraphsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaGraphsCreateOrUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaGraphsCreateOrUpdate");
      }
      // verify the required parameter 'mediaGraphName' is set
      if (mediaGraphName === undefined || mediaGraphName === null) {
        throw new Error("Missing the required parameter 'mediaGraphName' when calling mediaGraphsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaGraphsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling mediaGraphsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'mediaGraphName': mediaGraphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MediaGraph;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGraphsDelete operation.
     * @callback module:api/DefaultApi~mediaGraphsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Media Graph
     * Deletes a Media Graph in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} mediaGraphName The Media Graph name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaGraphsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaGraphsDelete(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaGraphsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaGraphsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaGraphsDelete");
      }
      // verify the required parameter 'mediaGraphName' is set
      if (mediaGraphName === undefined || mediaGraphName === null) {
        throw new Error("Missing the required parameter 'mediaGraphName' when calling mediaGraphsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaGraphsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'mediaGraphName': mediaGraphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGraphsGet operation.
     * @callback module:api/DefaultApi~mediaGraphsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaGraph} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Media Graph
     * Get the details of a Media Graph in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} mediaGraphName The Media Graph name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaGraphsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaGraph}
     */
    mediaGraphsGet(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaGraphsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaGraphsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaGraphsGet");
      }
      // verify the required parameter 'mediaGraphName' is set
      if (mediaGraphName === undefined || mediaGraphName === null) {
        throw new Error("Missing the required parameter 'mediaGraphName' when calling mediaGraphsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaGraphsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'mediaGraphName': mediaGraphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaGraph;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGraphsList operation.
     * @callback module:api/DefaultApi~mediaGraphsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaGraphCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Media Graphs
     * Lists Media Graphs in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n.
     * @param {module:api/DefaultApi~mediaGraphsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaGraphCollection}
     */
    mediaGraphsList(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaGraphsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaGraphsList");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaGraphsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaGraphsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaGraphCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGraphsStart operation.
     * @callback module:api/DefaultApi~mediaGraphsStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a Media Graph
     * Start a Media Graph in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} mediaGraphName The Media Graph name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaGraphsStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaGraphsStart(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaGraphsStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaGraphsStart");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaGraphsStart");
      }
      // verify the required parameter 'mediaGraphName' is set
      if (mediaGraphName === undefined || mediaGraphName === null) {
        throw new Error("Missing the required parameter 'mediaGraphName' when calling mediaGraphsStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaGraphsStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'mediaGraphName': mediaGraphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mediaGraphsStop operation.
     * @callback module:api/DefaultApi~mediaGraphsStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a Media Graph
     * Stop a Media Graph in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} mediaGraphName The Media Graph name.
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~mediaGraphsStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mediaGraphsStop(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mediaGraphsStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mediaGraphsStop");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling mediaGraphsStop");
      }
      // verify the required parameter 'mediaGraphName' is set
      if (mediaGraphName === undefined || mediaGraphName === null) {
        throw new Error("Missing the required parameter 'mediaGraphName' when calling mediaGraphsStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mediaGraphsStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'mediaGraphName': mediaGraphName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationResultsGet operation.
     * @callback module:api/DefaultApi~operationResultsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the operation result
     * Get the operation result of a Media Graph in the Media Services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} mediaGraphName The Media Graph name.
     * @param {String} operationId The operation ID
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~operationResultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    operationResultsGet(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling operationResultsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling operationResultsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling operationResultsGet");
      }
      // verify the required parameter 'mediaGraphName' is set
      if (mediaGraphName === undefined || mediaGraphName === null) {
        throw new Error("Missing the required parameter 'mediaGraphName' when calling operationResultsGet");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling operationResultsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationResultsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'mediaGraphName': mediaGraphName,
        'operationId': operationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/operationResults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsStatusGet operation.
     * @callback module:api/DefaultApi~operationsStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MediaGraphOperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the operation status
     * Get the operation status of a Media Graph in the media services account
     * @param {String} subscriptionId The unique identifier for a Microsoft Azure subscription.
     * @param {String} resourceGroupName The name of the resource group within the Azure subscription.
     * @param {String} accountName The Media Services account name.
     * @param {String} mediaGraphName The Media Graph name.
     * @param {String} operationId The operation ID
     * @param {String} apiVersion The Version of the API to be used with the client request.
     * @param {module:api/DefaultApi~operationsStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MediaGraphOperationStatus}
     */
    operationsStatusGet(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling operationsStatusGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling operationsStatusGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling operationsStatusGet");
      }
      // verify the required parameter 'mediaGraphName' is set
      if (mediaGraphName === undefined || mediaGraphName === null) {
        throw new Error("Missing the required parameter 'mediaGraphName' when calling operationsStatusGet");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling operationsStatusGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsStatusGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'mediaGraphName': mediaGraphName,
        'operationId': operationId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MediaGraphOperationStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/operationsStatus/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
