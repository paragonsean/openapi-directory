# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_graph_sink import MediaGraphSink
from openapi_server.models.media_graph_source import MediaGraphSource
from openapi_server import util


class MediaGraphProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, description: str=None, last_modified: datetime=None, sinks: List[MediaGraphSink]=None, sources: List[MediaGraphSource]=None, state: str=None):
        """MediaGraphProperties - a model defined in OpenAPI

        :param created: The created of this MediaGraphProperties.
        :param description: The description of this MediaGraphProperties.
        :param last_modified: The last_modified of this MediaGraphProperties.
        :param sinks: The sinks of this MediaGraphProperties.
        :param sources: The sources of this MediaGraphProperties.
        :param state: The state of this MediaGraphProperties.
        """
        self.openapi_types = {
            'created': datetime,
            'description': str,
            'last_modified': datetime,
            'sinks': List[MediaGraphSink],
            'sources': List[MediaGraphSource],
            'state': str
        }

        self.attribute_map = {
            'created': 'created',
            'description': 'description',
            'last_modified': 'lastModified',
            'sinks': 'sinks',
            'sources': 'sources',
            'state': 'state'
        }

        self._created = created
        self._description = description
        self._last_modified = last_modified
        self._sinks = sinks
        self._sources = sources
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaGraphProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaGraphProperties of this MediaGraphProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this MediaGraphProperties.

        Date the Media Graph was created

        :return: The created of this MediaGraphProperties.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this MediaGraphProperties.

        Date the Media Graph was created

        :param created: The created of this MediaGraphProperties.
        :type created: datetime
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this MediaGraphProperties.

        Media Graph  description

        :return: The description of this MediaGraphProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MediaGraphProperties.

        Media Graph  description

        :param description: The description of this MediaGraphProperties.
        :type description: str
        """

        self._description = description

    @property
    def last_modified(self):
        """Gets the last_modified of this MediaGraphProperties.

        Date the Media Graph was last modified

        :return: The last_modified of this MediaGraphProperties.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this MediaGraphProperties.

        Date the Media Graph was last modified

        :param last_modified: The last_modified of this MediaGraphProperties.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def sinks(self):
        """Gets the sinks of this MediaGraphProperties.

        Media Graph sinks

        :return: The sinks of this MediaGraphProperties.
        :rtype: List[MediaGraphSink]
        """
        return self._sinks

    @sinks.setter
    def sinks(self, sinks):
        """Sets the sinks of this MediaGraphProperties.

        Media Graph sinks

        :param sinks: The sinks of this MediaGraphProperties.
        :type sinks: List[MediaGraphSink]
        """
        if sinks is None:
            raise ValueError("Invalid value for `sinks`, must not be `None`")

        self._sinks = sinks

    @property
    def sources(self):
        """Gets the sources of this MediaGraphProperties.

        Media Graph sources

        :return: The sources of this MediaGraphProperties.
        :rtype: List[MediaGraphSource]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this MediaGraphProperties.

        Media Graph sources

        :param sources: The sources of this MediaGraphProperties.
        :type sources: List[MediaGraphSource]
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources

    @property
    def state(self):
        """Gets the state of this MediaGraphProperties.

        Media Graph state

        :return: The state of this MediaGraphProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MediaGraphProperties.

        Media Graph state

        :param state: The state of this MediaGraphProperties.
        :type state: str
        """
        allowed_values = ["Running", "Starting", "Stopped", "Stopping"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
