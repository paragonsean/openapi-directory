# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_graph_source import MediaGraphSource
from openapi_server.models.media_graph_user_credentials import MediaGraphUserCredentials
from openapi_server import util


class MediaGraphRtspSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credentials: MediaGraphUserCredentials=None, rtsp_url: str=None, odata_type: str=None, name: str=None):
        """MediaGraphRtspSource - a model defined in OpenAPI

        :param credentials: The credentials of this MediaGraphRtspSource.
        :param rtsp_url: The rtsp_url of this MediaGraphRtspSource.
        :param odata_type: The odata_type of this MediaGraphRtspSource.
        :param name: The name of this MediaGraphRtspSource.
        """
        self.openapi_types = {
            'credentials': MediaGraphUserCredentials,
            'rtsp_url': str,
            'odata_type': str,
            'name': str
        }

        self.attribute_map = {
            'credentials': 'credentials',
            'rtsp_url': 'rtspUrl',
            'odata_type': '@odata.type',
            'name': 'name'
        }

        self._credentials = credentials
        self._rtsp_url = rtsp_url
        self._odata_type = odata_type
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaGraphRtspSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaGraphRtspSource of this MediaGraphRtspSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credentials(self):
        """Gets the credentials of this MediaGraphRtspSource.


        :return: The credentials of this MediaGraphRtspSource.
        :rtype: MediaGraphUserCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this MediaGraphRtspSource.


        :param credentials: The credentials of this MediaGraphRtspSource.
        :type credentials: MediaGraphUserCredentials
        """

        self._credentials = credentials

    @property
    def rtsp_url(self):
        """Gets the rtsp_url of this MediaGraphRtspSource.

        RTSP URL

        :return: The rtsp_url of this MediaGraphRtspSource.
        :rtype: str
        """
        return self._rtsp_url

    @rtsp_url.setter
    def rtsp_url(self, rtsp_url):
        """Sets the rtsp_url of this MediaGraphRtspSource.

        RTSP URL

        :param rtsp_url: The rtsp_url of this MediaGraphRtspSource.
        :type rtsp_url: str
        """
        if rtsp_url is None:
            raise ValueError("Invalid value for `rtsp_url`, must not be `None`")

        self._rtsp_url = rtsp_url

    @property
    def odata_type(self):
        """Gets the odata_type of this MediaGraphRtspSource.

        The discriminator for derived types.

        :return: The odata_type of this MediaGraphRtspSource.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this MediaGraphRtspSource.

        The discriminator for derived types.

        :param odata_type: The odata_type of this MediaGraphRtspSource.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def name(self):
        """Gets the name of this MediaGraphRtspSource.

        Source name

        :return: The name of this MediaGraphRtspSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaGraphRtspSource.

        Source name

        :param name: The name of this MediaGraphRtspSource.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
