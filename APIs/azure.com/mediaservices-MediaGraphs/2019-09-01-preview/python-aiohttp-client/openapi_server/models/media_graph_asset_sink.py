# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_graph_sink import MediaGraphSink
from openapi_server import util


class MediaGraphAssetSink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_name: str=None, odata_type: str=None, inputs: List[str]=None, name: str=None):
        """MediaGraphAssetSink - a model defined in OpenAPI

        :param asset_name: The asset_name of this MediaGraphAssetSink.
        :param odata_type: The odata_type of this MediaGraphAssetSink.
        :param inputs: The inputs of this MediaGraphAssetSink.
        :param name: The name of this MediaGraphAssetSink.
        """
        self.openapi_types = {
            'asset_name': str,
            'odata_type': str,
            'inputs': List[str],
            'name': str
        }

        self.attribute_map = {
            'asset_name': 'assetName',
            'odata_type': '@odata.type',
            'inputs': 'inputs',
            'name': 'name'
        }

        self._asset_name = asset_name
        self._odata_type = odata_type
        self._inputs = inputs
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaGraphAssetSink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaGraphAssetSink of this MediaGraphAssetSink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_name(self):
        """Gets the asset_name of this MediaGraphAssetSink.

        Asset name

        :return: The asset_name of this MediaGraphAssetSink.
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this MediaGraphAssetSink.

        Asset name

        :param asset_name: The asset_name of this MediaGraphAssetSink.
        :type asset_name: str
        """
        if asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")

        self._asset_name = asset_name

    @property
    def odata_type(self):
        """Gets the odata_type of this MediaGraphAssetSink.

        The discriminator for derived types.

        :return: The odata_type of this MediaGraphAssetSink.
        :rtype: str
        """
        return self._odata_type

    @odata_type.setter
    def odata_type(self, odata_type):
        """Sets the odata_type of this MediaGraphAssetSink.

        The discriminator for derived types.

        :param odata_type: The odata_type of this MediaGraphAssetSink.
        :type odata_type: str
        """
        if odata_type is None:
            raise ValueError("Invalid value for `odata_type`, must not be `None`")

        self._odata_type = odata_type

    @property
    def inputs(self):
        """Gets the inputs of this MediaGraphAssetSink.

        Sink inputs

        :return: The inputs of this MediaGraphAssetSink.
        :rtype: List[str]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this MediaGraphAssetSink.

        Sink inputs

        :param inputs: The inputs of this MediaGraphAssetSink.
        :type inputs: List[str]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")

        self._inputs = inputs

    @property
    def name(self):
        """Gets the name of this MediaGraphAssetSink.

        Sink name

        :return: The name of this MediaGraphAssetSink.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MediaGraphAssetSink.

        Sink name

        :param name: The name of this MediaGraphAssetSink.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
