/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Media Sink
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:58.338204-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaGraphSink {
  public static final String SERIALIZED_NAME_AT_ODATA_TYPE = "@odata.type";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_TYPE)
  protected String atOdataType;

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private List<String> inputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public MediaGraphSink() {
    this.atOdataType = this.getClass().getSimpleName();
  }

  public MediaGraphSink atOdataType(String atOdataType) {
    this.atOdataType = atOdataType;
    return this;
  }

  /**
   * The discriminator for derived types.
   * @return atOdataType
   */
  @javax.annotation.Nonnull
  public String getAtOdataType() {
    return atOdataType;
  }

  public void setAtOdataType(String atOdataType) {
    this.atOdataType = atOdataType;
  }


  public MediaGraphSink inputs(List<String> inputs) {
    this.inputs = inputs;
    return this;
  }

  public MediaGraphSink addInputsItem(String inputsItem) {
    if (this.inputs == null) {
      this.inputs = new ArrayList<>();
    }
    this.inputs.add(inputsItem);
    return this;
  }

  /**
   * Sink inputs
   * @return inputs
   */
  @javax.annotation.Nonnull
  public List<String> getInputs() {
    return inputs;
  }

  public void setInputs(List<String> inputs) {
    this.inputs = inputs;
  }


  public MediaGraphSink name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Sink name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaGraphSink mediaGraphSink = (MediaGraphSink) o;
    return Objects.equals(this.atOdataType, mediaGraphSink.atOdataType) &&
        Objects.equals(this.inputs, mediaGraphSink.inputs) &&
        Objects.equals(this.name, mediaGraphSink.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataType, inputs, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaGraphSink {\n");
    sb.append("    atOdataType: ").append(toIndentedString(atOdataType)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.type");
    openapiFields.add("inputs");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("@odata.type");
    openapiRequiredFields.add("inputs");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaGraphSink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaGraphSink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaGraphSink is not found in the empty JSON string", MediaGraphSink.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("@odata.type").getAsString();
      switch (discriminatorValue) {
        case "MediaGraphAssetSink":
          MediaGraphAssetSink.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `@odata.type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of MediaGraphSink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaGraphSink
   * @throws IOException if the JSON string is invalid with respect to MediaGraphSink
   */
  public static MediaGraphSink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaGraphSink.class);
  }

  /**
   * Convert an instance of MediaGraphSink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

