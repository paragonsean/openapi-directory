/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiError;
import org.openapitools.client.model.MediaGraph;
import org.openapitools.client.model.MediaGraphCollection;
import org.openapitools.client.model.MediaGraphOperationStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mediaGraphsCreateOrUpdate
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, MediaGraph parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "mediaGraphName" + "}", localVarApiClient.escapeString(mediaGraphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaGraphsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, MediaGraph parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaGraphsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaGraphsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mediaGraphsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'mediaGraphName' is set
        if (mediaGraphName == null) {
            throw new ApiException("Missing the required parameter 'mediaGraphName' when calling mediaGraphsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaGraphsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling mediaGraphsCreateOrUpdate(Async)");
        }

        return mediaGraphsCreateOrUpdateCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update a Media Graph
     * Create or update a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return MediaGraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public MediaGraph mediaGraphsCreateOrUpdate(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, MediaGraph parameters) throws ApiException {
        ApiResponse<MediaGraph> localVarResp = mediaGraphsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update a Media Graph
     * Create or update a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @return ApiResponse&lt;MediaGraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaGraph> mediaGraphsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, MediaGraph parameters) throws ApiException {
        okhttp3.Call localVarCall = mediaGraphsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<MediaGraph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update a Media Graph (asynchronously)
     * Create or update a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param parameters The request parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, MediaGraph parameters, final ApiCallback<MediaGraph> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaGraphsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<MediaGraph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaGraphsDelete
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "mediaGraphName" + "}", localVarApiClient.escapeString(mediaGraphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaGraphsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaGraphsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaGraphsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mediaGraphsDelete(Async)");
        }

        // verify the required parameter 'mediaGraphName' is set
        if (mediaGraphName == null) {
            throw new ApiException("Missing the required parameter 'mediaGraphName' when calling mediaGraphsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaGraphsDelete(Async)");
        }

        return mediaGraphsDeleteCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);

    }

    /**
     * Delete a Media Graph
     * Deletes a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public void mediaGraphsDelete(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        mediaGraphsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion);
    }

    /**
     * Delete a Media Graph
     * Deletes a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediaGraphsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mediaGraphsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a Media Graph (asynchronously)
     * Deletes a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaGraphsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaGraphsGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsGetCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "mediaGraphName" + "}", localVarApiClient.escapeString(mediaGraphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaGraphsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaGraphsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaGraphsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mediaGraphsGet(Async)");
        }

        // verify the required parameter 'mediaGraphName' is set
        if (mediaGraphName == null) {
            throw new ApiException("Missing the required parameter 'mediaGraphName' when calling mediaGraphsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaGraphsGet(Async)");
        }

        return mediaGraphsGetCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);

    }

    /**
     * Get a Media Graph
     * Get the details of a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return MediaGraph
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public MediaGraph mediaGraphsGet(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        ApiResponse<MediaGraph> localVarResp = mediaGraphsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a Media Graph
     * Get the details of a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;MediaGraph&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaGraph> mediaGraphsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mediaGraphsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, null);
        Type localVarReturnType = new TypeToken<MediaGraph>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Media Graph (asynchronously)
     * Get the details of a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback<MediaGraph> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaGraphsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MediaGraph>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaGraphsList
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsListCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaGraphsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaGraphsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaGraphsList(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mediaGraphsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaGraphsList(Async)");
        }

        return mediaGraphsListCall(subscriptionId, resourceGroupName, accountName, apiVersion, $top, _callback);

    }

    /**
     * List Media Graphs
     * Lists Media Graphs in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @return MediaGraphCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public MediaGraphCollection mediaGraphsList(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, Integer $top) throws ApiException {
        ApiResponse<MediaGraphCollection> localVarResp = mediaGraphsListWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $top);
        return localVarResp.getData();
    }

    /**
     * List Media Graphs
     * Lists Media Graphs in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @return ApiResponse&lt;MediaGraphCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaGraphCollection> mediaGraphsListWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = mediaGraphsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $top, null);
        Type localVarReturnType = new TypeToken<MediaGraphCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Media Graphs (asynchronously)
     * Lists Media Graphs in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param $top Specifies a non-negative integer n that limits the number of items returned from a collection. The service returns the number of available items up to but not greater than the specified value n. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsListAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, Integer $top, final ApiCallback<MediaGraphCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaGraphsListValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $top, _callback);
        Type localVarReturnType = new TypeToken<MediaGraphCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaGraphsStart
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsStartCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "mediaGraphName" + "}", localVarApiClient.escapeString(mediaGraphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaGraphsStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaGraphsStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaGraphsStart(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mediaGraphsStart(Async)");
        }

        // verify the required parameter 'mediaGraphName' is set
        if (mediaGraphName == null) {
            throw new ApiException("Missing the required parameter 'mediaGraphName' when calling mediaGraphsStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaGraphsStart(Async)");
        }

        return mediaGraphsStartCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);

    }

    /**
     * Start a Media Graph
     * Start a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public void mediaGraphsStart(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        mediaGraphsStartWithHttpInfo(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion);
    }

    /**
     * Start a Media Graph
     * Start a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediaGraphsStartWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mediaGraphsStartValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start a Media Graph (asynchronously)
     * Start a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsStartAsync(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaGraphsStartValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mediaGraphsStop
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsStopCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "mediaGraphName" + "}", localVarApiClient.escapeString(mediaGraphName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mediaGraphsStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling mediaGraphsStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling mediaGraphsStop(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling mediaGraphsStop(Async)");
        }

        // verify the required parameter 'mediaGraphName' is set
        if (mediaGraphName == null) {
            throw new ApiException("Missing the required parameter 'mediaGraphName' when calling mediaGraphsStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling mediaGraphsStop(Async)");
        }

        return mediaGraphsStopCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);

    }

    /**
     * Stop a Media Graph
     * Stop a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public void mediaGraphsStop(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        mediaGraphsStopWithHttpInfo(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion);
    }

    /**
     * Stop a Media Graph
     * Stop a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mediaGraphsStopWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = mediaGraphsStopValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop a Media Graph (asynchronously)
     * Stop a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mediaGraphsStopAsync(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mediaGraphsStopValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationResultsGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationResultsGetCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/operationResults/{operationId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "mediaGraphName" + "}", localVarApiClient.escapeString(mediaGraphName.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationResultsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling operationResultsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling operationResultsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling operationResultsGet(Async)");
        }

        // verify the required parameter 'mediaGraphName' is set
        if (mediaGraphName == null) {
            throw new ApiException("Missing the required parameter 'mediaGraphName' when calling operationResultsGet(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling operationResultsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationResultsGet(Async)");
        }

        return operationResultsGetCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, _callback);

    }

    /**
     * Get the operation result
     * Get the operation result of a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public Object operationResultsGet(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = operationResultsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the operation result
     * Get the operation result of a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> operationResultsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationResultsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the operation result (asynchronously)
     * Get the operation result of a Media Graph in the Media Services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationResultsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationResultsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsStatusGet
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsStatusGetCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/mediaGraphs/{mediaGraphName}/operationsStatus/{operationId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "mediaGraphName" + "}", localVarApiClient.escapeString(mediaGraphName.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsStatusGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling operationsStatusGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling operationsStatusGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling operationsStatusGet(Async)");
        }

        // verify the required parameter 'mediaGraphName' is set
        if (mediaGraphName == null) {
            throw new ApiException("Missing the required parameter 'mediaGraphName' when calling operationsStatusGet(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling operationsStatusGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsStatusGet(Async)");
        }

        return operationsStatusGetCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, _callback);

    }

    /**
     * Get the operation status
     * Get the operation status of a Media Graph in the media services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return MediaGraphOperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public MediaGraphOperationStatus operationsStatusGet(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion) throws ApiException {
        ApiResponse<MediaGraphOperationStatus> localVarResp = operationsStatusGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the operation status
     * Get the operation status of a Media Graph in the media services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;MediaGraphOperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MediaGraphOperationStatus> operationsStatusGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsStatusGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, null);
        Type localVarReturnType = new TypeToken<MediaGraphOperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the operation status (asynchronously)
     * Get the operation status of a Media Graph in the media services account
     * @param subscriptionId The unique identifier for a Microsoft Azure subscription. (required)
     * @param resourceGroupName The name of the resource group within the Azure subscription. (required)
     * @param accountName The Media Services account name. (required)
     * @param mediaGraphName The Media Graph name. (required)
     * @param operationId The operation ID (required)
     * @param apiVersion The Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Detailed error information. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsStatusGetAsync(String subscriptionId, String resourceGroupName, String accountName, String mediaGraphName, String operationId, String apiVersion, final ApiCallback<MediaGraphOperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsStatusGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, mediaGraphName, operationId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<MediaGraphOperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
