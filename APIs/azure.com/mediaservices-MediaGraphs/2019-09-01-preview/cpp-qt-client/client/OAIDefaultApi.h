/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiError.h"
#include "OAIMediaGraph.h"
#include "OAIMediaGraphCollection.h"
#include "OAIMediaGraphOperationStatus.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  media_graph_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIMediaGraph [required]
    */
    virtual void mediaGraphsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &media_graph_name, const QString &api_version, const OAIMediaGraph &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  media_graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaGraphsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &media_graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  media_graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaGraphsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &media_graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void mediaGraphsList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  media_graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaGraphsStart(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &media_graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  media_graph_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void mediaGraphsStop(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &media_graph_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  media_graph_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void operationResultsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &media_graph_name, const QString &operation_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  media_graph_name QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void operationsStatusGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &media_graph_name, const QString &operation_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mediaGraphsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void mediaGraphsDeleteCallback(OAIHttpRequestWorker *worker);
    void mediaGraphsGetCallback(OAIHttpRequestWorker *worker);
    void mediaGraphsListCallback(OAIHttpRequestWorker *worker);
    void mediaGraphsStartCallback(OAIHttpRequestWorker *worker);
    void mediaGraphsStopCallback(OAIHttpRequestWorker *worker);
    void operationResultsGetCallback(OAIHttpRequestWorker *worker);
    void operationsStatusGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mediaGraphsCreateOrUpdateSignal(OAIMediaGraph summary);
    void mediaGraphsDeleteSignal();
    void mediaGraphsGetSignal(OAIMediaGraph summary);
    void mediaGraphsListSignal(OAIMediaGraphCollection summary);
    void mediaGraphsStartSignal();
    void mediaGraphsStopSignal();
    void operationResultsGetSignal(OAIObject summary);
    void operationsStatusGetSignal(OAIMediaGraphOperationStatus summary);


    void mediaGraphsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIMediaGraph summary);
    void mediaGraphsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void mediaGraphsGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaGraph summary);
    void mediaGraphsListSignalFull(OAIHttpRequestWorker *worker, OAIMediaGraphCollection summary);
    void mediaGraphsStartSignalFull(OAIHttpRequestWorker *worker);
    void mediaGraphsStopSignalFull(OAIHttpRequestWorker *worker);
    void operationResultsGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void operationsStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIMediaGraphOperationStatus summary);

    Q_DECL_DEPRECATED_X("Use mediaGraphsCreateOrUpdateSignalError() instead")
    void mediaGraphsCreateOrUpdateSignalE(OAIMediaGraph summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsCreateOrUpdateSignalError(OAIMediaGraph summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsDeleteSignalError() instead")
    void mediaGraphsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsGetSignalError() instead")
    void mediaGraphsGetSignalE(OAIMediaGraph summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsGetSignalError(OAIMediaGraph summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsListSignalError() instead")
    void mediaGraphsListSignalE(OAIMediaGraphCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsListSignalError(OAIMediaGraphCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsStartSignalError() instead")
    void mediaGraphsStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsStopSignalError() instead")
    void mediaGraphsStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationResultsGetSignalError() instead")
    void operationResultsGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationResultsGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsStatusGetSignalError() instead")
    void operationsStatusGetSignalE(OAIMediaGraphOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsStatusGetSignalError(OAIMediaGraphOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mediaGraphsCreateOrUpdateSignalErrorFull() instead")
    void mediaGraphsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsDeleteSignalErrorFull() instead")
    void mediaGraphsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsGetSignalErrorFull() instead")
    void mediaGraphsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsListSignalErrorFull() instead")
    void mediaGraphsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsStartSignalErrorFull() instead")
    void mediaGraphsStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mediaGraphsStopSignalErrorFull() instead")
    void mediaGraphsStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mediaGraphsStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationResultsGetSignalErrorFull() instead")
    void operationResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsStatusGetSignalErrorFull() instead")
    void operationsStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
