/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2019-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaGraphProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaGraphProperties::OAIMediaGraphProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaGraphProperties::OAIMediaGraphProperties() {
    this->initializeModel();
}

OAIMediaGraphProperties::~OAIMediaGraphProperties() {}

void OAIMediaGraphProperties::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_sinks_isSet = false;
    m_sinks_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIMediaGraphProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaGraphProperties::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_sinks_isValid = ::OpenAPI::fromJsonValue(m_sinks, json[QString("sinks")]);
    m_sinks_isSet = !json[QString("sinks")].isNull() && m_sinks_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIMediaGraphProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaGraphProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_sinks.size() > 0) {
        obj.insert(QString("sinks"), ::OpenAPI::toJsonValue(m_sinks));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QDateTime OAIMediaGraphProperties::getCreated() const {
    return m_created;
}
void OAIMediaGraphProperties::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIMediaGraphProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIMediaGraphProperties::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIMediaGraphProperties::getDescription() const {
    return m_description;
}
void OAIMediaGraphProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMediaGraphProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMediaGraphProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIMediaGraphProperties::getLastModified() const {
    return m_last_modified;
}
void OAIMediaGraphProperties::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIMediaGraphProperties::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIMediaGraphProperties::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QList<OAIMediaGraphSink> OAIMediaGraphProperties::getSinks() const {
    return m_sinks;
}
void OAIMediaGraphProperties::setSinks(const QList<OAIMediaGraphSink> &sinks) {
    m_sinks = sinks;
    m_sinks_isSet = true;
}

bool OAIMediaGraphProperties::is_sinks_Set() const{
    return m_sinks_isSet;
}

bool OAIMediaGraphProperties::is_sinks_Valid() const{
    return m_sinks_isValid;
}

QList<OAIMediaGraphSource> OAIMediaGraphProperties::getSources() const {
    return m_sources;
}
void OAIMediaGraphProperties::setSources(const QList<OAIMediaGraphSource> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIMediaGraphProperties::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIMediaGraphProperties::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIMediaGraphProperties::getState() const {
    return m_state;
}
void OAIMediaGraphProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMediaGraphProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMediaGraphProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIMediaGraphProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sinks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaGraphProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sinks_isValid && m_sources_isValid && true;
}

} // namespace OpenAPI
