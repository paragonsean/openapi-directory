/**
 * Azure SQL Database Backup
 * Provides read functionality for Azure SQL Database Backups
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestorePointProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestorePointProperties::OAIRestorePointProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestorePointProperties::OAIRestorePointProperties() {
    this->initializeModel();
}

OAIRestorePointProperties::~OAIRestorePointProperties() {}

void OAIRestorePointProperties::initializeModel() {

    m_earliest_restore_date_isSet = false;
    m_earliest_restore_date_isValid = false;

    m_restore_point_creation_date_isSet = false;
    m_restore_point_creation_date_isValid = false;

    m_restore_point_type_isSet = false;
    m_restore_point_type_isValid = false;
}

void OAIRestorePointProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestorePointProperties::fromJsonObject(QJsonObject json) {

    m_earliest_restore_date_isValid = ::OpenAPI::fromJsonValue(m_earliest_restore_date, json[QString("earliestRestoreDate")]);
    m_earliest_restore_date_isSet = !json[QString("earliestRestoreDate")].isNull() && m_earliest_restore_date_isValid;

    m_restore_point_creation_date_isValid = ::OpenAPI::fromJsonValue(m_restore_point_creation_date, json[QString("restorePointCreationDate")]);
    m_restore_point_creation_date_isSet = !json[QString("restorePointCreationDate")].isNull() && m_restore_point_creation_date_isValid;

    m_restore_point_type_isValid = ::OpenAPI::fromJsonValue(m_restore_point_type, json[QString("restorePointType")]);
    m_restore_point_type_isSet = !json[QString("restorePointType")].isNull() && m_restore_point_type_isValid;
}

QString OAIRestorePointProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestorePointProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_earliest_restore_date_isSet) {
        obj.insert(QString("earliestRestoreDate"), ::OpenAPI::toJsonValue(m_earliest_restore_date));
    }
    if (m_restore_point_creation_date_isSet) {
        obj.insert(QString("restorePointCreationDate"), ::OpenAPI::toJsonValue(m_restore_point_creation_date));
    }
    if (m_restore_point_type_isSet) {
        obj.insert(QString("restorePointType"), ::OpenAPI::toJsonValue(m_restore_point_type));
    }
    return obj;
}

QDateTime OAIRestorePointProperties::getEarliestRestoreDate() const {
    return m_earliest_restore_date;
}
void OAIRestorePointProperties::setEarliestRestoreDate(const QDateTime &earliest_restore_date) {
    m_earliest_restore_date = earliest_restore_date;
    m_earliest_restore_date_isSet = true;
}

bool OAIRestorePointProperties::is_earliest_restore_date_Set() const{
    return m_earliest_restore_date_isSet;
}

bool OAIRestorePointProperties::is_earliest_restore_date_Valid() const{
    return m_earliest_restore_date_isValid;
}

QDateTime OAIRestorePointProperties::getRestorePointCreationDate() const {
    return m_restore_point_creation_date;
}
void OAIRestorePointProperties::setRestorePointCreationDate(const QDateTime &restore_point_creation_date) {
    m_restore_point_creation_date = restore_point_creation_date;
    m_restore_point_creation_date_isSet = true;
}

bool OAIRestorePointProperties::is_restore_point_creation_date_Set() const{
    return m_restore_point_creation_date_isSet;
}

bool OAIRestorePointProperties::is_restore_point_creation_date_Valid() const{
    return m_restore_point_creation_date_isValid;
}

QString OAIRestorePointProperties::getRestorePointType() const {
    return m_restore_point_type;
}
void OAIRestorePointProperties::setRestorePointType(const QString &restore_point_type) {
    m_restore_point_type = restore_point_type;
    m_restore_point_type_isSet = true;
}

bool OAIRestorePointProperties::is_restore_point_type_Set() const{
    return m_restore_point_type_isSet;
}

bool OAIRestorePointProperties::is_restore_point_type_Valid() const{
    return m_restore_point_type_isValid;
}

bool OAIRestorePointProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_earliest_restore_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_point_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_point_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestorePointProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
