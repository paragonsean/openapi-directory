/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a database restore point
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:04.394457-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RestorePointProperties {
  public static final String SERIALIZED_NAME_EARLIEST_RESTORE_DATE = "earliestRestoreDate";
  @SerializedName(SERIALIZED_NAME_EARLIEST_RESTORE_DATE)
  private OffsetDateTime earliestRestoreDate;

  public static final String SERIALIZED_NAME_RESTORE_POINT_CREATION_DATE = "restorePointCreationDate";
  @SerializedName(SERIALIZED_NAME_RESTORE_POINT_CREATION_DATE)
  private OffsetDateTime restorePointCreationDate;

  public static final String SERIALIZED_NAME_RESTORE_POINT_LABEL = "restorePointLabel";
  @SerializedName(SERIALIZED_NAME_RESTORE_POINT_LABEL)
  private String restorePointLabel;

  /**
   * The type of restore point
   */
  @JsonAdapter(RestorePointTypeEnum.Adapter.class)
  public enum RestorePointTypeEnum {
    CONTINUOUS("CONTINUOUS"),
    
    DISCRETE("DISCRETE");

    private String value;

    RestorePointTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestorePointTypeEnum fromValue(String value) {
      for (RestorePointTypeEnum b : RestorePointTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestorePointTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestorePointTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestorePointTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestorePointTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestorePointTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTORE_POINT_TYPE = "restorePointType";
  @SerializedName(SERIALIZED_NAME_RESTORE_POINT_TYPE)
  private RestorePointTypeEnum restorePointType;

  public RestorePointProperties() {
  }

  public RestorePointProperties(
     OffsetDateTime earliestRestoreDate, 
     OffsetDateTime restorePointCreationDate, 
     String restorePointLabel, 
     RestorePointTypeEnum restorePointType
  ) {
    this();
    this.earliestRestoreDate = earliestRestoreDate;
    this.restorePointCreationDate = restorePointCreationDate;
    this.restorePointLabel = restorePointLabel;
    this.restorePointType = restorePointType;
  }

  /**
   * The earliest time to which this database can be restored
   * @return earliestRestoreDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEarliestRestoreDate() {
    return earliestRestoreDate;
  }



  /**
   * The time the backup was taken
   * @return restorePointCreationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRestorePointCreationDate() {
    return restorePointCreationDate;
  }



  /**
   * The label of restore point for backup request by user
   * @return restorePointLabel
   */
  @javax.annotation.Nullable
  public String getRestorePointLabel() {
    return restorePointLabel;
  }



  /**
   * The type of restore point
   * @return restorePointType
   */
  @javax.annotation.Nullable
  public RestorePointTypeEnum getRestorePointType() {
    return restorePointType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestorePointProperties restorePointProperties = (RestorePointProperties) o;
    return Objects.equals(this.earliestRestoreDate, restorePointProperties.earliestRestoreDate) &&
        Objects.equals(this.restorePointCreationDate, restorePointProperties.restorePointCreationDate) &&
        Objects.equals(this.restorePointLabel, restorePointProperties.restorePointLabel) &&
        Objects.equals(this.restorePointType, restorePointProperties.restorePointType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(earliestRestoreDate, restorePointCreationDate, restorePointLabel, restorePointType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestorePointProperties {\n");
    sb.append("    earliestRestoreDate: ").append(toIndentedString(earliestRestoreDate)).append("\n");
    sb.append("    restorePointCreationDate: ").append(toIndentedString(restorePointCreationDate)).append("\n");
    sb.append("    restorePointLabel: ").append(toIndentedString(restorePointLabel)).append("\n");
    sb.append("    restorePointType: ").append(toIndentedString(restorePointType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("earliestRestoreDate");
    openapiFields.add("restorePointCreationDate");
    openapiFields.add("restorePointLabel");
    openapiFields.add("restorePointType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RestorePointProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RestorePointProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RestorePointProperties is not found in the empty JSON string", RestorePointProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RestorePointProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RestorePointProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("restorePointLabel") != null && !jsonObj.get("restorePointLabel").isJsonNull()) && !jsonObj.get("restorePointLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restorePointLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restorePointLabel").toString()));
      }
      if ((jsonObj.get("restorePointType") != null && !jsonObj.get("restorePointType").isJsonNull()) && !jsonObj.get("restorePointType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restorePointType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restorePointType").toString()));
      }
      // validate the optional field `restorePointType`
      if (jsonObj.get("restorePointType") != null && !jsonObj.get("restorePointType").isJsonNull()) {
        RestorePointTypeEnum.validateJsonElement(jsonObj.get("restorePointType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RestorePointProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RestorePointProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RestorePointProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RestorePointProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RestorePointProperties>() {
           @Override
           public void write(JsonWriter out, RestorePointProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RestorePointProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RestorePointProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RestorePointProperties
   * @throws IOException if the JSON string is invalid with respect to RestorePointProperties
   */
  public static RestorePointProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RestorePointProperties.class);
  }

  /**
   * Convert an instance of RestorePointProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

