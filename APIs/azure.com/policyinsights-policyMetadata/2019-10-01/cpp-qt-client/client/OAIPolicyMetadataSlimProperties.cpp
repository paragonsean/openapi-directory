/**
 * PolicyMetadataClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyMetadataSlimProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyMetadataSlimProperties::OAIPolicyMetadataSlimProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyMetadataSlimProperties::OAIPolicyMetadataSlimProperties() {
    this->initializeModel();
}

OAIPolicyMetadataSlimProperties::~OAIPolicyMetadataSlimProperties() {}

void OAIPolicyMetadataSlimProperties::initializeModel() {

    m_additional_content_url_isSet = false;
    m_additional_content_url_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_metadata_id_isSet = false;
    m_metadata_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPolicyMetadataSlimProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyMetadataSlimProperties::fromJsonObject(QJsonObject json) {

    m_additional_content_url_isValid = ::OpenAPI::fromJsonValue(m_additional_content_url, json[QString("additionalContentUrl")]);
    m_additional_content_url_isSet = !json[QString("additionalContentUrl")].isNull() && m_additional_content_url_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_metadata_id_isValid = ::OpenAPI::fromJsonValue(m_metadata_id, json[QString("metadataId")]);
    m_metadata_id_isSet = !json[QString("metadataId")].isNull() && m_metadata_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPolicyMetadataSlimProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyMetadataSlimProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_content_url_isSet) {
        obj.insert(QString("additionalContentUrl"), ::OpenAPI::toJsonValue(m_additional_content_url));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_metadata_id_isSet) {
        obj.insert(QString("metadataId"), ::OpenAPI::toJsonValue(m_metadata_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPolicyMetadataSlimProperties::getAdditionalContentUrl() const {
    return m_additional_content_url;
}
void OAIPolicyMetadataSlimProperties::setAdditionalContentUrl(const QString &additional_content_url) {
    m_additional_content_url = additional_content_url;
    m_additional_content_url_isSet = true;
}

bool OAIPolicyMetadataSlimProperties::is_additional_content_url_Set() const{
    return m_additional_content_url_isSet;
}

bool OAIPolicyMetadataSlimProperties::is_additional_content_url_Valid() const{
    return m_additional_content_url_isValid;
}

QString OAIPolicyMetadataSlimProperties::getCategory() const {
    return m_category;
}
void OAIPolicyMetadataSlimProperties::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPolicyMetadataSlimProperties::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPolicyMetadataSlimProperties::is_category_Valid() const{
    return m_category_isValid;
}

OAIObject OAIPolicyMetadataSlimProperties::getMetadata() const {
    return m_metadata;
}
void OAIPolicyMetadataSlimProperties::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPolicyMetadataSlimProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPolicyMetadataSlimProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPolicyMetadataSlimProperties::getMetadataId() const {
    return m_metadata_id;
}
void OAIPolicyMetadataSlimProperties::setMetadataId(const QString &metadata_id) {
    m_metadata_id = metadata_id;
    m_metadata_id_isSet = true;
}

bool OAIPolicyMetadataSlimProperties::is_metadata_id_Set() const{
    return m_metadata_id_isSet;
}

bool OAIPolicyMetadataSlimProperties::is_metadata_id_Valid() const{
    return m_metadata_id_isValid;
}

QString OAIPolicyMetadataSlimProperties::getOwner() const {
    return m_owner;
}
void OAIPolicyMetadataSlimProperties::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPolicyMetadataSlimProperties::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPolicyMetadataSlimProperties::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIPolicyMetadataSlimProperties::getTitle() const {
    return m_title;
}
void OAIPolicyMetadataSlimProperties::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPolicyMetadataSlimProperties::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPolicyMetadataSlimProperties::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPolicyMetadataSlimProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_content_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyMetadataSlimProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
