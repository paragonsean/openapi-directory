/*
 * PolicyMetadataClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the policy metadata, excluding properties containing large strings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:17:49.013856-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyMetadataSlimProperties {
  public static final String SERIALIZED_NAME_ADDITIONAL_CONTENT_URL = "additionalContentUrl";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CONTENT_URL)
  private String additionalContentUrl;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_METADATA_ID = "metadataId";
  @SerializedName(SERIALIZED_NAME_METADATA_ID)
  private String metadataId;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public PolicyMetadataSlimProperties() {
  }

  public PolicyMetadataSlimProperties(
     String additionalContentUrl, 
     String category, 
     Object metadata, 
     String metadataId, 
     String owner, 
     String title
  ) {
    this();
    this.additionalContentUrl = additionalContentUrl;
    this.category = category;
    this.metadata = metadata;
    this.metadataId = metadataId;
    this.owner = owner;
    this.title = title;
  }

  /**
   * Url for getting additional content about the resource metadata.
   * @return additionalContentUrl
   */
  @javax.annotation.Nullable
  public String getAdditionalContentUrl() {
    return additionalContentUrl;
  }



  /**
   * The category of the policy metadata.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }



  /**
   * Additional metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }



  /**
   * The policy metadata identifier.
   * @return metadataId
   */
  @javax.annotation.Nullable
  public String getMetadataId() {
    return metadataId;
  }



  /**
   * The owner of the policy metadata.
   * @return owner
   */
  @javax.annotation.Nullable
  public String getOwner() {
    return owner;
  }



  /**
   * The title of the policy metadata.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyMetadataSlimProperties policyMetadataSlimProperties = (PolicyMetadataSlimProperties) o;
    return Objects.equals(this.additionalContentUrl, policyMetadataSlimProperties.additionalContentUrl) &&
        Objects.equals(this.category, policyMetadataSlimProperties.category) &&
        Objects.equals(this.metadata, policyMetadataSlimProperties.metadata) &&
        Objects.equals(this.metadataId, policyMetadataSlimProperties.metadataId) &&
        Objects.equals(this.owner, policyMetadataSlimProperties.owner) &&
        Objects.equals(this.title, policyMetadataSlimProperties.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalContentUrl, category, metadata, metadataId, owner, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyMetadataSlimProperties {\n");
    sb.append("    additionalContentUrl: ").append(toIndentedString(additionalContentUrl)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    metadataId: ").append(toIndentedString(metadataId)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalContentUrl");
    openapiFields.add("category");
    openapiFields.add("metadata");
    openapiFields.add("metadataId");
    openapiFields.add("owner");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyMetadataSlimProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyMetadataSlimProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyMetadataSlimProperties is not found in the empty JSON string", PolicyMetadataSlimProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyMetadataSlimProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyMetadataSlimProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalContentUrl") != null && !jsonObj.get("additionalContentUrl").isJsonNull()) && !jsonObj.get("additionalContentUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalContentUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalContentUrl").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("metadataId") != null && !jsonObj.get("metadataId").isJsonNull()) && !jsonObj.get("metadataId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metadataId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metadataId").toString()));
      }
      if ((jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) && !jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyMetadataSlimProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyMetadataSlimProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyMetadataSlimProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyMetadataSlimProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyMetadataSlimProperties>() {
           @Override
           public void write(JsonWriter out, PolicyMetadataSlimProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyMetadataSlimProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyMetadataSlimProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyMetadataSlimProperties
   * @throws IOException if the JSON string is invalid with respect to PolicyMetadataSlimProperties
   */
  public static PolicyMetadataSlimProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyMetadataSlimProperties.class);
  }

  /**
   * Convert an instance of PolicyMetadataSlimProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

