/**
 * PolicyMetadataClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyMetadataSlimProperties model module.
 * @module model/PolicyMetadataSlimProperties
 * @version 2019-10-01
 */
class PolicyMetadataSlimProperties {
    /**
     * Constructs a new <code>PolicyMetadataSlimProperties</code>.
     * The properties of the policy metadata, excluding properties containing large strings
     * @alias module:model/PolicyMetadataSlimProperties
     */
    constructor() { 
        
        PolicyMetadataSlimProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyMetadataSlimProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyMetadataSlimProperties} obj Optional instance to populate.
     * @return {module:model/PolicyMetadataSlimProperties} The populated <code>PolicyMetadataSlimProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyMetadataSlimProperties();

            if (data.hasOwnProperty('additionalContentUrl')) {
                obj['additionalContentUrl'] = ApiClient.convertToType(data['additionalContentUrl'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('metadataId')) {
                obj['metadataId'] = ApiClient.convertToType(data['metadataId'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyMetadataSlimProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyMetadataSlimProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalContentUrl'] && !(typeof data['additionalContentUrl'] === 'string' || data['additionalContentUrl'] instanceof String)) {
            throw new Error("Expected the field `additionalContentUrl` to be a primitive type in the JSON string but got " + data['additionalContentUrl']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['metadataId'] && !(typeof data['metadataId'] === 'string' || data['metadataId'] instanceof String)) {
            throw new Error("Expected the field `metadataId` to be a primitive type in the JSON string but got " + data['metadataId']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Url for getting additional content about the resource metadata.
 * @member {String} additionalContentUrl
 */
PolicyMetadataSlimProperties.prototype['additionalContentUrl'] = undefined;

/**
 * The category of the policy metadata.
 * @member {String} category
 */
PolicyMetadataSlimProperties.prototype['category'] = undefined;

/**
 * Additional metadata.
 * @member {Object} metadata
 */
PolicyMetadataSlimProperties.prototype['metadata'] = undefined;

/**
 * The policy metadata identifier.
 * @member {String} metadataId
 */
PolicyMetadataSlimProperties.prototype['metadataId'] = undefined;

/**
 * The owner of the policy metadata.
 * @member {String} owner
 */
PolicyMetadataSlimProperties.prototype['owner'] = undefined;

/**
 * The title of the policy metadata.
 * @member {String} title
 */
PolicyMetadataSlimProperties.prototype['title'] = undefined;






export default PolicyMetadataSlimProperties;

