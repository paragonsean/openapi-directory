/**
 * Language Understanding Intelligent Service (LUIS) Endpoint API for running predictions and extracting user intentions and entities from utterances.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0 preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityWithResolution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityWithResolution::OAIEntityWithResolution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityWithResolution::OAIEntityWithResolution() {
    this->initializeModel();
}

OAIEntityWithResolution::~OAIEntityWithResolution() {}

void OAIEntityWithResolution::initializeModel() {

    m_end_index_isSet = false;
    m_end_index_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;
}

void OAIEntityWithResolution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityWithResolution::fromJsonObject(QJsonObject json) {

    m_end_index_isValid = ::OpenAPI::fromJsonValue(m_end_index, json[QString("endIndex")]);
    m_end_index_isSet = !json[QString("endIndex")].isNull() && m_end_index_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;
}

QString OAIEntityWithResolution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityWithResolution::asJsonObject() const {
    QJsonObject obj;
    if (m_end_index_isSet) {
        obj.insert(QString("endIndex"), ::OpenAPI::toJsonValue(m_end_index));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    return obj;
}

double OAIEntityWithResolution::getEndIndex() const {
    return m_end_index;
}
void OAIEntityWithResolution::setEndIndex(const double &end_index) {
    m_end_index = end_index;
    m_end_index_isSet = true;
}

bool OAIEntityWithResolution::is_end_index_Set() const{
    return m_end_index_isSet;
}

bool OAIEntityWithResolution::is_end_index_Valid() const{
    return m_end_index_isValid;
}

QString OAIEntityWithResolution::getEntity() const {
    return m_entity;
}
void OAIEntityWithResolution::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIEntityWithResolution::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIEntityWithResolution::is_entity_Valid() const{
    return m_entity_isValid;
}

double OAIEntityWithResolution::getStartIndex() const {
    return m_start_index;
}
void OAIEntityWithResolution::setStartIndex(const double &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIEntityWithResolution::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIEntityWithResolution::is_start_index_Valid() const{
    return m_start_index_isValid;
}

QString OAIEntityWithResolution::getType() const {
    return m_type;
}
void OAIEntityWithResolution::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEntityWithResolution::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEntityWithResolution::is_type_Valid() const{
    return m_type_isValid;
}

OAIObject OAIEntityWithResolution::getResolution() const {
    return m_resolution;
}
void OAIEntityWithResolution::setResolution(const OAIObject &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIEntityWithResolution::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIEntityWithResolution::is_resolution_Valid() const{
    return m_resolution_isValid;
}

bool OAIEntityWithResolution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityWithResolution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_index_isValid && m_entity_isValid && m_start_index_isValid && m_type_isValid && m_resolution_isValid && true;
}

} // namespace OpenAPI
