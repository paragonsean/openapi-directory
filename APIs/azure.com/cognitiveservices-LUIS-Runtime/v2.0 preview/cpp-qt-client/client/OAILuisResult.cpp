/**
 * Language Understanding Intelligent Service (LUIS) Endpoint API for running predictions and extracting user intentions and entities from utterances.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0 preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILuisResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILuisResult::OAILuisResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILuisResult::OAILuisResult() {
    this->initializeModel();
}

OAILuisResult::~OAILuisResult() {}

void OAILuisResult::initializeModel() {

    m_altered_query_isSet = false;
    m_altered_query_isValid = false;

    m_composite_entities_isSet = false;
    m_composite_entities_isValid = false;

    m_entities_isSet = false;
    m_entities_isValid = false;

    m_intents_isSet = false;
    m_intents_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_sentiment_analysis_isSet = false;
    m_sentiment_analysis_isValid = false;

    m_top_scoring_intent_isSet = false;
    m_top_scoring_intent_isValid = false;
}

void OAILuisResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILuisResult::fromJsonObject(QJsonObject json) {

    m_altered_query_isValid = ::OpenAPI::fromJsonValue(m_altered_query, json[QString("alteredQuery")]);
    m_altered_query_isSet = !json[QString("alteredQuery")].isNull() && m_altered_query_isValid;

    m_composite_entities_isValid = ::OpenAPI::fromJsonValue(m_composite_entities, json[QString("compositeEntities")]);
    m_composite_entities_isSet = !json[QString("compositeEntities")].isNull() && m_composite_entities_isValid;

    m_entities_isValid = ::OpenAPI::fromJsonValue(m_entities, json[QString("entities")]);
    m_entities_isSet = !json[QString("entities")].isNull() && m_entities_isValid;

    m_intents_isValid = ::OpenAPI::fromJsonValue(m_intents, json[QString("intents")]);
    m_intents_isSet = !json[QString("intents")].isNull() && m_intents_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_sentiment_analysis_isValid = ::OpenAPI::fromJsonValue(m_sentiment_analysis, json[QString("sentimentAnalysis")]);
    m_sentiment_analysis_isSet = !json[QString("sentimentAnalysis")].isNull() && m_sentiment_analysis_isValid;

    m_top_scoring_intent_isValid = ::OpenAPI::fromJsonValue(m_top_scoring_intent, json[QString("topScoringIntent")]);
    m_top_scoring_intent_isSet = !json[QString("topScoringIntent")].isNull() && m_top_scoring_intent_isValid;
}

QString OAILuisResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILuisResult::asJsonObject() const {
    QJsonObject obj;
    if (m_altered_query_isSet) {
        obj.insert(QString("alteredQuery"), ::OpenAPI::toJsonValue(m_altered_query));
    }
    if (m_composite_entities.size() > 0) {
        obj.insert(QString("compositeEntities"), ::OpenAPI::toJsonValue(m_composite_entities));
    }
    if (m_entities.size() > 0) {
        obj.insert(QString("entities"), ::OpenAPI::toJsonValue(m_entities));
    }
    if (m_intents.size() > 0) {
        obj.insert(QString("intents"), ::OpenAPI::toJsonValue(m_intents));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_sentiment_analysis.isSet()) {
        obj.insert(QString("sentimentAnalysis"), ::OpenAPI::toJsonValue(m_sentiment_analysis));
    }
    if (m_top_scoring_intent.isSet()) {
        obj.insert(QString("topScoringIntent"), ::OpenAPI::toJsonValue(m_top_scoring_intent));
    }
    return obj;
}

QString OAILuisResult::getAlteredQuery() const {
    return m_altered_query;
}
void OAILuisResult::setAlteredQuery(const QString &altered_query) {
    m_altered_query = altered_query;
    m_altered_query_isSet = true;
}

bool OAILuisResult::is_altered_query_Set() const{
    return m_altered_query_isSet;
}

bool OAILuisResult::is_altered_query_Valid() const{
    return m_altered_query_isValid;
}

QList<OAICompositeEntityModel> OAILuisResult::getCompositeEntities() const {
    return m_composite_entities;
}
void OAILuisResult::setCompositeEntities(const QList<OAICompositeEntityModel> &composite_entities) {
    m_composite_entities = composite_entities;
    m_composite_entities_isSet = true;
}

bool OAILuisResult::is_composite_entities_Set() const{
    return m_composite_entities_isSet;
}

bool OAILuisResult::is_composite_entities_Valid() const{
    return m_composite_entities_isValid;
}

QList<OAIEntityModel> OAILuisResult::getEntities() const {
    return m_entities;
}
void OAILuisResult::setEntities(const QList<OAIEntityModel> &entities) {
    m_entities = entities;
    m_entities_isSet = true;
}

bool OAILuisResult::is_entities_Set() const{
    return m_entities_isSet;
}

bool OAILuisResult::is_entities_Valid() const{
    return m_entities_isValid;
}

QList<OAIIntentModel> OAILuisResult::getIntents() const {
    return m_intents;
}
void OAILuisResult::setIntents(const QList<OAIIntentModel> &intents) {
    m_intents = intents;
    m_intents_isSet = true;
}

bool OAILuisResult::is_intents_Set() const{
    return m_intents_isSet;
}

bool OAILuisResult::is_intents_Valid() const{
    return m_intents_isValid;
}

QString OAILuisResult::getQuery() const {
    return m_query;
}
void OAILuisResult::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAILuisResult::is_query_Set() const{
    return m_query_isSet;
}

bool OAILuisResult::is_query_Valid() const{
    return m_query_isValid;
}

OAISentiment OAILuisResult::getSentimentAnalysis() const {
    return m_sentiment_analysis;
}
void OAILuisResult::setSentimentAnalysis(const OAISentiment &sentiment_analysis) {
    m_sentiment_analysis = sentiment_analysis;
    m_sentiment_analysis_isSet = true;
}

bool OAILuisResult::is_sentiment_analysis_Set() const{
    return m_sentiment_analysis_isSet;
}

bool OAILuisResult::is_sentiment_analysis_Valid() const{
    return m_sentiment_analysis_isValid;
}

OAIIntentModel OAILuisResult::getTopScoringIntent() const {
    return m_top_scoring_intent;
}
void OAILuisResult::setTopScoringIntent(const OAIIntentModel &top_scoring_intent) {
    m_top_scoring_intent = top_scoring_intent;
    m_top_scoring_intent_isSet = true;
}

bool OAILuisResult::is_top_scoring_intent_Set() const{
    return m_top_scoring_intent_isSet;
}

bool OAILuisResult::is_top_scoring_intent_Valid() const{
    return m_top_scoring_intent_isValid;
}

bool OAILuisResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_altered_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_composite_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_scoring_intent.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILuisResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
