/**
 * Language Understanding Intelligent Service (LUIS) Endpoint API for running predictions and extracting user intentions and entities from utterances.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0 preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISentiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISentiment::OAISentiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISentiment::OAISentiment() {
    this->initializeModel();
}

OAISentiment::~OAISentiment() {}

void OAISentiment::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAISentiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISentiment::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAISentiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISentiment::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAISentiment::getLabel() const {
    return m_label;
}
void OAISentiment::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISentiment::is_label_Set() const{
    return m_label_isSet;
}

bool OAISentiment::is_label_Valid() const{
    return m_label_isValid;
}

double OAISentiment::getScore() const {
    return m_score;
}
void OAISentiment::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAISentiment::is_score_Set() const{
    return m_score_isSet;
}

bool OAISentiment::is_score_Valid() const{
    return m_score_isValid;
}

bool OAISentiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISentiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
