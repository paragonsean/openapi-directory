/**
 * Language Understanding Intelligent Service (LUIS) Endpoint API for running predictions and extracting user intentions and entities from utterances.
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v2.0 preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILuisResult.h
 *
 * Prediction, based on the input query, containing intent(s) and entities.
 */

#ifndef OAILuisResult_H
#define OAILuisResult_H

#include <QJsonObject>

#include "OAICompositeEntityModel.h"
#include "OAIEntityModel.h"
#include "OAIIntentModel.h"
#include "OAISentiment.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICompositeEntityModel;
class OAIIntentModel;
class OAISentiment;

class OAILuisResult : public OAIObject {
public:
    OAILuisResult();
    OAILuisResult(QString json);
    ~OAILuisResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlteredQuery() const;
    void setAlteredQuery(const QString &altered_query);
    bool is_altered_query_Set() const;
    bool is_altered_query_Valid() const;

    QList<OAICompositeEntityModel> getCompositeEntities() const;
    void setCompositeEntities(const QList<OAICompositeEntityModel> &composite_entities);
    bool is_composite_entities_Set() const;
    bool is_composite_entities_Valid() const;

    QList<OAIEntityModel> getEntities() const;
    void setEntities(const QList<OAIEntityModel> &entities);
    bool is_entities_Set() const;
    bool is_entities_Valid() const;

    QList<OAIIntentModel> getIntents() const;
    void setIntents(const QList<OAIIntentModel> &intents);
    bool is_intents_Set() const;
    bool is_intents_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    OAISentiment getSentimentAnalysis() const;
    void setSentimentAnalysis(const OAISentiment &sentiment_analysis);
    bool is_sentiment_analysis_Set() const;
    bool is_sentiment_analysis_Valid() const;

    OAIIntentModel getTopScoringIntent() const;
    void setTopScoringIntent(const OAIIntentModel &top_scoring_intent);
    bool is_top_scoring_intent_Set() const;
    bool is_top_scoring_intent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_altered_query;
    bool m_altered_query_isSet;
    bool m_altered_query_isValid;

    QList<OAICompositeEntityModel> m_composite_entities;
    bool m_composite_entities_isSet;
    bool m_composite_entities_isValid;

    QList<OAIEntityModel> m_entities;
    bool m_entities_isSet;
    bool m_entities_isValid;

    QList<OAIIntentModel> m_intents;
    bool m_intents_isSet;
    bool m_intents_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    OAISentiment m_sentiment_analysis;
    bool m_sentiment_analysis_isSet;
    bool m_sentiment_analysis_isValid;

    OAIIntentModel m_top_scoring_intent;
    bool m_top_scoring_intent_isSet;
    bool m_top_scoring_intent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILuisResult)

#endif // OAILuisResult_H
