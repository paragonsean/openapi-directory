# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityWithScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: float=None, entity: str=None, start_index: float=None, type: str=None, score: float=None):
        """EntityWithScore - a model defined in OpenAPI

        :param end_index: The end_index of this EntityWithScore.
        :param entity: The entity of this EntityWithScore.
        :param start_index: The start_index of this EntityWithScore.
        :param type: The type of this EntityWithScore.
        :param score: The score of this EntityWithScore.
        """
        self.openapi_types = {
            'end_index': float,
            'entity': str,
            'start_index': float,
            'type': str,
            'score': float
        }

        self.attribute_map = {
            'end_index': 'endIndex',
            'entity': 'entity',
            'start_index': 'startIndex',
            'type': 'type',
            'score': 'score'
        }

        self._end_index = end_index
        self._entity = entity
        self._start_index = start_index
        self._type = type
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityWithScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityWithScore of this EntityWithScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this EntityWithScore.

        The position of the last character of the matched entity within the utterance.

        :return: The end_index of this EntityWithScore.
        :rtype: float
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this EntityWithScore.

        The position of the last character of the matched entity within the utterance.

        :param end_index: The end_index of this EntityWithScore.
        :type end_index: float
        """
        if end_index is None:
            raise ValueError("Invalid value for `end_index`, must not be `None`")

        self._end_index = end_index

    @property
    def entity(self):
        """Gets the entity of this EntityWithScore.

        Name of the entity, as defined in LUIS.

        :return: The entity of this EntityWithScore.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityWithScore.

        Name of the entity, as defined in LUIS.

        :param entity: The entity of this EntityWithScore.
        :type entity: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity

    @property
    def start_index(self):
        """Gets the start_index of this EntityWithScore.

        The position of the first character of the matched entity within the utterance.

        :return: The start_index of this EntityWithScore.
        :rtype: float
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this EntityWithScore.

        The position of the first character of the matched entity within the utterance.

        :param start_index: The start_index of this EntityWithScore.
        :type start_index: float
        """
        if start_index is None:
            raise ValueError("Invalid value for `start_index`, must not be `None`")

        self._start_index = start_index

    @property
    def type(self):
        """Gets the type of this EntityWithScore.

        Type of the entity, as defined in LUIS.

        :return: The type of this EntityWithScore.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityWithScore.

        Type of the entity, as defined in LUIS.

        :param type: The type of this EntityWithScore.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def score(self):
        """Gets the score of this EntityWithScore.

        Associated prediction score for the intent (float).

        :return: The score of this EntityWithScore.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this EntityWithScore.

        Associated prediction score for the intent (float).

        :param score: The score of this EntityWithScore.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")
        if score is not None and score > 1:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score
