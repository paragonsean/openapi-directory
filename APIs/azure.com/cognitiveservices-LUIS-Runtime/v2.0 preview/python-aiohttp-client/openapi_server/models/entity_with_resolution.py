# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntityWithResolution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_index: float=None, entity: str=None, start_index: float=None, type: str=None, resolution: object=None):
        """EntityWithResolution - a model defined in OpenAPI

        :param end_index: The end_index of this EntityWithResolution.
        :param entity: The entity of this EntityWithResolution.
        :param start_index: The start_index of this EntityWithResolution.
        :param type: The type of this EntityWithResolution.
        :param resolution: The resolution of this EntityWithResolution.
        """
        self.openapi_types = {
            'end_index': float,
            'entity': str,
            'start_index': float,
            'type': str,
            'resolution': object
        }

        self.attribute_map = {
            'end_index': 'endIndex',
            'entity': 'entity',
            'start_index': 'startIndex',
            'type': 'type',
            'resolution': 'resolution'
        }

        self._end_index = end_index
        self._entity = entity
        self._start_index = start_index
        self._type = type
        self._resolution = resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityWithResolution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityWithResolution of this EntityWithResolution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_index(self):
        """Gets the end_index of this EntityWithResolution.

        The position of the last character of the matched entity within the utterance.

        :return: The end_index of this EntityWithResolution.
        :rtype: float
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this EntityWithResolution.

        The position of the last character of the matched entity within the utterance.

        :param end_index: The end_index of this EntityWithResolution.
        :type end_index: float
        """
        if end_index is None:
            raise ValueError("Invalid value for `end_index`, must not be `None`")

        self._end_index = end_index

    @property
    def entity(self):
        """Gets the entity of this EntityWithResolution.

        Name of the entity, as defined in LUIS.

        :return: The entity of this EntityWithResolution.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this EntityWithResolution.

        Name of the entity, as defined in LUIS.

        :param entity: The entity of this EntityWithResolution.
        :type entity: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity

    @property
    def start_index(self):
        """Gets the start_index of this EntityWithResolution.

        The position of the first character of the matched entity within the utterance.

        :return: The start_index of this EntityWithResolution.
        :rtype: float
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this EntityWithResolution.

        The position of the first character of the matched entity within the utterance.

        :param start_index: The start_index of this EntityWithResolution.
        :type start_index: float
        """
        if start_index is None:
            raise ValueError("Invalid value for `start_index`, must not be `None`")

        self._start_index = start_index

    @property
    def type(self):
        """Gets the type of this EntityWithResolution.

        Type of the entity, as defined in LUIS.

        :return: The type of this EntityWithResolution.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EntityWithResolution.

        Type of the entity, as defined in LUIS.

        :param type: The type of this EntityWithResolution.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def resolution(self):
        """Gets the resolution of this EntityWithResolution.

        Resolution values for pre-built LUIS entities.

        :return: The resolution of this EntityWithResolution.
        :rtype: object
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this EntityWithResolution.

        Resolution values for pre-built LUIS entities.

        :param resolution: The resolution of this EntityWithResolution.
        :type resolution: object
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")

        self._resolution = resolution
