# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.composite_child_model import CompositeChildModel
from openapi_server import util


class CompositeEntityModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[CompositeChildModel]=None, parent_type: str=None, value: str=None):
        """CompositeEntityModel - a model defined in OpenAPI

        :param children: The children of this CompositeEntityModel.
        :param parent_type: The parent_type of this CompositeEntityModel.
        :param value: The value of this CompositeEntityModel.
        """
        self.openapi_types = {
            'children': List[CompositeChildModel],
            'parent_type': str,
            'value': str
        }

        self.attribute_map = {
            'children': 'children',
            'parent_type': 'parentType',
            'value': 'value'
        }

        self._children = children
        self._parent_type = parent_type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompositeEntityModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompositeEntityModel of this CompositeEntityModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this CompositeEntityModel.

        Child entities.

        :return: The children of this CompositeEntityModel.
        :rtype: List[CompositeChildModel]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this CompositeEntityModel.

        Child entities.

        :param children: The children of this CompositeEntityModel.
        :type children: List[CompositeChildModel]
        """
        if children is None:
            raise ValueError("Invalid value for `children`, must not be `None`")

        self._children = children

    @property
    def parent_type(self):
        """Gets the parent_type of this CompositeEntityModel.

        Type/name of parent entity.

        :return: The parent_type of this CompositeEntityModel.
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this CompositeEntityModel.

        Type/name of parent entity.

        :param parent_type: The parent_type of this CompositeEntityModel.
        :type parent_type: str
        """
        if parent_type is None:
            raise ValueError("Invalid value for `parent_type`, must not be `None`")

        self._parent_type = parent_type

    @property
    def value(self):
        """Gets the value of this CompositeEntityModel.

        Value for composite entity extracted by LUIS.

        :return: The value of this CompositeEntityModel.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CompositeEntityModel.

        Value for composite entity extracted by LUIS.

        :param value: The value of this CompositeEntityModel.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
