# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.composite_entity_model import CompositeEntityModel
from openapi_server.models.entity_model import EntityModel
from openapi_server.models.intent_model import IntentModel
from openapi_server.models.sentiment import Sentiment
from openapi_server import util


class LuisResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, altered_query: str=None, composite_entities: List[CompositeEntityModel]=None, entities: List[EntityModel]=None, intents: List[IntentModel]=None, query: str=None, sentiment_analysis: Sentiment=None, top_scoring_intent: IntentModel=None):
        """LuisResult - a model defined in OpenAPI

        :param altered_query: The altered_query of this LuisResult.
        :param composite_entities: The composite_entities of this LuisResult.
        :param entities: The entities of this LuisResult.
        :param intents: The intents of this LuisResult.
        :param query: The query of this LuisResult.
        :param sentiment_analysis: The sentiment_analysis of this LuisResult.
        :param top_scoring_intent: The top_scoring_intent of this LuisResult.
        """
        self.openapi_types = {
            'altered_query': str,
            'composite_entities': List[CompositeEntityModel],
            'entities': List[EntityModel],
            'intents': List[IntentModel],
            'query': str,
            'sentiment_analysis': Sentiment,
            'top_scoring_intent': IntentModel
        }

        self.attribute_map = {
            'altered_query': 'alteredQuery',
            'composite_entities': 'compositeEntities',
            'entities': 'entities',
            'intents': 'intents',
            'query': 'query',
            'sentiment_analysis': 'sentimentAnalysis',
            'top_scoring_intent': 'topScoringIntent'
        }

        self._altered_query = altered_query
        self._composite_entities = composite_entities
        self._entities = entities
        self._intents = intents
        self._query = query
        self._sentiment_analysis = sentiment_analysis
        self._top_scoring_intent = top_scoring_intent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LuisResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LuisResult of this LuisResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def altered_query(self):
        """Gets the altered_query of this LuisResult.

        The corrected utterance (when spell checking was enabled).

        :return: The altered_query of this LuisResult.
        :rtype: str
        """
        return self._altered_query

    @altered_query.setter
    def altered_query(self, altered_query):
        """Sets the altered_query of this LuisResult.

        The corrected utterance (when spell checking was enabled).

        :param altered_query: The altered_query of this LuisResult.
        :type altered_query: str
        """

        self._altered_query = altered_query

    @property
    def composite_entities(self):
        """Gets the composite_entities of this LuisResult.

        The composite entities extracted from the utterance.

        :return: The composite_entities of this LuisResult.
        :rtype: List[CompositeEntityModel]
        """
        return self._composite_entities

    @composite_entities.setter
    def composite_entities(self, composite_entities):
        """Sets the composite_entities of this LuisResult.

        The composite entities extracted from the utterance.

        :param composite_entities: The composite_entities of this LuisResult.
        :type composite_entities: List[CompositeEntityModel]
        """

        self._composite_entities = composite_entities

    @property
    def entities(self):
        """Gets the entities of this LuisResult.

        The entities extracted from the utterance.

        :return: The entities of this LuisResult.
        :rtype: List[EntityModel]
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this LuisResult.

        The entities extracted from the utterance.

        :param entities: The entities of this LuisResult.
        :type entities: List[EntityModel]
        """

        self._entities = entities

    @property
    def intents(self):
        """Gets the intents of this LuisResult.

        All the intents (and their score) that were detected from utterance.

        :return: The intents of this LuisResult.
        :rtype: List[IntentModel]
        """
        return self._intents

    @intents.setter
    def intents(self, intents):
        """Sets the intents of this LuisResult.

        All the intents (and their score) that were detected from utterance.

        :param intents: The intents of this LuisResult.
        :type intents: List[IntentModel]
        """

        self._intents = intents

    @property
    def query(self):
        """Gets the query of this LuisResult.

        The input utterance that was analized.

        :return: The query of this LuisResult.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this LuisResult.

        The input utterance that was analized.

        :param query: The query of this LuisResult.
        :type query: str
        """

        self._query = query

    @property
    def sentiment_analysis(self):
        """Gets the sentiment_analysis of this LuisResult.


        :return: The sentiment_analysis of this LuisResult.
        :rtype: Sentiment
        """
        return self._sentiment_analysis

    @sentiment_analysis.setter
    def sentiment_analysis(self, sentiment_analysis):
        """Sets the sentiment_analysis of this LuisResult.


        :param sentiment_analysis: The sentiment_analysis of this LuisResult.
        :type sentiment_analysis: Sentiment
        """

        self._sentiment_analysis = sentiment_analysis

    @property
    def top_scoring_intent(self):
        """Gets the top_scoring_intent of this LuisResult.


        :return: The top_scoring_intent of this LuisResult.
        :rtype: IntentModel
        """
        return self._top_scoring_intent

    @top_scoring_intent.setter
    def top_scoring_intent(self, top_scoring_intent):
        """Sets the top_scoring_intent of this LuisResult.


        :param top_scoring_intent: The top_scoring_intent of this LuisResult.
        :type top_scoring_intent: IntentModel
        """

        self._top_scoring_intent = top_scoring_intent
