# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IntentModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent: str=None, score: float=None):
        """IntentModel - a model defined in OpenAPI

        :param intent: The intent of this IntentModel.
        :param score: The score of this IntentModel.
        """
        self.openapi_types = {
            'intent': str,
            'score': float
        }

        self.attribute_map = {
            'intent': 'intent',
            'score': 'score'
        }

        self._intent = intent
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntentModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntentModel of this IntentModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent(self):
        """Gets the intent of this IntentModel.

        Name of the intent, as defined in LUIS.

        :return: The intent of this IntentModel.
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent):
        """Sets the intent of this IntentModel.

        Name of the intent, as defined in LUIS.

        :param intent: The intent of this IntentModel.
        :type intent: str
        """

        self._intent = intent

    @property
    def score(self):
        """Gets the score of this IntentModel.

        Associated prediction score for the intent (float).

        :return: The score of this IntentModel.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this IntentModel.

        Associated prediction score for the intent (float).

        :param score: The score of this IntentModel.
        :type score: float
        """
        if score is not None and score > 1:
            raise ValueError("Invalid value for `score`, must be a value less than or equal to `1`")
        if score is not None and score < 0:
            raise ValueError("Invalid value for `score`, must be a value greater than or equal to `0`")

        self._score = score
