/**
 * Mixed Reality
 * Mixed Reality Resource Provider Remote Rendering Resource API
 *
 * The version of the OpenAPI document: 2019-12-02-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RemoteRenderingAccount from '../model/RemoteRenderingAccount';
import RemoteRenderingAccountPage from '../model/RemoteRenderingAccountPage';
import RemoteRenderingAccountsListBySubscriptionDefaultResponse from '../model/RemoteRenderingAccountsListBySubscriptionDefaultResponse';

/**
* Resource service.
* @module api/ResourceApi
* @version 2019-12-02-preview
*/
export default class ResourceApi {

    /**
    * Constructs a new ResourceApi. 
    * @alias module:api/ResourceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the remoteRenderingAccountsCreate operation.
     * @callback module:api/ResourceApi~remoteRenderingAccountsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteRenderingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creating or Updating a Remote Rendering Account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Name of an Mixed Reality Account.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/RemoteRenderingAccount} remoteRenderingAccount Remote Rendering Account parameter.
     * @param {module:api/ResourceApi~remoteRenderingAccountsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteRenderingAccount}
     */
    remoteRenderingAccountsCreate(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, callback) {
      let postBody = remoteRenderingAccount;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling remoteRenderingAccountsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsCreate");
      }
      // verify the required parameter 'remoteRenderingAccount' is set
      if (remoteRenderingAccount === undefined || remoteRenderingAccount === null) {
        throw new Error("Missing the required parameter 'remoteRenderingAccount' when calling remoteRenderingAccountsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoteRenderingAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remoteRenderingAccountsDelete operation.
     * @callback module:api/ResourceApi~remoteRenderingAccountsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Remote Rendering Account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Name of an Mixed Reality Account.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ResourceApi~remoteRenderingAccountsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    remoteRenderingAccountsDelete(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling remoteRenderingAccountsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remoteRenderingAccountsGet operation.
     * @callback module:api/ResourceApi~remoteRenderingAccountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteRenderingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Remote Rendering Account.
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Name of an Mixed Reality Account.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ResourceApi~remoteRenderingAccountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteRenderingAccount}
     */
    remoteRenderingAccountsGet(subscriptionId, resourceGroupName, accountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling remoteRenderingAccountsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteRenderingAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remoteRenderingAccountsListByResourceGroup operation.
     * @callback module:api/ResourceApi~remoteRenderingAccountsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteRenderingAccountPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Resources by Resource Group
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ResourceApi~remoteRenderingAccountsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteRenderingAccountPage}
     */
    remoteRenderingAccountsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteRenderingAccountPage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remoteRenderingAccountsListBySubscription operation.
     * @callback module:api/ResourceApi~remoteRenderingAccountsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteRenderingAccountPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Remote Rendering Accounts by Subscription
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ResourceApi~remoteRenderingAccountsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteRenderingAccountPage}
     */
    remoteRenderingAccountsListBySubscription(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteRenderingAccountPage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.MixedReality/remoteRenderingAccounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the remoteRenderingAccountsUpdate operation.
     * @callback module:api/ResourceApi~remoteRenderingAccountsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteRenderingAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updating a Remote Rendering Account
     * @param {String} subscriptionId Azure subscription ID.
     * @param {String} resourceGroupName Name of an Azure resource group.
     * @param {String} accountName Name of an Mixed Reality Account.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/RemoteRenderingAccount} remoteRenderingAccount Remote Rendering Account parameter.
     * @param {module:api/ResourceApi~remoteRenderingAccountsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteRenderingAccount}
     */
    remoteRenderingAccountsUpdate(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, callback) {
      let postBody = remoteRenderingAccount;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsUpdate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling remoteRenderingAccountsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsUpdate");
      }
      // verify the required parameter 'remoteRenderingAccount' is set
      if (remoteRenderingAccount === undefined || remoteRenderingAccount === null) {
        throw new Error("Missing the required parameter 'remoteRenderingAccount' when calling remoteRenderingAccountsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoteRenderingAccount;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
