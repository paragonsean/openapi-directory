/*
 * Mixed Reality
 * Mixed Reality Resource Provider Remote Rendering Resource API
 *
 * The version of the OpenAPI document: 2019-12-02-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RemoteRenderingAccount;
import org.openapitools.client.model.RemoteRenderingAccountPage;
import org.openapitools.client.model.RemoteRenderingAccountsListBySubscriptionDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for remoteRenderingAccountsCreate
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remoteRenderingAccount;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remoteRenderingAccountsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling remoteRenderingAccountsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsCreate(Async)");
        }

        // verify the required parameter 'remoteRenderingAccount' is set
        if (remoteRenderingAccount == null) {
            throw new ApiException("Missing the required parameter 'remoteRenderingAccount' when calling remoteRenderingAccountsCreate(Async)");
        }

        return remoteRenderingAccountsCreateCall(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, _callback);

    }

    /**
     * 
     * Creating or Updating a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @return RemoteRenderingAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoteRenderingAccount remoteRenderingAccountsCreate(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount) throws ApiException {
        ApiResponse<RemoteRenderingAccount> localVarResp = remoteRenderingAccountsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount);
        return localVarResp.getData();
    }

    /**
     * 
     * Creating or Updating a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @return ApiResponse&lt;RemoteRenderingAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoteRenderingAccount> remoteRenderingAccountsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount) throws ApiException {
        okhttp3.Call localVarCall = remoteRenderingAccountsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, null);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creating or Updating a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount, final ApiCallback<RemoteRenderingAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = remoteRenderingAccountsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, _callback);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remoteRenderingAccountsDelete
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remoteRenderingAccountsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling remoteRenderingAccountsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsDelete(Async)");
        }

        return remoteRenderingAccountsDeleteCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Delete a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void remoteRenderingAccountsDelete(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        remoteRenderingAccountsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
    }

    /**
     * 
     * Delete a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> remoteRenderingAccountsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remoteRenderingAccountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = remoteRenderingAccountsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for remoteRenderingAccountsGet
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsGetCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remoteRenderingAccountsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling remoteRenderingAccountsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsGet(Async)");
        }

        return remoteRenderingAccountsGetCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);

    }

    /**
     * 
     * Retrieve a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return RemoteRenderingAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoteRenderingAccount remoteRenderingAccountsGet(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        ApiResponse<RemoteRenderingAccount> localVarResp = remoteRenderingAccountsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;RemoteRenderingAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoteRenderingAccount> remoteRenderingAccountsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remoteRenderingAccountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a Remote Rendering Account.
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, final ApiCallback<RemoteRenderingAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = remoteRenderingAccountsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remoteRenderingAccountsListByResourceGroup
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remoteRenderingAccountsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsListByResourceGroup(Async)");
        }

        return remoteRenderingAccountsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * List Resources by Resource Group
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return RemoteRenderingAccountPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoteRenderingAccountPage remoteRenderingAccountsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<RemoteRenderingAccountPage> localVarResp = remoteRenderingAccountsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List Resources by Resource Group
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;RemoteRenderingAccountPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoteRenderingAccountPage> remoteRenderingAccountsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remoteRenderingAccountsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccountPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Resources by Resource Group
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<RemoteRenderingAccountPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = remoteRenderingAccountsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccountPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remoteRenderingAccountsListBySubscription
     * @param subscriptionId Azure subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsListBySubscriptionCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.MixedReality/remoteRenderingAccounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remoteRenderingAccountsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsListBySubscription(Async)");
        }

        return remoteRenderingAccountsListBySubscriptionCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * List Remote Rendering Accounts by Subscription
     * @param subscriptionId Azure subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return RemoteRenderingAccountPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoteRenderingAccountPage remoteRenderingAccountsListBySubscription(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<RemoteRenderingAccountPage> localVarResp = remoteRenderingAccountsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List Remote Rendering Accounts by Subscription
     * @param subscriptionId Azure subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;RemoteRenderingAccountPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoteRenderingAccountPage> remoteRenderingAccountsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = remoteRenderingAccountsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccountPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List Remote Rendering Accounts by Subscription
     * @param subscriptionId Azure subscription ID. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsListBySubscriptionAsync(String subscriptionId, String apiVersion, final ApiCallback<RemoteRenderingAccountPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = remoteRenderingAccountsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccountPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for remoteRenderingAccountsUpdate
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsUpdateCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remoteRenderingAccount;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MixedReality/remoteRenderingAccounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call remoteRenderingAccountsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling remoteRenderingAccountsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling remoteRenderingAccountsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling remoteRenderingAccountsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling remoteRenderingAccountsUpdate(Async)");
        }

        // verify the required parameter 'remoteRenderingAccount' is set
        if (remoteRenderingAccount == null) {
            throw new ApiException("Missing the required parameter 'remoteRenderingAccount' when calling remoteRenderingAccountsUpdate(Async)");
        }

        return remoteRenderingAccountsUpdateCall(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, _callback);

    }

    /**
     * 
     * Updating a Remote Rendering Account
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @return RemoteRenderingAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RemoteRenderingAccount remoteRenderingAccountsUpdate(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount) throws ApiException {
        ApiResponse<RemoteRenderingAccount> localVarResp = remoteRenderingAccountsUpdateWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount);
        return localVarResp.getData();
    }

    /**
     * 
     * Updating a Remote Rendering Account
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @return ApiResponse&lt;RemoteRenderingAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RemoteRenderingAccount> remoteRenderingAccountsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount) throws ApiException {
        okhttp3.Call localVarCall = remoteRenderingAccountsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, null);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updating a Remote Rendering Account
     * @param subscriptionId Azure subscription ID. (required)
     * @param resourceGroupName Name of an Azure resource group. (required)
     * @param accountName Name of an Mixed Reality Account. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param remoteRenderingAccount Remote Rendering Account parameter. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call remoteRenderingAccountsUpdateAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, RemoteRenderingAccount remoteRenderingAccount, final ApiCallback<RemoteRenderingAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = remoteRenderingAccountsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, remoteRenderingAccount, _callback);
        Type localVarReturnType = new TypeToken<RemoteRenderingAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
