/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the version resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.252324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VersionProperties {
  public static final String SERIALIZED_NAME_APP_PACKAGE_URL = "appPackageUrl";
  @SerializedName(SERIALIZED_NAME_APP_PACKAGE_URL)
  private String appPackageUrl;

  public static final String SERIALIZED_NAME_DEFAULT_PARAMETER_LIST = "defaultParameterList";
  @SerializedName(SERIALIZED_NAME_DEFAULT_PARAMETER_LIST)
  private List<ApplicationParameter> defaultParameterList = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public VersionProperties() {
  }

  public VersionProperties(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public VersionProperties appPackageUrl(String appPackageUrl) {
    this.appPackageUrl = appPackageUrl;
    return this;
  }

  /**
   * The URL to the application package
   * @return appPackageUrl
   */
  @javax.annotation.Nonnull
  public String getAppPackageUrl() {
    return appPackageUrl;
  }

  public void setAppPackageUrl(String appPackageUrl) {
    this.appPackageUrl = appPackageUrl;
  }


  public VersionProperties defaultParameterList(List<ApplicationParameter> defaultParameterList) {
    this.defaultParameterList = defaultParameterList;
    return this;
  }

  public VersionProperties addDefaultParameterListItem(ApplicationParameter defaultParameterListItem) {
    if (this.defaultParameterList == null) {
      this.defaultParameterList = new ArrayList<>();
    }
    this.defaultParameterList.add(defaultParameterListItem);
    return this;
  }

  /**
   * List of application type parameters that can be overridden when creating or updating the application.
   * @return defaultParameterList
   */
  @javax.annotation.Nullable
  public List<ApplicationParameter> getDefaultParameterList() {
    return defaultParameterList;
  }

  public void setDefaultParameterList(List<ApplicationParameter> defaultParameterList) {
    this.defaultParameterList = defaultParameterList;
  }


  /**
   * The current deployment or provisioning state, which only appears in the response
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionProperties versionProperties = (VersionProperties) o;
    return Objects.equals(this.appPackageUrl, versionProperties.appPackageUrl) &&
        Objects.equals(this.defaultParameterList, versionProperties.defaultParameterList) &&
        Objects.equals(this.provisioningState, versionProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appPackageUrl, defaultParameterList, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionProperties {\n");
    sb.append("    appPackageUrl: ").append(toIndentedString(appPackageUrl)).append("\n");
    sb.append("    defaultParameterList: ").append(toIndentedString(defaultParameterList)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appPackageUrl");
    openapiFields.add("defaultParameterList");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("appPackageUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VersionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VersionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VersionProperties is not found in the empty JSON string", VersionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VersionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VersionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VersionProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("appPackageUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appPackageUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appPackageUrl").toString()));
      }
      if (jsonObj.get("defaultParameterList") != null && !jsonObj.get("defaultParameterList").isJsonNull()) {
        JsonArray jsonArraydefaultParameterList = jsonObj.getAsJsonArray("defaultParameterList");
        if (jsonArraydefaultParameterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defaultParameterList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defaultParameterList` to be an array in the JSON string but got `%s`", jsonObj.get("defaultParameterList").toString()));
          }

          // validate the optional field `defaultParameterList` (array)
          for (int i = 0; i < jsonArraydefaultParameterList.size(); i++) {
            ApplicationParameter.validateJsonElement(jsonArraydefaultParameterList.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VersionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VersionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VersionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VersionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VersionProperties>() {
           @Override
           public void write(JsonWriter out, VersionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VersionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VersionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VersionProperties
   * @throws IOException if the JSON string is invalid with respect to VersionProperties
   */
  public static VersionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VersionProperties.class);
  }

  /**
   * Convert an instance of VersionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

