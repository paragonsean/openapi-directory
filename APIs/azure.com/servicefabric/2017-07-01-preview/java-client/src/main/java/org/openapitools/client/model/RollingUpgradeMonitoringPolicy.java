/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The policy used for monitoring the application upgrade
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.252324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RollingUpgradeMonitoringPolicy {
  public static final String SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT = "healthCheckRetryTimeout";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT)
  private String healthCheckRetryTimeout = "PT0H10M0S";

  public static final String SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION = "healthCheckStableDuration";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION)
  private String healthCheckStableDuration = "PT0H2M0S";

  public static final String SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION = "healthCheckWaitDuration";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION)
  private String healthCheckWaitDuration = "0";

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT = "upgradeDomainTimeout";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT)
  private String upgradeDomainTimeout = "P10675199DT02H48M05.4775807S";

  public static final String SERIALIZED_NAME_UPGRADE_TIMEOUT = "upgradeTimeout";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TIMEOUT)
  private String upgradeTimeout = "P10675199DT02H48M05.4775807S";

  public RollingUpgradeMonitoringPolicy() {
  }

  public RollingUpgradeMonitoringPolicy healthCheckRetryTimeout(String healthCheckRetryTimeout) {
    this.healthCheckRetryTimeout = healthCheckRetryTimeout;
    return this;
  }

  /**
   * The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return healthCheckRetryTimeout
   */
  @javax.annotation.Nullable
  public String getHealthCheckRetryTimeout() {
    return healthCheckRetryTimeout;
  }

  public void setHealthCheckRetryTimeout(String healthCheckRetryTimeout) {
    this.healthCheckRetryTimeout = healthCheckRetryTimeout;
  }


  public RollingUpgradeMonitoringPolicy healthCheckStableDuration(String healthCheckStableDuration) {
    this.healthCheckStableDuration = healthCheckStableDuration;
    return this;
  }

  /**
   * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return healthCheckStableDuration
   */
  @javax.annotation.Nullable
  public String getHealthCheckStableDuration() {
    return healthCheckStableDuration;
  }

  public void setHealthCheckStableDuration(String healthCheckStableDuration) {
    this.healthCheckStableDuration = healthCheckStableDuration;
  }


  public RollingUpgradeMonitoringPolicy healthCheckWaitDuration(String healthCheckWaitDuration) {
    this.healthCheckWaitDuration = healthCheckWaitDuration;
    return this;
  }

  /**
   * The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return healthCheckWaitDuration
   */
  @javax.annotation.Nullable
  public String getHealthCheckWaitDuration() {
    return healthCheckWaitDuration;
  }

  public void setHealthCheckWaitDuration(String healthCheckWaitDuration) {
    this.healthCheckWaitDuration = healthCheckWaitDuration;
  }


  public RollingUpgradeMonitoringPolicy upgradeDomainTimeout(String upgradeDomainTimeout) {
    this.upgradeDomainTimeout = upgradeDomainTimeout;
    return this;
  }

  /**
   * The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return upgradeDomainTimeout
   */
  @javax.annotation.Nullable
  public String getUpgradeDomainTimeout() {
    return upgradeDomainTimeout;
  }

  public void setUpgradeDomainTimeout(String upgradeDomainTimeout) {
    this.upgradeDomainTimeout = upgradeDomainTimeout;
  }


  public RollingUpgradeMonitoringPolicy upgradeTimeout(String upgradeTimeout) {
    this.upgradeTimeout = upgradeTimeout;
    return this;
  }

  /**
   * The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
   * @return upgradeTimeout
   */
  @javax.annotation.Nullable
  public String getUpgradeTimeout() {
    return upgradeTimeout;
  }

  public void setUpgradeTimeout(String upgradeTimeout) {
    this.upgradeTimeout = upgradeTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RollingUpgradeMonitoringPolicy rollingUpgradeMonitoringPolicy = (RollingUpgradeMonitoringPolicy) o;
    return Objects.equals(this.healthCheckRetryTimeout, rollingUpgradeMonitoringPolicy.healthCheckRetryTimeout) &&
        Objects.equals(this.healthCheckStableDuration, rollingUpgradeMonitoringPolicy.healthCheckStableDuration) &&
        Objects.equals(this.healthCheckWaitDuration, rollingUpgradeMonitoringPolicy.healthCheckWaitDuration) &&
        Objects.equals(this.upgradeDomainTimeout, rollingUpgradeMonitoringPolicy.upgradeDomainTimeout) &&
        Objects.equals(this.upgradeTimeout, rollingUpgradeMonitoringPolicy.upgradeTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, upgradeDomainTimeout, upgradeTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RollingUpgradeMonitoringPolicy {\n");
    sb.append("    healthCheckRetryTimeout: ").append(toIndentedString(healthCheckRetryTimeout)).append("\n");
    sb.append("    healthCheckStableDuration: ").append(toIndentedString(healthCheckStableDuration)).append("\n");
    sb.append("    healthCheckWaitDuration: ").append(toIndentedString(healthCheckWaitDuration)).append("\n");
    sb.append("    upgradeDomainTimeout: ").append(toIndentedString(upgradeDomainTimeout)).append("\n");
    sb.append("    upgradeTimeout: ").append(toIndentedString(upgradeTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("healthCheckRetryTimeout");
    openapiFields.add("healthCheckStableDuration");
    openapiFields.add("healthCheckWaitDuration");
    openapiFields.add("upgradeDomainTimeout");
    openapiFields.add("upgradeTimeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RollingUpgradeMonitoringPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RollingUpgradeMonitoringPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RollingUpgradeMonitoringPolicy is not found in the empty JSON string", RollingUpgradeMonitoringPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RollingUpgradeMonitoringPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RollingUpgradeMonitoringPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("healthCheckRetryTimeout") != null && !jsonObj.get("healthCheckRetryTimeout").isJsonNull()) && !jsonObj.get("healthCheckRetryTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckRetryTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckRetryTimeout").toString()));
      }
      if ((jsonObj.get("healthCheckStableDuration") != null && !jsonObj.get("healthCheckStableDuration").isJsonNull()) && !jsonObj.get("healthCheckStableDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckStableDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckStableDuration").toString()));
      }
      if ((jsonObj.get("healthCheckWaitDuration") != null && !jsonObj.get("healthCheckWaitDuration").isJsonNull()) && !jsonObj.get("healthCheckWaitDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthCheckWaitDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthCheckWaitDuration").toString()));
      }
      if ((jsonObj.get("upgradeDomainTimeout") != null && !jsonObj.get("upgradeDomainTimeout").isJsonNull()) && !jsonObj.get("upgradeDomainTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeDomainTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeDomainTimeout").toString()));
      }
      if ((jsonObj.get("upgradeTimeout") != null && !jsonObj.get("upgradeTimeout").isJsonNull()) && !jsonObj.get("upgradeTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradeTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradeTimeout").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RollingUpgradeMonitoringPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RollingUpgradeMonitoringPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RollingUpgradeMonitoringPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RollingUpgradeMonitoringPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<RollingUpgradeMonitoringPolicy>() {
           @Override
           public void write(JsonWriter out, RollingUpgradeMonitoringPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RollingUpgradeMonitoringPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RollingUpgradeMonitoringPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RollingUpgradeMonitoringPolicy
   * @throws IOException if the JSON string is invalid with respect to RollingUpgradeMonitoringPolicy
   */
  public static RollingUpgradeMonitoringPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RollingUpgradeMonitoringPolicy.class);
  }

  /**
   * Convert an instance of RollingUpgradeMonitoringPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

