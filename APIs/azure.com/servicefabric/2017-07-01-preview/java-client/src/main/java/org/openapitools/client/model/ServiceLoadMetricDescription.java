/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ServiceLoadMetricWeight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies a metric to load balance a service during runtime.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.252324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceLoadMetricDescription {
  public static final String SERIALIZED_NAME_DEFAULT_LOAD = "DefaultLoad";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LOAD)
  private Integer defaultLoad;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRIMARY_DEFAULT_LOAD = "PrimaryDefaultLoad";
  @SerializedName(SERIALIZED_NAME_PRIMARY_DEFAULT_LOAD)
  private Integer primaryDefaultLoad;

  public static final String SERIALIZED_NAME_SECONDARY_DEFAULT_LOAD = "SecondaryDefaultLoad";
  @SerializedName(SERIALIZED_NAME_SECONDARY_DEFAULT_LOAD)
  private Integer secondaryDefaultLoad;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private ServiceLoadMetricWeight weight;

  public ServiceLoadMetricDescription() {
  }

  public ServiceLoadMetricDescription defaultLoad(Integer defaultLoad) {
    this.defaultLoad = defaultLoad;
    return this;
  }

  /**
   * Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.
   * @return defaultLoad
   */
  @javax.annotation.Nullable
  public Integer getDefaultLoad() {
    return defaultLoad;
  }

  public void setDefaultLoad(Integer defaultLoad) {
    this.defaultLoad = defaultLoad;
  }


  public ServiceLoadMetricDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ServiceLoadMetricDescription primaryDefaultLoad(Integer primaryDefaultLoad) {
    this.primaryDefaultLoad = primaryDefaultLoad;
    return this;
  }

  /**
   * Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.
   * @return primaryDefaultLoad
   */
  @javax.annotation.Nullable
  public Integer getPrimaryDefaultLoad() {
    return primaryDefaultLoad;
  }

  public void setPrimaryDefaultLoad(Integer primaryDefaultLoad) {
    this.primaryDefaultLoad = primaryDefaultLoad;
  }


  public ServiceLoadMetricDescription secondaryDefaultLoad(Integer secondaryDefaultLoad) {
    this.secondaryDefaultLoad = secondaryDefaultLoad;
    return this;
  }

  /**
   * Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.
   * @return secondaryDefaultLoad
   */
  @javax.annotation.Nullable
  public Integer getSecondaryDefaultLoad() {
    return secondaryDefaultLoad;
  }

  public void setSecondaryDefaultLoad(Integer secondaryDefaultLoad) {
    this.secondaryDefaultLoad = secondaryDefaultLoad;
  }


  public ServiceLoadMetricDescription weight(ServiceLoadMetricWeight weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public ServiceLoadMetricWeight getWeight() {
    return weight;
  }

  public void setWeight(ServiceLoadMetricWeight weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceLoadMetricDescription serviceLoadMetricDescription = (ServiceLoadMetricDescription) o;
    return Objects.equals(this.defaultLoad, serviceLoadMetricDescription.defaultLoad) &&
        Objects.equals(this.name, serviceLoadMetricDescription.name) &&
        Objects.equals(this.primaryDefaultLoad, serviceLoadMetricDescription.primaryDefaultLoad) &&
        Objects.equals(this.secondaryDefaultLoad, serviceLoadMetricDescription.secondaryDefaultLoad) &&
        Objects.equals(this.weight, serviceLoadMetricDescription.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultLoad, name, primaryDefaultLoad, secondaryDefaultLoad, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceLoadMetricDescription {\n");
    sb.append("    defaultLoad: ").append(toIndentedString(defaultLoad)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryDefaultLoad: ").append(toIndentedString(primaryDefaultLoad)).append("\n");
    sb.append("    secondaryDefaultLoad: ").append(toIndentedString(secondaryDefaultLoad)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultLoad");
    openapiFields.add("Name");
    openapiFields.add("PrimaryDefaultLoad");
    openapiFields.add("SecondaryDefaultLoad");
    openapiFields.add("Weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceLoadMetricDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceLoadMetricDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceLoadMetricDescription is not found in the empty JSON string", ServiceLoadMetricDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceLoadMetricDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceLoadMetricDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceLoadMetricDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `Weight`
      if (jsonObj.get("Weight") != null && !jsonObj.get("Weight").isJsonNull()) {
        ServiceLoadMetricWeight.validateJsonElement(jsonObj.get("Weight"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceLoadMetricDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceLoadMetricDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceLoadMetricDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceLoadMetricDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceLoadMetricDescription>() {
           @Override
           public void write(JsonWriter out, ServiceLoadMetricDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceLoadMetricDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceLoadMetricDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceLoadMetricDescription
   * @throws IOException if the JSON string is invalid with respect to ServiceLoadMetricDescription
   */
  public static ServiceLoadMetricDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceLoadMetricDescription.class);
  }

  /**
   * Convert an instance of ServiceLoadMetricDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

