/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The service correlation scheme. Possible values are following.    - Invalid - An invalid correlation scheme. Cannot be used. The value is zero.   - Affinity - Indicates that this service has an affinity relationship with another service. Provided for backwards compatibility, consider preferring the Aligned or NonAlignedAffinity options. The value is 1.   - AlignedAffinity - Aligned affinity ensures that the primaries of the partitions of the affinitized services are collocated on the same nodes. This is the default and is the same as selecting the Affinity scheme. The value is 2.   - NonAlignedAffinity - Non-Aligned affinity guarantees that all replicas of each service will be placed on the same nodes. Unlike Aligned Affinity, this does not guarantee that replicas of particular role will be collocated. The value is 3. 
 */
@JsonAdapter(ServiceCorrelationScheme.Adapter.class)
public enum ServiceCorrelationScheme {
  
  INVALID("Invalid"),
  
  AFFINITY("Affinity"),
  
  ALIGNED_AFFINITY("AlignedAffinity"),
  
  NON_ALIGNED_AFFINITY("NonAlignedAffinity");

  private String value;

  ServiceCorrelationScheme(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ServiceCorrelationScheme fromValue(String value) {
    for (ServiceCorrelationScheme b : ServiceCorrelationScheme.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<ServiceCorrelationScheme> {
    @Override
    public void write(final JsonWriter jsonWriter, final ServiceCorrelationScheme enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ServiceCorrelationScheme read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ServiceCorrelationScheme.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    ServiceCorrelationScheme.fromValue(value);
  }
}

