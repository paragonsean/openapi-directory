/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The storage account information for storing Service Fabric diagnostic logs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:34.252324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DiagnosticsStorageAccountConfig {
  public static final String SERIALIZED_NAME_BLOB_ENDPOINT = "blobEndpoint";
  @SerializedName(SERIALIZED_NAME_BLOB_ENDPOINT)
  private String blobEndpoint;

  public static final String SERIALIZED_NAME_PROTECTED_ACCOUNT_KEY_NAME = "protectedAccountKeyName";
  @SerializedName(SERIALIZED_NAME_PROTECTED_ACCOUNT_KEY_NAME)
  private String protectedAccountKeyName;

  public static final String SERIALIZED_NAME_QUEUE_ENDPOINT = "queueEndpoint";
  @SerializedName(SERIALIZED_NAME_QUEUE_ENDPOINT)
  private String queueEndpoint;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_NAME = "storageAccountName";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_NAME)
  private String storageAccountName;

  public static final String SERIALIZED_NAME_TABLE_ENDPOINT = "tableEndpoint";
  @SerializedName(SERIALIZED_NAME_TABLE_ENDPOINT)
  private String tableEndpoint;

  public DiagnosticsStorageAccountConfig() {
  }

  public DiagnosticsStorageAccountConfig blobEndpoint(String blobEndpoint) {
    this.blobEndpoint = blobEndpoint;
    return this;
  }

  /**
   * The blob endpoint of the azure storage account.
   * @return blobEndpoint
   */
  @javax.annotation.Nonnull
  public String getBlobEndpoint() {
    return blobEndpoint;
  }

  public void setBlobEndpoint(String blobEndpoint) {
    this.blobEndpoint = blobEndpoint;
  }


  public DiagnosticsStorageAccountConfig protectedAccountKeyName(String protectedAccountKeyName) {
    this.protectedAccountKeyName = protectedAccountKeyName;
    return this;
  }

  /**
   * The protected diagnostics storage key name.
   * @return protectedAccountKeyName
   */
  @javax.annotation.Nonnull
  public String getProtectedAccountKeyName() {
    return protectedAccountKeyName;
  }

  public void setProtectedAccountKeyName(String protectedAccountKeyName) {
    this.protectedAccountKeyName = protectedAccountKeyName;
  }


  public DiagnosticsStorageAccountConfig queueEndpoint(String queueEndpoint) {
    this.queueEndpoint = queueEndpoint;
    return this;
  }

  /**
   * The queue endpoint of the azure storage account.
   * @return queueEndpoint
   */
  @javax.annotation.Nonnull
  public String getQueueEndpoint() {
    return queueEndpoint;
  }

  public void setQueueEndpoint(String queueEndpoint) {
    this.queueEndpoint = queueEndpoint;
  }


  public DiagnosticsStorageAccountConfig storageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
    return this;
  }

  /**
   * The Azure storage account name.
   * @return storageAccountName
   */
  @javax.annotation.Nonnull
  public String getStorageAccountName() {
    return storageAccountName;
  }

  public void setStorageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
  }


  public DiagnosticsStorageAccountConfig tableEndpoint(String tableEndpoint) {
    this.tableEndpoint = tableEndpoint;
    return this;
  }

  /**
   * The table endpoint of the azure storage account.
   * @return tableEndpoint
   */
  @javax.annotation.Nonnull
  public String getTableEndpoint() {
    return tableEndpoint;
  }

  public void setTableEndpoint(String tableEndpoint) {
    this.tableEndpoint = tableEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiagnosticsStorageAccountConfig diagnosticsStorageAccountConfig = (DiagnosticsStorageAccountConfig) o;
    return Objects.equals(this.blobEndpoint, diagnosticsStorageAccountConfig.blobEndpoint) &&
        Objects.equals(this.protectedAccountKeyName, diagnosticsStorageAccountConfig.protectedAccountKeyName) &&
        Objects.equals(this.queueEndpoint, diagnosticsStorageAccountConfig.queueEndpoint) &&
        Objects.equals(this.storageAccountName, diagnosticsStorageAccountConfig.storageAccountName) &&
        Objects.equals(this.tableEndpoint, diagnosticsStorageAccountConfig.tableEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobEndpoint, protectedAccountKeyName, queueEndpoint, storageAccountName, tableEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiagnosticsStorageAccountConfig {\n");
    sb.append("    blobEndpoint: ").append(toIndentedString(blobEndpoint)).append("\n");
    sb.append("    protectedAccountKeyName: ").append(toIndentedString(protectedAccountKeyName)).append("\n");
    sb.append("    queueEndpoint: ").append(toIndentedString(queueEndpoint)).append("\n");
    sb.append("    storageAccountName: ").append(toIndentedString(storageAccountName)).append("\n");
    sb.append("    tableEndpoint: ").append(toIndentedString(tableEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobEndpoint");
    openapiFields.add("protectedAccountKeyName");
    openapiFields.add("queueEndpoint");
    openapiFields.add("storageAccountName");
    openapiFields.add("tableEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("blobEndpoint");
    openapiRequiredFields.add("protectedAccountKeyName");
    openapiRequiredFields.add("queueEndpoint");
    openapiRequiredFields.add("storageAccountName");
    openapiRequiredFields.add("tableEndpoint");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DiagnosticsStorageAccountConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DiagnosticsStorageAccountConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DiagnosticsStorageAccountConfig is not found in the empty JSON string", DiagnosticsStorageAccountConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DiagnosticsStorageAccountConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DiagnosticsStorageAccountConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DiagnosticsStorageAccountConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("blobEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobEndpoint").toString()));
      }
      if (!jsonObj.get("protectedAccountKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protectedAccountKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protectedAccountKeyName").toString()));
      }
      if (!jsonObj.get("queueEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queueEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queueEndpoint").toString()));
      }
      if (!jsonObj.get("storageAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountName").toString()));
      }
      if (!jsonObj.get("tableEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableEndpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DiagnosticsStorageAccountConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DiagnosticsStorageAccountConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DiagnosticsStorageAccountConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DiagnosticsStorageAccountConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<DiagnosticsStorageAccountConfig>() {
           @Override
           public void write(JsonWriter out, DiagnosticsStorageAccountConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DiagnosticsStorageAccountConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DiagnosticsStorageAccountConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DiagnosticsStorageAccountConfig
   * @throws IOException if the JSON string is invalid with respect to DiagnosticsStorageAccountConfig
   */
  public static DiagnosticsStorageAccountConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DiagnosticsStorageAccountConfig.class);
  }

  /**
   * Convert an instance of DiagnosticsStorageAccountConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

