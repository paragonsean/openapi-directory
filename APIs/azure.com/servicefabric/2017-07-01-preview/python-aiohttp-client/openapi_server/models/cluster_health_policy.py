# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterHealthPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_percent_unhealthy_applications: int=None, max_percent_unhealthy_nodes: int=None):
        """ClusterHealthPolicy - a model defined in OpenAPI

        :param max_percent_unhealthy_applications: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :param max_percent_unhealthy_nodes: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        """
        self.openapi_types = {
            'max_percent_unhealthy_applications': int,
            'max_percent_unhealthy_nodes': int
        }

        self.attribute_map = {
            'max_percent_unhealthy_applications': 'maxPercentUnhealthyApplications',
            'max_percent_unhealthy_nodes': 'maxPercentUnhealthyNodes'
        }

        self._max_percent_unhealthy_applications = max_percent_unhealthy_applications
        self._max_percent_unhealthy_nodes = max_percent_unhealthy_nodes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterHealthPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterHealthPolicy of this ClusterHealthPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_percent_unhealthy_applications(self):
        """Gets the max_percent_unhealthy_applications of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10. 

        :return: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_applications

    @max_percent_unhealthy_applications.setter
    def max_percent_unhealthy_applications(self, max_percent_unhealthy_applications):
        """Sets the max_percent_unhealthy_applications of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy applications before reporting an error. For example, to allow 10% of applications to be unhealthy, this value would be 10. 

        :param max_percent_unhealthy_applications: The max_percent_unhealthy_applications of this ClusterHealthPolicy.
        :type max_percent_unhealthy_applications: int
        """
        if max_percent_unhealthy_applications is not None and max_percent_unhealthy_applications > 100:
            raise ValueError("Invalid value for `max_percent_unhealthy_applications`, must be a value less than or equal to `100`")
        if max_percent_unhealthy_applications is not None and max_percent_unhealthy_applications < 0:
            raise ValueError("Invalid value for `max_percent_unhealthy_applications`, must be a value greater than or equal to `0`")

        self._max_percent_unhealthy_applications = max_percent_unhealthy_applications

    @property
    def max_percent_unhealthy_nodes(self):
        """Gets the max_percent_unhealthy_nodes of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10. 

        :return: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_nodes

    @max_percent_unhealthy_nodes.setter
    def max_percent_unhealthy_nodes(self, max_percent_unhealthy_nodes):
        """Sets the max_percent_unhealthy_nodes of this ClusterHealthPolicy.

        The maximum allowed percentage of unhealthy nodes before reporting an error. For example, to allow 10% of nodes to be unhealthy, this value would be 10. 

        :param max_percent_unhealthy_nodes: The max_percent_unhealthy_nodes of this ClusterHealthPolicy.
        :type max_percent_unhealthy_nodes: int
        """
        if max_percent_unhealthy_nodes is not None and max_percent_unhealthy_nodes > 100:
            raise ValueError("Invalid value for `max_percent_unhealthy_nodes`, must be a value less than or equal to `100`")
        if max_percent_unhealthy_nodes is not None and max_percent_unhealthy_nodes < 0:
            raise ValueError("Invalid value for `max_percent_unhealthy_nodes`, must be a value greater than or equal to `0`")

        self._max_percent_unhealthy_nodes = max_percent_unhealthy_nodes
