# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationMetricDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, maximum_capacity: int=None, name: str=None, reservation_capacity: int=None, total_application_capacity: int=None):
        """ApplicationMetricDescription - a model defined in OpenAPI

        :param maximum_capacity: The maximum_capacity of this ApplicationMetricDescription.
        :param name: The name of this ApplicationMetricDescription.
        :param reservation_capacity: The reservation_capacity of this ApplicationMetricDescription.
        :param total_application_capacity: The total_application_capacity of this ApplicationMetricDescription.
        """
        self.openapi_types = {
            'maximum_capacity': int,
            'name': str,
            'reservation_capacity': int,
            'total_application_capacity': int
        }

        self.attribute_map = {
            'maximum_capacity': 'MaximumCapacity',
            'name': 'Name',
            'reservation_capacity': 'ReservationCapacity',
            'total_application_capacity': 'TotalApplicationCapacity'
        }

        self._maximum_capacity = maximum_capacity
        self._name = name
        self._reservation_capacity = reservation_capacity
        self._total_application_capacity = total_application_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationMetricDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationMetricDescription of this ApplicationMetricDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def maximum_capacity(self):
        """Gets the maximum_capacity of this ApplicationMetricDescription.

        The maximum node capacity for Service Fabric application. This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value. If set to zero, capacity for this metric is unlimited on each node. When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. 

        :return: The maximum_capacity of this ApplicationMetricDescription.
        :rtype: int
        """
        return self._maximum_capacity

    @maximum_capacity.setter
    def maximum_capacity(self, maximum_capacity):
        """Sets the maximum_capacity of this ApplicationMetricDescription.

        The maximum node capacity for Service Fabric application. This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value. If set to zero, capacity for this metric is unlimited on each node. When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. 

        :param maximum_capacity: The maximum_capacity of this ApplicationMetricDescription.
        :type maximum_capacity: int
        """

        self._maximum_capacity = maximum_capacity

    @property
    def name(self):
        """Gets the name of this ApplicationMetricDescription.

        The name of the metric.

        :return: The name of this ApplicationMetricDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationMetricDescription.

        The name of the metric.

        :param name: The name of this ApplicationMetricDescription.
        :type name: str
        """

        self._name = name

    @property
    def reservation_capacity(self):
        """Gets the reservation_capacity of this ApplicationMetricDescription.

        The node reservation capacity for Service Fabric application. This is the amount of load which is reserved on nodes which have instances of this application. If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application. If set to zero, no capacity is reserved for this metric. When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric. 

        :return: The reservation_capacity of this ApplicationMetricDescription.
        :rtype: int
        """
        return self._reservation_capacity

    @reservation_capacity.setter
    def reservation_capacity(self, reservation_capacity):
        """Sets the reservation_capacity of this ApplicationMetricDescription.

        The node reservation capacity for Service Fabric application. This is the amount of load which is reserved on nodes which have instances of this application. If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application. If set to zero, no capacity is reserved for this metric. When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric. 

        :param reservation_capacity: The reservation_capacity of this ApplicationMetricDescription.
        :type reservation_capacity: int
        """

        self._reservation_capacity = reservation_capacity

    @property
    def total_application_capacity(self):
        """Gets the total_application_capacity of this ApplicationMetricDescription.

        The total metric capacity for Service Fabric application. This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value. When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value. 

        :return: The total_application_capacity of this ApplicationMetricDescription.
        :rtype: int
        """
        return self._total_application_capacity

    @total_application_capacity.setter
    def total_application_capacity(self, total_application_capacity):
        """Sets the total_application_capacity of this ApplicationMetricDescription.

        The total metric capacity for Service Fabric application. This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value. When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value. 

        :param total_application_capacity: The total_application_capacity of this ApplicationMetricDescription.
        :type total_application_capacity: int
        """

        self._total_application_capacity = total_application_capacity
