# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_parameter import ApplicationParameter
from openapi_server import util


class VersionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_package_url: str=None, default_parameter_list: List[ApplicationParameter]=None, provisioning_state: str=None):
        """VersionProperties - a model defined in OpenAPI

        :param app_package_url: The app_package_url of this VersionProperties.
        :param default_parameter_list: The default_parameter_list of this VersionProperties.
        :param provisioning_state: The provisioning_state of this VersionProperties.
        """
        self.openapi_types = {
            'app_package_url': str,
            'default_parameter_list': List[ApplicationParameter],
            'provisioning_state': str
        }

        self.attribute_map = {
            'app_package_url': 'appPackageUrl',
            'default_parameter_list': 'defaultParameterList',
            'provisioning_state': 'provisioningState'
        }

        self._app_package_url = app_package_url
        self._default_parameter_list = default_parameter_list
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VersionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VersionProperties of this VersionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_package_url(self):
        """Gets the app_package_url of this VersionProperties.

        The URL to the application package

        :return: The app_package_url of this VersionProperties.
        :rtype: str
        """
        return self._app_package_url

    @app_package_url.setter
    def app_package_url(self, app_package_url):
        """Sets the app_package_url of this VersionProperties.

        The URL to the application package

        :param app_package_url: The app_package_url of this VersionProperties.
        :type app_package_url: str
        """
        if app_package_url is None:
            raise ValueError("Invalid value for `app_package_url`, must not be `None`")

        self._app_package_url = app_package_url

    @property
    def default_parameter_list(self):
        """Gets the default_parameter_list of this VersionProperties.

        List of application type parameters that can be overridden when creating or updating the application.

        :return: The default_parameter_list of this VersionProperties.
        :rtype: List[ApplicationParameter]
        """
        return self._default_parameter_list

    @default_parameter_list.setter
    def default_parameter_list(self, default_parameter_list):
        """Sets the default_parameter_list of this VersionProperties.

        List of application type parameters that can be overridden when creating or updating the application.

        :param default_parameter_list: The default_parameter_list of this VersionProperties.
        :type default_parameter_list: List[ApplicationParameter]
        """

        self._default_parameter_list = default_parameter_list

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VersionProperties.

        The current deployment or provisioning state, which only appears in the response

        :return: The provisioning_state of this VersionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VersionProperties.

        The current deployment or provisioning state, which only appears in the response

        :param provisioning_state: The provisioning_state of this VersionProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
