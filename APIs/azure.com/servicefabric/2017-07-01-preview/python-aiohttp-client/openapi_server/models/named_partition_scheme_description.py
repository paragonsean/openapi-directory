# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_scheme import PartitionScheme
from openapi_server.models.partition_scheme_description import PartitionSchemeDescription
from openapi_server import util


class NamedPartitionSchemeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, names: List[str]=None, partition_scheme: PartitionScheme=None):
        """NamedPartitionSchemeDescription - a model defined in OpenAPI

        :param count: The count of this NamedPartitionSchemeDescription.
        :param names: The names of this NamedPartitionSchemeDescription.
        :param partition_scheme: The partition_scheme of this NamedPartitionSchemeDescription.
        """
        self.openapi_types = {
            'count': int,
            'names': List[str],
            'partition_scheme': PartitionScheme
        }

        self.attribute_map = {
            'count': 'Count',
            'names': 'Names',
            'partition_scheme': 'PartitionScheme'
        }

        self._count = count
        self._names = names
        self._partition_scheme = partition_scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamedPartitionSchemeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamedPartitionSchemeDescription of this NamedPartitionSchemeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this NamedPartitionSchemeDescription.

        The number of partitions.

        :return: The count of this NamedPartitionSchemeDescription.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NamedPartitionSchemeDescription.

        The number of partitions.

        :param count: The count of this NamedPartitionSchemeDescription.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def names(self):
        """Gets the names of this NamedPartitionSchemeDescription.

        Array of size specified by the ‘Count’ parameter, for the names of the partitions.

        :return: The names of this NamedPartitionSchemeDescription.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this NamedPartitionSchemeDescription.

        Array of size specified by the ‘Count’ parameter, for the names of the partitions.

        :param names: The names of this NamedPartitionSchemeDescription.
        :type names: List[str]
        """
        if names is None:
            raise ValueError("Invalid value for `names`, must not be `None`")

        self._names = names

    @property
    def partition_scheme(self):
        """Gets the partition_scheme of this NamedPartitionSchemeDescription.


        :return: The partition_scheme of this NamedPartitionSchemeDescription.
        :rtype: PartitionScheme
        """
        return self._partition_scheme

    @partition_scheme.setter
    def partition_scheme(self, partition_scheme):
        """Sets the partition_scheme of this NamedPartitionSchemeDescription.


        :param partition_scheme: The partition_scheme of this NamedPartitionSchemeDescription.
        :type partition_scheme: PartitionScheme
        """
        if partition_scheme is None:
            raise ValueError("Invalid value for `partition_scheme`, must not be `None`")

        self._partition_scheme = partition_scheme
