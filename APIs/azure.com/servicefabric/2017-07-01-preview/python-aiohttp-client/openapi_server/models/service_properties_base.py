# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_cost import MoveCost
from openapi_server.models.service_correlation_description import ServiceCorrelationDescription
from openapi_server.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_server.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_server import util


class ServicePropertiesBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correlation_scheme: List[ServiceCorrelationDescription]=None, default_move_cost: MoveCost=None, placement_constraints: str=None, service_load_metrics: List[ServiceLoadMetricDescription]=None, service_placement_policies: List[ServicePlacementPolicyDescription]=None):
        """ServicePropertiesBase - a model defined in OpenAPI

        :param correlation_scheme: The correlation_scheme of this ServicePropertiesBase.
        :param default_move_cost: The default_move_cost of this ServicePropertiesBase.
        :param placement_constraints: The placement_constraints of this ServicePropertiesBase.
        :param service_load_metrics: The service_load_metrics of this ServicePropertiesBase.
        :param service_placement_policies: The service_placement_policies of this ServicePropertiesBase.
        """
        self.openapi_types = {
            'correlation_scheme': List[ServiceCorrelationDescription],
            'default_move_cost': MoveCost,
            'placement_constraints': str,
            'service_load_metrics': List[ServiceLoadMetricDescription],
            'service_placement_policies': List[ServicePlacementPolicyDescription]
        }

        self.attribute_map = {
            'correlation_scheme': 'correlationScheme',
            'default_move_cost': 'defaultMoveCost',
            'placement_constraints': 'placementConstraints',
            'service_load_metrics': 'serviceLoadMetrics',
            'service_placement_policies': 'servicePlacementPolicies'
        }

        self._correlation_scheme = correlation_scheme
        self._default_move_cost = default_move_cost
        self._placement_constraints = placement_constraints
        self._service_load_metrics = service_load_metrics
        self._service_placement_policies = service_placement_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicePropertiesBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicePropertiesBase of this ServicePropertiesBase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correlation_scheme(self):
        """Gets the correlation_scheme of this ServicePropertiesBase.

        A list that describes the correlation of the service with other services.

        :return: The correlation_scheme of this ServicePropertiesBase.
        :rtype: List[ServiceCorrelationDescription]
        """
        return self._correlation_scheme

    @correlation_scheme.setter
    def correlation_scheme(self, correlation_scheme):
        """Sets the correlation_scheme of this ServicePropertiesBase.

        A list that describes the correlation of the service with other services.

        :param correlation_scheme: The correlation_scheme of this ServicePropertiesBase.
        :type correlation_scheme: List[ServiceCorrelationDescription]
        """

        self._correlation_scheme = correlation_scheme

    @property
    def default_move_cost(self):
        """Gets the default_move_cost of this ServicePropertiesBase.


        :return: The default_move_cost of this ServicePropertiesBase.
        :rtype: MoveCost
        """
        return self._default_move_cost

    @default_move_cost.setter
    def default_move_cost(self, default_move_cost):
        """Sets the default_move_cost of this ServicePropertiesBase.


        :param default_move_cost: The default_move_cost of this ServicePropertiesBase.
        :type default_move_cost: MoveCost
        """

        self._default_move_cost = default_move_cost

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this ServicePropertiesBase.

        The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".

        :return: The placement_constraints of this ServicePropertiesBase.
        :rtype: str
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this ServicePropertiesBase.

        The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".

        :param placement_constraints: The placement_constraints of this ServicePropertiesBase.
        :type placement_constraints: str
        """

        self._placement_constraints = placement_constraints

    @property
    def service_load_metrics(self):
        """Gets the service_load_metrics of this ServicePropertiesBase.

        The service load metrics is given as an array of ServiceLoadMetricDescription objects.

        :return: The service_load_metrics of this ServicePropertiesBase.
        :rtype: List[ServiceLoadMetricDescription]
        """
        return self._service_load_metrics

    @service_load_metrics.setter
    def service_load_metrics(self, service_load_metrics):
        """Sets the service_load_metrics of this ServicePropertiesBase.

        The service load metrics is given as an array of ServiceLoadMetricDescription objects.

        :param service_load_metrics: The service_load_metrics of this ServicePropertiesBase.
        :type service_load_metrics: List[ServiceLoadMetricDescription]
        """

        self._service_load_metrics = service_load_metrics

    @property
    def service_placement_policies(self):
        """Gets the service_placement_policies of this ServicePropertiesBase.

        A list that describes the correlation of the service with other services.

        :return: The service_placement_policies of this ServicePropertiesBase.
        :rtype: List[ServicePlacementPolicyDescription]
        """
        return self._service_placement_policies

    @service_placement_policies.setter
    def service_placement_policies(self, service_placement_policies):
        """Sets the service_placement_policies of this ServicePropertiesBase.

        A list that describes the correlation of the service with other services.

        :param service_placement_policies: The service_placement_policies of this ServicePropertiesBase.
        :type service_placement_policies: List[ServicePlacementPolicyDescription]
        """

        self._service_placement_policies = service_placement_policies
