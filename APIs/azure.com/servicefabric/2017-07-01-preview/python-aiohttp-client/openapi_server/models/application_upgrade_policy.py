# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy import ApplicationHealthPolicy
from openapi_server.models.rolling_upgrade_monitoring_policy import RollingUpgradeMonitoringPolicy
from openapi_server import util


class ApplicationUpgradePolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policy: ApplicationHealthPolicy=None, force_restart: bool=False, rolling_upgrade_monitoring_policy: RollingUpgradeMonitoringPolicy=None, upgrade_replica_set_check_timeout: int=None):
        """ApplicationUpgradePolicy - a model defined in OpenAPI

        :param application_health_policy: The application_health_policy of this ApplicationUpgradePolicy.
        :param force_restart: The force_restart of this ApplicationUpgradePolicy.
        :param rolling_upgrade_monitoring_policy: The rolling_upgrade_monitoring_policy of this ApplicationUpgradePolicy.
        :param upgrade_replica_set_check_timeout: The upgrade_replica_set_check_timeout of this ApplicationUpgradePolicy.
        """
        self.openapi_types = {
            'application_health_policy': ApplicationHealthPolicy,
            'force_restart': bool,
            'rolling_upgrade_monitoring_policy': RollingUpgradeMonitoringPolicy,
            'upgrade_replica_set_check_timeout': int
        }

        self.attribute_map = {
            'application_health_policy': 'applicationHealthPolicy',
            'force_restart': 'forceRestart',
            'rolling_upgrade_monitoring_policy': 'rollingUpgradeMonitoringPolicy',
            'upgrade_replica_set_check_timeout': 'upgradeReplicaSetCheckTimeout'
        }

        self._application_health_policy = application_health_policy
        self._force_restart = force_restart
        self._rolling_upgrade_monitoring_policy = rolling_upgrade_monitoring_policy
        self._upgrade_replica_set_check_timeout = upgrade_replica_set_check_timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationUpgradePolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationUpgradePolicy of this ApplicationUpgradePolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policy(self):
        """Gets the application_health_policy of this ApplicationUpgradePolicy.


        :return: The application_health_policy of this ApplicationUpgradePolicy.
        :rtype: ApplicationHealthPolicy
        """
        return self._application_health_policy

    @application_health_policy.setter
    def application_health_policy(self, application_health_policy):
        """Sets the application_health_policy of this ApplicationUpgradePolicy.


        :param application_health_policy: The application_health_policy of this ApplicationUpgradePolicy.
        :type application_health_policy: ApplicationHealthPolicy
        """

        self._application_health_policy = application_health_policy

    @property
    def force_restart(self):
        """Gets the force_restart of this ApplicationUpgradePolicy.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :return: The force_restart of this ApplicationUpgradePolicy.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this ApplicationUpgradePolicy.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :param force_restart: The force_restart of this ApplicationUpgradePolicy.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def rolling_upgrade_monitoring_policy(self):
        """Gets the rolling_upgrade_monitoring_policy of this ApplicationUpgradePolicy.


        :return: The rolling_upgrade_monitoring_policy of this ApplicationUpgradePolicy.
        :rtype: RollingUpgradeMonitoringPolicy
        """
        return self._rolling_upgrade_monitoring_policy

    @rolling_upgrade_monitoring_policy.setter
    def rolling_upgrade_monitoring_policy(self, rolling_upgrade_monitoring_policy):
        """Sets the rolling_upgrade_monitoring_policy of this ApplicationUpgradePolicy.


        :param rolling_upgrade_monitoring_policy: The rolling_upgrade_monitoring_policy of this ApplicationUpgradePolicy.
        :type rolling_upgrade_monitoring_policy: RollingUpgradeMonitoringPolicy
        """

        self._rolling_upgrade_monitoring_policy = rolling_upgrade_monitoring_policy

    @property
    def upgrade_replica_set_check_timeout(self):
        """Gets the upgrade_replica_set_check_timeout of this ApplicationUpgradePolicy.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :return: The upgrade_replica_set_check_timeout of this ApplicationUpgradePolicy.
        :rtype: int
        """
        return self._upgrade_replica_set_check_timeout

    @upgrade_replica_set_check_timeout.setter
    def upgrade_replica_set_check_timeout(self, upgrade_replica_set_check_timeout):
        """Sets the upgrade_replica_set_check_timeout of this ApplicationUpgradePolicy.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :param upgrade_replica_set_check_timeout: The upgrade_replica_set_check_timeout of this ApplicationUpgradePolicy.
        :type upgrade_replica_set_check_timeout: int
        """

        self._upgrade_replica_set_check_timeout = upgrade_replica_set_check_timeout
