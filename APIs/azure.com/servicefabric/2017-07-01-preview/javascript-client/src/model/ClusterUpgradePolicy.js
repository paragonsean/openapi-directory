/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterHealthPolicy from './ClusterHealthPolicy';
import ClusterUpgradeDeltaHealthPolicy from './ClusterUpgradeDeltaHealthPolicy';

/**
 * The ClusterUpgradePolicy model module.
 * @module model/ClusterUpgradePolicy
 * @version 2017-07-01-preview
 */
class ClusterUpgradePolicy {
    /**
     * Constructs a new <code>ClusterUpgradePolicy</code>.
     * Describes the policy used when upgrading the cluster.
     * @alias module:model/ClusterUpgradePolicy
     * @param healthCheckRetryTimeout {String} The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * @param healthCheckStableDuration {String} The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * @param healthCheckWaitDuration {String} The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * @param healthPolicy {module:model/ClusterHealthPolicy} 
     * @param upgradeDomainTimeout {String} The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * @param upgradeReplicaSetCheckTimeout {String} The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     * @param upgradeTimeout {String} The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
     */
    constructor(healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, healthPolicy, upgradeDomainTimeout, upgradeReplicaSetCheckTimeout, upgradeTimeout) { 
        
        ClusterUpgradePolicy.initialize(this, healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, healthPolicy, upgradeDomainTimeout, upgradeReplicaSetCheckTimeout, upgradeTimeout);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, healthCheckRetryTimeout, healthCheckStableDuration, healthCheckWaitDuration, healthPolicy, upgradeDomainTimeout, upgradeReplicaSetCheckTimeout, upgradeTimeout) { 
        obj['healthCheckRetryTimeout'] = healthCheckRetryTimeout;
        obj['healthCheckStableDuration'] = healthCheckStableDuration;
        obj['healthCheckWaitDuration'] = healthCheckWaitDuration;
        obj['healthPolicy'] = healthPolicy;
        obj['upgradeDomainTimeout'] = upgradeDomainTimeout;
        obj['upgradeReplicaSetCheckTimeout'] = upgradeReplicaSetCheckTimeout;
        obj['upgradeTimeout'] = upgradeTimeout;
    }

    /**
     * Constructs a <code>ClusterUpgradePolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterUpgradePolicy} obj Optional instance to populate.
     * @return {module:model/ClusterUpgradePolicy} The populated <code>ClusterUpgradePolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterUpgradePolicy();

            if (data.hasOwnProperty('deltaHealthPolicy')) {
                obj['deltaHealthPolicy'] = ClusterUpgradeDeltaHealthPolicy.constructFromObject(data['deltaHealthPolicy']);
            }
            if (data.hasOwnProperty('forceRestart')) {
                obj['forceRestart'] = ApiClient.convertToType(data['forceRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('healthCheckRetryTimeout')) {
                obj['healthCheckRetryTimeout'] = ApiClient.convertToType(data['healthCheckRetryTimeout'], 'String');
            }
            if (data.hasOwnProperty('healthCheckStableDuration')) {
                obj['healthCheckStableDuration'] = ApiClient.convertToType(data['healthCheckStableDuration'], 'String');
            }
            if (data.hasOwnProperty('healthCheckWaitDuration')) {
                obj['healthCheckWaitDuration'] = ApiClient.convertToType(data['healthCheckWaitDuration'], 'String');
            }
            if (data.hasOwnProperty('healthPolicy')) {
                obj['healthPolicy'] = ClusterHealthPolicy.constructFromObject(data['healthPolicy']);
            }
            if (data.hasOwnProperty('upgradeDomainTimeout')) {
                obj['upgradeDomainTimeout'] = ApiClient.convertToType(data['upgradeDomainTimeout'], 'String');
            }
            if (data.hasOwnProperty('upgradeReplicaSetCheckTimeout')) {
                obj['upgradeReplicaSetCheckTimeout'] = ApiClient.convertToType(data['upgradeReplicaSetCheckTimeout'], 'String');
            }
            if (data.hasOwnProperty('upgradeTimeout')) {
                obj['upgradeTimeout'] = ApiClient.convertToType(data['upgradeTimeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterUpgradePolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterUpgradePolicy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ClusterUpgradePolicy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `deltaHealthPolicy`
        if (data['deltaHealthPolicy']) { // data not null
          ClusterUpgradeDeltaHealthPolicy.validateJSON(data['deltaHealthPolicy']);
        }
        // ensure the json data is a string
        if (data['healthCheckRetryTimeout'] && !(typeof data['healthCheckRetryTimeout'] === 'string' || data['healthCheckRetryTimeout'] instanceof String)) {
            throw new Error("Expected the field `healthCheckRetryTimeout` to be a primitive type in the JSON string but got " + data['healthCheckRetryTimeout']);
        }
        // ensure the json data is a string
        if (data['healthCheckStableDuration'] && !(typeof data['healthCheckStableDuration'] === 'string' || data['healthCheckStableDuration'] instanceof String)) {
            throw new Error("Expected the field `healthCheckStableDuration` to be a primitive type in the JSON string but got " + data['healthCheckStableDuration']);
        }
        // ensure the json data is a string
        if (data['healthCheckWaitDuration'] && !(typeof data['healthCheckWaitDuration'] === 'string' || data['healthCheckWaitDuration'] instanceof String)) {
            throw new Error("Expected the field `healthCheckWaitDuration` to be a primitive type in the JSON string but got " + data['healthCheckWaitDuration']);
        }
        // validate the optional field `healthPolicy`
        if (data['healthPolicy']) { // data not null
          ClusterHealthPolicy.validateJSON(data['healthPolicy']);
        }
        // ensure the json data is a string
        if (data['upgradeDomainTimeout'] && !(typeof data['upgradeDomainTimeout'] === 'string' || data['upgradeDomainTimeout'] instanceof String)) {
            throw new Error("Expected the field `upgradeDomainTimeout` to be a primitive type in the JSON string but got " + data['upgradeDomainTimeout']);
        }
        // ensure the json data is a string
        if (data['upgradeReplicaSetCheckTimeout'] && !(typeof data['upgradeReplicaSetCheckTimeout'] === 'string' || data['upgradeReplicaSetCheckTimeout'] instanceof String)) {
            throw new Error("Expected the field `upgradeReplicaSetCheckTimeout` to be a primitive type in the JSON string but got " + data['upgradeReplicaSetCheckTimeout']);
        }
        // ensure the json data is a string
        if (data['upgradeTimeout'] && !(typeof data['upgradeTimeout'] === 'string' || data['upgradeTimeout'] instanceof String)) {
            throw new Error("Expected the field `upgradeTimeout` to be a primitive type in the JSON string but got " + data['upgradeTimeout']);
        }

        return true;
    }


}

ClusterUpgradePolicy.RequiredProperties = ["healthCheckRetryTimeout", "healthCheckStableDuration", "healthCheckWaitDuration", "healthPolicy", "upgradeDomainTimeout", "upgradeReplicaSetCheckTimeout", "upgradeTimeout"];

/**
 * @member {module:model/ClusterUpgradeDeltaHealthPolicy} deltaHealthPolicy
 */
ClusterUpgradePolicy.prototype['deltaHealthPolicy'] = undefined;

/**
 * If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).
 * @member {Boolean} forceRestart
 */
ClusterUpgradePolicy.prototype['forceRestart'] = undefined;

/**
 * The amount of time to retry health evaluation when the application or cluster is unhealthy before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 * @member {String} healthCheckRetryTimeout
 */
ClusterUpgradePolicy.prototype['healthCheckRetryTimeout'] = undefined;

/**
 * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 * @member {String} healthCheckStableDuration
 */
ClusterUpgradePolicy.prototype['healthCheckStableDuration'] = undefined;

/**
 * The length of time to wait after completing an upgrade domain before performing health checks. The duration can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 * @member {String} healthCheckWaitDuration
 */
ClusterUpgradePolicy.prototype['healthCheckWaitDuration'] = undefined;

/**
 * @member {module:model/ClusterHealthPolicy} healthPolicy
 */
ClusterUpgradePolicy.prototype['healthPolicy'] = undefined;

/**
 * The amount of time each upgrade domain has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 * @member {String} upgradeDomainTimeout
 */
ClusterUpgradePolicy.prototype['upgradeDomainTimeout'] = undefined;

/**
 * The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 * @member {String} upgradeReplicaSetCheckTimeout
 */
ClusterUpgradePolicy.prototype['upgradeReplicaSetCheckTimeout'] = undefined;

/**
 * The amount of time the overall upgrade has to complete before the upgrade rolls back. The timeout can be in either hh:mm:ss or in d.hh:mm:ss.ms format.
 * @member {String} upgradeTimeout
 */
ClusterUpgradePolicy.prototype['upgradeTimeout'] = undefined;






export default ClusterUpgradePolicy;

