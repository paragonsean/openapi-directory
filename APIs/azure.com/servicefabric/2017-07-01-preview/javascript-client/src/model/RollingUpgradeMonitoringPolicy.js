/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RollingUpgradeMonitoringPolicy model module.
 * @module model/RollingUpgradeMonitoringPolicy
 * @version 2017-07-01-preview
 */
class RollingUpgradeMonitoringPolicy {
    /**
     * Constructs a new <code>RollingUpgradeMonitoringPolicy</code>.
     * The policy used for monitoring the application upgrade
     * @alias module:model/RollingUpgradeMonitoringPolicy
     */
    constructor() { 
        
        RollingUpgradeMonitoringPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['healthCheckRetryTimeout'] = 'PT0H10M0S';
        obj['healthCheckStableDuration'] = 'PT0H2M0S';
        obj['healthCheckWaitDuration'] = '0';
        obj['upgradeDomainTimeout'] = 'P10675199DT02H48M05.4775807S';
        obj['upgradeTimeout'] = 'P10675199DT02H48M05.4775807S';
    }

    /**
     * Constructs a <code>RollingUpgradeMonitoringPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RollingUpgradeMonitoringPolicy} obj Optional instance to populate.
     * @return {module:model/RollingUpgradeMonitoringPolicy} The populated <code>RollingUpgradeMonitoringPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RollingUpgradeMonitoringPolicy();

            if (data.hasOwnProperty('healthCheckRetryTimeout')) {
                obj['healthCheckRetryTimeout'] = ApiClient.convertToType(data['healthCheckRetryTimeout'], 'String');
            }
            if (data.hasOwnProperty('healthCheckStableDuration')) {
                obj['healthCheckStableDuration'] = ApiClient.convertToType(data['healthCheckStableDuration'], 'String');
            }
            if (data.hasOwnProperty('healthCheckWaitDuration')) {
                obj['healthCheckWaitDuration'] = ApiClient.convertToType(data['healthCheckWaitDuration'], 'String');
            }
            if (data.hasOwnProperty('upgradeDomainTimeout')) {
                obj['upgradeDomainTimeout'] = ApiClient.convertToType(data['upgradeDomainTimeout'], 'String');
            }
            if (data.hasOwnProperty('upgradeTimeout')) {
                obj['upgradeTimeout'] = ApiClient.convertToType(data['upgradeTimeout'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RollingUpgradeMonitoringPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RollingUpgradeMonitoringPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['healthCheckRetryTimeout'] && !(typeof data['healthCheckRetryTimeout'] === 'string' || data['healthCheckRetryTimeout'] instanceof String)) {
            throw new Error("Expected the field `healthCheckRetryTimeout` to be a primitive type in the JSON string but got " + data['healthCheckRetryTimeout']);
        }
        // ensure the json data is a string
        if (data['healthCheckStableDuration'] && !(typeof data['healthCheckStableDuration'] === 'string' || data['healthCheckStableDuration'] instanceof String)) {
            throw new Error("Expected the field `healthCheckStableDuration` to be a primitive type in the JSON string but got " + data['healthCheckStableDuration']);
        }
        // ensure the json data is a string
        if (data['healthCheckWaitDuration'] && !(typeof data['healthCheckWaitDuration'] === 'string' || data['healthCheckWaitDuration'] instanceof String)) {
            throw new Error("Expected the field `healthCheckWaitDuration` to be a primitive type in the JSON string but got " + data['healthCheckWaitDuration']);
        }
        // ensure the json data is a string
        if (data['upgradeDomainTimeout'] && !(typeof data['upgradeDomainTimeout'] === 'string' || data['upgradeDomainTimeout'] instanceof String)) {
            throw new Error("Expected the field `upgradeDomainTimeout` to be a primitive type in the JSON string but got " + data['upgradeDomainTimeout']);
        }
        // ensure the json data is a string
        if (data['upgradeTimeout'] && !(typeof data['upgradeTimeout'] === 'string' || data['upgradeTimeout'] instanceof String)) {
            throw new Error("Expected the field `upgradeTimeout` to be a primitive type in the JSON string but got " + data['upgradeTimeout']);
        }

        return true;
    }


}



/**
 * The amount of time to retry health evaluation when the application or cluster is unhealthy before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
 * @member {String} healthCheckRetryTimeout
 * @default 'PT0H10M0S'
 */
RollingUpgradeMonitoringPolicy.prototype['healthCheckRetryTimeout'] = 'PT0H10M0S';

/**
 * The amount of time that the application or cluster must remain healthy before the upgrade proceeds to the next upgrade domain. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
 * @member {String} healthCheckStableDuration
 * @default 'PT0H2M0S'
 */
RollingUpgradeMonitoringPolicy.prototype['healthCheckStableDuration'] = 'PT0H2M0S';

/**
 * The amount of time to wait after completing an upgrade domain before applying health policies. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
 * @member {String} healthCheckWaitDuration
 * @default '0'
 */
RollingUpgradeMonitoringPolicy.prototype['healthCheckWaitDuration'] = '0';

/**
 * The amount of time each upgrade domain has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
 * @member {String} upgradeDomainTimeout
 * @default 'P10675199DT02H48M05.4775807S'
 */
RollingUpgradeMonitoringPolicy.prototype['upgradeDomainTimeout'] = 'P10675199DT02H48M05.4775807S';

/**
 * The amount of time the overall upgrade has to complete before FailureAction is executed. It is first interpreted as a string representing an ISO 8601 duration. If that fails, then it is interpreted as a number representing the total number of milliseconds.
 * @member {String} upgradeTimeout
 * @default 'P10675199DT02H48M05.4775807S'
 */
RollingUpgradeMonitoringPolicy.prototype['upgradeTimeout'] = 'P10675199DT02H48M05.4775807S';






export default RollingUpgradeMonitoringPolicy;

