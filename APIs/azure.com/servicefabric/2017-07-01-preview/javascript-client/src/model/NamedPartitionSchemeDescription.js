/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PartitionScheme from './PartitionScheme';
import PartitionSchemeDescription from './PartitionSchemeDescription';

/**
 * The NamedPartitionSchemeDescription model module.
 * @module model/NamedPartitionSchemeDescription
 * @version 2017-07-01-preview
 */
class NamedPartitionSchemeDescription {
    /**
     * Constructs a new <code>NamedPartitionSchemeDescription</code>.
     * Describes the named partition scheme of the service.
     * @alias module:model/NamedPartitionSchemeDescription
     * @extends module:model/PartitionSchemeDescription
     * @implements module:model/PartitionSchemeDescription
     * @param partitionScheme {module:model/PartitionScheme} 
     */
    constructor(partitionScheme) { 
        PartitionSchemeDescription.initialize(this, partitionScheme);
        NamedPartitionSchemeDescription.initialize(this, partitionScheme);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partitionScheme) { 
        obj['Count'] = count;
        obj['Names'] = names;
    }

    /**
     * Constructs a <code>NamedPartitionSchemeDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamedPartitionSchemeDescription} obj Optional instance to populate.
     * @return {module:model/NamedPartitionSchemeDescription} The populated <code>NamedPartitionSchemeDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamedPartitionSchemeDescription();
            PartitionSchemeDescription.constructFromObject(data, obj);
            PartitionSchemeDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('Count')) {
                obj['Count'] = ApiClient.convertToType(data['Count'], 'Number');
            }
            if (data.hasOwnProperty('Names')) {
                obj['Names'] = ApiClient.convertToType(data['Names'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamedPartitionSchemeDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamedPartitionSchemeDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NamedPartitionSchemeDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Names'])) {
            throw new Error("Expected the field `Names` to be an array in the JSON data but got " + data['Names']);
        }

        return true;
    }


}

NamedPartitionSchemeDescription.RequiredProperties = ["Count", "Names", "PartitionScheme"];

/**
 * The number of partitions.
 * @member {Number} Count
 */
NamedPartitionSchemeDescription.prototype['Count'] = undefined;

/**
 * Array of size specified by the ‘Count’ parameter, for the names of the partitions.
 * @member {Array.<String>} Names
 */
NamedPartitionSchemeDescription.prototype['Names'] = undefined;


// Implement PartitionSchemeDescription interface:
/**
 * @member {module:model/PartitionScheme} PartitionScheme
 */
PartitionSchemeDescription.prototype['PartitionScheme'] = undefined;




export default NamedPartitionSchemeDescription;

