/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterHealthPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterHealthPolicy::OAIClusterHealthPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterHealthPolicy::OAIClusterHealthPolicy() {
    this->initializeModel();
}

OAIClusterHealthPolicy::~OAIClusterHealthPolicy() {}

void OAIClusterHealthPolicy::initializeModel() {

    m_max_percent_unhealthy_applications_isSet = false;
    m_max_percent_unhealthy_applications_isValid = false;

    m_max_percent_unhealthy_nodes_isSet = false;
    m_max_percent_unhealthy_nodes_isValid = false;
}

void OAIClusterHealthPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterHealthPolicy::fromJsonObject(QJsonObject json) {

    m_max_percent_unhealthy_applications_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_applications, json[QString("maxPercentUnhealthyApplications")]);
    m_max_percent_unhealthy_applications_isSet = !json[QString("maxPercentUnhealthyApplications")].isNull() && m_max_percent_unhealthy_applications_isValid;

    m_max_percent_unhealthy_nodes_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_nodes, json[QString("maxPercentUnhealthyNodes")]);
    m_max_percent_unhealthy_nodes_isSet = !json[QString("maxPercentUnhealthyNodes")].isNull() && m_max_percent_unhealthy_nodes_isValid;
}

QString OAIClusterHealthPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterHealthPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_max_percent_unhealthy_applications_isSet) {
        obj.insert(QString("maxPercentUnhealthyApplications"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_applications));
    }
    if (m_max_percent_unhealthy_nodes_isSet) {
        obj.insert(QString("maxPercentUnhealthyNodes"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_nodes));
    }
    return obj;
}

qint32 OAIClusterHealthPolicy::getMaxPercentUnhealthyApplications() const {
    return m_max_percent_unhealthy_applications;
}
void OAIClusterHealthPolicy::setMaxPercentUnhealthyApplications(const qint32 &max_percent_unhealthy_applications) {
    m_max_percent_unhealthy_applications = max_percent_unhealthy_applications;
    m_max_percent_unhealthy_applications_isSet = true;
}

bool OAIClusterHealthPolicy::is_max_percent_unhealthy_applications_Set() const{
    return m_max_percent_unhealthy_applications_isSet;
}

bool OAIClusterHealthPolicy::is_max_percent_unhealthy_applications_Valid() const{
    return m_max_percent_unhealthy_applications_isValid;
}

qint32 OAIClusterHealthPolicy::getMaxPercentUnhealthyNodes() const {
    return m_max_percent_unhealthy_nodes;
}
void OAIClusterHealthPolicy::setMaxPercentUnhealthyNodes(const qint32 &max_percent_unhealthy_nodes) {
    m_max_percent_unhealthy_nodes = max_percent_unhealthy_nodes;
    m_max_percent_unhealthy_nodes_isSet = true;
}

bool OAIClusterHealthPolicy::is_max_percent_unhealthy_nodes_Set() const{
    return m_max_percent_unhealthy_nodes_isSet;
}

bool OAIClusterHealthPolicy::is_max_percent_unhealthy_nodes_Valid() const{
    return m_max_percent_unhealthy_nodes_isValid;
}

bool OAIClusterHealthPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_percent_unhealthy_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterHealthPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
