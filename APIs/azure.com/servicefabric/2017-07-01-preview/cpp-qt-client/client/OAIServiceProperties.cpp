/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceProperties::OAIServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceProperties::OAIServiceProperties() {
    this->initializeModel();
}

OAIServiceProperties::~OAIServiceProperties() {}

void OAIServiceProperties::initializeModel() {

    m_partition_description_isSet = false;
    m_partition_description_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_service_type_name_isSet = false;
    m_service_type_name_isValid = false;

    m_correlation_scheme_isSet = false;
    m_correlation_scheme_isValid = false;

    m_default_move_cost_isSet = false;
    m_default_move_cost_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_service_load_metrics_isSet = false;
    m_service_load_metrics_isValid = false;

    m_service_placement_policies_isSet = false;
    m_service_placement_policies_isValid = false;
}

void OAIServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceProperties::fromJsonObject(QJsonObject json) {

    m_partition_description_isValid = ::OpenAPI::fromJsonValue(m_partition_description, json[QString("partitionDescription")]);
    m_partition_description_isSet = !json[QString("partitionDescription")].isNull() && m_partition_description_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("serviceKind")]);
    m_service_kind_isSet = !json[QString("serviceKind")].isNull() && m_service_kind_isValid;

    m_service_type_name_isValid = ::OpenAPI::fromJsonValue(m_service_type_name, json[QString("serviceTypeName")]);
    m_service_type_name_isSet = !json[QString("serviceTypeName")].isNull() && m_service_type_name_isValid;

    m_correlation_scheme_isValid = ::OpenAPI::fromJsonValue(m_correlation_scheme, json[QString("correlationScheme")]);
    m_correlation_scheme_isSet = !json[QString("correlationScheme")].isNull() && m_correlation_scheme_isValid;

    m_default_move_cost_isValid = ::OpenAPI::fromJsonValue(m_default_move_cost, json[QString("defaultMoveCost")]);
    m_default_move_cost_isSet = !json[QString("defaultMoveCost")].isNull() && m_default_move_cost_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_service_load_metrics_isValid = ::OpenAPI::fromJsonValue(m_service_load_metrics, json[QString("serviceLoadMetrics")]);
    m_service_load_metrics_isSet = !json[QString("serviceLoadMetrics")].isNull() && m_service_load_metrics_isValid;

    m_service_placement_policies_isValid = ::OpenAPI::fromJsonValue(m_service_placement_policies, json[QString("servicePlacementPolicies")]);
    m_service_placement_policies_isSet = !json[QString("servicePlacementPolicies")].isNull() && m_service_placement_policies_isValid;
}

QString OAIServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_partition_description.isSet()) {
        obj.insert(QString("partitionDescription"), ::OpenAPI::toJsonValue(m_partition_description));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("serviceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_service_type_name_isSet) {
        obj.insert(QString("serviceTypeName"), ::OpenAPI::toJsonValue(m_service_type_name));
    }
    if (m_correlation_scheme.size() > 0) {
        obj.insert(QString("correlationScheme"), ::OpenAPI::toJsonValue(m_correlation_scheme));
    }
    if (m_default_move_cost.isSet()) {
        obj.insert(QString("defaultMoveCost"), ::OpenAPI::toJsonValue(m_default_move_cost));
    }
    if (m_placement_constraints_isSet) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_service_load_metrics.size() > 0) {
        obj.insert(QString("serviceLoadMetrics"), ::OpenAPI::toJsonValue(m_service_load_metrics));
    }
    if (m_service_placement_policies.size() > 0) {
        obj.insert(QString("servicePlacementPolicies"), ::OpenAPI::toJsonValue(m_service_placement_policies));
    }
    return obj;
}

OAIPartitionSchemeDescription OAIServiceProperties::getPartitionDescription() const {
    return m_partition_description;
}
void OAIServiceProperties::setPartitionDescription(const OAIPartitionSchemeDescription &partition_description) {
    m_partition_description = partition_description;
    m_partition_description_isSet = true;
}

bool OAIServiceProperties::is_partition_description_Set() const{
    return m_partition_description_isSet;
}

bool OAIServiceProperties::is_partition_description_Valid() const{
    return m_partition_description_isValid;
}

QString OAIServiceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIServiceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIServiceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIServiceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIServiceKind OAIServiceProperties::getServiceKind() const {
    return m_service_kind;
}
void OAIServiceProperties::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIServiceProperties::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIServiceProperties::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QString OAIServiceProperties::getServiceTypeName() const {
    return m_service_type_name;
}
void OAIServiceProperties::setServiceTypeName(const QString &service_type_name) {
    m_service_type_name = service_type_name;
    m_service_type_name_isSet = true;
}

bool OAIServiceProperties::is_service_type_name_Set() const{
    return m_service_type_name_isSet;
}

bool OAIServiceProperties::is_service_type_name_Valid() const{
    return m_service_type_name_isValid;
}

QList<OAIServiceCorrelationDescription> OAIServiceProperties::getCorrelationScheme() const {
    return m_correlation_scheme;
}
void OAIServiceProperties::setCorrelationScheme(const QList<OAIServiceCorrelationDescription> &correlation_scheme) {
    m_correlation_scheme = correlation_scheme;
    m_correlation_scheme_isSet = true;
}

bool OAIServiceProperties::is_correlation_scheme_Set() const{
    return m_correlation_scheme_isSet;
}

bool OAIServiceProperties::is_correlation_scheme_Valid() const{
    return m_correlation_scheme_isValid;
}

OAIMoveCost OAIServiceProperties::getDefaultMoveCost() const {
    return m_default_move_cost;
}
void OAIServiceProperties::setDefaultMoveCost(const OAIMoveCost &default_move_cost) {
    m_default_move_cost = default_move_cost;
    m_default_move_cost_isSet = true;
}

bool OAIServiceProperties::is_default_move_cost_Set() const{
    return m_default_move_cost_isSet;
}

bool OAIServiceProperties::is_default_move_cost_Valid() const{
    return m_default_move_cost_isValid;
}

QString OAIServiceProperties::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIServiceProperties::setPlacementConstraints(const QString &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIServiceProperties::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIServiceProperties::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList<OAIServiceLoadMetricDescription> OAIServiceProperties::getServiceLoadMetrics() const {
    return m_service_load_metrics;
}
void OAIServiceProperties::setServiceLoadMetrics(const QList<OAIServiceLoadMetricDescription> &service_load_metrics) {
    m_service_load_metrics = service_load_metrics;
    m_service_load_metrics_isSet = true;
}

bool OAIServiceProperties::is_service_load_metrics_Set() const{
    return m_service_load_metrics_isSet;
}

bool OAIServiceProperties::is_service_load_metrics_Valid() const{
    return m_service_load_metrics_isValid;
}

QList<OAIServicePlacementPolicyDescription> OAIServiceProperties::getServicePlacementPolicies() const {
    return m_service_placement_policies;
}
void OAIServiceProperties::setServicePlacementPolicies(const QList<OAIServicePlacementPolicyDescription> &service_placement_policies) {
    m_service_placement_policies = service_placement_policies;
    m_service_placement_policies_isSet = true;
}

bool OAIServiceProperties::is_service_placement_policies_Set() const{
    return m_service_placement_policies_isSet;
}

bool OAIServiceProperties::is_service_placement_policies_Valid() const{
    return m_service_placement_policies_isValid;
}

bool OAIServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partition_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_scheme.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_move_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_load_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_placement_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
