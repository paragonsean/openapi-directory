/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationProperties::OAIApplicationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationProperties::OAIApplicationProperties() {
    this->initializeModel();
}

OAIApplicationProperties::~OAIApplicationProperties() {}

void OAIApplicationProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_type_name_isSet = false;
    m_type_name_isValid = false;

    m_maximum_nodes_isSet = false;
    m_maximum_nodes_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_minimum_nodes_isSet = false;
    m_minimum_nodes_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_remove_application_capacity_isSet = false;
    m_remove_application_capacity_isValid = false;

    m_type_version_isSet = false;
    m_type_version_isValid = false;

    m_upgrade_policy_isSet = false;
    m_upgrade_policy_isValid = false;
}

void OAIApplicationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_type_name_isValid = ::OpenAPI::fromJsonValue(m_type_name, json[QString("typeName")]);
    m_type_name_isSet = !json[QString("typeName")].isNull() && m_type_name_isValid;

    m_maximum_nodes_isValid = ::OpenAPI::fromJsonValue(m_maximum_nodes, json[QString("maximumNodes")]);
    m_maximum_nodes_isSet = !json[QString("maximumNodes")].isNull() && m_maximum_nodes_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_minimum_nodes_isValid = ::OpenAPI::fromJsonValue(m_minimum_nodes, json[QString("minimumNodes")]);
    m_minimum_nodes_isSet = !json[QString("minimumNodes")].isNull() && m_minimum_nodes_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_remove_application_capacity_isValid = ::OpenAPI::fromJsonValue(m_remove_application_capacity, json[QString("removeApplicationCapacity")]);
    m_remove_application_capacity_isSet = !json[QString("removeApplicationCapacity")].isNull() && m_remove_application_capacity_isValid;

    m_type_version_isValid = ::OpenAPI::fromJsonValue(m_type_version, json[QString("typeVersion")]);
    m_type_version_isSet = !json[QString("typeVersion")].isNull() && m_type_version_isValid;

    m_upgrade_policy_isValid = ::OpenAPI::fromJsonValue(m_upgrade_policy, json[QString("upgradePolicy")]);
    m_upgrade_policy_isSet = !json[QString("upgradePolicy")].isNull() && m_upgrade_policy_isValid;
}

QString OAIApplicationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_type_name_isSet) {
        obj.insert(QString("typeName"), ::OpenAPI::toJsonValue(m_type_name));
    }
    if (m_maximum_nodes_isSet) {
        obj.insert(QString("maximumNodes"), ::OpenAPI::toJsonValue(m_maximum_nodes));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_minimum_nodes_isSet) {
        obj.insert(QString("minimumNodes"), ::OpenAPI::toJsonValue(m_minimum_nodes));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_remove_application_capacity_isSet) {
        obj.insert(QString("removeApplicationCapacity"), ::OpenAPI::toJsonValue(m_remove_application_capacity));
    }
    if (m_type_version_isSet) {
        obj.insert(QString("typeVersion"), ::OpenAPI::toJsonValue(m_type_version));
    }
    if (m_upgrade_policy.isSet()) {
        obj.insert(QString("upgradePolicy"), ::OpenAPI::toJsonValue(m_upgrade_policy));
    }
    return obj;
}

QString OAIApplicationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIApplicationProperties::getTypeName() const {
    return m_type_name;
}
void OAIApplicationProperties::setTypeName(const QString &type_name) {
    m_type_name = type_name;
    m_type_name_isSet = true;
}

bool OAIApplicationProperties::is_type_name_Set() const{
    return m_type_name_isSet;
}

bool OAIApplicationProperties::is_type_name_Valid() const{
    return m_type_name_isValid;
}

qint64 OAIApplicationProperties::getMaximumNodes() const {
    return m_maximum_nodes;
}
void OAIApplicationProperties::setMaximumNodes(const qint64 &maximum_nodes) {
    m_maximum_nodes = maximum_nodes;
    m_maximum_nodes_isSet = true;
}

bool OAIApplicationProperties::is_maximum_nodes_Set() const{
    return m_maximum_nodes_isSet;
}

bool OAIApplicationProperties::is_maximum_nodes_Valid() const{
    return m_maximum_nodes_isValid;
}

QList<OAIApplicationMetricDescription> OAIApplicationProperties::getMetrics() const {
    return m_metrics;
}
void OAIApplicationProperties::setMetrics(const QList<OAIApplicationMetricDescription> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIApplicationProperties::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIApplicationProperties::is_metrics_Valid() const{
    return m_metrics_isValid;
}

qint64 OAIApplicationProperties::getMinimumNodes() const {
    return m_minimum_nodes;
}
void OAIApplicationProperties::setMinimumNodes(const qint64 &minimum_nodes) {
    m_minimum_nodes = minimum_nodes;
    m_minimum_nodes_isSet = true;
}

bool OAIApplicationProperties::is_minimum_nodes_Set() const{
    return m_minimum_nodes_isSet;
}

bool OAIApplicationProperties::is_minimum_nodes_Valid() const{
    return m_minimum_nodes_isValid;
}

QList<OAIApplicationParameter> OAIApplicationProperties::getParameters() const {
    return m_parameters;
}
void OAIApplicationProperties::setParameters(const QList<OAIApplicationParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIApplicationProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIApplicationProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIApplicationProperties::isRemoveApplicationCapacity() const {
    return m_remove_application_capacity;
}
void OAIApplicationProperties::setRemoveApplicationCapacity(const bool &remove_application_capacity) {
    m_remove_application_capacity = remove_application_capacity;
    m_remove_application_capacity_isSet = true;
}

bool OAIApplicationProperties::is_remove_application_capacity_Set() const{
    return m_remove_application_capacity_isSet;
}

bool OAIApplicationProperties::is_remove_application_capacity_Valid() const{
    return m_remove_application_capacity_isValid;
}

QString OAIApplicationProperties::getTypeVersion() const {
    return m_type_version;
}
void OAIApplicationProperties::setTypeVersion(const QString &type_version) {
    m_type_version = type_version;
    m_type_version_isSet = true;
}

bool OAIApplicationProperties::is_type_version_Set() const{
    return m_type_version_isSet;
}

bool OAIApplicationProperties::is_type_version_Valid() const{
    return m_type_version_isValid;
}

OAIApplicationUpgradePolicy OAIApplicationProperties::getUpgradePolicy() const {
    return m_upgrade_policy;
}
void OAIApplicationProperties::setUpgradePolicy(const OAIApplicationUpgradePolicy &upgrade_policy) {
    m_upgrade_policy = upgrade_policy;
    m_upgrade_policy_isSet = true;
}

bool OAIApplicationProperties::is_upgrade_policy_Set() const{
    return m_upgrade_policy_isSet;
}

bool OAIApplicationProperties::is_upgrade_policy_Valid() const{
    return m_upgrade_policy_isValid;
}

bool OAIApplicationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_application_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
