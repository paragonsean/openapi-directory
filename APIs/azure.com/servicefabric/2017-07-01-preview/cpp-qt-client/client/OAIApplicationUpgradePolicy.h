/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationUpgradePolicy.h
 *
 * Describes the policy for a monitored application upgrade.
 */

#ifndef OAIApplicationUpgradePolicy_H
#define OAIApplicationUpgradePolicy_H

#include <QJsonObject>

#include "OAIApplicationHealthPolicy.h"
#include "OAIRollingUpgradeMonitoringPolicy.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationHealthPolicy;
class OAIRollingUpgradeMonitoringPolicy;

class OAIApplicationUpgradePolicy : public OAIObject {
public:
    OAIApplicationUpgradePolicy();
    OAIApplicationUpgradePolicy(QString json);
    ~OAIApplicationUpgradePolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIApplicationHealthPolicy getApplicationHealthPolicy() const;
    void setApplicationHealthPolicy(const OAIApplicationHealthPolicy &application_health_policy);
    bool is_application_health_policy_Set() const;
    bool is_application_health_policy_Valid() const;

    bool isForceRestart() const;
    void setForceRestart(const bool &force_restart);
    bool is_force_restart_Set() const;
    bool is_force_restart_Valid() const;

    OAIRollingUpgradeMonitoringPolicy getRollingUpgradeMonitoringPolicy() const;
    void setRollingUpgradeMonitoringPolicy(const OAIRollingUpgradeMonitoringPolicy &rolling_upgrade_monitoring_policy);
    bool is_rolling_upgrade_monitoring_policy_Set() const;
    bool is_rolling_upgrade_monitoring_policy_Valid() const;

    qint64 getUpgradeReplicaSetCheckTimeout() const;
    void setUpgradeReplicaSetCheckTimeout(const qint64 &upgrade_replica_set_check_timeout);
    bool is_upgrade_replica_set_check_timeout_Set() const;
    bool is_upgrade_replica_set_check_timeout_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIApplicationHealthPolicy m_application_health_policy;
    bool m_application_health_policy_isSet;
    bool m_application_health_policy_isValid;

    bool m_force_restart;
    bool m_force_restart_isSet;
    bool m_force_restart_isValid;

    OAIRollingUpgradeMonitoringPolicy m_rolling_upgrade_monitoring_policy;
    bool m_rolling_upgrade_monitoring_policy_isSet;
    bool m_rolling_upgrade_monitoring_policy_isValid;

    qint64 m_upgrade_replica_set_check_timeout;
    bool m_upgrade_replica_set_check_timeout_isSet;
    bool m_upgrade_replica_set_check_timeout_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationUpgradePolicy)

#endif // OAIApplicationUpgradePolicy_H
