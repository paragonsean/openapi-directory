# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_code_package_properties import ContainerCodePackageProperties
from openapi_server.models.diagnostics_ref import DiagnosticsRef
from openapi_server.models.health_state import HealthState
from openapi_server.models.network_ref import NetworkRef
from openapi_server import util


class ServiceResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_packages: List[ContainerCodePackageProperties]=None, diagnostics: DiagnosticsRef=None, network_refs: List[NetworkRef]=None, os_type: str=None, description: str=None, health_state: HealthState=None, replica_count: int=None, status: str=None):
        """ServiceResourceProperties - a model defined in OpenAPI

        :param code_packages: The code_packages of this ServiceResourceProperties.
        :param diagnostics: The diagnostics of this ServiceResourceProperties.
        :param network_refs: The network_refs of this ServiceResourceProperties.
        :param os_type: The os_type of this ServiceResourceProperties.
        :param description: The description of this ServiceResourceProperties.
        :param health_state: The health_state of this ServiceResourceProperties.
        :param replica_count: The replica_count of this ServiceResourceProperties.
        :param status: The status of this ServiceResourceProperties.
        """
        self.openapi_types = {
            'code_packages': List[ContainerCodePackageProperties],
            'diagnostics': DiagnosticsRef,
            'network_refs': List[NetworkRef],
            'os_type': str,
            'description': str,
            'health_state': HealthState,
            'replica_count': int,
            'status': str
        }

        self.attribute_map = {
            'code_packages': 'codePackages',
            'diagnostics': 'diagnostics',
            'network_refs': 'networkRefs',
            'os_type': 'osType',
            'description': 'description',
            'health_state': 'healthState',
            'replica_count': 'replicaCount',
            'status': 'status'
        }

        self._code_packages = code_packages
        self._diagnostics = diagnostics
        self._network_refs = network_refs
        self._os_type = os_type
        self._description = description
        self._health_state = health_state
        self._replica_count = replica_count
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceResourceProperties of this ServiceResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_packages(self):
        """Gets the code_packages of this ServiceResourceProperties.

        Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).

        :return: The code_packages of this ServiceResourceProperties.
        :rtype: List[ContainerCodePackageProperties]
        """
        return self._code_packages

    @code_packages.setter
    def code_packages(self, code_packages):
        """Sets the code_packages of this ServiceResourceProperties.

        Describes the set of code packages that forms the service. A code package describes the container and the properties for running it. All the code packages are started together on the same host and share the same context (network, process etc.).

        :param code_packages: The code_packages of this ServiceResourceProperties.
        :type code_packages: List[ContainerCodePackageProperties]
        """
        if code_packages is None:
            raise ValueError("Invalid value for `code_packages`, must not be `None`")

        self._code_packages = code_packages

    @property
    def diagnostics(self):
        """Gets the diagnostics of this ServiceResourceProperties.


        :return: The diagnostics of this ServiceResourceProperties.
        :rtype: DiagnosticsRef
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this ServiceResourceProperties.


        :param diagnostics: The diagnostics of this ServiceResourceProperties.
        :type diagnostics: DiagnosticsRef
        """

        self._diagnostics = diagnostics

    @property
    def network_refs(self):
        """Gets the network_refs of this ServiceResourceProperties.

        The names of the private networks that this service needs to be part of.

        :return: The network_refs of this ServiceResourceProperties.
        :rtype: List[NetworkRef]
        """
        return self._network_refs

    @network_refs.setter
    def network_refs(self, network_refs):
        """Sets the network_refs of this ServiceResourceProperties.

        The names of the private networks that this service needs to be part of.

        :param network_refs: The network_refs of this ServiceResourceProperties.
        :type network_refs: List[NetworkRef]
        """

        self._network_refs = network_refs

    @property
    def os_type(self):
        """Gets the os_type of this ServiceResourceProperties.

        The Operating system type required by the code in service.

        :return: The os_type of this ServiceResourceProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ServiceResourceProperties.

        The Operating system type required by the code in service.

        :param os_type: The os_type of this ServiceResourceProperties.
        :type os_type: str
        """
        allowed_values = ["Linux", "Windows"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def description(self):
        """Gets the description of this ServiceResourceProperties.

        User readable description of the service.

        :return: The description of this ServiceResourceProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceResourceProperties.

        User readable description of the service.

        :param description: The description of this ServiceResourceProperties.
        :type description: str
        """

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this ServiceResourceProperties.


        :return: The health_state of this ServiceResourceProperties.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this ServiceResourceProperties.


        :param health_state: The health_state of this ServiceResourceProperties.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def replica_count(self):
        """Gets the replica_count of this ServiceResourceProperties.

        The number of replicas of the service to create. Defaults to 1 if not specified.

        :return: The replica_count of this ServiceResourceProperties.
        :rtype: int
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this ServiceResourceProperties.

        The number of replicas of the service to create. Defaults to 1 if not specified.

        :param replica_count: The replica_count of this ServiceResourceProperties.
        :type replica_count: int
        """

        self._replica_count = replica_count

    @property
    def status(self):
        """Gets the status of this ServiceResourceProperties.

        Represents the status of the service.

        :return: The status of this ServiceResourceProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ServiceResourceProperties.

        Represents the status of the service.

        :param status: The status of this ServiceResourceProperties.
        :type status: str
        """
        allowed_values = ["Unknown", "Active", "Upgrading", "Deleting", "Creating", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
