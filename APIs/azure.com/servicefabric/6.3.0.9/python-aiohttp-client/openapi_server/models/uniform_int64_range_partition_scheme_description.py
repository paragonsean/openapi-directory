# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_scheme import PartitionScheme
from openapi_server.models.partition_scheme_description import PartitionSchemeDescription
from openapi_server import util


class UniformInt64RangePartitionSchemeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, high_key: str=None, low_key: str=None, partition_scheme: PartitionScheme=None):
        """UniformInt64RangePartitionSchemeDescription - a model defined in OpenAPI

        :param count: The count of this UniformInt64RangePartitionSchemeDescription.
        :param high_key: The high_key of this UniformInt64RangePartitionSchemeDescription.
        :param low_key: The low_key of this UniformInt64RangePartitionSchemeDescription.
        :param partition_scheme: The partition_scheme of this UniformInt64RangePartitionSchemeDescription.
        """
        self.openapi_types = {
            'count': int,
            'high_key': str,
            'low_key': str,
            'partition_scheme': PartitionScheme
        }

        self.attribute_map = {
            'count': 'Count',
            'high_key': 'HighKey',
            'low_key': 'LowKey',
            'partition_scheme': 'PartitionScheme'
        }

        self._count = count
        self._high_key = high_key
        self._low_key = low_key
        self._partition_scheme = partition_scheme

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UniformInt64RangePartitionSchemeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UniformInt64RangePartitionSchemeDescription of this UniformInt64RangePartitionSchemeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this UniformInt64RangePartitionSchemeDescription.

        The number of partitions.

        :return: The count of this UniformInt64RangePartitionSchemeDescription.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this UniformInt64RangePartitionSchemeDescription.

        The number of partitions.

        :param count: The count of this UniformInt64RangePartitionSchemeDescription.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def high_key(self):
        """Gets the high_key of this UniformInt64RangePartitionSchemeDescription.

        String indicating the upper bound of the partition key range that should be split between the partitions.

        :return: The high_key of this UniformInt64RangePartitionSchemeDescription.
        :rtype: str
        """
        return self._high_key

    @high_key.setter
    def high_key(self, high_key):
        """Sets the high_key of this UniformInt64RangePartitionSchemeDescription.

        String indicating the upper bound of the partition key range that should be split between the partitions.

        :param high_key: The high_key of this UniformInt64RangePartitionSchemeDescription.
        :type high_key: str
        """
        if high_key is None:
            raise ValueError("Invalid value for `high_key`, must not be `None`")

        self._high_key = high_key

    @property
    def low_key(self):
        """Gets the low_key of this UniformInt64RangePartitionSchemeDescription.

        String indicating the lower bound of the partition key range that should be split between the partitions.

        :return: The low_key of this UniformInt64RangePartitionSchemeDescription.
        :rtype: str
        """
        return self._low_key

    @low_key.setter
    def low_key(self, low_key):
        """Sets the low_key of this UniformInt64RangePartitionSchemeDescription.

        String indicating the lower bound of the partition key range that should be split between the partitions.

        :param low_key: The low_key of this UniformInt64RangePartitionSchemeDescription.
        :type low_key: str
        """
        if low_key is None:
            raise ValueError("Invalid value for `low_key`, must not be `None`")

        self._low_key = low_key

    @property
    def partition_scheme(self):
        """Gets the partition_scheme of this UniformInt64RangePartitionSchemeDescription.


        :return: The partition_scheme of this UniformInt64RangePartitionSchemeDescription.
        :rtype: PartitionScheme
        """
        return self._partition_scheme

    @partition_scheme.setter
    def partition_scheme(self, partition_scheme):
        """Sets the partition_scheme of this UniformInt64RangePartitionSchemeDescription.


        :param partition_scheme: The partition_scheme of this UniformInt64RangePartitionSchemeDescription.
        :type partition_scheme: PartitionScheme
        """
        if partition_scheme is None:
            raise ValueError("Invalid value for `partition_scheme`, must not be `None`")

        self._partition_scheme = partition_scheme
