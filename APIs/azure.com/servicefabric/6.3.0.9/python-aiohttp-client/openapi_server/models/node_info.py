# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server.models.node_deactivation_info import NodeDeactivationInfo
from openapi_server.models.node_id import NodeId
from openapi_server.models.node_status import NodeStatus
from openapi_server import util


class NodeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_version: str=None, config_version: str=None, fault_domain: str=None, health_state: HealthState=None, id: NodeId=None, instance_id: str=None, ip_address_or_fqdn: str=None, is_seed_node: bool=None, is_stopped: bool=None, name: str=None, node_deactivation_info: NodeDeactivationInfo=None, node_down_at: datetime=None, node_down_time_in_seconds: str=None, node_status: NodeStatus=None, node_up_at: datetime=None, node_up_time_in_seconds: str=None, type: str=None, upgrade_domain: str=None):
        """NodeInfo - a model defined in OpenAPI

        :param code_version: The code_version of this NodeInfo.
        :param config_version: The config_version of this NodeInfo.
        :param fault_domain: The fault_domain of this NodeInfo.
        :param health_state: The health_state of this NodeInfo.
        :param id: The id of this NodeInfo.
        :param instance_id: The instance_id of this NodeInfo.
        :param ip_address_or_fqdn: The ip_address_or_fqdn of this NodeInfo.
        :param is_seed_node: The is_seed_node of this NodeInfo.
        :param is_stopped: The is_stopped of this NodeInfo.
        :param name: The name of this NodeInfo.
        :param node_deactivation_info: The node_deactivation_info of this NodeInfo.
        :param node_down_at: The node_down_at of this NodeInfo.
        :param node_down_time_in_seconds: The node_down_time_in_seconds of this NodeInfo.
        :param node_status: The node_status of this NodeInfo.
        :param node_up_at: The node_up_at of this NodeInfo.
        :param node_up_time_in_seconds: The node_up_time_in_seconds of this NodeInfo.
        :param type: The type of this NodeInfo.
        :param upgrade_domain: The upgrade_domain of this NodeInfo.
        """
        self.openapi_types = {
            'code_version': str,
            'config_version': str,
            'fault_domain': str,
            'health_state': HealthState,
            'id': NodeId,
            'instance_id': str,
            'ip_address_or_fqdn': str,
            'is_seed_node': bool,
            'is_stopped': bool,
            'name': str,
            'node_deactivation_info': NodeDeactivationInfo,
            'node_down_at': datetime,
            'node_down_time_in_seconds': str,
            'node_status': NodeStatus,
            'node_up_at': datetime,
            'node_up_time_in_seconds': str,
            'type': str,
            'upgrade_domain': str
        }

        self.attribute_map = {
            'code_version': 'CodeVersion',
            'config_version': 'ConfigVersion',
            'fault_domain': 'FaultDomain',
            'health_state': 'HealthState',
            'id': 'Id',
            'instance_id': 'InstanceId',
            'ip_address_or_fqdn': 'IpAddressOrFQDN',
            'is_seed_node': 'IsSeedNode',
            'is_stopped': 'IsStopped',
            'name': 'Name',
            'node_deactivation_info': 'NodeDeactivationInfo',
            'node_down_at': 'NodeDownAt',
            'node_down_time_in_seconds': 'NodeDownTimeInSeconds',
            'node_status': 'NodeStatus',
            'node_up_at': 'NodeUpAt',
            'node_up_time_in_seconds': 'NodeUpTimeInSeconds',
            'type': 'Type',
            'upgrade_domain': 'UpgradeDomain'
        }

        self._code_version = code_version
        self._config_version = config_version
        self._fault_domain = fault_domain
        self._health_state = health_state
        self._id = id
        self._instance_id = instance_id
        self._ip_address_or_fqdn = ip_address_or_fqdn
        self._is_seed_node = is_seed_node
        self._is_stopped = is_stopped
        self._name = name
        self._node_deactivation_info = node_deactivation_info
        self._node_down_at = node_down_at
        self._node_down_time_in_seconds = node_down_time_in_seconds
        self._node_status = node_status
        self._node_up_at = node_up_at
        self._node_up_time_in_seconds = node_up_time_in_seconds
        self._type = type
        self._upgrade_domain = upgrade_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeInfo of this NodeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_version(self):
        """Gets the code_version of this NodeInfo.

        The version of Service Fabric binaries that the node is running.

        :return: The code_version of this NodeInfo.
        :rtype: str
        """
        return self._code_version

    @code_version.setter
    def code_version(self, code_version):
        """Sets the code_version of this NodeInfo.

        The version of Service Fabric binaries that the node is running.

        :param code_version: The code_version of this NodeInfo.
        :type code_version: str
        """

        self._code_version = code_version

    @property
    def config_version(self):
        """Gets the config_version of this NodeInfo.

        The version of Service Fabric cluster manifest that the node is using.

        :return: The config_version of this NodeInfo.
        :rtype: str
        """
        return self._config_version

    @config_version.setter
    def config_version(self, config_version):
        """Sets the config_version of this NodeInfo.

        The version of Service Fabric cluster manifest that the node is using.

        :param config_version: The config_version of this NodeInfo.
        :type config_version: str
        """

        self._config_version = config_version

    @property
    def fault_domain(self):
        """Gets the fault_domain of this NodeInfo.

        The fault domain of the node.

        :return: The fault_domain of this NodeInfo.
        :rtype: str
        """
        return self._fault_domain

    @fault_domain.setter
    def fault_domain(self, fault_domain):
        """Sets the fault_domain of this NodeInfo.

        The fault domain of the node.

        :param fault_domain: The fault_domain of this NodeInfo.
        :type fault_domain: str
        """

        self._fault_domain = fault_domain

    @property
    def health_state(self):
        """Gets the health_state of this NodeInfo.


        :return: The health_state of this NodeInfo.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this NodeInfo.


        :param health_state: The health_state of this NodeInfo.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def id(self):
        """Gets the id of this NodeInfo.


        :return: The id of this NodeInfo.
        :rtype: NodeId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NodeInfo.


        :param id: The id of this NodeInfo.
        :type id: NodeId
        """

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this NodeInfo.

        The ID representing the node instance. While the ID of the node is deterministically generated from the node name and remains same across restarts, the InstanceId changes every time node restarts.

        :return: The instance_id of this NodeInfo.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this NodeInfo.

        The ID representing the node instance. While the ID of the node is deterministically generated from the node name and remains same across restarts, the InstanceId changes every time node restarts.

        :param instance_id: The instance_id of this NodeInfo.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def ip_address_or_fqdn(self):
        """Gets the ip_address_or_fqdn of this NodeInfo.

        The IP address or fully qualified domain name of the node.

        :return: The ip_address_or_fqdn of this NodeInfo.
        :rtype: str
        """
        return self._ip_address_or_fqdn

    @ip_address_or_fqdn.setter
    def ip_address_or_fqdn(self, ip_address_or_fqdn):
        """Sets the ip_address_or_fqdn of this NodeInfo.

        The IP address or fully qualified domain name of the node.

        :param ip_address_or_fqdn: The ip_address_or_fqdn of this NodeInfo.
        :type ip_address_or_fqdn: str
        """

        self._ip_address_or_fqdn = ip_address_or_fqdn

    @property
    def is_seed_node(self):
        """Gets the is_seed_node of this NodeInfo.

        Indicates if the node is a seed node or not. Returns true if the node is a seed node, otherwise false. A quorum of seed nodes are required for proper operation of Service Fabric cluster.

        :return: The is_seed_node of this NodeInfo.
        :rtype: bool
        """
        return self._is_seed_node

    @is_seed_node.setter
    def is_seed_node(self, is_seed_node):
        """Sets the is_seed_node of this NodeInfo.

        Indicates if the node is a seed node or not. Returns true if the node is a seed node, otherwise false. A quorum of seed nodes are required for proper operation of Service Fabric cluster.

        :param is_seed_node: The is_seed_node of this NodeInfo.
        :type is_seed_node: bool
        """

        self._is_seed_node = is_seed_node

    @property
    def is_stopped(self):
        """Gets the is_stopped of this NodeInfo.

        Indicates if the node is stopped by calling stop node API or not. Returns true if the node is stopped, otherwise false.

        :return: The is_stopped of this NodeInfo.
        :rtype: bool
        """
        return self._is_stopped

    @is_stopped.setter
    def is_stopped(self, is_stopped):
        """Sets the is_stopped of this NodeInfo.

        Indicates if the node is stopped by calling stop node API or not. Returns true if the node is stopped, otherwise false.

        :param is_stopped: The is_stopped of this NodeInfo.
        :type is_stopped: bool
        """

        self._is_stopped = is_stopped

    @property
    def name(self):
        """Gets the name of this NodeInfo.

        The name of a Service Fabric node.

        :return: The name of this NodeInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeInfo.

        The name of a Service Fabric node.

        :param name: The name of this NodeInfo.
        :type name: str
        """

        self._name = name

    @property
    def node_deactivation_info(self):
        """Gets the node_deactivation_info of this NodeInfo.


        :return: The node_deactivation_info of this NodeInfo.
        :rtype: NodeDeactivationInfo
        """
        return self._node_deactivation_info

    @node_deactivation_info.setter
    def node_deactivation_info(self, node_deactivation_info):
        """Sets the node_deactivation_info of this NodeInfo.


        :param node_deactivation_info: The node_deactivation_info of this NodeInfo.
        :type node_deactivation_info: NodeDeactivationInfo
        """

        self._node_deactivation_info = node_deactivation_info

    @property
    def node_down_at(self):
        """Gets the node_down_at of this NodeInfo.

        Date time in UTC when the node went down. If node has never been down then this value will be zero date time.

        :return: The node_down_at of this NodeInfo.
        :rtype: datetime
        """
        return self._node_down_at

    @node_down_at.setter
    def node_down_at(self, node_down_at):
        """Sets the node_down_at of this NodeInfo.

        Date time in UTC when the node went down. If node has never been down then this value will be zero date time.

        :param node_down_at: The node_down_at of this NodeInfo.
        :type node_down_at: datetime
        """

        self._node_down_at = node_down_at

    @property
    def node_down_time_in_seconds(self):
        """Gets the node_down_time_in_seconds of this NodeInfo.

        Time in seconds since the node has been in NodeStatus Down. Value zero indicates node is not NodeStatus Down.

        :return: The node_down_time_in_seconds of this NodeInfo.
        :rtype: str
        """
        return self._node_down_time_in_seconds

    @node_down_time_in_seconds.setter
    def node_down_time_in_seconds(self, node_down_time_in_seconds):
        """Sets the node_down_time_in_seconds of this NodeInfo.

        Time in seconds since the node has been in NodeStatus Down. Value zero indicates node is not NodeStatus Down.

        :param node_down_time_in_seconds: The node_down_time_in_seconds of this NodeInfo.
        :type node_down_time_in_seconds: str
        """

        self._node_down_time_in_seconds = node_down_time_in_seconds

    @property
    def node_status(self):
        """Gets the node_status of this NodeInfo.


        :return: The node_status of this NodeInfo.
        :rtype: NodeStatus
        """
        return self._node_status

    @node_status.setter
    def node_status(self, node_status):
        """Sets the node_status of this NodeInfo.


        :param node_status: The node_status of this NodeInfo.
        :type node_status: NodeStatus
        """

        self._node_status = node_status

    @property
    def node_up_at(self):
        """Gets the node_up_at of this NodeInfo.

        Date time in UTC when the node came up. If the node has never been up then this value will be zero date time.

        :return: The node_up_at of this NodeInfo.
        :rtype: datetime
        """
        return self._node_up_at

    @node_up_at.setter
    def node_up_at(self, node_up_at):
        """Sets the node_up_at of this NodeInfo.

        Date time in UTC when the node came up. If the node has never been up then this value will be zero date time.

        :param node_up_at: The node_up_at of this NodeInfo.
        :type node_up_at: datetime
        """

        self._node_up_at = node_up_at

    @property
    def node_up_time_in_seconds(self):
        """Gets the node_up_time_in_seconds of this NodeInfo.

        Time in seconds since the node has been in NodeStatus Up. Value zero indicates that the node is not Up.

        :return: The node_up_time_in_seconds of this NodeInfo.
        :rtype: str
        """
        return self._node_up_time_in_seconds

    @node_up_time_in_seconds.setter
    def node_up_time_in_seconds(self, node_up_time_in_seconds):
        """Sets the node_up_time_in_seconds of this NodeInfo.

        Time in seconds since the node has been in NodeStatus Up. Value zero indicates that the node is not Up.

        :param node_up_time_in_seconds: The node_up_time_in_seconds of this NodeInfo.
        :type node_up_time_in_seconds: str
        """

        self._node_up_time_in_seconds = node_up_time_in_seconds

    @property
    def type(self):
        """Gets the type of this NodeInfo.

        The type of the node.

        :return: The type of this NodeInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NodeInfo.

        The type of the node.

        :param type: The type of this NodeInfo.
        :type type: str
        """

        self._type = type

    @property
    def upgrade_domain(self):
        """Gets the upgrade_domain of this NodeInfo.

        The upgrade domain of the node.

        :return: The upgrade_domain of this NodeInfo.
        :rtype: str
        """
        return self._upgrade_domain

    @upgrade_domain.setter
    def upgrade_domain(self, upgrade_domain):
        """Sets the upgrade_domain of this NodeInfo.

        The upgrade domain of the node.

        :param upgrade_domain: The upgrade_domain of this NodeInfo.
        :type upgrade_domain: str
        """

        self._upgrade_domain = upgrade_domain
