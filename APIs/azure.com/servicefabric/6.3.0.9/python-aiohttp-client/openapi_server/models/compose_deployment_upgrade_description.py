# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_health_policy import ApplicationHealthPolicy
from openapi_server.models.monitoring_policy_description import MonitoringPolicyDescription
from openapi_server.models.registry_credential import RegistryCredential
from openapi_server.models.upgrade_kind import UpgradeKind
from openapi_server.models.upgrade_mode import UpgradeMode
from openapi_server import util


class ComposeDeploymentUpgradeDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_health_policy: ApplicationHealthPolicy=None, compose_file_content: str=None, deployment_name: str=None, force_restart: bool=False, monitoring_policy: MonitoringPolicyDescription=None, registry_credential: RegistryCredential=None, rolling_upgrade_mode: UpgradeMode=UpgradeMode.UNMONITOREDAUTO, upgrade_kind: UpgradeKind=UpgradeKind.ROLLING, upgrade_replica_set_check_timeout_in_seconds: int=None):
        """ComposeDeploymentUpgradeDescription - a model defined in OpenAPI

        :param application_health_policy: The application_health_policy of this ComposeDeploymentUpgradeDescription.
        :param compose_file_content: The compose_file_content of this ComposeDeploymentUpgradeDescription.
        :param deployment_name: The deployment_name of this ComposeDeploymentUpgradeDescription.
        :param force_restart: The force_restart of this ComposeDeploymentUpgradeDescription.
        :param monitoring_policy: The monitoring_policy of this ComposeDeploymentUpgradeDescription.
        :param registry_credential: The registry_credential of this ComposeDeploymentUpgradeDescription.
        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ComposeDeploymentUpgradeDescription.
        :param upgrade_kind: The upgrade_kind of this ComposeDeploymentUpgradeDescription.
        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this ComposeDeploymentUpgradeDescription.
        """
        self.openapi_types = {
            'application_health_policy': ApplicationHealthPolicy,
            'compose_file_content': str,
            'deployment_name': str,
            'force_restart': bool,
            'monitoring_policy': MonitoringPolicyDescription,
            'registry_credential': RegistryCredential,
            'rolling_upgrade_mode': UpgradeMode,
            'upgrade_kind': UpgradeKind,
            'upgrade_replica_set_check_timeout_in_seconds': int
        }

        self.attribute_map = {
            'application_health_policy': 'ApplicationHealthPolicy',
            'compose_file_content': 'ComposeFileContent',
            'deployment_name': 'DeploymentName',
            'force_restart': 'ForceRestart',
            'monitoring_policy': 'MonitoringPolicy',
            'registry_credential': 'RegistryCredential',
            'rolling_upgrade_mode': 'RollingUpgradeMode',
            'upgrade_kind': 'UpgradeKind',
            'upgrade_replica_set_check_timeout_in_seconds': 'UpgradeReplicaSetCheckTimeoutInSeconds'
        }

        self._application_health_policy = application_health_policy
        self._compose_file_content = compose_file_content
        self._deployment_name = deployment_name
        self._force_restart = force_restart
        self._monitoring_policy = monitoring_policy
        self._registry_credential = registry_credential
        self._rolling_upgrade_mode = rolling_upgrade_mode
        self._upgrade_kind = upgrade_kind
        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComposeDeploymentUpgradeDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComposeDeploymentUpgradeDescription of this ComposeDeploymentUpgradeDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_health_policy(self):
        """Gets the application_health_policy of this ComposeDeploymentUpgradeDescription.


        :return: The application_health_policy of this ComposeDeploymentUpgradeDescription.
        :rtype: ApplicationHealthPolicy
        """
        return self._application_health_policy

    @application_health_policy.setter
    def application_health_policy(self, application_health_policy):
        """Sets the application_health_policy of this ComposeDeploymentUpgradeDescription.


        :param application_health_policy: The application_health_policy of this ComposeDeploymentUpgradeDescription.
        :type application_health_policy: ApplicationHealthPolicy
        """

        self._application_health_policy = application_health_policy

    @property
    def compose_file_content(self):
        """Gets the compose_file_content of this ComposeDeploymentUpgradeDescription.

        The content of the compose file that describes the deployment to create.

        :return: The compose_file_content of this ComposeDeploymentUpgradeDescription.
        :rtype: str
        """
        return self._compose_file_content

    @compose_file_content.setter
    def compose_file_content(self, compose_file_content):
        """Sets the compose_file_content of this ComposeDeploymentUpgradeDescription.

        The content of the compose file that describes the deployment to create.

        :param compose_file_content: The compose_file_content of this ComposeDeploymentUpgradeDescription.
        :type compose_file_content: str
        """
        if compose_file_content is None:
            raise ValueError("Invalid value for `compose_file_content`, must not be `None`")

        self._compose_file_content = compose_file_content

    @property
    def deployment_name(self):
        """Gets the deployment_name of this ComposeDeploymentUpgradeDescription.

        The name of the deployment.

        :return: The deployment_name of this ComposeDeploymentUpgradeDescription.
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """Sets the deployment_name of this ComposeDeploymentUpgradeDescription.

        The name of the deployment.

        :param deployment_name: The deployment_name of this ComposeDeploymentUpgradeDescription.
        :type deployment_name: str
        """
        if deployment_name is None:
            raise ValueError("Invalid value for `deployment_name`, must not be `None`")

        self._deployment_name = deployment_name

    @property
    def force_restart(self):
        """Gets the force_restart of this ComposeDeploymentUpgradeDescription.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :return: The force_restart of this ComposeDeploymentUpgradeDescription.
        :rtype: bool
        """
        return self._force_restart

    @force_restart.setter
    def force_restart(self, force_restart):
        """Sets the force_restart of this ComposeDeploymentUpgradeDescription.

        If true, then processes are forcefully restarted during upgrade even when the code version has not changed (the upgrade only changes configuration or data).

        :param force_restart: The force_restart of this ComposeDeploymentUpgradeDescription.
        :type force_restart: bool
        """

        self._force_restart = force_restart

    @property
    def monitoring_policy(self):
        """Gets the monitoring_policy of this ComposeDeploymentUpgradeDescription.


        :return: The monitoring_policy of this ComposeDeploymentUpgradeDescription.
        :rtype: MonitoringPolicyDescription
        """
        return self._monitoring_policy

    @monitoring_policy.setter
    def monitoring_policy(self, monitoring_policy):
        """Sets the monitoring_policy of this ComposeDeploymentUpgradeDescription.


        :param monitoring_policy: The monitoring_policy of this ComposeDeploymentUpgradeDescription.
        :type monitoring_policy: MonitoringPolicyDescription
        """

        self._monitoring_policy = monitoring_policy

    @property
    def registry_credential(self):
        """Gets the registry_credential of this ComposeDeploymentUpgradeDescription.


        :return: The registry_credential of this ComposeDeploymentUpgradeDescription.
        :rtype: RegistryCredential
        """
        return self._registry_credential

    @registry_credential.setter
    def registry_credential(self, registry_credential):
        """Sets the registry_credential of this ComposeDeploymentUpgradeDescription.


        :param registry_credential: The registry_credential of this ComposeDeploymentUpgradeDescription.
        :type registry_credential: RegistryCredential
        """

        self._registry_credential = registry_credential

    @property
    def rolling_upgrade_mode(self):
        """Gets the rolling_upgrade_mode of this ComposeDeploymentUpgradeDescription.


        :return: The rolling_upgrade_mode of this ComposeDeploymentUpgradeDescription.
        :rtype: UpgradeMode
        """
        return self._rolling_upgrade_mode

    @rolling_upgrade_mode.setter
    def rolling_upgrade_mode(self, rolling_upgrade_mode):
        """Sets the rolling_upgrade_mode of this ComposeDeploymentUpgradeDescription.


        :param rolling_upgrade_mode: The rolling_upgrade_mode of this ComposeDeploymentUpgradeDescription.
        :type rolling_upgrade_mode: UpgradeMode
        """

        self._rolling_upgrade_mode = rolling_upgrade_mode

    @property
    def upgrade_kind(self):
        """Gets the upgrade_kind of this ComposeDeploymentUpgradeDescription.


        :return: The upgrade_kind of this ComposeDeploymentUpgradeDescription.
        :rtype: UpgradeKind
        """
        return self._upgrade_kind

    @upgrade_kind.setter
    def upgrade_kind(self, upgrade_kind):
        """Sets the upgrade_kind of this ComposeDeploymentUpgradeDescription.


        :param upgrade_kind: The upgrade_kind of this ComposeDeploymentUpgradeDescription.
        :type upgrade_kind: UpgradeKind
        """
        if upgrade_kind is None:
            raise ValueError("Invalid value for `upgrade_kind`, must not be `None`")

        self._upgrade_kind = upgrade_kind

    @property
    def upgrade_replica_set_check_timeout_in_seconds(self):
        """Gets the upgrade_replica_set_check_timeout_in_seconds of this ComposeDeploymentUpgradeDescription.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :return: The upgrade_replica_set_check_timeout_in_seconds of this ComposeDeploymentUpgradeDescription.
        :rtype: int
        """
        return self._upgrade_replica_set_check_timeout_in_seconds

    @upgrade_replica_set_check_timeout_in_seconds.setter
    def upgrade_replica_set_check_timeout_in_seconds(self, upgrade_replica_set_check_timeout_in_seconds):
        """Sets the upgrade_replica_set_check_timeout_in_seconds of this ComposeDeploymentUpgradeDescription.

        The maximum amount of time to block processing of an upgrade domain and prevent loss of availability when there are unexpected issues. When this timeout expires, processing of the upgrade domain will proceed regardless of availability loss issues. The timeout is reset at the start of each upgrade domain. Valid values are between 0 and 42949672925 inclusive. (unsigned 32-bit integer).

        :param upgrade_replica_set_check_timeout_in_seconds: The upgrade_replica_set_check_timeout_in_seconds of this ComposeDeploymentUpgradeDescription.
        :type upgrade_replica_set_check_timeout_in_seconds: int
        """

        self._upgrade_replica_set_check_timeout_in_seconds = upgrade_replica_set_check_timeout_in_seconds
