# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_state import HealthState
from openapi_server.models.service_info import ServiceInfo
from openapi_server.models.service_kind import ServiceKind
from openapi_server.models.service_status import ServiceStatus
from openapi_server import util


class StatefulServiceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, health_state: HealthState=None, id: str=None, is_service_group: bool=None, manifest_version: str=None, name: str=None, service_kind: ServiceKind=None, service_status: ServiceStatus=None, type_name: str=None, has_persisted_state: bool=None):
        """StatefulServiceInfo - a model defined in OpenAPI

        :param health_state: The health_state of this StatefulServiceInfo.
        :param id: The id of this StatefulServiceInfo.
        :param is_service_group: The is_service_group of this StatefulServiceInfo.
        :param manifest_version: The manifest_version of this StatefulServiceInfo.
        :param name: The name of this StatefulServiceInfo.
        :param service_kind: The service_kind of this StatefulServiceInfo.
        :param service_status: The service_status of this StatefulServiceInfo.
        :param type_name: The type_name of this StatefulServiceInfo.
        :param has_persisted_state: The has_persisted_state of this StatefulServiceInfo.
        """
        self.openapi_types = {
            'health_state': HealthState,
            'id': str,
            'is_service_group': bool,
            'manifest_version': str,
            'name': str,
            'service_kind': ServiceKind,
            'service_status': ServiceStatus,
            'type_name': str,
            'has_persisted_state': bool
        }

        self.attribute_map = {
            'health_state': 'HealthState',
            'id': 'Id',
            'is_service_group': 'IsServiceGroup',
            'manifest_version': 'ManifestVersion',
            'name': 'Name',
            'service_kind': 'ServiceKind',
            'service_status': 'ServiceStatus',
            'type_name': 'TypeName',
            'has_persisted_state': 'HasPersistedState'
        }

        self._health_state = health_state
        self._id = id
        self._is_service_group = is_service_group
        self._manifest_version = manifest_version
        self._name = name
        self._service_kind = service_kind
        self._service_status = service_status
        self._type_name = type_name
        self._has_persisted_state = has_persisted_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatefulServiceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatefulServiceInfo of this StatefulServiceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def health_state(self):
        """Gets the health_state of this StatefulServiceInfo.


        :return: The health_state of this StatefulServiceInfo.
        :rtype: HealthState
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this StatefulServiceInfo.


        :param health_state: The health_state of this StatefulServiceInfo.
        :type health_state: HealthState
        """

        self._health_state = health_state

    @property
    def id(self):
        """Gets the id of this StatefulServiceInfo.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :return: The id of this StatefulServiceInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StatefulServiceInfo.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :param id: The id of this StatefulServiceInfo.
        :type id: str
        """

        self._id = id

    @property
    def is_service_group(self):
        """Gets the is_service_group of this StatefulServiceInfo.

        Whether the service is in a service group.

        :return: The is_service_group of this StatefulServiceInfo.
        :rtype: bool
        """
        return self._is_service_group

    @is_service_group.setter
    def is_service_group(self, is_service_group):
        """Sets the is_service_group of this StatefulServiceInfo.

        Whether the service is in a service group.

        :param is_service_group: The is_service_group of this StatefulServiceInfo.
        :type is_service_group: bool
        """

        self._is_service_group = is_service_group

    @property
    def manifest_version(self):
        """Gets the manifest_version of this StatefulServiceInfo.

        The version of the service manifest.

        :return: The manifest_version of this StatefulServiceInfo.
        :rtype: str
        """
        return self._manifest_version

    @manifest_version.setter
    def manifest_version(self, manifest_version):
        """Sets the manifest_version of this StatefulServiceInfo.

        The version of the service manifest.

        :param manifest_version: The manifest_version of this StatefulServiceInfo.
        :type manifest_version: str
        """

        self._manifest_version = manifest_version

    @property
    def name(self):
        """Gets the name of this StatefulServiceInfo.

        The full name of the service with 'fabric:' URI scheme.

        :return: The name of this StatefulServiceInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StatefulServiceInfo.

        The full name of the service with 'fabric:' URI scheme.

        :param name: The name of this StatefulServiceInfo.
        :type name: str
        """

        self._name = name

    @property
    def service_kind(self):
        """Gets the service_kind of this StatefulServiceInfo.


        :return: The service_kind of this StatefulServiceInfo.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this StatefulServiceInfo.


        :param service_kind: The service_kind of this StatefulServiceInfo.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind

    @property
    def service_status(self):
        """Gets the service_status of this StatefulServiceInfo.


        :return: The service_status of this StatefulServiceInfo.
        :rtype: ServiceStatus
        """
        return self._service_status

    @service_status.setter
    def service_status(self, service_status):
        """Sets the service_status of this StatefulServiceInfo.


        :param service_status: The service_status of this StatefulServiceInfo.
        :type service_status: ServiceStatus
        """

        self._service_status = service_status

    @property
    def type_name(self):
        """Gets the type_name of this StatefulServiceInfo.

        Name of the service type as specified in the service manifest.

        :return: The type_name of this StatefulServiceInfo.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this StatefulServiceInfo.

        Name of the service type as specified in the service manifest.

        :param type_name: The type_name of this StatefulServiceInfo.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def has_persisted_state(self):
        """Gets the has_persisted_state of this StatefulServiceInfo.

        Whether the service has persisted state.

        :return: The has_persisted_state of this StatefulServiceInfo.
        :rtype: bool
        """
        return self._has_persisted_state

    @has_persisted_state.setter
    def has_persisted_state(self, has_persisted_state):
        """Sets the has_persisted_state of this StatefulServiceInfo.

        Whether the service has persisted state.

        :param has_persisted_state: The has_persisted_state of this StatefulServiceInfo.
        :type has_persisted_state: bool
        """

        self._has_persisted_state = has_persisted_state
