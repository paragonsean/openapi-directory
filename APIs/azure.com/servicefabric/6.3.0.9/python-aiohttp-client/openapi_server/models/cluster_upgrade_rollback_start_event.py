# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_event import ClusterEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ClusterUpgradeRollbackStartEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, failure_reason: str=None, overall_upgrade_elapsed_time_in_ms: float=None, target_cluster_version: str=None):
        """ClusterUpgradeRollbackStartEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ClusterUpgradeRollbackStartEvent.
        :param has_correlated_events: The has_correlated_events of this ClusterUpgradeRollbackStartEvent.
        :param kind: The kind of this ClusterUpgradeRollbackStartEvent.
        :param time_stamp: The time_stamp of this ClusterUpgradeRollbackStartEvent.
        :param failure_reason: The failure_reason of this ClusterUpgradeRollbackStartEvent.
        :param overall_upgrade_elapsed_time_in_ms: The overall_upgrade_elapsed_time_in_ms of this ClusterUpgradeRollbackStartEvent.
        :param target_cluster_version: The target_cluster_version of this ClusterUpgradeRollbackStartEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'failure_reason': str,
            'overall_upgrade_elapsed_time_in_ms': float,
            'target_cluster_version': str
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'failure_reason': 'FailureReason',
            'overall_upgrade_elapsed_time_in_ms': 'OverallUpgradeElapsedTimeInMs',
            'target_cluster_version': 'TargetClusterVersion'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._failure_reason = failure_reason
        self._overall_upgrade_elapsed_time_in_ms = overall_upgrade_elapsed_time_in_ms
        self._target_cluster_version = target_cluster_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeRollbackStartEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeRollbackStartEvent of this ClusterUpgradeRollbackStartEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ClusterUpgradeRollbackStartEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ClusterUpgradeRollbackStartEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ClusterUpgradeRollbackStartEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ClusterUpgradeRollbackStartEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ClusterUpgradeRollbackStartEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ClusterUpgradeRollbackStartEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ClusterUpgradeRollbackStartEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ClusterUpgradeRollbackStartEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ClusterUpgradeRollbackStartEvent.


        :return: The kind of this ClusterUpgradeRollbackStartEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ClusterUpgradeRollbackStartEvent.


        :param kind: The kind of this ClusterUpgradeRollbackStartEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ClusterUpgradeRollbackStartEvent.

        The time event was logged.

        :return: The time_stamp of this ClusterUpgradeRollbackStartEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ClusterUpgradeRollbackStartEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ClusterUpgradeRollbackStartEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def failure_reason(self):
        """Gets the failure_reason of this ClusterUpgradeRollbackStartEvent.

        Describes failure.

        :return: The failure_reason of this ClusterUpgradeRollbackStartEvent.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this ClusterUpgradeRollbackStartEvent.

        Describes failure.

        :param failure_reason: The failure_reason of this ClusterUpgradeRollbackStartEvent.
        :type failure_reason: str
        """
        if failure_reason is None:
            raise ValueError("Invalid value for `failure_reason`, must not be `None`")

        self._failure_reason = failure_reason

    @property
    def overall_upgrade_elapsed_time_in_ms(self):
        """Gets the overall_upgrade_elapsed_time_in_ms of this ClusterUpgradeRollbackStartEvent.

        Overall duration of upgrade in milli-seconds.

        :return: The overall_upgrade_elapsed_time_in_ms of this ClusterUpgradeRollbackStartEvent.
        :rtype: float
        """
        return self._overall_upgrade_elapsed_time_in_ms

    @overall_upgrade_elapsed_time_in_ms.setter
    def overall_upgrade_elapsed_time_in_ms(self, overall_upgrade_elapsed_time_in_ms):
        """Sets the overall_upgrade_elapsed_time_in_ms of this ClusterUpgradeRollbackStartEvent.

        Overall duration of upgrade in milli-seconds.

        :param overall_upgrade_elapsed_time_in_ms: The overall_upgrade_elapsed_time_in_ms of this ClusterUpgradeRollbackStartEvent.
        :type overall_upgrade_elapsed_time_in_ms: float
        """
        if overall_upgrade_elapsed_time_in_ms is None:
            raise ValueError("Invalid value for `overall_upgrade_elapsed_time_in_ms`, must not be `None`")

        self._overall_upgrade_elapsed_time_in_ms = overall_upgrade_elapsed_time_in_ms

    @property
    def target_cluster_version(self):
        """Gets the target_cluster_version of this ClusterUpgradeRollbackStartEvent.

        Target Cluster version.

        :return: The target_cluster_version of this ClusterUpgradeRollbackStartEvent.
        :rtype: str
        """
        return self._target_cluster_version

    @target_cluster_version.setter
    def target_cluster_version(self, target_cluster_version):
        """Sets the target_cluster_version of this ClusterUpgradeRollbackStartEvent.

        Target Cluster version.

        :param target_cluster_version: The target_cluster_version of this ClusterUpgradeRollbackStartEvent.
        :type target_cluster_version: str
        """
        if target_cluster_version is None:
            raise ValueError("Invalid value for `target_cluster_version`, must not be `None`")

        self._target_cluster_version = target_cluster_version
