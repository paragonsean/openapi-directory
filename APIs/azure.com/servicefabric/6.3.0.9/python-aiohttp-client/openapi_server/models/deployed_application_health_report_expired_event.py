# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class DeployedApplicationHealthReportExpiredEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, application_id: str=None, application_instance_id: int=None, description: str=None, health_state: str=None, node_name: str=None, _property: str=None, remove_when_expired: bool=None, sequence_number: int=None, source_id: str=None, source_utc_timestamp: datetime=None, time_to_live_ms: int=None):
        """DeployedApplicationHealthReportExpiredEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this DeployedApplicationHealthReportExpiredEvent.
        :param has_correlated_events: The has_correlated_events of this DeployedApplicationHealthReportExpiredEvent.
        :param kind: The kind of this DeployedApplicationHealthReportExpiredEvent.
        :param time_stamp: The time_stamp of this DeployedApplicationHealthReportExpiredEvent.
        :param application_id: The application_id of this DeployedApplicationHealthReportExpiredEvent.
        :param application_instance_id: The application_instance_id of this DeployedApplicationHealthReportExpiredEvent.
        :param description: The description of this DeployedApplicationHealthReportExpiredEvent.
        :param health_state: The health_state of this DeployedApplicationHealthReportExpiredEvent.
        :param node_name: The node_name of this DeployedApplicationHealthReportExpiredEvent.
        :param _property: The _property of this DeployedApplicationHealthReportExpiredEvent.
        :param remove_when_expired: The remove_when_expired of this DeployedApplicationHealthReportExpiredEvent.
        :param sequence_number: The sequence_number of this DeployedApplicationHealthReportExpiredEvent.
        :param source_id: The source_id of this DeployedApplicationHealthReportExpiredEvent.
        :param source_utc_timestamp: The source_utc_timestamp of this DeployedApplicationHealthReportExpiredEvent.
        :param time_to_live_ms: The time_to_live_ms of this DeployedApplicationHealthReportExpiredEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'application_id': str,
            'application_instance_id': int,
            'description': str,
            'health_state': str,
            'node_name': str,
            '_property': str,
            'remove_when_expired': bool,
            'sequence_number': int,
            'source_id': str,
            'source_utc_timestamp': datetime,
            'time_to_live_ms': int
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'application_id': 'ApplicationId',
            'application_instance_id': 'ApplicationInstanceId',
            'description': 'Description',
            'health_state': 'HealthState',
            'node_name': 'NodeName',
            '_property': 'Property',
            'remove_when_expired': 'RemoveWhenExpired',
            'sequence_number': 'SequenceNumber',
            'source_id': 'SourceId',
            'source_utc_timestamp': 'SourceUtcTimestamp',
            'time_to_live_ms': 'TimeToLiveMs'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._application_id = application_id
        self._application_instance_id = application_instance_id
        self._description = description
        self._health_state = health_state
        self._node_name = node_name
        self.__property = _property
        self._remove_when_expired = remove_when_expired
        self._sequence_number = sequence_number
        self._source_id = source_id
        self._source_utc_timestamp = source_utc_timestamp
        self._time_to_live_ms = time_to_live_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedApplicationHealthReportExpiredEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedApplicationHealthReportExpiredEvent of this DeployedApplicationHealthReportExpiredEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this DeployedApplicationHealthReportExpiredEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this DeployedApplicationHealthReportExpiredEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this DeployedApplicationHealthReportExpiredEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this DeployedApplicationHealthReportExpiredEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this DeployedApplicationHealthReportExpiredEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this DeployedApplicationHealthReportExpiredEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this DeployedApplicationHealthReportExpiredEvent.


        :return: The kind of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DeployedApplicationHealthReportExpiredEvent.


        :param kind: The kind of this DeployedApplicationHealthReportExpiredEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this DeployedApplicationHealthReportExpiredEvent.

        The time event was logged.

        :return: The time_stamp of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this DeployedApplicationHealthReportExpiredEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this DeployedApplicationHealthReportExpiredEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def application_id(self):
        """Gets the application_id of this DeployedApplicationHealthReportExpiredEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this DeployedApplicationHealthReportExpiredEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this DeployedApplicationHealthReportExpiredEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def application_instance_id(self):
        """Gets the application_instance_id of this DeployedApplicationHealthReportExpiredEvent.

        Id of Application instance.

        :return: The application_instance_id of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: int
        """
        return self._application_instance_id

    @application_instance_id.setter
    def application_instance_id(self, application_instance_id):
        """Sets the application_instance_id of this DeployedApplicationHealthReportExpiredEvent.

        Id of Application instance.

        :param application_instance_id: The application_instance_id of this DeployedApplicationHealthReportExpiredEvent.
        :type application_instance_id: int
        """
        if application_instance_id is None:
            raise ValueError("Invalid value for `application_instance_id`, must not be `None`")

        self._application_instance_id = application_instance_id

    @property
    def description(self):
        """Gets the description of this DeployedApplicationHealthReportExpiredEvent.

        Description of report.

        :return: The description of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeployedApplicationHealthReportExpiredEvent.

        Description of report.

        :param description: The description of this DeployedApplicationHealthReportExpiredEvent.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this DeployedApplicationHealthReportExpiredEvent.

        Describes the property health state.

        :return: The health_state of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this DeployedApplicationHealthReportExpiredEvent.

        Describes the property health state.

        :param health_state: The health_state of this DeployedApplicationHealthReportExpiredEvent.
        :type health_state: str
        """
        if health_state is None:
            raise ValueError("Invalid value for `health_state`, must not be `None`")

        self._health_state = health_state

    @property
    def node_name(self):
        """Gets the node_name of this DeployedApplicationHealthReportExpiredEvent.

        The name of a Service Fabric node.

        :return: The node_name of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this DeployedApplicationHealthReportExpiredEvent.

        The name of a Service Fabric node.

        :param node_name: The node_name of this DeployedApplicationHealthReportExpiredEvent.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def _property(self):
        """Gets the _property of this DeployedApplicationHealthReportExpiredEvent.

        Describes the property.

        :return: The _property of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this DeployedApplicationHealthReportExpiredEvent.

        Describes the property.

        :param _property: The _property of this DeployedApplicationHealthReportExpiredEvent.
        :type _property: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")

        self.__property = _property

    @property
    def remove_when_expired(self):
        """Gets the remove_when_expired of this DeployedApplicationHealthReportExpiredEvent.

        Indicates the removal when it expires.

        :return: The remove_when_expired of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: bool
        """
        return self._remove_when_expired

    @remove_when_expired.setter
    def remove_when_expired(self, remove_when_expired):
        """Sets the remove_when_expired of this DeployedApplicationHealthReportExpiredEvent.

        Indicates the removal when it expires.

        :param remove_when_expired: The remove_when_expired of this DeployedApplicationHealthReportExpiredEvent.
        :type remove_when_expired: bool
        """
        if remove_when_expired is None:
            raise ValueError("Invalid value for `remove_when_expired`, must not be `None`")

        self._remove_when_expired = remove_when_expired

    @property
    def sequence_number(self):
        """Gets the sequence_number of this DeployedApplicationHealthReportExpiredEvent.

        Sequence number of report.

        :return: The sequence_number of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this DeployedApplicationHealthReportExpiredEvent.

        Sequence number of report.

        :param sequence_number: The sequence_number of this DeployedApplicationHealthReportExpiredEvent.
        :type sequence_number: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")

        self._sequence_number = sequence_number

    @property
    def source_id(self):
        """Gets the source_id of this DeployedApplicationHealthReportExpiredEvent.

        Id of report source.

        :return: The source_id of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DeployedApplicationHealthReportExpiredEvent.

        Id of report source.

        :param source_id: The source_id of this DeployedApplicationHealthReportExpiredEvent.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_utc_timestamp(self):
        """Gets the source_utc_timestamp of this DeployedApplicationHealthReportExpiredEvent.

        Source time.

        :return: The source_utc_timestamp of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: datetime
        """
        return self._source_utc_timestamp

    @source_utc_timestamp.setter
    def source_utc_timestamp(self, source_utc_timestamp):
        """Sets the source_utc_timestamp of this DeployedApplicationHealthReportExpiredEvent.

        Source time.

        :param source_utc_timestamp: The source_utc_timestamp of this DeployedApplicationHealthReportExpiredEvent.
        :type source_utc_timestamp: datetime
        """
        if source_utc_timestamp is None:
            raise ValueError("Invalid value for `source_utc_timestamp`, must not be `None`")

        self._source_utc_timestamp = source_utc_timestamp

    @property
    def time_to_live_ms(self):
        """Gets the time_to_live_ms of this DeployedApplicationHealthReportExpiredEvent.

        Time to live in milli-seconds.

        :return: The time_to_live_ms of this DeployedApplicationHealthReportExpiredEvent.
        :rtype: int
        """
        return self._time_to_live_ms

    @time_to_live_ms.setter
    def time_to_live_ms(self, time_to_live_ms):
        """Sets the time_to_live_ms of this DeployedApplicationHealthReportExpiredEvent.

        Time to live in milli-seconds.

        :param time_to_live_ms: The time_to_live_ms of this DeployedApplicationHealthReportExpiredEvent.
        :type time_to_live_ms: int
        """
        if time_to_live_ms is None:
            raise ValueError("Invalid value for `time_to_live_ms`, must not be `None`")

        self._time_to_live_ms = time_to_live_ms
