# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_storage_description import BackupStorageDescription
from openapi_server.models.backup_storage_kind import BackupStorageKind
from openapi_server import util


class FileShareBackupStorageDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path: str=None, primary_password: str=None, primary_user_name: str=None, secondary_password: str=None, secondary_user_name: str=None, friendly_name: str=None, storage_kind: BackupStorageKind=None):
        """FileShareBackupStorageDescription - a model defined in OpenAPI

        :param path: The path of this FileShareBackupStorageDescription.
        :param primary_password: The primary_password of this FileShareBackupStorageDescription.
        :param primary_user_name: The primary_user_name of this FileShareBackupStorageDescription.
        :param secondary_password: The secondary_password of this FileShareBackupStorageDescription.
        :param secondary_user_name: The secondary_user_name of this FileShareBackupStorageDescription.
        :param friendly_name: The friendly_name of this FileShareBackupStorageDescription.
        :param storage_kind: The storage_kind of this FileShareBackupStorageDescription.
        """
        self.openapi_types = {
            'path': str,
            'primary_password': str,
            'primary_user_name': str,
            'secondary_password': str,
            'secondary_user_name': str,
            'friendly_name': str,
            'storage_kind': BackupStorageKind
        }

        self.attribute_map = {
            'path': 'Path',
            'primary_password': 'PrimaryPassword',
            'primary_user_name': 'PrimaryUserName',
            'secondary_password': 'SecondaryPassword',
            'secondary_user_name': 'SecondaryUserName',
            'friendly_name': 'FriendlyName',
            'storage_kind': 'StorageKind'
        }

        self._path = path
        self._primary_password = primary_password
        self._primary_user_name = primary_user_name
        self._secondary_password = secondary_password
        self._secondary_user_name = secondary_user_name
        self._friendly_name = friendly_name
        self._storage_kind = storage_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileShareBackupStorageDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileShareBackupStorageDescription of this FileShareBackupStorageDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self):
        """Gets the path of this FileShareBackupStorageDescription.

        UNC path of the file share where to store or enumerate backups from.

        :return: The path of this FileShareBackupStorageDescription.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileShareBackupStorageDescription.

        UNC path of the file share where to store or enumerate backups from.

        :param path: The path of this FileShareBackupStorageDescription.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def primary_password(self):
        """Gets the primary_password of this FileShareBackupStorageDescription.

        Primary password to access the share location.

        :return: The primary_password of this FileShareBackupStorageDescription.
        :rtype: str
        """
        return self._primary_password

    @primary_password.setter
    def primary_password(self, primary_password):
        """Sets the primary_password of this FileShareBackupStorageDescription.

        Primary password to access the share location.

        :param primary_password: The primary_password of this FileShareBackupStorageDescription.
        :type primary_password: str
        """

        self._primary_password = primary_password

    @property
    def primary_user_name(self):
        """Gets the primary_user_name of this FileShareBackupStorageDescription.

        Primary user name to access the file share.

        :return: The primary_user_name of this FileShareBackupStorageDescription.
        :rtype: str
        """
        return self._primary_user_name

    @primary_user_name.setter
    def primary_user_name(self, primary_user_name):
        """Sets the primary_user_name of this FileShareBackupStorageDescription.

        Primary user name to access the file share.

        :param primary_user_name: The primary_user_name of this FileShareBackupStorageDescription.
        :type primary_user_name: str
        """

        self._primary_user_name = primary_user_name

    @property
    def secondary_password(self):
        """Gets the secondary_password of this FileShareBackupStorageDescription.

        Secondary password to access the share location

        :return: The secondary_password of this FileShareBackupStorageDescription.
        :rtype: str
        """
        return self._secondary_password

    @secondary_password.setter
    def secondary_password(self, secondary_password):
        """Sets the secondary_password of this FileShareBackupStorageDescription.

        Secondary password to access the share location

        :param secondary_password: The secondary_password of this FileShareBackupStorageDescription.
        :type secondary_password: str
        """

        self._secondary_password = secondary_password

    @property
    def secondary_user_name(self):
        """Gets the secondary_user_name of this FileShareBackupStorageDescription.

        Secondary user name to access the file share.

        :return: The secondary_user_name of this FileShareBackupStorageDescription.
        :rtype: str
        """
        return self._secondary_user_name

    @secondary_user_name.setter
    def secondary_user_name(self, secondary_user_name):
        """Sets the secondary_user_name of this FileShareBackupStorageDescription.

        Secondary user name to access the file share.

        :param secondary_user_name: The secondary_user_name of this FileShareBackupStorageDescription.
        :type secondary_user_name: str
        """

        self._secondary_user_name = secondary_user_name

    @property
    def friendly_name(self):
        """Gets the friendly_name of this FileShareBackupStorageDescription.

        Friendly name for this backup storage.

        :return: The friendly_name of this FileShareBackupStorageDescription.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this FileShareBackupStorageDescription.

        Friendly name for this backup storage.

        :param friendly_name: The friendly_name of this FileShareBackupStorageDescription.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def storage_kind(self):
        """Gets the storage_kind of this FileShareBackupStorageDescription.


        :return: The storage_kind of this FileShareBackupStorageDescription.
        :rtype: BackupStorageKind
        """
        return self._storage_kind

    @storage_kind.setter
    def storage_kind(self, storage_kind):
        """Sets the storage_kind of this FileShareBackupStorageDescription.


        :param storage_kind: The storage_kind of this FileShareBackupStorageDescription.
        :type storage_kind: BackupStorageKind
        """
        if storage_kind is None:
            raise ValueError("Invalid value for `storage_kind`, must not be `None`")

        self._storage_kind = storage_kind
