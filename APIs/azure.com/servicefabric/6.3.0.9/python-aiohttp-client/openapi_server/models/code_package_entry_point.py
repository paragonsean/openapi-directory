# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code_package_entry_point_statistics import CodePackageEntryPointStatistics
from openapi_server.models.entry_point_status import EntryPointStatus
from openapi_server import util


class CodePackageEntryPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code_package_entry_point_statistics: CodePackageEntryPointStatistics=None, entry_point_location: str=None, instance_id: str=None, next_activation_time: datetime=None, process_id: str=None, run_as_user_name: str=None, status: EntryPointStatus=None):
        """CodePackageEntryPoint - a model defined in OpenAPI

        :param code_package_entry_point_statistics: The code_package_entry_point_statistics of this CodePackageEntryPoint.
        :param entry_point_location: The entry_point_location of this CodePackageEntryPoint.
        :param instance_id: The instance_id of this CodePackageEntryPoint.
        :param next_activation_time: The next_activation_time of this CodePackageEntryPoint.
        :param process_id: The process_id of this CodePackageEntryPoint.
        :param run_as_user_name: The run_as_user_name of this CodePackageEntryPoint.
        :param status: The status of this CodePackageEntryPoint.
        """
        self.openapi_types = {
            'code_package_entry_point_statistics': CodePackageEntryPointStatistics,
            'entry_point_location': str,
            'instance_id': str,
            'next_activation_time': datetime,
            'process_id': str,
            'run_as_user_name': str,
            'status': EntryPointStatus
        }

        self.attribute_map = {
            'code_package_entry_point_statistics': 'CodePackageEntryPointStatistics',
            'entry_point_location': 'EntryPointLocation',
            'instance_id': 'InstanceId',
            'next_activation_time': 'NextActivationTime',
            'process_id': 'ProcessId',
            'run_as_user_name': 'RunAsUserName',
            'status': 'Status'
        }

        self._code_package_entry_point_statistics = code_package_entry_point_statistics
        self._entry_point_location = entry_point_location
        self._instance_id = instance_id
        self._next_activation_time = next_activation_time
        self._process_id = process_id
        self._run_as_user_name = run_as_user_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodePackageEntryPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodePackageEntryPoint of this CodePackageEntryPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code_package_entry_point_statistics(self):
        """Gets the code_package_entry_point_statistics of this CodePackageEntryPoint.


        :return: The code_package_entry_point_statistics of this CodePackageEntryPoint.
        :rtype: CodePackageEntryPointStatistics
        """
        return self._code_package_entry_point_statistics

    @code_package_entry_point_statistics.setter
    def code_package_entry_point_statistics(self, code_package_entry_point_statistics):
        """Sets the code_package_entry_point_statistics of this CodePackageEntryPoint.


        :param code_package_entry_point_statistics: The code_package_entry_point_statistics of this CodePackageEntryPoint.
        :type code_package_entry_point_statistics: CodePackageEntryPointStatistics
        """

        self._code_package_entry_point_statistics = code_package_entry_point_statistics

    @property
    def entry_point_location(self):
        """Gets the entry_point_location of this CodePackageEntryPoint.

        The location of entry point executable on the node.

        :return: The entry_point_location of this CodePackageEntryPoint.
        :rtype: str
        """
        return self._entry_point_location

    @entry_point_location.setter
    def entry_point_location(self, entry_point_location):
        """Sets the entry_point_location of this CodePackageEntryPoint.

        The location of entry point executable on the node.

        :param entry_point_location: The entry_point_location of this CodePackageEntryPoint.
        :type entry_point_location: str
        """

        self._entry_point_location = entry_point_location

    @property
    def instance_id(self):
        """Gets the instance_id of this CodePackageEntryPoint.

        The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.

        :return: The instance_id of this CodePackageEntryPoint.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this CodePackageEntryPoint.

        The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.

        :param instance_id: The instance_id of this CodePackageEntryPoint.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def next_activation_time(self):
        """Gets the next_activation_time of this CodePackageEntryPoint.

        The time (in UTC) when the entry point executable will be run next.

        :return: The next_activation_time of this CodePackageEntryPoint.
        :rtype: datetime
        """
        return self._next_activation_time

    @next_activation_time.setter
    def next_activation_time(self, next_activation_time):
        """Sets the next_activation_time of this CodePackageEntryPoint.

        The time (in UTC) when the entry point executable will be run next.

        :param next_activation_time: The next_activation_time of this CodePackageEntryPoint.
        :type next_activation_time: datetime
        """

        self._next_activation_time = next_activation_time

    @property
    def process_id(self):
        """Gets the process_id of this CodePackageEntryPoint.

        The process ID of the entry point.

        :return: The process_id of this CodePackageEntryPoint.
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this CodePackageEntryPoint.

        The process ID of the entry point.

        :param process_id: The process_id of this CodePackageEntryPoint.
        :type process_id: str
        """

        self._process_id = process_id

    @property
    def run_as_user_name(self):
        """Gets the run_as_user_name of this CodePackageEntryPoint.

        The user name under which entry point executable is run on the node.

        :return: The run_as_user_name of this CodePackageEntryPoint.
        :rtype: str
        """
        return self._run_as_user_name

    @run_as_user_name.setter
    def run_as_user_name(self, run_as_user_name):
        """Sets the run_as_user_name of this CodePackageEntryPoint.

        The user name under which entry point executable is run on the node.

        :param run_as_user_name: The run_as_user_name of this CodePackageEntryPoint.
        :type run_as_user_name: str
        """

        self._run_as_user_name = run_as_user_name

    @property
    def status(self):
        """Gets the status of this CodePackageEntryPoint.


        :return: The status of this CodePackageEntryPoint.
        :rtype: EntryPointStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CodePackageEntryPoint.


        :param status: The status of this CodePackageEntryPoint.
        :type status: EntryPointStatus
        """

        self._status = status
