# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeOfDay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hour: int=None, minute: int=None):
        """TimeOfDay - a model defined in OpenAPI

        :param hour: The hour of this TimeOfDay.
        :param minute: The minute of this TimeOfDay.
        """
        self.openapi_types = {
            'hour': int,
            'minute': int
        }

        self.attribute_map = {
            'hour': 'Hour',
            'minute': 'Minute'
        }

        self._hour = hour
        self._minute = minute

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeOfDay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeOfDay of this TimeOfDay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hour(self):
        """Gets the hour of this TimeOfDay.

        Represents the hour of the day. Value must be between 0 and 23 inclusive.

        :return: The hour of this TimeOfDay.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this TimeOfDay.

        Represents the hour of the day. Value must be between 0 and 23 inclusive.

        :param hour: The hour of this TimeOfDay.
        :type hour: int
        """
        if hour is not None and hour > 23:
            raise ValueError("Invalid value for `hour`, must be a value less than or equal to `23`")
        if hour is not None and hour < 0:
            raise ValueError("Invalid value for `hour`, must be a value greater than or equal to `0`")

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this TimeOfDay.

        Represents the minute of the hour. Value must be between 0 to 59 inclusive.

        :return: The minute of this TimeOfDay.
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this TimeOfDay.

        Represents the minute of the hour. Value must be between 0 to 59 inclusive.

        :param minute: The minute of this TimeOfDay.
        :type minute: int
        """
        if minute is not None and minute > 59:
            raise ValueError("Invalid value for `minute`, must be a value less than or equal to `59`")
        if minute is not None and minute < 0:
            raise ValueError("Invalid value for `minute`, must be a value greater than or equal to `0`")

        self._minute = minute
