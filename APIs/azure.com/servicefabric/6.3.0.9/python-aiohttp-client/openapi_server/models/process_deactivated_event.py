# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ProcessDeactivatedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, application_id: str=None, code_package_name: str=None, entry_point_type: str=None, exe_name: str=None, exit_code: int=None, host_id: str=None, is_exclusive: bool=None, process_id: int=None, service_name: str=None, service_package_activation_id: str=None, service_package_name: str=None, start_time: datetime=None, unexpected_termination: bool=None):
        """ProcessDeactivatedEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ProcessDeactivatedEvent.
        :param has_correlated_events: The has_correlated_events of this ProcessDeactivatedEvent.
        :param kind: The kind of this ProcessDeactivatedEvent.
        :param time_stamp: The time_stamp of this ProcessDeactivatedEvent.
        :param application_id: The application_id of this ProcessDeactivatedEvent.
        :param code_package_name: The code_package_name of this ProcessDeactivatedEvent.
        :param entry_point_type: The entry_point_type of this ProcessDeactivatedEvent.
        :param exe_name: The exe_name of this ProcessDeactivatedEvent.
        :param exit_code: The exit_code of this ProcessDeactivatedEvent.
        :param host_id: The host_id of this ProcessDeactivatedEvent.
        :param is_exclusive: The is_exclusive of this ProcessDeactivatedEvent.
        :param process_id: The process_id of this ProcessDeactivatedEvent.
        :param service_name: The service_name of this ProcessDeactivatedEvent.
        :param service_package_activation_id: The service_package_activation_id of this ProcessDeactivatedEvent.
        :param service_package_name: The service_package_name of this ProcessDeactivatedEvent.
        :param start_time: The start_time of this ProcessDeactivatedEvent.
        :param unexpected_termination: The unexpected_termination of this ProcessDeactivatedEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'application_id': str,
            'code_package_name': str,
            'entry_point_type': str,
            'exe_name': str,
            'exit_code': int,
            'host_id': str,
            'is_exclusive': bool,
            'process_id': int,
            'service_name': str,
            'service_package_activation_id': str,
            'service_package_name': str,
            'start_time': datetime,
            'unexpected_termination': bool
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'application_id': 'ApplicationId',
            'code_package_name': 'CodePackageName',
            'entry_point_type': 'EntryPointType',
            'exe_name': 'ExeName',
            'exit_code': 'ExitCode',
            'host_id': 'HostId',
            'is_exclusive': 'IsExclusive',
            'process_id': 'ProcessId',
            'service_name': 'ServiceName',
            'service_package_activation_id': 'ServicePackageActivationId',
            'service_package_name': 'ServicePackageName',
            'start_time': 'StartTime',
            'unexpected_termination': 'UnexpectedTermination'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._application_id = application_id
        self._code_package_name = code_package_name
        self._entry_point_type = entry_point_type
        self._exe_name = exe_name
        self._exit_code = exit_code
        self._host_id = host_id
        self._is_exclusive = is_exclusive
        self._process_id = process_id
        self._service_name = service_name
        self._service_package_activation_id = service_package_activation_id
        self._service_package_name = service_package_name
        self._start_time = start_time
        self._unexpected_termination = unexpected_termination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProcessDeactivatedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProcessDeactivatedEvent of this ProcessDeactivatedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ProcessDeactivatedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ProcessDeactivatedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ProcessDeactivatedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ProcessDeactivatedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ProcessDeactivatedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ProcessDeactivatedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ProcessDeactivatedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ProcessDeactivatedEvent.


        :return: The kind of this ProcessDeactivatedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ProcessDeactivatedEvent.


        :param kind: The kind of this ProcessDeactivatedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ProcessDeactivatedEvent.

        The time event was logged.

        :return: The time_stamp of this ProcessDeactivatedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ProcessDeactivatedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ProcessDeactivatedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def application_id(self):
        """Gets the application_id of this ProcessDeactivatedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ProcessDeactivatedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ProcessDeactivatedEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def code_package_name(self):
        """Gets the code_package_name of this ProcessDeactivatedEvent.

        Name of Code package.

        :return: The code_package_name of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._code_package_name

    @code_package_name.setter
    def code_package_name(self, code_package_name):
        """Sets the code_package_name of this ProcessDeactivatedEvent.

        Name of Code package.

        :param code_package_name: The code_package_name of this ProcessDeactivatedEvent.
        :type code_package_name: str
        """
        if code_package_name is None:
            raise ValueError("Invalid value for `code_package_name`, must not be `None`")

        self._code_package_name = code_package_name

    @property
    def entry_point_type(self):
        """Gets the entry_point_type of this ProcessDeactivatedEvent.

        Type of EntryPoint.

        :return: The entry_point_type of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._entry_point_type

    @entry_point_type.setter
    def entry_point_type(self, entry_point_type):
        """Sets the entry_point_type of this ProcessDeactivatedEvent.

        Type of EntryPoint.

        :param entry_point_type: The entry_point_type of this ProcessDeactivatedEvent.
        :type entry_point_type: str
        """
        if entry_point_type is None:
            raise ValueError("Invalid value for `entry_point_type`, must not be `None`")

        self._entry_point_type = entry_point_type

    @property
    def exe_name(self):
        """Gets the exe_name of this ProcessDeactivatedEvent.

        Name of executable.

        :return: The exe_name of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._exe_name

    @exe_name.setter
    def exe_name(self, exe_name):
        """Sets the exe_name of this ProcessDeactivatedEvent.

        Name of executable.

        :param exe_name: The exe_name of this ProcessDeactivatedEvent.
        :type exe_name: str
        """
        if exe_name is None:
            raise ValueError("Invalid value for `exe_name`, must not be `None`")

        self._exe_name = exe_name

    @property
    def exit_code(self):
        """Gets the exit_code of this ProcessDeactivatedEvent.

        Exit code of process.

        :return: The exit_code of this ProcessDeactivatedEvent.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ProcessDeactivatedEvent.

        Exit code of process.

        :param exit_code: The exit_code of this ProcessDeactivatedEvent.
        :type exit_code: int
        """
        if exit_code is None:
            raise ValueError("Invalid value for `exit_code`, must not be `None`")

        self._exit_code = exit_code

    @property
    def host_id(self):
        """Gets the host_id of this ProcessDeactivatedEvent.

        Host Id.

        :return: The host_id of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this ProcessDeactivatedEvent.

        Host Id.

        :param host_id: The host_id of this ProcessDeactivatedEvent.
        :type host_id: str
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")

        self._host_id = host_id

    @property
    def is_exclusive(self):
        """Gets the is_exclusive of this ProcessDeactivatedEvent.

        Indicates IsExclusive flag.

        :return: The is_exclusive of this ProcessDeactivatedEvent.
        :rtype: bool
        """
        return self._is_exclusive

    @is_exclusive.setter
    def is_exclusive(self, is_exclusive):
        """Sets the is_exclusive of this ProcessDeactivatedEvent.

        Indicates IsExclusive flag.

        :param is_exclusive: The is_exclusive of this ProcessDeactivatedEvent.
        :type is_exclusive: bool
        """
        if is_exclusive is None:
            raise ValueError("Invalid value for `is_exclusive`, must not be `None`")

        self._is_exclusive = is_exclusive

    @property
    def process_id(self):
        """Gets the process_id of this ProcessDeactivatedEvent.

        Process Id.

        :return: The process_id of this ProcessDeactivatedEvent.
        :rtype: int
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this ProcessDeactivatedEvent.

        Process Id.

        :param process_id: The process_id of this ProcessDeactivatedEvent.
        :type process_id: int
        """
        if process_id is None:
            raise ValueError("Invalid value for `process_id`, must not be `None`")

        self._process_id = process_id

    @property
    def service_name(self):
        """Gets the service_name of this ProcessDeactivatedEvent.

        Name of Service.

        :return: The service_name of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ProcessDeactivatedEvent.

        Name of Service.

        :param service_name: The service_name of this ProcessDeactivatedEvent.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this ProcessDeactivatedEvent.

        Activation Id of Service package.

        :return: The service_package_activation_id of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this ProcessDeactivatedEvent.

        Activation Id of Service package.

        :param service_package_activation_id: The service_package_activation_id of this ProcessDeactivatedEvent.
        :type service_package_activation_id: str
        """
        if service_package_activation_id is None:
            raise ValueError("Invalid value for `service_package_activation_id`, must not be `None`")

        self._service_package_activation_id = service_package_activation_id

    @property
    def service_package_name(self):
        """Gets the service_package_name of this ProcessDeactivatedEvent.

        Name of Service package.

        :return: The service_package_name of this ProcessDeactivatedEvent.
        :rtype: str
        """
        return self._service_package_name

    @service_package_name.setter
    def service_package_name(self, service_package_name):
        """Sets the service_package_name of this ProcessDeactivatedEvent.

        Name of Service package.

        :param service_package_name: The service_package_name of this ProcessDeactivatedEvent.
        :type service_package_name: str
        """
        if service_package_name is None:
            raise ValueError("Invalid value for `service_package_name`, must not be `None`")

        self._service_package_name = service_package_name

    @property
    def start_time(self):
        """Gets the start_time of this ProcessDeactivatedEvent.

        Start time of process.

        :return: The start_time of this ProcessDeactivatedEvent.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ProcessDeactivatedEvent.

        Start time of process.

        :param start_time: The start_time of this ProcessDeactivatedEvent.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def unexpected_termination(self):
        """Gets the unexpected_termination of this ProcessDeactivatedEvent.

        Indicates if termination is unexpected.

        :return: The unexpected_termination of this ProcessDeactivatedEvent.
        :rtype: bool
        """
        return self._unexpected_termination

    @unexpected_termination.setter
    def unexpected_termination(self, unexpected_termination):
        """Sets the unexpected_termination of this ProcessDeactivatedEvent.

        Indicates if termination is unexpected.

        :param unexpected_termination: The unexpected_termination of this ProcessDeactivatedEvent.
        :type unexpected_termination: bool
        """
        if unexpected_termination is None:
            raise ValueError("Invalid value for `unexpected_termination`, must not be `None`")

        self._unexpected_termination = unexpected_termination
