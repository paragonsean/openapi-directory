# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ApplicationUpgradeCompleteEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, application_id: str=None, application_type_name: str=None, application_type_version: str=None, overall_upgrade_elapsed_time_in_ms: float=None):
        """ApplicationUpgradeCompleteEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ApplicationUpgradeCompleteEvent.
        :param has_correlated_events: The has_correlated_events of this ApplicationUpgradeCompleteEvent.
        :param kind: The kind of this ApplicationUpgradeCompleteEvent.
        :param time_stamp: The time_stamp of this ApplicationUpgradeCompleteEvent.
        :param application_id: The application_id of this ApplicationUpgradeCompleteEvent.
        :param application_type_name: The application_type_name of this ApplicationUpgradeCompleteEvent.
        :param application_type_version: The application_type_version of this ApplicationUpgradeCompleteEvent.
        :param overall_upgrade_elapsed_time_in_ms: The overall_upgrade_elapsed_time_in_ms of this ApplicationUpgradeCompleteEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'application_id': str,
            'application_type_name': str,
            'application_type_version': str,
            'overall_upgrade_elapsed_time_in_ms': float
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'application_id': 'ApplicationId',
            'application_type_name': 'ApplicationTypeName',
            'application_type_version': 'ApplicationTypeVersion',
            'overall_upgrade_elapsed_time_in_ms': 'OverallUpgradeElapsedTimeInMs'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._application_id = application_id
        self._application_type_name = application_type_name
        self._application_type_version = application_type_version
        self._overall_upgrade_elapsed_time_in_ms = overall_upgrade_elapsed_time_in_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationUpgradeCompleteEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationUpgradeCompleteEvent of this ApplicationUpgradeCompleteEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ApplicationUpgradeCompleteEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ApplicationUpgradeCompleteEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ApplicationUpgradeCompleteEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ApplicationUpgradeCompleteEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ApplicationUpgradeCompleteEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ApplicationUpgradeCompleteEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ApplicationUpgradeCompleteEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ApplicationUpgradeCompleteEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ApplicationUpgradeCompleteEvent.


        :return: The kind of this ApplicationUpgradeCompleteEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationUpgradeCompleteEvent.


        :param kind: The kind of this ApplicationUpgradeCompleteEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ApplicationUpgradeCompleteEvent.

        The time event was logged.

        :return: The time_stamp of this ApplicationUpgradeCompleteEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ApplicationUpgradeCompleteEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ApplicationUpgradeCompleteEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationUpgradeCompleteEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ApplicationUpgradeCompleteEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationUpgradeCompleteEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ApplicationUpgradeCompleteEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def application_type_name(self):
        """Gets the application_type_name of this ApplicationUpgradeCompleteEvent.

        Application type name.

        :return: The application_type_name of this ApplicationUpgradeCompleteEvent.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this ApplicationUpgradeCompleteEvent.

        Application type name.

        :param application_type_name: The application_type_name of this ApplicationUpgradeCompleteEvent.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def application_type_version(self):
        """Gets the application_type_version of this ApplicationUpgradeCompleteEvent.

        Application type version.

        :return: The application_type_version of this ApplicationUpgradeCompleteEvent.
        :rtype: str
        """
        return self._application_type_version

    @application_type_version.setter
    def application_type_version(self, application_type_version):
        """Sets the application_type_version of this ApplicationUpgradeCompleteEvent.

        Application type version.

        :param application_type_version: The application_type_version of this ApplicationUpgradeCompleteEvent.
        :type application_type_version: str
        """
        if application_type_version is None:
            raise ValueError("Invalid value for `application_type_version`, must not be `None`")

        self._application_type_version = application_type_version

    @property
    def overall_upgrade_elapsed_time_in_ms(self):
        """Gets the overall_upgrade_elapsed_time_in_ms of this ApplicationUpgradeCompleteEvent.

        Overall upgrade time in milli-seconds.

        :return: The overall_upgrade_elapsed_time_in_ms of this ApplicationUpgradeCompleteEvent.
        :rtype: float
        """
        return self._overall_upgrade_elapsed_time_in_ms

    @overall_upgrade_elapsed_time_in_ms.setter
    def overall_upgrade_elapsed_time_in_ms(self, overall_upgrade_elapsed_time_in_ms):
        """Sets the overall_upgrade_elapsed_time_in_ms of this ApplicationUpgradeCompleteEvent.

        Overall upgrade time in milli-seconds.

        :param overall_upgrade_elapsed_time_in_ms: The overall_upgrade_elapsed_time_in_ms of this ApplicationUpgradeCompleteEvent.
        :type overall_upgrade_elapsed_time_in_ms: float
        """
        if overall_upgrade_elapsed_time_in_ms is None:
            raise ValueError("Invalid value for `overall_upgrade_elapsed_time_in_ms`, must not be `None`")

        self._overall_upgrade_elapsed_time_in_ms = overall_upgrade_elapsed_time_in_ms
