# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partition_information import PartitionInformation
from openapi_server.models.service_partition_kind import ServicePartitionKind
from openapi_server import util


class Int64RangePartitionInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high_key: str=None, low_key: str=None, id: str=None, service_partition_kind: ServicePartitionKind=None):
        """Int64RangePartitionInformation - a model defined in OpenAPI

        :param high_key: The high_key of this Int64RangePartitionInformation.
        :param low_key: The low_key of this Int64RangePartitionInformation.
        :param id: The id of this Int64RangePartitionInformation.
        :param service_partition_kind: The service_partition_kind of this Int64RangePartitionInformation.
        """
        self.openapi_types = {
            'high_key': str,
            'low_key': str,
            'id': str,
            'service_partition_kind': ServicePartitionKind
        }

        self.attribute_map = {
            'high_key': 'HighKey',
            'low_key': 'LowKey',
            'id': 'Id',
            'service_partition_kind': 'ServicePartitionKind'
        }

        self._high_key = high_key
        self._low_key = low_key
        self._id = id
        self._service_partition_kind = service_partition_kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Int64RangePartitionInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Int64RangePartitionInformation of this Int64RangePartitionInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high_key(self):
        """Gets the high_key of this Int64RangePartitionInformation.

        Specifies the maximum key value handled by this partition.

        :return: The high_key of this Int64RangePartitionInformation.
        :rtype: str
        """
        return self._high_key

    @high_key.setter
    def high_key(self, high_key):
        """Sets the high_key of this Int64RangePartitionInformation.

        Specifies the maximum key value handled by this partition.

        :param high_key: The high_key of this Int64RangePartitionInformation.
        :type high_key: str
        """

        self._high_key = high_key

    @property
    def low_key(self):
        """Gets the low_key of this Int64RangePartitionInformation.

        Specifies the minimum key value handled by this partition.

        :return: The low_key of this Int64RangePartitionInformation.
        :rtype: str
        """
        return self._low_key

    @low_key.setter
    def low_key(self, low_key):
        """Sets the low_key of this Int64RangePartitionInformation.

        Specifies the minimum key value handled by this partition.

        :param low_key: The low_key of this Int64RangePartitionInformation.
        :type low_key: str
        """

        self._low_key = low_key

    @property
    def id(self):
        """Gets the id of this Int64RangePartitionInformation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The id of this Int64RangePartitionInformation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Int64RangePartitionInformation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param id: The id of this Int64RangePartitionInformation.
        :type id: str
        """

        self._id = id

    @property
    def service_partition_kind(self):
        """Gets the service_partition_kind of this Int64RangePartitionInformation.


        :return: The service_partition_kind of this Int64RangePartitionInformation.
        :rtype: ServicePartitionKind
        """
        return self._service_partition_kind

    @service_partition_kind.setter
    def service_partition_kind(self, service_partition_kind):
        """Sets the service_partition_kind of this Int64RangePartitionInformation.


        :param service_partition_kind: The service_partition_kind of this Int64RangePartitionInformation.
        :type service_partition_kind: ServicePartitionKind
        """
        if service_partition_kind is None:
            raise ValueError("Invalid value for `service_partition_kind`, must not be `None`")

        self._service_partition_kind = service_partition_kind
