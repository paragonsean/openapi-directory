# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_cost import MoveCost
from openapi_server.models.scaling_policy_description import ScalingPolicyDescription
from openapi_server.models.service_correlation_description import ServiceCorrelationDescription
from openapi_server.models.service_kind import ServiceKind
from openapi_server.models.service_load_metric_description import ServiceLoadMetricDescription
from openapi_server.models.service_placement_policy_description import ServicePlacementPolicyDescription
from openapi_server.models.service_update_description import ServiceUpdateDescription
from openapi_server import util


class StatelessServiceUpdateDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_count: int=None, correlation_scheme: List[ServiceCorrelationDescription]=None, default_move_cost: MoveCost=None, flags: str=None, load_metrics: List[ServiceLoadMetricDescription]=None, placement_constraints: str=None, scaling_policies: List[ScalingPolicyDescription]=None, service_kind: ServiceKind=None, service_placement_policies: List[ServicePlacementPolicyDescription]=None):
        """StatelessServiceUpdateDescription - a model defined in OpenAPI

        :param instance_count: The instance_count of this StatelessServiceUpdateDescription.
        :param correlation_scheme: The correlation_scheme of this StatelessServiceUpdateDescription.
        :param default_move_cost: The default_move_cost of this StatelessServiceUpdateDescription.
        :param flags: The flags of this StatelessServiceUpdateDescription.
        :param load_metrics: The load_metrics of this StatelessServiceUpdateDescription.
        :param placement_constraints: The placement_constraints of this StatelessServiceUpdateDescription.
        :param scaling_policies: The scaling_policies of this StatelessServiceUpdateDescription.
        :param service_kind: The service_kind of this StatelessServiceUpdateDescription.
        :param service_placement_policies: The service_placement_policies of this StatelessServiceUpdateDescription.
        """
        self.openapi_types = {
            'instance_count': int,
            'correlation_scheme': List[ServiceCorrelationDescription],
            'default_move_cost': MoveCost,
            'flags': str,
            'load_metrics': List[ServiceLoadMetricDescription],
            'placement_constraints': str,
            'scaling_policies': List[ScalingPolicyDescription],
            'service_kind': ServiceKind,
            'service_placement_policies': List[ServicePlacementPolicyDescription]
        }

        self.attribute_map = {
            'instance_count': 'InstanceCount',
            'correlation_scheme': 'CorrelationScheme',
            'default_move_cost': 'DefaultMoveCost',
            'flags': 'Flags',
            'load_metrics': 'LoadMetrics',
            'placement_constraints': 'PlacementConstraints',
            'scaling_policies': 'ScalingPolicies',
            'service_kind': 'ServiceKind',
            'service_placement_policies': 'ServicePlacementPolicies'
        }

        self._instance_count = instance_count
        self._correlation_scheme = correlation_scheme
        self._default_move_cost = default_move_cost
        self._flags = flags
        self._load_metrics = load_metrics
        self._placement_constraints = placement_constraints
        self._scaling_policies = scaling_policies
        self._service_kind = service_kind
        self._service_placement_policies = service_placement_policies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StatelessServiceUpdateDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StatelessServiceUpdateDescription of this StatelessServiceUpdateDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_count(self):
        """Gets the instance_count of this StatelessServiceUpdateDescription.

        The instance count.

        :return: The instance_count of this StatelessServiceUpdateDescription.
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this StatelessServiceUpdateDescription.

        The instance count.

        :param instance_count: The instance_count of this StatelessServiceUpdateDescription.
        :type instance_count: int
        """
        if instance_count is not None and instance_count < -1:
            raise ValueError("Invalid value for `instance_count`, must be a value greater than or equal to `-1`")

        self._instance_count = instance_count

    @property
    def correlation_scheme(self):
        """Gets the correlation_scheme of this StatelessServiceUpdateDescription.

        A list that describes the correlation of the service with other services.

        :return: The correlation_scheme of this StatelessServiceUpdateDescription.
        :rtype: List[ServiceCorrelationDescription]
        """
        return self._correlation_scheme

    @correlation_scheme.setter
    def correlation_scheme(self, correlation_scheme):
        """Sets the correlation_scheme of this StatelessServiceUpdateDescription.

        A list that describes the correlation of the service with other services.

        :param correlation_scheme: The correlation_scheme of this StatelessServiceUpdateDescription.
        :type correlation_scheme: List[ServiceCorrelationDescription]
        """

        self._correlation_scheme = correlation_scheme

    @property
    def default_move_cost(self):
        """Gets the default_move_cost of this StatelessServiceUpdateDescription.


        :return: The default_move_cost of this StatelessServiceUpdateDescription.
        :rtype: MoveCost
        """
        return self._default_move_cost

    @default_move_cost.setter
    def default_move_cost(self, default_move_cost):
        """Sets the default_move_cost of this StatelessServiceUpdateDescription.


        :param default_move_cost: The default_move_cost of this StatelessServiceUpdateDescription.
        :type default_move_cost: MoveCost
        """

        self._default_move_cost = default_move_cost

    @property
    def flags(self):
        """Gets the flags of this StatelessServiceUpdateDescription.

        Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. This property can be a combination of those flags obtained using bitwise 'OR' operator. For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.  - None - Does not indicate any other properties are set. The value is zero. - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1. - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2. - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4. - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8. - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16. - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32. - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64. - Correlation - Indicates the CorrelationScheme property is set. The value is 128. - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256. - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512. - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024.

        :return: The flags of this StatelessServiceUpdateDescription.
        :rtype: str
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this StatelessServiceUpdateDescription.

        Flags indicating whether other properties are set. Each of the associated properties corresponds to a flag, specified below, which, if set, indicate that the property is specified. This property can be a combination of those flags obtained using bitwise 'OR' operator. For example, if the provided value is 6 then the flags for ReplicaRestartWaitDuration (2) and QuorumLossWaitDuration (4) are set.  - None - Does not indicate any other properties are set. The value is zero. - TargetReplicaSetSize/InstanceCount - Indicates whether the TargetReplicaSetSize property (for Stateful services) or the InstanceCount property (for Stateless services) is set. The value is 1. - ReplicaRestartWaitDuration - Indicates the ReplicaRestartWaitDuration property is set. The value is  2. - QuorumLossWaitDuration - Indicates the QuorumLossWaitDuration property is set. The value is 4. - StandByReplicaKeepDuration - Indicates the StandByReplicaKeepDuration property is set. The value is 8. - MinReplicaSetSize - Indicates the MinReplicaSetSize property is set. The value is 16. - PlacementConstraints - Indicates the PlacementConstraints property is set. The value is 32. - PlacementPolicyList - Indicates the ServicePlacementPolicies property is set. The value is 64. - Correlation - Indicates the CorrelationScheme property is set. The value is 128. - Metrics - Indicates the ServiceLoadMetrics property is set. The value is 256. - DefaultMoveCost - Indicates the DefaultMoveCost property is set. The value is 512. - ScalingPolicy - Indicates the ScalingPolicies property is set. The value is 1024.

        :param flags: The flags of this StatelessServiceUpdateDescription.
        :type flags: str
        """

        self._flags = flags

    @property
    def load_metrics(self):
        """Gets the load_metrics of this StatelessServiceUpdateDescription.

        The service load metrics is given as an array of ServiceLoadMetricDescription objects.

        :return: The load_metrics of this StatelessServiceUpdateDescription.
        :rtype: List[ServiceLoadMetricDescription]
        """
        return self._load_metrics

    @load_metrics.setter
    def load_metrics(self, load_metrics):
        """Sets the load_metrics of this StatelessServiceUpdateDescription.

        The service load metrics is given as an array of ServiceLoadMetricDescription objects.

        :param load_metrics: The load_metrics of this StatelessServiceUpdateDescription.
        :type load_metrics: List[ServiceLoadMetricDescription]
        """

        self._load_metrics = load_metrics

    @property
    def placement_constraints(self):
        """Gets the placement_constraints of this StatelessServiceUpdateDescription.

        The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".

        :return: The placement_constraints of this StatelessServiceUpdateDescription.
        :rtype: str
        """
        return self._placement_constraints

    @placement_constraints.setter
    def placement_constraints(self, placement_constraints):
        """Sets the placement_constraints of this StatelessServiceUpdateDescription.

        The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".

        :param placement_constraints: The placement_constraints of this StatelessServiceUpdateDescription.
        :type placement_constraints: str
        """

        self._placement_constraints = placement_constraints

    @property
    def scaling_policies(self):
        """Gets the scaling_policies of this StatelessServiceUpdateDescription.

        A list that describes the scaling policies.

        :return: The scaling_policies of this StatelessServiceUpdateDescription.
        :rtype: List[ScalingPolicyDescription]
        """
        return self._scaling_policies

    @scaling_policies.setter
    def scaling_policies(self, scaling_policies):
        """Sets the scaling_policies of this StatelessServiceUpdateDescription.

        A list that describes the scaling policies.

        :param scaling_policies: The scaling_policies of this StatelessServiceUpdateDescription.
        :type scaling_policies: List[ScalingPolicyDescription]
        """

        self._scaling_policies = scaling_policies

    @property
    def service_kind(self):
        """Gets the service_kind of this StatelessServiceUpdateDescription.


        :return: The service_kind of this StatelessServiceUpdateDescription.
        :rtype: ServiceKind
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind):
        """Sets the service_kind of this StatelessServiceUpdateDescription.


        :param service_kind: The service_kind of this StatelessServiceUpdateDescription.
        :type service_kind: ServiceKind
        """
        if service_kind is None:
            raise ValueError("Invalid value for `service_kind`, must not be `None`")

        self._service_kind = service_kind

    @property
    def service_placement_policies(self):
        """Gets the service_placement_policies of this StatelessServiceUpdateDescription.

        A list that describes the correlation of the service with other services.

        :return: The service_placement_policies of this StatelessServiceUpdateDescription.
        :rtype: List[ServicePlacementPolicyDescription]
        """
        return self._service_placement_policies

    @service_placement_policies.setter
    def service_placement_policies(self, service_placement_policies):
        """Sets the service_placement_policies of this StatelessServiceUpdateDescription.

        A list that describes the correlation of the service with other services.

        :param service_placement_policies: The service_placement_policies of this StatelessServiceUpdateDescription.
        :type service_placement_policies: List[ServicePlacementPolicyDescription]
        """

        self._service_placement_policies = service_placement_policies
