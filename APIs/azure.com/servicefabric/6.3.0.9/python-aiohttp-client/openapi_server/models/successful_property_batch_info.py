# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.property_batch_info import PropertyBatchInfo
from openapi_server.models.property_batch_info_kind import PropertyBatchInfoKind
from openapi_server.models.property_info import PropertyInfo
from openapi_server import util


class SuccessfulPropertyBatchInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, properties: Dict[str, PropertyInfo]=None, kind: PropertyBatchInfoKind=None):
        """SuccessfulPropertyBatchInfo - a model defined in OpenAPI

        :param properties: The properties of this SuccessfulPropertyBatchInfo.
        :param kind: The kind of this SuccessfulPropertyBatchInfo.
        """
        self.openapi_types = {
            'properties': Dict[str, PropertyInfo],
            'kind': PropertyBatchInfoKind
        }

        self.attribute_map = {
            'properties': 'Properties',
            'kind': 'Kind'
        }

        self._properties = properties
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuccessfulPropertyBatchInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuccessfulPropertyBatchInfo of this SuccessfulPropertyBatchInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def properties(self):
        """Gets the properties of this SuccessfulPropertyBatchInfo.

        A map containing the properties that were requested through any \"Get\" property batch operations. The key represents the index of the \"Get\" operation in the original request, in string form. The value is the property. If a property is not found, it will not be in the map.

        :return: The properties of this SuccessfulPropertyBatchInfo.
        :rtype: Dict[str, PropertyInfo]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this SuccessfulPropertyBatchInfo.

        A map containing the properties that were requested through any \"Get\" property batch operations. The key represents the index of the \"Get\" operation in the original request, in string form. The value is the property. If a property is not found, it will not be in the map.

        :param properties: The properties of this SuccessfulPropertyBatchInfo.
        :type properties: Dict[str, PropertyInfo]
        """

        self._properties = properties

    @property
    def kind(self):
        """Gets the kind of this SuccessfulPropertyBatchInfo.


        :return: The kind of this SuccessfulPropertyBatchInfo.
        :rtype: PropertyBatchInfoKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this SuccessfulPropertyBatchInfo.


        :param kind: The kind of this SuccessfulPropertyBatchInfo.
        :type kind: PropertyBatchInfoKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind
