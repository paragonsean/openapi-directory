# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ChaosRestartCodePackageFaultScheduledEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, application_id: str=None, code_package_name: str=None, fault_group_id: str=None, fault_id: str=None, node_name: str=None, service_manifest_name: str=None, service_package_activation_id: str=None):
        """ChaosRestartCodePackageFaultScheduledEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :param has_correlated_events: The has_correlated_events of this ChaosRestartCodePackageFaultScheduledEvent.
        :param kind: The kind of this ChaosRestartCodePackageFaultScheduledEvent.
        :param time_stamp: The time_stamp of this ChaosRestartCodePackageFaultScheduledEvent.
        :param application_id: The application_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :param code_package_name: The code_package_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :param fault_group_id: The fault_group_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :param fault_id: The fault_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :param node_name: The node_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :param service_manifest_name: The service_manifest_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :param service_package_activation_id: The service_package_activation_id of this ChaosRestartCodePackageFaultScheduledEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'application_id': str,
            'code_package_name': str,
            'fault_group_id': str,
            'fault_id': str,
            'node_name': str,
            'service_manifest_name': str,
            'service_package_activation_id': str
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'application_id': 'ApplicationId',
            'code_package_name': 'CodePackageName',
            'fault_group_id': 'FaultGroupId',
            'fault_id': 'FaultId',
            'node_name': 'NodeName',
            'service_manifest_name': 'ServiceManifestName',
            'service_package_activation_id': 'ServicePackageActivationId'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._application_id = application_id
        self._code_package_name = code_package_name
        self._fault_group_id = fault_group_id
        self._fault_id = fault_id
        self._node_name = node_name
        self._service_manifest_name = service_manifest_name
        self._service_package_activation_id = service_package_activation_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosRestartCodePackageFaultScheduledEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosRestartCodePackageFaultScheduledEvent of this ChaosRestartCodePackageFaultScheduledEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ChaosRestartCodePackageFaultScheduledEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ChaosRestartCodePackageFaultScheduledEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ChaosRestartCodePackageFaultScheduledEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ChaosRestartCodePackageFaultScheduledEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ChaosRestartCodePackageFaultScheduledEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ChaosRestartCodePackageFaultScheduledEvent.


        :return: The kind of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChaosRestartCodePackageFaultScheduledEvent.


        :param kind: The kind of this ChaosRestartCodePackageFaultScheduledEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ChaosRestartCodePackageFaultScheduledEvent.

        The time event was logged.

        :return: The time_stamp of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ChaosRestartCodePackageFaultScheduledEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ChaosRestartCodePackageFaultScheduledEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def application_id(self):
        """Gets the application_id of this ChaosRestartCodePackageFaultScheduledEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ChaosRestartCodePackageFaultScheduledEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def code_package_name(self):
        """Gets the code_package_name of this ChaosRestartCodePackageFaultScheduledEvent.

        Code package name.

        :return: The code_package_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._code_package_name

    @code_package_name.setter
    def code_package_name(self, code_package_name):
        """Sets the code_package_name of this ChaosRestartCodePackageFaultScheduledEvent.

        Code package name.

        :param code_package_name: The code_package_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :type code_package_name: str
        """
        if code_package_name is None:
            raise ValueError("Invalid value for `code_package_name`, must not be `None`")

        self._code_package_name = code_package_name

    @property
    def fault_group_id(self):
        """Gets the fault_group_id of this ChaosRestartCodePackageFaultScheduledEvent.

        Id of fault group.

        :return: The fault_group_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._fault_group_id

    @fault_group_id.setter
    def fault_group_id(self, fault_group_id):
        """Sets the fault_group_id of this ChaosRestartCodePackageFaultScheduledEvent.

        Id of fault group.

        :param fault_group_id: The fault_group_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :type fault_group_id: str
        """
        if fault_group_id is None:
            raise ValueError("Invalid value for `fault_group_id`, must not be `None`")

        self._fault_group_id = fault_group_id

    @property
    def fault_id(self):
        """Gets the fault_id of this ChaosRestartCodePackageFaultScheduledEvent.

        Id of fault.

        :return: The fault_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._fault_id

    @fault_id.setter
    def fault_id(self, fault_id):
        """Sets the fault_id of this ChaosRestartCodePackageFaultScheduledEvent.

        Id of fault.

        :param fault_id: The fault_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :type fault_id: str
        """
        if fault_id is None:
            raise ValueError("Invalid value for `fault_id`, must not be `None`")

        self._fault_id = fault_id

    @property
    def node_name(self):
        """Gets the node_name of this ChaosRestartCodePackageFaultScheduledEvent.

        The name of a Service Fabric node.

        :return: The node_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this ChaosRestartCodePackageFaultScheduledEvent.

        The name of a Service Fabric node.

        :param node_name: The node_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this ChaosRestartCodePackageFaultScheduledEvent.

        Service manifest name.

        :return: The service_manifest_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this ChaosRestartCodePackageFaultScheduledEvent.

        Service manifest name.

        :param service_manifest_name: The service_manifest_name of this ChaosRestartCodePackageFaultScheduledEvent.
        :type service_manifest_name: str
        """
        if service_manifest_name is None:
            raise ValueError("Invalid value for `service_manifest_name`, must not be `None`")

        self._service_manifest_name = service_manifest_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this ChaosRestartCodePackageFaultScheduledEvent.

        Id of Service package activation.

        :return: The service_package_activation_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this ChaosRestartCodePackageFaultScheduledEvent.

        Id of Service package activation.

        :param service_package_activation_id: The service_package_activation_id of this ChaosRestartCodePackageFaultScheduledEvent.
        :type service_package_activation_id: str
        """
        if service_package_activation_id is None:
            raise ValueError("Invalid value for `service_package_activation_id`, must not be `None`")

        self._service_package_activation_id = service_package_activation_id
