# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_event import ClusterEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ClusterUpgradeDomainCompleteEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, target_cluster_version: str=None, upgrade_domain_elapsed_time_in_ms: float=None, upgrade_domains: str=None, upgrade_state: str=None):
        """ClusterUpgradeDomainCompleteEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ClusterUpgradeDomainCompleteEvent.
        :param has_correlated_events: The has_correlated_events of this ClusterUpgradeDomainCompleteEvent.
        :param kind: The kind of this ClusterUpgradeDomainCompleteEvent.
        :param time_stamp: The time_stamp of this ClusterUpgradeDomainCompleteEvent.
        :param target_cluster_version: The target_cluster_version of this ClusterUpgradeDomainCompleteEvent.
        :param upgrade_domain_elapsed_time_in_ms: The upgrade_domain_elapsed_time_in_ms of this ClusterUpgradeDomainCompleteEvent.
        :param upgrade_domains: The upgrade_domains of this ClusterUpgradeDomainCompleteEvent.
        :param upgrade_state: The upgrade_state of this ClusterUpgradeDomainCompleteEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'target_cluster_version': str,
            'upgrade_domain_elapsed_time_in_ms': float,
            'upgrade_domains': str,
            'upgrade_state': str
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'target_cluster_version': 'TargetClusterVersion',
            'upgrade_domain_elapsed_time_in_ms': 'UpgradeDomainElapsedTimeInMs',
            'upgrade_domains': 'UpgradeDomains',
            'upgrade_state': 'UpgradeState'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._target_cluster_version = target_cluster_version
        self._upgrade_domain_elapsed_time_in_ms = upgrade_domain_elapsed_time_in_ms
        self._upgrade_domains = upgrade_domains
        self._upgrade_state = upgrade_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeDomainCompleteEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeDomainCompleteEvent of this ClusterUpgradeDomainCompleteEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ClusterUpgradeDomainCompleteEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ClusterUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ClusterUpgradeDomainCompleteEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ClusterUpgradeDomainCompleteEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ClusterUpgradeDomainCompleteEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ClusterUpgradeDomainCompleteEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ClusterUpgradeDomainCompleteEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ClusterUpgradeDomainCompleteEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ClusterUpgradeDomainCompleteEvent.


        :return: The kind of this ClusterUpgradeDomainCompleteEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ClusterUpgradeDomainCompleteEvent.


        :param kind: The kind of this ClusterUpgradeDomainCompleteEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ClusterUpgradeDomainCompleteEvent.

        The time event was logged.

        :return: The time_stamp of this ClusterUpgradeDomainCompleteEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ClusterUpgradeDomainCompleteEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ClusterUpgradeDomainCompleteEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def target_cluster_version(self):
        """Gets the target_cluster_version of this ClusterUpgradeDomainCompleteEvent.

        Target Cluster version.

        :return: The target_cluster_version of this ClusterUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._target_cluster_version

    @target_cluster_version.setter
    def target_cluster_version(self, target_cluster_version):
        """Sets the target_cluster_version of this ClusterUpgradeDomainCompleteEvent.

        Target Cluster version.

        :param target_cluster_version: The target_cluster_version of this ClusterUpgradeDomainCompleteEvent.
        :type target_cluster_version: str
        """
        if target_cluster_version is None:
            raise ValueError("Invalid value for `target_cluster_version`, must not be `None`")

        self._target_cluster_version = target_cluster_version

    @property
    def upgrade_domain_elapsed_time_in_ms(self):
        """Gets the upgrade_domain_elapsed_time_in_ms of this ClusterUpgradeDomainCompleteEvent.

        Duration of domain upgrade in milli-seconds.

        :return: The upgrade_domain_elapsed_time_in_ms of this ClusterUpgradeDomainCompleteEvent.
        :rtype: float
        """
        return self._upgrade_domain_elapsed_time_in_ms

    @upgrade_domain_elapsed_time_in_ms.setter
    def upgrade_domain_elapsed_time_in_ms(self, upgrade_domain_elapsed_time_in_ms):
        """Sets the upgrade_domain_elapsed_time_in_ms of this ClusterUpgradeDomainCompleteEvent.

        Duration of domain upgrade in milli-seconds.

        :param upgrade_domain_elapsed_time_in_ms: The upgrade_domain_elapsed_time_in_ms of this ClusterUpgradeDomainCompleteEvent.
        :type upgrade_domain_elapsed_time_in_ms: float
        """
        if upgrade_domain_elapsed_time_in_ms is None:
            raise ValueError("Invalid value for `upgrade_domain_elapsed_time_in_ms`, must not be `None`")

        self._upgrade_domain_elapsed_time_in_ms = upgrade_domain_elapsed_time_in_ms

    @property
    def upgrade_domains(self):
        """Gets the upgrade_domains of this ClusterUpgradeDomainCompleteEvent.

        Upgrade domains.

        :return: The upgrade_domains of this ClusterUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._upgrade_domains

    @upgrade_domains.setter
    def upgrade_domains(self, upgrade_domains):
        """Sets the upgrade_domains of this ClusterUpgradeDomainCompleteEvent.

        Upgrade domains.

        :param upgrade_domains: The upgrade_domains of this ClusterUpgradeDomainCompleteEvent.
        :type upgrade_domains: str
        """
        if upgrade_domains is None:
            raise ValueError("Invalid value for `upgrade_domains`, must not be `None`")

        self._upgrade_domains = upgrade_domains

    @property
    def upgrade_state(self):
        """Gets the upgrade_state of this ClusterUpgradeDomainCompleteEvent.

        State of upgrade.

        :return: The upgrade_state of this ClusterUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._upgrade_state

    @upgrade_state.setter
    def upgrade_state(self, upgrade_state):
        """Sets the upgrade_state of this ClusterUpgradeDomainCompleteEvent.

        State of upgrade.

        :param upgrade_state: The upgrade_state of this ClusterUpgradeDomainCompleteEvent.
        :type upgrade_state: str
        """
        if upgrade_state is None:
            raise ValueError("Invalid value for `upgrade_state`, must not be `None`")

        self._upgrade_state = upgrade_state
