# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ApplicationUpgradeDomainCompleteEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, application_id: str=None, application_type_name: str=None, application_type_version: str=None, current_application_type_version: str=None, upgrade_domain_elapsed_time_in_ms: float=None, upgrade_domains: str=None, upgrade_state: str=None):
        """ApplicationUpgradeDomainCompleteEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ApplicationUpgradeDomainCompleteEvent.
        :param has_correlated_events: The has_correlated_events of this ApplicationUpgradeDomainCompleteEvent.
        :param kind: The kind of this ApplicationUpgradeDomainCompleteEvent.
        :param time_stamp: The time_stamp of this ApplicationUpgradeDomainCompleteEvent.
        :param application_id: The application_id of this ApplicationUpgradeDomainCompleteEvent.
        :param application_type_name: The application_type_name of this ApplicationUpgradeDomainCompleteEvent.
        :param application_type_version: The application_type_version of this ApplicationUpgradeDomainCompleteEvent.
        :param current_application_type_version: The current_application_type_version of this ApplicationUpgradeDomainCompleteEvent.
        :param upgrade_domain_elapsed_time_in_ms: The upgrade_domain_elapsed_time_in_ms of this ApplicationUpgradeDomainCompleteEvent.
        :param upgrade_domains: The upgrade_domains of this ApplicationUpgradeDomainCompleteEvent.
        :param upgrade_state: The upgrade_state of this ApplicationUpgradeDomainCompleteEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'application_id': str,
            'application_type_name': str,
            'application_type_version': str,
            'current_application_type_version': str,
            'upgrade_domain_elapsed_time_in_ms': float,
            'upgrade_domains': str,
            'upgrade_state': str
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'application_id': 'ApplicationId',
            'application_type_name': 'ApplicationTypeName',
            'application_type_version': 'ApplicationTypeVersion',
            'current_application_type_version': 'CurrentApplicationTypeVersion',
            'upgrade_domain_elapsed_time_in_ms': 'UpgradeDomainElapsedTimeInMs',
            'upgrade_domains': 'UpgradeDomains',
            'upgrade_state': 'UpgradeState'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._application_id = application_id
        self._application_type_name = application_type_name
        self._application_type_version = application_type_version
        self._current_application_type_version = current_application_type_version
        self._upgrade_domain_elapsed_time_in_ms = upgrade_domain_elapsed_time_in_ms
        self._upgrade_domains = upgrade_domains
        self._upgrade_state = upgrade_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationUpgradeDomainCompleteEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationUpgradeDomainCompleteEvent of this ApplicationUpgradeDomainCompleteEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ApplicationUpgradeDomainCompleteEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ApplicationUpgradeDomainCompleteEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ApplicationUpgradeDomainCompleteEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ApplicationUpgradeDomainCompleteEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ApplicationUpgradeDomainCompleteEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ApplicationUpgradeDomainCompleteEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ApplicationUpgradeDomainCompleteEvent.


        :return: The kind of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApplicationUpgradeDomainCompleteEvent.


        :param kind: The kind of this ApplicationUpgradeDomainCompleteEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ApplicationUpgradeDomainCompleteEvent.

        The time event was logged.

        :return: The time_stamp of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ApplicationUpgradeDomainCompleteEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ApplicationUpgradeDomainCompleteEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def application_id(self):
        """Gets the application_id of this ApplicationUpgradeDomainCompleteEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApplicationUpgradeDomainCompleteEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this ApplicationUpgradeDomainCompleteEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def application_type_name(self):
        """Gets the application_type_name of this ApplicationUpgradeDomainCompleteEvent.

        Application type name.

        :return: The application_type_name of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this ApplicationUpgradeDomainCompleteEvent.

        Application type name.

        :param application_type_name: The application_type_name of this ApplicationUpgradeDomainCompleteEvent.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def application_type_version(self):
        """Gets the application_type_version of this ApplicationUpgradeDomainCompleteEvent.

        Target Application type version.

        :return: The application_type_version of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._application_type_version

    @application_type_version.setter
    def application_type_version(self, application_type_version):
        """Sets the application_type_version of this ApplicationUpgradeDomainCompleteEvent.

        Target Application type version.

        :param application_type_version: The application_type_version of this ApplicationUpgradeDomainCompleteEvent.
        :type application_type_version: str
        """
        if application_type_version is None:
            raise ValueError("Invalid value for `application_type_version`, must not be `None`")

        self._application_type_version = application_type_version

    @property
    def current_application_type_version(self):
        """Gets the current_application_type_version of this ApplicationUpgradeDomainCompleteEvent.

        Current Application type version.

        :return: The current_application_type_version of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._current_application_type_version

    @current_application_type_version.setter
    def current_application_type_version(self, current_application_type_version):
        """Sets the current_application_type_version of this ApplicationUpgradeDomainCompleteEvent.

        Current Application type version.

        :param current_application_type_version: The current_application_type_version of this ApplicationUpgradeDomainCompleteEvent.
        :type current_application_type_version: str
        """
        if current_application_type_version is None:
            raise ValueError("Invalid value for `current_application_type_version`, must not be `None`")

        self._current_application_type_version = current_application_type_version

    @property
    def upgrade_domain_elapsed_time_in_ms(self):
        """Gets the upgrade_domain_elapsed_time_in_ms of this ApplicationUpgradeDomainCompleteEvent.

        Upgrade time of domain in milli-seconds.

        :return: The upgrade_domain_elapsed_time_in_ms of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: float
        """
        return self._upgrade_domain_elapsed_time_in_ms

    @upgrade_domain_elapsed_time_in_ms.setter
    def upgrade_domain_elapsed_time_in_ms(self, upgrade_domain_elapsed_time_in_ms):
        """Sets the upgrade_domain_elapsed_time_in_ms of this ApplicationUpgradeDomainCompleteEvent.

        Upgrade time of domain in milli-seconds.

        :param upgrade_domain_elapsed_time_in_ms: The upgrade_domain_elapsed_time_in_ms of this ApplicationUpgradeDomainCompleteEvent.
        :type upgrade_domain_elapsed_time_in_ms: float
        """
        if upgrade_domain_elapsed_time_in_ms is None:
            raise ValueError("Invalid value for `upgrade_domain_elapsed_time_in_ms`, must not be `None`")

        self._upgrade_domain_elapsed_time_in_ms = upgrade_domain_elapsed_time_in_ms

    @property
    def upgrade_domains(self):
        """Gets the upgrade_domains of this ApplicationUpgradeDomainCompleteEvent.

        Upgrade domains.

        :return: The upgrade_domains of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._upgrade_domains

    @upgrade_domains.setter
    def upgrade_domains(self, upgrade_domains):
        """Sets the upgrade_domains of this ApplicationUpgradeDomainCompleteEvent.

        Upgrade domains.

        :param upgrade_domains: The upgrade_domains of this ApplicationUpgradeDomainCompleteEvent.
        :type upgrade_domains: str
        """
        if upgrade_domains is None:
            raise ValueError("Invalid value for `upgrade_domains`, must not be `None`")

        self._upgrade_domains = upgrade_domains

    @property
    def upgrade_state(self):
        """Gets the upgrade_state of this ApplicationUpgradeDomainCompleteEvent.

        State of upgrade.

        :return: The upgrade_state of this ApplicationUpgradeDomainCompleteEvent.
        :rtype: str
        """
        return self._upgrade_state

    @upgrade_state.setter
    def upgrade_state(self, upgrade_state):
        """Sets the upgrade_state of this ApplicationUpgradeDomainCompleteEvent.

        State of upgrade.

        :param upgrade_state: The upgrade_state of this ApplicationUpgradeDomainCompleteEvent.
        :type upgrade_state: str
        """
        if upgrade_state is None:
            raise ValueError("Invalid value for `upgrade_state`, must not be `None`")

        self._upgrade_state = upgrade_state
