# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_event import ApplicationEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class DeployedServiceHealthReportCreatedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, application_id: str=None, description: str=None, health_state: str=None, node_name: str=None, _property: str=None, remove_when_expired: bool=None, sequence_number: int=None, service_manifest_name: str=None, service_package_activation_id: str=None, service_package_instance_id: int=None, source_id: str=None, source_utc_timestamp: datetime=None, ttl_timespan: int=None):
        """DeployedServiceHealthReportCreatedEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this DeployedServiceHealthReportCreatedEvent.
        :param has_correlated_events: The has_correlated_events of this DeployedServiceHealthReportCreatedEvent.
        :param kind: The kind of this DeployedServiceHealthReportCreatedEvent.
        :param time_stamp: The time_stamp of this DeployedServiceHealthReportCreatedEvent.
        :param application_id: The application_id of this DeployedServiceHealthReportCreatedEvent.
        :param description: The description of this DeployedServiceHealthReportCreatedEvent.
        :param health_state: The health_state of this DeployedServiceHealthReportCreatedEvent.
        :param node_name: The node_name of this DeployedServiceHealthReportCreatedEvent.
        :param _property: The _property of this DeployedServiceHealthReportCreatedEvent.
        :param remove_when_expired: The remove_when_expired of this DeployedServiceHealthReportCreatedEvent.
        :param sequence_number: The sequence_number of this DeployedServiceHealthReportCreatedEvent.
        :param service_manifest_name: The service_manifest_name of this DeployedServiceHealthReportCreatedEvent.
        :param service_package_activation_id: The service_package_activation_id of this DeployedServiceHealthReportCreatedEvent.
        :param service_package_instance_id: The service_package_instance_id of this DeployedServiceHealthReportCreatedEvent.
        :param source_id: The source_id of this DeployedServiceHealthReportCreatedEvent.
        :param source_utc_timestamp: The source_utc_timestamp of this DeployedServiceHealthReportCreatedEvent.
        :param ttl_timespan: The ttl_timespan of this DeployedServiceHealthReportCreatedEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'application_id': str,
            'description': str,
            'health_state': str,
            'node_name': str,
            '_property': str,
            'remove_when_expired': bool,
            'sequence_number': int,
            'service_manifest_name': str,
            'service_package_activation_id': str,
            'service_package_instance_id': int,
            'source_id': str,
            'source_utc_timestamp': datetime,
            'ttl_timespan': int
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'application_id': 'ApplicationId',
            'description': 'Description',
            'health_state': 'HealthState',
            'node_name': 'NodeName',
            '_property': 'Property',
            'remove_when_expired': 'RemoveWhenExpired',
            'sequence_number': 'SequenceNumber',
            'service_manifest_name': 'ServiceManifestName',
            'service_package_activation_id': 'ServicePackageActivationId',
            'service_package_instance_id': 'ServicePackageInstanceId',
            'source_id': 'SourceId',
            'source_utc_timestamp': 'SourceUtcTimestamp',
            'ttl_timespan': 'TTLTimespan'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._application_id = application_id
        self._description = description
        self._health_state = health_state
        self._node_name = node_name
        self.__property = _property
        self._remove_when_expired = remove_when_expired
        self._sequence_number = sequence_number
        self._service_manifest_name = service_manifest_name
        self._service_package_activation_id = service_package_activation_id
        self._service_package_instance_id = service_package_instance_id
        self._source_id = source_id
        self._source_utc_timestamp = source_utc_timestamp
        self._ttl_timespan = ttl_timespan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeployedServiceHealthReportCreatedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeployedServiceHealthReportCreatedEvent of this DeployedServiceHealthReportCreatedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this DeployedServiceHealthReportCreatedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this DeployedServiceHealthReportCreatedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this DeployedServiceHealthReportCreatedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this DeployedServiceHealthReportCreatedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this DeployedServiceHealthReportCreatedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this DeployedServiceHealthReportCreatedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this DeployedServiceHealthReportCreatedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this DeployedServiceHealthReportCreatedEvent.


        :return: The kind of this DeployedServiceHealthReportCreatedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DeployedServiceHealthReportCreatedEvent.


        :param kind: The kind of this DeployedServiceHealthReportCreatedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this DeployedServiceHealthReportCreatedEvent.

        The time event was logged.

        :return: The time_stamp of this DeployedServiceHealthReportCreatedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this DeployedServiceHealthReportCreatedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this DeployedServiceHealthReportCreatedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def application_id(self):
        """Gets the application_id of this DeployedServiceHealthReportCreatedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :return: The application_id of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this DeployedServiceHealthReportCreatedEvent.

        The identity of the application. This is an encoded representation of the application name. This is used in the REST APIs to identify the application resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the application name is \"fabric:/myapp/app1\", the application identity would be \"myapp\\~app1\" in 6.0+ and \"myapp/app1\" in previous versions.

        :param application_id: The application_id of this DeployedServiceHealthReportCreatedEvent.
        :type application_id: str
        """
        if application_id is None:
            raise ValueError("Invalid value for `application_id`, must not be `None`")

        self._application_id = application_id

    @property
    def description(self):
        """Gets the description of this DeployedServiceHealthReportCreatedEvent.

        Description of report.

        :return: The description of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeployedServiceHealthReportCreatedEvent.

        Description of report.

        :param description: The description of this DeployedServiceHealthReportCreatedEvent.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def health_state(self):
        """Gets the health_state of this DeployedServiceHealthReportCreatedEvent.

        Describes the property health state.

        :return: The health_state of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._health_state

    @health_state.setter
    def health_state(self, health_state):
        """Sets the health_state of this DeployedServiceHealthReportCreatedEvent.

        Describes the property health state.

        :param health_state: The health_state of this DeployedServiceHealthReportCreatedEvent.
        :type health_state: str
        """
        if health_state is None:
            raise ValueError("Invalid value for `health_state`, must not be `None`")

        self._health_state = health_state

    @property
    def node_name(self):
        """Gets the node_name of this DeployedServiceHealthReportCreatedEvent.

        The name of a Service Fabric node.

        :return: The node_name of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this DeployedServiceHealthReportCreatedEvent.

        The name of a Service Fabric node.

        :param node_name: The node_name of this DeployedServiceHealthReportCreatedEvent.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def _property(self):
        """Gets the _property of this DeployedServiceHealthReportCreatedEvent.

        Describes the property.

        :return: The _property of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this DeployedServiceHealthReportCreatedEvent.

        Describes the property.

        :param _property: The _property of this DeployedServiceHealthReportCreatedEvent.
        :type _property: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")

        self.__property = _property

    @property
    def remove_when_expired(self):
        """Gets the remove_when_expired of this DeployedServiceHealthReportCreatedEvent.

        Indicates the removal when it expires.

        :return: The remove_when_expired of this DeployedServiceHealthReportCreatedEvent.
        :rtype: bool
        """
        return self._remove_when_expired

    @remove_when_expired.setter
    def remove_when_expired(self, remove_when_expired):
        """Sets the remove_when_expired of this DeployedServiceHealthReportCreatedEvent.

        Indicates the removal when it expires.

        :param remove_when_expired: The remove_when_expired of this DeployedServiceHealthReportCreatedEvent.
        :type remove_when_expired: bool
        """
        if remove_when_expired is None:
            raise ValueError("Invalid value for `remove_when_expired`, must not be `None`")

        self._remove_when_expired = remove_when_expired

    @property
    def sequence_number(self):
        """Gets the sequence_number of this DeployedServiceHealthReportCreatedEvent.

        Sequence number of report.

        :return: The sequence_number of this DeployedServiceHealthReportCreatedEvent.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this DeployedServiceHealthReportCreatedEvent.

        Sequence number of report.

        :param sequence_number: The sequence_number of this DeployedServiceHealthReportCreatedEvent.
        :type sequence_number: int
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")

        self._sequence_number = sequence_number

    @property
    def service_manifest_name(self):
        """Gets the service_manifest_name of this DeployedServiceHealthReportCreatedEvent.

        Service manifest name.

        :return: The service_manifest_name of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._service_manifest_name

    @service_manifest_name.setter
    def service_manifest_name(self, service_manifest_name):
        """Sets the service_manifest_name of this DeployedServiceHealthReportCreatedEvent.

        Service manifest name.

        :param service_manifest_name: The service_manifest_name of this DeployedServiceHealthReportCreatedEvent.
        :type service_manifest_name: str
        """
        if service_manifest_name is None:
            raise ValueError("Invalid value for `service_manifest_name`, must not be `None`")

        self._service_manifest_name = service_manifest_name

    @property
    def service_package_activation_id(self):
        """Gets the service_package_activation_id of this DeployedServiceHealthReportCreatedEvent.

        Id of Service package activation.

        :return: The service_package_activation_id of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._service_package_activation_id

    @service_package_activation_id.setter
    def service_package_activation_id(self, service_package_activation_id):
        """Sets the service_package_activation_id of this DeployedServiceHealthReportCreatedEvent.

        Id of Service package activation.

        :param service_package_activation_id: The service_package_activation_id of this DeployedServiceHealthReportCreatedEvent.
        :type service_package_activation_id: str
        """
        if service_package_activation_id is None:
            raise ValueError("Invalid value for `service_package_activation_id`, must not be `None`")

        self._service_package_activation_id = service_package_activation_id

    @property
    def service_package_instance_id(self):
        """Gets the service_package_instance_id of this DeployedServiceHealthReportCreatedEvent.

        Id of Service package instance.

        :return: The service_package_instance_id of this DeployedServiceHealthReportCreatedEvent.
        :rtype: int
        """
        return self._service_package_instance_id

    @service_package_instance_id.setter
    def service_package_instance_id(self, service_package_instance_id):
        """Sets the service_package_instance_id of this DeployedServiceHealthReportCreatedEvent.

        Id of Service package instance.

        :param service_package_instance_id: The service_package_instance_id of this DeployedServiceHealthReportCreatedEvent.
        :type service_package_instance_id: int
        """
        if service_package_instance_id is None:
            raise ValueError("Invalid value for `service_package_instance_id`, must not be `None`")

        self._service_package_instance_id = service_package_instance_id

    @property
    def source_id(self):
        """Gets the source_id of this DeployedServiceHealthReportCreatedEvent.

        Id of report source.

        :return: The source_id of this DeployedServiceHealthReportCreatedEvent.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this DeployedServiceHealthReportCreatedEvent.

        Id of report source.

        :param source_id: The source_id of this DeployedServiceHealthReportCreatedEvent.
        :type source_id: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    @property
    def source_utc_timestamp(self):
        """Gets the source_utc_timestamp of this DeployedServiceHealthReportCreatedEvent.

        Source time.

        :return: The source_utc_timestamp of this DeployedServiceHealthReportCreatedEvent.
        :rtype: datetime
        """
        return self._source_utc_timestamp

    @source_utc_timestamp.setter
    def source_utc_timestamp(self, source_utc_timestamp):
        """Sets the source_utc_timestamp of this DeployedServiceHealthReportCreatedEvent.

        Source time.

        :param source_utc_timestamp: The source_utc_timestamp of this DeployedServiceHealthReportCreatedEvent.
        :type source_utc_timestamp: datetime
        """
        if source_utc_timestamp is None:
            raise ValueError("Invalid value for `source_utc_timestamp`, must not be `None`")

        self._source_utc_timestamp = source_utc_timestamp

    @property
    def ttl_timespan(self):
        """Gets the ttl_timespan of this DeployedServiceHealthReportCreatedEvent.

        Time to live in milli-seconds.

        :return: The ttl_timespan of this DeployedServiceHealthReportCreatedEvent.
        :rtype: int
        """
        return self._ttl_timespan

    @ttl_timespan.setter
    def ttl_timespan(self, ttl_timespan):
        """Sets the ttl_timespan of this DeployedServiceHealthReportCreatedEvent.

        Time to live in milli-seconds.

        :param ttl_timespan: The ttl_timespan of this DeployedServiceHealthReportCreatedEvent.
        :type ttl_timespan: int
        """
        if ttl_timespan is None:
            raise ValueError("Invalid value for `ttl_timespan`, must not be `None`")

        self._ttl_timespan = ttl_timespan
