# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_server.models.health_event import HealthEvent
from openapi_server.models.health_state import HealthState
from openapi_server.models.health_statistics import HealthStatistics
from openapi_server.models.replica_health_state import ReplicaHealthState
from openapi_server import util


class PartitionHealth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_health_state: HealthState=None, health_events: List[HealthEvent]=None, health_statistics: HealthStatistics=None, unhealthy_evaluations: List[HealthEvaluationWrapper]=None, partition_id: str=None, replica_health_states: List[ReplicaHealthState]=None):
        """PartitionHealth - a model defined in OpenAPI

        :param aggregated_health_state: The aggregated_health_state of this PartitionHealth.
        :param health_events: The health_events of this PartitionHealth.
        :param health_statistics: The health_statistics of this PartitionHealth.
        :param unhealthy_evaluations: The unhealthy_evaluations of this PartitionHealth.
        :param partition_id: The partition_id of this PartitionHealth.
        :param replica_health_states: The replica_health_states of this PartitionHealth.
        """
        self.openapi_types = {
            'aggregated_health_state': HealthState,
            'health_events': List[HealthEvent],
            'health_statistics': HealthStatistics,
            'unhealthy_evaluations': List[HealthEvaluationWrapper],
            'partition_id': str,
            'replica_health_states': List[ReplicaHealthState]
        }

        self.attribute_map = {
            'aggregated_health_state': 'AggregatedHealthState',
            'health_events': 'HealthEvents',
            'health_statistics': 'HealthStatistics',
            'unhealthy_evaluations': 'UnhealthyEvaluations',
            'partition_id': 'PartitionId',
            'replica_health_states': 'ReplicaHealthStates'
        }

        self._aggregated_health_state = aggregated_health_state
        self._health_events = health_events
        self._health_statistics = health_statistics
        self._unhealthy_evaluations = unhealthy_evaluations
        self._partition_id = partition_id
        self._replica_health_states = replica_health_states

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartitionHealth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartitionHealth of this PartitionHealth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_health_state(self):
        """Gets the aggregated_health_state of this PartitionHealth.


        :return: The aggregated_health_state of this PartitionHealth.
        :rtype: HealthState
        """
        return self._aggregated_health_state

    @aggregated_health_state.setter
    def aggregated_health_state(self, aggregated_health_state):
        """Sets the aggregated_health_state of this PartitionHealth.


        :param aggregated_health_state: The aggregated_health_state of this PartitionHealth.
        :type aggregated_health_state: HealthState
        """

        self._aggregated_health_state = aggregated_health_state

    @property
    def health_events(self):
        """Gets the health_events of this PartitionHealth.

        The list of health events reported on the entity.

        :return: The health_events of this PartitionHealth.
        :rtype: List[HealthEvent]
        """
        return self._health_events

    @health_events.setter
    def health_events(self, health_events):
        """Sets the health_events of this PartitionHealth.

        The list of health events reported on the entity.

        :param health_events: The health_events of this PartitionHealth.
        :type health_events: List[HealthEvent]
        """

        self._health_events = health_events

    @property
    def health_statistics(self):
        """Gets the health_statistics of this PartitionHealth.


        :return: The health_statistics of this PartitionHealth.
        :rtype: HealthStatistics
        """
        return self._health_statistics

    @health_statistics.setter
    def health_statistics(self, health_statistics):
        """Sets the health_statistics of this PartitionHealth.


        :param health_statistics: The health_statistics of this PartitionHealth.
        :type health_statistics: HealthStatistics
        """

        self._health_statistics = health_statistics

    @property
    def unhealthy_evaluations(self):
        """Gets the unhealthy_evaluations of this PartitionHealth.

        List of health evaluations that resulted in the current aggregated health state.

        :return: The unhealthy_evaluations of this PartitionHealth.
        :rtype: List[HealthEvaluationWrapper]
        """
        return self._unhealthy_evaluations

    @unhealthy_evaluations.setter
    def unhealthy_evaluations(self, unhealthy_evaluations):
        """Sets the unhealthy_evaluations of this PartitionHealth.

        List of health evaluations that resulted in the current aggregated health state.

        :param unhealthy_evaluations: The unhealthy_evaluations of this PartitionHealth.
        :type unhealthy_evaluations: List[HealthEvaluationWrapper]
        """

        self._unhealthy_evaluations = unhealthy_evaluations

    @property
    def partition_id(self):
        """Gets the partition_id of this PartitionHealth.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this PartitionHealth.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this PartitionHealth.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this PartitionHealth.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def replica_health_states(self):
        """Gets the replica_health_states of this PartitionHealth.

        The list of replica health states associated with the partition.

        :return: The replica_health_states of this PartitionHealth.
        :rtype: List[ReplicaHealthState]
        """
        return self._replica_health_states

    @replica_health_states.setter
    def replica_health_states(self, replica_health_states):
        """Sets the replica_health_states of this PartitionHealth.

        The list of replica health states associated with the partition.

        :param replica_health_states: The replica_health_states of this PartitionHealth.
        :type replica_health_states: List[ReplicaHealthState]
        """

        self._replica_health_states = replica_health_states
