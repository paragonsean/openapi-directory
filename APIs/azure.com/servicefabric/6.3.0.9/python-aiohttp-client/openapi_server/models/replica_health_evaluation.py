# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_evaluation import HealthEvaluation
from openapi_server.models.health_evaluation_kind import HealthEvaluationKind
from openapi_server.models.health_evaluation_wrapper import HealthEvaluationWrapper
from openapi_server.models.health_state import HealthState
from openapi_server import util


class ReplicaHealthEvaluation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregated_health_state: HealthState=None, description: str=None, kind: HealthEvaluationKind=None, partition_id: str=None, replica_or_instance_id: str=None, unhealthy_evaluations: List[HealthEvaluationWrapper]=None):
        """ReplicaHealthEvaluation - a model defined in OpenAPI

        :param aggregated_health_state: The aggregated_health_state of this ReplicaHealthEvaluation.
        :param description: The description of this ReplicaHealthEvaluation.
        :param kind: The kind of this ReplicaHealthEvaluation.
        :param partition_id: The partition_id of this ReplicaHealthEvaluation.
        :param replica_or_instance_id: The replica_or_instance_id of this ReplicaHealthEvaluation.
        :param unhealthy_evaluations: The unhealthy_evaluations of this ReplicaHealthEvaluation.
        """
        self.openapi_types = {
            'aggregated_health_state': HealthState,
            'description': str,
            'kind': HealthEvaluationKind,
            'partition_id': str,
            'replica_or_instance_id': str,
            'unhealthy_evaluations': List[HealthEvaluationWrapper]
        }

        self.attribute_map = {
            'aggregated_health_state': 'AggregatedHealthState',
            'description': 'Description',
            'kind': 'Kind',
            'partition_id': 'PartitionId',
            'replica_or_instance_id': 'ReplicaOrInstanceId',
            'unhealthy_evaluations': 'UnhealthyEvaluations'
        }

        self._aggregated_health_state = aggregated_health_state
        self._description = description
        self._kind = kind
        self._partition_id = partition_id
        self._replica_or_instance_id = replica_or_instance_id
        self._unhealthy_evaluations = unhealthy_evaluations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicaHealthEvaluation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicaHealthEvaluation of this ReplicaHealthEvaluation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregated_health_state(self):
        """Gets the aggregated_health_state of this ReplicaHealthEvaluation.


        :return: The aggregated_health_state of this ReplicaHealthEvaluation.
        :rtype: HealthState
        """
        return self._aggregated_health_state

    @aggregated_health_state.setter
    def aggregated_health_state(self, aggregated_health_state):
        """Sets the aggregated_health_state of this ReplicaHealthEvaluation.


        :param aggregated_health_state: The aggregated_health_state of this ReplicaHealthEvaluation.
        :type aggregated_health_state: HealthState
        """

        self._aggregated_health_state = aggregated_health_state

    @property
    def description(self):
        """Gets the description of this ReplicaHealthEvaluation.

        Description of the health evaluation, which represents a summary of the evaluation process.

        :return: The description of this ReplicaHealthEvaluation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReplicaHealthEvaluation.

        Description of the health evaluation, which represents a summary of the evaluation process.

        :param description: The description of this ReplicaHealthEvaluation.
        :type description: str
        """

        self._description = description

    @property
    def kind(self):
        """Gets the kind of this ReplicaHealthEvaluation.


        :return: The kind of this ReplicaHealthEvaluation.
        :rtype: HealthEvaluationKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReplicaHealthEvaluation.


        :param kind: The kind of this ReplicaHealthEvaluation.
        :type kind: HealthEvaluationKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def partition_id(self):
        """Gets the partition_id of this ReplicaHealthEvaluation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this ReplicaHealthEvaluation.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this ReplicaHealthEvaluation.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this ReplicaHealthEvaluation.
        :type partition_id: str
        """

        self._partition_id = partition_id

    @property
    def replica_or_instance_id(self):
        """Gets the replica_or_instance_id of this ReplicaHealthEvaluation.

        Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID.

        :return: The replica_or_instance_id of this ReplicaHealthEvaluation.
        :rtype: str
        """
        return self._replica_or_instance_id

    @replica_or_instance_id.setter
    def replica_or_instance_id(self, replica_or_instance_id):
        """Sets the replica_or_instance_id of this ReplicaHealthEvaluation.

        Id of a stateful service replica or a stateless service instance. This ID is used in the queries that apply to both stateful and stateless services. It is used by Service Fabric to uniquely identify a replica of a partition of a stateful service or an instance of a stateless service partition. It is unique within a partition and does not change for the lifetime of the replica or the instance. If a stateful replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the ID. If a stateless instance is failed over on the same or different node it will get a different value for the ID.

        :param replica_or_instance_id: The replica_or_instance_id of this ReplicaHealthEvaluation.
        :type replica_or_instance_id: str
        """

        self._replica_or_instance_id = replica_or_instance_id

    @property
    def unhealthy_evaluations(self):
        """Gets the unhealthy_evaluations of this ReplicaHealthEvaluation.

        List of health evaluations that resulted in the current aggregated health state.

        :return: The unhealthy_evaluations of this ReplicaHealthEvaluation.
        :rtype: List[HealthEvaluationWrapper]
        """
        return self._unhealthy_evaluations

    @unhealthy_evaluations.setter
    def unhealthy_evaluations(self, unhealthy_evaluations):
        """Sets the unhealthy_evaluations of this ReplicaHealthEvaluation.

        List of health evaluations that resulted in the current aggregated health state.

        :param unhealthy_evaluations: The unhealthy_evaluations of this ReplicaHealthEvaluation.
        :type unhealthy_evaluations: List[HealthEvaluationWrapper]
        """

        self._unhealthy_evaluations = unhealthy_evaluations
