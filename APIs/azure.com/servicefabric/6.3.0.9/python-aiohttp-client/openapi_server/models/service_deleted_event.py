# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.service_event import ServiceEvent
from openapi_server import util


class ServiceDeletedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, service_id: str=None, application_name: str=None, application_type_name: str=None, is_stateful: bool=None, min_replica_set_size: int=None, partition_count: int=None, service_instance: int=None, service_package_version: str=None, service_type_name: str=None, target_replica_set_size: int=None):
        """ServiceDeletedEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ServiceDeletedEvent.
        :param has_correlated_events: The has_correlated_events of this ServiceDeletedEvent.
        :param kind: The kind of this ServiceDeletedEvent.
        :param time_stamp: The time_stamp of this ServiceDeletedEvent.
        :param service_id: The service_id of this ServiceDeletedEvent.
        :param application_name: The application_name of this ServiceDeletedEvent.
        :param application_type_name: The application_type_name of this ServiceDeletedEvent.
        :param is_stateful: The is_stateful of this ServiceDeletedEvent.
        :param min_replica_set_size: The min_replica_set_size of this ServiceDeletedEvent.
        :param partition_count: The partition_count of this ServiceDeletedEvent.
        :param service_instance: The service_instance of this ServiceDeletedEvent.
        :param service_package_version: The service_package_version of this ServiceDeletedEvent.
        :param service_type_name: The service_type_name of this ServiceDeletedEvent.
        :param target_replica_set_size: The target_replica_set_size of this ServiceDeletedEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'service_id': str,
            'application_name': str,
            'application_type_name': str,
            'is_stateful': bool,
            'min_replica_set_size': int,
            'partition_count': int,
            'service_instance': int,
            'service_package_version': str,
            'service_type_name': str,
            'target_replica_set_size': int
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'service_id': 'ServiceId',
            'application_name': 'ApplicationName',
            'application_type_name': 'ApplicationTypeName',
            'is_stateful': 'IsStateful',
            'min_replica_set_size': 'MinReplicaSetSize',
            'partition_count': 'PartitionCount',
            'service_instance': 'ServiceInstance',
            'service_package_version': 'ServicePackageVersion',
            'service_type_name': 'ServiceTypeName',
            'target_replica_set_size': 'TargetReplicaSetSize'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._service_id = service_id
        self._application_name = application_name
        self._application_type_name = application_type_name
        self._is_stateful = is_stateful
        self._min_replica_set_size = min_replica_set_size
        self._partition_count = partition_count
        self._service_instance = service_instance
        self._service_package_version = service_package_version
        self._service_type_name = service_type_name
        self._target_replica_set_size = target_replica_set_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceDeletedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceDeletedEvent of this ServiceDeletedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ServiceDeletedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ServiceDeletedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ServiceDeletedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ServiceDeletedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ServiceDeletedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ServiceDeletedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ServiceDeletedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ServiceDeletedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ServiceDeletedEvent.


        :return: The kind of this ServiceDeletedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ServiceDeletedEvent.


        :param kind: The kind of this ServiceDeletedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ServiceDeletedEvent.

        The time event was logged.

        :return: The time_stamp of this ServiceDeletedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ServiceDeletedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ServiceDeletedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def service_id(self):
        """Gets the service_id of this ServiceDeletedEvent.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :return: The service_id of this ServiceDeletedEvent.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ServiceDeletedEvent.

        The identity of the service. This ID is an encoded representation of the service name. This is used in the REST APIs to identify the service resource. Starting in version 6.0, hierarchical names are delimited with the \"\\~\" character. For example, if the service name is \"fabric:/myapp/app1/svc1\", the service identity would be \"myapp~app1\\~svc1\" in 6.0+ and \"myapp/app1/svc1\" in previous versions.

        :param service_id: The service_id of this ServiceDeletedEvent.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")

        self._service_id = service_id

    @property
    def application_name(self):
        """Gets the application_name of this ServiceDeletedEvent.

        Application name.

        :return: The application_name of this ServiceDeletedEvent.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ServiceDeletedEvent.

        Application name.

        :param application_name: The application_name of this ServiceDeletedEvent.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def application_type_name(self):
        """Gets the application_type_name of this ServiceDeletedEvent.

        Application type name.

        :return: The application_type_name of this ServiceDeletedEvent.
        :rtype: str
        """
        return self._application_type_name

    @application_type_name.setter
    def application_type_name(self, application_type_name):
        """Sets the application_type_name of this ServiceDeletedEvent.

        Application type name.

        :param application_type_name: The application_type_name of this ServiceDeletedEvent.
        :type application_type_name: str
        """
        if application_type_name is None:
            raise ValueError("Invalid value for `application_type_name`, must not be `None`")

        self._application_type_name = application_type_name

    @property
    def is_stateful(self):
        """Gets the is_stateful of this ServiceDeletedEvent.

        Indicates if Service is stateful.

        :return: The is_stateful of this ServiceDeletedEvent.
        :rtype: bool
        """
        return self._is_stateful

    @is_stateful.setter
    def is_stateful(self, is_stateful):
        """Sets the is_stateful of this ServiceDeletedEvent.

        Indicates if Service is stateful.

        :param is_stateful: The is_stateful of this ServiceDeletedEvent.
        :type is_stateful: bool
        """
        if is_stateful is None:
            raise ValueError("Invalid value for `is_stateful`, must not be `None`")

        self._is_stateful = is_stateful

    @property
    def min_replica_set_size(self):
        """Gets the min_replica_set_size of this ServiceDeletedEvent.

        Minimum size of replicas set.

        :return: The min_replica_set_size of this ServiceDeletedEvent.
        :rtype: int
        """
        return self._min_replica_set_size

    @min_replica_set_size.setter
    def min_replica_set_size(self, min_replica_set_size):
        """Sets the min_replica_set_size of this ServiceDeletedEvent.

        Minimum size of replicas set.

        :param min_replica_set_size: The min_replica_set_size of this ServiceDeletedEvent.
        :type min_replica_set_size: int
        """
        if min_replica_set_size is None:
            raise ValueError("Invalid value for `min_replica_set_size`, must not be `None`")

        self._min_replica_set_size = min_replica_set_size

    @property
    def partition_count(self):
        """Gets the partition_count of this ServiceDeletedEvent.

        Number of partitions.

        :return: The partition_count of this ServiceDeletedEvent.
        :rtype: int
        """
        return self._partition_count

    @partition_count.setter
    def partition_count(self, partition_count):
        """Sets the partition_count of this ServiceDeletedEvent.

        Number of partitions.

        :param partition_count: The partition_count of this ServiceDeletedEvent.
        :type partition_count: int
        """
        if partition_count is None:
            raise ValueError("Invalid value for `partition_count`, must not be `None`")

        self._partition_count = partition_count

    @property
    def service_instance(self):
        """Gets the service_instance of this ServiceDeletedEvent.

        Id of Service instance.

        :return: The service_instance of this ServiceDeletedEvent.
        :rtype: int
        """
        return self._service_instance

    @service_instance.setter
    def service_instance(self, service_instance):
        """Sets the service_instance of this ServiceDeletedEvent.

        Id of Service instance.

        :param service_instance: The service_instance of this ServiceDeletedEvent.
        :type service_instance: int
        """
        if service_instance is None:
            raise ValueError("Invalid value for `service_instance`, must not be `None`")

        self._service_instance = service_instance

    @property
    def service_package_version(self):
        """Gets the service_package_version of this ServiceDeletedEvent.

        Version of Service package.

        :return: The service_package_version of this ServiceDeletedEvent.
        :rtype: str
        """
        return self._service_package_version

    @service_package_version.setter
    def service_package_version(self, service_package_version):
        """Sets the service_package_version of this ServiceDeletedEvent.

        Version of Service package.

        :param service_package_version: The service_package_version of this ServiceDeletedEvent.
        :type service_package_version: str
        """
        if service_package_version is None:
            raise ValueError("Invalid value for `service_package_version`, must not be `None`")

        self._service_package_version = service_package_version

    @property
    def service_type_name(self):
        """Gets the service_type_name of this ServiceDeletedEvent.

        Service type name.

        :return: The service_type_name of this ServiceDeletedEvent.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this ServiceDeletedEvent.

        Service type name.

        :param service_type_name: The service_type_name of this ServiceDeletedEvent.
        :type service_type_name: str
        """
        if service_type_name is None:
            raise ValueError("Invalid value for `service_type_name`, must not be `None`")

        self._service_type_name = service_type_name

    @property
    def target_replica_set_size(self):
        """Gets the target_replica_set_size of this ServiceDeletedEvent.

        Size of target replicas set.

        :return: The target_replica_set_size of this ServiceDeletedEvent.
        :rtype: int
        """
        return self._target_replica_set_size

    @target_replica_set_size.setter
    def target_replica_set_size(self, target_replica_set_size):
        """Sets the target_replica_set_size of this ServiceDeletedEvent.

        Size of target replicas set.

        :param target_replica_set_size: The target_replica_set_size of this ServiceDeletedEvent.
        :type target_replica_set_size: int
        """
        if target_replica_set_size is None:
            raise ValueError("Invalid value for `target_replica_set_size`, must not be `None`")

        self._target_replica_set_size = target_replica_set_size
