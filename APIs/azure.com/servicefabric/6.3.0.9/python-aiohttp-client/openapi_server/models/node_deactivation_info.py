# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_deactivation_intent import NodeDeactivationIntent
from openapi_server.models.node_deactivation_status import NodeDeactivationStatus
from openapi_server.models.node_deactivation_task import NodeDeactivationTask
from openapi_server.models.safety_check_wrapper import SafetyCheckWrapper
from openapi_server import util


class NodeDeactivationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_deactivation_intent: NodeDeactivationIntent=None, node_deactivation_status: NodeDeactivationStatus=None, node_deactivation_task: List[NodeDeactivationTask]=None, pending_safety_checks: List[SafetyCheckWrapper]=None):
        """NodeDeactivationInfo - a model defined in OpenAPI

        :param node_deactivation_intent: The node_deactivation_intent of this NodeDeactivationInfo.
        :param node_deactivation_status: The node_deactivation_status of this NodeDeactivationInfo.
        :param node_deactivation_task: The node_deactivation_task of this NodeDeactivationInfo.
        :param pending_safety_checks: The pending_safety_checks of this NodeDeactivationInfo.
        """
        self.openapi_types = {
            'node_deactivation_intent': NodeDeactivationIntent,
            'node_deactivation_status': NodeDeactivationStatus,
            'node_deactivation_task': List[NodeDeactivationTask],
            'pending_safety_checks': List[SafetyCheckWrapper]
        }

        self.attribute_map = {
            'node_deactivation_intent': 'NodeDeactivationIntent',
            'node_deactivation_status': 'NodeDeactivationStatus',
            'node_deactivation_task': 'NodeDeactivationTask',
            'pending_safety_checks': 'PendingSafetyChecks'
        }

        self._node_deactivation_intent = node_deactivation_intent
        self._node_deactivation_status = node_deactivation_status
        self._node_deactivation_task = node_deactivation_task
        self._pending_safety_checks = pending_safety_checks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeDeactivationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeDeactivationInfo of this NodeDeactivationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_deactivation_intent(self):
        """Gets the node_deactivation_intent of this NodeDeactivationInfo.


        :return: The node_deactivation_intent of this NodeDeactivationInfo.
        :rtype: NodeDeactivationIntent
        """
        return self._node_deactivation_intent

    @node_deactivation_intent.setter
    def node_deactivation_intent(self, node_deactivation_intent):
        """Sets the node_deactivation_intent of this NodeDeactivationInfo.


        :param node_deactivation_intent: The node_deactivation_intent of this NodeDeactivationInfo.
        :type node_deactivation_intent: NodeDeactivationIntent
        """

        self._node_deactivation_intent = node_deactivation_intent

    @property
    def node_deactivation_status(self):
        """Gets the node_deactivation_status of this NodeDeactivationInfo.


        :return: The node_deactivation_status of this NodeDeactivationInfo.
        :rtype: NodeDeactivationStatus
        """
        return self._node_deactivation_status

    @node_deactivation_status.setter
    def node_deactivation_status(self, node_deactivation_status):
        """Sets the node_deactivation_status of this NodeDeactivationInfo.


        :param node_deactivation_status: The node_deactivation_status of this NodeDeactivationInfo.
        :type node_deactivation_status: NodeDeactivationStatus
        """

        self._node_deactivation_status = node_deactivation_status

    @property
    def node_deactivation_task(self):
        """Gets the node_deactivation_task of this NodeDeactivationInfo.

        List of tasks representing the deactivation operation on the node.

        :return: The node_deactivation_task of this NodeDeactivationInfo.
        :rtype: List[NodeDeactivationTask]
        """
        return self._node_deactivation_task

    @node_deactivation_task.setter
    def node_deactivation_task(self, node_deactivation_task):
        """Sets the node_deactivation_task of this NodeDeactivationInfo.

        List of tasks representing the deactivation operation on the node.

        :param node_deactivation_task: The node_deactivation_task of this NodeDeactivationInfo.
        :type node_deactivation_task: List[NodeDeactivationTask]
        """

        self._node_deactivation_task = node_deactivation_task

    @property
    def pending_safety_checks(self):
        """Gets the pending_safety_checks of this NodeDeactivationInfo.

        List of pending safety checks

        :return: The pending_safety_checks of this NodeDeactivationInfo.
        :rtype: List[SafetyCheckWrapper]
        """
        return self._pending_safety_checks

    @pending_safety_checks.setter
    def pending_safety_checks(self, pending_safety_checks):
        """Sets the pending_safety_checks of this NodeDeactivationInfo.

        List of pending safety checks

        :param pending_safety_checks: The pending_safety_checks of this NodeDeactivationInfo.
        :type pending_safety_checks: List[SafetyCheckWrapper]
        """

        self._pending_safety_checks = pending_safety_checks
