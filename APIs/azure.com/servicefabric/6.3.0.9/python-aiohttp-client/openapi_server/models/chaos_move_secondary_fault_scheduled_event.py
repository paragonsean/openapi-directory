# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.partition_event import PartitionEvent
from openapi_server import util


class ChaosMoveSecondaryFaultScheduledEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, partition_id: str=None, destination_node: str=None, fault_group_id: str=None, fault_id: str=None, forced_move: bool=None, service_name: str=None, source_node: str=None):
        """ChaosMoveSecondaryFaultScheduledEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :param has_correlated_events: The has_correlated_events of this ChaosMoveSecondaryFaultScheduledEvent.
        :param kind: The kind of this ChaosMoveSecondaryFaultScheduledEvent.
        :param time_stamp: The time_stamp of this ChaosMoveSecondaryFaultScheduledEvent.
        :param partition_id: The partition_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :param destination_node: The destination_node of this ChaosMoveSecondaryFaultScheduledEvent.
        :param fault_group_id: The fault_group_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :param fault_id: The fault_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :param forced_move: The forced_move of this ChaosMoveSecondaryFaultScheduledEvent.
        :param service_name: The service_name of this ChaosMoveSecondaryFaultScheduledEvent.
        :param source_node: The source_node of this ChaosMoveSecondaryFaultScheduledEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'partition_id': str,
            'destination_node': str,
            'fault_group_id': str,
            'fault_id': str,
            'forced_move': bool,
            'service_name': str,
            'source_node': str
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'partition_id': 'PartitionId',
            'destination_node': 'DestinationNode',
            'fault_group_id': 'FaultGroupId',
            'fault_id': 'FaultId',
            'forced_move': 'ForcedMove',
            'service_name': 'ServiceName',
            'source_node': 'SourceNode'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._partition_id = partition_id
        self._destination_node = destination_node
        self._fault_group_id = fault_group_id
        self._fault_id = fault_id
        self._forced_move = forced_move
        self._service_name = service_name
        self._source_node = source_node

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosMoveSecondaryFaultScheduledEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosMoveSecondaryFaultScheduledEvent of this ChaosMoveSecondaryFaultScheduledEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ChaosMoveSecondaryFaultScheduledEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ChaosMoveSecondaryFaultScheduledEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ChaosMoveSecondaryFaultScheduledEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ChaosMoveSecondaryFaultScheduledEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ChaosMoveSecondaryFaultScheduledEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ChaosMoveSecondaryFaultScheduledEvent.


        :return: The kind of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChaosMoveSecondaryFaultScheduledEvent.


        :param kind: The kind of this ChaosMoveSecondaryFaultScheduledEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ChaosMoveSecondaryFaultScheduledEvent.

        The time event was logged.

        :return: The time_stamp of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ChaosMoveSecondaryFaultScheduledEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ChaosMoveSecondaryFaultScheduledEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def partition_id(self):
        """Gets the partition_id of this ChaosMoveSecondaryFaultScheduledEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :return: The partition_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: str
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this ChaosMoveSecondaryFaultScheduledEvent.

        An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.

        :param partition_id: The partition_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :type partition_id: str
        """
        if partition_id is None:
            raise ValueError("Invalid value for `partition_id`, must not be `None`")

        self._partition_id = partition_id

    @property
    def destination_node(self):
        """Gets the destination_node of this ChaosMoveSecondaryFaultScheduledEvent.

        The name of a Service Fabric node.

        :return: The destination_node of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: str
        """
        return self._destination_node

    @destination_node.setter
    def destination_node(self, destination_node):
        """Sets the destination_node of this ChaosMoveSecondaryFaultScheduledEvent.

        The name of a Service Fabric node.

        :param destination_node: The destination_node of this ChaosMoveSecondaryFaultScheduledEvent.
        :type destination_node: str
        """
        if destination_node is None:
            raise ValueError("Invalid value for `destination_node`, must not be `None`")

        self._destination_node = destination_node

    @property
    def fault_group_id(self):
        """Gets the fault_group_id of this ChaosMoveSecondaryFaultScheduledEvent.

        Id of fault group.

        :return: The fault_group_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: str
        """
        return self._fault_group_id

    @fault_group_id.setter
    def fault_group_id(self, fault_group_id):
        """Sets the fault_group_id of this ChaosMoveSecondaryFaultScheduledEvent.

        Id of fault group.

        :param fault_group_id: The fault_group_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :type fault_group_id: str
        """
        if fault_group_id is None:
            raise ValueError("Invalid value for `fault_group_id`, must not be `None`")

        self._fault_group_id = fault_group_id

    @property
    def fault_id(self):
        """Gets the fault_id of this ChaosMoveSecondaryFaultScheduledEvent.

        Id of fault.

        :return: The fault_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: str
        """
        return self._fault_id

    @fault_id.setter
    def fault_id(self, fault_id):
        """Sets the fault_id of this ChaosMoveSecondaryFaultScheduledEvent.

        Id of fault.

        :param fault_id: The fault_id of this ChaosMoveSecondaryFaultScheduledEvent.
        :type fault_id: str
        """
        if fault_id is None:
            raise ValueError("Invalid value for `fault_id`, must not be `None`")

        self._fault_id = fault_id

    @property
    def forced_move(self):
        """Gets the forced_move of this ChaosMoveSecondaryFaultScheduledEvent.

        Indicates a forced move.

        :return: The forced_move of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: bool
        """
        return self._forced_move

    @forced_move.setter
    def forced_move(self, forced_move):
        """Sets the forced_move of this ChaosMoveSecondaryFaultScheduledEvent.

        Indicates a forced move.

        :param forced_move: The forced_move of this ChaosMoveSecondaryFaultScheduledEvent.
        :type forced_move: bool
        """
        if forced_move is None:
            raise ValueError("Invalid value for `forced_move`, must not be `None`")

        self._forced_move = forced_move

    @property
    def service_name(self):
        """Gets the service_name of this ChaosMoveSecondaryFaultScheduledEvent.

        Service name.

        :return: The service_name of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ChaosMoveSecondaryFaultScheduledEvent.

        Service name.

        :param service_name: The service_name of this ChaosMoveSecondaryFaultScheduledEvent.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def source_node(self):
        """Gets the source_node of this ChaosMoveSecondaryFaultScheduledEvent.

        The name of a Service Fabric node.

        :return: The source_node of this ChaosMoveSecondaryFaultScheduledEvent.
        :rtype: str
        """
        return self._source_node

    @source_node.setter
    def source_node(self, source_node):
        """Sets the source_node of this ChaosMoveSecondaryFaultScheduledEvent.

        The name of a Service Fabric node.

        :param source_node: The source_node of this ChaosMoveSecondaryFaultScheduledEvent.
        :type source_node: str
        """
        if source_node is None:
            raise ValueError("Invalid value for `source_node`, must not be `None`")

        self._source_node = source_node
