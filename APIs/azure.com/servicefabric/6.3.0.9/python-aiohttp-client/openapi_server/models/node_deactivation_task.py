# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_deactivation_intent import NodeDeactivationIntent
from openapi_server.models.node_deactivation_task_id import NodeDeactivationTaskId
from openapi_server import util


class NodeDeactivationTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_deactivation_intent: NodeDeactivationIntent=None, node_deactivation_task_id: NodeDeactivationTaskId=None):
        """NodeDeactivationTask - a model defined in OpenAPI

        :param node_deactivation_intent: The node_deactivation_intent of this NodeDeactivationTask.
        :param node_deactivation_task_id: The node_deactivation_task_id of this NodeDeactivationTask.
        """
        self.openapi_types = {
            'node_deactivation_intent': NodeDeactivationIntent,
            'node_deactivation_task_id': NodeDeactivationTaskId
        }

        self.attribute_map = {
            'node_deactivation_intent': 'NodeDeactivationIntent',
            'node_deactivation_task_id': 'NodeDeactivationTaskId'
        }

        self._node_deactivation_intent = node_deactivation_intent
        self._node_deactivation_task_id = node_deactivation_task_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeDeactivationTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeDeactivationTask of this NodeDeactivationTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_deactivation_intent(self):
        """Gets the node_deactivation_intent of this NodeDeactivationTask.


        :return: The node_deactivation_intent of this NodeDeactivationTask.
        :rtype: NodeDeactivationIntent
        """
        return self._node_deactivation_intent

    @node_deactivation_intent.setter
    def node_deactivation_intent(self, node_deactivation_intent):
        """Sets the node_deactivation_intent of this NodeDeactivationTask.


        :param node_deactivation_intent: The node_deactivation_intent of this NodeDeactivationTask.
        :type node_deactivation_intent: NodeDeactivationIntent
        """

        self._node_deactivation_intent = node_deactivation_intent

    @property
    def node_deactivation_task_id(self):
        """Gets the node_deactivation_task_id of this NodeDeactivationTask.


        :return: The node_deactivation_task_id of this NodeDeactivationTask.
        :rtype: NodeDeactivationTaskId
        """
        return self._node_deactivation_task_id

    @node_deactivation_task_id.setter
    def node_deactivation_task_id(self, node_deactivation_task_id):
        """Sets the node_deactivation_task_id of this NodeDeactivationTask.


        :param node_deactivation_task_id: The node_deactivation_task_id of this NodeDeactivationTask.
        :type node_deactivation_task_id: NodeDeactivationTaskId
        """

        self._node_deactivation_task_id = node_deactivation_task_id
