# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChaosScheduleJobActiveDaysOfWeek(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, friday: bool=False, monday: bool=False, saturday: bool=False, sunday: bool=False, thursday: bool=False, tuesday: bool=False, wednesday: bool=False):
        """ChaosScheduleJobActiveDaysOfWeek - a model defined in OpenAPI

        :param friday: The friday of this ChaosScheduleJobActiveDaysOfWeek.
        :param monday: The monday of this ChaosScheduleJobActiveDaysOfWeek.
        :param saturday: The saturday of this ChaosScheduleJobActiveDaysOfWeek.
        :param sunday: The sunday of this ChaosScheduleJobActiveDaysOfWeek.
        :param thursday: The thursday of this ChaosScheduleJobActiveDaysOfWeek.
        :param tuesday: The tuesday of this ChaosScheduleJobActiveDaysOfWeek.
        :param wednesday: The wednesday of this ChaosScheduleJobActiveDaysOfWeek.
        """
        self.openapi_types = {
            'friday': bool,
            'monday': bool,
            'saturday': bool,
            'sunday': bool,
            'thursday': bool,
            'tuesday': bool,
            'wednesday': bool
        }

        self.attribute_map = {
            'friday': 'Friday',
            'monday': 'Monday',
            'saturday': 'Saturday',
            'sunday': 'Sunday',
            'thursday': 'Thursday',
            'tuesday': 'Tuesday',
            'wednesday': 'Wednesday'
        }

        self._friday = friday
        self._monday = monday
        self._saturday = saturday
        self._sunday = sunday
        self._thursday = thursday
        self._tuesday = tuesday
        self._wednesday = wednesday

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosScheduleJobActiveDaysOfWeek':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosScheduleJobActiveDaysOfWeek of this ChaosScheduleJobActiveDaysOfWeek.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def friday(self):
        """Gets the friday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Friday

        :return: The friday of this ChaosScheduleJobActiveDaysOfWeek.
        :rtype: bool
        """
        return self._friday

    @friday.setter
    def friday(self, friday):
        """Sets the friday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Friday

        :param friday: The friday of this ChaosScheduleJobActiveDaysOfWeek.
        :type friday: bool
        """

        self._friday = friday

    @property
    def monday(self):
        """Gets the monday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Monday

        :return: The monday of this ChaosScheduleJobActiveDaysOfWeek.
        :rtype: bool
        """
        return self._monday

    @monday.setter
    def monday(self, monday):
        """Sets the monday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Monday

        :param monday: The monday of this ChaosScheduleJobActiveDaysOfWeek.
        :type monday: bool
        """

        self._monday = monday

    @property
    def saturday(self):
        """Gets the saturday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Saturday

        :return: The saturday of this ChaosScheduleJobActiveDaysOfWeek.
        :rtype: bool
        """
        return self._saturday

    @saturday.setter
    def saturday(self, saturday):
        """Sets the saturday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Saturday

        :param saturday: The saturday of this ChaosScheduleJobActiveDaysOfWeek.
        :type saturday: bool
        """

        self._saturday = saturday

    @property
    def sunday(self):
        """Gets the sunday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Sunday

        :return: The sunday of this ChaosScheduleJobActiveDaysOfWeek.
        :rtype: bool
        """
        return self._sunday

    @sunday.setter
    def sunday(self, sunday):
        """Sets the sunday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Sunday

        :param sunday: The sunday of this ChaosScheduleJobActiveDaysOfWeek.
        :type sunday: bool
        """

        self._sunday = sunday

    @property
    def thursday(self):
        """Gets the thursday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Thursday

        :return: The thursday of this ChaosScheduleJobActiveDaysOfWeek.
        :rtype: bool
        """
        return self._thursday

    @thursday.setter
    def thursday(self, thursday):
        """Sets the thursday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Thursday

        :param thursday: The thursday of this ChaosScheduleJobActiveDaysOfWeek.
        :type thursday: bool
        """

        self._thursday = thursday

    @property
    def tuesday(self):
        """Gets the tuesday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Tuesday

        :return: The tuesday of this ChaosScheduleJobActiveDaysOfWeek.
        :rtype: bool
        """
        return self._tuesday

    @tuesday.setter
    def tuesday(self, tuesday):
        """Sets the tuesday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Tuesday

        :param tuesday: The tuesday of this ChaosScheduleJobActiveDaysOfWeek.
        :type tuesday: bool
        """

        self._tuesday = tuesday

    @property
    def wednesday(self):
        """Gets the wednesday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Wednesday

        :return: The wednesday of this ChaosScheduleJobActiveDaysOfWeek.
        :rtype: bool
        """
        return self._wednesday

    @wednesday.setter
    def wednesday(self, wednesday):
        """Sets the wednesday of this ChaosScheduleJobActiveDaysOfWeek.

        Indicates if the Chaos Schedule Job will run on Wednesday

        :param wednesday: The wednesday of this ChaosScheduleJobActiveDaysOfWeek.
        :type wednesday: bool
        """

        self._wednesday = wednesday
