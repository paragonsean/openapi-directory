# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_package_activation_mode import ServicePackageActivationMode
from openapi_server import util


class ServiceFromTemplateDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, initialization_data: List[int]=None, service_dns_name: str=None, service_name: str=None, service_package_activation_mode: ServicePackageActivationMode=None, service_type_name: str=None):
        """ServiceFromTemplateDescription - a model defined in OpenAPI

        :param application_name: The application_name of this ServiceFromTemplateDescription.
        :param initialization_data: The initialization_data of this ServiceFromTemplateDescription.
        :param service_dns_name: The service_dns_name of this ServiceFromTemplateDescription.
        :param service_name: The service_name of this ServiceFromTemplateDescription.
        :param service_package_activation_mode: The service_package_activation_mode of this ServiceFromTemplateDescription.
        :param service_type_name: The service_type_name of this ServiceFromTemplateDescription.
        """
        self.openapi_types = {
            'application_name': str,
            'initialization_data': List[int],
            'service_dns_name': str,
            'service_name': str,
            'service_package_activation_mode': ServicePackageActivationMode,
            'service_type_name': str
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'initialization_data': 'InitializationData',
            'service_dns_name': 'ServiceDnsName',
            'service_name': 'ServiceName',
            'service_package_activation_mode': 'ServicePackageActivationMode',
            'service_type_name': 'ServiceTypeName'
        }

        self._application_name = application_name
        self._initialization_data = initialization_data
        self._service_dns_name = service_dns_name
        self._service_name = service_name
        self._service_package_activation_mode = service_package_activation_mode
        self._service_type_name = service_type_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceFromTemplateDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceFromTemplateDescription of this ServiceFromTemplateDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this ServiceFromTemplateDescription.

        The name of the application, including the 'fabric:' URI scheme.

        :return: The application_name of this ServiceFromTemplateDescription.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ServiceFromTemplateDescription.

        The name of the application, including the 'fabric:' URI scheme.

        :param application_name: The application_name of this ServiceFromTemplateDescription.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")

        self._application_name = application_name

    @property
    def initialization_data(self):
        """Gets the initialization_data of this ServiceFromTemplateDescription.

        Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.

        :return: The initialization_data of this ServiceFromTemplateDescription.
        :rtype: List[int]
        """
        return self._initialization_data

    @initialization_data.setter
    def initialization_data(self, initialization_data):
        """Sets the initialization_data of this ServiceFromTemplateDescription.

        Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.

        :param initialization_data: The initialization_data of this ServiceFromTemplateDescription.
        :type initialization_data: List[int]
        """

        self._initialization_data = initialization_data

    @property
    def service_dns_name(self):
        """Gets the service_dns_name of this ServiceFromTemplateDescription.

        The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.

        :return: The service_dns_name of this ServiceFromTemplateDescription.
        :rtype: str
        """
        return self._service_dns_name

    @service_dns_name.setter
    def service_dns_name(self, service_dns_name):
        """Sets the service_dns_name of this ServiceFromTemplateDescription.

        The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.

        :param service_dns_name: The service_dns_name of this ServiceFromTemplateDescription.
        :type service_dns_name: str
        """

        self._service_dns_name = service_dns_name

    @property
    def service_name(self):
        """Gets the service_name of this ServiceFromTemplateDescription.

        The full name of the service with 'fabric:' URI scheme.

        :return: The service_name of this ServiceFromTemplateDescription.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ServiceFromTemplateDescription.

        The full name of the service with 'fabric:' URI scheme.

        :param service_name: The service_name of this ServiceFromTemplateDescription.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def service_package_activation_mode(self):
        """Gets the service_package_activation_mode of this ServiceFromTemplateDescription.


        :return: The service_package_activation_mode of this ServiceFromTemplateDescription.
        :rtype: ServicePackageActivationMode
        """
        return self._service_package_activation_mode

    @service_package_activation_mode.setter
    def service_package_activation_mode(self, service_package_activation_mode):
        """Sets the service_package_activation_mode of this ServiceFromTemplateDescription.


        :param service_package_activation_mode: The service_package_activation_mode of this ServiceFromTemplateDescription.
        :type service_package_activation_mode: ServicePackageActivationMode
        """

        self._service_package_activation_mode = service_package_activation_mode

    @property
    def service_type_name(self):
        """Gets the service_type_name of this ServiceFromTemplateDescription.

        Name of the service type as specified in the service manifest.

        :return: The service_type_name of this ServiceFromTemplateDescription.
        :rtype: str
        """
        return self._service_type_name

    @service_type_name.setter
    def service_type_name(self, service_type_name):
        """Sets the service_type_name of this ServiceFromTemplateDescription.

        Name of the service type as specified in the service manifest.

        :param service_type_name: The service_type_name of this ServiceFromTemplateDescription.
        :type service_type_name: str
        """
        if service_type_name is None:
            raise ValueError("Invalid value for `service_type_name`, must not be `None`")

        self._service_type_name = service_type_name
