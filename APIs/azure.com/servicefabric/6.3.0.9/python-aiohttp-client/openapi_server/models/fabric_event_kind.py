# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FabricEventKind(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    CLUSTEREVENT = 'ClusterEvent'
    CONTAINERINSTANCEEVENT = 'ContainerInstanceEvent'
    NODEEVENT = 'NodeEvent'
    APPLICATIONEVENT = 'ApplicationEvent'
    SERVICEEVENT = 'ServiceEvent'
    PARTITIONEVENT = 'PartitionEvent'
    REPLICAEVENT = 'ReplicaEvent'
    PARTITIONANALYSISEVENT = 'PartitionAnalysisEvent'
    APPLICATIONCREATED = 'ApplicationCreated'
    APPLICATIONDELETED = 'ApplicationDeleted'
    APPLICATIONHEALTHREPORTCREATED = 'ApplicationHealthReportCreated'
    APPLICATIONHEALTHREPORTEXPIRED = 'ApplicationHealthReportExpired'
    APPLICATIONUPGRADECOMPLETE = 'ApplicationUpgradeComplete'
    APPLICATIONUPGRADEDOMAINCOMPLETE = 'ApplicationUpgradeDomainComplete'
    APPLICATIONUPGRADEROLLBACKCOMPLETE = 'ApplicationUpgradeRollbackComplete'
    APPLICATIONUPGRADEROLLBACKSTART = 'ApplicationUpgradeRollbackStart'
    APPLICATIONUPGRADESTART = 'ApplicationUpgradeStart'
    DEPLOYEDAPPLICATIONHEALTHREPORTCREATED = 'DeployedApplicationHealthReportCreated'
    DEPLOYEDAPPLICATIONHEALTHREPORTEXPIRED = 'DeployedApplicationHealthReportExpired'
    PROCESSDEACTIVATED = 'ProcessDeactivated'
    CONTAINERDEACTIVATED = 'ContainerDeactivated'
    NODEABORTED = 'NodeAborted'
    NODEABORTING = 'NodeAborting'
    NODEADDED = 'NodeAdded'
    NODECLOSE = 'NodeClose'
    NODECLOSING = 'NodeClosing'
    NODEDEACTIVATECOMPLETE = 'NodeDeactivateComplete'
    NODEDEACTIVATESTART = 'NodeDeactivateStart'
    NODEDOWN = 'NodeDown'
    NODEHEALTHREPORTCREATED = 'NodeHealthReportCreated'
    NODEHEALTHREPORTEXPIRED = 'NodeHealthReportExpired'
    NODEOPENEDSUCCESS = 'NodeOpenedSuccess'
    NODEOPENFAILED = 'NodeOpenFailed'
    NODEOPENING = 'NodeOpening'
    NODEREMOVED = 'NodeRemoved'
    NODEUP = 'NodeUp'
    PARTITIONHEALTHREPORTCREATED = 'PartitionHealthReportCreated'
    PARTITIONHEALTHREPORTEXPIRED = 'PartitionHealthReportExpired'
    PARTITIONRECONFIGURATIONCOMPLETED = 'PartitionReconfigurationCompleted'
    PARTITIONPRIMARYMOVEANALYSIS = 'PartitionPrimaryMoveAnalysis'
    SERVICECREATED = 'ServiceCreated'
    SERVICEDELETED = 'ServiceDeleted'
    SERVICEHEALTHREPORTCREATED = 'ServiceHealthReportCreated'
    SERVICEHEALTHREPORTEXPIRED = 'ServiceHealthReportExpired'
    DEPLOYEDSERVICEHEALTHREPORTCREATED = 'DeployedServiceHealthReportCreated'
    DEPLOYEDSERVICEHEALTHREPORTEXPIRED = 'DeployedServiceHealthReportExpired'
    STATEFULREPLICAHEALTHREPORTCREATED = 'StatefulReplicaHealthReportCreated'
    STATEFULREPLICAHEALTHREPORTEXPIRED = 'StatefulReplicaHealthReportExpired'
    STATELESSREPLICAHEALTHREPORTCREATED = 'StatelessReplicaHealthReportCreated'
    STATELESSREPLICAHEALTHREPORTEXPIRED = 'StatelessReplicaHealthReportExpired'
    CLUSTERHEALTHREPORTCREATED = 'ClusterHealthReportCreated'
    CLUSTERHEALTHREPORTEXPIRED = 'ClusterHealthReportExpired'
    CLUSTERUPGRADECOMPLETE = 'ClusterUpgradeComplete'
    CLUSTERUPGRADEDOMAINCOMPLETE = 'ClusterUpgradeDomainComplete'
    CLUSTERUPGRADEROLLBACKCOMPLETE = 'ClusterUpgradeRollbackComplete'
    CLUSTERUPGRADEROLLBACKSTART = 'ClusterUpgradeRollbackStart'
    CLUSTERUPGRADESTART = 'ClusterUpgradeStart'
    CHAOSSTOPPED = 'ChaosStopped'
    CHAOSSTARTED = 'ChaosStarted'
    CHAOSRESTARTNODEFAULTCOMPLETED = 'ChaosRestartNodeFaultCompleted'
    CHAOSRESTARTCODEPACKAGEFAULTSCHEDULED = 'ChaosRestartCodePackageFaultScheduled'
    CHAOSRESTARTCODEPACKAGEFAULTCOMPLETED = 'ChaosRestartCodePackageFaultCompleted'
    CHAOSREMOVEREPLICAFAULTSCHEDULED = 'ChaosRemoveReplicaFaultScheduled'
    CHAOSREMOVEREPLICAFAULTCOMPLETED = 'ChaosRemoveReplicaFaultCompleted'
    CHAOSMOVESECONDARYFAULTSCHEDULED = 'ChaosMoveSecondaryFaultScheduled'
    CHAOSMOVEPRIMARYFAULTSCHEDULED = 'ChaosMovePrimaryFaultScheduled'
    CHAOSRESTARTREPLICAFAULTSCHEDULED = 'ChaosRestartReplicaFaultScheduled'
    CHAOSRESTARTNODEFAULTSCHEDULED = 'ChaosRestartNodeFaultScheduled'

    def __init__(self):
        """FabricEventKind - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FabricEventKind':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FabricEventKind of this FabricEventKind.
        """
        return util.deserialize_model(dikt, cls)
