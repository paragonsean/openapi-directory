# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeactivationIntentDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deactivation_intent: str=None):
        """DeactivationIntentDescription - a model defined in OpenAPI

        :param deactivation_intent: The deactivation_intent of this DeactivationIntentDescription.
        """
        self.openapi_types = {
            'deactivation_intent': str
        }

        self.attribute_map = {
            'deactivation_intent': 'DeactivationIntent'
        }

        self._deactivation_intent = deactivation_intent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeactivationIntentDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeactivationIntentDescription of this DeactivationIntentDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deactivation_intent(self):
        """Gets the deactivation_intent of this DeactivationIntentDescription.

        Describes the intent or reason for deactivating the node. The possible values are following.

        :return: The deactivation_intent of this DeactivationIntentDescription.
        :rtype: str
        """
        return self._deactivation_intent

    @deactivation_intent.setter
    def deactivation_intent(self, deactivation_intent):
        """Sets the deactivation_intent of this DeactivationIntentDescription.

        Describes the intent or reason for deactivating the node. The possible values are following.

        :param deactivation_intent: The deactivation_intent of this DeactivationIntentDescription.
        :type deactivation_intent: str
        """
        allowed_values = ["Pause", "Restart", "RemoveData"]  # noqa: E501
        if deactivation_intent not in allowed_values:
            raise ValueError(
                "Invalid value for `deactivation_intent` ({0}), must be one of {1}"
                .format(deactivation_intent, allowed_values)
            )

        self._deactivation_intent = deactivation_intent
