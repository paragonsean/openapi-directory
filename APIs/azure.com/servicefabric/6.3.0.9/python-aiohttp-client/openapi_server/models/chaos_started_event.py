# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_event import ClusterEvent
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server import util


class ChaosStartedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, chaos_context: str=None, cluster_health_policy: str=None, included_application_list: str=None, included_node_type_list: str=None, max_cluster_stabilization_timeout_in_seconds: float=None, max_concurrent_faults: int=None, move_replica_fault_enabled: bool=None, time_to_run_in_seconds: float=None, wait_time_between_fautls_in_seconds: float=None, wait_time_between_iterations_in_seconds: float=None):
        """ChaosStartedEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this ChaosStartedEvent.
        :param has_correlated_events: The has_correlated_events of this ChaosStartedEvent.
        :param kind: The kind of this ChaosStartedEvent.
        :param time_stamp: The time_stamp of this ChaosStartedEvent.
        :param chaos_context: The chaos_context of this ChaosStartedEvent.
        :param cluster_health_policy: The cluster_health_policy of this ChaosStartedEvent.
        :param included_application_list: The included_application_list of this ChaosStartedEvent.
        :param included_node_type_list: The included_node_type_list of this ChaosStartedEvent.
        :param max_cluster_stabilization_timeout_in_seconds: The max_cluster_stabilization_timeout_in_seconds of this ChaosStartedEvent.
        :param max_concurrent_faults: The max_concurrent_faults of this ChaosStartedEvent.
        :param move_replica_fault_enabled: The move_replica_fault_enabled of this ChaosStartedEvent.
        :param time_to_run_in_seconds: The time_to_run_in_seconds of this ChaosStartedEvent.
        :param wait_time_between_fautls_in_seconds: The wait_time_between_fautls_in_seconds of this ChaosStartedEvent.
        :param wait_time_between_iterations_in_seconds: The wait_time_between_iterations_in_seconds of this ChaosStartedEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'chaos_context': str,
            'cluster_health_policy': str,
            'included_application_list': str,
            'included_node_type_list': str,
            'max_cluster_stabilization_timeout_in_seconds': float,
            'max_concurrent_faults': int,
            'move_replica_fault_enabled': bool,
            'time_to_run_in_seconds': float,
            'wait_time_between_fautls_in_seconds': float,
            'wait_time_between_iterations_in_seconds': float
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'chaos_context': 'ChaosContext',
            'cluster_health_policy': 'ClusterHealthPolicy',
            'included_application_list': 'IncludedApplicationList',
            'included_node_type_list': 'IncludedNodeTypeList',
            'max_cluster_stabilization_timeout_in_seconds': 'MaxClusterStabilizationTimeoutInSeconds',
            'max_concurrent_faults': 'MaxConcurrentFaults',
            'move_replica_fault_enabled': 'MoveReplicaFaultEnabled',
            'time_to_run_in_seconds': 'TimeToRunInSeconds',
            'wait_time_between_fautls_in_seconds': 'WaitTimeBetweenFautlsInSeconds',
            'wait_time_between_iterations_in_seconds': 'WaitTimeBetweenIterationsInSeconds'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._chaos_context = chaos_context
        self._cluster_health_policy = cluster_health_policy
        self._included_application_list = included_application_list
        self._included_node_type_list = included_node_type_list
        self._max_cluster_stabilization_timeout_in_seconds = max_cluster_stabilization_timeout_in_seconds
        self._max_concurrent_faults = max_concurrent_faults
        self._move_replica_fault_enabled = move_replica_fault_enabled
        self._time_to_run_in_seconds = time_to_run_in_seconds
        self._wait_time_between_fautls_in_seconds = wait_time_between_fautls_in_seconds
        self._wait_time_between_iterations_in_seconds = wait_time_between_iterations_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaosStartedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChaosStartedEvent of this ChaosStartedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this ChaosStartedEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this ChaosStartedEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this ChaosStartedEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this ChaosStartedEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this ChaosStartedEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this ChaosStartedEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this ChaosStartedEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this ChaosStartedEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this ChaosStartedEvent.


        :return: The kind of this ChaosStartedEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ChaosStartedEvent.


        :param kind: The kind of this ChaosStartedEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this ChaosStartedEvent.

        The time event was logged.

        :return: The time_stamp of this ChaosStartedEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this ChaosStartedEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this ChaosStartedEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def chaos_context(self):
        """Gets the chaos_context of this ChaosStartedEvent.

        Chaos Context.

        :return: The chaos_context of this ChaosStartedEvent.
        :rtype: str
        """
        return self._chaos_context

    @chaos_context.setter
    def chaos_context(self, chaos_context):
        """Sets the chaos_context of this ChaosStartedEvent.

        Chaos Context.

        :param chaos_context: The chaos_context of this ChaosStartedEvent.
        :type chaos_context: str
        """
        if chaos_context is None:
            raise ValueError("Invalid value for `chaos_context`, must not be `None`")

        self._chaos_context = chaos_context

    @property
    def cluster_health_policy(self):
        """Gets the cluster_health_policy of this ChaosStartedEvent.

        Health policy.

        :return: The cluster_health_policy of this ChaosStartedEvent.
        :rtype: str
        """
        return self._cluster_health_policy

    @cluster_health_policy.setter
    def cluster_health_policy(self, cluster_health_policy):
        """Sets the cluster_health_policy of this ChaosStartedEvent.

        Health policy.

        :param cluster_health_policy: The cluster_health_policy of this ChaosStartedEvent.
        :type cluster_health_policy: str
        """
        if cluster_health_policy is None:
            raise ValueError("Invalid value for `cluster_health_policy`, must not be `None`")

        self._cluster_health_policy = cluster_health_policy

    @property
    def included_application_list(self):
        """Gets the included_application_list of this ChaosStartedEvent.

        List of included Applications.

        :return: The included_application_list of this ChaosStartedEvent.
        :rtype: str
        """
        return self._included_application_list

    @included_application_list.setter
    def included_application_list(self, included_application_list):
        """Sets the included_application_list of this ChaosStartedEvent.

        List of included Applications.

        :param included_application_list: The included_application_list of this ChaosStartedEvent.
        :type included_application_list: str
        """
        if included_application_list is None:
            raise ValueError("Invalid value for `included_application_list`, must not be `None`")

        self._included_application_list = included_application_list

    @property
    def included_node_type_list(self):
        """Gets the included_node_type_list of this ChaosStartedEvent.

        List of included Node types.

        :return: The included_node_type_list of this ChaosStartedEvent.
        :rtype: str
        """
        return self._included_node_type_list

    @included_node_type_list.setter
    def included_node_type_list(self, included_node_type_list):
        """Sets the included_node_type_list of this ChaosStartedEvent.

        List of included Node types.

        :param included_node_type_list: The included_node_type_list of this ChaosStartedEvent.
        :type included_node_type_list: str
        """
        if included_node_type_list is None:
            raise ValueError("Invalid value for `included_node_type_list`, must not be `None`")

        self._included_node_type_list = included_node_type_list

    @property
    def max_cluster_stabilization_timeout_in_seconds(self):
        """Gets the max_cluster_stabilization_timeout_in_seconds of this ChaosStartedEvent.

        Maximum timeout for cluster stabilization in seconds.

        :return: The max_cluster_stabilization_timeout_in_seconds of this ChaosStartedEvent.
        :rtype: float
        """
        return self._max_cluster_stabilization_timeout_in_seconds

    @max_cluster_stabilization_timeout_in_seconds.setter
    def max_cluster_stabilization_timeout_in_seconds(self, max_cluster_stabilization_timeout_in_seconds):
        """Sets the max_cluster_stabilization_timeout_in_seconds of this ChaosStartedEvent.

        Maximum timeout for cluster stabilization in seconds.

        :param max_cluster_stabilization_timeout_in_seconds: The max_cluster_stabilization_timeout_in_seconds of this ChaosStartedEvent.
        :type max_cluster_stabilization_timeout_in_seconds: float
        """
        if max_cluster_stabilization_timeout_in_seconds is None:
            raise ValueError("Invalid value for `max_cluster_stabilization_timeout_in_seconds`, must not be `None`")

        self._max_cluster_stabilization_timeout_in_seconds = max_cluster_stabilization_timeout_in_seconds

    @property
    def max_concurrent_faults(self):
        """Gets the max_concurrent_faults of this ChaosStartedEvent.

        Maximum number of concurrent faults.

        :return: The max_concurrent_faults of this ChaosStartedEvent.
        :rtype: int
        """
        return self._max_concurrent_faults

    @max_concurrent_faults.setter
    def max_concurrent_faults(self, max_concurrent_faults):
        """Sets the max_concurrent_faults of this ChaosStartedEvent.

        Maximum number of concurrent faults.

        :param max_concurrent_faults: The max_concurrent_faults of this ChaosStartedEvent.
        :type max_concurrent_faults: int
        """
        if max_concurrent_faults is None:
            raise ValueError("Invalid value for `max_concurrent_faults`, must not be `None`")

        self._max_concurrent_faults = max_concurrent_faults

    @property
    def move_replica_fault_enabled(self):
        """Gets the move_replica_fault_enabled of this ChaosStartedEvent.

        Indicates MoveReplica fault is enabled.

        :return: The move_replica_fault_enabled of this ChaosStartedEvent.
        :rtype: bool
        """
        return self._move_replica_fault_enabled

    @move_replica_fault_enabled.setter
    def move_replica_fault_enabled(self, move_replica_fault_enabled):
        """Sets the move_replica_fault_enabled of this ChaosStartedEvent.

        Indicates MoveReplica fault is enabled.

        :param move_replica_fault_enabled: The move_replica_fault_enabled of this ChaosStartedEvent.
        :type move_replica_fault_enabled: bool
        """
        if move_replica_fault_enabled is None:
            raise ValueError("Invalid value for `move_replica_fault_enabled`, must not be `None`")

        self._move_replica_fault_enabled = move_replica_fault_enabled

    @property
    def time_to_run_in_seconds(self):
        """Gets the time_to_run_in_seconds of this ChaosStartedEvent.

        Time to run in seconds.

        :return: The time_to_run_in_seconds of this ChaosStartedEvent.
        :rtype: float
        """
        return self._time_to_run_in_seconds

    @time_to_run_in_seconds.setter
    def time_to_run_in_seconds(self, time_to_run_in_seconds):
        """Sets the time_to_run_in_seconds of this ChaosStartedEvent.

        Time to run in seconds.

        :param time_to_run_in_seconds: The time_to_run_in_seconds of this ChaosStartedEvent.
        :type time_to_run_in_seconds: float
        """
        if time_to_run_in_seconds is None:
            raise ValueError("Invalid value for `time_to_run_in_seconds`, must not be `None`")

        self._time_to_run_in_seconds = time_to_run_in_seconds

    @property
    def wait_time_between_fautls_in_seconds(self):
        """Gets the wait_time_between_fautls_in_seconds of this ChaosStartedEvent.

        Wait time between faults in seconds.

        :return: The wait_time_between_fautls_in_seconds of this ChaosStartedEvent.
        :rtype: float
        """
        return self._wait_time_between_fautls_in_seconds

    @wait_time_between_fautls_in_seconds.setter
    def wait_time_between_fautls_in_seconds(self, wait_time_between_fautls_in_seconds):
        """Sets the wait_time_between_fautls_in_seconds of this ChaosStartedEvent.

        Wait time between faults in seconds.

        :param wait_time_between_fautls_in_seconds: The wait_time_between_fautls_in_seconds of this ChaosStartedEvent.
        :type wait_time_between_fautls_in_seconds: float
        """
        if wait_time_between_fautls_in_seconds is None:
            raise ValueError("Invalid value for `wait_time_between_fautls_in_seconds`, must not be `None`")

        self._wait_time_between_fautls_in_seconds = wait_time_between_fautls_in_seconds

    @property
    def wait_time_between_iterations_in_seconds(self):
        """Gets the wait_time_between_iterations_in_seconds of this ChaosStartedEvent.

        Wait time between iterations in seconds.

        :return: The wait_time_between_iterations_in_seconds of this ChaosStartedEvent.
        :rtype: float
        """
        return self._wait_time_between_iterations_in_seconds

    @wait_time_between_iterations_in_seconds.setter
    def wait_time_between_iterations_in_seconds(self, wait_time_between_iterations_in_seconds):
        """Sets the wait_time_between_iterations_in_seconds of this ChaosStartedEvent.

        Wait time between iterations in seconds.

        :param wait_time_between_iterations_in_seconds: The wait_time_between_iterations_in_seconds of this ChaosStartedEvent.
        :type wait_time_between_iterations_in_seconds: float
        """
        if wait_time_between_iterations_in_seconds is None:
            raise ValueError("Invalid value for `wait_time_between_iterations_in_seconds`, must not be `None`")

        self._wait_time_between_iterations_in_seconds = wait_time_between_iterations_in_seconds
