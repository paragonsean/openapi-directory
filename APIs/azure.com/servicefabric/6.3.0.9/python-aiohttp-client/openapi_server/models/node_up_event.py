# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fabric_event_kind import FabricEventKind
from openapi_server.models.node_event import NodeEvent
from openapi_server import util


class NodeUpEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_instance_id: str=None, has_correlated_events: bool=None, kind: FabricEventKind=None, time_stamp: datetime=None, node_name: str=None, last_node_down_at: datetime=None, node_instance: int=None):
        """NodeUpEvent - a model defined in OpenAPI

        :param event_instance_id: The event_instance_id of this NodeUpEvent.
        :param has_correlated_events: The has_correlated_events of this NodeUpEvent.
        :param kind: The kind of this NodeUpEvent.
        :param time_stamp: The time_stamp of this NodeUpEvent.
        :param node_name: The node_name of this NodeUpEvent.
        :param last_node_down_at: The last_node_down_at of this NodeUpEvent.
        :param node_instance: The node_instance of this NodeUpEvent.
        """
        self.openapi_types = {
            'event_instance_id': str,
            'has_correlated_events': bool,
            'kind': FabricEventKind,
            'time_stamp': datetime,
            'node_name': str,
            'last_node_down_at': datetime,
            'node_instance': int
        }

        self.attribute_map = {
            'event_instance_id': 'EventInstanceId',
            'has_correlated_events': 'HasCorrelatedEvents',
            'kind': 'Kind',
            'time_stamp': 'TimeStamp',
            'node_name': 'NodeName',
            'last_node_down_at': 'LastNodeDownAt',
            'node_instance': 'NodeInstance'
        }

        self._event_instance_id = event_instance_id
        self._has_correlated_events = has_correlated_events
        self._kind = kind
        self._time_stamp = time_stamp
        self._node_name = node_name
        self._last_node_down_at = last_node_down_at
        self._node_instance = node_instance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeUpEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeUpEvent of this NodeUpEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_instance_id(self):
        """Gets the event_instance_id of this NodeUpEvent.

        The identifier for the FabricEvent instance.

        :return: The event_instance_id of this NodeUpEvent.
        :rtype: str
        """
        return self._event_instance_id

    @event_instance_id.setter
    def event_instance_id(self, event_instance_id):
        """Sets the event_instance_id of this NodeUpEvent.

        The identifier for the FabricEvent instance.

        :param event_instance_id: The event_instance_id of this NodeUpEvent.
        :type event_instance_id: str
        """
        if event_instance_id is None:
            raise ValueError("Invalid value for `event_instance_id`, must not be `None`")

        self._event_instance_id = event_instance_id

    @property
    def has_correlated_events(self):
        """Gets the has_correlated_events of this NodeUpEvent.

        Shows there is existing related events available.

        :return: The has_correlated_events of this NodeUpEvent.
        :rtype: bool
        """
        return self._has_correlated_events

    @has_correlated_events.setter
    def has_correlated_events(self, has_correlated_events):
        """Sets the has_correlated_events of this NodeUpEvent.

        Shows there is existing related events available.

        :param has_correlated_events: The has_correlated_events of this NodeUpEvent.
        :type has_correlated_events: bool
        """

        self._has_correlated_events = has_correlated_events

    @property
    def kind(self):
        """Gets the kind of this NodeUpEvent.


        :return: The kind of this NodeUpEvent.
        :rtype: FabricEventKind
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this NodeUpEvent.


        :param kind: The kind of this NodeUpEvent.
        :type kind: FabricEventKind
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")

        self._kind = kind

    @property
    def time_stamp(self):
        """Gets the time_stamp of this NodeUpEvent.

        The time event was logged.

        :return: The time_stamp of this NodeUpEvent.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this NodeUpEvent.

        The time event was logged.

        :param time_stamp: The time_stamp of this NodeUpEvent.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def node_name(self):
        """Gets the node_name of this NodeUpEvent.

        The name of a Service Fabric node.

        :return: The node_name of this NodeUpEvent.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this NodeUpEvent.

        The name of a Service Fabric node.

        :param node_name: The node_name of this NodeUpEvent.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def last_node_down_at(self):
        """Gets the last_node_down_at of this NodeUpEvent.

        Time when Node was last down.

        :return: The last_node_down_at of this NodeUpEvent.
        :rtype: datetime
        """
        return self._last_node_down_at

    @last_node_down_at.setter
    def last_node_down_at(self, last_node_down_at):
        """Sets the last_node_down_at of this NodeUpEvent.

        Time when Node was last down.

        :param last_node_down_at: The last_node_down_at of this NodeUpEvent.
        :type last_node_down_at: datetime
        """
        if last_node_down_at is None:
            raise ValueError("Invalid value for `last_node_down_at`, must not be `None`")

        self._last_node_down_at = last_node_down_at

    @property
    def node_instance(self):
        """Gets the node_instance of this NodeUpEvent.

        Id of Node instance.

        :return: The node_instance of this NodeUpEvent.
        :rtype: int
        """
        return self._node_instance

    @node_instance.setter
    def node_instance(self, node_instance):
        """Sets the node_instance of this NodeUpEvent.

        Id of Node instance.

        :param node_instance: The node_instance of this NodeUpEvent.
        :type node_instance: int
        """
        if node_instance is None:
            raise ValueError("Invalid value for `node_instance`, must not be `None`")

        self._node_instance = node_instance
