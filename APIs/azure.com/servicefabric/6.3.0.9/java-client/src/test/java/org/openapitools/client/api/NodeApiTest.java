/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ClusterHealthPolicy;
import org.openapitools.client.model.DeactivationIntentDescription;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.HealthInformation;
import org.openapitools.client.model.NodeHealth;
import org.openapitools.client.model.NodeInfo;
import org.openapitools.client.model.NodeLoadInfo;
import org.openapitools.client.model.PagedNodeInfoList;
import org.openapitools.client.model.RestartNodeDescription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NodeApi
 */
@Disabled
public class NodeApiTest {

    private final NodeApi api = new NodeApi();

    /**
     * Deactivate a Service Fabric cluster node with the specified deactivation intent.
     *
     * Deactivate a Service Fabric cluster node with the specified deactivation intent. Once the deactivation is in progress, the deactivation intent can be increased, but not decreased (for example, a node that is deactivated with the Pause intent can be deactivated further with Restart, but not the other way around. Nodes may be reactivated using the Activate a node operation any time after they are deactivated. If the deactivation is not complete, this will cancel the deactivation. A node that goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableNodeTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        DeactivationIntentDescription deactivationIntentDescription = null;
        Long timeout = null;
        api.disableNode(apiVersion, nodeName, deactivationIntentDescription, timeout);
        // TODO: test validations
    }

    /**
     * Activate a Service Fabric cluster node that is currently deactivated.
     *
     * Activates a Service Fabric cluster node that is currently deactivated. Once activated, the node will again become a viable target for placing new replicas, and any deactivated replicas remaining on the node will be reactivated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableNodeTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        Long timeout = null;
        api.enableNode(apiVersion, nodeName, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric node.
     *
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. If the node that you specify by name does not exist in the health store, this returns an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodeHealthTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        Integer eventsHealthStateFilter = null;
        Long timeout = null;
        NodeHealth response = api.getNodeHealth(apiVersion, nodeName, eventsHealthStateFilter, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric node, by using the specified health policy.
     *
     * Gets the health of a Service Fabric node. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicy in the POST body to override the health policies used to evaluate the health. If the node that you specify by name does not exist in the health store, this returns an error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodeHealthUsingPolicyTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        Integer eventsHealthStateFilter = null;
        Long timeout = null;
        ClusterHealthPolicy clusterHealthPolicy = null;
        NodeHealth response = api.getNodeHealthUsingPolicy(apiVersion, nodeName, eventsHealthStateFilter, timeout, clusterHealthPolicy);
        // TODO: test validations
    }

    /**
     * Gets the information about a specific node in the Service Fabric cluster.
     *
     * The response includes the name, status, ID, health, uptime, and other details about the node.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodeInfoTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        Long timeout = null;
        NodeInfo response = api.getNodeInfo(apiVersion, nodeName, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of nodes in the Service Fabric cluster.
     *
     * The response includes the name, status, ID, health, uptime, and other details about the nodes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodeInfoListTest() throws ApiException {
        String apiVersion = null;
        String continuationToken = null;
        String nodeStatusFilter = null;
        Long maxResults = null;
        Long timeout = null;
        PagedNodeInfoList response = api.getNodeInfoList(apiVersion, continuationToken, nodeStatusFilter, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Gets the load information of a Service Fabric node.
     *
     * Retrieves the load information of a Service Fabric node for all the metrics that have load or capacity defined.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodeLoadInfoTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        Long timeout = null;
        NodeLoadInfo response = api.getNodeLoadInfo(apiVersion, nodeName, timeout);
        // TODO: test validations
    }

    /**
     * Notifies Service Fabric that the persisted state on a node has been permanently removed or lost.
     *
     * This implies that it is not possible to recover the persisted state of that node. This generally happens if a hard disk has been wiped clean, or if a hard disk crashes. The node has to be down for this operation to be successful. This operation lets Service Fabric know that the replicas on that node no longer exist, and that Service Fabric should stop waiting for those replicas to come back up. Do not run this cmdlet if the state on the node has not been removed and the node can come back up with its state intact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeNodeStateTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        Long timeout = null;
        api.removeNodeState(apiVersion, nodeName, timeout);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric node.
     *
     * Reports health state of the specified Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway node, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, run GetNodeHealth and check that the report appears in the HealthEvents section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportNodeHealthTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportNodeHealth(apiVersion, nodeName, healthInformation, immediate, timeout);
        // TODO: test validations
    }

    /**
     * Restarts a Service Fabric cluster node.
     *
     * Restarts a Service Fabric cluster node that is already started.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restartNodeTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        RestartNodeDescription restartNodeDescription = null;
        Long timeout = null;
        api.restartNode(apiVersion, nodeName, restartNodeDescription, timeout);
        // TODO: test validations
    }

}
