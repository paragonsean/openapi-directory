/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeployedServiceTypeInfo;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.ServiceTypeInfo;
import org.openapitools.client.model.ServiceTypeManifest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceTypeApi
 */
@Disabled
public class ServiceTypeApiTest {

    private final ServiceTypeApi api = new ServiceTypeApi();

    /**
     * Gets the information about a specified service type of the application deployed on a node in a Service Fabric cluster.
     *
     * Gets the list containing the information about a specific service type from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package. Each entry represents one activation of a service type, differentiated by the activation ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServiceTypeInfoByNameTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        String serviceTypeName = null;
        String serviceManifestName = null;
        Long timeout = null;
        List<DeployedServiceTypeInfo> response = api.getDeployedServiceTypeInfoByName(apiVersion, nodeName, applicationId, serviceTypeName, serviceManifestName, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster.
     *
     * Gets the list containing the information about service types from the applications deployed on a node in a Service Fabric cluster. The response includes the name of the service type, its registration status, the code package that registered it and activation ID of the service package.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedServiceTypeInfoListTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        String serviceManifestName = null;
        Long timeout = null;
        List<DeployedServiceTypeInfo> response = api.getDeployedServiceTypeInfoList(apiVersion, nodeName, applicationId, serviceManifestName, timeout);
        // TODO: test validations
    }

    /**
     * Gets the manifest describing a service type.
     *
     * Gets the manifest describing a service type. The response contains the service manifest XML as a string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceManifestTest() throws ApiException {
        String apiVersion = null;
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        String serviceManifestName = null;
        Long timeout = null;
        ServiceTypeManifest response = api.getServiceManifest(apiVersion, applicationTypeName, applicationTypeVersion, serviceManifestName, timeout);
        // TODO: test validations
    }

    /**
     * Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster.
     *
     * Gets the information about a specific service type that is supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned. A 204 response is returned if the specified service type is not found in the cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceTypeInfoByNameTest() throws ApiException {
        String apiVersion = null;
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        String serviceTypeName = null;
        Long timeout = null;
        ServiceTypeInfo response = api.getServiceTypeInfoByName(apiVersion, applicationTypeName, applicationTypeVersion, serviceTypeName, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster.
     *
     * Gets the list containing the information about service types that are supported by a provisioned application type in a Service Fabric cluster. The provided application type must exist. Otherwise, a 404 status is returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceTypeInfoListTest() throws ApiException {
        String apiVersion = null;
        String applicationTypeName = null;
        String applicationTypeVersion = null;
        Long timeout = null;
        List<ServiceTypeInfo> response = api.getServiceTypeInfoList(apiVersion, applicationTypeName, applicationTypeVersion, timeout);
        // TODO: test validations
    }

}
