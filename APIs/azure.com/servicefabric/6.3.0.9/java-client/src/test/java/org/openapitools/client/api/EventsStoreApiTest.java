/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationEvent;
import org.openapitools.client.model.ClusterEvent;
import org.openapitools.client.model.ContainerInstanceEvent;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.FabricEvent;
import org.openapitools.client.model.NodeEvent;
import org.openapitools.client.model.PartitionEvent;
import org.openapitools.client.model.ReplicaEvent;
import org.openapitools.client.model.ServiceEvent;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsStoreApi
 */
@Disabled
public class EventsStoreApiTest {

    private final EventsStoreApi api = new EventsStoreApi();

    /**
     * Gets an Application-related events.
     *
     * The response is list of ApplicationEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationEventListTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ApplicationEvent> response = api.getApplicationEventList(apiVersion, applicationId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all Applications-related events.
     *
     * The response is list of ApplicationEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationsEventListTest() throws ApiException {
        String apiVersion = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ApplicationEvent> response = api.getApplicationsEventList(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all Cluster-related events.
     *
     * The response is list of ClusterEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClusterEventListTest() throws ApiException {
        String apiVersion = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ClusterEvent> response = api.getClusterEventList(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all Containers-related events.
     *
     * The response is list of ContainerInstanceEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainersEventListTest() throws ApiException {
        String apiVersion = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ContainerInstanceEvent> response = api.getContainersEventList(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all correlated events for a given event.
     *
     * The response is list of FabricEvents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCorrelatedEventListTest() throws ApiException {
        String apiVersion = null;
        String eventInstanceId = null;
        Long timeout = null;
        List<FabricEvent> response = api.getCorrelatedEventList(apiVersion, eventInstanceId, timeout);
        // TODO: test validations
    }

    /**
     * Gets a Node-related events.
     *
     * The response is list of NodeEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodeEventListTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<NodeEvent> response = api.getNodeEventList(apiVersion, nodeName, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all Nodes-related Events.
     *
     * The response is list of NodeEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNodesEventListTest() throws ApiException {
        String apiVersion = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<NodeEvent> response = api.getNodesEventList(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets a Partition-related events.
     *
     * The response is list of PartitionEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionEventListTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<PartitionEvent> response = api.getPartitionEventList(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets a Partition Replica-related events.
     *
     * The response is list of ReplicaEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionReplicaEventListTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String replicaId = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ReplicaEvent> response = api.getPartitionReplicaEventList(apiVersion, partitionId, replicaId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all Replicas-related events for a Partition.
     *
     * The response is list of ReplicaEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionReplicasEventListTest() throws ApiException {
        String apiVersion = null;
        UUID partitionId = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ReplicaEvent> response = api.getPartitionReplicasEventList(apiVersion, partitionId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all Partitions-related events.
     *
     * The response is list of PartitionEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartitionsEventListTest() throws ApiException {
        String apiVersion = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<PartitionEvent> response = api.getPartitionsEventList(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets a Service-related events.
     *
     * The response is list of ServiceEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceEventListTest() throws ApiException {
        String apiVersion = null;
        String serviceId = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ServiceEvent> response = api.getServiceEventList(apiVersion, serviceId, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

    /**
     * Gets all Services-related events.
     *
     * The response is list of ServiceEvent objects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesEventListTest() throws ApiException {
        String apiVersion = null;
        String startTimeUtc = null;
        String endTimeUtc = null;
        Long timeout = null;
        String eventsTypesFilter = null;
        Boolean excludeAnalysisEvents = null;
        Boolean skipCorrelationLookup = null;
        List<ServiceEvent> response = api.getServicesEventList(apiVersion, startTimeUtc, endTimeUtc, timeout, eventsTypesFilter, excludeAnalysisEvents, skipCorrelationLookup);
        // TODO: test validations
    }

}
