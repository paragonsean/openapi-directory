/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationDescription;
import org.openapitools.client.model.ApplicationHealth;
import org.openapitools.client.model.ApplicationHealthPolicy;
import org.openapitools.client.model.ApplicationInfo;
import org.openapitools.client.model.ApplicationLoadInfo;
import org.openapitools.client.model.ApplicationUpgradeDescription;
import org.openapitools.client.model.ApplicationUpgradeProgressInfo;
import org.openapitools.client.model.ApplicationUpgradeUpdateDescription;
import org.openapitools.client.model.DeployedApplicationHealth;
import org.openapitools.client.model.DeployedApplicationInfo;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.HealthInformation;
import org.openapitools.client.model.PagedApplicationInfoList;
import org.openapitools.client.model.PagedDeployedApplicationInfoList;
import org.openapitools.client.model.ResumeApplicationUpgradeDescription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Disabled
public class ApplicationApiTest {

    private final ApplicationApi api = new ApplicationApi();

    /**
     * Creates a Service Fabric application.
     *
     * Creates a Service Fabric application using the specified description.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        String apiVersion = null;
        ApplicationDescription applicationDescription = null;
        Long timeout = null;
        api.createApplication(apiVersion, applicationDescription, timeout);
        // TODO: test validations
    }

    /**
     * Deletes an existing Service Fabric application.
     *
     * An application must be created before it can be deleted. Deleting an application will delete all services that are part of that application. By default, Service Fabric will try to close service replicas in a graceful manner and then delete the service. However, if a service is having issues closing the replica gracefully, the delete operation may take a long time or get stuck. Use the optional ForceRemove flag to skip the graceful close sequence and forcefully delete the application and all of its services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        Boolean forceRemove = null;
        Long timeout = null;
        api.deleteApplication(apiVersion, applicationId, forceRemove, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of the service fabric application.
     *
     * Returns the heath state of the service fabric application. The response reports either Ok, Error or Warning health state. If the entity is not found in the health store, it will return Error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationHealthTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        Integer eventsHealthStateFilter = null;
        Integer deployedApplicationsHealthStateFilter = null;
        Integer servicesHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        ApplicationHealth response = api.getApplicationHealth(applicationId, apiVersion, eventsHealthStateFilter, deployedApplicationsHealthStateFilter, servicesHealthStateFilter, excludeHealthStatistics, timeout);
        // TODO: test validations
    }

    /**
     * Gets the health of a Service Fabric application using the specified policy.
     *
     * Gets the health of a Service Fabric application. Use EventsHealthStateFilter to filter the collection of health events reported on the node based on the health state. Use ClusterHealthPolicies to override the health policies used to evaluate the health.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationHealthUsingPolicyTest() throws ApiException {
        String applicationId = null;
        String apiVersion = null;
        Integer eventsHealthStateFilter = null;
        Integer deployedApplicationsHealthStateFilter = null;
        Integer servicesHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        ApplicationHealthPolicy applicationHealthPolicy = null;
        ApplicationHealth response = api.getApplicationHealthUsingPolicy(applicationId, apiVersion, eventsHealthStateFilter, deployedApplicationsHealthStateFilter, servicesHealthStateFilter, excludeHealthStatistics, timeout, applicationHealthPolicy);
        // TODO: test validations
    }

    /**
     * Gets information about a Service Fabric application.
     *
     * Returns the information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, type, status, parameters, and other details about the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationInfoTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        Boolean excludeApplicationParameters = null;
        Long timeout = null;
        ApplicationInfo response = api.getApplicationInfo(apiVersion, applicationId, excludeApplicationParameters, timeout);
        // TODO: test validations
    }

    /**
     * Gets the list of applications created in the Service Fabric cluster that match the specified filters.
     *
     * Gets the information about the applications that were created or in the process of being created in the Service Fabric cluster and match the specified filters. The response includes the name, type, status, parameters, and other details about the application. If the applications do not fit in a page, one page of results is returned as well as a continuation token, which can be used to get the next page. Filters ApplicationTypeName and ApplicationDefinitionKindFilter cannot be specified at the same time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationInfoListTest() throws ApiException {
        String apiVersion = null;
        Integer applicationDefinitionKindFilter = null;
        String applicationTypeName = null;
        Boolean excludeApplicationParameters = null;
        String continuationToken = null;
        Long maxResults = null;
        Long timeout = null;
        PagedApplicationInfoList response = api.getApplicationInfoList(apiVersion, applicationDefinitionKindFilter, applicationTypeName, excludeApplicationParameters, continuationToken, maxResults, timeout);
        // TODO: test validations
    }

    /**
     * Gets load information about a Service Fabric application.
     *
     * Returns the load information about the application that was created or in the process of being created in the Service Fabric cluster and whose name matches the one specified as the parameter. The response includes the name, minimum nodes, maximum nodes, the number of nodes the application is occupying currently, and application load metric information about the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationLoadInfoTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        Long timeout = null;
        ApplicationLoadInfo response = api.getApplicationLoadInfo(apiVersion, applicationId, timeout);
        // TODO: test validations
    }

    /**
     * Gets details for the latest upgrade performed on this application.
     *
     * Returns information about the state of the latest application upgrade along with details to aid debugging application health issues.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationUpgradeTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        Long timeout = null;
        ApplicationUpgradeProgressInfo response = api.getApplicationUpgrade(apiVersion, applicationId, timeout);
        // TODO: test validations
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node.
     *
     * Gets the information about health of an application deployed on a Service Fabric node. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedApplicationHealthTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        Integer eventsHealthStateFilter = null;
        Integer deployedServicePackagesHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        DeployedApplicationHealth response = api.getDeployedApplicationHealth(apiVersion, nodeName, applicationId, eventsHealthStateFilter, deployedServicePackagesHealthStateFilter, excludeHealthStatistics, timeout);
        // TODO: test validations
    }

    /**
     * Gets the information about health of an application deployed on a Service Fabric node. using the specified policy.
     *
     * Gets the information about health of an application deployed on a Service Fabric node using the specified policy. Use EventsHealthStateFilter to optionally filter for the collection of HealthEvent objects reported on the deployed application based on health state. Use DeployedServicePackagesHealthStateFilter to optionally filter for DeployedServicePackageHealth children based on health state. Use ApplicationHealthPolicy to optionally override the health policies used to evaluate the health. This API only uses &#39;ConsiderWarningAsError&#39; field of the ApplicationHealthPolicy. The rest of the fields are ignored while evaluating the health of the deployed application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedApplicationHealthUsingPolicyTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        Integer eventsHealthStateFilter = null;
        Integer deployedServicePackagesHealthStateFilter = null;
        Boolean excludeHealthStatistics = null;
        Long timeout = null;
        ApplicationHealthPolicy applicationHealthPolicy = null;
        DeployedApplicationHealth response = api.getDeployedApplicationHealthUsingPolicy(apiVersion, nodeName, applicationId, eventsHealthStateFilter, deployedServicePackagesHealthStateFilter, excludeHealthStatistics, timeout, applicationHealthPolicy);
        // TODO: test validations
    }

    /**
     * Gets the information about an application deployed on a Service Fabric node.
     *
     * This query returns system application information if the application ID provided is for system application. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedApplicationInfoTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        Long timeout = null;
        Boolean includeHealthState = null;
        DeployedApplicationInfo response = api.getDeployedApplicationInfo(apiVersion, nodeName, applicationId, timeout, includeHealthState);
        // TODO: test validations
    }

    /**
     * Gets the list of applications deployed on a Service Fabric node.
     *
     * Gets the list of applications deployed on a Service Fabric node. The results do not include information about deployed system applications unless explicitly queried for by ID. Results encompass deployed applications in active, activating, and downloading states. This query requires that the node name corresponds to a node on the cluster. The query fails if the provided node name does not point to any active Service Fabric nodes on the cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployedApplicationInfoListTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        Long timeout = null;
        Boolean includeHealthState = null;
        String continuationToken = null;
        Long maxResults = null;
        PagedDeployedApplicationInfoList response = api.getDeployedApplicationInfoList(apiVersion, nodeName, timeout, includeHealthState, continuationToken, maxResults);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric application.
     *
     * Reports health state of the specified Service Fabric application. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway Application, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get application health and check that the report appears in the HealthEvents section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportApplicationHealthTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportApplicationHealth(apiVersion, applicationId, healthInformation, immediate, timeout);
        // TODO: test validations
    }

    /**
     * Sends a health report on the Service Fabric application deployed on a Service Fabric node.
     *
     * Reports health state of the application deployed on a Service Fabric node. The report must contain the information about the source of the health report and property on which it is reported. The report is sent to a Service Fabric gateway Service, which forwards to the health store. The report may be accepted by the gateway, but rejected by the health store after extra validation. For example, the health store may reject the report because of an invalid parameter, like a stale sequence number. To see whether the report was applied in the health store, get deployed application health and check that the report appears in the HealthEvents section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportDeployedApplicationHealthTest() throws ApiException {
        String apiVersion = null;
        String nodeName = null;
        String applicationId = null;
        HealthInformation healthInformation = null;
        Boolean immediate = null;
        Long timeout = null;
        api.reportDeployedApplicationHealth(apiVersion, nodeName, applicationId, healthInformation, immediate, timeout);
        // TODO: test validations
    }

    /**
     * Resumes upgrading an application in the Service Fabric cluster.
     *
     * Resumes an unmonitored manual Service Fabric application upgrade. Service Fabric upgrades one upgrade domain at a time. For unmonitored manual upgrades, after Service Fabric finishes an upgrade domain, it waits for you to call this API before proceeding to the next upgrade domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeApplicationUpgradeTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        ResumeApplicationUpgradeDescription resumeApplicationUpgradeDescription = null;
        Long timeout = null;
        api.resumeApplicationUpgrade(apiVersion, applicationId, resumeApplicationUpgradeDescription, timeout);
        // TODO: test validations
    }

    /**
     * Starts rolling back the currently on-going upgrade of an application in the Service Fabric cluster.
     *
     * Starts rolling back the current application upgrade to the previous version. This API can only be used to roll back the current in-progress upgrade that is rolling forward to new version. If the application is not currently being upgraded use StartApplicationUpgrade API to upgrade it to desired version, including rolling back to a previous version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackApplicationUpgradeTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        Long timeout = null;
        api.rollbackApplicationUpgrade(apiVersion, applicationId, timeout);
        // TODO: test validations
    }

    /**
     * Starts upgrading an application in the Service Fabric cluster.
     *
     * Validates the supplied application upgrade parameters and starts upgrading the application if the parameters are valid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startApplicationUpgradeTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        ApplicationUpgradeDescription applicationUpgradeDescription = null;
        Long timeout = null;
        api.startApplicationUpgrade(apiVersion, applicationId, applicationUpgradeDescription, timeout);
        // TODO: test validations
    }

    /**
     * Updates an ongoing application upgrade in the Service Fabric cluster.
     *
     * Updates the parameters of an ongoing application upgrade from the ones specified at the time of starting the application upgrade. This may be required to mitigate stuck application upgrades due to incorrect parameters or issues in the application to make progress.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationUpgradeTest() throws ApiException {
        String apiVersion = null;
        String applicationId = null;
        ApplicationUpgradeUpdateDescription applicationUpgradeUpdateDescription = null;
        Long timeout = null;
        api.updateApplicationUpgrade(apiVersion, applicationId, applicationUpgradeUpdateDescription, timeout);
        // TODO: test validations
    }

}
