/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplicationResourceDescription;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.PagedServiceResourceDescriptionList;
import org.openapitools.client.model.PagedServiceResourceReplicaDescriptionList;
import org.openapitools.client.model.ServiceResourceDescription;
import org.openapitools.client.model.ServiceResourceReplicaDescription;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationResourceApi
 */
@Disabled
public class ApplicationResourceApiTest {

    private final ApplicationResourceApi api = new ApplicationResourceApi();

    /**
     * Creates or updates an application resource.
     *
     * Creates an application with the specified name and description. If an application with the same name already exists, then its description are updated to the one indicated in this request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationResourceTest() throws ApiException {
        String apiVersion = null;
        String applicationResourceName = null;
        ApplicationResourceDescription applicationResourceDescription = null;
        api.createApplicationResource(apiVersion, applicationResourceName, applicationResourceDescription);
        // TODO: test validations
    }

    /**
     * Deletes the specified application.
     *
     * Deletes the application identified by the name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationResourceTest() throws ApiException {
        String apiVersion = null;
        String applicationResourceName = null;
        api.deleteApplicationResource(apiVersion, applicationResourceName);
        // TODO: test validations
    }

    /**
     * Gets the application with the given name.
     *
     * Gets the application with the given name. This includes the information about the application&#39;s services and other runtime information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApplicationResourceTest() throws ApiException {
        String apiVersion = null;
        String applicationResourceName = null;
        ApplicationResourceDescription response = api.getApplicationResource(apiVersion, applicationResourceName);
        // TODO: test validations
    }

    /**
     * Gets a specific replica of a given service in an application resource.
     *
     * Gets the information about the specified replica of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicaTest() throws ApiException {
        String apiVersion = null;
        String applicationResourceName = null;
        String serviceResourceName = null;
        String replicaName = null;
        ServiceResourceReplicaDescription response = api.getReplica(apiVersion, applicationResourceName, serviceResourceName, replicaName);
        // TODO: test validations
    }

    /**
     * Gets replicas of a given service in an application resource.
     *
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicasTest() throws ApiException {
        String apiVersion = null;
        String applicationResourceName = null;
        String serviceResourceName = null;
        PagedServiceResourceReplicaDescriptionList response = api.getReplicas(apiVersion, applicationResourceName, serviceResourceName);
        // TODO: test validations
    }

    /**
     * Gets the description of the specified service in an application resource.
     *
     * Gets the description of the service resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServiceTest() throws ApiException {
        String apiVersion = null;
        String applicationResourceName = null;
        String serviceResourceName = null;
        ServiceResourceDescription response = api.getService(apiVersion, applicationResourceName, serviceResourceName);
        // TODO: test validations
    }

    /**
     * Gets all the services in the application resource.
     *
     * The operation returns the service descriptions of all the services in the application resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServicesTest() throws ApiException {
        String apiVersion = null;
        String applicationResourceName = null;
        PagedServiceResourceDescriptionList response = api.getServices(apiVersion, applicationResourceName);
        // TODO: test validations
    }

}
