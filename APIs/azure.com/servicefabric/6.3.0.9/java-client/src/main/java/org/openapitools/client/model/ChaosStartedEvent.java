/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ClusterEvent;
import org.openapitools.client.model.FabricEventKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Chaos Started event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChaosStartedEvent extends ClusterEvent {
  public static final String SERIALIZED_NAME_CHAOS_CONTEXT = "ChaosContext";
  @SerializedName(SERIALIZED_NAME_CHAOS_CONTEXT)
  private String chaosContext;

  public static final String SERIALIZED_NAME_CLUSTER_HEALTH_POLICY = "ClusterHealthPolicy";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HEALTH_POLICY)
  private String clusterHealthPolicy;

  public static final String SERIALIZED_NAME_INCLUDED_APPLICATION_LIST = "IncludedApplicationList";
  @SerializedName(SERIALIZED_NAME_INCLUDED_APPLICATION_LIST)
  private String includedApplicationList;

  public static final String SERIALIZED_NAME_INCLUDED_NODE_TYPE_LIST = "IncludedNodeTypeList";
  @SerializedName(SERIALIZED_NAME_INCLUDED_NODE_TYPE_LIST)
  private String includedNodeTypeList;

  public static final String SERIALIZED_NAME_MAX_CLUSTER_STABILIZATION_TIMEOUT_IN_SECONDS = "MaxClusterStabilizationTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_CLUSTER_STABILIZATION_TIMEOUT_IN_SECONDS)
  private Double maxClusterStabilizationTimeoutInSeconds;

  public static final String SERIALIZED_NAME_MAX_CONCURRENT_FAULTS = "MaxConcurrentFaults";
  @SerializedName(SERIALIZED_NAME_MAX_CONCURRENT_FAULTS)
  private Long maxConcurrentFaults;

  public static final String SERIALIZED_NAME_MOVE_REPLICA_FAULT_ENABLED = "MoveReplicaFaultEnabled";
  @SerializedName(SERIALIZED_NAME_MOVE_REPLICA_FAULT_ENABLED)
  private Boolean moveReplicaFaultEnabled;

  public static final String SERIALIZED_NAME_TIME_TO_RUN_IN_SECONDS = "TimeToRunInSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_TO_RUN_IN_SECONDS)
  private Double timeToRunInSeconds;

  public static final String SERIALIZED_NAME_WAIT_TIME_BETWEEN_FAUTLS_IN_SECONDS = "WaitTimeBetweenFautlsInSeconds";
  @SerializedName(SERIALIZED_NAME_WAIT_TIME_BETWEEN_FAUTLS_IN_SECONDS)
  private Double waitTimeBetweenFautlsInSeconds;

  public static final String SERIALIZED_NAME_WAIT_TIME_BETWEEN_ITERATIONS_IN_SECONDS = "WaitTimeBetweenIterationsInSeconds";
  @SerializedName(SERIALIZED_NAME_WAIT_TIME_BETWEEN_ITERATIONS_IN_SECONDS)
  private Double waitTimeBetweenIterationsInSeconds;

  public ChaosStartedEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ChaosStartedEvent chaosContext(String chaosContext) {
    this.chaosContext = chaosContext;
    return this;
  }

  /**
   * Chaos Context.
   * @return chaosContext
   */
  @javax.annotation.Nonnull
  public String getChaosContext() {
    return chaosContext;
  }

  public void setChaosContext(String chaosContext) {
    this.chaosContext = chaosContext;
  }


  public ChaosStartedEvent clusterHealthPolicy(String clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
    return this;
  }

  /**
   * Health policy.
   * @return clusterHealthPolicy
   */
  @javax.annotation.Nonnull
  public String getClusterHealthPolicy() {
    return clusterHealthPolicy;
  }

  public void setClusterHealthPolicy(String clusterHealthPolicy) {
    this.clusterHealthPolicy = clusterHealthPolicy;
  }


  public ChaosStartedEvent includedApplicationList(String includedApplicationList) {
    this.includedApplicationList = includedApplicationList;
    return this;
  }

  /**
   * List of included Applications.
   * @return includedApplicationList
   */
  @javax.annotation.Nonnull
  public String getIncludedApplicationList() {
    return includedApplicationList;
  }

  public void setIncludedApplicationList(String includedApplicationList) {
    this.includedApplicationList = includedApplicationList;
  }


  public ChaosStartedEvent includedNodeTypeList(String includedNodeTypeList) {
    this.includedNodeTypeList = includedNodeTypeList;
    return this;
  }

  /**
   * List of included Node types.
   * @return includedNodeTypeList
   */
  @javax.annotation.Nonnull
  public String getIncludedNodeTypeList() {
    return includedNodeTypeList;
  }

  public void setIncludedNodeTypeList(String includedNodeTypeList) {
    this.includedNodeTypeList = includedNodeTypeList;
  }


  public ChaosStartedEvent maxClusterStabilizationTimeoutInSeconds(Double maxClusterStabilizationTimeoutInSeconds) {
    this.maxClusterStabilizationTimeoutInSeconds = maxClusterStabilizationTimeoutInSeconds;
    return this;
  }

  /**
   * Maximum timeout for cluster stabilization in seconds.
   * @return maxClusterStabilizationTimeoutInSeconds
   */
  @javax.annotation.Nonnull
  public Double getMaxClusterStabilizationTimeoutInSeconds() {
    return maxClusterStabilizationTimeoutInSeconds;
  }

  public void setMaxClusterStabilizationTimeoutInSeconds(Double maxClusterStabilizationTimeoutInSeconds) {
    this.maxClusterStabilizationTimeoutInSeconds = maxClusterStabilizationTimeoutInSeconds;
  }


  public ChaosStartedEvent maxConcurrentFaults(Long maxConcurrentFaults) {
    this.maxConcurrentFaults = maxConcurrentFaults;
    return this;
  }

  /**
   * Maximum number of concurrent faults.
   * @return maxConcurrentFaults
   */
  @javax.annotation.Nonnull
  public Long getMaxConcurrentFaults() {
    return maxConcurrentFaults;
  }

  public void setMaxConcurrentFaults(Long maxConcurrentFaults) {
    this.maxConcurrentFaults = maxConcurrentFaults;
  }


  public ChaosStartedEvent moveReplicaFaultEnabled(Boolean moveReplicaFaultEnabled) {
    this.moveReplicaFaultEnabled = moveReplicaFaultEnabled;
    return this;
  }

  /**
   * Indicates MoveReplica fault is enabled.
   * @return moveReplicaFaultEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getMoveReplicaFaultEnabled() {
    return moveReplicaFaultEnabled;
  }

  public void setMoveReplicaFaultEnabled(Boolean moveReplicaFaultEnabled) {
    this.moveReplicaFaultEnabled = moveReplicaFaultEnabled;
  }


  public ChaosStartedEvent timeToRunInSeconds(Double timeToRunInSeconds) {
    this.timeToRunInSeconds = timeToRunInSeconds;
    return this;
  }

  /**
   * Time to run in seconds.
   * @return timeToRunInSeconds
   */
  @javax.annotation.Nonnull
  public Double getTimeToRunInSeconds() {
    return timeToRunInSeconds;
  }

  public void setTimeToRunInSeconds(Double timeToRunInSeconds) {
    this.timeToRunInSeconds = timeToRunInSeconds;
  }


  public ChaosStartedEvent waitTimeBetweenFautlsInSeconds(Double waitTimeBetweenFautlsInSeconds) {
    this.waitTimeBetweenFautlsInSeconds = waitTimeBetweenFautlsInSeconds;
    return this;
  }

  /**
   * Wait time between faults in seconds.
   * @return waitTimeBetweenFautlsInSeconds
   */
  @javax.annotation.Nonnull
  public Double getWaitTimeBetweenFautlsInSeconds() {
    return waitTimeBetweenFautlsInSeconds;
  }

  public void setWaitTimeBetweenFautlsInSeconds(Double waitTimeBetweenFautlsInSeconds) {
    this.waitTimeBetweenFautlsInSeconds = waitTimeBetweenFautlsInSeconds;
  }


  public ChaosStartedEvent waitTimeBetweenIterationsInSeconds(Double waitTimeBetweenIterationsInSeconds) {
    this.waitTimeBetweenIterationsInSeconds = waitTimeBetweenIterationsInSeconds;
    return this;
  }

  /**
   * Wait time between iterations in seconds.
   * @return waitTimeBetweenIterationsInSeconds
   */
  @javax.annotation.Nonnull
  public Double getWaitTimeBetweenIterationsInSeconds() {
    return waitTimeBetweenIterationsInSeconds;
  }

  public void setWaitTimeBetweenIterationsInSeconds(Double waitTimeBetweenIterationsInSeconds) {
    this.waitTimeBetweenIterationsInSeconds = waitTimeBetweenIterationsInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChaosStartedEvent chaosStartedEvent = (ChaosStartedEvent) o;
    return Objects.equals(this.chaosContext, chaosStartedEvent.chaosContext) &&
        Objects.equals(this.clusterHealthPolicy, chaosStartedEvent.clusterHealthPolicy) &&
        Objects.equals(this.includedApplicationList, chaosStartedEvent.includedApplicationList) &&
        Objects.equals(this.includedNodeTypeList, chaosStartedEvent.includedNodeTypeList) &&
        Objects.equals(this.maxClusterStabilizationTimeoutInSeconds, chaosStartedEvent.maxClusterStabilizationTimeoutInSeconds) &&
        Objects.equals(this.maxConcurrentFaults, chaosStartedEvent.maxConcurrentFaults) &&
        Objects.equals(this.moveReplicaFaultEnabled, chaosStartedEvent.moveReplicaFaultEnabled) &&
        Objects.equals(this.timeToRunInSeconds, chaosStartedEvent.timeToRunInSeconds) &&
        Objects.equals(this.waitTimeBetweenFautlsInSeconds, chaosStartedEvent.waitTimeBetweenFautlsInSeconds) &&
        Objects.equals(this.waitTimeBetweenIterationsInSeconds, chaosStartedEvent.waitTimeBetweenIterationsInSeconds) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chaosContext, clusterHealthPolicy, includedApplicationList, includedNodeTypeList, maxClusterStabilizationTimeoutInSeconds, maxConcurrentFaults, moveReplicaFaultEnabled, timeToRunInSeconds, waitTimeBetweenFautlsInSeconds, waitTimeBetweenIterationsInSeconds, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChaosStartedEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    chaosContext: ").append(toIndentedString(chaosContext)).append("\n");
    sb.append("    clusterHealthPolicy: ").append(toIndentedString(clusterHealthPolicy)).append("\n");
    sb.append("    includedApplicationList: ").append(toIndentedString(includedApplicationList)).append("\n");
    sb.append("    includedNodeTypeList: ").append(toIndentedString(includedNodeTypeList)).append("\n");
    sb.append("    maxClusterStabilizationTimeoutInSeconds: ").append(toIndentedString(maxClusterStabilizationTimeoutInSeconds)).append("\n");
    sb.append("    maxConcurrentFaults: ").append(toIndentedString(maxConcurrentFaults)).append("\n");
    sb.append("    moveReplicaFaultEnabled: ").append(toIndentedString(moveReplicaFaultEnabled)).append("\n");
    sb.append("    timeToRunInSeconds: ").append(toIndentedString(timeToRunInSeconds)).append("\n");
    sb.append("    waitTimeBetweenFautlsInSeconds: ").append(toIndentedString(waitTimeBetweenFautlsInSeconds)).append("\n");
    sb.append("    waitTimeBetweenIterationsInSeconds: ").append(toIndentedString(waitTimeBetweenIterationsInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");
    openapiFields.add("ChaosContext");
    openapiFields.add("ClusterHealthPolicy");
    openapiFields.add("IncludedApplicationList");
    openapiFields.add("IncludedNodeTypeList");
    openapiFields.add("MaxClusterStabilizationTimeoutInSeconds");
    openapiFields.add("MaxConcurrentFaults");
    openapiFields.add("MoveReplicaFaultEnabled");
    openapiFields.add("TimeToRunInSeconds");
    openapiFields.add("WaitTimeBetweenFautlsInSeconds");
    openapiFields.add("WaitTimeBetweenIterationsInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ChaosContext");
    openapiRequiredFields.add("ClusterHealthPolicy");
    openapiRequiredFields.add("IncludedApplicationList");
    openapiRequiredFields.add("IncludedNodeTypeList");
    openapiRequiredFields.add("MaxClusterStabilizationTimeoutInSeconds");
    openapiRequiredFields.add("MaxConcurrentFaults");
    openapiRequiredFields.add("MoveReplicaFaultEnabled");
    openapiRequiredFields.add("TimeToRunInSeconds");
    openapiRequiredFields.add("WaitTimeBetweenFautlsInSeconds");
    openapiRequiredFields.add("WaitTimeBetweenIterationsInSeconds");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChaosStartedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChaosStartedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChaosStartedEvent is not found in the empty JSON string", ChaosStartedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChaosStartedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChaosStartedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChaosStartedEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChaosStartedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChaosStartedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChaosStartedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChaosStartedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ChaosStartedEvent>() {
           @Override
           public void write(JsonWriter out, ChaosStartedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChaosStartedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChaosStartedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChaosStartedEvent
   * @throws IOException if the JSON string is invalid with respect to ChaosStartedEvent
   */
  public static ChaosStartedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChaosStartedEvent.class);
  }

  /**
   * Convert an instance of ChaosStartedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

