/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ApplicationEvent;
import org.openapitools.client.model.FabricEventKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container Deactivated event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerDeactivatedEvent extends ApplicationEvent {
  public static final String SERIALIZED_NAME_CODE_PACKAGE_NAME = "CodePackageName";
  @SerializedName(SERIALIZED_NAME_CODE_PACKAGE_NAME)
  private String codePackageName;

  public static final String SERIALIZED_NAME_CONTAINER_NAME = "ContainerName";
  @SerializedName(SERIALIZED_NAME_CONTAINER_NAME)
  private String containerName;

  public static final String SERIALIZED_NAME_ENTRY_POINT_TYPE = "EntryPointType";
  @SerializedName(SERIALIZED_NAME_ENTRY_POINT_TYPE)
  private String entryPointType;

  public static final String SERIALIZED_NAME_EXIT_CODE = "ExitCode";
  @SerializedName(SERIALIZED_NAME_EXIT_CODE)
  private Long exitCode;

  public static final String SERIALIZED_NAME_HOST_ID = "HostId";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_IMAGE_NAME = "ImageName";
  @SerializedName(SERIALIZED_NAME_IMAGE_NAME)
  private String imageName;

  public static final String SERIALIZED_NAME_IS_EXCLUSIVE = "IsExclusive";
  @SerializedName(SERIALIZED_NAME_IS_EXCLUSIVE)
  private Boolean isExclusive;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "ServiceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID = "ServicePackageActivationId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID)
  private String servicePackageActivationId;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_NAME = "ServicePackageName";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_NAME)
  private String servicePackageName;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_UNEXPECTED_TERMINATION = "UnexpectedTermination";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_TERMINATION)
  private Boolean unexpectedTermination;

  public ContainerDeactivatedEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public ContainerDeactivatedEvent codePackageName(String codePackageName) {
    this.codePackageName = codePackageName;
    return this;
  }

  /**
   * Name of Code package.
   * @return codePackageName
   */
  @javax.annotation.Nonnull
  public String getCodePackageName() {
    return codePackageName;
  }

  public void setCodePackageName(String codePackageName) {
    this.codePackageName = codePackageName;
  }


  public ContainerDeactivatedEvent containerName(String containerName) {
    this.containerName = containerName;
    return this;
  }

  /**
   * Name of Container.
   * @return containerName
   */
  @javax.annotation.Nonnull
  public String getContainerName() {
    return containerName;
  }

  public void setContainerName(String containerName) {
    this.containerName = containerName;
  }


  public ContainerDeactivatedEvent entryPointType(String entryPointType) {
    this.entryPointType = entryPointType;
    return this;
  }

  /**
   * Type of EntryPoint.
   * @return entryPointType
   */
  @javax.annotation.Nonnull
  public String getEntryPointType() {
    return entryPointType;
  }

  public void setEntryPointType(String entryPointType) {
    this.entryPointType = entryPointType;
  }


  public ContainerDeactivatedEvent exitCode(Long exitCode) {
    this.exitCode = exitCode;
    return this;
  }

  /**
   * Exit code of process.
   * @return exitCode
   */
  @javax.annotation.Nonnull
  public Long getExitCode() {
    return exitCode;
  }

  public void setExitCode(Long exitCode) {
    this.exitCode = exitCode;
  }


  public ContainerDeactivatedEvent hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

  /**
   * Host Id.
   * @return hostId
   */
  @javax.annotation.Nonnull
  public String getHostId() {
    return hostId;
  }

  public void setHostId(String hostId) {
    this.hostId = hostId;
  }


  public ContainerDeactivatedEvent imageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  /**
   * Name of Container image.
   * @return imageName
   */
  @javax.annotation.Nonnull
  public String getImageName() {
    return imageName;
  }

  public void setImageName(String imageName) {
    this.imageName = imageName;
  }


  public ContainerDeactivatedEvent isExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
    return this;
  }

  /**
   * Indicates IsExclusive flag.
   * @return isExclusive
   */
  @javax.annotation.Nonnull
  public Boolean getIsExclusive() {
    return isExclusive;
  }

  public void setIsExclusive(Boolean isExclusive) {
    this.isExclusive = isExclusive;
  }


  public ContainerDeactivatedEvent serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Name of Service.
   * @return serviceName
   */
  @javax.annotation.Nonnull
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ContainerDeactivatedEvent servicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
    return this;
  }

  /**
   * Activation Id of Service package.
   * @return servicePackageActivationId
   */
  @javax.annotation.Nonnull
  public String getServicePackageActivationId() {
    return servicePackageActivationId;
  }

  public void setServicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
  }


  public ContainerDeactivatedEvent servicePackageName(String servicePackageName) {
    this.servicePackageName = servicePackageName;
    return this;
  }

  /**
   * Name of Service package.
   * @return servicePackageName
   */
  @javax.annotation.Nonnull
  public String getServicePackageName() {
    return servicePackageName;
  }

  public void setServicePackageName(String servicePackageName) {
    this.servicePackageName = servicePackageName;
  }


  public ContainerDeactivatedEvent startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time of process.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ContainerDeactivatedEvent unexpectedTermination(Boolean unexpectedTermination) {
    this.unexpectedTermination = unexpectedTermination;
    return this;
  }

  /**
   * Indicates if termination is unexpected.
   * @return unexpectedTermination
   */
  @javax.annotation.Nonnull
  public Boolean getUnexpectedTermination() {
    return unexpectedTermination;
  }

  public void setUnexpectedTermination(Boolean unexpectedTermination) {
    this.unexpectedTermination = unexpectedTermination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerDeactivatedEvent containerDeactivatedEvent = (ContainerDeactivatedEvent) o;
    return Objects.equals(this.codePackageName, containerDeactivatedEvent.codePackageName) &&
        Objects.equals(this.containerName, containerDeactivatedEvent.containerName) &&
        Objects.equals(this.entryPointType, containerDeactivatedEvent.entryPointType) &&
        Objects.equals(this.exitCode, containerDeactivatedEvent.exitCode) &&
        Objects.equals(this.hostId, containerDeactivatedEvent.hostId) &&
        Objects.equals(this.imageName, containerDeactivatedEvent.imageName) &&
        Objects.equals(this.isExclusive, containerDeactivatedEvent.isExclusive) &&
        Objects.equals(this.serviceName, containerDeactivatedEvent.serviceName) &&
        Objects.equals(this.servicePackageActivationId, containerDeactivatedEvent.servicePackageActivationId) &&
        Objects.equals(this.servicePackageName, containerDeactivatedEvent.servicePackageName) &&
        Objects.equals(this.startTime, containerDeactivatedEvent.startTime) &&
        Objects.equals(this.unexpectedTermination, containerDeactivatedEvent.unexpectedTermination) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codePackageName, containerName, entryPointType, exitCode, hostId, imageName, isExclusive, serviceName, servicePackageActivationId, servicePackageName, startTime, unexpectedTermination, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerDeactivatedEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    codePackageName: ").append(toIndentedString(codePackageName)).append("\n");
    sb.append("    containerName: ").append(toIndentedString(containerName)).append("\n");
    sb.append("    entryPointType: ").append(toIndentedString(entryPointType)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    imageName: ").append(toIndentedString(imageName)).append("\n");
    sb.append("    isExclusive: ").append(toIndentedString(isExclusive)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    servicePackageActivationId: ").append(toIndentedString(servicePackageActivationId)).append("\n");
    sb.append("    servicePackageName: ").append(toIndentedString(servicePackageName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    unexpectedTermination: ").append(toIndentedString(unexpectedTermination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");
    openapiFields.add("ApplicationId");
    openapiFields.add("CodePackageName");
    openapiFields.add("ContainerName");
    openapiFields.add("EntryPointType");
    openapiFields.add("ExitCode");
    openapiFields.add("HostId");
    openapiFields.add("ImageName");
    openapiFields.add("IsExclusive");
    openapiFields.add("ServiceName");
    openapiFields.add("ServicePackageActivationId");
    openapiFields.add("ServicePackageName");
    openapiFields.add("StartTime");
    openapiFields.add("UnexpectedTermination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CodePackageName");
    openapiRequiredFields.add("ContainerName");
    openapiRequiredFields.add("EntryPointType");
    openapiRequiredFields.add("ExitCode");
    openapiRequiredFields.add("HostId");
    openapiRequiredFields.add("ImageName");
    openapiRequiredFields.add("IsExclusive");
    openapiRequiredFields.add("ServiceName");
    openapiRequiredFields.add("ServicePackageActivationId");
    openapiRequiredFields.add("ServicePackageName");
    openapiRequiredFields.add("StartTime");
    openapiRequiredFields.add("UnexpectedTermination");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
    openapiRequiredFields.add("ApplicationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerDeactivatedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerDeactivatedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerDeactivatedEvent is not found in the empty JSON string", ContainerDeactivatedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerDeactivatedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerDeactivatedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainerDeactivatedEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerDeactivatedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerDeactivatedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerDeactivatedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerDeactivatedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerDeactivatedEvent>() {
           @Override
           public void write(JsonWriter out, ContainerDeactivatedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerDeactivatedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerDeactivatedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerDeactivatedEvent
   * @throws IOException if the JSON string is invalid with respect to ContainerDeactivatedEvent
   */
  public static ContainerDeactivatedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerDeactivatedEvent.class);
  }

  /**
   * Convert an instance of ContainerDeactivatedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

