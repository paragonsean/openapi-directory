/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Service state summary of Service Fabric Upgrade Orchestration Service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeOrchestrationServiceStateSummary {
  public static final String SERIALIZED_NAME_CURRENT_CODE_VERSION = "CurrentCodeVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_CODE_VERSION)
  private String currentCodeVersion;

  public static final String SERIALIZED_NAME_CURRENT_MANIFEST_VERSION = "CurrentManifestVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_MANIFEST_VERSION)
  private String currentManifestVersion;

  public static final String SERIALIZED_NAME_PENDING_UPGRADE_TYPE = "PendingUpgradeType";
  @SerializedName(SERIALIZED_NAME_PENDING_UPGRADE_TYPE)
  private String pendingUpgradeType;

  public static final String SERIALIZED_NAME_TARGET_CODE_VERSION = "TargetCodeVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_CODE_VERSION)
  private String targetCodeVersion;

  public static final String SERIALIZED_NAME_TARGET_MANIFEST_VERSION = "TargetManifestVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_MANIFEST_VERSION)
  private String targetManifestVersion;

  public UpgradeOrchestrationServiceStateSummary() {
  }

  public UpgradeOrchestrationServiceStateSummary currentCodeVersion(String currentCodeVersion) {
    this.currentCodeVersion = currentCodeVersion;
    return this;
  }

  /**
   * The current code version of the cluster.
   * @return currentCodeVersion
   */
  @javax.annotation.Nullable
  public String getCurrentCodeVersion() {
    return currentCodeVersion;
  }

  public void setCurrentCodeVersion(String currentCodeVersion) {
    this.currentCodeVersion = currentCodeVersion;
  }


  public UpgradeOrchestrationServiceStateSummary currentManifestVersion(String currentManifestVersion) {
    this.currentManifestVersion = currentManifestVersion;
    return this;
  }

  /**
   * The current manifest version of the cluster.
   * @return currentManifestVersion
   */
  @javax.annotation.Nullable
  public String getCurrentManifestVersion() {
    return currentManifestVersion;
  }

  public void setCurrentManifestVersion(String currentManifestVersion) {
    this.currentManifestVersion = currentManifestVersion;
  }


  public UpgradeOrchestrationServiceStateSummary pendingUpgradeType(String pendingUpgradeType) {
    this.pendingUpgradeType = pendingUpgradeType;
    return this;
  }

  /**
   * The type of the pending upgrade of the cluster.
   * @return pendingUpgradeType
   */
  @javax.annotation.Nullable
  public String getPendingUpgradeType() {
    return pendingUpgradeType;
  }

  public void setPendingUpgradeType(String pendingUpgradeType) {
    this.pendingUpgradeType = pendingUpgradeType;
  }


  public UpgradeOrchestrationServiceStateSummary targetCodeVersion(String targetCodeVersion) {
    this.targetCodeVersion = targetCodeVersion;
    return this;
  }

  /**
   * The target code version of  the cluster.
   * @return targetCodeVersion
   */
  @javax.annotation.Nullable
  public String getTargetCodeVersion() {
    return targetCodeVersion;
  }

  public void setTargetCodeVersion(String targetCodeVersion) {
    this.targetCodeVersion = targetCodeVersion;
  }


  public UpgradeOrchestrationServiceStateSummary targetManifestVersion(String targetManifestVersion) {
    this.targetManifestVersion = targetManifestVersion;
    return this;
  }

  /**
   * The target manifest version of the cluster.
   * @return targetManifestVersion
   */
  @javax.annotation.Nullable
  public String getTargetManifestVersion() {
    return targetManifestVersion;
  }

  public void setTargetManifestVersion(String targetManifestVersion) {
    this.targetManifestVersion = targetManifestVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeOrchestrationServiceStateSummary upgradeOrchestrationServiceStateSummary = (UpgradeOrchestrationServiceStateSummary) o;
    return Objects.equals(this.currentCodeVersion, upgradeOrchestrationServiceStateSummary.currentCodeVersion) &&
        Objects.equals(this.currentManifestVersion, upgradeOrchestrationServiceStateSummary.currentManifestVersion) &&
        Objects.equals(this.pendingUpgradeType, upgradeOrchestrationServiceStateSummary.pendingUpgradeType) &&
        Objects.equals(this.targetCodeVersion, upgradeOrchestrationServiceStateSummary.targetCodeVersion) &&
        Objects.equals(this.targetManifestVersion, upgradeOrchestrationServiceStateSummary.targetManifestVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentCodeVersion, currentManifestVersion, pendingUpgradeType, targetCodeVersion, targetManifestVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeOrchestrationServiceStateSummary {\n");
    sb.append("    currentCodeVersion: ").append(toIndentedString(currentCodeVersion)).append("\n");
    sb.append("    currentManifestVersion: ").append(toIndentedString(currentManifestVersion)).append("\n");
    sb.append("    pendingUpgradeType: ").append(toIndentedString(pendingUpgradeType)).append("\n");
    sb.append("    targetCodeVersion: ").append(toIndentedString(targetCodeVersion)).append("\n");
    sb.append("    targetManifestVersion: ").append(toIndentedString(targetManifestVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentCodeVersion");
    openapiFields.add("CurrentManifestVersion");
    openapiFields.add("PendingUpgradeType");
    openapiFields.add("TargetCodeVersion");
    openapiFields.add("TargetManifestVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeOrchestrationServiceStateSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeOrchestrationServiceStateSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeOrchestrationServiceStateSummary is not found in the empty JSON string", UpgradeOrchestrationServiceStateSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeOrchestrationServiceStateSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeOrchestrationServiceStateSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CurrentCodeVersion") != null && !jsonObj.get("CurrentCodeVersion").isJsonNull()) && !jsonObj.get("CurrentCodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentCodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentCodeVersion").toString()));
      }
      if ((jsonObj.get("CurrentManifestVersion") != null && !jsonObj.get("CurrentManifestVersion").isJsonNull()) && !jsonObj.get("CurrentManifestVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CurrentManifestVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CurrentManifestVersion").toString()));
      }
      if ((jsonObj.get("PendingUpgradeType") != null && !jsonObj.get("PendingUpgradeType").isJsonNull()) && !jsonObj.get("PendingUpgradeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PendingUpgradeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PendingUpgradeType").toString()));
      }
      if ((jsonObj.get("TargetCodeVersion") != null && !jsonObj.get("TargetCodeVersion").isJsonNull()) && !jsonObj.get("TargetCodeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetCodeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetCodeVersion").toString()));
      }
      if ((jsonObj.get("TargetManifestVersion") != null && !jsonObj.get("TargetManifestVersion").isJsonNull()) && !jsonObj.get("TargetManifestVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetManifestVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TargetManifestVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeOrchestrationServiceStateSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeOrchestrationServiceStateSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeOrchestrationServiceStateSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeOrchestrationServiceStateSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeOrchestrationServiceStateSummary>() {
           @Override
           public void write(JsonWriter out, UpgradeOrchestrationServiceStateSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeOrchestrationServiceStateSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeOrchestrationServiceStateSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeOrchestrationServiceStateSummary
   * @throws IOException if the JSON string is invalid with respect to UpgradeOrchestrationServiceStateSummary
   */
  public static UpgradeOrchestrationServiceStateSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeOrchestrationServiceStateSummary.class);
  }

  /**
   * Convert an instance of UpgradeOrchestrationServiceStateSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

