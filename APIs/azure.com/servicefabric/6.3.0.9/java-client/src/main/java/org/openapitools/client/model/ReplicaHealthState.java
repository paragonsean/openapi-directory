/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.ServiceKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a base class for stateful service replica or stateless service instance health state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicaHealthState {
  public static final String SERIALIZED_NAME_AGGREGATED_HEALTH_STATE = "AggregatedHealthState";
  @SerializedName(SERIALIZED_NAME_AGGREGATED_HEALTH_STATE)
  private HealthState aggregatedHealthState;

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "ServiceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private ServiceKind serviceKind;

  public ReplicaHealthState() {
  }

  public ReplicaHealthState aggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
    return this;
  }

  /**
   * Get aggregatedHealthState
   * @return aggregatedHealthState
   */
  @javax.annotation.Nullable
  public HealthState getAggregatedHealthState() {
    return aggregatedHealthState;
  }

  public void setAggregatedHealthState(HealthState aggregatedHealthState) {
    this.aggregatedHealthState = aggregatedHealthState;
  }


  public ReplicaHealthState partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public ReplicaHealthState serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nullable
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaHealthState replicaHealthState = (ReplicaHealthState) o;
    return Objects.equals(this.aggregatedHealthState, replicaHealthState.aggregatedHealthState) &&
        Objects.equals(this.partitionId, replicaHealthState.partitionId) &&
        Objects.equals(this.serviceKind, replicaHealthState.serviceKind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregatedHealthState, partitionId, serviceKind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaHealthState {\n");
    sb.append("    aggregatedHealthState: ").append(toIndentedString(aggregatedHealthState)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AggregatedHealthState");
    openapiFields.add("PartitionId");
    openapiFields.add("ServiceKind");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaHealthState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaHealthState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaHealthState is not found in the empty JSON string", ReplicaHealthState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaHealthState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaHealthState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AggregatedHealthState`
      if (jsonObj.get("AggregatedHealthState") != null && !jsonObj.get("AggregatedHealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("AggregatedHealthState"));
      }
      if ((jsonObj.get("PartitionId") != null && !jsonObj.get("PartitionId").isJsonNull()) && !jsonObj.get("PartitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionId").toString()));
      }
      // validate the optional field `ServiceKind`
      if (jsonObj.get("ServiceKind") != null && !jsonObj.get("ServiceKind").isJsonNull()) {
        ServiceKind.validateJsonElement(jsonObj.get("ServiceKind"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaHealthState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaHealthState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaHealthState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaHealthState.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaHealthState>() {
           @Override
           public void write(JsonWriter out, ReplicaHealthState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaHealthState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaHealthState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaHealthState
   * @throws IOException if the JSON string is invalid with respect to ReplicaHealthState
   */
  public static ReplicaHealthState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaHealthState.class);
  }

  /**
   * Convert an instance of ReplicaHealthState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

