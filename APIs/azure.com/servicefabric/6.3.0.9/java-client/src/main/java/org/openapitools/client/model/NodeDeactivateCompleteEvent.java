/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.FabricEventKind;
import org.openapitools.client.model.NodeEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Node Deactivate Complete event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeDeactivateCompleteEvent extends NodeEvent {
  public static final String SERIALIZED_NAME_BATCH_IDS_WITH_DEACTIVATE_INTENT = "BatchIdsWithDeactivateIntent";
  @SerializedName(SERIALIZED_NAME_BATCH_IDS_WITH_DEACTIVATE_INTENT)
  private String batchIdsWithDeactivateIntent;

  public static final String SERIALIZED_NAME_EFFECTIVE_DEACTIVATE_INTENT = "EffectiveDeactivateIntent";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DEACTIVATE_INTENT)
  private String effectiveDeactivateIntent;

  public static final String SERIALIZED_NAME_NODE_INSTANCE = "NodeInstance";
  @SerializedName(SERIALIZED_NAME_NODE_INSTANCE)
  private Long nodeInstance;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public NodeDeactivateCompleteEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public NodeDeactivateCompleteEvent batchIdsWithDeactivateIntent(String batchIdsWithDeactivateIntent) {
    this.batchIdsWithDeactivateIntent = batchIdsWithDeactivateIntent;
    return this;
  }

  /**
   * Batch Ids.
   * @return batchIdsWithDeactivateIntent
   */
  @javax.annotation.Nonnull
  public String getBatchIdsWithDeactivateIntent() {
    return batchIdsWithDeactivateIntent;
  }

  public void setBatchIdsWithDeactivateIntent(String batchIdsWithDeactivateIntent) {
    this.batchIdsWithDeactivateIntent = batchIdsWithDeactivateIntent;
  }


  public NodeDeactivateCompleteEvent effectiveDeactivateIntent(String effectiveDeactivateIntent) {
    this.effectiveDeactivateIntent = effectiveDeactivateIntent;
    return this;
  }

  /**
   * Describes deactivate intent.
   * @return effectiveDeactivateIntent
   */
  @javax.annotation.Nonnull
  public String getEffectiveDeactivateIntent() {
    return effectiveDeactivateIntent;
  }

  public void setEffectiveDeactivateIntent(String effectiveDeactivateIntent) {
    this.effectiveDeactivateIntent = effectiveDeactivateIntent;
  }


  public NodeDeactivateCompleteEvent nodeInstance(Long nodeInstance) {
    this.nodeInstance = nodeInstance;
    return this;
  }

  /**
   * Id of Node instance.
   * @return nodeInstance
   */
  @javax.annotation.Nonnull
  public Long getNodeInstance() {
    return nodeInstance;
  }

  public void setNodeInstance(Long nodeInstance) {
    this.nodeInstance = nodeInstance;
  }


  public NodeDeactivateCompleteEvent startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time.
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeDeactivateCompleteEvent nodeDeactivateCompleteEvent = (NodeDeactivateCompleteEvent) o;
    return Objects.equals(this.batchIdsWithDeactivateIntent, nodeDeactivateCompleteEvent.batchIdsWithDeactivateIntent) &&
        Objects.equals(this.effectiveDeactivateIntent, nodeDeactivateCompleteEvent.effectiveDeactivateIntent) &&
        Objects.equals(this.nodeInstance, nodeDeactivateCompleteEvent.nodeInstance) &&
        Objects.equals(this.startTime, nodeDeactivateCompleteEvent.startTime) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchIdsWithDeactivateIntent, effectiveDeactivateIntent, nodeInstance, startTime, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeDeactivateCompleteEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    batchIdsWithDeactivateIntent: ").append(toIndentedString(batchIdsWithDeactivateIntent)).append("\n");
    sb.append("    effectiveDeactivateIntent: ").append(toIndentedString(effectiveDeactivateIntent)).append("\n");
    sb.append("    nodeInstance: ").append(toIndentedString(nodeInstance)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");
    openapiFields.add("NodeName");
    openapiFields.add("BatchIdsWithDeactivateIntent");
    openapiFields.add("EffectiveDeactivateIntent");
    openapiFields.add("NodeInstance");
    openapiFields.add("StartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BatchIdsWithDeactivateIntent");
    openapiRequiredFields.add("EffectiveDeactivateIntent");
    openapiRequiredFields.add("NodeInstance");
    openapiRequiredFields.add("StartTime");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
    openapiRequiredFields.add("NodeName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeDeactivateCompleteEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeDeactivateCompleteEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeDeactivateCompleteEvent is not found in the empty JSON string", NodeDeactivateCompleteEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeDeactivateCompleteEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeDeactivateCompleteEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NodeDeactivateCompleteEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeDeactivateCompleteEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeDeactivateCompleteEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeDeactivateCompleteEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeDeactivateCompleteEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeDeactivateCompleteEvent>() {
           @Override
           public void write(JsonWriter out, NodeDeactivateCompleteEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeDeactivateCompleteEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeDeactivateCompleteEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeDeactivateCompleteEvent
   * @throws IOException if the JSON string is invalid with respect to NodeDeactivateCompleteEvent
   */
  public static NodeDeactivateCompleteEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeDeactivateCompleteEvent.class);
  }

  /**
   * Convert an instance of NodeDeactivateCompleteEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

