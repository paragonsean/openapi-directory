/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplicationHealthPolicies;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the parameters for a standalone cluster configuration upgrade.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterConfigurationUpgradeDescription {
  public static final String SERIALIZED_NAME_APPLICATION_HEALTH_POLICIES = "ApplicationHealthPolicies";
  @SerializedName(SERIALIZED_NAME_APPLICATION_HEALTH_POLICIES)
  private ApplicationHealthPolicies applicationHealthPolicies;

  public static final String SERIALIZED_NAME_CLUSTER_CONFIG = "ClusterConfig";
  @SerializedName(SERIALIZED_NAME_CLUSTER_CONFIG)
  private String clusterConfig;

  public static final String SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT = "HealthCheckRetryTimeout";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_RETRY_TIMEOUT)
  private String healthCheckRetryTimeout = "PT0H0M0S";

  public static final String SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION_IN_SECONDS = "HealthCheckStableDurationInSeconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_STABLE_DURATION_IN_SECONDS)
  private String healthCheckStableDurationInSeconds = "PT0H0M0S";

  public static final String SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION_IN_SECONDS = "HealthCheckWaitDurationInSeconds";
  @SerializedName(SERIALIZED_NAME_HEALTH_CHECK_WAIT_DURATION_IN_SECONDS)
  private String healthCheckWaitDurationInSeconds = "PT0H0M0S";

  public static final String SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_NODES = "MaxPercentDeltaUnhealthyNodes";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_DELTA_UNHEALTHY_NODES)
  private Integer maxPercentDeltaUnhealthyNodes;

  public static final String SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_APPLICATIONS = "MaxPercentUnhealthyApplications";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_APPLICATIONS)
  private Integer maxPercentUnhealthyApplications;

  public static final String SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_NODES = "MaxPercentUnhealthyNodes";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UNHEALTHY_NODES)
  private Integer maxPercentUnhealthyNodes;

  public static final String SERIALIZED_NAME_MAX_PERCENT_UPGRADE_DOMAIN_DELTA_UNHEALTHY_NODES = "MaxPercentUpgradeDomainDeltaUnhealthyNodes";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENT_UPGRADE_DOMAIN_DELTA_UNHEALTHY_NODES)
  private Integer maxPercentUpgradeDomainDeltaUnhealthyNodes;

  public static final String SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT_IN_SECONDS = "UpgradeDomainTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DOMAIN_TIMEOUT_IN_SECONDS)
  private String upgradeDomainTimeoutInSeconds = "PT0H0M0S";

  public static final String SERIALIZED_NAME_UPGRADE_TIMEOUT_IN_SECONDS = "UpgradeTimeoutInSeconds";
  @SerializedName(SERIALIZED_NAME_UPGRADE_TIMEOUT_IN_SECONDS)
  private String upgradeTimeoutInSeconds = "PT0H0M0S";

  public ClusterConfigurationUpgradeDescription() {
  }

  public ClusterConfigurationUpgradeDescription applicationHealthPolicies(ApplicationHealthPolicies applicationHealthPolicies) {
    this.applicationHealthPolicies = applicationHealthPolicies;
    return this;
  }

  /**
   * Get applicationHealthPolicies
   * @return applicationHealthPolicies
   */
  @javax.annotation.Nullable
  public ApplicationHealthPolicies getApplicationHealthPolicies() {
    return applicationHealthPolicies;
  }

  public void setApplicationHealthPolicies(ApplicationHealthPolicies applicationHealthPolicies) {
    this.applicationHealthPolicies = applicationHealthPolicies;
  }


  public ClusterConfigurationUpgradeDescription clusterConfig(String clusterConfig) {
    this.clusterConfig = clusterConfig;
    return this;
  }

  /**
   * The cluster configuration.
   * @return clusterConfig
   */
  @javax.annotation.Nonnull
  public String getClusterConfig() {
    return clusterConfig;
  }

  public void setClusterConfig(String clusterConfig) {
    this.clusterConfig = clusterConfig;
  }


  public ClusterConfigurationUpgradeDescription healthCheckRetryTimeout(String healthCheckRetryTimeout) {
    this.healthCheckRetryTimeout = healthCheckRetryTimeout;
    return this;
  }

  /**
   * The length of time between attempts to perform a health checks if the application or cluster is not healthy.
   * @return healthCheckRetryTimeout
   */
  @javax.annotation.Nullable
  public String getHealthCheckRetryTimeout() {
    return healthCheckRetryTimeout;
  }

  public void setHealthCheckRetryTimeout(String healthCheckRetryTimeout) {
    this.healthCheckRetryTimeout = healthCheckRetryTimeout;
  }


  public ClusterConfigurationUpgradeDescription healthCheckStableDurationInSeconds(String healthCheckStableDurationInSeconds) {
    this.healthCheckStableDurationInSeconds = healthCheckStableDurationInSeconds;
    return this;
  }

  /**
   * The length of time that the application or cluster must remain healthy.
   * @return healthCheckStableDurationInSeconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckStableDurationInSeconds() {
    return healthCheckStableDurationInSeconds;
  }

  public void setHealthCheckStableDurationInSeconds(String healthCheckStableDurationInSeconds) {
    this.healthCheckStableDurationInSeconds = healthCheckStableDurationInSeconds;
  }


  public ClusterConfigurationUpgradeDescription healthCheckWaitDurationInSeconds(String healthCheckWaitDurationInSeconds) {
    this.healthCheckWaitDurationInSeconds = healthCheckWaitDurationInSeconds;
    return this;
  }

  /**
   * The length of time to wait after completing an upgrade domain before starting the health checks process.
   * @return healthCheckWaitDurationInSeconds
   */
  @javax.annotation.Nullable
  public String getHealthCheckWaitDurationInSeconds() {
    return healthCheckWaitDurationInSeconds;
  }

  public void setHealthCheckWaitDurationInSeconds(String healthCheckWaitDurationInSeconds) {
    this.healthCheckWaitDurationInSeconds = healthCheckWaitDurationInSeconds;
  }


  public ClusterConfigurationUpgradeDescription maxPercentDeltaUnhealthyNodes(Integer maxPercentDeltaUnhealthyNodes) {
    this.maxPercentDeltaUnhealthyNodes = maxPercentDeltaUnhealthyNodes;
    return this;
  }

  /**
   * The maximum allowed percentage of delta health degradation during the upgrade. Allowed values are integer values from zero to 100.
   * @return maxPercentDeltaUnhealthyNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentDeltaUnhealthyNodes() {
    return maxPercentDeltaUnhealthyNodes;
  }

  public void setMaxPercentDeltaUnhealthyNodes(Integer maxPercentDeltaUnhealthyNodes) {
    this.maxPercentDeltaUnhealthyNodes = maxPercentDeltaUnhealthyNodes;
  }


  public ClusterConfigurationUpgradeDescription maxPercentUnhealthyApplications(Integer maxPercentUnhealthyApplications) {
    this.maxPercentUnhealthyApplications = maxPercentUnhealthyApplications;
    return this;
  }

  /**
   * The maximum allowed percentage of unhealthy applications during the upgrade. Allowed values are integer values from zero to 100.
   * @return maxPercentUnhealthyApplications
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUnhealthyApplications() {
    return maxPercentUnhealthyApplications;
  }

  public void setMaxPercentUnhealthyApplications(Integer maxPercentUnhealthyApplications) {
    this.maxPercentUnhealthyApplications = maxPercentUnhealthyApplications;
  }


  public ClusterConfigurationUpgradeDescription maxPercentUnhealthyNodes(Integer maxPercentUnhealthyNodes) {
    this.maxPercentUnhealthyNodes = maxPercentUnhealthyNodes;
    return this;
  }

  /**
   * The maximum allowed percentage of unhealthy nodes during the upgrade. Allowed values are integer values from zero to 100.
   * @return maxPercentUnhealthyNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUnhealthyNodes() {
    return maxPercentUnhealthyNodes;
  }

  public void setMaxPercentUnhealthyNodes(Integer maxPercentUnhealthyNodes) {
    this.maxPercentUnhealthyNodes = maxPercentUnhealthyNodes;
  }


  public ClusterConfigurationUpgradeDescription maxPercentUpgradeDomainDeltaUnhealthyNodes(Integer maxPercentUpgradeDomainDeltaUnhealthyNodes) {
    this.maxPercentUpgradeDomainDeltaUnhealthyNodes = maxPercentUpgradeDomainDeltaUnhealthyNodes;
    return this;
  }

  /**
   * The maximum allowed percentage of upgrade domain delta health degradation during the upgrade. Allowed values are integer values from zero to 100.
   * @return maxPercentUpgradeDomainDeltaUnhealthyNodes
   */
  @javax.annotation.Nullable
  public Integer getMaxPercentUpgradeDomainDeltaUnhealthyNodes() {
    return maxPercentUpgradeDomainDeltaUnhealthyNodes;
  }

  public void setMaxPercentUpgradeDomainDeltaUnhealthyNodes(Integer maxPercentUpgradeDomainDeltaUnhealthyNodes) {
    this.maxPercentUpgradeDomainDeltaUnhealthyNodes = maxPercentUpgradeDomainDeltaUnhealthyNodes;
  }


  public ClusterConfigurationUpgradeDescription upgradeDomainTimeoutInSeconds(String upgradeDomainTimeoutInSeconds) {
    this.upgradeDomainTimeoutInSeconds = upgradeDomainTimeoutInSeconds;
    return this;
  }

  /**
   * The timeout for the upgrade domain.
   * @return upgradeDomainTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public String getUpgradeDomainTimeoutInSeconds() {
    return upgradeDomainTimeoutInSeconds;
  }

  public void setUpgradeDomainTimeoutInSeconds(String upgradeDomainTimeoutInSeconds) {
    this.upgradeDomainTimeoutInSeconds = upgradeDomainTimeoutInSeconds;
  }


  public ClusterConfigurationUpgradeDescription upgradeTimeoutInSeconds(String upgradeTimeoutInSeconds) {
    this.upgradeTimeoutInSeconds = upgradeTimeoutInSeconds;
    return this;
  }

  /**
   * The upgrade timeout.
   * @return upgradeTimeoutInSeconds
   */
  @javax.annotation.Nullable
  public String getUpgradeTimeoutInSeconds() {
    return upgradeTimeoutInSeconds;
  }

  public void setUpgradeTimeoutInSeconds(String upgradeTimeoutInSeconds) {
    this.upgradeTimeoutInSeconds = upgradeTimeoutInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterConfigurationUpgradeDescription clusterConfigurationUpgradeDescription = (ClusterConfigurationUpgradeDescription) o;
    return Objects.equals(this.applicationHealthPolicies, clusterConfigurationUpgradeDescription.applicationHealthPolicies) &&
        Objects.equals(this.clusterConfig, clusterConfigurationUpgradeDescription.clusterConfig) &&
        Objects.equals(this.healthCheckRetryTimeout, clusterConfigurationUpgradeDescription.healthCheckRetryTimeout) &&
        Objects.equals(this.healthCheckStableDurationInSeconds, clusterConfigurationUpgradeDescription.healthCheckStableDurationInSeconds) &&
        Objects.equals(this.healthCheckWaitDurationInSeconds, clusterConfigurationUpgradeDescription.healthCheckWaitDurationInSeconds) &&
        Objects.equals(this.maxPercentDeltaUnhealthyNodes, clusterConfigurationUpgradeDescription.maxPercentDeltaUnhealthyNodes) &&
        Objects.equals(this.maxPercentUnhealthyApplications, clusterConfigurationUpgradeDescription.maxPercentUnhealthyApplications) &&
        Objects.equals(this.maxPercentUnhealthyNodes, clusterConfigurationUpgradeDescription.maxPercentUnhealthyNodes) &&
        Objects.equals(this.maxPercentUpgradeDomainDeltaUnhealthyNodes, clusterConfigurationUpgradeDescription.maxPercentUpgradeDomainDeltaUnhealthyNodes) &&
        Objects.equals(this.upgradeDomainTimeoutInSeconds, clusterConfigurationUpgradeDescription.upgradeDomainTimeoutInSeconds) &&
        Objects.equals(this.upgradeTimeoutInSeconds, clusterConfigurationUpgradeDescription.upgradeTimeoutInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationHealthPolicies, clusterConfig, healthCheckRetryTimeout, healthCheckStableDurationInSeconds, healthCheckWaitDurationInSeconds, maxPercentDeltaUnhealthyNodes, maxPercentUnhealthyApplications, maxPercentUnhealthyNodes, maxPercentUpgradeDomainDeltaUnhealthyNodes, upgradeDomainTimeoutInSeconds, upgradeTimeoutInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterConfigurationUpgradeDescription {\n");
    sb.append("    applicationHealthPolicies: ").append(toIndentedString(applicationHealthPolicies)).append("\n");
    sb.append("    clusterConfig: ").append(toIndentedString(clusterConfig)).append("\n");
    sb.append("    healthCheckRetryTimeout: ").append(toIndentedString(healthCheckRetryTimeout)).append("\n");
    sb.append("    healthCheckStableDurationInSeconds: ").append(toIndentedString(healthCheckStableDurationInSeconds)).append("\n");
    sb.append("    healthCheckWaitDurationInSeconds: ").append(toIndentedString(healthCheckWaitDurationInSeconds)).append("\n");
    sb.append("    maxPercentDeltaUnhealthyNodes: ").append(toIndentedString(maxPercentDeltaUnhealthyNodes)).append("\n");
    sb.append("    maxPercentUnhealthyApplications: ").append(toIndentedString(maxPercentUnhealthyApplications)).append("\n");
    sb.append("    maxPercentUnhealthyNodes: ").append(toIndentedString(maxPercentUnhealthyNodes)).append("\n");
    sb.append("    maxPercentUpgradeDomainDeltaUnhealthyNodes: ").append(toIndentedString(maxPercentUpgradeDomainDeltaUnhealthyNodes)).append("\n");
    sb.append("    upgradeDomainTimeoutInSeconds: ").append(toIndentedString(upgradeDomainTimeoutInSeconds)).append("\n");
    sb.append("    upgradeTimeoutInSeconds: ").append(toIndentedString(upgradeTimeoutInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApplicationHealthPolicies");
    openapiFields.add("ClusterConfig");
    openapiFields.add("HealthCheckRetryTimeout");
    openapiFields.add("HealthCheckStableDurationInSeconds");
    openapiFields.add("HealthCheckWaitDurationInSeconds");
    openapiFields.add("MaxPercentDeltaUnhealthyNodes");
    openapiFields.add("MaxPercentUnhealthyApplications");
    openapiFields.add("MaxPercentUnhealthyNodes");
    openapiFields.add("MaxPercentUpgradeDomainDeltaUnhealthyNodes");
    openapiFields.add("UpgradeDomainTimeoutInSeconds");
    openapiFields.add("UpgradeTimeoutInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClusterConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterConfigurationUpgradeDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterConfigurationUpgradeDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterConfigurationUpgradeDescription is not found in the empty JSON string", ClusterConfigurationUpgradeDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterConfigurationUpgradeDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterConfigurationUpgradeDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ClusterConfigurationUpgradeDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApplicationHealthPolicies`
      if (jsonObj.get("ApplicationHealthPolicies") != null && !jsonObj.get("ApplicationHealthPolicies").isJsonNull()) {
        ApplicationHealthPolicies.validateJsonElement(jsonObj.get("ApplicationHealthPolicies"));
      }
      if (!jsonObj.get("ClusterConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClusterConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClusterConfig").toString()));
      }
      if ((jsonObj.get("HealthCheckRetryTimeout") != null && !jsonObj.get("HealthCheckRetryTimeout").isJsonNull()) && !jsonObj.get("HealthCheckRetryTimeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckRetryTimeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckRetryTimeout").toString()));
      }
      if ((jsonObj.get("HealthCheckStableDurationInSeconds") != null && !jsonObj.get("HealthCheckStableDurationInSeconds").isJsonNull()) && !jsonObj.get("HealthCheckStableDurationInSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckStableDurationInSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckStableDurationInSeconds").toString()));
      }
      if ((jsonObj.get("HealthCheckWaitDurationInSeconds") != null && !jsonObj.get("HealthCheckWaitDurationInSeconds").isJsonNull()) && !jsonObj.get("HealthCheckWaitDurationInSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HealthCheckWaitDurationInSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HealthCheckWaitDurationInSeconds").toString()));
      }
      if ((jsonObj.get("UpgradeDomainTimeoutInSeconds") != null && !jsonObj.get("UpgradeDomainTimeoutInSeconds").isJsonNull()) && !jsonObj.get("UpgradeDomainTimeoutInSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeDomainTimeoutInSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeDomainTimeoutInSeconds").toString()));
      }
      if ((jsonObj.get("UpgradeTimeoutInSeconds") != null && !jsonObj.get("UpgradeTimeoutInSeconds").isJsonNull()) && !jsonObj.get("UpgradeTimeoutInSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UpgradeTimeoutInSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UpgradeTimeoutInSeconds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterConfigurationUpgradeDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterConfigurationUpgradeDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterConfigurationUpgradeDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterConfigurationUpgradeDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterConfigurationUpgradeDescription>() {
           @Override
           public void write(JsonWriter out, ClusterConfigurationUpgradeDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterConfigurationUpgradeDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterConfigurationUpgradeDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterConfigurationUpgradeDescription
   * @throws IOException if the JSON string is invalid with respect to ClusterConfigurationUpgradeDescription
   */
  public static ClusterConfigurationUpgradeDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterConfigurationUpgradeDescription.class);
  }

  /**
   * Convert an instance of ClusterConfigurationUpgradeDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

