/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.LoadMetricReport;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents load information for a partition, which contains the primary and secondary reported load metrics. In case there is no load reported, PartitionLoadInformation will contain the default load for the service of the partition. For default loads, LoadMetricReport&#39;s LastReportedUtc is set to 0.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionLoadInformation {
  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_PRIMARY_LOAD_METRIC_REPORTS = "PrimaryLoadMetricReports";
  @SerializedName(SERIALIZED_NAME_PRIMARY_LOAD_METRIC_REPORTS)
  private List<LoadMetricReport> primaryLoadMetricReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECONDARY_LOAD_METRIC_REPORTS = "SecondaryLoadMetricReports";
  @SerializedName(SERIALIZED_NAME_SECONDARY_LOAD_METRIC_REPORTS)
  private List<LoadMetricReport> secondaryLoadMetricReports = new ArrayList<>();

  public PartitionLoadInformation() {
  }

  public PartitionLoadInformation partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public PartitionLoadInformation primaryLoadMetricReports(List<LoadMetricReport> primaryLoadMetricReports) {
    this.primaryLoadMetricReports = primaryLoadMetricReports;
    return this;
  }

  public PartitionLoadInformation addPrimaryLoadMetricReportsItem(LoadMetricReport primaryLoadMetricReportsItem) {
    if (this.primaryLoadMetricReports == null) {
      this.primaryLoadMetricReports = new ArrayList<>();
    }
    this.primaryLoadMetricReports.add(primaryLoadMetricReportsItem);
    return this;
  }

  /**
   * Array of load reports from the primary replica for this partition.
   * @return primaryLoadMetricReports
   */
  @javax.annotation.Nullable
  public List<LoadMetricReport> getPrimaryLoadMetricReports() {
    return primaryLoadMetricReports;
  }

  public void setPrimaryLoadMetricReports(List<LoadMetricReport> primaryLoadMetricReports) {
    this.primaryLoadMetricReports = primaryLoadMetricReports;
  }


  public PartitionLoadInformation secondaryLoadMetricReports(List<LoadMetricReport> secondaryLoadMetricReports) {
    this.secondaryLoadMetricReports = secondaryLoadMetricReports;
    return this;
  }

  public PartitionLoadInformation addSecondaryLoadMetricReportsItem(LoadMetricReport secondaryLoadMetricReportsItem) {
    if (this.secondaryLoadMetricReports == null) {
      this.secondaryLoadMetricReports = new ArrayList<>();
    }
    this.secondaryLoadMetricReports.add(secondaryLoadMetricReportsItem);
    return this;
  }

  /**
   * Array of aggregated load reports from all secondary replicas for this partition. Array only contains the latest reported load for each metric.
   * @return secondaryLoadMetricReports
   */
  @javax.annotation.Nullable
  public List<LoadMetricReport> getSecondaryLoadMetricReports() {
    return secondaryLoadMetricReports;
  }

  public void setSecondaryLoadMetricReports(List<LoadMetricReport> secondaryLoadMetricReports) {
    this.secondaryLoadMetricReports = secondaryLoadMetricReports;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionLoadInformation partitionLoadInformation = (PartitionLoadInformation) o;
    return Objects.equals(this.partitionId, partitionLoadInformation.partitionId) &&
        Objects.equals(this.primaryLoadMetricReports, partitionLoadInformation.primaryLoadMetricReports) &&
        Objects.equals(this.secondaryLoadMetricReports, partitionLoadInformation.secondaryLoadMetricReports);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partitionId, primaryLoadMetricReports, secondaryLoadMetricReports);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionLoadInformation {\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    primaryLoadMetricReports: ").append(toIndentedString(primaryLoadMetricReports)).append("\n");
    sb.append("    secondaryLoadMetricReports: ").append(toIndentedString(secondaryLoadMetricReports)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PartitionId");
    openapiFields.add("PrimaryLoadMetricReports");
    openapiFields.add("SecondaryLoadMetricReports");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionLoadInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionLoadInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionLoadInformation is not found in the empty JSON string", PartitionLoadInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionLoadInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionLoadInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PartitionId") != null && !jsonObj.get("PartitionId").isJsonNull()) && !jsonObj.get("PartitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionId").toString()));
      }
      if (jsonObj.get("PrimaryLoadMetricReports") != null && !jsonObj.get("PrimaryLoadMetricReports").isJsonNull()) {
        JsonArray jsonArrayprimaryLoadMetricReports = jsonObj.getAsJsonArray("PrimaryLoadMetricReports");
        if (jsonArrayprimaryLoadMetricReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PrimaryLoadMetricReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PrimaryLoadMetricReports` to be an array in the JSON string but got `%s`", jsonObj.get("PrimaryLoadMetricReports").toString()));
          }

          // validate the optional field `PrimaryLoadMetricReports` (array)
          for (int i = 0; i < jsonArrayprimaryLoadMetricReports.size(); i++) {
            LoadMetricReport.validateJsonElement(jsonArrayprimaryLoadMetricReports.get(i));
          };
        }
      }
      if (jsonObj.get("SecondaryLoadMetricReports") != null && !jsonObj.get("SecondaryLoadMetricReports").isJsonNull()) {
        JsonArray jsonArraysecondaryLoadMetricReports = jsonObj.getAsJsonArray("SecondaryLoadMetricReports");
        if (jsonArraysecondaryLoadMetricReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SecondaryLoadMetricReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SecondaryLoadMetricReports` to be an array in the JSON string but got `%s`", jsonObj.get("SecondaryLoadMetricReports").toString()));
          }

          // validate the optional field `SecondaryLoadMetricReports` (array)
          for (int i = 0; i < jsonArraysecondaryLoadMetricReports.size(); i++) {
            LoadMetricReport.validateJsonElement(jsonArraysecondaryLoadMetricReports.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionLoadInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionLoadInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionLoadInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionLoadInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionLoadInformation>() {
           @Override
           public void write(JsonWriter out, PartitionLoadInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionLoadInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionLoadInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionLoadInformation
   * @throws IOException if the JSON string is invalid with respect to PartitionLoadInformation
   */
  public static PartitionLoadInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionLoadInformation.class);
  }

  /**
   * Convert an instance of PartitionLoadInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

