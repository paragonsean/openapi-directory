/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NodeUpgradeProgressInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The detailed upgrade progress for nodes in the current upgrade domain at the point of failure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailedUpgradeDomainProgressObject {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_NODE_UPGRADE_PROGRESS_LIST = "NodeUpgradeProgressList";
  @SerializedName(SERIALIZED_NAME_NODE_UPGRADE_PROGRESS_LIST)
  private List<NodeUpgradeProgressInfo> nodeUpgradeProgressList = new ArrayList<>();

  public FailedUpgradeDomainProgressObject() {
  }

  public FailedUpgradeDomainProgressObject domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * The name of the upgrade domain
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public FailedUpgradeDomainProgressObject nodeUpgradeProgressList(List<NodeUpgradeProgressInfo> nodeUpgradeProgressList) {
    this.nodeUpgradeProgressList = nodeUpgradeProgressList;
    return this;
  }

  public FailedUpgradeDomainProgressObject addNodeUpgradeProgressListItem(NodeUpgradeProgressInfo nodeUpgradeProgressListItem) {
    if (this.nodeUpgradeProgressList == null) {
      this.nodeUpgradeProgressList = new ArrayList<>();
    }
    this.nodeUpgradeProgressList.add(nodeUpgradeProgressListItem);
    return this;
  }

  /**
   * List of upgrading nodes and their statuses
   * @return nodeUpgradeProgressList
   */
  @javax.annotation.Nullable
  public List<NodeUpgradeProgressInfo> getNodeUpgradeProgressList() {
    return nodeUpgradeProgressList;
  }

  public void setNodeUpgradeProgressList(List<NodeUpgradeProgressInfo> nodeUpgradeProgressList) {
    this.nodeUpgradeProgressList = nodeUpgradeProgressList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailedUpgradeDomainProgressObject failedUpgradeDomainProgressObject = (FailedUpgradeDomainProgressObject) o;
    return Objects.equals(this.domainName, failedUpgradeDomainProgressObject.domainName) &&
        Objects.equals(this.nodeUpgradeProgressList, failedUpgradeDomainProgressObject.nodeUpgradeProgressList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, nodeUpgradeProgressList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailedUpgradeDomainProgressObject {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    nodeUpgradeProgressList: ").append(toIndentedString(nodeUpgradeProgressList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("NodeUpgradeProgressList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailedUpgradeDomainProgressObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailedUpgradeDomainProgressObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailedUpgradeDomainProgressObject is not found in the empty JSON string", FailedUpgradeDomainProgressObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailedUpgradeDomainProgressObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailedUpgradeDomainProgressObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) && !jsonObj.get("DomainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DomainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DomainName").toString()));
      }
      if (jsonObj.get("NodeUpgradeProgressList") != null && !jsonObj.get("NodeUpgradeProgressList").isJsonNull()) {
        JsonArray jsonArraynodeUpgradeProgressList = jsonObj.getAsJsonArray("NodeUpgradeProgressList");
        if (jsonArraynodeUpgradeProgressList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NodeUpgradeProgressList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NodeUpgradeProgressList` to be an array in the JSON string but got `%s`", jsonObj.get("NodeUpgradeProgressList").toString()));
          }

          // validate the optional field `NodeUpgradeProgressList` (array)
          for (int i = 0; i < jsonArraynodeUpgradeProgressList.size(); i++) {
            NodeUpgradeProgressInfo.validateJsonElement(jsonArraynodeUpgradeProgressList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailedUpgradeDomainProgressObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailedUpgradeDomainProgressObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailedUpgradeDomainProgressObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailedUpgradeDomainProgressObject.class));

       return (TypeAdapter<T>) new TypeAdapter<FailedUpgradeDomainProgressObject>() {
           @Override
           public void write(JsonWriter out, FailedUpgradeDomainProgressObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailedUpgradeDomainProgressObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailedUpgradeDomainProgressObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailedUpgradeDomainProgressObject
   * @throws IOException if the JSON string is invalid with respect to FailedUpgradeDomainProgressObject
   */
  public static FailedUpgradeDomainProgressObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailedUpgradeDomainProgressObject.class);
  }

  /**
   * Convert an instance of FailedUpgradeDomainProgressObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

