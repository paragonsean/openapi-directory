/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a request to update the health policy of a repair task.  This type supports the Service Fabric platform; it is not meant to be used directly from your code.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepairTaskUpdateHealthPolicyDescription {
  public static final String SERIALIZED_NAME_PERFORM_PREPARING_HEALTH_CHECK = "PerformPreparingHealthCheck";
  @SerializedName(SERIALIZED_NAME_PERFORM_PREPARING_HEALTH_CHECK)
  private Boolean performPreparingHealthCheck;

  public static final String SERIALIZED_NAME_PERFORM_RESTORING_HEALTH_CHECK = "PerformRestoringHealthCheck";
  @SerializedName(SERIALIZED_NAME_PERFORM_RESTORING_HEALTH_CHECK)
  private Boolean performRestoringHealthCheck;

  public static final String SERIALIZED_NAME_TASK_ID = "TaskId";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public RepairTaskUpdateHealthPolicyDescription() {
  }

  public RepairTaskUpdateHealthPolicyDescription performPreparingHealthCheck(Boolean performPreparingHealthCheck) {
    this.performPreparingHealthCheck = performPreparingHealthCheck;
    return this;
  }

  /**
   * A boolean indicating if health check is to be performed in the Preparing stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired new value.
   * @return performPreparingHealthCheck
   */
  @javax.annotation.Nullable
  public Boolean getPerformPreparingHealthCheck() {
    return performPreparingHealthCheck;
  }

  public void setPerformPreparingHealthCheck(Boolean performPreparingHealthCheck) {
    this.performPreparingHealthCheck = performPreparingHealthCheck;
  }


  public RepairTaskUpdateHealthPolicyDescription performRestoringHealthCheck(Boolean performRestoringHealthCheck) {
    this.performRestoringHealthCheck = performRestoringHealthCheck;
    return this;
  }

  /**
   * A boolean indicating if health check is to be performed in the Restoring stage of the repair task. If not specified the existing value should not be altered. Otherwise, specify the desired new value.
   * @return performRestoringHealthCheck
   */
  @javax.annotation.Nullable
  public Boolean getPerformRestoringHealthCheck() {
    return performRestoringHealthCheck;
  }

  public void setPerformRestoringHealthCheck(Boolean performRestoringHealthCheck) {
    this.performRestoringHealthCheck = performRestoringHealthCheck;
  }


  public RepairTaskUpdateHealthPolicyDescription taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * The ID of the repair task to be updated.
   * @return taskId
   */
  @javax.annotation.Nonnull
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public RepairTaskUpdateHealthPolicyDescription version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepairTaskUpdateHealthPolicyDescription repairTaskUpdateHealthPolicyDescription = (RepairTaskUpdateHealthPolicyDescription) o;
    return Objects.equals(this.performPreparingHealthCheck, repairTaskUpdateHealthPolicyDescription.performPreparingHealthCheck) &&
        Objects.equals(this.performRestoringHealthCheck, repairTaskUpdateHealthPolicyDescription.performRestoringHealthCheck) &&
        Objects.equals(this.taskId, repairTaskUpdateHealthPolicyDescription.taskId) &&
        Objects.equals(this.version, repairTaskUpdateHealthPolicyDescription.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(performPreparingHealthCheck, performRestoringHealthCheck, taskId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepairTaskUpdateHealthPolicyDescription {\n");
    sb.append("    performPreparingHealthCheck: ").append(toIndentedString(performPreparingHealthCheck)).append("\n");
    sb.append("    performRestoringHealthCheck: ").append(toIndentedString(performRestoringHealthCheck)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PerformPreparingHealthCheck");
    openapiFields.add("PerformRestoringHealthCheck");
    openapiFields.add("TaskId");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TaskId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepairTaskUpdateHealthPolicyDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepairTaskUpdateHealthPolicyDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepairTaskUpdateHealthPolicyDescription is not found in the empty JSON string", RepairTaskUpdateHealthPolicyDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepairTaskUpdateHealthPolicyDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepairTaskUpdateHealthPolicyDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RepairTaskUpdateHealthPolicyDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TaskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaskId").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepairTaskUpdateHealthPolicyDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepairTaskUpdateHealthPolicyDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepairTaskUpdateHealthPolicyDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepairTaskUpdateHealthPolicyDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<RepairTaskUpdateHealthPolicyDescription>() {
           @Override
           public void write(JsonWriter out, RepairTaskUpdateHealthPolicyDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepairTaskUpdateHealthPolicyDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepairTaskUpdateHealthPolicyDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepairTaskUpdateHealthPolicyDescription
   * @throws IOException if the JSON string is invalid with respect to RepairTaskUpdateHealthPolicyDescription
   */
  public static RepairTaskUpdateHealthPolicyDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepairTaskUpdateHealthPolicyDescription.class);
  }

  /**
   * Convert an instance of RepairTaskUpdateHealthPolicyDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

