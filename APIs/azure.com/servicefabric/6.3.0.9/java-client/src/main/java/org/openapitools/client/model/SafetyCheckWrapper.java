/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SafetyCheck;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A wrapper for the safety check object. Safety checks are performed by service fabric before continuing with the operations. These checks ensure the availability of the service and the reliability of the state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SafetyCheckWrapper {
  public static final String SERIALIZED_NAME_SAFETY_CHECK = "SafetyCheck";
  @SerializedName(SERIALIZED_NAME_SAFETY_CHECK)
  private SafetyCheck safetyCheck;

  public SafetyCheckWrapper() {
  }

  public SafetyCheckWrapper safetyCheck(SafetyCheck safetyCheck) {
    this.safetyCheck = safetyCheck;
    return this;
  }

  /**
   * Get safetyCheck
   * @return safetyCheck
   */
  @javax.annotation.Nullable
  public SafetyCheck getSafetyCheck() {
    return safetyCheck;
  }

  public void setSafetyCheck(SafetyCheck safetyCheck) {
    this.safetyCheck = safetyCheck;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SafetyCheckWrapper safetyCheckWrapper = (SafetyCheckWrapper) o;
    return Objects.equals(this.safetyCheck, safetyCheckWrapper.safetyCheck);
  }

  @Override
  public int hashCode() {
    return Objects.hash(safetyCheck);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SafetyCheckWrapper {\n");
    sb.append("    safetyCheck: ").append(toIndentedString(safetyCheck)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SafetyCheck");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SafetyCheckWrapper
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SafetyCheckWrapper.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SafetyCheckWrapper is not found in the empty JSON string", SafetyCheckWrapper.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SafetyCheckWrapper.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SafetyCheckWrapper` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SafetyCheck`
      if (jsonObj.get("SafetyCheck") != null && !jsonObj.get("SafetyCheck").isJsonNull()) {
        SafetyCheck.validateJsonElement(jsonObj.get("SafetyCheck"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SafetyCheckWrapper.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SafetyCheckWrapper' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SafetyCheckWrapper> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SafetyCheckWrapper.class));

       return (TypeAdapter<T>) new TypeAdapter<SafetyCheckWrapper>() {
           @Override
           public void write(JsonWriter out, SafetyCheckWrapper value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SafetyCheckWrapper read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SafetyCheckWrapper given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SafetyCheckWrapper
   * @throws IOException if the JSON string is invalid with respect to SafetyCheckWrapper
   */
  public static SafetyCheckWrapper fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SafetyCheckWrapper.class);
  }

  /**
   * Convert an instance of SafetyCheckWrapper to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

