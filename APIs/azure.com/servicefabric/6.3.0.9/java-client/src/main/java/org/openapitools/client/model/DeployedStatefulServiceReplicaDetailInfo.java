/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.DeployedServiceReplicaDetailInfo;
import org.openapitools.client.model.DeployedStatefulServiceReplicaInfo;
import org.openapitools.client.model.KeyValueStoreReplicaStatus;
import org.openapitools.client.model.LoadMetricReportInfo;
import org.openapitools.client.model.PartitionAccessStatus;
import org.openapitools.client.model.ReplicatorOperationName;
import org.openapitools.client.model.ReplicatorStatus;
import org.openapitools.client.model.ServiceKind;
import org.openapitools.client.model.ServiceOperationName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a stateful replica running in a code package. Note DeployedServiceReplicaQueryResult will contain duplicate data like ServiceKind, ServiceName, PartitionId and replicaId.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedStatefulServiceReplicaDetailInfo extends DeployedServiceReplicaDetailInfo {
  public static final String SERIALIZED_NAME_CURRENT_REPLICATOR_OPERATION = "CurrentReplicatorOperation";
  @SerializedName(SERIALIZED_NAME_CURRENT_REPLICATOR_OPERATION)
  private ReplicatorOperationName currentReplicatorOperation;

  public static final String SERIALIZED_NAME_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT = "DeployedServiceReplicaQueryResult";
  @SerializedName(SERIALIZED_NAME_DEPLOYED_SERVICE_REPLICA_QUERY_RESULT)
  private DeployedStatefulServiceReplicaInfo deployedServiceReplicaQueryResult;

  public static final String SERIALIZED_NAME_READ_STATUS = "ReadStatus";
  @SerializedName(SERIALIZED_NAME_READ_STATUS)
  private PartitionAccessStatus readStatus;

  public static final String SERIALIZED_NAME_REPLICA_ID = "ReplicaId";
  @SerializedName(SERIALIZED_NAME_REPLICA_ID)
  private String replicaId;

  public static final String SERIALIZED_NAME_REPLICA_STATUS = "ReplicaStatus";
  @SerializedName(SERIALIZED_NAME_REPLICA_STATUS)
  private KeyValueStoreReplicaStatus replicaStatus;

  public static final String SERIALIZED_NAME_REPLICATOR_STATUS = "ReplicatorStatus";
  @SerializedName(SERIALIZED_NAME_REPLICATOR_STATUS)
  private ReplicatorStatus replicatorStatus;

  public static final String SERIALIZED_NAME_WRITE_STATUS = "WriteStatus";
  @SerializedName(SERIALIZED_NAME_WRITE_STATUS)
  private PartitionAccessStatus writeStatus;

  public DeployedStatefulServiceReplicaDetailInfo() {
    this.serviceKind = this.getClass().getSimpleName();
  }

  public DeployedStatefulServiceReplicaDetailInfo currentReplicatorOperation(ReplicatorOperationName currentReplicatorOperation) {
    this.currentReplicatorOperation = currentReplicatorOperation;
    return this;
  }

  /**
   * Get currentReplicatorOperation
   * @return currentReplicatorOperation
   */
  @javax.annotation.Nullable
  public ReplicatorOperationName getCurrentReplicatorOperation() {
    return currentReplicatorOperation;
  }

  public void setCurrentReplicatorOperation(ReplicatorOperationName currentReplicatorOperation) {
    this.currentReplicatorOperation = currentReplicatorOperation;
  }


  public DeployedStatefulServiceReplicaDetailInfo deployedServiceReplicaQueryResult(DeployedStatefulServiceReplicaInfo deployedServiceReplicaQueryResult) {
    this.deployedServiceReplicaQueryResult = deployedServiceReplicaQueryResult;
    return this;
  }

  /**
   * Get deployedServiceReplicaQueryResult
   * @return deployedServiceReplicaQueryResult
   */
  @javax.annotation.Nullable
  public DeployedStatefulServiceReplicaInfo getDeployedServiceReplicaQueryResult() {
    return deployedServiceReplicaQueryResult;
  }

  public void setDeployedServiceReplicaQueryResult(DeployedStatefulServiceReplicaInfo deployedServiceReplicaQueryResult) {
    this.deployedServiceReplicaQueryResult = deployedServiceReplicaQueryResult;
  }


  public DeployedStatefulServiceReplicaDetailInfo readStatus(PartitionAccessStatus readStatus) {
    this.readStatus = readStatus;
    return this;
  }

  /**
   * Get readStatus
   * @return readStatus
   */
  @javax.annotation.Nullable
  public PartitionAccessStatus getReadStatus() {
    return readStatus;
  }

  public void setReadStatus(PartitionAccessStatus readStatus) {
    this.readStatus = readStatus;
  }


  public DeployedStatefulServiceReplicaDetailInfo replicaId(String replicaId) {
    this.replicaId = replicaId;
    return this;
  }

  /**
   * Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
   * @return replicaId
   */
  @javax.annotation.Nullable
  public String getReplicaId() {
    return replicaId;
  }

  public void setReplicaId(String replicaId) {
    this.replicaId = replicaId;
  }


  public DeployedStatefulServiceReplicaDetailInfo replicaStatus(KeyValueStoreReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
    return this;
  }

  /**
   * Get replicaStatus
   * @return replicaStatus
   */
  @javax.annotation.Nullable
  public KeyValueStoreReplicaStatus getReplicaStatus() {
    return replicaStatus;
  }

  public void setReplicaStatus(KeyValueStoreReplicaStatus replicaStatus) {
    this.replicaStatus = replicaStatus;
  }


  public DeployedStatefulServiceReplicaDetailInfo replicatorStatus(ReplicatorStatus replicatorStatus) {
    this.replicatorStatus = replicatorStatus;
    return this;
  }

  /**
   * Get replicatorStatus
   * @return replicatorStatus
   */
  @javax.annotation.Nullable
  public ReplicatorStatus getReplicatorStatus() {
    return replicatorStatus;
  }

  public void setReplicatorStatus(ReplicatorStatus replicatorStatus) {
    this.replicatorStatus = replicatorStatus;
  }


  public DeployedStatefulServiceReplicaDetailInfo writeStatus(PartitionAccessStatus writeStatus) {
    this.writeStatus = writeStatus;
    return this;
  }

  /**
   * Get writeStatus
   * @return writeStatus
   */
  @javax.annotation.Nullable
  public PartitionAccessStatus getWriteStatus() {
    return writeStatus;
  }

  public void setWriteStatus(PartitionAccessStatus writeStatus) {
    this.writeStatus = writeStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedStatefulServiceReplicaDetailInfo deployedStatefulServiceReplicaDetailInfo = (DeployedStatefulServiceReplicaDetailInfo) o;
    return Objects.equals(this.currentReplicatorOperation, deployedStatefulServiceReplicaDetailInfo.currentReplicatorOperation) &&
        Objects.equals(this.deployedServiceReplicaQueryResult, deployedStatefulServiceReplicaDetailInfo.deployedServiceReplicaQueryResult) &&
        Objects.equals(this.readStatus, deployedStatefulServiceReplicaDetailInfo.readStatus) &&
        Objects.equals(this.replicaId, deployedStatefulServiceReplicaDetailInfo.replicaId) &&
        Objects.equals(this.replicaStatus, deployedStatefulServiceReplicaDetailInfo.replicaStatus) &&
        Objects.equals(this.replicatorStatus, deployedStatefulServiceReplicaDetailInfo.replicatorStatus) &&
        Objects.equals(this.writeStatus, deployedStatefulServiceReplicaDetailInfo.writeStatus) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentReplicatorOperation, deployedServiceReplicaQueryResult, readStatus, replicaId, replicaStatus, replicatorStatus, writeStatus, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedStatefulServiceReplicaDetailInfo {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    currentReplicatorOperation: ").append(toIndentedString(currentReplicatorOperation)).append("\n");
    sb.append("    deployedServiceReplicaQueryResult: ").append(toIndentedString(deployedServiceReplicaQueryResult)).append("\n");
    sb.append("    readStatus: ").append(toIndentedString(readStatus)).append("\n");
    sb.append("    replicaId: ").append(toIndentedString(replicaId)).append("\n");
    sb.append("    replicaStatus: ").append(toIndentedString(replicaStatus)).append("\n");
    sb.append("    replicatorStatus: ").append(toIndentedString(replicatorStatus)).append("\n");
    sb.append("    writeStatus: ").append(toIndentedString(writeStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentServiceOperation");
    openapiFields.add("CurrentServiceOperationStartTimeUtc");
    openapiFields.add("PartitionId");
    openapiFields.add("ReportedLoad");
    openapiFields.add("ServiceKind");
    openapiFields.add("ServiceName");
    openapiFields.add("CurrentReplicatorOperation");
    openapiFields.add("DeployedServiceReplicaQueryResult");
    openapiFields.add("ReadStatus");
    openapiFields.add("ReplicaId");
    openapiFields.add("ReplicaStatus");
    openapiFields.add("ReplicatorStatus");
    openapiFields.add("WriteStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ServiceKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedStatefulServiceReplicaDetailInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedStatefulServiceReplicaDetailInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedStatefulServiceReplicaDetailInfo is not found in the empty JSON string", DeployedStatefulServiceReplicaDetailInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedStatefulServiceReplicaDetailInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedStatefulServiceReplicaDetailInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeployedStatefulServiceReplicaDetailInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedStatefulServiceReplicaDetailInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedStatefulServiceReplicaDetailInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedStatefulServiceReplicaDetailInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedStatefulServiceReplicaDetailInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedStatefulServiceReplicaDetailInfo>() {
           @Override
           public void write(JsonWriter out, DeployedStatefulServiceReplicaDetailInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedStatefulServiceReplicaDetailInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedStatefulServiceReplicaDetailInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedStatefulServiceReplicaDetailInfo
   * @throws IOException if the JSON string is invalid with respect to DeployedStatefulServiceReplicaDetailInfo
   */
  public static DeployedStatefulServiceReplicaDetailInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedStatefulServiceReplicaDetailInfo.class);
  }

  /**
   * Convert an instance of DeployedStatefulServiceReplicaDetailInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

