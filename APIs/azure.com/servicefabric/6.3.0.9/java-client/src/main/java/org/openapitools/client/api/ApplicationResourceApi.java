/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationResourceDescription;
import org.openapitools.client.model.FabricError;
import org.openapitools.client.model.PagedServiceResourceDescriptionList;
import org.openapitools.client.model.PagedServiceResourceReplicaDescriptionList;
import org.openapitools.client.model.ServiceResourceDescription;
import org.openapitools.client.model.ServiceResourceReplicaDescription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationResourceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationResourceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createApplicationResource
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationResourceCall(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationResourceDescription;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApplicationResourceValidateBeforeCall(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling createApplicationResource(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling createApplicationResource(Async)");
        }

        // verify the required parameter 'applicationResourceDescription' is set
        if (applicationResourceDescription == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceDescription' when calling createApplicationResource(Async)");
        }

        return createApplicationResourceCall(apiVersion, applicationResourceName, applicationResourceDescription, _callback);

    }

    /**
     * Creates or updates an application resource.
     * Creates an application with the specified name and description. If an application with the same name already exists, then its description are updated to the one indicated in this request.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void createApplicationResource(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription) throws ApiException {
        createApplicationResourceWithHttpInfo(apiVersion, applicationResourceName, applicationResourceDescription);
    }

    /**
     * Creates or updates an application resource.
     * Creates an application with the specified name and description. If an application with the same name already exists, then its description are updated to the one indicated in this request.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> createApplicationResourceWithHttpInfo(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription) throws ApiException {
        okhttp3.Call localVarCall = createApplicationResourceValidateBeforeCall(apiVersion, applicationResourceName, applicationResourceDescription, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Creates or updates an application resource. (asynchronously)
     * Creates an application with the specified name and description. If an application with the same name already exists, then its description are updated to the one indicated in this request.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param applicationResourceDescription Description for creating an application resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApplicationResourceAsync(String apiVersion, String applicationResourceName, ApplicationResourceDescription applicationResourceDescription, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApplicationResourceValidateBeforeCall(apiVersion, applicationResourceName, applicationResourceDescription, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApplicationResource
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApplicationResourceCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteApplicationResourceValidateBeforeCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteApplicationResource(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling deleteApplicationResource(Async)");
        }

        return deleteApplicationResourceCall(apiVersion, applicationResourceName, _callback);

    }

    /**
     * Deletes the specified application.
     * Deletes the application identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApplicationResource(String apiVersion, String applicationResourceName) throws ApiException {
        deleteApplicationResourceWithHttpInfo(apiVersion, applicationResourceName);
    }

    /**
     * Deletes the specified application.
     * Deletes the application identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteApplicationResourceWithHttpInfo(String apiVersion, String applicationResourceName) throws ApiException {
        okhttp3.Call localVarCall = deleteApplicationResourceValidateBeforeCall(apiVersion, applicationResourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes the specified application. (asynchronously)
     * Deletes the application identified by the name.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified application was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteApplicationResourceAsync(String apiVersion, String applicationResourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteApplicationResourceValidateBeforeCall(apiVersion, applicationResourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApplicationResource
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationResourceCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApplicationResourceValidateBeforeCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getApplicationResource(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling getApplicationResource(Async)");
        }

        return getApplicationResourceCall(apiVersion, applicationResourceName, _callback);

    }

    /**
     * Gets the application with the given name.
     * Gets the application with the given name. This includes the information about the application&#39;s services and other runtime information.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @return ApplicationResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationResourceDescription getApplicationResource(String apiVersion, String applicationResourceName) throws ApiException {
        ApiResponse<ApplicationResourceDescription> localVarResp = getApplicationResourceWithHttpInfo(apiVersion, applicationResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets the application with the given name.
     * Gets the application with the given name. This includes the information about the application&#39;s services and other runtime information.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @return ApiResponse&lt;ApplicationResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationResourceDescription> getApplicationResourceWithHttpInfo(String apiVersion, String applicationResourceName) throws ApiException {
        okhttp3.Call localVarCall = getApplicationResourceValidateBeforeCall(apiVersion, applicationResourceName, null);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the application with the given name. (asynchronously)
     * Gets the application with the given name. This includes the information about the application&#39;s services and other runtime information.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApplicationResourceAsync(String apiVersion, String applicationResourceName, final ApiCallback<ApplicationResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApplicationResourceValidateBeforeCall(apiVersion, applicationResourceName, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReplica
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param replicaName Service Fabric replica name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReplicaCall(String apiVersion, String applicationResourceName, String serviceResourceName, String replicaName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/Replicas/{replicaName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()))
            .replace("{" + "serviceResourceName" + "}", localVarApiClient.escapeString(serviceResourceName.toString()))
            .replace("{" + "replicaName" + "}", localVarApiClient.escapeString(replicaName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReplicaValidateBeforeCall(String apiVersion, String applicationResourceName, String serviceResourceName, String replicaName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getReplica(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling getReplica(Async)");
        }

        // verify the required parameter 'serviceResourceName' is set
        if (serviceResourceName == null) {
            throw new ApiException("Missing the required parameter 'serviceResourceName' when calling getReplica(Async)");
        }

        // verify the required parameter 'replicaName' is set
        if (replicaName == null) {
            throw new ApiException("Missing the required parameter 'replicaName' when calling getReplica(Async)");
        }

        return getReplicaCall(apiVersion, applicationResourceName, serviceResourceName, replicaName, _callback);

    }

    /**
     * Gets a specific replica of a given service in an application resource.
     * Gets the information about the specified replica of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param replicaName Service Fabric replica name. (required)
     * @return ServiceResourceReplicaDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServiceResourceReplicaDescription getReplica(String apiVersion, String applicationResourceName, String serviceResourceName, String replicaName) throws ApiException {
        ApiResponse<ServiceResourceReplicaDescription> localVarResp = getReplicaWithHttpInfo(apiVersion, applicationResourceName, serviceResourceName, replicaName);
        return localVarResp.getData();
    }

    /**
     * Gets a specific replica of a given service in an application resource.
     * Gets the information about the specified replica of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param replicaName Service Fabric replica name. (required)
     * @return ApiResponse&lt;ServiceResourceReplicaDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceResourceReplicaDescription> getReplicaWithHttpInfo(String apiVersion, String applicationResourceName, String serviceResourceName, String replicaName) throws ApiException {
        okhttp3.Call localVarCall = getReplicaValidateBeforeCall(apiVersion, applicationResourceName, serviceResourceName, replicaName, null);
        Type localVarReturnType = new TypeToken<ServiceResourceReplicaDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a specific replica of a given service in an application resource. (asynchronously)
     * Gets the information about the specified replica of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param replicaName Service Fabric replica name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReplicaAsync(String apiVersion, String applicationResourceName, String serviceResourceName, String replicaName, final ApiCallback<ServiceResourceReplicaDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReplicaValidateBeforeCall(apiVersion, applicationResourceName, serviceResourceName, replicaName, _callback);
        Type localVarReturnType = new TypeToken<ServiceResourceReplicaDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReplicas
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReplicasCall(String apiVersion, String applicationResourceName, String serviceResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}/replicas"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()))
            .replace("{" + "serviceResourceName" + "}", localVarApiClient.escapeString(serviceResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReplicasValidateBeforeCall(String apiVersion, String applicationResourceName, String serviceResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getReplicas(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling getReplicas(Async)");
        }

        // verify the required parameter 'serviceResourceName' is set
        if (serviceResourceName == null) {
            throw new ApiException("Missing the required parameter 'serviceResourceName' when calling getReplicas(Async)");
        }

        return getReplicasCall(apiVersion, applicationResourceName, serviceResourceName, _callback);

    }

    /**
     * Gets replicas of a given service in an application resource.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @return PagedServiceResourceReplicaDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PagedServiceResourceReplicaDescriptionList getReplicas(String apiVersion, String applicationResourceName, String serviceResourceName) throws ApiException {
        ApiResponse<PagedServiceResourceReplicaDescriptionList> localVarResp = getReplicasWithHttpInfo(apiVersion, applicationResourceName, serviceResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets replicas of a given service in an application resource.
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @return ApiResponse&lt;PagedServiceResourceReplicaDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedServiceResourceReplicaDescriptionList> getReplicasWithHttpInfo(String apiVersion, String applicationResourceName, String serviceResourceName) throws ApiException {
        okhttp3.Call localVarCall = getReplicasValidateBeforeCall(apiVersion, applicationResourceName, serviceResourceName, null);
        Type localVarReturnType = new TypeToken<PagedServiceResourceReplicaDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets replicas of a given service in an application resource. (asynchronously)
     * Gets the information about all replicas of a given service of an application. The information includes the runtime properties of the replica instance.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReplicasAsync(String apiVersion, String applicationResourceName, String serviceResourceName, final ApiCallback<PagedServiceResourceReplicaDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReplicasValidateBeforeCall(apiVersion, applicationResourceName, serviceResourceName, _callback);
        Type localVarReturnType = new TypeToken<PagedServiceResourceReplicaDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getService
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceCall(String apiVersion, String applicationResourceName, String serviceResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}/Services/{serviceResourceName}"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()))
            .replace("{" + "serviceResourceName" + "}", localVarApiClient.escapeString(serviceResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServiceValidateBeforeCall(String apiVersion, String applicationResourceName, String serviceResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getService(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling getService(Async)");
        }

        // verify the required parameter 'serviceResourceName' is set
        if (serviceResourceName == null) {
            throw new ApiException("Missing the required parameter 'serviceResourceName' when calling getService(Async)");
        }

        return getServiceCall(apiVersion, applicationResourceName, serviceResourceName, _callback);

    }

    /**
     * Gets the description of the specified service in an application resource.
     * Gets the description of the service resource.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @return ServiceResourceDescription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ServiceResourceDescription getService(String apiVersion, String applicationResourceName, String serviceResourceName) throws ApiException {
        ApiResponse<ServiceResourceDescription> localVarResp = getServiceWithHttpInfo(apiVersion, applicationResourceName, serviceResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets the description of the specified service in an application resource.
     * Gets the description of the service resource.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @return ApiResponse&lt;ServiceResourceDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceResourceDescription> getServiceWithHttpInfo(String apiVersion, String applicationResourceName, String serviceResourceName) throws ApiException {
        okhttp3.Call localVarCall = getServiceValidateBeforeCall(apiVersion, applicationResourceName, serviceResourceName, null);
        Type localVarReturnType = new TypeToken<ServiceResourceDescription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the description of the specified service in an application resource. (asynchronously)
     * Gets the description of the service resource.
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param serviceResourceName Service Fabric service resource name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServiceAsync(String apiVersion, String applicationResourceName, String serviceResourceName, final ApiCallback<ServiceResourceDescription> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServiceValidateBeforeCall(apiVersion, applicationResourceName, serviceResourceName, _callback);
        Type localVarReturnType = new TypeToken<ServiceResourceDescription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServices
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Resources/Applications/{applicationResourceName}/Services"
            .replace("{" + "applicationResourceName" + "}", localVarApiClient.escapeString(applicationResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesValidateBeforeCall(String apiVersion, String applicationResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getServices(Async)");
        }

        // verify the required parameter 'applicationResourceName' is set
        if (applicationResourceName == null) {
            throw new ApiException("Missing the required parameter 'applicationResourceName' when calling getServices(Async)");
        }

        return getServicesCall(apiVersion, applicationResourceName, _callback);

    }

    /**
     * Gets all the services in the application resource.
     * The operation returns the service descriptions of all the services in the application resource. 
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @return PagedServiceResourceDescriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PagedServiceResourceDescriptionList getServices(String apiVersion, String applicationResourceName) throws ApiException {
        ApiResponse<PagedServiceResourceDescriptionList> localVarResp = getServicesWithHttpInfo(apiVersion, applicationResourceName);
        return localVarResp.getData();
    }

    /**
     * Gets all the services in the application resource.
     * The operation returns the service descriptions of all the services in the application resource. 
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @return ApiResponse&lt;PagedServiceResourceDescriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedServiceResourceDescriptionList> getServicesWithHttpInfo(String apiVersion, String applicationResourceName) throws ApiException {
        okhttp3.Call localVarCall = getServicesValidateBeforeCall(apiVersion, applicationResourceName, null);
        Type localVarReturnType = new TypeToken<PagedServiceResourceDescriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all the services in the application resource. (asynchronously)
     * The operation returns the service descriptions of all the services in the application resource. 
     * @param apiVersion The version of the API. This parameter is required and its value must be &#39;6.3-preview&#39;. (required)
     * @param applicationResourceName Service Fabric application resource name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServicesAsync(String apiVersion, String applicationResourceName, final ApiCallback<PagedServiceResourceDescriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesValidateBeforeCall(apiVersion, applicationResourceName, _callback);
        Type localVarReturnType = new TypeToken<PagedServiceResourceDescriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
