/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RegistryCredential;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines description for creating a Service Fabric compose deployment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateComposeDeploymentDescription {
  public static final String SERIALIZED_NAME_COMPOSE_FILE_CONTENT = "ComposeFileContent";
  @SerializedName(SERIALIZED_NAME_COMPOSE_FILE_CONTENT)
  private String composeFileContent;

  public static final String SERIALIZED_NAME_DEPLOYMENT_NAME = "DeploymentName";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_NAME)
  private String deploymentName;

  public static final String SERIALIZED_NAME_REGISTRY_CREDENTIAL = "RegistryCredential";
  @SerializedName(SERIALIZED_NAME_REGISTRY_CREDENTIAL)
  private RegistryCredential registryCredential;

  public CreateComposeDeploymentDescription() {
  }

  public CreateComposeDeploymentDescription composeFileContent(String composeFileContent) {
    this.composeFileContent = composeFileContent;
    return this;
  }

  /**
   * The content of the compose file that describes the deployment to create.
   * @return composeFileContent
   */
  @javax.annotation.Nonnull
  public String getComposeFileContent() {
    return composeFileContent;
  }

  public void setComposeFileContent(String composeFileContent) {
    this.composeFileContent = composeFileContent;
  }


  public CreateComposeDeploymentDescription deploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
    return this;
  }

  /**
   * The name of the deployment.
   * @return deploymentName
   */
  @javax.annotation.Nonnull
  public String getDeploymentName() {
    return deploymentName;
  }

  public void setDeploymentName(String deploymentName) {
    this.deploymentName = deploymentName;
  }


  public CreateComposeDeploymentDescription registryCredential(RegistryCredential registryCredential) {
    this.registryCredential = registryCredential;
    return this;
  }

  /**
   * Get registryCredential
   * @return registryCredential
   */
  @javax.annotation.Nullable
  public RegistryCredential getRegistryCredential() {
    return registryCredential;
  }

  public void setRegistryCredential(RegistryCredential registryCredential) {
    this.registryCredential = registryCredential;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateComposeDeploymentDescription createComposeDeploymentDescription = (CreateComposeDeploymentDescription) o;
    return Objects.equals(this.composeFileContent, createComposeDeploymentDescription.composeFileContent) &&
        Objects.equals(this.deploymentName, createComposeDeploymentDescription.deploymentName) &&
        Objects.equals(this.registryCredential, createComposeDeploymentDescription.registryCredential);
  }

  @Override
  public int hashCode() {
    return Objects.hash(composeFileContent, deploymentName, registryCredential);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateComposeDeploymentDescription {\n");
    sb.append("    composeFileContent: ").append(toIndentedString(composeFileContent)).append("\n");
    sb.append("    deploymentName: ").append(toIndentedString(deploymentName)).append("\n");
    sb.append("    registryCredential: ").append(toIndentedString(registryCredential)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ComposeFileContent");
    openapiFields.add("DeploymentName");
    openapiFields.add("RegistryCredential");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ComposeFileContent");
    openapiRequiredFields.add("DeploymentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateComposeDeploymentDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateComposeDeploymentDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateComposeDeploymentDescription is not found in the empty JSON string", CreateComposeDeploymentDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateComposeDeploymentDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateComposeDeploymentDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateComposeDeploymentDescription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ComposeFileContent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ComposeFileContent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ComposeFileContent").toString()));
      }
      if (!jsonObj.get("DeploymentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeploymentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeploymentName").toString()));
      }
      // validate the optional field `RegistryCredential`
      if (jsonObj.get("RegistryCredential") != null && !jsonObj.get("RegistryCredential").isJsonNull()) {
        RegistryCredential.validateJsonElement(jsonObj.get("RegistryCredential"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateComposeDeploymentDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateComposeDeploymentDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateComposeDeploymentDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateComposeDeploymentDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateComposeDeploymentDescription>() {
           @Override
           public void write(JsonWriter out, CreateComposeDeploymentDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateComposeDeploymentDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateComposeDeploymentDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateComposeDeploymentDescription
   * @throws IOException if the JSON string is invalid with respect to CreateComposeDeploymentDescription
   */
  public static CreateComposeDeploymentDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateComposeDeploymentDescription.class);
  }

  /**
   * Convert an instance of CreateComposeDeploymentDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

