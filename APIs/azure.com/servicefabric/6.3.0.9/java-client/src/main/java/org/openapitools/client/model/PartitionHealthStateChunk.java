/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.HealthState;
import org.openapitools.client.model.ReplicaHealthStateChunkList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the health state chunk of a partition, which contains the partition ID, its aggregated health state and any replicas that respect the filters in the cluster health chunk query description.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PartitionHealthStateChunk {
  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private HealthState healthState;

  public static final String SERIALIZED_NAME_PARTITION_ID = "PartitionId";
  @SerializedName(SERIALIZED_NAME_PARTITION_ID)
  private UUID partitionId;

  public static final String SERIALIZED_NAME_REPLICA_HEALTH_STATE_CHUNKS = "ReplicaHealthStateChunks";
  @SerializedName(SERIALIZED_NAME_REPLICA_HEALTH_STATE_CHUNKS)
  private ReplicaHealthStateChunkList replicaHealthStateChunks;

  public PartitionHealthStateChunk() {
  }

  public PartitionHealthStateChunk healthState(HealthState healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Get healthState
   * @return healthState
   */
  @javax.annotation.Nullable
  public HealthState getHealthState() {
    return healthState;
  }

  public void setHealthState(HealthState healthState) {
    this.healthState = healthState;
  }


  public PartitionHealthStateChunk partitionId(UUID partitionId) {
    this.partitionId = partitionId;
    return this;
  }

  /**
   * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
   * @return partitionId
   */
  @javax.annotation.Nullable
  public UUID getPartitionId() {
    return partitionId;
  }

  public void setPartitionId(UUID partitionId) {
    this.partitionId = partitionId;
  }


  public PartitionHealthStateChunk replicaHealthStateChunks(ReplicaHealthStateChunkList replicaHealthStateChunks) {
    this.replicaHealthStateChunks = replicaHealthStateChunks;
    return this;
  }

  /**
   * Get replicaHealthStateChunks
   * @return replicaHealthStateChunks
   */
  @javax.annotation.Nullable
  public ReplicaHealthStateChunkList getReplicaHealthStateChunks() {
    return replicaHealthStateChunks;
  }

  public void setReplicaHealthStateChunks(ReplicaHealthStateChunkList replicaHealthStateChunks) {
    this.replicaHealthStateChunks = replicaHealthStateChunks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartitionHealthStateChunk partitionHealthStateChunk = (PartitionHealthStateChunk) o;
    return Objects.equals(this.healthState, partitionHealthStateChunk.healthState) &&
        Objects.equals(this.partitionId, partitionHealthStateChunk.partitionId) &&
        Objects.equals(this.replicaHealthStateChunks, partitionHealthStateChunk.replicaHealthStateChunks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthState, partitionId, replicaHealthStateChunks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartitionHealthStateChunk {\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    partitionId: ").append(toIndentedString(partitionId)).append("\n");
    sb.append("    replicaHealthStateChunks: ").append(toIndentedString(replicaHealthStateChunks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("HealthState");
    openapiFields.add("PartitionId");
    openapiFields.add("ReplicaHealthStateChunks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PartitionHealthStateChunk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PartitionHealthStateChunk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PartitionHealthStateChunk is not found in the empty JSON string", PartitionHealthStateChunk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PartitionHealthStateChunk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PartitionHealthStateChunk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `HealthState`
      if (jsonObj.get("HealthState") != null && !jsonObj.get("HealthState").isJsonNull()) {
        HealthState.validateJsonElement(jsonObj.get("HealthState"));
      }
      if ((jsonObj.get("PartitionId") != null && !jsonObj.get("PartitionId").isJsonNull()) && !jsonObj.get("PartitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionId").toString()));
      }
      // validate the optional field `ReplicaHealthStateChunks`
      if (jsonObj.get("ReplicaHealthStateChunks") != null && !jsonObj.get("ReplicaHealthStateChunks").isJsonNull()) {
        ReplicaHealthStateChunkList.validateJsonElement(jsonObj.get("ReplicaHealthStateChunks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PartitionHealthStateChunk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PartitionHealthStateChunk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PartitionHealthStateChunk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PartitionHealthStateChunk.class));

       return (TypeAdapter<T>) new TypeAdapter<PartitionHealthStateChunk>() {
           @Override
           public void write(JsonWriter out, PartitionHealthStateChunk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PartitionHealthStateChunk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PartitionHealthStateChunk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PartitionHealthStateChunk
   * @throws IOException if the JSON string is invalid with respect to PartitionHealthStateChunk
   */
  public static PartitionHealthStateChunk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PartitionHealthStateChunk.class);
  }

  /**
   * Convert an instance of PartitionHealthStateChunk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

