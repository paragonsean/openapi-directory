/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NodeDeactivationIntent;
import org.openapitools.client.model.NodeDeactivationStatus;
import org.openapitools.client.model.NodeDeactivationTask;
import org.openapitools.client.model.SafetyCheckWrapper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the node deactivation. This information is valid for a node that is undergoing deactivation or has already been deactivated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeDeactivationInfo {
  public static final String SERIALIZED_NAME_NODE_DEACTIVATION_INTENT = "NodeDeactivationIntent";
  @SerializedName(SERIALIZED_NAME_NODE_DEACTIVATION_INTENT)
  private NodeDeactivationIntent nodeDeactivationIntent;

  public static final String SERIALIZED_NAME_NODE_DEACTIVATION_STATUS = "NodeDeactivationStatus";
  @SerializedName(SERIALIZED_NAME_NODE_DEACTIVATION_STATUS)
  private NodeDeactivationStatus nodeDeactivationStatus;

  public static final String SERIALIZED_NAME_NODE_DEACTIVATION_TASK = "NodeDeactivationTask";
  @SerializedName(SERIALIZED_NAME_NODE_DEACTIVATION_TASK)
  private List<NodeDeactivationTask> nodeDeactivationTask = new ArrayList<>();

  public static final String SERIALIZED_NAME_PENDING_SAFETY_CHECKS = "PendingSafetyChecks";
  @SerializedName(SERIALIZED_NAME_PENDING_SAFETY_CHECKS)
  private List<SafetyCheckWrapper> pendingSafetyChecks = new ArrayList<>();

  public NodeDeactivationInfo() {
  }

  public NodeDeactivationInfo nodeDeactivationIntent(NodeDeactivationIntent nodeDeactivationIntent) {
    this.nodeDeactivationIntent = nodeDeactivationIntent;
    return this;
  }

  /**
   * Get nodeDeactivationIntent
   * @return nodeDeactivationIntent
   */
  @javax.annotation.Nullable
  public NodeDeactivationIntent getNodeDeactivationIntent() {
    return nodeDeactivationIntent;
  }

  public void setNodeDeactivationIntent(NodeDeactivationIntent nodeDeactivationIntent) {
    this.nodeDeactivationIntent = nodeDeactivationIntent;
  }


  public NodeDeactivationInfo nodeDeactivationStatus(NodeDeactivationStatus nodeDeactivationStatus) {
    this.nodeDeactivationStatus = nodeDeactivationStatus;
    return this;
  }

  /**
   * Get nodeDeactivationStatus
   * @return nodeDeactivationStatus
   */
  @javax.annotation.Nullable
  public NodeDeactivationStatus getNodeDeactivationStatus() {
    return nodeDeactivationStatus;
  }

  public void setNodeDeactivationStatus(NodeDeactivationStatus nodeDeactivationStatus) {
    this.nodeDeactivationStatus = nodeDeactivationStatus;
  }


  public NodeDeactivationInfo nodeDeactivationTask(List<NodeDeactivationTask> nodeDeactivationTask) {
    this.nodeDeactivationTask = nodeDeactivationTask;
    return this;
  }

  public NodeDeactivationInfo addNodeDeactivationTaskItem(NodeDeactivationTask nodeDeactivationTaskItem) {
    if (this.nodeDeactivationTask == null) {
      this.nodeDeactivationTask = new ArrayList<>();
    }
    this.nodeDeactivationTask.add(nodeDeactivationTaskItem);
    return this;
  }

  /**
   * List of tasks representing the deactivation operation on the node.
   * @return nodeDeactivationTask
   */
  @javax.annotation.Nullable
  public List<NodeDeactivationTask> getNodeDeactivationTask() {
    return nodeDeactivationTask;
  }

  public void setNodeDeactivationTask(List<NodeDeactivationTask> nodeDeactivationTask) {
    this.nodeDeactivationTask = nodeDeactivationTask;
  }


  public NodeDeactivationInfo pendingSafetyChecks(List<SafetyCheckWrapper> pendingSafetyChecks) {
    this.pendingSafetyChecks = pendingSafetyChecks;
    return this;
  }

  public NodeDeactivationInfo addPendingSafetyChecksItem(SafetyCheckWrapper pendingSafetyChecksItem) {
    if (this.pendingSafetyChecks == null) {
      this.pendingSafetyChecks = new ArrayList<>();
    }
    this.pendingSafetyChecks.add(pendingSafetyChecksItem);
    return this;
  }

  /**
   * List of pending safety checks
   * @return pendingSafetyChecks
   */
  @javax.annotation.Nullable
  public List<SafetyCheckWrapper> getPendingSafetyChecks() {
    return pendingSafetyChecks;
  }

  public void setPendingSafetyChecks(List<SafetyCheckWrapper> pendingSafetyChecks) {
    this.pendingSafetyChecks = pendingSafetyChecks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeDeactivationInfo nodeDeactivationInfo = (NodeDeactivationInfo) o;
    return Objects.equals(this.nodeDeactivationIntent, nodeDeactivationInfo.nodeDeactivationIntent) &&
        Objects.equals(this.nodeDeactivationStatus, nodeDeactivationInfo.nodeDeactivationStatus) &&
        Objects.equals(this.nodeDeactivationTask, nodeDeactivationInfo.nodeDeactivationTask) &&
        Objects.equals(this.pendingSafetyChecks, nodeDeactivationInfo.pendingSafetyChecks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeDeactivationIntent, nodeDeactivationStatus, nodeDeactivationTask, pendingSafetyChecks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeDeactivationInfo {\n");
    sb.append("    nodeDeactivationIntent: ").append(toIndentedString(nodeDeactivationIntent)).append("\n");
    sb.append("    nodeDeactivationStatus: ").append(toIndentedString(nodeDeactivationStatus)).append("\n");
    sb.append("    nodeDeactivationTask: ").append(toIndentedString(nodeDeactivationTask)).append("\n");
    sb.append("    pendingSafetyChecks: ").append(toIndentedString(pendingSafetyChecks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NodeDeactivationIntent");
    openapiFields.add("NodeDeactivationStatus");
    openapiFields.add("NodeDeactivationTask");
    openapiFields.add("PendingSafetyChecks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeDeactivationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeDeactivationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeDeactivationInfo is not found in the empty JSON string", NodeDeactivationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeDeactivationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeDeactivationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NodeDeactivationIntent`
      if (jsonObj.get("NodeDeactivationIntent") != null && !jsonObj.get("NodeDeactivationIntent").isJsonNull()) {
        NodeDeactivationIntent.validateJsonElement(jsonObj.get("NodeDeactivationIntent"));
      }
      // validate the optional field `NodeDeactivationStatus`
      if (jsonObj.get("NodeDeactivationStatus") != null && !jsonObj.get("NodeDeactivationStatus").isJsonNull()) {
        NodeDeactivationStatus.validateJsonElement(jsonObj.get("NodeDeactivationStatus"));
      }
      if (jsonObj.get("NodeDeactivationTask") != null && !jsonObj.get("NodeDeactivationTask").isJsonNull()) {
        JsonArray jsonArraynodeDeactivationTask = jsonObj.getAsJsonArray("NodeDeactivationTask");
        if (jsonArraynodeDeactivationTask != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NodeDeactivationTask").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NodeDeactivationTask` to be an array in the JSON string but got `%s`", jsonObj.get("NodeDeactivationTask").toString()));
          }

          // validate the optional field `NodeDeactivationTask` (array)
          for (int i = 0; i < jsonArraynodeDeactivationTask.size(); i++) {
            NodeDeactivationTask.validateJsonElement(jsonArraynodeDeactivationTask.get(i));
          };
        }
      }
      if (jsonObj.get("PendingSafetyChecks") != null && !jsonObj.get("PendingSafetyChecks").isJsonNull()) {
        JsonArray jsonArraypendingSafetyChecks = jsonObj.getAsJsonArray("PendingSafetyChecks");
        if (jsonArraypendingSafetyChecks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PendingSafetyChecks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PendingSafetyChecks` to be an array in the JSON string but got `%s`", jsonObj.get("PendingSafetyChecks").toString()));
          }

          // validate the optional field `PendingSafetyChecks` (array)
          for (int i = 0; i < jsonArraypendingSafetyChecks.size(); i++) {
            SafetyCheckWrapper.validateJsonElement(jsonArraypendingSafetyChecks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeDeactivationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeDeactivationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeDeactivationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeDeactivationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeDeactivationInfo>() {
           @Override
           public void write(JsonWriter out, NodeDeactivationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeDeactivationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeDeactivationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeDeactivationInfo
   * @throws IOException if the JSON string is invalid with respect to NodeDeactivationInfo
   */
  public static NodeDeactivationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeDeactivationInfo.class);
  }

  /**
   * Convert an instance of NodeDeactivationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

