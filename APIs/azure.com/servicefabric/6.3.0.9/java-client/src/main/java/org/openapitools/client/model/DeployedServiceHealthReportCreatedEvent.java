/*
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.ApplicationEvent;
import org.openapitools.client.model.FabricEventKind;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deployed Service Health Report Created event.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:56:48.965186-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployedServiceHealthReportCreatedEvent extends ApplicationEvent {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "HealthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private String healthState;

  public static final String SERIALIZED_NAME_NODE_NAME = "NodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_PROPERTY = "Property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private String property;

  public static final String SERIALIZED_NAME_REMOVE_WHEN_EXPIRED = "RemoveWhenExpired";
  @SerializedName(SERIALIZED_NAME_REMOVE_WHEN_EXPIRED)
  private Boolean removeWhenExpired;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Long sequenceNumber;

  public static final String SERIALIZED_NAME_SERVICE_MANIFEST_NAME = "ServiceManifestName";
  @SerializedName(SERIALIZED_NAME_SERVICE_MANIFEST_NAME)
  private String serviceManifestName;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID = "ServicePackageActivationId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_ACTIVATION_ID)
  private String servicePackageActivationId;

  public static final String SERIALIZED_NAME_SERVICE_PACKAGE_INSTANCE_ID = "ServicePackageInstanceId";
  @SerializedName(SERIALIZED_NAME_SERVICE_PACKAGE_INSTANCE_ID)
  private Long servicePackageInstanceId;

  public static final String SERIALIZED_NAME_SOURCE_ID = "SourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_UTC_TIMESTAMP = "SourceUtcTimestamp";
  @SerializedName(SERIALIZED_NAME_SOURCE_UTC_TIMESTAMP)
  private OffsetDateTime sourceUtcTimestamp;

  public static final String SERIALIZED_NAME_TT_L_TIMESPAN = "TTLTimespan";
  @SerializedName(SERIALIZED_NAME_TT_L_TIMESPAN)
  private Long ttLTimespan;

  public DeployedServiceHealthReportCreatedEvent() {
    this.kind = this.getClass().getSimpleName();
  }

  public DeployedServiceHealthReportCreatedEvent description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of report.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DeployedServiceHealthReportCreatedEvent healthState(String healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Describes the property health state.
   * @return healthState
   */
  @javax.annotation.Nonnull
  public String getHealthState() {
    return healthState;
  }

  public void setHealthState(String healthState) {
    this.healthState = healthState;
  }


  public DeployedServiceHealthReportCreatedEvent nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  /**
   * The name of a Service Fabric node.
   * @return nodeName
   */
  @javax.annotation.Nonnull
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }


  public DeployedServiceHealthReportCreatedEvent property(String property) {
    this.property = property;
    return this;
  }

  /**
   * Describes the property.
   * @return property
   */
  @javax.annotation.Nonnull
  public String getProperty() {
    return property;
  }

  public void setProperty(String property) {
    this.property = property;
  }


  public DeployedServiceHealthReportCreatedEvent removeWhenExpired(Boolean removeWhenExpired) {
    this.removeWhenExpired = removeWhenExpired;
    return this;
  }

  /**
   * Indicates the removal when it expires.
   * @return removeWhenExpired
   */
  @javax.annotation.Nonnull
  public Boolean getRemoveWhenExpired() {
    return removeWhenExpired;
  }

  public void setRemoveWhenExpired(Boolean removeWhenExpired) {
    this.removeWhenExpired = removeWhenExpired;
  }


  public DeployedServiceHealthReportCreatedEvent sequenceNumber(Long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * Sequence number of report.
   * @return sequenceNumber
   */
  @javax.annotation.Nonnull
  public Long getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(Long sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public DeployedServiceHealthReportCreatedEvent serviceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
    return this;
  }

  /**
   * Service manifest name.
   * @return serviceManifestName
   */
  @javax.annotation.Nonnull
  public String getServiceManifestName() {
    return serviceManifestName;
  }

  public void setServiceManifestName(String serviceManifestName) {
    this.serviceManifestName = serviceManifestName;
  }


  public DeployedServiceHealthReportCreatedEvent servicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
    return this;
  }

  /**
   * Id of Service package activation.
   * @return servicePackageActivationId
   */
  @javax.annotation.Nonnull
  public String getServicePackageActivationId() {
    return servicePackageActivationId;
  }

  public void setServicePackageActivationId(String servicePackageActivationId) {
    this.servicePackageActivationId = servicePackageActivationId;
  }


  public DeployedServiceHealthReportCreatedEvent servicePackageInstanceId(Long servicePackageInstanceId) {
    this.servicePackageInstanceId = servicePackageInstanceId;
    return this;
  }

  /**
   * Id of Service package instance.
   * @return servicePackageInstanceId
   */
  @javax.annotation.Nonnull
  public Long getServicePackageInstanceId() {
    return servicePackageInstanceId;
  }

  public void setServicePackageInstanceId(Long servicePackageInstanceId) {
    this.servicePackageInstanceId = servicePackageInstanceId;
  }


  public DeployedServiceHealthReportCreatedEvent sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Id of report source.
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public DeployedServiceHealthReportCreatedEvent sourceUtcTimestamp(OffsetDateTime sourceUtcTimestamp) {
    this.sourceUtcTimestamp = sourceUtcTimestamp;
    return this;
  }

  /**
   * Source time.
   * @return sourceUtcTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSourceUtcTimestamp() {
    return sourceUtcTimestamp;
  }

  public void setSourceUtcTimestamp(OffsetDateTime sourceUtcTimestamp) {
    this.sourceUtcTimestamp = sourceUtcTimestamp;
  }


  public DeployedServiceHealthReportCreatedEvent ttLTimespan(Long ttLTimespan) {
    this.ttLTimespan = ttLTimespan;
    return this;
  }

  /**
   * Time to live in milli-seconds.
   * @return ttLTimespan
   */
  @javax.annotation.Nonnull
  public Long getTtLTimespan() {
    return ttLTimespan;
  }

  public void setTtLTimespan(Long ttLTimespan) {
    this.ttLTimespan = ttLTimespan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployedServiceHealthReportCreatedEvent deployedServiceHealthReportCreatedEvent = (DeployedServiceHealthReportCreatedEvent) o;
    return Objects.equals(this.description, deployedServiceHealthReportCreatedEvent.description) &&
        Objects.equals(this.healthState, deployedServiceHealthReportCreatedEvent.healthState) &&
        Objects.equals(this.nodeName, deployedServiceHealthReportCreatedEvent.nodeName) &&
        Objects.equals(this.property, deployedServiceHealthReportCreatedEvent.property) &&
        Objects.equals(this.removeWhenExpired, deployedServiceHealthReportCreatedEvent.removeWhenExpired) &&
        Objects.equals(this.sequenceNumber, deployedServiceHealthReportCreatedEvent.sequenceNumber) &&
        Objects.equals(this.serviceManifestName, deployedServiceHealthReportCreatedEvent.serviceManifestName) &&
        Objects.equals(this.servicePackageActivationId, deployedServiceHealthReportCreatedEvent.servicePackageActivationId) &&
        Objects.equals(this.servicePackageInstanceId, deployedServiceHealthReportCreatedEvent.servicePackageInstanceId) &&
        Objects.equals(this.sourceId, deployedServiceHealthReportCreatedEvent.sourceId) &&
        Objects.equals(this.sourceUtcTimestamp, deployedServiceHealthReportCreatedEvent.sourceUtcTimestamp) &&
        Objects.equals(this.ttLTimespan, deployedServiceHealthReportCreatedEvent.ttLTimespan) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, healthState, nodeName, property, removeWhenExpired, sequenceNumber, serviceManifestName, servicePackageActivationId, servicePackageInstanceId, sourceId, sourceUtcTimestamp, ttLTimespan, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployedServiceHealthReportCreatedEvent {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    removeWhenExpired: ").append(toIndentedString(removeWhenExpired)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    serviceManifestName: ").append(toIndentedString(serviceManifestName)).append("\n");
    sb.append("    servicePackageActivationId: ").append(toIndentedString(servicePackageActivationId)).append("\n");
    sb.append("    servicePackageInstanceId: ").append(toIndentedString(servicePackageInstanceId)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceUtcTimestamp: ").append(toIndentedString(sourceUtcTimestamp)).append("\n");
    sb.append("    ttLTimespan: ").append(toIndentedString(ttLTimespan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EventInstanceId");
    openapiFields.add("HasCorrelatedEvents");
    openapiFields.add("Kind");
    openapiFields.add("TimeStamp");
    openapiFields.add("ApplicationId");
    openapiFields.add("Description");
    openapiFields.add("HealthState");
    openapiFields.add("NodeName");
    openapiFields.add("Property");
    openapiFields.add("RemoveWhenExpired");
    openapiFields.add("SequenceNumber");
    openapiFields.add("ServiceManifestName");
    openapiFields.add("ServicePackageActivationId");
    openapiFields.add("ServicePackageInstanceId");
    openapiFields.add("SourceId");
    openapiFields.add("SourceUtcTimestamp");
    openapiFields.add("TTLTimespan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Description");
    openapiRequiredFields.add("HealthState");
    openapiRequiredFields.add("NodeName");
    openapiRequiredFields.add("Property");
    openapiRequiredFields.add("RemoveWhenExpired");
    openapiRequiredFields.add("SequenceNumber");
    openapiRequiredFields.add("ServiceManifestName");
    openapiRequiredFields.add("ServicePackageActivationId");
    openapiRequiredFields.add("ServicePackageInstanceId");
    openapiRequiredFields.add("SourceId");
    openapiRequiredFields.add("SourceUtcTimestamp");
    openapiRequiredFields.add("TTLTimespan");
    openapiRequiredFields.add("EventInstanceId");
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("TimeStamp");
    openapiRequiredFields.add("ApplicationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployedServiceHealthReportCreatedEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployedServiceHealthReportCreatedEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployedServiceHealthReportCreatedEvent is not found in the empty JSON string", DeployedServiceHealthReportCreatedEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployedServiceHealthReportCreatedEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployedServiceHealthReportCreatedEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeployedServiceHealthReportCreatedEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployedServiceHealthReportCreatedEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployedServiceHealthReportCreatedEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployedServiceHealthReportCreatedEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployedServiceHealthReportCreatedEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployedServiceHealthReportCreatedEvent>() {
           @Override
           public void write(JsonWriter out, DeployedServiceHealthReportCreatedEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployedServiceHealthReportCreatedEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployedServiceHealthReportCreatedEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployedServiceHealthReportCreatedEvent
   * @throws IOException if the JSON string is invalid with respect to DeployedServiceHealthReportCreatedEvent
   */
  public static DeployedServiceHealthReportCreatedEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployedServiceHealthReportCreatedEvent.class);
  }

  /**
   * Convert an instance of DeployedServiceHealthReportCreatedEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

