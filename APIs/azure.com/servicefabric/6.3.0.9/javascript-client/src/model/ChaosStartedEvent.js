/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterEvent from './ClusterEvent';
import FabricEventKind from './FabricEventKind';

/**
 * The ChaosStartedEvent model module.
 * @module model/ChaosStartedEvent
 * @version 6.3.0.9
 */
class ChaosStartedEvent {
    /**
     * Constructs a new <code>ChaosStartedEvent</code>.
     * Chaos Started event.
     * @alias module:model/ChaosStartedEvent
     * @extends module:model/ClusterEvent
     * @implements module:model/ClusterEvent
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     * @param chaosContext {String} Chaos Context.
     * @param clusterHealthPolicy {String} Health policy.
     * @param includedApplicationList {String} List of included Applications.
     * @param includedNodeTypeList {String} List of included Node types.
     * @param maxClusterStabilizationTimeoutInSeconds {Number} Maximum timeout for cluster stabilization in seconds.
     * @param maxConcurrentFaults {Number} Maximum number of concurrent faults.
     * @param moveReplicaFaultEnabled {Boolean} Indicates MoveReplica fault is enabled.
     * @param timeToRunInSeconds {Number} Time to run in seconds.
     * @param waitTimeBetweenFautlsInSeconds {Number} Wait time between faults in seconds.
     * @param waitTimeBetweenIterationsInSeconds {Number} Wait time between iterations in seconds.
     */
    constructor(eventInstanceId, kind, timeStamp, chaosContext, clusterHealthPolicy, includedApplicationList, includedNodeTypeList, maxClusterStabilizationTimeoutInSeconds, maxConcurrentFaults, moveReplicaFaultEnabled, timeToRunInSeconds, waitTimeBetweenFautlsInSeconds, waitTimeBetweenIterationsInSeconds) { 
        ClusterEvent.initialize(this, eventInstanceId, kind, timeStamp);
        ChaosStartedEvent.initialize(this, eventInstanceId, kind, timeStamp, chaosContext, clusterHealthPolicy, includedApplicationList, includedNodeTypeList, maxClusterStabilizationTimeoutInSeconds, maxConcurrentFaults, moveReplicaFaultEnabled, timeToRunInSeconds, waitTimeBetweenFautlsInSeconds, waitTimeBetweenIterationsInSeconds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventInstanceId, kind, timeStamp, chaosContext, clusterHealthPolicy, includedApplicationList, includedNodeTypeList, maxClusterStabilizationTimeoutInSeconds, maxConcurrentFaults, moveReplicaFaultEnabled, timeToRunInSeconds, waitTimeBetweenFautlsInSeconds, waitTimeBetweenIterationsInSeconds) { 
        obj['ChaosContext'] = chaosContext;
        obj['ClusterHealthPolicy'] = clusterHealthPolicy;
        obj['IncludedApplicationList'] = includedApplicationList;
        obj['IncludedNodeTypeList'] = includedNodeTypeList;
        obj['MaxClusterStabilizationTimeoutInSeconds'] = maxClusterStabilizationTimeoutInSeconds;
        obj['MaxConcurrentFaults'] = maxConcurrentFaults;
        obj['MoveReplicaFaultEnabled'] = moveReplicaFaultEnabled;
        obj['TimeToRunInSeconds'] = timeToRunInSeconds;
        obj['WaitTimeBetweenFautlsInSeconds'] = waitTimeBetweenFautlsInSeconds;
        obj['WaitTimeBetweenIterationsInSeconds'] = waitTimeBetweenIterationsInSeconds;
    }

    /**
     * Constructs a <code>ChaosStartedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChaosStartedEvent} obj Optional instance to populate.
     * @return {module:model/ChaosStartedEvent} The populated <code>ChaosStartedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChaosStartedEvent();
            ClusterEvent.constructFromObject(data, obj);
            ClusterEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('ChaosContext')) {
                obj['ChaosContext'] = ApiClient.convertToType(data['ChaosContext'], 'String');
            }
            if (data.hasOwnProperty('ClusterHealthPolicy')) {
                obj['ClusterHealthPolicy'] = ApiClient.convertToType(data['ClusterHealthPolicy'], 'String');
            }
            if (data.hasOwnProperty('IncludedApplicationList')) {
                obj['IncludedApplicationList'] = ApiClient.convertToType(data['IncludedApplicationList'], 'String');
            }
            if (data.hasOwnProperty('IncludedNodeTypeList')) {
                obj['IncludedNodeTypeList'] = ApiClient.convertToType(data['IncludedNodeTypeList'], 'String');
            }
            if (data.hasOwnProperty('MaxClusterStabilizationTimeoutInSeconds')) {
                obj['MaxClusterStabilizationTimeoutInSeconds'] = ApiClient.convertToType(data['MaxClusterStabilizationTimeoutInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('MaxConcurrentFaults')) {
                obj['MaxConcurrentFaults'] = ApiClient.convertToType(data['MaxConcurrentFaults'], 'Number');
            }
            if (data.hasOwnProperty('MoveReplicaFaultEnabled')) {
                obj['MoveReplicaFaultEnabled'] = ApiClient.convertToType(data['MoveReplicaFaultEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('TimeToRunInSeconds')) {
                obj['TimeToRunInSeconds'] = ApiClient.convertToType(data['TimeToRunInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('WaitTimeBetweenFautlsInSeconds')) {
                obj['WaitTimeBetweenFautlsInSeconds'] = ApiClient.convertToType(data['WaitTimeBetweenFautlsInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('WaitTimeBetweenIterationsInSeconds')) {
                obj['WaitTimeBetweenIterationsInSeconds'] = ApiClient.convertToType(data['WaitTimeBetweenIterationsInSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChaosStartedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChaosStartedEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChaosStartedEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ChaosContext'] && !(typeof data['ChaosContext'] === 'string' || data['ChaosContext'] instanceof String)) {
            throw new Error("Expected the field `ChaosContext` to be a primitive type in the JSON string but got " + data['ChaosContext']);
        }
        // ensure the json data is a string
        if (data['ClusterHealthPolicy'] && !(typeof data['ClusterHealthPolicy'] === 'string' || data['ClusterHealthPolicy'] instanceof String)) {
            throw new Error("Expected the field `ClusterHealthPolicy` to be a primitive type in the JSON string but got " + data['ClusterHealthPolicy']);
        }
        // ensure the json data is a string
        if (data['IncludedApplicationList'] && !(typeof data['IncludedApplicationList'] === 'string' || data['IncludedApplicationList'] instanceof String)) {
            throw new Error("Expected the field `IncludedApplicationList` to be a primitive type in the JSON string but got " + data['IncludedApplicationList']);
        }
        // ensure the json data is a string
        if (data['IncludedNodeTypeList'] && !(typeof data['IncludedNodeTypeList'] === 'string' || data['IncludedNodeTypeList'] instanceof String)) {
            throw new Error("Expected the field `IncludedNodeTypeList` to be a primitive type in the JSON string but got " + data['IncludedNodeTypeList']);
        }

        return true;
    }


}

ChaosStartedEvent.RequiredProperties = ["ChaosContext", "ClusterHealthPolicy", "IncludedApplicationList", "IncludedNodeTypeList", "MaxClusterStabilizationTimeoutInSeconds", "MaxConcurrentFaults", "MoveReplicaFaultEnabled", "TimeToRunInSeconds", "WaitTimeBetweenFautlsInSeconds", "WaitTimeBetweenIterationsInSeconds", "EventInstanceId", "Kind", "TimeStamp"];

/**
 * Chaos Context.
 * @member {String} ChaosContext
 */
ChaosStartedEvent.prototype['ChaosContext'] = undefined;

/**
 * Health policy.
 * @member {String} ClusterHealthPolicy
 */
ChaosStartedEvent.prototype['ClusterHealthPolicy'] = undefined;

/**
 * List of included Applications.
 * @member {String} IncludedApplicationList
 */
ChaosStartedEvent.prototype['IncludedApplicationList'] = undefined;

/**
 * List of included Node types.
 * @member {String} IncludedNodeTypeList
 */
ChaosStartedEvent.prototype['IncludedNodeTypeList'] = undefined;

/**
 * Maximum timeout for cluster stabilization in seconds.
 * @member {Number} MaxClusterStabilizationTimeoutInSeconds
 */
ChaosStartedEvent.prototype['MaxClusterStabilizationTimeoutInSeconds'] = undefined;

/**
 * Maximum number of concurrent faults.
 * @member {Number} MaxConcurrentFaults
 */
ChaosStartedEvent.prototype['MaxConcurrentFaults'] = undefined;

/**
 * Indicates MoveReplica fault is enabled.
 * @member {Boolean} MoveReplicaFaultEnabled
 */
ChaosStartedEvent.prototype['MoveReplicaFaultEnabled'] = undefined;

/**
 * Time to run in seconds.
 * @member {Number} TimeToRunInSeconds
 */
ChaosStartedEvent.prototype['TimeToRunInSeconds'] = undefined;

/**
 * Wait time between faults in seconds.
 * @member {Number} WaitTimeBetweenFautlsInSeconds
 */
ChaosStartedEvent.prototype['WaitTimeBetweenFautlsInSeconds'] = undefined;

/**
 * Wait time between iterations in seconds.
 * @member {Number} WaitTimeBetweenIterationsInSeconds
 */
ChaosStartedEvent.prototype['WaitTimeBetweenIterationsInSeconds'] = undefined;


// Implement ClusterEvent interface:
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
ClusterEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
ClusterEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
ClusterEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
ClusterEvent.prototype['TimeStamp'] = undefined;




export default ChaosStartedEvent;

