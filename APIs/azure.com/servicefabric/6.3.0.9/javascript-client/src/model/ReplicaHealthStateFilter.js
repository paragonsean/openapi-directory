/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ReplicaHealthStateFilter model module.
 * @module model/ReplicaHealthStateFilter
 * @version 6.3.0.9
 */
class ReplicaHealthStateFilter {
    /**
     * Constructs a new <code>ReplicaHealthStateFilter</code>.
     * Defines matching criteria to determine whether a replica should be included as a child of a partition in the cluster health chunk. The replicas are only returned if the parent entities match a filter specified in the cluster health chunk query description. The parent partition, service and application must be included in the cluster health chunk. One filter can match zero, one or multiple replicas, depending on its properties.
     * @alias module:model/ReplicaHealthStateFilter
     */
    constructor() { 
        
        ReplicaHealthStateFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicaHealthStateFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicaHealthStateFilter} obj Optional instance to populate.
     * @return {module:model/ReplicaHealthStateFilter} The populated <code>ReplicaHealthStateFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicaHealthStateFilter();

            if (data.hasOwnProperty('HealthStateFilter')) {
                obj['HealthStateFilter'] = ApiClient.convertToType(data['HealthStateFilter'], 'Number');
            }
            if (data.hasOwnProperty('ReplicaOrInstanceIdFilter')) {
                obj['ReplicaOrInstanceIdFilter'] = ApiClient.convertToType(data['ReplicaOrInstanceIdFilter'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicaHealthStateFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicaHealthStateFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ReplicaOrInstanceIdFilter'] && !(typeof data['ReplicaOrInstanceIdFilter'] === 'string' || data['ReplicaOrInstanceIdFilter'] instanceof String)) {
            throw new Error("Expected the field `ReplicaOrInstanceIdFilter` to be a primitive type in the JSON string but got " + data['ReplicaOrInstanceIdFilter']);
        }

        return true;
    }


}



/**
 * The filter for the health state of the replicas. It allows selecting replicas if they match the desired health states. The possible values are integer value of one of the following health states. Only replicas that match the filter are returned. All replicas are used to evaluate the parent partition aggregated health state. If not specified, default value is None, unless the replica ID is specified. If the filter has default value and replica ID is specified, the matching replica is returned. The state values are flag-based enumeration, so the value could be a combination of these values obtained using bitwise 'OR' operator. For example, if the provided value is 6, it matches replicas with HealthState value of OK (2) and Warning (4).  - Default - Default value. Matches any HealthState. The value is zero. - None - Filter that doesn't match any HealthState value. Used in order to return no results on a given collection of states. The value is 1. - Ok - Filter that matches input with HealthState value Ok. The value is 2. - Warning - Filter that matches input with HealthState value Warning. The value is 4. - Error - Filter that matches input with HealthState value Error. The value is 8. - All - Filter that matches input with any HealthState value. The value is 65535.
 * @member {Number} HealthStateFilter
 */
ReplicaHealthStateFilter.prototype['HealthStateFilter'] = undefined;

/**
 * Id of the stateful service replica or stateless service instance that matches the filter. The filter is applied only to the specified replica, if it exists. If the replica doesn't exist, no replica is returned in the cluster health chunk based on this filter. If the replica exists, it is included in the cluster health chunk if it respects the other filter properties. If not specified, all replicas that match the parent filters (if any) are taken into consideration and matched against the other filter members, like health state filter.
 * @member {String} ReplicaOrInstanceIdFilter
 */
ReplicaHealthStateFilter.prototype['ReplicaOrInstanceIdFilter'] = undefined;






export default ReplicaHealthStateFilter;

