/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoveCost from './MoveCost';
import PartitionSchemeDescription from './PartitionSchemeDescription';
import ScalingPolicyDescription from './ScalingPolicyDescription';
import ServiceCorrelationDescription from './ServiceCorrelationDescription';
import ServiceDescription from './ServiceDescription';
import ServiceKind from './ServiceKind';
import ServiceLoadMetricDescription from './ServiceLoadMetricDescription';
import ServicePackageActivationMode from './ServicePackageActivationMode';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';

/**
 * The StatelessServiceDescription model module.
 * @module model/StatelessServiceDescription
 * @version 6.3.0.9
 */
class StatelessServiceDescription {
    /**
     * Constructs a new <code>StatelessServiceDescription</code>.
     * Describes a stateless service.
     * @alias module:model/StatelessServiceDescription
     * @extends module:model/ServiceDescription
     * @implements module:model/ServiceDescription
     * @param partitionDescription {module:model/PartitionSchemeDescription} 
     * @param serviceKind {module:model/ServiceKind} 
     * @param serviceName {String} The full name of the service with 'fabric:' URI scheme.
     * @param serviceTypeName {String} Name of the service type as specified in the service manifest.
     */
    constructor(partitionDescription, serviceKind, serviceName, serviceTypeName) { 
        ServiceDescription.initialize(this, partitionDescription, serviceKind, serviceName, serviceTypeName);
        StatelessServiceDescription.initialize(this, partitionDescription, serviceKind, serviceName, serviceTypeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, partitionDescription, serviceKind, serviceName, serviceTypeName) { 
        obj['InstanceCount'] = instanceCount;
    }

    /**
     * Constructs a <code>StatelessServiceDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatelessServiceDescription} obj Optional instance to populate.
     * @return {module:model/StatelessServiceDescription} The populated <code>StatelessServiceDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatelessServiceDescription();
            ServiceDescription.constructFromObject(data, obj);
            ServiceDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('InstanceCount')) {
                obj['InstanceCount'] = ApiClient.convertToType(data['InstanceCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatelessServiceDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatelessServiceDescription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StatelessServiceDescription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

StatelessServiceDescription.RequiredProperties = ["InstanceCount", "PartitionDescription", "ServiceKind", "ServiceName", "ServiceTypeName"];

/**
 * The instance count.
 * @member {Number} InstanceCount
 */
StatelessServiceDescription.prototype['InstanceCount'] = undefined;


// Implement ServiceDescription interface:
/**
 * The name of the application, including the 'fabric:' URI scheme.
 * @member {String} ApplicationName
 */
ServiceDescription.prototype['ApplicationName'] = undefined;
/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServiceCorrelationDescription>} CorrelationScheme
 */
ServiceDescription.prototype['CorrelationScheme'] = undefined;
/**
 * @member {module:model/MoveCost} DefaultMoveCost
 */
ServiceDescription.prototype['DefaultMoveCost'] = undefined;
/**
 * Array of bytes to be sent as an integer array. Each element of array is a number between 0 and 255.
 * @member {Array.<Number>} InitializationData
 */
ServiceDescription.prototype['InitializationData'] = undefined;
/**
 * Indicates if the DefaultMoveCost property is specified.
 * @member {Boolean} IsDefaultMoveCostSpecified
 */
ServiceDescription.prototype['IsDefaultMoveCostSpecified'] = undefined;
/**
 * @member {module:model/PartitionSchemeDescription} PartitionDescription
 */
ServiceDescription.prototype['PartitionDescription'] = undefined;
/**
 * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".
 * @member {String} PlacementConstraints
 */
ServiceDescription.prototype['PlacementConstraints'] = undefined;
/**
 * A list that describes the scaling policies.
 * @member {Array.<module:model/ScalingPolicyDescription>} ScalingPolicies
 */
ServiceDescription.prototype['ScalingPolicies'] = undefined;
/**
 * The DNS name of the service. It requires the DNS system service to be enabled in Service Fabric cluster.
 * @member {String} ServiceDnsName
 */
ServiceDescription.prototype['ServiceDnsName'] = undefined;
/**
 * @member {module:model/ServiceKind} ServiceKind
 */
ServiceDescription.prototype['ServiceKind'] = undefined;
/**
 * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {Array.<module:model/ServiceLoadMetricDescription>} ServiceLoadMetrics
 */
ServiceDescription.prototype['ServiceLoadMetrics'] = undefined;
/**
 * The full name of the service with 'fabric:' URI scheme.
 * @member {String} ServiceName
 */
ServiceDescription.prototype['ServiceName'] = undefined;
/**
 * @member {module:model/ServicePackageActivationMode} ServicePackageActivationMode
 */
ServiceDescription.prototype['ServicePackageActivationMode'] = undefined;
/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServicePlacementPolicyDescription>} ServicePlacementPolicies
 */
ServiceDescription.prototype['ServicePlacementPolicies'] = undefined;
/**
 * Name of the service type as specified in the service manifest.
 * @member {String} ServiceTypeName
 */
ServiceDescription.prototype['ServiceTypeName'] = undefined;




export default StatelessServiceDescription;

