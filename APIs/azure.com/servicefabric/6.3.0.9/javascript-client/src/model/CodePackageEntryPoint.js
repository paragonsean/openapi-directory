/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CodePackageEntryPointStatistics from './CodePackageEntryPointStatistics';
import EntryPointStatus from './EntryPointStatus';

/**
 * The CodePackageEntryPoint model module.
 * @module model/CodePackageEntryPoint
 * @version 6.3.0.9
 */
class CodePackageEntryPoint {
    /**
     * Constructs a new <code>CodePackageEntryPoint</code>.
     * Information about setup or main entry point of a code package deployed on a Service Fabric node.
     * @alias module:model/CodePackageEntryPoint
     */
    constructor() { 
        
        CodePackageEntryPoint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CodePackageEntryPoint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodePackageEntryPoint} obj Optional instance to populate.
     * @return {module:model/CodePackageEntryPoint} The populated <code>CodePackageEntryPoint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodePackageEntryPoint();

            if (data.hasOwnProperty('CodePackageEntryPointStatistics')) {
                obj['CodePackageEntryPointStatistics'] = CodePackageEntryPointStatistics.constructFromObject(data['CodePackageEntryPointStatistics']);
            }
            if (data.hasOwnProperty('EntryPointLocation')) {
                obj['EntryPointLocation'] = ApiClient.convertToType(data['EntryPointLocation'], 'String');
            }
            if (data.hasOwnProperty('InstanceId')) {
                obj['InstanceId'] = ApiClient.convertToType(data['InstanceId'], 'String');
            }
            if (data.hasOwnProperty('NextActivationTime')) {
                obj['NextActivationTime'] = ApiClient.convertToType(data['NextActivationTime'], 'Date');
            }
            if (data.hasOwnProperty('ProcessId')) {
                obj['ProcessId'] = ApiClient.convertToType(data['ProcessId'], 'String');
            }
            if (data.hasOwnProperty('RunAsUserName')) {
                obj['RunAsUserName'] = ApiClient.convertToType(data['RunAsUserName'], 'String');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = EntryPointStatus.constructFromObject(data['Status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodePackageEntryPoint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodePackageEntryPoint</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CodePackageEntryPointStatistics`
        if (data['CodePackageEntryPointStatistics']) { // data not null
          CodePackageEntryPointStatistics.validateJSON(data['CodePackageEntryPointStatistics']);
        }
        // ensure the json data is a string
        if (data['EntryPointLocation'] && !(typeof data['EntryPointLocation'] === 'string' || data['EntryPointLocation'] instanceof String)) {
            throw new Error("Expected the field `EntryPointLocation` to be a primitive type in the JSON string but got " + data['EntryPointLocation']);
        }
        // ensure the json data is a string
        if (data['InstanceId'] && !(typeof data['InstanceId'] === 'string' || data['InstanceId'] instanceof String)) {
            throw new Error("Expected the field `InstanceId` to be a primitive type in the JSON string but got " + data['InstanceId']);
        }
        // ensure the json data is a string
        if (data['ProcessId'] && !(typeof data['ProcessId'] === 'string' || data['ProcessId'] instanceof String)) {
            throw new Error("Expected the field `ProcessId` to be a primitive type in the JSON string but got " + data['ProcessId']);
        }
        // ensure the json data is a string
        if (data['RunAsUserName'] && !(typeof data['RunAsUserName'] === 'string' || data['RunAsUserName'] instanceof String)) {
            throw new Error("Expected the field `RunAsUserName` to be a primitive type in the JSON string but got " + data['RunAsUserName']);
        }

        return true;
    }


}



/**
 * @member {module:model/CodePackageEntryPointStatistics} CodePackageEntryPointStatistics
 */
CodePackageEntryPoint.prototype['CodePackageEntryPointStatistics'] = undefined;

/**
 * The location of entry point executable on the node.
 * @member {String} EntryPointLocation
 */
CodePackageEntryPoint.prototype['EntryPointLocation'] = undefined;

/**
 * The instance ID for current running entry point. For a code package setup entry point (if specified) runs first and after it finishes main entry point is started. Each time entry point executable is run, its instance id will change.
 * @member {String} InstanceId
 */
CodePackageEntryPoint.prototype['InstanceId'] = undefined;

/**
 * The time (in UTC) when the entry point executable will be run next.
 * @member {Date} NextActivationTime
 */
CodePackageEntryPoint.prototype['NextActivationTime'] = undefined;

/**
 * The process ID of the entry point.
 * @member {String} ProcessId
 */
CodePackageEntryPoint.prototype['ProcessId'] = undefined;

/**
 * The user name under which entry point executable is run on the node.
 * @member {String} RunAsUserName
 */
CodePackageEntryPoint.prototype['RunAsUserName'] = undefined;

/**
 * @member {module:model/EntryPointStatus} Status
 */
CodePackageEntryPoint.prototype['Status'] = undefined;






export default CodePackageEntryPoint;

