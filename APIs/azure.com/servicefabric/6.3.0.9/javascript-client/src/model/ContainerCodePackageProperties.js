/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerInstanceView from './ContainerInstanceView';
import ContainerLabel from './ContainerLabel';
import ContainerVolume from './ContainerVolume';
import DiagnosticsRef from './DiagnosticsRef';
import EndpointProperties from './EndpointProperties';
import EnvironmentVariable from './EnvironmentVariable';
import ImageRegistryCredential from './ImageRegistryCredential';
import ResourceRequirements from './ResourceRequirements';
import Setting from './Setting';

/**
 * The ContainerCodePackageProperties model module.
 * @module model/ContainerCodePackageProperties
 * @version 6.3.0.9
 */
class ContainerCodePackageProperties {
    /**
     * Constructs a new <code>ContainerCodePackageProperties</code>.
     * Describes a container and its runtime properties.
     * @alias module:model/ContainerCodePackageProperties
     * @param image {String} The Container image to use.
     * @param name {String} The name of the code package.
     * @param resources {module:model/ResourceRequirements} 
     */
    constructor(image, name, resources) { 
        
        ContainerCodePackageProperties.initialize(this, image, name, resources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image, name, resources) { 
        obj['image'] = image;
        obj['name'] = name;
        obj['resources'] = resources;
    }

    /**
     * Constructs a <code>ContainerCodePackageProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerCodePackageProperties} obj Optional instance to populate.
     * @return {module:model/ContainerCodePackageProperties} The populated <code>ContainerCodePackageProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerCodePackageProperties();

            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], ['String']);
            }
            if (data.hasOwnProperty('diagnostics')) {
                obj['diagnostics'] = DiagnosticsRef.constructFromObject(data['diagnostics']);
            }
            if (data.hasOwnProperty('endpoints')) {
                obj['endpoints'] = ApiClient.convertToType(data['endpoints'], [EndpointProperties]);
            }
            if (data.hasOwnProperty('entrypoint')) {
                obj['entrypoint'] = ApiClient.convertToType(data['entrypoint'], 'String');
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [EnvironmentVariable]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('imageRegistryCredential')) {
                obj['imageRegistryCredential'] = ImageRegistryCredential.constructFromObject(data['imageRegistryCredential']);
            }
            if (data.hasOwnProperty('instanceView')) {
                obj['instanceView'] = ContainerInstanceView.constructFromObject(data['instanceView']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [ContainerLabel]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ResourceRequirements.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = ApiClient.convertToType(data['settings'], [Setting]);
            }
            if (data.hasOwnProperty('volumeRefs')) {
                obj['volumeRefs'] = ApiClient.convertToType(data['volumeRefs'], [ContainerVolume]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerCodePackageProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerCodePackageProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerCodePackageProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['commands'])) {
            throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
        }
        // validate the optional field `diagnostics`
        if (data['diagnostics']) { // data not null
          DiagnosticsRef.validateJSON(data['diagnostics']);
        }
        if (data['endpoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['endpoints'])) {
                throw new Error("Expected the field `endpoints` to be an array in the JSON data but got " + data['endpoints']);
            }
            // validate the optional field `endpoints` (array)
            for (const item of data['endpoints']) {
                EndpointProperties.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['entrypoint'] && !(typeof data['entrypoint'] === 'string' || data['entrypoint'] instanceof String)) {
            throw new Error("Expected the field `entrypoint` to be a primitive type in the JSON string but got " + data['entrypoint']);
        }
        if (data['environmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentVariables'])) {
                throw new Error("Expected the field `environmentVariables` to be an array in the JSON data but got " + data['environmentVariables']);
            }
            // validate the optional field `environmentVariables` (array)
            for (const item of data['environmentVariables']) {
                EnvironmentVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // validate the optional field `imageRegistryCredential`
        if (data['imageRegistryCredential']) { // data not null
          ImageRegistryCredential.validateJSON(data['imageRegistryCredential']);
        }
        // validate the optional field `instanceView`
        if (data['instanceView']) { // data not null
          ContainerInstanceView.validateJSON(data['instanceView']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                ContainerLabel.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          ResourceRequirements.validateJSON(data['resources']);
        }
        if (data['settings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['settings'])) {
                throw new Error("Expected the field `settings` to be an array in the JSON data but got " + data['settings']);
            }
            // validate the optional field `settings` (array)
            for (const item of data['settings']) {
                Setting.validateJSON(item);
            };
        }
        if (data['volumeRefs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeRefs'])) {
                throw new Error("Expected the field `volumeRefs` to be an array in the JSON data but got " + data['volumeRefs']);
            }
            // validate the optional field `volumeRefs` (array)
            for (const item of data['volumeRefs']) {
                ContainerVolume.validateJSON(item);
            };
        }

        return true;
    }


}

ContainerCodePackageProperties.RequiredProperties = ["image", "name", "resources"];

/**
 * Command array to execute within the container in exec form.
 * @member {Array.<String>} commands
 */
ContainerCodePackageProperties.prototype['commands'] = undefined;

/**
 * @member {module:model/DiagnosticsRef} diagnostics
 */
ContainerCodePackageProperties.prototype['diagnostics'] = undefined;

/**
 * The endpoints exposed by this container.
 * @member {Array.<module:model/EndpointProperties>} endpoints
 */
ContainerCodePackageProperties.prototype['endpoints'] = undefined;

/**
 * Override for the default entry point in the container.
 * @member {String} entrypoint
 */
ContainerCodePackageProperties.prototype['entrypoint'] = undefined;

/**
 * The environment variables to set in this container
 * @member {Array.<module:model/EnvironmentVariable>} environmentVariables
 */
ContainerCodePackageProperties.prototype['environmentVariables'] = undefined;

/**
 * The Container image to use.
 * @member {String} image
 */
ContainerCodePackageProperties.prototype['image'] = undefined;

/**
 * @member {module:model/ImageRegistryCredential} imageRegistryCredential
 */
ContainerCodePackageProperties.prototype['imageRegistryCredential'] = undefined;

/**
 * @member {module:model/ContainerInstanceView} instanceView
 */
ContainerCodePackageProperties.prototype['instanceView'] = undefined;

/**
 * The labels to set in this container.
 * @member {Array.<module:model/ContainerLabel>} labels
 */
ContainerCodePackageProperties.prototype['labels'] = undefined;

/**
 * The name of the code package.
 * @member {String} name
 */
ContainerCodePackageProperties.prototype['name'] = undefined;

/**
 * @member {module:model/ResourceRequirements} resources
 */
ContainerCodePackageProperties.prototype['resources'] = undefined;

/**
 * The settings to set in this container. The setting file path can be fetched from environment variable \"Fabric_SettingPath\". The path for Windows container is \"C:\\\\secrets\". The path for Linux container is \"/var/secrets\".
 * @member {Array.<module:model/Setting>} settings
 */
ContainerCodePackageProperties.prototype['settings'] = undefined;

/**
 * The volumes to be attached to the container.
 * @member {Array.<module:model/ContainerVolume>} volumeRefs
 */
ContainerCodePackageProperties.prototype['volumeRefs'] = undefined;






export default ContainerCodePackageProperties;

