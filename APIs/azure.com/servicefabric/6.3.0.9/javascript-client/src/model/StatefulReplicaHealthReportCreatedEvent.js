/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FabricEventKind from './FabricEventKind';
import ReplicaEvent from './ReplicaEvent';

/**
 * The StatefulReplicaHealthReportCreatedEvent model module.
 * @module model/StatefulReplicaHealthReportCreatedEvent
 * @version 6.3.0.9
 */
class StatefulReplicaHealthReportCreatedEvent {
    /**
     * Constructs a new <code>StatefulReplicaHealthReportCreatedEvent</code>.
     * Stateful Replica Health Report Created event.
     * @alias module:model/StatefulReplicaHealthReportCreatedEvent
     * @extends module:model/ReplicaEvent
     * @implements module:model/ReplicaEvent
     * @param eventInstanceId {String} The identifier for the FabricEvent instance.
     * @param kind {module:model/FabricEventKind} 
     * @param timeStamp {Date} The time event was logged.
     * @param partitionId {String} An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
     * @param replicaId {Number} Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
     * @param description {String} Description of report.
     * @param healthState {String} Describes the property health state.
     * @param property {String} Describes the property.
     * @param removeWhenExpired {Boolean} Indicates the removal when it expires.
     * @param replicaInstanceId {Number} Id of Replica instance.
     * @param sequenceNumber {Number} Sequence number of report.
     * @param sourceId {String} Id of report source.
     * @param sourceUtcTimestamp {Date} Source time.
     * @param timeToLiveMs {Number} Time to live in milli-seconds.
     */
    constructor(eventInstanceId, kind, timeStamp, partitionId, replicaId, description, healthState, property, removeWhenExpired, replicaInstanceId, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveMs) { 
        ReplicaEvent.initialize(this, eventInstanceId, kind, timeStamp, partitionId, replicaId);
        StatefulReplicaHealthReportCreatedEvent.initialize(this, eventInstanceId, kind, timeStamp, partitionId, replicaId, description, healthState, property, removeWhenExpired, replicaInstanceId, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveMs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventInstanceId, kind, timeStamp, partitionId, replicaId, description, healthState, property, removeWhenExpired, replicaInstanceId, sequenceNumber, sourceId, sourceUtcTimestamp, timeToLiveMs) { 
        obj['Description'] = description;
        obj['HealthState'] = healthState;
        obj['Property'] = property;
        obj['RemoveWhenExpired'] = removeWhenExpired;
        obj['ReplicaInstanceId'] = replicaInstanceId;
        obj['SequenceNumber'] = sequenceNumber;
        obj['SourceId'] = sourceId;
        obj['SourceUtcTimestamp'] = sourceUtcTimestamp;
        obj['TimeToLiveMs'] = timeToLiveMs;
    }

    /**
     * Constructs a <code>StatefulReplicaHealthReportCreatedEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StatefulReplicaHealthReportCreatedEvent} obj Optional instance to populate.
     * @return {module:model/StatefulReplicaHealthReportCreatedEvent} The populated <code>StatefulReplicaHealthReportCreatedEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StatefulReplicaHealthReportCreatedEvent();
            ReplicaEvent.constructFromObject(data, obj);
            ReplicaEvent.constructFromObject(data, obj);

            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = ApiClient.convertToType(data['HealthState'], 'String');
            }
            if (data.hasOwnProperty('Property')) {
                obj['Property'] = ApiClient.convertToType(data['Property'], 'String');
            }
            if (data.hasOwnProperty('RemoveWhenExpired')) {
                obj['RemoveWhenExpired'] = ApiClient.convertToType(data['RemoveWhenExpired'], 'Boolean');
            }
            if (data.hasOwnProperty('ReplicaInstanceId')) {
                obj['ReplicaInstanceId'] = ApiClient.convertToType(data['ReplicaInstanceId'], 'Number');
            }
            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('SourceId')) {
                obj['SourceId'] = ApiClient.convertToType(data['SourceId'], 'String');
            }
            if (data.hasOwnProperty('SourceUtcTimestamp')) {
                obj['SourceUtcTimestamp'] = ApiClient.convertToType(data['SourceUtcTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('TimeToLiveMs')) {
                obj['TimeToLiveMs'] = ApiClient.convertToType(data['TimeToLiveMs'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StatefulReplicaHealthReportCreatedEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StatefulReplicaHealthReportCreatedEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StatefulReplicaHealthReportCreatedEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['HealthState'] && !(typeof data['HealthState'] === 'string' || data['HealthState'] instanceof String)) {
            throw new Error("Expected the field `HealthState` to be a primitive type in the JSON string but got " + data['HealthState']);
        }
        // ensure the json data is a string
        if (data['Property'] && !(typeof data['Property'] === 'string' || data['Property'] instanceof String)) {
            throw new Error("Expected the field `Property` to be a primitive type in the JSON string but got " + data['Property']);
        }
        // ensure the json data is a string
        if (data['SourceId'] && !(typeof data['SourceId'] === 'string' || data['SourceId'] instanceof String)) {
            throw new Error("Expected the field `SourceId` to be a primitive type in the JSON string but got " + data['SourceId']);
        }

        return true;
    }


}

StatefulReplicaHealthReportCreatedEvent.RequiredProperties = ["Description", "HealthState", "Property", "RemoveWhenExpired", "ReplicaInstanceId", "SequenceNumber", "SourceId", "SourceUtcTimestamp", "TimeToLiveMs", "EventInstanceId", "Kind", "TimeStamp", "PartitionId", "ReplicaId"];

/**
 * Description of report.
 * @member {String} Description
 */
StatefulReplicaHealthReportCreatedEvent.prototype['Description'] = undefined;

/**
 * Describes the property health state.
 * @member {String} HealthState
 */
StatefulReplicaHealthReportCreatedEvent.prototype['HealthState'] = undefined;

/**
 * Describes the property.
 * @member {String} Property
 */
StatefulReplicaHealthReportCreatedEvent.prototype['Property'] = undefined;

/**
 * Indicates the removal when it expires.
 * @member {Boolean} RemoveWhenExpired
 */
StatefulReplicaHealthReportCreatedEvent.prototype['RemoveWhenExpired'] = undefined;

/**
 * Id of Replica instance.
 * @member {Number} ReplicaInstanceId
 */
StatefulReplicaHealthReportCreatedEvent.prototype['ReplicaInstanceId'] = undefined;

/**
 * Sequence number of report.
 * @member {Number} SequenceNumber
 */
StatefulReplicaHealthReportCreatedEvent.prototype['SequenceNumber'] = undefined;

/**
 * Id of report source.
 * @member {String} SourceId
 */
StatefulReplicaHealthReportCreatedEvent.prototype['SourceId'] = undefined;

/**
 * Source time.
 * @member {Date} SourceUtcTimestamp
 */
StatefulReplicaHealthReportCreatedEvent.prototype['SourceUtcTimestamp'] = undefined;

/**
 * Time to live in milli-seconds.
 * @member {Number} TimeToLiveMs
 */
StatefulReplicaHealthReportCreatedEvent.prototype['TimeToLiveMs'] = undefined;


// Implement ReplicaEvent interface:
/**
 * The identifier for the FabricEvent instance.
 * @member {String} EventInstanceId
 */
ReplicaEvent.prototype['EventInstanceId'] = undefined;
/**
 * Shows there is existing related events available.
 * @member {Boolean} HasCorrelatedEvents
 */
ReplicaEvent.prototype['HasCorrelatedEvents'] = undefined;
/**
 * @member {module:model/FabricEventKind} Kind
 */
ReplicaEvent.prototype['Kind'] = undefined;
/**
 * The time event was logged.
 * @member {Date} TimeStamp
 */
ReplicaEvent.prototype['TimeStamp'] = undefined;
/**
 * An internal ID used by Service Fabric to uniquely identify a partition. This is a randomly generated GUID when the service was created. The partition ID is unique and does not change for the lifetime of the service. If the same service was deleted and recreated the IDs of its partitions would be different.
 * @member {String} PartitionId
 */
ReplicaEvent.prototype['PartitionId'] = undefined;
/**
 * Id of a stateful service replica. ReplicaId is used by Service Fabric to uniquely identify a replica of a partition. It is unique within a partition and does not change for the lifetime of the replica. If a replica gets dropped and another replica gets created on the same node for the same partition, it will get a different value for the id. Sometimes the id of a stateless service instance is also referred as a replica id.
 * @member {Number} ReplicaId
 */
ReplicaEvent.prototype['ReplicaId'] = undefined;




export default StatefulReplicaHealthReportCreatedEvent;

