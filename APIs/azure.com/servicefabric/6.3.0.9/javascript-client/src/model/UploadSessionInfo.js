/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UploadChunkRange from './UploadChunkRange';

/**
 * The UploadSessionInfo model module.
 * @module model/UploadSessionInfo
 * @version 6.3.0.9
 */
class UploadSessionInfo {
    /**
     * Constructs a new <code>UploadSessionInfo</code>.
     * Information about an image store upload session. A session is associated with a relative path in the image store.
     * @alias module:model/UploadSessionInfo
     */
    constructor() { 
        
        UploadSessionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadSessionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadSessionInfo} obj Optional instance to populate.
     * @return {module:model/UploadSessionInfo} The populated <code>UploadSessionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadSessionInfo();

            if (data.hasOwnProperty('ExpectedRanges')) {
                obj['ExpectedRanges'] = ApiClient.convertToType(data['ExpectedRanges'], [UploadChunkRange]);
            }
            if (data.hasOwnProperty('FileSize')) {
                obj['FileSize'] = ApiClient.convertToType(data['FileSize'], 'String');
            }
            if (data.hasOwnProperty('ModifiedDate')) {
                obj['ModifiedDate'] = ApiClient.convertToType(data['ModifiedDate'], 'Date');
            }
            if (data.hasOwnProperty('SessionId')) {
                obj['SessionId'] = ApiClient.convertToType(data['SessionId'], 'String');
            }
            if (data.hasOwnProperty('StoreRelativePath')) {
                obj['StoreRelativePath'] = ApiClient.convertToType(data['StoreRelativePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadSessionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadSessionInfo</code>.
     */
    static validateJSON(data) {
        if (data['ExpectedRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ExpectedRanges'])) {
                throw new Error("Expected the field `ExpectedRanges` to be an array in the JSON data but got " + data['ExpectedRanges']);
            }
            // validate the optional field `ExpectedRanges` (array)
            for (const item of data['ExpectedRanges']) {
                UploadChunkRange.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['FileSize'] && !(typeof data['FileSize'] === 'string' || data['FileSize'] instanceof String)) {
            throw new Error("Expected the field `FileSize` to be a primitive type in the JSON string but got " + data['FileSize']);
        }
        // ensure the json data is a string
        if (data['SessionId'] && !(typeof data['SessionId'] === 'string' || data['SessionId'] instanceof String)) {
            throw new Error("Expected the field `SessionId` to be a primitive type in the JSON string but got " + data['SessionId']);
        }
        // ensure the json data is a string
        if (data['StoreRelativePath'] && !(typeof data['StoreRelativePath'] === 'string' || data['StoreRelativePath'] instanceof String)) {
            throw new Error("Expected the field `StoreRelativePath` to be a primitive type in the JSON string but got " + data['StoreRelativePath']);
        }

        return true;
    }


}



/**
 * List of chunk ranges that image store has not received yet.
 * @member {Array.<module:model/UploadChunkRange>} ExpectedRanges
 */
UploadSessionInfo.prototype['ExpectedRanges'] = undefined;

/**
 * The size in bytes of the uploading file.
 * @member {String} FileSize
 */
UploadSessionInfo.prototype['FileSize'] = undefined;

/**
 * The date and time when the upload session was last modified.
 * @member {Date} ModifiedDate
 */
UploadSessionInfo.prototype['ModifiedDate'] = undefined;

/**
 * A unique ID of the upload session. A session ID can be reused only if the session was committed or removed.
 * @member {String} SessionId
 */
UploadSessionInfo.prototype['SessionId'] = undefined;

/**
 * The remote location within image store. This path is relative to the image store root.
 * @member {String} StoreRelativePath
 */
UploadSessionInfo.prototype['StoreRelativePath'] = undefined;






export default UploadSessionInfo;

