/**
 * Service Fabric Client APIs
 * Service Fabric REST Client APIs allows management of Service Fabric clusters, applications and services.
 *
 * The version of the OpenAPI document: 6.3.0.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeployedServicePackageHealthStateChunkList from './DeployedServicePackageHealthStateChunkList';
import EntityHealthStateChunk from './EntityHealthStateChunk';
import HealthState from './HealthState';

/**
 * The DeployedApplicationHealthStateChunk model module.
 * @module model/DeployedApplicationHealthStateChunk
 * @version 6.3.0.9
 */
class DeployedApplicationHealthStateChunk {
    /**
     * Constructs a new <code>DeployedApplicationHealthStateChunk</code>.
     * Represents the health state chunk of a deployed application, which contains the node where the application is deployed, the aggregated health state and any deployed service packages that respect the chunk query description filters.
     * @alias module:model/DeployedApplicationHealthStateChunk
     * @implements module:model/EntityHealthStateChunk
     */
    constructor() { 
        EntityHealthStateChunk.initialize(this);
        DeployedApplicationHealthStateChunk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeployedApplicationHealthStateChunk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeployedApplicationHealthStateChunk} obj Optional instance to populate.
     * @return {module:model/DeployedApplicationHealthStateChunk} The populated <code>DeployedApplicationHealthStateChunk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeployedApplicationHealthStateChunk();
            EntityHealthStateChunk.constructFromObject(data, obj);

            if (data.hasOwnProperty('HealthState')) {
                obj['HealthState'] = HealthState.constructFromObject(data['HealthState']);
            }
            if (data.hasOwnProperty('DeployedServicePackageHealthStateChunks')) {
                obj['DeployedServicePackageHealthStateChunks'] = DeployedServicePackageHealthStateChunkList.constructFromObject(data['DeployedServicePackageHealthStateChunks']);
            }
            if (data.hasOwnProperty('NodeName')) {
                obj['NodeName'] = ApiClient.convertToType(data['NodeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeployedApplicationHealthStateChunk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeployedApplicationHealthStateChunk</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DeployedServicePackageHealthStateChunks`
        if (data['DeployedServicePackageHealthStateChunks']) { // data not null
          DeployedServicePackageHealthStateChunkList.validateJSON(data['DeployedServicePackageHealthStateChunks']);
        }
        // ensure the json data is a string
        if (data['NodeName'] && !(typeof data['NodeName'] === 'string' || data['NodeName'] instanceof String)) {
            throw new Error("Expected the field `NodeName` to be a primitive type in the JSON string but got " + data['NodeName']);
        }

        return true;
    }


}



/**
 * @member {module:model/HealthState} HealthState
 */
DeployedApplicationHealthStateChunk.prototype['HealthState'] = undefined;

/**
 * @member {module:model/DeployedServicePackageHealthStateChunkList} DeployedServicePackageHealthStateChunks
 */
DeployedApplicationHealthStateChunk.prototype['DeployedServicePackageHealthStateChunks'] = undefined;

/**
 * The name of node where the application is deployed.
 * @member {String} NodeName
 */
DeployedApplicationHealthStateChunk.prototype['NodeName'] = undefined;


// Implement EntityHealthStateChunk interface:
/**
 * @member {module:model/HealthState} HealthState
 */
EntityHealthStateChunk.prototype['HealthState'] = undefined;




export default DeployedApplicationHealthStateChunk;

